TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Sorted
1	0	adlnet/jxapi	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertEquals(expected,actual);	47.79	0	1
1	1	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertSame(expected,actual);	47.79	0	1
1	2	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	47.79	0	1
1	3	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertTrue(expected.equals(actual));	47.79	0	1
1	4	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertNotNull(actual);	47.79	1	1
1	5	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertIterableEquals(expected,actual);	47.79	0	1
1	6	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertLinesMatch(expected.stream().map(Activity::toString).collect(Collectors.toList()),actual.stream().map(Activity::toString).collect(Collectors.toList()));	47.79	0	1
1	7	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertNotSame(expected,actual);	47.79	0	1
1	8	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertNotEquals(expected,actual);	47.79	0	1
1	9	/	ContentActivitiesTest	testGetGrouping	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	47.79	0	1
2	0	adlnet/jxapi	ScoreTest	testSetRaw	assertEquals(expected,actual);	assertEquals(expected,actual);	39.51	0	1
2	1	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(expected==actual);	39.51	0	1
2	2	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(score.getRaw(),actual);	39.51	0	1
2	3	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(score.getRaw()==actual);	39.51	0	1
2	4	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(expected==actual);	39.51	0	1
2	5	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	39.51	0	1
2	6	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(score.getRaw(),actual);	39.51	0	1
2	7	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(score.getRaw()==actual);	39.51	0	1
2	8	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(condition);	39.51	0	1
2	9	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(score);	39.51	0	1
3	0	adlnet/jxapi	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	65.62	1	1
3	1	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertEquals(expected.toString(),actual.toString());	65.62	0	1
3	2	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertTrue(Arrays.equals(expected,actual));	65.62	0	1
3	3	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertNotNull(person);	65.62	0	1
3	4	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertEquals(NAME,person.getName());	65.62	0	1
3	5	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertNotEquals("STR",person.getName());	65.62	0	1
3	6	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertArrayEquals(newString[]{NAME,MBOX});	65.62	0	1
3	7	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertNotSame(person,newPerson());	65.62	0	1
3	8	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertFalse(person.isNew());	65.62	0	1
3	9	/	PersonTest	testSetName	assertArrayEquals(expected,actual);	assertEquals(0,person.getAge());	65.62	0	1
4	0	adlnet/jxapi	AboutTest	testGetVersion	assertNotNull(version);	assertNotNull(version);	36.85	1	1
4	1	/	AboutTest	testGetVersion	assertNotNull(version);	assertEquals(version.size(),1);	36.85	0	1
4	2	/	AboutTest	testGetVersion	assertNotNull(version);	assertSame(version.get(0),"STR");	36.85	0	1
4	3	/	AboutTest	testGetVersion	assertNotNull(version);	assertNotSame(version.get(0),null);	36.85	0	1
4	4	/	AboutTest	testGetVersion	assertNotNull(version);	assertTrue(version.equals(about.getVersion()));	36.85	0	1
4	5	/	AboutTest	testGetVersion	assertNotNull(version);	assertSame(version,about.getVersion());	36.85	0	1
4	6	/	AboutTest	testGetVersion	assertNotNull(version);	assertSame(version.getClass(),ArrayList.class);	36.85	0	1
4	7	/	AboutTest	testGetVersion	assertNotNull(version);	assertNotSame(version.get(0),1.0);	36.85	0	1
4	8	/	AboutTest	testGetVersion	assertNotNull(version);	assertNotSame(version.get(0),10);	36.85	0	1
4	9	/	AboutTest	testGetVersion	assertNotNull(version);	assertNotSame(version,newArrayList<String>());	36.85	0	1
5	0	hazelcast/hazelcast-simulator	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertNotNull(method);	96.58	0	1
5	1	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertNotEquals(method.getParameterCount(),0);	96.58	0	1
5	2	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(void.class));	96.58	0	1
5	3	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertTrue(method.isAnnotationPresent(Teardown.class));	96.58	0	1
5	4	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertTrue(method.getModifiers()==Modifier.PUBLIC);	96.58	0	1
5	5	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertEquals(methods.size(),5);	96.58	0	1
5	6	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertFalse(method.isAnnotationPresent(Before.class));	96.58	0	1
5	7	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertTrue(method.isAccessible());	96.58	0	1
5	8	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertEquals("STR",method.getName());	96.58	1	1
5	9	/	AnnotationFilterTest	testLocalTeardownFilter	assertEquals("STR",method.getName());	assertTrue(method.getDeclaredAnnotations().length>0);	96.58	0	1
6	0	hazelcast/hazelcast-simulator	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotNull(m);	49.86	0	1
6	1	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotEquals(null,m);	49.86	0	1
6	2	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotNull(constructor);	49.86	0	1
6	3	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals("STR","STR");	49.86	0	1
6	4	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertTrue(m.getClass().getName().equals(BusySpinningMetronome.class.getName()));	49.86	0	1
6	5	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertFalse(m.getClass().getName().equals(EmptyMetronome.class.getName()));	49.86	0	1
6	6	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.class,m.getClass());	49.86	1	1
6	7	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.class,m.getClass());	49.86	0	1
6	8	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(Metronome.class,constructor.getParameterTypes()[0]);	49.86	0	1
6	9	/	MetronomeSupplierTest	withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.class,constructor.getParameterTypes()[0]);	49.86	0	1
7	0	hazelcast/hazelcast-simulator	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertNull("STR");	88.47	0	1
7	1	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertNotNull("STR");	88.47	0	1
7	2	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertEquals(null,"STR");	88.47	0	1
7	3	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertNotEquals("STR","STR");	88.47	0	1
7	4	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertFalse("STR");	88.47	0	1
7	5	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertTrue("STR");	88.47	0	1
7	6	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertThrows(UncheckedIOException.class,"STR");	88.47	0	1
7	7	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertDoesNotThrow("STR");	88.47	0	1
7	8	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertSame("STR","STR");	88.47	0	1
7	9	/	BuildInfoUtilsTest	testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertNotSame(null,"STR");	88.47	0	1
8	0	hazelcast/hazelcast-simulator	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotNull(workersHome);	56.52	0	1
8	1	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertTrue(workerProcess.isRunning());	56.52	0	1
8	2	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertTrue(workerProcess.getWorkerHome().exists());	56.52	0	1
8	3	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertSame(workerProcess,workerProcessManager.getWorkerProcesses().get(0));	56.52	0	1
8	4	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertEquals("STR",workerProcessManager.getAddress());	56.52	0	1
8	5	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertArrayEquals(newObject[]{1,2,3},newObject[]{1,2,3});	56.52	0	1
8	6	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertSame(server,workerProcessManager.getServer());	56.52	0	1
8	7	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNull(workerProcess.getStderr().readLine());	56.52	0	1
8	8	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertEquals(parent,newFile(parent,fileName).getParentFile());	56.52	0	1
8	9	/	WorkerProcessFailureMonitorTest	testRun_shouldContinueAfterExceptionDuringDetection	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});	assertNotEquals(DEFAULT_LAST_SEEN_TIMEOUT_SECONDS,workerProcessFailureMonitor.getLastSeenTimeoutSeconds());	56.52	0	1
9	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	45.13	0	1
9	1	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.isFile());	45.13	0	1
9	2	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertFalse(file.isDirectory());	45.13	0	1
9	3	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	45.13	1	1
9	4	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals(parent,file.getParentFile());	45.13	0	1
9	5	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(0,file.length());	45.13	0	1
9	6	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNull(WizardUtils.getFileFromUrl(null,null));	45.13	0	1
9	7	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(url);	45.13	0	1
9	8	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertFalse("STR");	45.13	0	1
9	9	/	WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue("STR");	45.13	0	1
10	0	hazelcast/hazelcast-simulator	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotNull(newUnsecureUUID());	44.66	0	1
10	1	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertNotNull(uuid);	44.66	1	1
10	2	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertEquals(uuid.variant(),2);	44.66	0	1
10	3	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertEquals(uuid.getLeastSignificantBits(),uuid.getLeastSignificantBits());	44.66	0	1
10	4	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertEquals(uuid.getMostSignificantBits(),uuid.getMostSignificantBits());	44.66	0	1
10	5	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid.equals(uuid));	44.66	0	1
10	6	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertEquals(uuid.version(),4);	44.66	0	1
10	7	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid!=null);	44.66	0	1
10	8	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid.timestamp()!=0);	44.66	0	1
10	9	/	UuidUtilTest	testNewUnsecureUUID	assertNotNull(uuid);	assertTrue(uuid.clockSequence()!=0);	44.66	0	1
11	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals("STR",img.getId());	54.4	0	1
11	1	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals(1500,img.getWidth());	54.4	0	1
11	2	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals(2000,img.getHeight());	54.4	0	1
11	3	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertNotNull(img.getServices());	54.4	0	1
11	4	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals(1,img.getServices().size());	54.4	0	1
11	5	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertTrue(img.getServices().get(0)instanceofImageService);	54.4	0	1
11	6	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals("STR",img.getServices().get(0).getId());	54.4	0	1
11	7	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals(ImageApiProfile.LEVEL_TWO,img.getServices().get(0).getProfile());	54.4	0	1
11	8	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertNotNull(anno.getOn());	54.4	0	1
11	9	/	SpecExamplesSerializationTest	testImageResource	assertSerializationEqualsSpec(anno,"STR");	assertEquals("STR",anno.getOn().getId());	54.4	0	1
12	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertEquals("STR",seq.getId());	47.33	0	1
12	1	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertNotNull(rendering);	47.33	0	1
12	2	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertTrue(manifest.getRenderings().contains(rendering));	47.33	0	1
12	3	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertEquals("STR",seq.getLabel().getValue());	47.33	0	1
12	4	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertNull(label);	47.33	0	1
12	5	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertNotNull(mapper);	47.33	0	1
12	6	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertEquals("STR",manifest.getWithin().get(0).getId());	47.33	0	1
12	7	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertEquals("STR",label.toString());	47.33	0	1
12	8	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertNotEquals("STR",seq.getId());	47.33	0	1
12	9	/	SpecExamplesSerializationTest	testGenericService	assertSerializationEqualsSpec(service,"STR");	assertFalse(manifest.getAnnotations().isEmpty());	47.33	0	1
13	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotNull(authService);	46.79	0	1
13	1	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertEquals(5,services.size());	46.79	0	1
13	2	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(services.size()>0);	46.79	0	1
13	3	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(authService.isLoggedIn());	46.79	0	1
13	4	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertFalse(mapper.canSerialize(Object.class));	46.79	0	1
13	5	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertFalse(authService.isExpired());	46.79	0	1
13	6	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertNotEquals(null,authService.getAccessToken());	46.79	0	1
13	7	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(authService.validate());	46.79	0	1
13	8	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertFalse(services.isEmpty());	46.79	0	1
13	9	/	SpecExamplesDeserializationTest	testLoginWithLogout	assertThat(authService.getServices()).hasSize(2);	assertTrue(services.contains(authService));	46.79	0	1
14	0	sharneng/gm4java	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertNotNull(sut);	77.53	0	1
14	1	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertNotNull(args);	77.53	0	1
14	2	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertEquals(2,args.size());	77.53	0	1
14	3	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertEquals("STR",args.get(0));	77.53	0	1
14	4	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertEquals("STR",args.get(1));	77.53	0	1
14	5	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertThrows(IllegalArgumentException.class,()->sut.rotate(90.0,null));	77.53	0	1
14	6	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertDoesNotThrow(()->sut.rotate(90.0,RotationAnnotation.HeightOnly));	77.53	0	1
14	7	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertNotEquals(270.0,sut.rotate(90.0,RotationAnnotation.HeightOnly));	77.53	0	1
14	8	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertSame(sut,sut.rotate(90.0,RotationAnnotation.HeightExceedsWidthOnly));	77.53	0	1
14	9	/	GMOperationTest	rotate_Annotation_HeightLargerThanWidth	assertThat(sut.getCmdArgs(),hasItem("STR"));	assertNull(sut.rotate(-90.0,RotationAnnotation.WidthExceedsHeightOnly));	77.53	0	1
15	0	orientechnologies/orientdb	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertNotNull(doc);	52.26	0	1
15	1	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertNotNull(trackedSet);	52.26	0	1
15	2	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertEquals(original,trackedSet);	52.26	0	1
15	3	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertEquals(8,trackedSet.size());	52.26	0	1
15	4	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(original.containsAll(trackedSet));	52.26	0	1
15	5	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(firedEvents.isEmpty());	52.26	0	1
15	6	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(firedEvents.size()==5);	52.26	0	1
15	7	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(firedEvents.get(0).getChangeType()==OMultiValueChangeEvent.OChangeType.ADD);	52.26	0	1
15	8	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(firedEvents.get(1).getChangeType()==OMultiValueChangeEvent.OChangeType.REMOVE);	52.26	0	1
15	9	/	TrackedSetTest	testReturnOriginalState	assertEquals(original,trackedSet.returnOriginalState(firedEvents));	assertTrue(firedEvents.get(2).getChangeType()==OMultiValueChangeEvent.OChangeType.REMOVE);	52.26	0	1
16	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	66.45	0	1
16	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isInitialized());	66.45	0	1
16	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc);	66.45	0	1
16	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	66.45	0	1
16	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(doc,doc);	66.45	0	1
16	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(doc,doc);	66.45	0	1
16	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.save());	66.45	0	1
16	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isLightweight());	66.45	0	1
16	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isInitialized());	66.45	0	1
16	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(0,doc.fields());	66.45	0	1
17	0	orientechnologies/orientdb	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	75.77	0	1
17	1	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertNull(doc.getRecord());	75.77	0	1
17	2	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.fields()instanceofMap);	75.77	0	1
17	3	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.isTransactionActive());	75.77	0	1
17	4	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.isSameAsSaved(doc));	75.77	0	1
17	5	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getRecordState(doc2).isChanged());	75.77	0	1
17	6	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.fields().size()>0);	75.77	0	1
17	7	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc2.fields().isEmpty());	75.77	0	1
17	8	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(doc2,"STR");	75.77	0	1
17	9	/	ODirtyManagerTest	testSetToNullLink	assertEquals(2,manager.getNewRecords().size());	assertNull("STR");	75.77	0	1
18	0	orientechnologies/orientdb	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSize(0.0));	60.21	0	1
18	1	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(0,getObjectSize(1.0));	60.21	0	1
18	2	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertFalse(getObjectSize(1.0)<0);	60.21	0	1
18	3	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(2.0)>0);	60.21	0	1
18	4	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertNull(null);	60.21	0	1
18	5	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertArrayEquals(newObject[0],newObject[0]);	60.21	0	1
18	6	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertSame(doubleSerializer,doubleSerializer);	60.21	0	1
18	7	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertNotSame(doubleSerializer,newODoubleSerializer());	60.21	0	1
18	8	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(true);	60.21	0	1
18	9	/	DoubleSerializerTest	testFieldSize	assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	assertFalse(false);	60.21	0	1
19	0	orientechnologies/orientdb	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertNotNull(analyzer);	59.79	0	1
19	1	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertNotNull(analyzer.getFieldAnalyzers());	59.79	0	1
19	2	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertNotNull(analyzer.getFieldTypes().get(0));	59.79	0	1
19	3	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertNotNull("STR");	59.79	0	1
19	4	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertTrue(analyzer.getFieldTypes().size()>0);	59.79	0	1
19	5	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertTrue(analyzer.getFields().size()>0);	59.79	0	1
19	6	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertEquals(2,analyzer.getCount());	59.79	0	1
19	7	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertEquals(2,analyzer.getFieldTypes().size());	59.79	0	1
19	8	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertTrue("STR");	59.79	0	1
19	9	/	OLucenePerFieldAnalyzerWrapperTest	shouldReturnCustomAnalyzerForEachField	assertThat(analyzer.getWrappedAnalyzer("STR")).isNotNull();	assertFalse("STR");	59.79	0	1
20	0	orientechnologies/orientdb	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotNull(output);	44.77	0	1
20	1	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotNull(configurator);	44.77	0	1
20	2	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotNull(proc);	44.77	0	1
20	3	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertTrue("STR");	44.77	0	1
20	4	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertTrue(resultinstanceofResult);	44.77	0	1
20	5	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertTrue("STR");	44.77	0	1
20	6	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotEquals("STR",output.toString());	44.77	0	1
20	7	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertEquals("STR",output.toString());	44.77	0	1
20	8	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotEquals(0,output.toString().length());	44.77	0	1
20	9	/	OETLLogTransformerTest	testPostfix	assertThat(out).contains("STR");	assertNotEquals(-1,"STR");	44.77	0	1
21	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex);	85.2	0	1
21	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	85.2	0	1
21	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertSame(changeEvent.getChangeType(),OMultiValueChangeEvent.OChangeType.UPDATE);	85.2	0	1
21	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertSame(changeEvent.getOldValue(),"STR");	85.2	0	1
21	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertSame(changeEvent.getValue(),"STR");	85.2	0	1
21	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(multiValueChangeEvent.getKey(),0);	85.2	0	1
21	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd.entrySet().iterator().next().getKey(),41);	85.2	0	1
21	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsValue(1));	85.2	0	1
21	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(41));	85.2	0	1
21	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get(42));	85.2	0	1
22	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex);	49.05	0	1
22	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals("STR",propertyIndex.getPropertyName());	49.05	0	1
22	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertSame(OType.INTEGER,propertyIndex.getValueType());	49.05	0	1
22	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	49.05	0	1
22	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(OMultiValueChangeEvent.OChangeType.UPDATE,multiValueChangeEvent.getChangeType());	49.05	0	1
22	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(0,multiValueChangeEvent.getKey());	49.05	0	1
22	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals("STR",multiValueChangeEvent.getOldValue());	49.05	0	1
22	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals("STR",multiValueChangeEvent.getValue());	49.05	0	1
22	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	49.05	0	1
22	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,removedKeys.size());	49.05	0	1
23	0	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0,manager.getLockCount());	45.56	0	1
23	1	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(lock);	45.56	0	1
23	2	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.isLocked(null));	45.56	0	1
23	3	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.isHeldByCurrentThread());	45.56	0	1
23	4	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.releaseExclusiveLock(null));	45.56	0	1
23	5	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(1,manager.getLockCount());	45.56	0	1
23	6	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.acquireSharedLock(null));	45.56	0	1
23	7	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.releaseExclusiveLock(null));	45.56	0	1
23	8	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(lock.isHeldByCurrentThread());	45.56	0	1
23	9	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.isLocked(null));	45.56	0	1
24	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult);	52.28	0	1
24	1	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(26,qResult.size());	52.28	0	1
24	2	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult2);	52.28	0	1
24	3	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult2);	52.28	0	1
24	4	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult3);	52.28	0	1
24	5	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult3);	52.28	0	1
24	6	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult4);	52.28	0	1
24	7	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult4);	52.28	0	1
24	8	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult5);	52.28	0	1
24	9	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult5);	52.28	0	1
25	0	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(configurator);	41.19	0	1
25	1	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.containsLoader(OETLStubLoader.class));	41.19	0	1
25	2	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.containsExtractor(OETLStubRandomExtractor.class));	41.19	0	1
25	3	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.getFactories().size()>0);	41.19	0	1
25	4	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(configurator.containsExtractor(OETLStubLoader.class));	41.19	0	1
25	5	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(configurator.containsLoader(OETLStubRandomExtractor.class));	41.19	0	1
25	6	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(2,configurator.getFactories().size());	41.19	0	1
25	7	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(1,res.size());	41.19	0	1
25	8	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(db.exists());	41.19	0	1
25	9	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(db.isActiveOnCurrentThread());	41.19	0	1
26	0	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(g);	72.27	0	1
26	1	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0,g.getRawGraph().getEdgeCount());	72.27	0	1
26	2	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getRawGraph().isClosed());	72.27	0	1
26	3	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getVertices().isEmpty());	72.27	0	1
26	4	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0,factory.countOpenInstances());	72.27	0	1
26	5	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(1,factory.countCreatedInstances());	72.27	0	1
26	6	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.isKeepInMemoryReferences());	72.27	0	1
26	7	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.isAutoStartTx());	72.27	0	1
26	8	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().isRunning());	72.27	0	1
26	9	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().isStarted());	72.27	0	1
27	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	45.46	0	1
27	1	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	45.46	0	1
27	2	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	45.46	1	1
27	3	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	45.46	0	1
27	4	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0)instanceofODocument);	45.46	0	1
27	5	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,res.get(0));	45.46	0	1
27	6	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals("STR",res.get(0).toString());	45.46	0	1
27	7	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,factory.getExtractors());	45.46	0	1
27	8	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,configurator.getObject());	45.46	0	1
27	9	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(configuratorinstanceofOETLProcessorConfigurator);	45.46	0	1
28	0	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(db);	82.43	0	1
28	1	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(2,db.getMetadata().getSchema().getClasses().size());	82.43	0	1
28	2	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue("STR");	82.43	0	1
28	3	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals("STR","STR");	82.43	0	1
28	4	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue("STR");	82.43	0	1
28	5	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue("STR");	82.43	0	1
28	6	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue("STR");	82.43	0	1
28	7	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,"STR");	82.43	0	1
28	8	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull("STR");	82.43	0	1
28	9	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,"STR");	82.43	0	1
29	0	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent);	51.89	0	1
29	1	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(settings);	51.89	0	1
29	2	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(settings.getAttribute(ATTRIBUTES.VALIDATION));	51.89	0	1
29	3	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertFalse(parent.getAttribute(ATTRIBUTES.VALIDATION));	51.89	0	1
29	4	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	51.89	0	1
29	5	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,parent.getAttribute(ATTRIBUTES.CUSTOM));	51.89	0	1
29	6	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,settings.getAttribute(ATTRIBUTES.CUSTOM));	51.89	0	1
29	7	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,parent.getAttribute(ATTRIBUTES.VALIDATION));	51.89	0	1
29	8	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,settings.getAttribute(ATTRIBUTES.VALIDATION));	51.89	0	1
29	9	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertFalse(settings.isEmpty());	51.89	0	1
30	0	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(2,execute.size());	89.42	0	1
30	1	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue("STR");	89.42	0	1
30	2	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue("STR");	89.42	0	1
30	3	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertFalse(execute.isEmpty());	89.42	0	1
30	4	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotNull(execute);	89.42	0	1
30	5	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotEquals(0,execute.size());	89.42	0	1
30	6	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertSame(List.class,execute.getClass());	89.42	0	1
30	7	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertFalse("STR");	89.42	0	1
30	8	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(execute.size()>0);	89.42	0	1
30	9	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotEquals(1,execute.size());	89.42	0	1
31	0	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(m2,m1);	51.58	1	1
31	1	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(collection);	51.58	0	1
31	2	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(builder);	51.58	0	1
31	3	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals("STR",collection.getGeometryType());	51.58	0	1
31	4	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue("STR");	51.58	0	1
31	5	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue("STR");	51.58	0	1
31	6	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotEquals(m1,m2);	51.58	0	1
31	7	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue("STR");	51.58	0	1
31	8	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue("STR");	51.58	0	1
31	9	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue("STR");	51.58	0	1
32	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer);	48.73	0	1
32	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	48.73	0	1
32	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	48.73	0	1
32	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	48.73	0	1
32	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	48.73	0	1
32	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset).limit()>0);	48.73	0	1
32	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset).capacity()>=FIELD_SIZE);	48.73	0	1
32	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,0),FIELD_SIZE);	48.73	0	1
32	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.equals(floatSerializer));	48.73	0	1
32	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(floatSerializer,newOFloatSerializer());	48.73	0	1
33	0	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(multiKey));	71.36	0	1
33	1	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(null));	71.36	0	1
33	2	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Collections.emptyList())));	71.36	0	1
33	3	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(multiKey,multiKey);	71.36	0	1
33	4	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey,"STR");	71.36	0	1
33	5	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue("STR");	71.36	0	1
33	6	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(multiKey,"STR");	71.36	0	1
33	7	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse("STR");	71.36	0	1
33	8	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey,newOMultiKey(Collections.emptyList()));	71.36	0	1
33	9	/	OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey,null);	71.36	0	1
34	0	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l);	42.49	0	1
34	1	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l2);	42.49	0	1
34	2	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l3);	42.49	0	1
34	3	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.length(),3);	42.49	0	1
34	4	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.head(),"STR");	42.49	0	1
34	5	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l.reverse().reverse()));	42.49	0	1
34	6	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l2.equals(l));	42.49	0	1
34	7	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.reverse().equals(l.reverse()));	42.49	0	1
34	8	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(create(l2.toList()).equals(l2));	42.49	0	1
34	9	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.tail().tail().head(),"STR");	42.49	0	1
35	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(expectedSize,flatMapResult.size());	64.1	0	1
35	1	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(flatMapResult);	64.1	0	1
35	2	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(flatMapResult.containsAll(expectedResult));	64.1	0	1
35	3	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertFalse(flatMapResult.isEmpty());	64.1	0	1
35	4	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotEquals(expectedResult,flatMapResult);	64.1	0	1
35	5	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(tokens);	64.1	0	1
35	6	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue("STR");	64.1	0	1
35	7	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(3,"STR");	64.1	0	1
35	8	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals("STR","STR");	64.1	0	1
35	9	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(coll);	64.1	0	1
36	0	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotNull(uppercaseFirst);	42.39	0	1
36	1	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(uppercaseFirst.apply(null).isDefined());	42.39	0	1
36	2	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(2,2);	42.39	0	1
36	3	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(true);	42.39	0	1
36	4	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(false);	42.39	0	1
36	5	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(1,2);	42.39	0	1
36	6	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals("STR","STR");	42.39	0	1
36	7	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals("STR","STR");	42.39	0	1
36	8	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals("STR","STR");	42.39	0	1
36	9	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue("STR");	42.39	0	1
37	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	42.03	1	1
37	1	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(resourceAsStreaminstanceofOutputStream);	42.03	0	1
37	2	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue("STR");	42.03	0	1
37	3	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(makeSSLSocketFactory(keyAndTrustStoreClasspathPath,passphrase));	42.03	0	1
37	4	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(keyManagerFactory.getKeyManagers().length==0);	42.03	0	1
37	5	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse("STR");	42.03	0	1
37	6	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue("STR");	42.03	0	1
37	7	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue("STR");	42.03	0	1
37	8	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(keyStorePath.isEmpty());	42.03	0	1
37	9	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertEquals("STR",keystore.getType());	42.03	0	1
38	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.connectionManager);	60.55	0	1
38	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.taskScanner);	60.55	0	1
38	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.reconnectManager);	60.55	0	1
38	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.connectionMonitor);	60.55	0	1
38	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.userProcessors);	60.55	0	1
38	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(this.connectionManager.isShutdown());	60.55	0	1
38	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(this.taskScanner.isShutdown());	60.55	0	1
38	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(this.reconnectManager.isStarted());	60.55	0	1
38	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(this.connectionMonitor.isStarted());	60.55	0	1
38	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull("STR");	60.55	0	1
39	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,"STR");	38.5	0	1
39	1	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,focalInstance.count(null));	38.5	0	1
39	2	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,"STR");	38.5	0	1
39	3	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(-1,"STR");	38.5	0	1
39	4	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(1,"STR");	38.5	0	1
39	5	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,"STR");	38.5	0	1
39	6	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(4,"STR");	38.5	0	1
39	7	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(5,"STR");	38.5	0	1
39	8	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull("STR");	38.5	0	1
39	9	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNull("STR");	38.5	0	1
40	0	nidi3/graphviz-java	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertNotNull(<FOCAL>);	45.97	0	1
40	1	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertNotEquals(null,<FOCAL>);	45.97	0	1
40	2	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertTrue(<FOCAL>!=null);	45.97	0	1
40	3	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertEquals(<FOCAL>,<FOCAL>);	45.97	0	1
40	4	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertFalse(<FOCAL>==null);	45.97	0	1
40	5	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertTrue(<FOCAL>instanceofAttributes);	45.97	0	1
40	6	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertTrue(<SETUP>instanceofObject);	45.97	0	1
40	7	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertEquals("STR",<FOCAL>.getLabel());	45.97	0	1
40	8	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertTrue(<FOCAL>.getKind().equals(M_RECORD));	45.97	0	1
40	9	/	RecordsTest	mlabel	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.mLabel("STR"));	assertNotEquals(0,<FOCAL>.hashCode());	45.97	0	1
41	0	nidi3/graphviz-java	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertNotNull(head);	85.71	0	1
41	1	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertEquals(1d,head.getX());	85.71	0	1
41	2	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertEquals(2d,head.getY());	85.71	0	1
41	3	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertNotEquals(null,head);	85.71	0	1
41	4	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertTrue("STR");	85.71	0	1
41	5	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertFalse("STR");	85.71	0	1
41	6	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertTrue(headinstanceofEndLabel);	85.71	0	1
41	7	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertNotEquals(0,head.hashCode());	85.71	0	1
41	8	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertNotSame(null,head);	85.71	0	1
41	9	/	EndLabelTest	attrHead	assertEquals(attrs(attr("STR",head),attr("STR",1d),attr("STR",2d)),attrs(head));	assertNotSame(head,"STR");	85.71	0	1
42	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0);	47.64	0	1
42	1	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0instanceofProtocol);	47.64	0	1
42	2	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNull(protocol0.getClass().getSuperclass());	47.64	0	1
42	3	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().isEmpty());	47.64	0	1
42	4	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.toString().contains(protocol0.getProvidedProtocol()));	47.64	0	1
42	5	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertSame(protocol0,protocol0);	47.64	0	1
42	6	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.equals(newProtocol(protocol0.getProvidedProtocol())));	47.64	0	1
42	7	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	47.64	1	1
42	8	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(null,protocol0.getProvidedProtocol());	47.64	0	1
42	9	/	ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame(protocol0.getProvidedProtocol(),"STR");	47.64	0	1
43	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	97.47	1	1
43	1	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse(!deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	2	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(true,deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	3	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false,deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	4	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	5	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotSame(false,deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	6	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNull(!deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	7	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertSame(true,deflateExtension.isServerNoContextTakeover());	97.47	0	1
43	8	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertThat(deflateExtension.isServerNoContextTakeover(),equalTo(true));	97.47	0	1
43	9	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertThat(!deflateExtension.isServerNoContextTakeover(),is(false));	97.47	0	1
44	0	PeterisP/morphology	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertTrue(!wordformList.isEmpty());	60.44	0	1
44	1	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertEquals(expectedCount,wordformList.size());	60.44	0	1
44	2	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertIterableEquals("STR",expectedList,actualList);	60.44	0	1
44	3	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertTrue(attributeValues.containsAttribute(attribute));	60.44	0	1
44	4	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertFalse(!attributeValues.containsAttribute(attribute));	60.44	0	1
44	5	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertEquals(expectedValue,attributeValues.getAttributeValue(attribute));	60.44	0	1
44	6	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertEquals(expectedLength,stringValue.length());	60.44	0	1
44	7	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertEquals(expectedValue1,actualValue1);	60.44	0	1
44	8	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertNotEquals(expectedValue2,actualValue2);	60.44	0	1
44	9	/	MorphologyTest	multistem_generateinflections	assertInflection(sairšana,pagaatne,"STR");	assertNull(variable);	60.44	0	1
45	0	PeterisP/morphology	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertNotNull(locītājs);	55.7	0	1
45	1	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertTrue(locītājsinstanceofAnalyzer);	55.7	0	1
45	2	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertEquals(0,locītājs.getCacheSize());	55.7	0	1
45	3	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertEquals(0,locītājs.getCacheHitCount());	55.7	0	1
45	4	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertEquals(0,locītājs.getCacheMissCount());	55.7	0	1
45	5	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertFalse(locītājs.isCacheEnabled());	55.7	0	1
45	6	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertNotNull(locītājs.getDefaultLanguageCode());	55.7	0	1
45	7	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertNotNull(locītājs.getAttributeValuesMap());	55.7	0	1
45	8	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertNotEquals(null,locītājs.getLoadedDictionarySize());	55.7	0	1
45	9	/	MorphologyTest	aizkost	assertInflection(aizkost,tu,"STR");	assertEquals(0,locītājs.getCacheEvictionCount());	55.7	0	1
46	0	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	50.27	0	1
46	1	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	50.27	0	1
46	2	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableAllGuesses);	50.27	0	1
46	3	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	50.27	1	1
46	4	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(vārds.isRecognized());	50.27	0	1
46	5	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableGuessing);	50.27	0	1
46	6	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessVerbs);	50.27	0	1
46	7	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	50.27	0	1
46	8	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	50.27	0	1
46	9	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableAllGuesses);	50.27	0	1
47	0	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	73.46	0	1
47	1	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.size());	73.46	0	1
47	2	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNull("STR");	73.46	0	1
47	3	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.isEmpty());	73.46	0	1
47	4	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(null,metadata);	73.46	0	1
47	5	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNull("STR");	73.46	0	1
47	6	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.equals(null));	73.46	0	1
47	7	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(md.equals(newHashMap<String,String[]>()));	73.46	0	1
47	8	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.equals(metadata));	73.46	0	1
47	9	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(md.toString(),metadata.toString());	73.46	0	1
48	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),expectedResult);	85.17	0	1
48	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlFilter.filter(testSourceUrl,newMetadata(),testUrl).equals(expectedResult));	85.17	0	1
48	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(urlFilter.filter(testSourceUrl,newMetadata(),testUrl));	85.17	0	1
48	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(urlFilter.filter(testSourceUrl,newMetadata(),testUrl).isEmpty());	85.17	0	1
48	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),normalizedUrl);	85.17	0	1
48	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),testUrl);	85.17	0	1
48	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),"STR");	85.17	0	1
48	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter).equals(expectedResult));	85.17	0	1
48	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	85.17	0	1
48	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter).isEmpty());	85.17	0	1
49	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	42.59	0	1
49	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	42.59	0	1
49	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	42.59	0	1
49	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(testSourceUrl);	42.59	0	1
49	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(sourceUrl);	42.59	0	1
49	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(sourceMetadata);	42.59	0	1
49	6	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(urlToFilter);	42.59	0	1
49	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	42.59	0	1
49	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(urlToFilter,urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	42.59	0	1
49	9	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	42.59	0	1
50	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a,b);	66.83	0	1
50	1	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotEquals(a,null);	66.83	0	1
50	2	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotNull(a);	66.83	0	1
50	3	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.equals(a));	66.83	0	1
50	4	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertFalse(a.equals(null));	66.83	0	1
50	5	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.equals(b)&&b.equals(a)&&a.equals(a));	66.83	0	1
50	6	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a.equals(b),b.equals(a));	66.83	0	1
50	7	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a.hashCode(),b.hashCode());	66.83	0	1
50	8	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotNull(a.getState());	66.83	0	1
50	9	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotEquals(b,null);	66.83	0	1
51	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved()&&p.getDistanceToGoal()==1);	32.55	0	1
51	1	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved()||p.getDistanceToGoal()==0);	32.55	0	1
51	2	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	32.55	0	1
51	3	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	32.55	0	1
51	4	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(0,p.getDistanceToGoal());	32.55	0	1
51	5	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(p.getDistanceToGoal(),1);	32.55	0	1
51	6	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(1,getSolution());	32.55	0	1
51	7	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	32.55	0	1
51	8	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotSame(p,null);	32.55	0	1
51	9	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(pinstanceofPuzzle);	32.55	0	1
52	0	nidi3/graphviz-java	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	1	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	2	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	3	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	4	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	5	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	6	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	7	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	8	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
52	9	/	RecordsTest	rec	assertEquals("STR",Records.rec("STR"));	assertEquals("STR","STR");	64.3	0	1
53	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertTrue(database.isOpen());	50.18	0	1
53	1	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertNotNull(database);	50.18	0	1
53	2	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertNotNull(id);	50.18	0	1
53	3	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertNotNull(id.getIdentity().toString());	50.18	0	1
53	4	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertEquals(1,result.getUpdateCount());	50.18	0	1
53	5	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertNotNull(result);	50.18	0	1
53	6	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertTrue(result.hasNext());	50.18	0	1
53	7	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertTrue(result.close());	50.18	0	1
53	8	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertTrue(database.getTransaction().isActive());	50.18	0	1
53	9	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	assertEquals((long)result.next().getProperty("STR"),1L);	assertEquals(OType.STRING,"STR");	50.18	0	1
54	0	orientechnologies/orientdb	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertNull("STR");	47.82	0	1
54	1	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertNotNull("STR");	47.82	0	1
54	2	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertNull(db.getMetadata().getIndexManager().getIndex(className));	47.82	0	1
54	3	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,clazz.getClassIndex().getType());	47.82	0	1
54	4	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertEquals(0,clazz.getIndexes().size());	47.82	0	1
54	5	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertTrue("STR");	47.82	0	1
54	6	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertFalse(clazz.getIndexes().isEmpty());	47.82	0	1
54	7	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertTrue("STR");	47.82	0	1
54	8	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertFalse("STR");	47.82	0	1
54	9	/	OCreateIndexStatementExecutionTest	testIfNotExists	assertNull(db.getMetadata().getIndexManager().getIndex(className+"STR"));	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,clazz.getClassIndex().getType());	47.82	0	1
55	0	orientechnologies/orientdb	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	28.05	1	1
55	1	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(3,cls.declaredProperties().size());	28.05	0	1
55	2	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	28.05	0	1
55	3	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(context.exists(name.getMethodName()));	28.05	0	1
55	4	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(ODatabaseType.PLOCAL,type);	28.05	0	1
55	5	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(8,db.get(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS));	28.05	0	1
55	6	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(db.isClosed());	28.05	0	1
55	7	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue("STR");	28.05	0	1
55	8	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(context);	28.05	0	1
55	9	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(path,"STR");	28.05	0	1
56	0	orientechnologies/orientdb	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(orientDB);	42.9	0	1
56	1	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session);	42.9	0	1
56	2	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(session.isOpen());	42.9	0	1
56	3	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session.getMetadata().getSequenceLibrary());	42.9	0	1
56	4	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,session.getMetadata().getSequenceLibrary().getSequenceNames().size());	42.9	0	1
56	5	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,count);	42.9	0	1
56	6	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session.getMetadata().getIndexManager());	42.9	0	1
56	7	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,session.getMetadata().getIndexManager().getIndexes().size());	42.9	0	1
56	8	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(session.getMetadata().getSchema().getClasses().isEmpty());	42.9	0	1
56	9	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNull("STR");	42.9	0	1
57	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertNotNull(propertyIndex);	85.71	0	1
	1	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertEquals("STR",propertyIndex.getPropertyName());	85.71	0	1
	2	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertEquals(OType.INTEGER,propertyIndex.getType());	85.71	0	1
	3	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertNotEquals("STR",className);	85.71	0	1
	4	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertTrue(propertyIndex.getPropertyName()instanceofString);	85.71	0	1
	5	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertFalse(propertyIndex.getType()instanceofString);	85.71	0	1
	6	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertSame(propertyIndex.getType(),OType.INTEGER);	85.71	0	1
	7	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertNotSame("STR",className);	85.71	0	1
	8	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertTrue("STR");	85.71	0	1
	9	/	OPropertyIndexDefinitionTest	testClassName	assertEquals("STR",propertyIndex.getClassName());	assertArrayEquals("STR",OType.INTEGER.toString()});	85.71	0	1
58	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(db);	29.69	0	1
	1	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(schema);	29.69	0	1
	2	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(result);	29.69	0	1
	3	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(db.isActiveOnCurrentThread());	29.69	0	1
	4	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(db.isClosed());	29.69	0	1
	5	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(1,db.getMetadata().getSchema().getClasses().size());	29.69	0	1
	6	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(db.getLevel(),OStorage.LOWEST_SUPPORTED_PROTOCOL_VERSION);	29.69	0	1
	7	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(db.getName(),db.getStorage().getName());	29.69	0	1
	8	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotEquals(db.hashCode(),db.getMetadata().hashCode());	29.69	0	1
	9	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(result.hasNext());	29.69	0	1
59	0	orientechnologies/orientdb	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.containsKey(multiKey));	85.29	0	1
	1	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNull(mapResult);	85.29	1	1
	2	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertEquals(1,multiKeyMap.size());	85.29	0	1
	3	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.containsValue(newObject()));	85.29	0	1
	4	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	85.29	0	1
	5	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.keySet().contains(multiKey));	85.29	0	1
	6	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotNull(multiKeyMap);	85.29	0	1
	7	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	85.29	0	1
	8	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotEquals(multiKey.hashCode(),anotherMultiKey.hashCode());	85.29	0	1
	9	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotNull(multiKey);	85.29	0	1
60	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotNull(db);	25.29	0	1
	1	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotNull(result);	25.29	0	1
	2	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(resultinstanceofList<?>);	25.29	0	1
	3	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.size()>0);	25.29	0	1
	4	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertFalse(result.isEmpty());	25.29	0	1
	5	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.get(0)instanceofODocument);	25.29	0	1
11	0	orientechnologies/orientdb	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(db);	36.55	0	1
	1	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals("STR",companyClass.getName());	36.55	0	1
	2	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(companyClass.existsProperty(PROP_NAME));	36.55	0	1
	3	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.isReadonly());	36.55	0	1
	4	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(PROP_NAME,nameProperty.getFullName());	36.55	0	1
	5	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(getName(),equalTo(PROP_NAME));	36.55	0	1
	6	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.isMandatory());	36.55	0	1
	7	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue("STR");	36.55	0	1
	8	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse("STR");	36.55	0	1
	9	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.isReadonly());	36.55	0	1
12	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertNotNull(db);	56.93	0	1
	1	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertTrue(db.exists());	56.93	0	1
	2	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	56.93	0	1
	3	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	56.93	1	1
	4	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	56.93	0	1
	5	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertThrows(NoSuchElementException.class,()->qResult.next());	56.93	0	1
	6	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(2,qResult.get(0).getPropertyNames().size());	56.93	0	1
	7	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	56.93	0	1
	8	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertFalse(getProfilerInstance().isRecording());	56.93	0	1
	9	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(10,getProfilerInstance().getStatistics().size());	56.93	0	1
13	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	45.67	1	1
	1	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	45.67	0	1
	2	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotNull(qResult.getExecutionPlan());	45.67	0	1
	3	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNull(qResult.getExecutionPlan());	45.67	0	1
	4	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getExecutionPlan().getCost().getValue());	45.67	0	1
	5	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(0,qResult.getExecutionPlan().getCost().getValue());	45.67	0	1
	6	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotNull(qResult.getExecutionStats());	45.67	0	1
	7	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNull(qResult.getExecutionStats().getMetadata());	45.67	0	1
	8	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getExecutionStats().getTotalRecords());	45.67	0	1
	9	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(0,qResult.getExecutionStats().getTotalRecords());	45.67	0	1
14	0	orientechnologies/orientdb	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	36.35	0	1
	1	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	36.35	0	1
	2	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	36.35	0	1
	3	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)==0);	36.35	0	1
	4	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)>=0);	36.35	0	1
	5	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)>=0);	36.35	0	1
	6	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)<0);	36.35	0	1
	7	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)!=0);	36.35	0	1
	8	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)<=0);	36.35	0	1
	9	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertNotEquals(0L,readAsLong(bytes));	36.35	0	1
15	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertTrue(result.hasNext());	39.21	1	1
	1	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertFalse(result.hasNext());	39.21	0	1
	2	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertEquals("STR","STR");	39.21	0	1
	3	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNotNull("STR");	39.21	0	1
	4	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNull("STR");	39.21	0	1
	5	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertEquals(2,result.stream().count());	39.21	0	1
	6	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNotEquals("STR","STR");	39.21	0	1
	7	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertArrayEquals("STR","STR");	39.21	0	1
	8	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertSame(params,newHashMap<>());	39.21	0	1
	9	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertNotSame("STR",result);	39.21	0	1
16	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotNull(result);	40.07	0	1
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotSame(null,result);	40.07	0	1
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(0.0F,result);	40.07	0	1
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue(resultinstanceofFloat);	40.07	1	1
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertEquals(10.5F,result);	40.07	0	1
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertFalse(resultinstanceofDouble);	40.07	0	1
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(0.0D,result);	40.07	0	1
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue(resultinstanceofComparable);	40.07	0	1
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(-10.5F,result);	40.07	0	1
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertEquals(Float.valueOf(10.5F),result);	40.07	0	1
17	0	orientechnologies/orientdb	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertNotNull(response);	53.01	0	1
	1	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(responseinstanceofOBinaryResponse);	53.01	0	1
	2	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(response.getResponseCode(),200);	53.01	0	1
	3	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.hasError());	53.01	0	1
	4	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseTime()>0);	53.01	0	1
	5	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.getResponseText().isEmpty());	53.01	0	1
	6	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(response.getResponseStatus(),"STR");	53.01	0	1
	7	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseText().length()>=4);	53.01	0	1
	8	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseTime()>=0);	53.01	0	1
	9	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.isClosed());	53.01	0	1
18	0	hazelcast/hazelcast-simulator	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(4,result.size());	69.91	0	1
	1	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	69.91	0	1
	2	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.CLIENT,result.get(0).getParameters().getTargetType());	69.91	0	1
	3	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(select(input,false).size()>0);	69.91	0	1
	4	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(select(input,false).contains(result.get(0)));	69.91	0	1
	5	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.get(1).getParameters().getClient());	69.91	0	1
	6	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.get(2).getParameters().getMajorVersion());	69.91	0	1
	7	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.get(1).getParameters().getClient());	69.91	0	1
	8	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result.get(3).getAgentAddress());	69.91	0	1
	9	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(result.get(0),result.get(1));	69.91	0	1
19	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotNull(classInstance);	32.05	0	1
	1	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertThrows(IllegalArgumentException.class,()->invokeMethod(classInstance,null,args));	32.05	0	1
	2	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getParameterCount()==args.length);	32.05	0	1
	3	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getReturnType().equals(Integer.class));	32.05	0	1
	4	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNull(method.invoke(null));	32.05	0	1
	5	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertFalse(method.isVarArgs());	32.05	0	1
	6	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getExceptionTypes().length==1);	32.05	0	1
	7	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertEquals(3,args.length);	32.05	0	1
	8	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotEquals(classInstance.getClass(),method.getDeclaringClass());	32.05	0	1
	9	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertSame(classInstance,method.invoke(classInstance,args));	32.05	0	1
20	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNull(field);	76.49	0	1
	1	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotNull(field);	76.49	1	1
	2	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(field!=null);	76.49	0	1
	3	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertFalse(field==null);	76.49	0	1
	4	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertEquals(field,"STR");	76.49	0	1
	5	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotSame(field,"STR");	76.49	0	1
	6	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertSame(field,"STR");	76.49	0	1
	7	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNull("STR");	76.49	0	1
	8	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotNull("STR");	76.49	0	1
	9	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(GetFieldTest.class.getDeclaredFields().length>0);	76.49	0	1
21	0	hazelcast/hazelcast-simulator	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getCause()instanceofRuntimeException);	34.6	0	1
	1	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	34.6	0	1
	2	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	34.6	1	1
	3	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exceptioninstanceofException);	34.6	0	1
	4	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(ReflectionException.class,exception.getClass());	34.6	0	1
	5	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getClass().getSimpleName());	34.6	0	1
	6	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(Throwable.class,exception.getCause().getClass().getSuperclass());	34.6	0	1
	7	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getCause().getClass().getName());	34.6	0	1
	8	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exceptioninstanceofRuntimeException);	34.6	0	1
	9	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getStackTrace()[0].isNativeMethod());	34.6	0	1
22	0	hazelcast/hazelcast-simulator	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotNull(throttlingLogger);	60.62	0	1
	1	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertSame(loggerMock,throttlingLogger.getLogger());	60.62	0	1
	2	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertEquals(rateMs,throttlingLogger.getMaximumRateMs());	60.62	0	1
	3	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertEquals(1,throttlingLogger.getRateLimiter().getRate());	60.62	0	1
	4	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertTrue(true);	60.62	0	1
	5	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertFalse(false);	60.62	0	1
	6	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotNull(ThrottlingLogger.newLogger(loggerMock,rateMs));	60.62	0	1
	7	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotEquals(null,throttlingLogger);	60.62	0	1
	8	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertSame(throttlingLogger,throttlingLogger);	60.62	0	1
	9	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotSame(ThrottlingLogger.newLogger(loggerMock,rateMs),throttlingLogger);	60.62	0	1
23	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertNotNull(file);	28.46	1	1
	1	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.canRead());	28.46	0	1
	2	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.getAbsolutePath(),"STR");	28.46	0	1
	3	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.getName(),"STR");	28.46	0	1
	4	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.isFile());	28.46	0	1
	5	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.getParentFile().equals(parent));	28.46	0	1
	6	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.canExecute());	28.46	0	1
	7	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertFalse(file.isHidden());	28.46	0	1
	8	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.compareTo(parent),14);	28.46	0	1
	9	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.length(),4392);	28.46	0	1
24	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(expectedFile.exists());	30.31	0	1
	1	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getAbsolutePath(),actualFile.getAbsolutePath());	30.31	0	1
	2	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(actualFile.isFile());	30.31	0	1
	3	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getParentFile(),actualFile.getParentFile());	30.31	0	1
	4	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals("STR",actualFile.getName());	30.31	0	1
	5	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getParent(),actualFile.getParent());	30.31	0	1
	6	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(expectedFile.isDirectory());	30.31	0	1
	7	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(actualFile.isDirectory());	30.31	0	1
	8	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(actualFile.exists());	30.31	0	1
	9	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertNotNull(actualFile);	30.31	0	1
25	0	hazelcast/hazelcast-simulator	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertNotNull(joined);	24.27	0	1
	1	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertNotEquals(null,joined);	24.27	0	1
	2	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertFalse(joined.isEmpty());	24.27	0	1
	3	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertNotSame(joined,"STR");	24.27	0	1
	4	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertNotEquals("STR",joined);	24.27	0	1
	5	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertTrue(joined.contains(DEFAULT_DELIMITER));	24.27	0	1
	6	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertEquals(DEFAULT_DELIMITER,"STR");	24.27	0	1
	7	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertEquals(DEFAULT_DELIMITER,"STR");	24.27	0	1
	8	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertEquals(joined.trim(),"STR");	24.27	0	1
	9	/	FormatUtilsTest	testJoinEmptyString	assertEquals("STR",joined);	assertNotSame(Collections.EMPTY_LIST,collection);	24.27	0	1
26	0	hazelcast/hazelcast-simulator	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(properties);	32.49	1	1
	1	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(inputStream);	32.49	0	1
	2	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertThrows(NullPointerException.class,()->GitInfo.loadGitProperties(null));	32.49	0	1
	3	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull("STR");	32.49	0	1
	4	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotSame(properties,newProperties());	32.49	0	1
	5	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertThrows(FileNotFoundException.class,"STR");	32.49	0	1
	6	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertThrows(IOException.class,"STR");	32.49	0	1
	7	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotSame(inputStream,"STR");	32.49	0	1
	8	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertEquals("STR","STR");	32.49	0	1
	9	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertEquals("STR","STR");	32.49	0	1
27	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env);	56.09	0	1
	1	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR","STR");	56.09	0	1
	2	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR","STR");	56.09	0	1
	3	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR","STR");	56.09	0	1
	4	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(getCiName());	56.09	0	1
	5	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(!getCiName().isEmpty());	56.09	0	1
	6	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",getCiName());	56.09	0	1
	7	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",getCiName());	56.09	0	1
	8	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(condition);	56.09	0	1
	9	/	CiEnvironmentTest	recognises_tfs	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(condition);	56.09	0	1
28	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,"STR");	43.91	0	1
	1	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	2	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	3	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	4	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	5	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	6	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	7	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	8	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
	9	/	ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue("STR");	43.91	0	1
29	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertNotNull(url);	74.73	0	1
	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertEquals("STR",url);	74.73	1	1
	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertNotEquals("STR",url);	74.73	0	1
	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertTrue("STR");	74.73	0	1
	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertFalse("STR");	74.73	0	1
	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertNotEquals(null,url);	74.73	0	1
	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertEquals(url.toUpperCase(),url.toUpperCase());	74.73	0	1
	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertEquals(1,"STR");	74.73	0	1
	8	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertNull(null);	74.73	0	1
	9	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	assertEquals("STR",url);	assertArrayEquals("STR",url.toCharArray());	74.73	0	1
30	0	dbmdz/iiif-apis	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertNotNull(manifest);	53.66	0	1
	1	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertNotNull(mapper);	53.66	0	1
	2	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertNull(getLogoUri());	53.66	0	1
	3	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertNotNull(logos);	53.66	0	1
	4	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertThrows(Exception.class,()->{thrownewException(});	53.66	0	1
	5	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertSame(expected,actual);	53.66	0	1
	6	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertNotSame(expectedObject,actualObject);	53.66	0	1
	7	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertEquals(expectedResults,actualResults);	53.66	0	1
	8	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertFalse(logoString.isEmpty());	53.66	0	1
	9	/	ParsingTest	testManifestWithStringLogo	assertThat(manifest.getLogoUri().toString()).isEqualTo("STR");	assertTrue(expectedNumber>actualNumber);	53.66	0	1
31	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertNotNull(err);	78.17	0	1
	1	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertEquals("STR",err.getDescription());	78.17	0	1
	2	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertNotEquals(null,err.getDescription());	78.17	0	1
	3	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertTrue("STR");	78.17	0	1
	4	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertThrows(InvalidCredentials.class,"STR");	78.17	0	1
	5	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertSame(err.getDescription(),"STR");	78.17	0	1
	6	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertNotSame(null,err.getDescription());	78.17	0	1
	7	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertArrayEquals(2},newint[]{1);	78.17	0	1
	8	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertTrue(true);	78.17	0	1
	9	/	SpecExamplesSerializationTest	testErrorCondition	assertSerializationEqualsSpec(err,"STR");	assertFalse(false);	78.17	0	1
32	0	NanoHttpd/nanohttpd	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotNull(contentEncoding);	34.34	0	1
	1	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNull(contentEncoding.getValue());	34.34	0	1
	2	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotEquals(null,contentEncoding);	34.34	0	1
	3	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotSame(null,contentEncoding);	34.34	0	1
	4	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNull(contentEncoding);	34.34	0	1
	5	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertEquals(Status.OK.getRequestStatus(),response.getStatusLine().getStatusCode());	34.34	0	1
	6	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertEquals(200,response.getStatusLine().getStatusCode());	34.34	0	1
	7	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotEquals(404,response.getStatusLine().getStatusCode());	34.34	0	1
	8	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertTrue(response.getEntity().getContentLength()>0);	34.34	0	1
	9	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertFalse(response.getEntity().getContentLength()==0);	34.34	0	1
33	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	25.53	1	1
	1	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(!macAddress.isMulticast());	25.53	0	1
	2	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedBooleanValue,macAddress.isMulticast());	25.53	0	1
	3	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress);	25.53	0	1
	4	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.getAddress());	25.53	0	1
	5	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertArrayEquals(expectedByteArray,macAddress.getAddress());	25.53	0	1
	6	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedByteValue,macAddress.getAddress()[0]);	25.53	0	1
	7	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedIntValue,macAddress.getAddressLength());	25.53	0	1
34	0	AlejandroRivera/embedded-rabbitmq	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotNull(port);	46.03	0	1
	1	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertTrue(port>=0);	46.03	0	1
	2	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertTrue(port<=65535);	46.03	0	1
	3	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertFalse(port<0);	46.03	0	1
	4	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertFalse(port>65535);	46.03	0	1
	5	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertEquals(port,port);	46.03	0	1
	6	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertSame(port,port);	46.03	0	1
	7	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,0);	46.03	0	1
	8	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,1);	46.03	0	1
	9	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,80);	46.03	0	1
35	0	AlejandroRivera/embedded-rabbitmq	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertEquals("STR",plugin.getName());	41.57	0	1
	1	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertNotNull(plugin);	41.57	0	1
	2	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertEquals(3.5,plugin.getVersion());	41.57	0	1
	3	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertTrue(plugin.getName()!=null&&!plugin.getName().isEmpty());	41.57	0	1
	4	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertEquals("STR",plugin.getName().substring(0,6));	41.57	0	1
	5	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertEquals(17,output.length());	41.57	0	1
	6	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertTrue("STR");	41.57	0	1
	7	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertFalse("STR");	41.57	0	1
	8	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertTrue("STR");	41.57	0	1
	9	/	PluginTest	testExplicitlyEnabledPluginLine	assertThat(plugin.getName(),equalTo("STR"));	assertEquals("STR",output.trim());	41.57	0	1
36	0	PeterisP/morphology	MorphologyTest	celties	assertTrue(w.isRecognized());	assertFalse(wordforms.isEmpty());	53.03	0	1
	1	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(!wordforms.isEmpty());	53.03	0	1
	2	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getWordForms(w).containsAll(w.getWordForms()));	53.03	0	1
	3	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getAllLemmas(w).size()>=1);	53.03	0	1
	4	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertEquals(0,locītājs.getWordForms(w).size());	53.03	0	1
	5	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.dictionaryContains(w.getLemma()));	53.03	0	1
	6	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNull(w.getLemma());	53.03	0	1
	7	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertEquals(0,locītājs.getCacheSize());	53.03	0	1
	8	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getWord(w.toString())!=null);	53.03	0	1
	9	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNotNull(locītājs.getAnalyzer());	53.03	0	1
37	0	PeterisP/morphology	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertNotNull(locītājs);	57.03	0	1
	1	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertTrue(locītājs.enableGuessing);	57.03	0	1
	2	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertTrue(locītājs.enableVocative);	57.03	0	1
	3	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertEquals(0,locītājs.getCacheSize());	57.03	0	1
	4	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertTrue(locītājs.enableAllGuesses);	57.03	0	1
	5	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertFalse(locītājs.isCustomInflexionsLoaded());	57.03	0	1
	6	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertNotNull(locītājs.getInflexionTypes());	57.03	0	1
	7	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertSame(locītājs.getRootSet(),locītājs.getRootSet());	57.03	0	1
	8	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertEquals(0,locītājs.getDefaultFlags());	57.03	0	1
	9	/	MorphologyTest	ģenerēšanaNezināmiem	assertTrue("STR".matches("STR"));	assertEquals("STR","STR");	57.03	0	1
38	0	PeterisP/morphology	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.isRecognized());	81.4	0	1
	1	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertFalse(locītājs.getWords().isEmpty());	81.4	0	1
	2	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertEquals(0,locītājs.getWordCount());	81.4	0	1
	3	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotEquals(null,locītājs.getWordCount());	81.4	0	1
	4	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotSame(locītājs,newAnalyzer(false));	81.4	0	1
	5	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertThrows(NullPointerException.class,()->{locītājs.getPronunciations(null});	81.4	0	1
	6	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.areSentencesSupported());	81.4	0	1
	7	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.hasFeatures());	81.4	0	1
	8	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.areWordformsSupported());	81.4	0	1
	9	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotNull(locītājs.getController());	81.4	0	1
39	0	TooTallNate/Java-WebSocket	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	35.65	1	1
	1	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(curframe.isTextPayload());	35.65	0	1
	2	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.getTransfereMasked());	35.65	0	1
	3	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(curframe.isValid());	35.65	0	1
	4	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNull(curframe.getExtensionData());	35.65	0	1
	5	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	35.65	0	1
	6	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	35.65	0	1
	7	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(curframe,createdFrame.get(0));	35.65	0	1
	8	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0).isFin());	35.65	0	1
	9	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(text.length(),createdFrame.get(0).getPayloadData().length());	35.65	0	1
40	0	TooTallNate/Java-WebSocket	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertTrue(webSocket.isOpen());	82.83	0	1
	1	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertFalse(server.isOpen());	82.83	0	1
	2	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertEquals(true,webSocket.isOpen());	82.83	0	1
	3	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertNotEquals(false,server.isOpen());	82.83	0	1
	4	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertTrue(webSocket.isOpen()&&server.isOpen());	82.83	0	1
	5	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertNull(server);	82.83	0	1
	6	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertNotNull(webSocket);	82.83	0	1
	7	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertNotNull(server.getSocketAddress());	82.83	0	1
	8	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertNotSame(webSocket,server);	82.83	0	1
	9	/	Issue609Test	testIssue	assertTrue("STR",webSocket.isOpen());	assertEquals(-1,Integer.compare(server.getPort(),8080));	82.83	0	1
41	0	TooTallNate/Java-WebSocket	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertNotNull(incompleteException);	71.47	0	1
	1	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertEquals(42,incompleteException.getErrorCode());	71.47	0	1
	2	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertTrue(incompleteExceptioninstanceofIncompleteException);	71.47	0	1
	3	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertNotEquals(0,incompleteException.getErrorCode());	71.47	0	1
	4	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertNotNull("STR");	71.47	0	1
	5	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertFalse(incompleteException.getMessage().isEmpty());	71.47	0	1
	6	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertEquals(0,incompleteException.compareTo(newIncompleteException(incompleteException.getErrorCode())));	71.47	0	1
	7	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertTrue(-1<incompleteException.getErrorCode()&&incompleteException.getErrorCode()<1);	71.47	0	1
	8	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertNotEquals(0,incompleteException.hashCode());	71.47	0	1
	9	/	IncompleteExceptionTest	testConstructor	assertEquals("STR",42,incompleteException.getPreferredSize());	assertEquals(incompleteException.hashCode(),incompleteException.hashCode());	71.47	0	1
42	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(true);	50.3	0	1
	1	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(preparer);	50.3	0	1
	2	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(mockParameterReplacer,mockParameterReplacer);	50.3	0	1
	3	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNull(result);	50.3	0	1
	4	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	50.3	0	1
	5	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals("STR","STR");	50.3	0	1
	6	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(42,42);	50.3	0	1
	7	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(42.0,42.0);	50.3	0	1
	8	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(testTarget002,testTarget002);	50.3	0	1
	9	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(testTarget001,testTarget002);	50.3	0	1
43	0	adlnet/jxapi	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	31.79	0	1
	1	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(choices,activityDefinition.getScale());	31.79	0	1
	2	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(source,activityDefinition.getTarget());	31.79	0	1
	3	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(extensions,activityDefinition.getExtensions());	31.79	0	1
	4	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getMoreInfo());	31.79	0	1
	5	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNull(activityDefinition.getDescription());	31.79	0	1
	6	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertArrayEquals("STR",activityDefinition.getCorrectResponsesPattern().toArray());	31.79	0	1
	7	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(1,activityDefinition.getChoices().size());	31.79	0	1
	8	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertIterableEquals(source,activityDefinition.getSource());	31.79	0	1
	9	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(44,"STR");	31.79	0	1
44	0	basis-technology-corp/tcl-regex-java	RangeTest	testUpper	assertThat("STR",matches(exp));	assertNotNull(exp);	25.1	0	1
	1	/	RangeTest	testUpper	assertThat("STR",matches(exp));	assertTrue("STR");	25.1	0	1
	2	/	RangeTest	testUpper	assertThat("STR",matches(exp));	assertFalse("STR");	25.1	0	1
	3	/	RangeTest	testUpper	assertThat("STR",matches(exp));	assertEquals(2,exp.getFlags().size());	25.1	0	1
	4	/	RangeTest	testUpper	assertThat("STR",matches(exp));	assertEquals(PatternFlags.ADVANCED,exp.getFlags().get(0));	25.1	0	1
	5	/	RangeTest	testUpper	assertThat("STR",matches(exp));	assertEquals(PatternFlags.EXPANDED,exp.getFlags().get(1));	25.1	0	1
45	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	75.87	1	1
	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	75.87	0	1
	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	75.87	0	1
	3	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue("STR");	75.87	0	1
	4	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse("STR");	75.87	0	1
	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	75.87	0	1
	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNull(null);	75.87	0	1
	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertThrows(Exception.class,()->matcher.lookingAt());	75.87	0	1
	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(pattern,matcher.pattern());	75.87	0	1
	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(matcher,matcher);	75.87	0	1
46	0	trautonen/coveralls-maven-plugin	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertNotNull(getBuildNumber());	32.72	0	1
	1	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertTrue(getBuildNumber().length()>0);	32.72	0	1
	2	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertFalse(getBuildNumber().isEmpty());	32.72	0	1
	3	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertEquals("STR",getBuildNumber());	32.72	0	1
	4	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertSame("STR",getBuildNumber());	32.72	0	1
	5	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertNotSame("STR",getBuildNumber());	32.72	0	1
	6	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertNull(getBuildNumber());	32.72	0	1
	7	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertArrayEquals("STR",newString[]{getBuildNumber()});	32.72	0	1
	8	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertEquals("STR","STR");	32.72	0	1
	9	/	CircleTest	testGetBuildNumber	assertEquals("STR",newCircle(env()).getBuildNumber());	assertTrue("STR");	32.72	0	1
47	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue("STR");	38.68	0	1
	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse("STR");	38.68	0	1
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue("STR");	38.68	0	1
	3	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse("STR");	38.68	0	1
	4	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue("STR");	38.68	0	1
	5	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse("STR");	38.68	0	1
	6	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue("STR");	38.68	0	1
	7	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse("STR");	38.68	0	1
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThrows(IllegalArgumentException.class,()->isValidOTPFormat(null));	38.68	0	1
	9	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull("STR");	38.68	0	1
48	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	37.09	0	1
	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	37.09	0	1
	2	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofJsonSchemaFactory);	37.09	0	1
	3	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(JsonSchemaFactory.class,factory.getClass());	37.09	0	1
	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(factory,null);	37.09	0	1
	5	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(factory,LoaderUriDownloader.createJsonSchemaFactory(loader));	37.09	0	1
	6	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(factory.isError());	37.09	0	1
	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(0,factory.getMaximumRecursiveDepth());	37.09	0	1
	8	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertArrayEquals(null,null);	37.09	0	1
	9	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThrows(IllegalArgumentException.class,()->createJsonSchemaFactory(null));	37.09	0	1
0	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotNull(qResult);	16.69	0	1
	1	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	16.69	0	1
	2	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	16.69	1	1
	3	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotEquals(expectedResult,actualResult);	16.69	0	1
	4	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertSame(expectedObject,actualObject);	16.69	0	1
1	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	33.79	0	1
	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	33.79	0	1
	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",companyClass.getName());	33.79	0	1
	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(idProperty.getName(),PROP_ID);	33.79	1	1
	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(OType.INTEGER,idProperty.getType());	33.79	0	1
	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isMandatory());	33.79	0	1
	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	33.79	0	1
	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isReadonly());	33.79	0	1
	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(Integer.valueOf(10),idProperty.getMax());	33.79	0	1
	9	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(Integer.valueOf(4),idProperty.getMin());	33.79	0	1
2	0	orientechnologies/orientdb	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertNotNull(execute);	49.87	0	1
	1	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertTrue(execute.size()>0);	49.87	0	1
	2	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertEquals(0.1980897715667625,0.0001);	49.87	0	1
	3	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertFalse(execute.isEmpty());	49.87	0	1
	4	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertEquals(next.getClassName(),"STR");	49.87	0	1
	5	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertTrue(next.isEmbedded());	49.87	0	1
	6	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertFalse(next.isLazyLoad());	49.87	0	1
	7	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertNotNull(next.asStream());	49.87	0	1
	8	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertTrue(next.equals(next));	49.87	0	1
	9	/	LuceneSpatialMiscFunctionsTest	testDistance	assertThat(next.<Double>field("STR")).isEqualTo(0.0015056772638228177);	assertFalse(next.equals(newObject()));	49.87	0	1
3	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	60.65	1	1
	1	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotNull(result);	60.65	0	1
	2	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertTrue(query.length()>0);	60.65	0	1
	3	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertFalse(query.toString().isEmpty());	60.65	0	1
	4	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertSame(db,result.getDatabase());	60.65	0	1
	5	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotSame(null,db);	60.65	0	1
	6	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotNull("STR");	60.65	0	1
	7	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertFalse("STR");	60.65	0	1
	8	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotSame("STR",db.getName());	60.65	0	1
	9	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertEquals(2,"STR");	60.65	0	1
4	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(hasNext());	34.06	0	1
	1	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(true,hasNext());	34.06	0	1
	2	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(Boolean.TRUE,hasNext());	34.06	0	1
	3	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(Boolean.TRUE==hasNext());	34.06	0	1
	4	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(Boolean.TRUE.equals(hasNext()));	34.06	0	1
	5	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertNotNull(hasNext());	34.06	0	1
	6	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertSame(Boolean.class,hasNext().getClass());	34.06	0	1
	7	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertArrayEquals(newObject[]{true},newObject[]{hasNext()});	34.06	0	1
	8	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals(Boolean.TRUE.toString(),hasNext().toString());	34.06	0	1
	9	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertEquals("STR",Boolean.toString(hasNext()));	34.06	0	1
5	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotNull("STR");	62.15	0	1
	1	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNull("STR");	62.15	0	1
	2	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertTrue("STR");	62.15	0	1
	3	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertFalse("STR");	62.15	0	1
	4	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals("STR","STR");	62.15	0	1
	5	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals("STR","STR");	62.15	0	1
	6	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertSame(filter,"STR");	62.15	0	1
	7	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotSame(cache1,"STR");	62.15	0	1
	8	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertArrayEquals(expectedArray,"STR");	62.15	0	1
	9	/	OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals(3.14,"STR");	62.15	0	1
6	0	orientechnologies/orientdb	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertNotNull(item);	45.15	0	1
	1	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertTrue(res.hasNext());	45.15	0	1
	2	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertTrue(set.contains(emb));	45.15	0	1
	3	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertSame(doc,doc);	45.15	0	1
	4	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertSame(emb,emb);	45.15	0	1
	5	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertNotEquals(0,set.size());	45.15	0	1
	6	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertFalse(set.isEmpty());	45.15	0	1
	7	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertTrue(set.iterator().next().getType()instanceofOType.EMBEDDEDSET);	45.15	0	1
	8	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertEquals(1,"STR");	45.15	0	1
	9	/	RemoteQuerySupportTest	testQueryEmbeddedSet	assertNotNull(item.getProperty("STR"));	assertNotEquals(0,doc.getProperties().size());	45.15	0	1
7	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	28.97	1	1
	1	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	28.97	0	1
	2	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	28.97	0	1
	3	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getInternalStatus().equals(ORecordElement.STATUS.LOADED));	28.97	0	1
	4	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(doc.getInternalStatus().equals(ORecordElement.STATUS.INITIALIZED));	28.97	0	1
	5	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertNotNull(doc.getIdentity());	28.97	0	1
	6	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isValid());	28.97	0	1
	7	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getClassName().isEmpty());	28.97	0	1
	8	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().getClusterId()==0);	28.97	0	1
	9	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().getClusterPosition()==-1);	28.97	0	1
8	0	orientechnologies/orientdb	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(db.getMetadata().getSchema().existsClass(className));	65.33	0	1
	1	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(className,clazz.getName());	65.33	0	1
	2	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length==32);	65.33	0	1
	3	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getName().equals(className));	65.33	0	1
	4	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertNotNull(clazz);	65.33	1	1
	5	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertNotEquals(null,db.getMetadata().getSchema());	65.33	0	1
	6	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(clazz,db.getMetadata().getSchema().getClass(className));	65.33	0	1
	7	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterSelection()>-1);	65.33	0	1
	8	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(32,clazz.getDefaultClusterIdForNewInstance());	65.33	0	1
	9	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length>=1);	65.33	0	1
9	0	orientechnologies/orientdb	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(1,operations.size());	49.35	0	1
	1	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(operations);	49.35	0	1
	2	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(operationsinstanceofList);	49.35	0	1
	3	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(operations.isEmpty());	49.35	0	1
	4	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(null,request);	49.35	0	1
	5	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),request.getRecordSerializer());	49.35	0	1
	6	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(channel,null);	49.35	0	1
	7	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(-1,request.getTransactionId());	49.35	0	1
	8	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations,request.getOperations());	49.35	0	1
	9	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getByteCount()>0);	49.35	0	1
10	0	orientechnologies/orientdb	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(db);	28.98	0	1
	1	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.exists());	28.98	0	1
	2	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(className);	28.98	0	1
	3	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(itemclassName);	28.98	0	1
	4	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isActiveOnCurrentThread());	28.98	0	1
	5	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertFalse(db.isClosed());	28.98	0	1
	6	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isDocument());	28.98	0	1
	7	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertEquals(1,db.getClusters());	28.98	0	1
	8	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNull(db.getDefaultClusterId());	28.98	0	1
	9	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertTrue(db.isUseCache());	28.98	0	1
11	0	orientechnologies/orientdb	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc);	32.46	0	1
	1	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager);	32.46	0	1
	2	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager.getRecord());	32.46	0	1
	3	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()instanceofODocument);	32.46	0	1
	4	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&manager.isDirty(doc));	32.46	0	1
	5	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&!manager.isNew(doc));	32.46	0	1
	6	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&!manager.isDirty(doc));	32.46	0	1
	7	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getRecord()!=null&&manager.isNew(doc));	32.46	0	1
	8	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.getIdentity().getClusterId());	32.46	0	1
	9	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.getIdentity().getClusterPosition());	32.46	0	1
12	0	orientechnologies/orientdb	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNotNull(array);	29.79	0	1
	1	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertTrue(array.isEmpty());	29.79	0	1
	2	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.size());	29.79	1	1
	3	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertArrayEquals(newInteger[]{},array.toArray());	29.79	0	1
	4	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.indexOf(1));	29.79	0	1
	5	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.lastIndexOf(1));	29.79	0	1
	6	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertFalse(array.contains(1));	29.79	0	1
	7	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertFalse(array.contains(null));	29.79	0	1
	8	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNull(array.get(0));	29.79	0	1
	9	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertThrows(IndexOutOfBoundsException.class,()->array.get(1));	29.79	0	1
13	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(result);	28.16	0	1
	1	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(!result);	28.16	0	1
	2	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	28.16	0	1
	3	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove);	28.16	0	1
	4	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToAdd.size());	28.16	0	1
	5	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToRemove.size());	28.16	0	1
	6	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	28.16	0	1
	7	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(13));	28.16	0	1
	8	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get(12));	28.16	0	1
	9	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(removedKeys,keysToRemove);	28.16	0	1
14	0	orientechnologies/orientdb	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(rid,from.getRid());	45.36	0	1
	1	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(from.getRid());	45.36	0	1
	2	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(from.getRid().isValid());	45.36	0	1
	3	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(1,from.getVersion());	45.36	0	1
	4	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(12,from.getClusterId());	45.36	0	1
	5	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertFalse(from.getRid().isTemporary());	45.36	0	1
	6	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotEquals(newORecordId(0,0),from.getRid());	45.36	0	1
	7	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNull(to.getRid());	45.36	0	1
	8	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotSame(from.getRid(),to.getRid());	45.36	0	1
	9	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNull(to.getVal());	45.36	0	1
15	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(42));	91.66	0	1
	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	91.66	0	1
	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	91.66	0	1
	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.size());	91.66	0	1
	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(42));	91.66	0	1
	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToRemove.size());	91.66	0	1
	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	91.66	0	1
	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	91.66	0	1
	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove);	91.66	0	1
	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(processChangeEvent);	91.66	0	1
16	0	orientechnologies/orientdb	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertNotNull(db);	49.03	0	1
	1	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals("STR",db.getName());	49.03	0	1
	2	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(false,db.isClosed());	49.03	0	1
	3	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertNotNull(index);	49.03	0	1
	4	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,index.getType());	49.03	0	1
	5	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(4,"STR");	49.03	0	1
	6	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(true,person1.getIdentity().isValid());	49.03	0	1
	7	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(true,person2.getIdentity().isValid());	49.03	0	1
	8	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(true,person3.getIdentity().isValid());	49.03	0	1
	9	/	DuplicateNonUniqueIndexChangesTxTest	testDuplicateValuesOnCreateDelete	assertRids("STR");	assertEquals(true,person4.getIdentity().isValid());	49.03	0	1
17	0	orientechnologies/orientdb	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotNull(birthday);	33.06	0	1
	1	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertFalse(birthday==null);	33.06	0	1
	2	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(birthday,null);	33.06	0	1
	3	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotSame(birthday,null);	33.06	0	1
	4	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertEquals(newDate(108,3,30),birthday);	33.06	0	1
	5	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertEquals(birthday.getTime(),newDate(108,3,30).getTime());	33.06	0	1
	6	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(birthday,newDate(109,3,30));	33.06	0	1
	7	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotSame(newDate(109,3,30),birthday);	33.06	0	1
	8	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNull("STR");	33.06	0	1
	9	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertArrayEquals(newObject[]{birthday},"STR");	33.06	0	1
18	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(cfgJson);	29.19	0	1
	1	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(ODefaultRecordMapper.DEFAULT_CLASS_NAME,res.get(0).getClassName());	29.19	0	1
	2	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(configurator);	29.19	0	1
	3	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(proc);	29.19	0	1
	4	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	29.19	0	1
	5	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	29.19	0	1
	6	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	29.19	0	1
	7	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res.get(0));	29.19	0	1
	8	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotSame(cfgJson,res.toString());	29.19	0	1
	9	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotSame(cfgJson,res.get(0).toString());	29.19	0	1
19	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotNull(compositeKey);	43.83	0	1
	1	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertTrue(compositeKey.getKeys().size()==1);	43.83	0	1
	2	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertFalse(compositeKey.getKeys().isEmpty());	43.83	0	1
	3	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertEquals(2,compositeKey.getKeys().size());	43.83	0	1
	4	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertTrue(compositeKey.getKeys().contains(compositeKeyToAdd));	43.83	0	1
	5	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotSame(compositeKey.getKeys(),compositeKeyToAdd.getKeys());	43.83	0	1
	6	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertFalse(compositeKey.getKeys().equals(compositeKeyToAdd.getKeys()));	43.83	0	1
	7	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotSame(compositeKey,compositeKeyToAdd);	43.83	0	1
	8	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotNull(compositeKey.getKeys().get(0));	43.83	0	1
	9	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertThrows(IndexOutOfBoundsException.class,()->compositeKey.getKeys().get(2));	43.83	0	1
20	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	35.01	0	1
	1	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertTrue("STR");	35.01	0	1
	2	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotNull(result);	35.01	0	1
	3	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertEquals(1,result.getMetadata().getColumnNames().size());	35.01	0	1
	4	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertEquals("STR",result.getMetadata().getColumnNames().get(0));	35.01	0	1
	5	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals(0,result.getMetadata().getColumnNames().size());	35.01	0	1
	6	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals(null,result.getMetadata().getColumnNames());	35.01	0	1
	7	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertFalse("STR");	35.01	0	1
	8	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals("STR",result.getMetadata().getColumnNames().get(0));	35.01	0	1
	9	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNull("STR");	35.01	0	1
21	0	orientechnologies/orientdb	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertEquals("STR",decryptedMsg);	43.72	0	1
	1	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertNotNull(decryptedMsg);	43.72	0	1
	2	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertTrue("STR");	43.72	0	1
	3	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertNotEquals("STR",decryptedMsg);	43.72	0	1
	4	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertNotEquals(magic,decryptedMsg);	43.72	0	1
	5	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertThrows("STR",OSecurityException.class,"STR");	43.72	0	1
	6	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertEquals(20,decryptedMsg.length());	43.72	0	1
	7	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertArrayEquals(msgToEncrypt.getBytes(),decryptedMsg.getBytes());	43.72	0	1
	8	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertFalse("STR");	43.72	0	1
	9	/	OSymmetricKeyTest	shouldTestSpecificAESKey	assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	assertSame(sk,newOSymmetricKey(sk.getType(),sk.getEncoded()));	43.72	0	1
22	0	orientechnologies/orientdb	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNull(treeValue);	30.72	1	1
	1	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotNull(treeValue);	30.72	0	1
	2	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNull(treeValue.getValue());	30.72	0	1
	3	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotNull(treeValue.getValue());	30.72	0	1
	4	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertEquals(null,treeValue.getLink());	30.72	0	1
	5	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotEquals(null,treeValue.getLink());	30.72	0	1
	6	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertTrue(treeValue.isNull());	30.72	0	1
	7	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(treeValue.isNull());	30.72	0	1
	8	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertTrue(isLink(treeValue));	30.72	0	1
	9	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(isLink(treeValue));	30.72	0	1
23	0	orientechnologies/orientdb	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotNull(db);	57.47	0	1
	1	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotEquals(null,vertices);	57.47	0	1
	2	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertEquals(1,vertices.size());	57.47	0	1
	3	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertEquals("STR",doc.getClassName());	57.47	0	1
	4	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertTrue(db.isActiveOnCurrentThread());	57.47	0	1
	5	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertTrue(db.getTransaction().isActive());	57.47	0	1
	6	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotEquals(null,db.query(newOSQLSynchQuery<ODocument>(query)));	57.47	0	1
	7	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertFalse(db.isClosed());	57.47	0	1
	8	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertEquals(1,"STR");	57.47	0	1
	9	/	LuceneTransactionCompositeQueryTest	testRollback	assertThat(vertices).hasSize(1);	assertNotEquals(null,"STR");	57.47	0	1
24	0	DigitalPebble/storm-crawler	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertThrows(MalformedURLException.class,"STR");	19.36	0	0
25	0	adlnet/jxapi	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	28.78	0	1
	1	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	28.78	0	1
	2	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotSame(expected,actual);	28.78	0	1
	3	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(activity.getId());	28.78	0	1
	4	/	ActivityTest	testGetId	assertNotNull(actual);	assertNull(activity.getResult());	28.78	0	1
	5	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(expected.equals(actual));	28.78	0	1
	6	/	ActivityTest	testGetId	assertNotNull(actual);	assertFalse(expected.equals(actual));	28.78	0	1
	7	/	ActivityTest	testGetId	assertNotNull(actual);	assertSame(expected,actual);	28.78	0	1
	8	/	ActivityTest	testGetId	assertNotNull(actual);	assertArrayEquals(expectedArray,resultArray);	28.78	0	1
	9	/	ActivityTest	testGetId	assertNotNull(actual);	assertThat(expected,equalTo(actual));	28.78	0	1
26	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	61.64	1	1
	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(statementRefinstanceofStatementReference);	61.64	0	1
	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getID());	61.64	0	1
	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals("STR",statementRef.getID());	61.64	0	1
	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getID()));	61.64	0	1
	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertSame(statementRef,statementRef);	61.64	0	1
	6	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotSame(statementRef.getID(),newStatementReference(ID).getID());	61.64	0	1
	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getID());	61.64	0	1
	8	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertFalse(id.equals(null));	61.64	0	1
	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(String.class,statementRef.getID().getClass());	61.64	0	1
27	0	adlnet/jxapi	AccountTest	testAccount	assertNotNull(account);	assertNotEquals(account,newObject(){);	83.86	0	1
28	0	adlnet/jxapi	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	28.87	1	1
	1	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected.length,actual.length);	28.87	0	1
	2	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(actual);	28.87	0	1
	3	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected[0],actual[0]);	28.87	0	1
	4	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertEquals(expected[1],actual[1]);	28.87	0	1
	5	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.hasMbox());	28.87	0	1
	6	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.getName().equals(NAME));	28.87	0	1
	7	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(person.getMbox());	28.87	0	1
	8	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotEquals(expected,actual);	28.87	0	1
	9	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(person.getMbox()==actual);	28.87	0	1
29	0	fabric8io/fabric8-maven-plugin	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotNull(fakePlugin);	42.04	0	1
	1	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotNull("STR");	42.04	0	1
	2	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotEquals(null,"STR");	42.04	0	1
	3	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotEquals(fakePlugin.getConfiguration(),null);	42.04	0	1
	4	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertTrue("STR");	42.04	0	1
	5	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertEquals("STR","STR");	42.04	0	1
	6	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertFalse(config.isEmpty());	42.04	0	1
	7	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotEquals(newHashMap<>(),config);	42.04	0	1
	8	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertEquals(1,"STR");	42.04	0	1
	9	/	MavenConfigurationExtractorTest	should_parse_deep_inner_objects	assertThat(config).containsEntry("STR",expected);	assertNotEquals("STR","STR");	42.04	0	1
30	0	trautonen/coveralls-maven-plugin	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertTrue(source1.equals(source1));	34.41	0	1
	1	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertFalse(source1.equals(source2));	34.41	1	1
	2	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertEquals(source1.hashCode(),source1.hashCode());	34.41	0	1
	3	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotEquals(source1.hashCode(),source2.hashCode());	34.41	0	1
	4	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNull(source1.getCoverage());	34.41	0	1
	5	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source2.getCoverage());	34.41	0	1
	6	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNull(source2.getCompilationUnit());	34.41	0	1
	7	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source1.getDigest());	34.41	0	1
	8	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source1);	34.41	0	1
	9	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertSame(source1.getName(),source1.getName());	34.41	0	1
31	0	trautonen/coveralls-maven-plugin	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR","STR");	36.25	0	1
	1	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue("STR");	36.25	0	1
	2	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	36.25	0	1
	3	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals(1,env.size());	36.25	0	1
	4	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull("STR");	36.25	0	1
	5	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull("STR");	36.25	0	1
	6	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR","STR");	36.25	0	1
	7	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR","STR");	36.25	0	1
	8	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertThrows(NullPointerException.class,()->getProperty(null));	36.25	0	1
	9	/	AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue("STR");	36.25	0	1
32	0	trautonen/coveralls-maven-plugin	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(stream);	32.15	0	1
	1	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(expectedFileName.equals(actualFileName));	32.15	0	1
	2	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(expectedFileName.equals(actualFileName));	32.15	0	1
	3	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(locate(sourceFile)!=null);	32.15	0	1
	4	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(IOUtils.toByteArray(locate(sourceFile)).length==0);	32.15	0	1
	5	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(getSourceEncoding());	32.15	0	1
	6	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(getSourceEncoding().isEmpty());	32.15	0	1
	7	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertEquals(expectedSource,actualSource);	32.15	0	1
	8	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(expectedSource.equals(actualSource));	32.15	0	1
	9	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(expectedMd5Hash.equals(actualMd5Hash));	32.15	0	1
33	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotNull(getAddressLevel());	49.25	0	1
	1	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertEquals(AddressLevel.class,getAddressLevel().getClass());	49.25	0	1
	2	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertSame(AddressLevel.LEVEL3,getAddressLevel());	49.25	0	1
	3	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel().equals(AddressLevel.LEVEL3));	49.25	0	1
	4	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(addressLevel.name().equalsIgnoreCase(getAddressLevel().name()));	49.25	0	1
	5	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotNull(getAddressLevel().getDisplayName());	49.25	0	1
	6	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNull(getAddressLevel().getParent());	49.25	0	1
	7	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel().compareTo(AddressLevel.LEVEL3)<=0);	49.25	0	1
	8	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel()==AddressLevel.LEVEL2);	49.25	0	1
	9	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel()==null);	49.25	0	1
34	0	hazelcast/hazelcast-simulator	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNull(operation.getWorkerAddress());	40.85	1	1
	1	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(null,operation.getCause());	40.85	0	1
	2	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals("STR",operation.getTestCase().getTestCaseId());	40.85	0	1
	3	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotEquals(null,operation.getWorkerAddress());	40.85	0	1
	4	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertSame(null,operation.getTestCase().getTestSuite());	40.85	0	1
	5	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(newInteger(4),newInteger(operation.hashCode()));	40.85	0	1
	6	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotEquals(newInteger(3),newInteger(operation.hashCode()));	40.85	0	1
	7	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotSame(fullOperation,operation);	40.85	0	1
	8	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(null,operation.toString());	40.85	0	1
	9	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotSame(testCase,fullOperation.getTestCase());	40.85	0	1
35	0	hazelcast/hazelcast-simulator	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertTrue(workerDeployment.containsKey(agent1.getAddress()));	39.73	0	1
	1	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertFalse(workerDeployment.isEmpty());	39.73	0	1
	2	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotNull(driver);	39.73	0	1
	3	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotEquals(workerDeployment.get(agent3.getAddress()).size(),0);	39.73	0	1
	4	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertEquals(2,workerDeployment.size());	39.73	0	1
	5	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertSame(registry,driver.getRegistry());	39.73	0	1
	6	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertNotEquals(workerDeployment.get(agent1.getAddress()).size(),workerDeployment.get(agent2.getAddress()).size());	39.73	0	1
	7	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertEquals(workerDeployment.get(agent1.getAddress()).get(0),driver.getWorkersPerAgent().get(agent1.getAddress()).getWorkers().get(0));	39.73	0	1
	8	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertEquals("STR",workerDeployment.get(agent2.getAddress()).get(0).getType());	39.73	0	1
	9	/	DeploymentPlanTest	whenSingleClientWorker	assertDeploymentPlanWorkerCount(plan,agent1,0,1);	assertTrue(workerDeployment.get(agent3.getAddress()).get(0).isRunning());	39.73	0	1
36	0	jcodec/jcodec	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,true,0));	83.18	0	1
	1	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,true,0));	83.18	0	1
	2	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,1));	83.18	0	1
	3	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,2));	83.18	0	1
	4	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,3));	83.18	0	1
	5	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,true,4));	83.18	0	1
	6	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,false,true,5));	83.18	0	1
	7	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,false,6));	83.18	0	1
	8	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,false,false,7));	83.18	0	1
	9	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.I,true,true,8));	83.18	0	1
37	0	jcodec/jcodec	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotNull(color);	33.17	0	1
	1	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertEquals(64,buf.capacity());	33.17	0	1
	2	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(dup.hasArray());	33.17	0	1
	3	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(buf.isDirect());	33.17	0	1
	4	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(buf.capacity()>=64);	33.17	0	1
	5	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertFalse(NIOUtils.isEmpty(buf));	33.17	0	1
	6	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertFalse(NIOUtils.atEof(buf));	33.17	0	1
	7	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(NIOUtils.remainingInBuffer(buf)>=0);	33.17	0	1
	8	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotEquals(header.getData(),null);	33.17	0	1
	9	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotSame(color,null);	33.17	0	1
38	0	amlinv/stat-collection-utils	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockLogger);	36.38	0	1
	1	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pClient);	36.38	0	1
	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pReadResponse1);	36.38	0	1
	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pReadResponse2);	36.38	0	1
	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockJ4pSearchResponse);	36.38	0	1
	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection);	36.38	0	1
	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(objectName1);	36.38	0	1
	7	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(objectName2);	36.38	0	1
	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(queryExp);	36.38	0	1
	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(att1);	36.38	0	1
39	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockJmxConnector);	30.3	0	1
	1	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockMBeanServerConnection);	30.3	0	1
	2	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockAttributeList);	30.3	0	1
	3	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockQueryExp);	30.3	0	1
	4	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(objectName);	30.3	0	1
	5	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(testAttributeList);	30.3	0	1
	6	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockJmxConnector.getMBeanServerConnection());	30.3	0	1
	7	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockMBeanServerConnection.queryNames(objectName,mockQueryExp));	30.3	0	1
	8	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(mockAttributeList.asList());	30.3	0	1
	9	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(testAttributeList.size(),0);	30.3	0	1
40	0	TooTallNate/Java-WebSocket	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNotNull(frame);	56.25	0	1
	1	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertTrue(frameinstanceofBinaryFrame);	56.25	0	1
	2	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertEquals(Opcode.BINARY,frame.getOpcode());	56.25	0	1
	3	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertFalse(frame.isExtended());	56.25	0	1
	4	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertArrayEquals(newbyte[0],frame.getData());	56.25	0	1
	5	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertEquals(0,frame.getDataLength());	56.25	0	1
	6	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNull(frame.getData());	56.25	0	1
	7	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertTrue(frame.isEqual(frame));	56.25	0	1
	8	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertFalse(frame.isEqual(null));	56.25	0	1
	9	/	BinaryFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertEquals(0,frame.getArg());	56.25	0	1
41	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,env.size());	44.58	0	1
	1	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(5,env.size());	44.58	0	1
	2	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(env.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList()),focal.filter(env).entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList()));	44.58	0	1
	3	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(env.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList()),focal.filter(env).entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList()));	44.58	0	1
	4	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertArrayEquals(env.keySet().toArray(),focal.filter(env).keySet().toArray());	44.58	0	1
	5	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertArrayEquals(env.values().toArray(),focal.filter(env).values().toArray());	44.58	0	1
	6	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,focal.filter(env).size());	44.58	0	1
	7	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(env,focal.filter(env));	44.58	0	1
	8	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue("STR");	44.58	0	1
	9	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse("STR");	44.58	0	1
42	0	PeterisP/morphology	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertTrue(locītājs.isRecognized());	46.3	0	1
	1	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	46.3	0	1
	2	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(0,locītājs.getCacheSize());	46.3	0	1
	3	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs);	46.3	0	1
	4	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotEquals(null,locītājs.getDefaultLanguage());	46.3	0	1
	5	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs.getLoadedLanguages());	46.3	0	1
	6	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotEquals("STR",locītājs.getDefaultLanguage());	46.3	0	1
	7	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(locītājs.wordforms.size(),locītājs.getWordCount());	46.3	0	1
	8	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(locītājs.getCacheSize(),locītājs.getCacheLimit());	46.3	0	1
	9	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs.getAvailableLanguages());	46.3	0	1
43	0	PeterisP/morphology	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertEquals(formas.size(),expectedSize);	43.67	0	1
	1	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertNotEquals(formas.size(),unexpectedSize);	43.67	0	1
	2	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertTrue(formas.contains(expectedWordform));	43.67	0	1
	3	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertFalse(formas.contains(unexpectedWordform));	43.67	0	1
	4	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertNotNull(formas);	43.67	0	1
	5	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertNull(nullFormas);	43.67	0	1
	6	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertArrayEquals(expectedArray,actualArray);	43.67	0	1
	7	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertNotSame(expectedObject,actualObject);	43.67	0	1
	8	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertSame(expectedObject,actualObject);	43.67	0	1
	9	/	MorphologyTest	būt	assertInflection(formas,testset,"STR");	assertThrows(Exception.class,()->{thrownewException(});	43.67	0	1
44	0	sharneng/gm4java	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertNotNull(sut);	83.14	0	1
	1	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertSame(service,sut.getService());	83.14	0	1
	2	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertNull(sut.getErrorStream());	83.14	0	1
	3	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertSame(format,op.getCmdArgs().get(2));	83.14	0	1
	4	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertNotSame(null,service);	83.14	0	1
	5	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertArrayEquals(newString[]{command,"STR","STR",format,SOURCE_IMAGE},sut.getCommand().toArray());	83.14	0	1
	6	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertEquals("STR",sut.getOutputConsumer().getOutput().get(0));	83.14	0	1
	7	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertFalse(sut.isErrorStreamRedirected());	83.14	0	1
	8	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertTrue(output.getOutput().size()>0);	83.14	0	1
	9	/	GMBatchCommandTest	run_returnsResultBack	assertThat(iter.next(),is("STR"));	assertFalse(output.getOutput().isEmpty());	83.14	0	1
45	0	redraiment/jactiverecord	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertNotNull(sql);	31.76	0	1
	1	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertEquals("STR","STR");	31.76	0	1
	2	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertTrue(true);	31.76	0	1
	3	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertFalse(false);	31.76	0	1
	4	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertNotEquals(expectedValue,actualValue);	31.76	0	1
	5	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertEquals(expectedDouble,actualDouble);	31.76	0	1
	6	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertNotEquals(expectedDouble,actualDouble);	31.76	0	1
	7	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertEquals(expectedLong,actualLong);	31.76	0	1
	8	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertNotEquals(expectedLong,actualLong);	31.76	0	1
	9	/	TSqlBuilderTest	testUpdate	assertEquals("STR",sql.update("STR").set("STR").toString());	assertTrue(condition);	31.76	0	1
46	0	nidi3/graphviz-java	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertEquals("STR",options.basedir);	33.65	0	1
	1	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotNull(options.basedir);	33.65	0	1
	2	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertSame(expected,"STR");	33.65	0	1
	3	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotSame(expected,"STR");	33.65	0	1
	4	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNull(options.basedir(null));	33.65	0	1
	5	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertEquals("STR",options.basedir);	33.65	0	1
	6	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotNull(options.basedir);	33.65	0	1
	7	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertSame(expected,"STR");	33.65	0	1
	8	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotSame(expected,"STR");	33.65	0	1
	9	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNull(options.basedir(null));	33.65	0	1
47	0	basis-technology-corp/tcl-regex-java	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertNotNull(exp);	62.68	0	1
	1	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertTrue(exp.pattern().length()>0);	62.68	0	1
	2	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertNotEquals(0,exp.flags());	62.68	0	1
	3	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertFalse("STR");	62.68	0	1
	4	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertTrue("STR");	62.68	0	1
	5	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertEquals(PatternFlags.ADVANCED,exp.flags());	62.68	0	1
	6	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertNotEquals(PatternFlags.IGNORECASE,exp.flags());	62.68	0	1
	7	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertNull(Compiler.compile(null,null));	62.68	0	1
	8	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertThrows(RegexException.class,"STR");	62.68	0	1
	9	/	RangeTest	testNotBom	assertThat("STR",matches(exp));	assertArrayEquals("STR","STR");	62.68	0	1
48	0	jsevellec/cassandra-unit	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertFalse(isUsageBeenPrinted());	29.05	0	1
	1	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(false,isUsageBeenPrinted());	29.05	0	1
	2	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNull(isUsageBeenPrinted());	29.05	0	1
	3	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNotNull(isUsageBeenPrinted());	29.05	0	1
	4	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertTrue(!isUsageBeenPrinted());	29.05	0	1
	5	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(true,isUsageBeenPrinted());	29.05	0	1
	6	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertEquals(true,!isUsageBeenPrinted());	29.05	0	1
	7	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertTrue(isUsageBeenPrinted());	29.05	0	1
	8	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertNotEquals(false,isUsageBeenPrinted());	29.05	0	1
	9	/	CassandraUnitCommandLineLoaderTest	shouldPrintUsageBecauseHostArgumentIsMissing	assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	assertFalse(isUsageBeenPrinted());	29.05	0	1
49	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals(0,outputDirectory.list().length);	28.5	0	1
	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.exists());	28.5	0	1
	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.isFile());	28.5	0	1
	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.isDirectory());	28.5	0	1
	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.isHidden());	28.5	0	1
	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(outputDirectory.getPath());	28.5	0	1
	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(targetDir,outputDirectory);	28.5	0	1
	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(configDirectory,outputDirectory);	28.5	0	1
	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(serverDirectory,outputDirectory);	28.5	0	1
	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(src,outputDirectory);	28.5	0	1
0	0	hazelcast/hazelcast-simulator	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertNotNull(test1);	48.43	0	1
	1	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertNotNull(registry.getTestSuites().get(0).getTests().get(0));	48.43	0	1
	2	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertNotNull(registry.getTestSuites().get(0).getTests().get(1));	48.43	0	1
	3	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertNotNull(registry.getTestSuites().get(0).getTests().get(2));	48.43	0	1
	4	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertNotNull(registry.getTestSuites().get(0).getTests().get(1));	48.43	0	1
	5	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertTrue(registry.getTestSuites().get(0).getTests().contains(test2));	48.43	0	1
	6	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertTrue(registry.getTestSuites().get(0).getTests().contains(test3));	48.43	0	1
	7	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertTrue(registry.getTestSuites().get(0).getTests().get(0).equals(test1));	48.43	0	1
	8	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertTrue(registry.getTestSuites().get(0).getTests().get(1).equals(test2));	48.43	0	1
	9	/	RegistryTest	testAddTests_testIdFixing	assertEquals("STR",test1.getId());	assertTrue(registry.getTestSuites().get(0).getTests().get(2).equals(test3));	48.43	0	1
1	0	hazelcast/hazelcast-simulator	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertTrue(performanceMonitor.isRunning());	63.23	0	1
	1	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(1,performanceMonitor.getTestCount());	63.23	0	1
	2	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(server);	63.23	0	1
	3	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(containerManager);	63.23	0	1
	4	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertFalse(performanceMonitor.isFinished());	63.23	0	1
	5	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNotNull(performanceMonitor.getStartTime());	63.23	0	1
	6	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertNull(performanceMonitor.getFinishTime());	63.23	0	1
	7	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertFalse(performanceMonitor.hasErrors());	63.23	0	1
	8	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(0,performanceMonitor.getErrors().size());	63.23	0	1
	9	/	PerformanceMonitorTest	test_whenTestRunning_thenSendPerformanceStats	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});	assertEquals(0,performanceMonitor.getFailures().size());	63.23	0	1
2	0	hazelcast/hazelcast-simulator	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertNotNull(probs);	63.44	0	1
	1	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertTrue(probs.isEmpty());	63.44	0	1
	2	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertEquals(0,probs.size());	63.44	0	1
	3	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertNotNull(model.getTimeStepModel());	63.44	0	1
	4	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertEquals(1,model.getExecutionGroups().size());	63.44	0	1
	5	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertThrows(NullPointerException.class,()->model.loadModel(null,probs));	63.44	0	1
	6	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertSame(model,model.getTimeStepModel());	63.44	0	1
	7	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertTrue(probs.containsValue(0.0));	63.44	0	1
	8	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertNotEquals(0,model.getNumTimeSteps());	63.44	0	1
	9	/	TimeStepModel_probabilityTest	test_probability_singleMethod	assertProbability(model,"STR",1.0);	assertEquals("STR","STR");	63.44	0	1
3	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	31.64	1	1
	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.nonOptionArguments().size());	31.64	0	1
	2	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.hasOptions());	31.64	0	1
	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(null,initOptionsWithHelp(parser,newString[]{}));	31.64	0	1
	4	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(parser,options.parser());	31.64	0	1
	5	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals("STR",options.specs().get(0).options().iterator().next().longestName());	31.64	0	1
	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals("STR",options.lastSpec().options().iterator().next().longestName());	31.64	0	1
	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals("STR","STR");	31.64	0	1
	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(0,"STR");	31.64	0	1
	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull("STR");	31.64	0	1
4	0	hazelcast/hazelcast-simulator	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertTrue(emptyPerformanceStatsCollector.isEmpty());	26.41	0	1
	1	/	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertNotNull(true);	26.41	0	1
	2	/	PerformanceStatsCollectorTest	testGet_testCaseNotFound	assertTrue(performanceStats.isEmpty());	assertEquals(0,emptyPerformanceStatsCollector.getOperationCount());	26.41	0	1
5	0	hazelcast/hazelcast-simulator	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.isEmpty());	39.72	0	1
	1	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.isEmpty());	39.72	0	1
	2	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertEquals(Collections.emptySet(),types);	39.72	0	1
	3	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertNotEquals(Collections.emptySet(),types);	39.72	0	1
	4	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertEquals(0,types.size());	39.72	0	1
	5	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertNotEquals(0,types.size());	39.72	0	1
	6	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.stream().allMatch(Objects::isNull));	39.72	0	1
	7	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.stream().anyMatch(Objects::isNull));	39.72	0	1
	8	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertTrue(types.stream().allMatch(type->typeinstanceofFailureType));	39.72	0	1
	9	/	FailureTypeTest	testFromPropertyValue_empty	assertThat(types,is(empty()));	assertFalse(types.stream().anyMatch(type->typeinstanceofString));	39.72	0	1
6	0	hazelcast/hazelcast-simulator	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(0,criticalFailureCounter.get());	36.65	0	1
	1	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(criticalFailureCounter.get()>=0);	36.65	0	1
	2	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(nonCriticalFailureCounter.get()<=0);	36.65	0	1
	3	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals("STR",exceptionFailure.getFailureContext());	36.65	0	1
	4	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(WORKER_EXCEPTION,exceptionFailure.getType());	36.65	0	1
	5	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertNull(normalExitFailure.getOutput());	36.65	0	1
	6	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals(WORKER_NORMAL_EXIT,normalExitFailure.getType());	36.65	0	1
	7	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(registry.containsAddress(agentAddress));	36.65	0	1
	8	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertTrue(registry.containsAgent(agentAddress));	36.65	0	1
	9	/	FailureCollectorTest	notify_withPoisonPill	failureCollector.notify(normalExitFailure);	assertEquals("STR",failureCollector.getOutputDir().getName());	36.65	0	1
7	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	31.43	0	1
	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	31.43	0	1
	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertFalse(value<0||value>=100);	31.43	0	1
	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<=100);	31.43	0	1
	4	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<100);	31.43	0	1
	5	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<101);	31.43	0	1
	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(value,state.randomInt(100));	31.43	0	1
	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(state.randomInt(100),value);	31.43	0	1
	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value!=state.randomInt(99));	31.43	0	1
	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(value,100);	31.43	0	1
8	0	OpenLiberty/ci.common	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertNotNull(jco);	27.76	0	1
	1	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertEquals(0,result.size());	27.76	0	1
	2	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.isEmpty());	27.76	0	1
	3	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertTrue(options.containsAll(result));	27.76	0	1
	4	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertFalse(options.isEmpty());	27.76	0	1
	5	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertSame(jco,jco);	27.76	0	1
	6	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertNotSame(result,options);	27.76	0	1
	7	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertEquals(jco.getClass(),jco.getClass());	27.76	0	1
	8	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertFalse("STR");	27.76	0	1
	9	/	JavaCompilerOptionsTest	testDefaultOptions	assertEquals(1,result.size());	assertNotEquals("STR",release);	27.76	0	1
9	0	OpenLiberty/ci.common	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(isGeneratedConfigFile(src,srcDir,targetDir));	68.46	0	1
	1	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(isGeneratedConfigFile(targetDir,srcDir,targetDir));	68.46	0	1
	2	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(src);	68.46	0	1
	3	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(src.getName(),"STR");	68.46	0	1
	4	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(util);	68.46	0	1
	5	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertSame(util,getNewDevUtil(serverDirectory));	68.46	0	1
	6	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isDirectory(serverDirectory));	68.46	0	1
	7	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.filesMatch(targetDir.list(),configDirectory.list()));	68.46	0	1
	8	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(configDirectory,util);	68.46	0	1
	9	/	DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(util.getJavaVersion(),"STR");	68.46	0	1
10	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertNotNull(getSequences());	71.65	0	1
	1	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertTrue(getSequences().size()>0);	71.65	0	1
	2	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertTrue(getSequences().get(0)instanceofSequence);	71.65	0	1
	3	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertFalse(getSequences().contains(null));	71.65	0	1
	4	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_SEQUENCE_COUNT,getSequences().size());	71.65	0	1
	5	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_START_CANVAS,getSequences().get(0).getStartCanvas());	71.65	0	1
	6	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_VIEWING_DIRECTION,getSequences().get(0).getViewingDirection());	71.65	0	1
	7	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_LABEL,getSequences().get(0).getLabel());	71.65	0	1
	8	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_CANVASES_COUNT,getSequences().get(0).getCanvases().size());	71.65	0	1
	9	/	SpecExamplesDeserializationTest	testManifestWithRanges	assertThat(manifest.getSequences()).isEmpty();	assertEquals(EXPECTED_TOTAL_CANVASSES_COUNT,getSequences().get(0).getTotalCanvases());	71.65	0	1
11	0	orientechnologies/orientdb	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	40.14	1	1
	1	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	40.14	0	1
	2	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	40.14	0	1
	3	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),equalTo(false));	40.14	0	1
	4	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(not(true)));	40.14	0	1
	5	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertIterableEquals(Collections.singletonList(false),Collections.singletonList(doc.isDirty()));	40.14	0	1
	6	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	40.14	0	1
	7	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	40.14	0	1
	8	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertArrayEquals(newObject[]{false},newObject[]{doc.isDirty()});	40.14	0	1
	9	/	TrackedSetTest	testClearTwo	assertFalse(doc.isDirty());	assertThat(newObject[]{doc.isDirty()}).contains(false);	40.14	0	1
12	0	orientechnologies/orientdb	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(getIntValue(offset+SIZE_OFFSET)>0);	35.74	0	1
	1	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(cacheEntry);	35.74	0	1
	2	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(bufferPool.getSize()>0);	35.74	0	1
	3	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(pointer);	35.74	0	1
	4	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,cachePointer.getParentCacheEntry().getPageIndex());	35.74	0	1
	5	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.isLeaf());	35.74	0	1
	6	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	35.74	1	1
	7	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertArrayEquals(newbyte[0],treeBucket.getRawBuffer());	35.74	0	1
	8	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,treeBucket.getLeftChild());	35.74	0	1
	9	/	OSBTreeBonsaiNonLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(0,treeBucket.getRightChild());	35.74	0	1
13	0	orientechnologies/orientdb	RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item);	24.78	0	1
	1	/	RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(doc.getClassName(),item.getClassName());	24.78	0	1
	2	/	RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(doc.getDocumentId(),item.getIdentity().orElse(null));	24.78	0	1
	3	/	RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotEquals(null,"STR");	24.78	0	1
	4	/	RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull("STR");	24.78	0	1
14	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertEquals(value,storedValue);	58.92	1	1
	1	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(part1);	58.92	0	1
	2	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(part2);	58.92	0	1
	3	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotNull(all);	58.92	0	1
	4	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(part1.remaining()==4);	58.92	0	1
	5	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(part2.remaining()==4);	58.92	0	1
	6	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(all.remaining()==8);	58.92	0	1
	7	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotEquals(storedValue,0);	58.92	0	1
	8	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertNotEquals(value,0);	58.92	0	1
	9	/	OByteBufferUtilsTest	testSpecialSplitLong	assertEquals(value,storedValue);	assertTrue(storedValue>0);	58.92	0	1
15	0	orientechnologies/orientdb	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(from);	32.31	0	1
	1	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(to);	32.31	0	1
	2	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(frominstanceofODeleteRecordTask);	32.31	0	1
	3	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(toinstanceofODeleteRecordTask);	32.31	0	1
	4	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(from.getRid()instanceofORecordId);	32.31	0	1
	5	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(to.getRid()instanceofORecordId);	32.31	0	1
	6	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(from.getRid(),to.getRid());	32.31	1	1
	7	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertSame(from.getRid(),to.getRid());	32.31	0	1
	8	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotEquals(from.getRid(),newORecordId());	32.31	0	1
	9	/	ODeleteRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotSame(from,to);	32.31	0	1
16	0	orientechnologies/orientdb	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNotNull(database);	42	0	1
	1	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(database.getClusters().size()>0);	42	0	1
	2	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals("STR",database.getName());	42	0	1
	3	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNotNull(rec);	42	0	1
	4	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(res>0);	42	0	1
	5	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertNull(database.load(rec.getIdentity()));	42	0	1
	6	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(doc.getIdentity().isValid());	42	0	1
	7	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(1,database.getMetadata().getClusters().size());	42	0	1
	8	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(database.getTransaction().isActive());	42	0	1
	9	/	TestBinaryRecordsQuery	testSelectDeleteBinary	assertEquals(1,res.intValue());	assertFalse(database.isClosed());	42	0	1
17	0	orientechnologies/orientdb	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	70.73	0	1
	1	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(doubleSerializer);	70.73	0	1
	2	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(OBJECT==OBJECT```and```OBJECT.equals(OBJECT));	70.73	0	1
	3	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(OBJECT==null```and```OBJECT.equals(null));	70.73	0	1
	4	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	70.73	0	1
	5	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	70.73	0	1
	6	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,doubleSerializer.serializeNativeObject(OBJECT));	70.73	0	1
	7	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(data,newbyte[FIELD_SIZE]);	70.73	0	1
	8	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(buffer.order(),ByteOrder.nativeOrder());	70.73	0	1
	9	/	DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	70.73	0	1
18	0	orientechnologies/orientdb	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotNull(params);	56.01	0	1
	1	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotNull(channel);	56.01	0	1
	2	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertFalse(channel.isClosed());	56.01	0	1
	3	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotNull(requestRead.getStatement());	56.01	0	1
	4	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotNull(requestRead.getParameters());	56.01	0	1
	5	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertEquals(params,request.getParameters());	56.01	0	1
	6	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertEquals("STR",request.getStatement());	56.01	0	1
	7	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotEquals(null,requestRead.getSerializer());	56.01	0	1
	8	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertNotEquals(null,requestRead.getDriver());	56.01	0	1
	9	/	OLiveQueryMessagesTests	testRequestWriteRead	assertEquals(requestRead.getQuery(),"STR");	assertTrue(requestRead.getProtVersion()>0);	56.01	0	1
19	0	orientechnologies/orientdb	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertEquals("STR","STR");	66.25	0	1
	1	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(search);	66.25	0	1
	2	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertTrue(db.getTransaction().isActive());	66.25	0	1
	3	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertEquals(1,search.size());	66.25	0	1
	4	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(vertex);	66.25	0	1
	5	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(c1);	66.25	0	1
	6	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(db);	66.25	0	1
	7	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertNotNull(schema);	66.25	0	1
	8	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertTrue(context.exists(name.getMethodName()));	66.25	0	1
	9	/	LuceneListIndexingTest	rname	assertThat(search).hasSize(1);	assertFalse(db.getTransaction().isActive());	66.25	0	1
20	0	orientechnologies/orientdb	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertNotNull(database);	49.86	0	1
	1	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertNotEquals(0,"STR");	49.86	0	1
	2	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertTrue("STR");	49.86	0	1
	3	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertEquals(1,"STR");	49.86	0	1
	4	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertTrue(database.getTransaction().isActive());	49.86	0	1
	5	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertTrue(database.getTransaction().orElseThrow().isActive());	49.86	0	1
	6	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertFalse(database.isClosed());	49.86	0	1
	7	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertTrue(database.exists());	49.86	0	1
	8	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertEquals(1,"STR");	49.86	0	1
	9	/	DefaultValueTest	testDefaultValueProvidedMandatoryReadonlyFromJson	assertNotNull(saved.field("STR"));	assertTrue("STR");	49.86	0	1
21	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertNotNull(floatSerializer);	43.41	0	1
	1	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertNotNull(OBJECT);	43.41	0	1
	2	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.capacity()>=FIELD_SIZE+5);	43.41	0	1
	3	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.isDirect());	43.41	0	1
	4	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertFalse(buffer.isReadOnly());	43.41	0	1
	5	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertFalse(Float.isNaN(5.5f));	43.41	0	1
	6	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertArrayEquals(newbyte[]{0,0,80,63},buffer.array());	43.41	0	1
	7	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertEquals(4,binarySize);	43.41	0	1
	8	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertEquals(5.5f,5.5f);	43.41	0	1
	9	/	FloatSerializerTest	testSerializeInByteBuffer	assertEquals(binarySize,FIELD_SIZE);	assertTrue(buffer.isDirect());	43.41	0	1
22	0	orientechnologies/orientdb	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(stream);	75.06	0	1
	1	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(OBJECT,deserializeFromByteBufferObject(buffer));	75.06	0	1
	2	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(encodedSize>0);	75.06	0	1
	3	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertFalse(encodedSize<0);	75.06	0	1
	4	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertArrayEquals(OBJECT.getBytes(),deserializeFromByteBufferObject(buffer).getBytes());	75.06	0	1
	5	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(newString(encoded,StandardCharsets.UTF_8),deserializeFromByteBufferObject(buffer));	75.06	0	1
	6	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(encoded);	75.06	0	1
	7	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(OBJECT,newString(encoded,StandardCharsets.UTF_8));	75.06	0	1
	8	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(stream.length,buffer.limit());	75.06	0	1
	9	/	OUTFSerializerTest	testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(encodedSize<=encoded.length);	75.06	0	1
23	0	orientechnologies/orientdb	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertEquals(2,hosts.size());	108.44	0	1
	1	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertFalse(hosts.isEmpty());	108.44	0	1
	2	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotNull(hosts);	108.44	0	1
	3	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotEquals(0,hosts.size());	108.44	0	1
	4	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertSame(hosts,instance.getHosts());	108.44	0	1
	5	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotSame(hosts,instance.getHosts());	108.44	0	1
	6	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertEquals(2,hosts.size());	108.44	0	1
	7	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertNotEquals(0,hosts.size());	108.44	0	1
	8	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertTrue("STR");	108.44	0	1
	9	/	ORemotePushMessagesTest	testDistributedConfig	assertEquals(readRequest.getHosts().size(),2);	assertFalse("STR");	108.44	0	1
24	0	orientechnologies/orientdb	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertTrue(result.hasNext());	33.68	1	1
	1	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertNotNull(result);	33.68	0	1
	2	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertEquals("STR","STR");	33.68	0	1
	3	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertNotEquals("STR","STR");	33.68	0	1
	4	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertSame(result,result);	33.68	0	1
	5	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertNotSame(result,null);	33.68	0	1
	6	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	33.68	0	1
	7	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertFalse(result.hasPlan());	33.68	0	1
	8	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertThrows(Exception.class,"STR");	33.68	0	1
	9	/	ODropUserStatementExecutionTest	testPlain	assertTrue(result.hasNext());	assertEquals(0,result.getWarnings());	33.68	0	1
25	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotNull(db);	31.63	0	1
	1	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.exists());	31.63	0	1
	2	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotEquals(null,result);	31.63	0	1
	3	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(result.size()<=4);	31.63	0	1
	4	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.getTransaction().isActive());	31.63	0	1
	5	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertEquals(0,db.getTransaction().getEntryCount());	31.63	0	1
	6	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertFalse(db.isInTx());	31.63	0	1
	7	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertNotNull(db.registerHook(null));	31.63	0	1
	8	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertTrue(db.begin().getId()>=0);	31.63	0	1
	9	/	OMatchStatementExecutionTest	testArrayRange3	assertEquals(1,result.size());	assertFalse("STR");	31.63	0	1
26	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(db);	37.16	0	1
	1	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(db.exists());	37.16	0	1
	2	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(getProfilerInstance());	37.16	0	1
	3	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull("STR");	37.16	0	1
	4	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull(db.command(newOCommandSQL(query.toString())));	37.16	0	1
	5	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(db.getClusterNames().size()>0);	37.16	0	1
	6	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertTrue(result.size()>0);	37.16	0	1
	7	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertEquals(expectedResultSize,result.size());	37.16	0	1
	8	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull("STR");	37.16	0	1
	9	/	OMatchStatementExecutionTest	testTriangle3	assertEquals(1,result.size());	assertNotNull("STR");	37.16	0	1
27	0	orientechnologies/orientdb	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedSize,size());	27.38	0	1
	1	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(size()>0);	27.38	0	1
	2	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(obj);	27.38	0	1
	3	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(condition);	27.38	0	1
	4	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(condition);	27.38	0	1
	5	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedObject,actualObject);	27.38	0	1
	6	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(expectedInt,actualInt);	27.38	0	1
	7	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(expectedObject,actualObject);	27.38	0	1
	8	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(expectedSize,size());	27.38	0	1
	9	/	OSBTreeBonsaiLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(expectedLong,actualLong);	27.38	0	1
28	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(2,simpleKeyIndexDefinition.getParamCount());	82.79	0	1
	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(2,simpleKeyIndexDefinition.getParamTypes().length);	82.79	0	1
	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(simpleKeyIndexDefinition);	82.79	0	1
	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(simpleKeyIndexDefinition.getParamCount()<2);	82.79	0	1
	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,simpleKeyIndexDefinition.getParamCount());	82.79	0	1
	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(simpleKeyIndexDefinition.getParamCount()!=0);	82.79	0	1
	6	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(simpleKeyIndexDefinition.getParamType(0).equals(OType.FLOAT));	82.79	0	1
	7	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(simpleKeyIndexDefinition.getParamType(1)instanceofOType);	82.79	0	1
	8	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(OType.STRING,simpleKeyIndexDefinition.getParamType(1));	82.79	0	1
	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(OType.INTEGER,simpleKeyIndexDefinition.getKeyTypes().get(0));	82.79	0	1
29	0	orientechnologies/orientdb	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,buffer.capacity()-1);	26.5	0	1
	1	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.remaining()>=size);	26.5	0	1
	2	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(buffer);	26.5	0	1
	3	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertArrayEquals(newbyte[size],buffer.array());	26.5	0	1
	4	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(buffer.limit(),buffer.capacity());	26.5	0	1
	5	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(rid,linkSerializer.deserializeFromByteBufferObject(buffer));	26.5	0	1
	6	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.order().equals(ByteOrder.nativeOrder()));	26.5	0	1
	7	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(BufferOverflowException.class,()->buffer.put(newbyte[size+1]));	26.5	0	1
	8	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(BufferUnderflowException.class,()->buffer.get(newbyte[size+1]));	26.5	0	1
	9	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(0,buffer.position());	26.5	0	1
30	0	orientechnologies/orientdb	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(multiKey));	87.34	0	1
	1	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertSame(mapResult,multiKeyMap.get(multiKey));	87.34	0	1
	2	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap);	87.34	0	1
	3	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	87.34	0	1
	4	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	87.34	0	1
	5	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.keys.equals(anotherMultiKey.keys));	87.34	0	1
	6	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertArrayEquals(multiKey.keys.toArray(),anotherMultiKey.keys.toArray());	87.34	0	1
	7	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotEquals(multiKey.hashCode(),anotherMultiKey.hashCode());	87.34	0	1
	8	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotSame("STR",multiKey.keys,anotherMultiKey.keys);	87.34	0	1
	9	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotNull(multiKey.keys);	87.34	0	1
31	0	trautonen/coveralls-maven-plugin	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(file.exists());	36.77	0	1
	1	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(job);	36.77	0	1
	2	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(job.getCoverallsFile());	36.77	0	1
	3	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(coverallsFile,job.getCoverallsFile());	36.77	0	1
	4	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(coverallsFile.length()>0);	36.77	0	1
	5	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(job.getCoverallsFile().canRead());	36.77	0	1
	6	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertFalse(job.getCoverallsFile().isDirectory());	36.77	0	1
	7	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(folder.getRoot().getAbsolutePath(),job.getDirectoryPrefix());	36.77	0	1
	8	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(coverallsFile.getAbsolutePath(),job.getCoverallsFile().getAbsolutePath());	36.77	0	1
	9	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertEquals(job.getCoverallsFile().getParentFile(),folder.getRoot());	36.77	0	1
32	0	trautonen/coveralls-maven-plugin	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	1	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	2	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	3	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	4	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	5	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	6	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	7	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	8	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
	9	/	WildcardsTest	testMatchesAgainstStar	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR");	48.75	0	1
33	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertEquals("STR","STR");	38.38	0	1
	1	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertTrue(two.getChildList().isEmpty());	38.38	0	1
	2	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertNotNull(two);	38.38	0	1
	3	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertNull("STR");	38.38	0	1
	4	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertEquals(2,two.getChildList().size());	38.38	0	1
	5	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertEquals("STR","STR");	38.38	0	1
	6	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertEquals(5,root.getChildList().size());	38.38	0	1
	7	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertFalse(one.equals(two));	38.38	0	1
	8	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertNotSame(one,two.getParent());	38.38	0	1
	9	/	ConfigTest	gets_deep_value	assertEquals("STR",root.getString("STR"));	assertFalse(two.getChildList().isEmpty());	38.38	0	1
34	0	nidi3/graphviz-java	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertEquals(2,"STR");	57.34	0	1
	1	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertEquals("STR","STR");	57.34	0	1
	2	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertNotNull("STR");	57.34	0	1
	3	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertNotEquals(0,"STR");	57.34	0	1
	4	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertTrue("STR");	57.34	0	1
	5	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertFalse("STR");	57.34	0	1
	6	/	SvgElementFinderTest	linkedNodeNamesOf	assertEquals(asList("STR","STR"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));	assertTrue("STR");	57.34	0	1
35	0	nidi3/graphviz-java	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertEquals(90,angle);	43.2	0	1
	1	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertTrue(angle>0);	43.2	0	1
	2	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertFalse(angle<360);	43.2	0	1
	3	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertNotNull(angle);	43.2	0	1
	4	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertNotEquals(270,angle);	43.2	0	1
	5	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertNotEquals(180,angle);	43.2	0	1
	6	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertThat("STR",angle,CoreMatchers.allOf(CoreMatchers.greaterThan(0),CoreMatchers.lessThan(360)));	43.2	0	1
	7	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertThat("STR",angle,CoreMatchers.closeTo(180,5));	43.2	0	1
	8	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertNotSame("STR",90,angle);	43.2	0	1
	9	/	ColorTest	angle	assertEquals(attrs(attr("STR","STR"),attr("STR",45)),Color.RED.angle(45));	assertNotSame("STR",150,angle);	43.2	0	1
36	0	PeterisP/morphology	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.enablePrefixes==false);	51.29	0	1
	1	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertFalse(locītājs.enablePrefixes);	51.29	0	1
	2	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.isRecognized());	51.29	0	1
	3	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertNotNull(locītājs);	51.29	0	1
	4	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertEquals(0,locītājs.cacheSize);	51.29	0	1
	5	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertTrue(locītājs.getWordforms().isEmpty());	51.29	0	1
	6	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertNull(locītājs.getPrefix());	51.29	0	1
	7	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertFalse(locītājs.isCaseSensitive());	51.29	0	1
	8	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertNotNull("STR");	51.29	0	1
	9	/	MorphologyTest	prefix_guessing_debitive	assertFalse(w.isRecognized());	assertFalse("STR");	51.29	0	1
37	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	48.25	0	1
	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	48.25	0	1
	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	48.25	0	1
	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	48.25	0	1
	4	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(GrammaticalGender.MASCULINE,formas.get(0).getGender());	48.25	0	1
	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(GrammaticalCase.ACCUSATIVE,formas.get(0).getCase());	48.25	0	1
	6	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals("STR",formas.get(0).getLemma());	48.25	0	1
	7	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.stream().allMatch(forma->!forma.getWordClass().isEmpty()));	48.25	0	1
	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.stream().anyMatch(forma->forma.getCoveredLemma().isEmpty()));	48.25	0	1
	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.stream().allMatch(Wordform::isProperNoun));	48.25	0	1
38	0	PeterisP/morphology	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized()==true);	51.71	0	1
	1	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	51.71	0	1
	2	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals("STR",stum.getLemma());	51.71	0	1
	3	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals("STR",stum.toString());	51.71	0	1
	4	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized());	51.71	0	1
	5	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.wordforms.size()>0);	51.71	0	1
	6	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locītājs.isRecognized()==true);	51.71	0	1
	7	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	51.71	0	1
	8	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals("STR",stum.getLemma());	51.71	0	1
	9	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals("STR",stum.toString());	51.71	0	1
39	0	redraiment/jactiverecord	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertEquals(expectedString,actualString);	43.37	0	1
	1	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertNotEquals(expectedString,actualString);	43.37	0	1
	2	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertNotNull(nonNullObject);	43.37	0	1
	3	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertTrue(condition);	43.37	0	1
	4	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertFalse(condition);	43.37	0	1
	5	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertEquals(expectedChar,actualChar);	43.37	0	1
	6	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertNotEquals(expectedChar,actualChar);	43.37	0	1
	7	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertTrue(stringToTest.contains(substringToCheck));	43.37	0	1
	8	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertFalse(stringToTest.contains(substringToCheck));	43.37	0	1
	9	/	TSqlBuilderTest	testDelete	assertEquals("STR",sql.delete().from("STR").toString());	assertTrue(collectionToTest.contains(elementToCheck));	43.37	0	1
40	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotNull(moneyToStrUAH);	88.42	0	1
	1	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(200.00));	88.42	0	1
	2	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(1000.09));	88.42	0	1
	3	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrUAHENG.convert(null));	88.42	0	1
	4	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(1000.0));	88.42	0	1
	5	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(1000.50));	88.42	0	1
	6	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(299.99));	88.42	0	1
	7	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(110.15));	88.42	0	1
	8	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrRUR.convert(0.50));	88.42	0	1
	9	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrRUR.convert(1.50));	88.42	0	1
41	0	arnohaase/a-foundation	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertFalse(ser==null);	40.12	0	1
	1	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertNotNull(result);	40.12	0	1
	2	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertDoesNotThrow(()->ser.writeBooleanLiteral(false));	40.12	0	1
	3	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertNotSame(result,"STR");	40.12	0	1
	4	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertThat(ser.getOut()).isInstanceOf(BufferedOutputStream.class);	40.12	0	1
	5	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertThat(ser.getMarkers()).isEmpty();	40.12	0	1
	6	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertThat(baos).hasSize(5).isNotNull();	40.12	0	1
	7	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertNotEquals(ser,null);	40.12	0	1
	8	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertAll("STR");	40.12	0	1
	9	/	AJsonSerHelperTest	testFalse	assertEquals("STR",result);	assertEquals("STR",result);	40.12	1	1
42	0	AlejandroRivera/embedded-rabbitmq	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertEquals("STR",os.toString().trim());	55.75	0	1
	1	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertNull(version.getExtractionFolder());	55.75	0	1
	2	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(executableFile.exists());	55.75	0	1
	3	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(executableFile.createNewFile());	55.75	0	1
	4	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertSame(processExecutor,factory.createInstance());	55.75	0	1
	5	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(array.contains(element));	55.75	0	1
	6	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertFalse(array.contains(element));	55.75	0	1
	7	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(list.contains(element));	55.75	0	1
	8	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertFalse(list.contains(element));	55.75	0	1
	9	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(set.contains(element));	55.75	0	1
43	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor);	79.58	0	1
	1	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockAttributeInjector);	79.58	0	1
	2	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockObjectQueryPreparer);	79.58	0	1
	3	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockLogger);	79.58	0	1
	4	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockAccessConnection);	79.58	0	1
	5	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(polledObjects);	79.58	0	1
	6	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(polled001);	79.58	0	1
	7	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(mockObjectQueryInfo001);	79.58	0	1
	8	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(objectName001);	79.58	0	1
	9	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(attributeNames001);	79.58	0	1
44	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotNull(result);	68.36	0	1
	1	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertFalse(result.isEmpty());	68.36	0	1
	2	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertTrue(result.contains(this.objectName));	68.36	0	1
	3	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertThat(result,CoreMatchers.instanceOf(Set.class));	68.36	0	1
	4	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertSame(this.testQueryResult,result);	68.36	1	1
	5	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertEquals(1,result.size());	68.36	0	1
	6	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertEquals(this.mockQueryExp,query);	68.36	0	1
	7	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertArrayEquals(this.testQueryResult.toArray(),result.toArray());	68.36	0	1
	8	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertThat(this.mockAttributeList,CoreMatchers.instanceOf(List.class));	68.36	0	1
	9	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertTrue(this.testAttributeList.isEmpty());	68.36	0	1
45	0	ExpediaGroup/beeju	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertNotNull(databaseName());	60.28	0	1
	1	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertTrue(!databaseName().isEmpty());	60.28	0	1
	2	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertTrue(databaseName()instanceofString);	60.28	0	1
	3	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertFalse(databaseName().isEmpty());	60.28	0	1
	4	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertTrue(databaseName().length()>0);	60.28	0	1
	5	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertFalse(databaseName().length()==0);	60.28	0	1
	6	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertEquals("STR",databaseName());	60.28	0	1
	7	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertNotEquals("STR",databaseName());	60.28	0	1
	8	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertEquals(true,"STR");	60.28	0	1
	9	/	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	assertThat(dbNameAndHiveConfCore.databaseName(),is("STR"));	assertEquals(false,"STR");	60.28	0	1
46	0	mikolajmitura/java-properties-to-json	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotNull(jsonObject);	53.38	0	1
	1	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObjectinstanceofNumberJsonType);	53.38	0	1
	2	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObject.getType().equals(AbstractJsonType.Type.NUMBER));	53.38	0	1
	3	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertFalse(jsonObject.isNull());	53.38	0	1
	4	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotEquals(localDate.getDayOfYear(),2019);	53.38	0	1
	5	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertEquals(localDate.getYear(),2019);	53.38	0	1
	6	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(localDate.isEqual(LocalDate.of(2019,8,4)));	53.38	0	1
	7	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotSame(localDate.plusYears(1),localDate);	53.38	0	1
	8	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertFalse(localDate.isAfter(LocalDate.of(2019,8,5)));	53.38	0	1
	9	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(localDate.isBefore(LocalDate.of(2020,1,1)));	53.38	0	1
47	0	basis-technology-corp/tcl-regex-java	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertNotNull(exp);	32.34	0	1
	1	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertThrows(RegexException.class,()->HsrePattern.compile(null));	32.34	0	1
	2	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertSame(exp,"STR");	32.34	0	1
	3	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertNotSame(exp,"STR");	32.34	0	1
	4	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertArrayEquals("STR","STR");	32.34	0	1
	5	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertTrue("STR");	32.34	0	1
	6	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertEquals(0,"STR");	32.34	0	1
	7	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertFalse("STR");	32.34	0	1
	8	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertNotEquals(0,"STR");	32.34	0	1
	9	/	SimpleTest	testNullQuant	assertThat("STR",matches(exp));	assertNotEquals(1,"STR");	32.34	0	1
48	0	DigitalPebble/storm-crawler	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertEquals(accum.toString(),text.trim());	32.61	0	1
	1	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertEquals(_text(element),text.trim());	32.61	0	1
	2	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertTrue(matches.contains(element));	32.61	0	1
	3	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertNotNull(accum);	32.61	0	1
	4	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertNotEquals(TextExtractor.INCLUDE_PARAM_NAME,conf.getExcludeParamName());	32.61	0	1
	5	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertEquals(TextExtractor.INCLUDE_PARAM_NAME,conf.getIncludeParamName());	32.61	0	1
	6	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertNotEquals(matches,element);	32.61	0	1
	7	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertNotSame(matches,element);	32.61	0	1
	8	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertNotSame(content,text);	32.61	0	1
	9	/	TextExtractorTest	testMainContent	assertEquals("STR",text);	assertFalse("STR");	32.61	0	1
1	0	Yubico/yubico-java-client	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals("STR",resultPublicId);	67.74	0	1
	1	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals("STR",resultPublicId);	67.74	0	1
	2	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	67.74	0	1
	3	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(!resultPublicId.isEmpty());	67.74	0	1
	4	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(11,resultPublicId.toCharArray().length);	67.74	0	1
	5	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue("STR");	67.74	0	1
	6	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals("STR",resultPublicId.substring(0,9));	67.74	0	1
	7	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue("STR");	67.74	0	1
	8	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	67.74	1	1
	9	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame("STR",resultPublicId);	67.74	0	1
2	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertTrue(result);	35.52	0	1
	1	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertFalse(result);	35.52	0	1
	2	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotNull(propertyIndexByKey);	35.52	0	1
	3	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNull(propertyIndexByValue);	35.52	0	1
	4	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertSame(propertyIndexByIntegerKey,propertyIndexByKey);	35.52	0	1
	5	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotSame(propertyIndexByKey,propertyIndexByValue);	35.52	0	1
	6	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertEquals(OMultiValueChangeEvent.OChangeType.UPDATE,changeEvent.getChangeType());	35.52	0	1
	7	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotNull(multiValueChangeEvent);	35.52	0	1
	8	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNull(changeEvent.getKey());	35.52	0	1
	9	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertFalse(keysToAdd.isEmpty());	35.52	0	1
3	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	38.08	0	1
	1	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.getRecord());	38.08	0	1
	2	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.getAsDocument());	38.08	0	1
	3	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotEquals(null,serializer.toStream(newODocument(),true));	38.08	0	1
	4	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotEquals(null,serializer.fromStream(newbyte[]{},null,null));	38.08	0	1
	5	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertArrayEquals("STR","STR");	38.08	0	1
	6	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertFalse(extr.isDirty());	38.08	0	1
	7	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertFalse(extr.isDirty());	38.08	0	1
	8	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertTrue(extr.isEmbedded());	38.08	0	1
	9	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertTrue(serializerinstanceofORecordSerializer);	38.08	0	1
4	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertNotNull(result);	45.87	0	1
	1	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	45.87	1	1
	2	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	45.87	0	1
	3	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertSame(result,"STR");	45.87	0	1
	4	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	45.87	0	1
	5	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertArrayEquals("STR","STR");	45.87	0	1
	6	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertEquals("STR","STR");	45.87	0	1
	7	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertNull(result.getExecutionPlan());	45.87	0	1
	8	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertThrows(NullPointerException.class,()->db.query(null));	45.87	0	1
	9	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertThrows(OCommandSQLParsingException.class,"STR");	45.87	0	1
5	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	22.01	0	1
	1	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertEquals(26,qResult.size());	22.01	0	1
	2	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	22.01	0	1
	3	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertSame(ODocument.class,qResult.get(0).getClass());	22.01	0	1
6	0	orientechnologies/orientdb	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotNull(rs);	89.77	0	1
	1	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertEquals(0,rs.getMetaData().getColumnCount());	89.77	0	1
	2	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertFalse(rs.next());	89.77	0	1
	3	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNull("STR");	89.77	0	1
	4	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotEquals(0,rs.getFetchSize());	89.77	0	1
	5	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertEquals(0,rs.getRow());	89.77	0	1
	6	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertTrue(ds.getConnection().isValid(0));	89.77	0	1
	7	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotNull(ds.getConnection());	89.77	0	1
	8	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotEquals(0,ds.getLoginTimeout());	89.77	0	1
	9	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertTrue(ds.isWrapperFor(OrientDataSource.class));	89.77	0	1
7	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertNotNull(result);	58.39	0	1
	1	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(resultinstanceofOCompositeKey);	58.39	0	1
	2	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertEquals(2,((OCompositeKey)result).getKeys().size());	58.39	0	1
	3	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertFalse(((OCompositeKey)result).getKeys().isEmpty());	58.39	0	1
	4	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(((OCompositeKey)result).getKeys().get(0)instanceofInteger);	58.39	0	1
	5	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(((OCompositeKey)result).getKeys().get(1)instanceofString);	58.39	0	1
	6	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertArrayEquals(newObject[]{12,"STR");	58.39	0	1
	7	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(((OCompositeKey)result).getComparator()instanceofODefaultComparator);	58.39	0	1
	8	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertNotEquals(12,((OCompositeKey)result).hashCode());	58.39	0	1
	9	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertEquals(OCompositeKey.class,((OCompositeKey)result).getClass());	58.39	0	1
8	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertNotNull(compositeIndex);	62.16	0	1
	1	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertEquals(2,compositeIndex.getFields().size());	62.16	0	1
	2	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertFalse(compositeIndex.isNull());	62.16	0	1
	3	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertEquals(2,compositeIndex.getDefinition().getFields().size());	62.16	0	1
	4	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(compositeIndex.getDefinition().getFields().getClass().isArray());	62.16	0	1
	5	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertEquals("STR",compositeIndex.getFields().get(0));	62.16	0	1
	6	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertTrue(compositeIndex.getFields().equals(compositeIndex.getFields()));	62.16	0	1
	7	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertNotEquals(compositeIndex.hashCode(),compositeIndex.clone().hashCode());	62.16	0	1
	8	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertNotEquals(0,compositeIndex.getFields().size());	62.16	0	1
	9	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	assertEquals(result,newOCompositeKey(Arrays.asList(12,"STR")));	assertArrayEquals("STR",compositeIndex.getFields().toArray());	62.16	0	1
9	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(compositeIndex);	53.55	0	1
	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	53.55	0	1
	2	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(result.isEmpty());	53.55	0	1
	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),result.size());	53.55	0	1
	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(3,result.size());	53.55	0	1
	5	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(0),result.get(0).getKeys().get(0));	53.55	0	1
	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(1),result.get(0).getKeys().get(1));	53.55	0	1
	7	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(2),result.get(0).getKeys().get(2));	53.55	0	1
	8	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(1).getKeys().get(0),result.get(1).getKeys().get(0));	53.55	0	1
	9	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(1).getKeys().get(1),result.get(1).getKeys().get(1));	53.55	0	1
10	0	orientechnologies/orientdb	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.isEmbedded());	31.81	0	1
	1	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	31.81	0	1
	2	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	31.81	0	1
	3	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertSame(doc1,"STR");	31.81	0	1
	4	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertNull("STR");	31.81	0	1
	5	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc1.isEmbedded());	31.81	0	1
	6	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertSame(doc2,"STR");	31.81	0	1
	7	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertEquals(0,manager.getCreatedRecords().size());	31.81	0	1
	8	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertSame(doc1,manager.getRecord(doc1));	31.81	0	1
	9	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.isDirty(doc));	31.81	0	1
11	0	orientechnologies/orientdb	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(-1,compositeKey.compareTo(anotherCompositeKey));	93.52	0	1
	1	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(1,anotherCompositeKey.compareTo(compositeKey));	93.52	0	1
	2	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(0,compositeKey.compareTo(compositeKey));	93.52	0	1
	3	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertFalse(compositeKey.equals(null));	93.52	0	1
	4	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(compositeKey.equals(compositeKey));	93.52	0	1
	5	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertFalse(compositeKey.equals(anotherCompositeKey));	93.52	0	1
	6	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(anotherCompositeKey.equals(anotherCompositeKey));	93.52	0	1
	7	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(anotherCompositeKey.equals(compositeKey));	93.52	0	1
	8	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertNotNull(compositeKey);	93.52	0	1
	9	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertNotNull(anotherCompositeKey);	93.52	0	1
12	0	orientechnologies/orientdb	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertNotNull(context);	77.3	0	1
	1	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertEquals("STR",type.name());	77.3	0	1
	2	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertFalse("STR");	77.3	0	1
	3	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertTrue(context.exists(name.getMethodName()));	77.3	0	1
	4	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertSame(db,"STR");	77.3	0	1
	5	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertFalse(execute.isEmpty());	77.3	0	1
	6	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertEquals(3,execute.size());	77.3	0	1
	7	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertNotEquals(0,"STR");	77.3	0	1
	8	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertFalse("STR");	77.3	0	1
	9	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertTrue("STR");	77.3	0	1
13	0	orientechnologies/orientdb	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(nameProperty);	55.96	0	1
	1	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getName(),PROP_NAME);	55.96	1	1
	2	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(actual,equalTo(expected));	55.96	0	1
	3	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(actual,closeTo(expected,delta));	55.96	0	1
	4	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(expected,actual);	55.96	0	1
	5	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(db.exists());	55.96	0	1
	6	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(clazz);	55.96	0	1
	7	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals("STR",clazz.getName());	55.96	0	1
	8	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(clazz.isAbstract());	55.96	0	1
	9	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(actual,"STR");	55.96	0	1
14	0	orientechnologies/orientdb	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(123.456,focal.deserializeFromByteBufferObject(buffer));	39.36	0	1
	1	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(buffer);	39.36	0	1
	2	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(8,stream.length);	39.36	0	1
	3	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(OBJECT.equals(OBJECT));	39.36	0	1
	4	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertFalse(OBJECT.equals(null));	39.36	0	1
	5	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertArrayEquals(stream,streamCopy);	39.36	0	1
	6	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(buffer.isDirect());	39.36	0	1
	7	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(doubleSerializerinstanceofODoubleSerializer);	39.36	0	1
	8	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotEquals(0,Double.compare(focal.deserializeFromByteBufferObject(buffer),0.0));	39.36	0	1
	9	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertThrows(BufferOverflowException.class,()->buffer.putInt(42));	39.36	0	1
15	0	orientechnologies/orientdb	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertNotNull(dbPool);	32.35	0	1
	1	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertNotNull(db);	32.35	0	1
	2	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertEquals("STR",dbName);	32.35	0	1
	3	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(db.getName().equals(dbName));	32.35	0	1
	4	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	32.35	0	1
	5	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	32.35	0	1
	6	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.getAvailableInstances()>=1);	32.35	0	1
	7	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.acquire()instanceofODatabaseDocumentTx);	32.35	0	1
	8	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.isAutoCreate());	32.35	0	1
	9	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	32.35	0	1
16	0	orientechnologies/orientdb	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertEquals(results.size(),1);	89.31	1	1
	1	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(db);	89.31	0	1
	2	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertTrue(context.exists(name.getMethodName()));	89.31	0	1
	3	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertFalse(db.isClosed());	89.31	0	1
	4	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	89.31	0	1
	5	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertEquals(8,db.getClusters());	89.31	0	1
	6	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(query);	89.31	0	1
	7	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(params);	89.31	0	1
	8	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(db.getMetadata());	89.31	0	1
	9	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertTrue(db.exists(name.getMethodName()));	89.31	0	1
17	0	adlnet/jxapi	AboutTest	testSetVersion	assertNotNull(version);	assertNotNull(version);	65.78	1	1
	1	/	AboutTest	testSetVersion	assertNotNull(version);	assertEquals(version.size(),1);	65.78	0	1
	2	/	AboutTest	testSetVersion	assertNotNull(version);	assertArrayEquals(versionInput.toArray(),about.getVersion().toArray());	65.78	0	1
	3	/	AboutTest	testSetVersion	assertNotNull(version);	assertNotEquals(version.get(0),"STR");	65.78	0	1
	4	/	AboutTest	testSetVersion	assertNotNull(version);	assertThrows(UnsupportedOperationException.class,"STR");	65.78	0	1
	5	/	AboutTest	testSetVersion	assertNotNull(version);	assertEquals(versionInput,version);	65.78	0	1
	6	/	AboutTest	testSetVersion	assertNotNull(version);	assertTrue("STR");	65.78	0	1
	7	/	AboutTest	testSetVersion	assertNotNull(version);	assertFalse("STR");	65.78	0	1
	8	/	AboutTest	testSetVersion	assertNotNull(version);	assertNull(about.getVersion().get(1));	65.78	0	1
	9	/	AboutTest	testSetVersion	assertNotNull(version);	assertTrue("STR");	65.78	0	1
18	0	adlnet/jxapi	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected,actual);	72.68	0	1
	1	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotNull(actual);	72.68	1	1
	2	/	ContextTest	testGetRevision	assertNotNull(actual);	assertTrue(expected.contains(actual));	72.68	0	1
	3	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotEquals(expected,actual);	72.68	0	1
	4	/	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected.toUpperCase(),actual.toUpperCase());	72.68	0	1
	5	/	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected.charAt(0),actual.charAt(0));	72.68	0	1
	6	/	ContextTest	testGetRevision	assertNotNull(actual);	assertFalse(expected.equals(actual));	72.68	0	1
	7	/	ContextTest	testGetRevision	assertNotNull(actual);	assertTrue(expected.startsWith(actual.substring(0,1)));	72.68	0	1
	8	/	ContextTest	testGetRevision	assertNotNull(actual);	assertFalse(actual.endsWith(expected.substring(0,1)));	72.68	0	1
	9	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotSame(expected.toCharArray().length,actual.toCharArray().length);	72.68	0	1
19	0	adlnet/jxapi	VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.getVerb());	62.07	0	1
	1	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	62.07	1	1
	2	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals(null,actual);	62.07	0	1
	3	/	VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	62.07	0	1
	4	/	VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.isNegated());	62.07	0	1
	5	/	VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(7,actual.getLength());	62.07	0	1
	6	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),actual);	62.07	0	1
	7	/	VerbsTest	testAnswered	assertNotNull(actual);	assertSame(actual,Verbs.answered());	62.07	0	1
	8	/	VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.toString());	62.07	0	1
	9	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals("STR",actual.getVerb());	62.07	0	1
20	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	18.53	0	1
21	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(SCALED,score.getScaled());	40.82	0	1
	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(RAW,score.getRaw());	40.82	0	1
	2	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MIN,score.getMin());	40.82	0	1
	3	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MAX,score.getMax());	40.82	0	1
	4	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(SCALED,score.getRaw());	40.82	0	1
	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(MAX,score.getMin());	40.82	0	1
	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertFalse(SCALED<RAW);	40.82	0	1
	7	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(MAX>MIN);	40.82	0	1
	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	40.82	1	1
	9	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	40.82	0	1
22	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	49.29	0	1
	1	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	49.29	0	1
	2	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	49.29	0	1
	3	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	49.29	1	1
	4	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	49.29	0	1
	5	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	49.29	0	1
	6	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(Object.class,schemas.get(0).getClass());	49.29	0	1
	7	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertArrayEquals(newXsdSchema[]{schemas.get(0)},schemas.toArray());	49.29	0	1
	8	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser);	49.29	0	1
	9	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(Stream.class,getResultXsdSchemas().getClass());	49.29	0	1
23	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	53.15	0	1
	1	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	53.15	0	1
	2	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(0,result.size());	53.15	0	1
	3	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(4,result.size());	53.15	0	1
	4	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(workerData->workerData.getAddress().equals(agent1)));	53.15	0	1
	5	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(workerData->workerData.getAddress().equals(agent2)));	53.15	0	1
	6	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertSame(list.get(2),result.get(0));	53.15	0	1
	7	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(list.get(1),result.get(0));	53.15	0	1
	8	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(list.get(0).getAddress().toString(),result.get(0).getAddress().toString());	53.15	0	1
	9	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(list.get(2).getAddress().toString(),result.get(1).getAddress().toString());	53.15	0	1
24	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(testContainer);	45.56	0	1
	1	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(currentPhase.get());	45.56	0	1
	2	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertEquals(TestPhase.SETUP,testPhase);	45.56	0	1
	3	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(userDir```);	45.56	0	1
	4	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertFalse(taskPerPhaseMap.isEmpty());	45.56	0	1
	5	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotEquals(currentPhase.get()```,```taskPerPhaseMap.get(TestPhase.SETUP));	45.56	0	1
	6	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertTrue(currentPhase.compareAndSet(null,TestPhase.SETUP)```and```currentPhase.compareAndSet(null,TestPhase.RUN));	45.56	0	1
	7	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertThrows(NullPointerException.class,()->taskPerPhaseMap.get(null)```,```ExceptionReporter.getInstance(),null```,```userDir,null```,```ExceptionReporter.getExceptions().isEmpty());	45.56	0	1
	8	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertTrue(```testPhase);	45.56	0	1
25	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(userDir);	70.26	0	1
	1	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testInstance);	70.26	0	1
	2	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstanceinstanceofSuccessTest);	70.26	0	1
	3	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstance.hashCode()>0);	70.26	0	1
	4	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstance.equals(testInstance));	70.26	0	1
	5	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testInstance.equals(null));	70.26	0	1
	6	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",test.getClass().getSimpleName());	70.26	0	1
	7	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",testContainer.getTestCase().getName());	70.26	0	1
	8	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNull(testContext.getException());	70.26	0	1
	9	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.isValid());	70.26	0	1
26	0	hazelcast/hazelcast-simulator	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertEquals("STR",actual);	56.91	0	1
	1	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertNotEquals("STR",actual);	56.91	0	1
	2	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertTrue("STR");	56.91	0	1
	3	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertFalse(actual.isEmpty());	56.91	0	1
	4	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertNull(humanReadableByteCount(-1,false));	56.91	0	1
	5	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertNotNull(actual);	56.91	0	1
	6	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertSame(actual,humanReadableByteCount(Integer.MAX_VALUE,true));	56.91	0	1
	7	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertNotSame(humanReadableByteCount(1024,true),humanReadableByteCount(2048,true));	56.91	0	1
	8	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertArrayEquals("STR",newString[]{humanReadableByteCount(1,true)});	56.91	0	1
	9	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	assertEqualsStringFormat("STR","STR",actual);	assertThrows(IllegalArgumentException.class,()->humanReadableByteCount(-1,false));	56.91	0	1
27	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotNull(workerAddress(1,3));	49.08	0	1
	1	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotNull(workerAddress(2,3));	49.08	0	1
	2	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertTrue(workerAddress(4,5)instanceofSimulatorAddress);	49.08	0	1
	3	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(workerAddress(6,7).getNodeType(),WORKER);	49.08	0	1
	4	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(4,workerAddress(2,4).getWorkerIndex());	49.08	0	1
	5	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals("STR",workerAddress(1,2).toString());	49.08	0	1
	6	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(1,workerAddress(1,2).getAgentIndex());	49.08	0	1
	7	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(8,9).getAgentIndex(),workerAddress(10,11).getWorkerIndex());	49.08	0	1
	8	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(2,1),workerAddress(1,2));	49.08	0	1
	9	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(10,5),workerAddress(5,10));	49.08	0	1
28	0	hazelcast/hazelcast-simulator	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotNull(test);	37.74	0	1
	1	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertTrue(!result.isEmpty());	37.74	0	1
	2	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertEquals(3,result.size());	37.74	0	1
	3	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertSame(testSuite,test.getTestSuite());	37.74	0	1
	4	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotEquals(null,test);	37.74	0	1
	5	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertFalse(result.contains(null));	37.74	0	1
	6	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotSame(tests,result);	37.74	0	1
	7	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertArrayEquals(newTestData[]{test},result.toArray());	37.74	0	1
	8	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertThrows(NullPointerException.class,()->registry.addTests(null));	37.74	0	1
	9	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotEquals(test.getId(),test.getTestCase().getId());	37.74	0	1
29	0	hazelcast/hazelcast-simulator	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,workerCount());	41.34	0	1
	1	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(0,workerCount());	41.34	0	1
	2	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workerCount()>=0);	41.34	0	1
	3	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(workers.isEmpty());	41.34	0	1
	4	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotNull(workers);	41.34	0	1
	5	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotSame("STR",workers,expectedWorkers);	41.34	0	1
	6	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertSame(workers,actualWorkers);	41.34	0	1
	7	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workers.stream().allMatch(Worker::isActive));	41.34	0	1
	8	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(workers.stream().anyMatch(worker->worker.getStatus()==WorkerStatus.FREE));	41.34	0	1
	9	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(3,workers.stream().filter(worker->worker.getAgentId()!=null).count());	41.34	0	1
30	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertTrue(returnValue);	37.43	0	1
	1	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertFalse(returnValue);	37.43	0	1
	2	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertNotNull(object);	37.43	0	1
	3	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertEquals("STR",actualString);	37.43	0	1
	4	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertThrows(BindException.class,"STR");	37.43	0	1
	5	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertSame(someObject,object);	37.43	0	1
	6	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertEquals(String.class,value.getClass());	37.43	0	1
	7	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertNotEquals(Integer.class,value.getClass());	37.43	0	1
	8	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertArrayEquals(expectedArray,actualArray);	37.43	0	1
	9	/	PropertyBindingSupport_Test	bind_withPath	assertEquals("STR",someObject.otherObject.stringField);	assertNotEquals(expectedObject,actualObject);	37.43	0	1
31	0	hazelcast/hazelcast-simulator	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(version==null);	47.74	0	1
	1	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue("STR");	47.74	0	1
	2	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse("STR");	47.74	0	1
	3	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse("STR");	47.74	0	1
	4	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNull(getVersion());	47.74	0	1
	5	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotNull(getVersion());	47.74	0	1
	6	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotSame(false,"STR");	47.74	0	1
	7	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotSame(true,"STR");	47.74	0	1
	8	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertArrayEquals(newObject[]{getVersion()},getVersion());	47.74	0	1
	9	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotEquals(false,"STR");	47.74	0	1
32	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNotNull(options);	83.96	1	1
	1	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertTrue(options.hasOptions());	83.96	0	1
	2	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertFalse(options.hasArguments());	83.96	0	1
	3	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertEquals(1,options.specs().size());	83.96	0	1
	4	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertEquals(0,options.nonOptionArguments().size());	83.96	0	1
	5	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertThrows(ExitException.class,()->someMethodThatCallsSystemExit());	83.96	0	1
	6	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNull(initOptionsWithHelp(null,null));	83.96	0	1
	7	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertArrayEquals("STR",args);	83.96	0	1
	8	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertSame(parser,options.options().get(0).parent());	83.96	0	1
	9	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNotEquals(0,options.asMap().size());	83.96	0	1
33	0	jcodec/jcodec	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNotNull(<FOCAL>(0));	62.22	0	1
	1	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(<FOCAL>(-1));	62.22	0	1
	2	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNotNull(<FOCAL>(3));	62.22	0	1
	3	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(<FOCAL>(-10));	62.22	0	1
	4	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNotNull(<FOCAL>(2));	62.22	0	1
	5	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertEquals(NALUnitType.IDR,<FOCAL>(5));	62.22	0	1
	6	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertEquals(NALUnitType.SPS,<FOCAL>(7));	62.22	0	1
	7	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertEquals(NALUnitType.PREFIX,<FOCAL>(1));	62.22	0	1
	8	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNotEquals(15,<FOCAL>(15));	62.22	0	1
	9	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	assertEquals("STR",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNotEquals(NALUnitType.PREFIX,<FOCAL>(20));	62.22	0	1
34	0	jcodec/jcodec	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)0));	81.95	0	1
	1	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)-128));	81.95	0	1
	2	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)128));	81.95	0	1
	3	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertNull(FOCAL.leadingZeroCountInByte(null));	81.95	0	1
	4	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertNotNull(FOCAL.leadingZeroCountInByte((byte)1));	81.95	0	1
	5	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(1,FOCAL.leadingZeroCountInByte((byte)128));	81.95	0	1
	6	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(1,FOCAL.leadingZeroCountInByte((byte)64));	81.95	0	1
	7	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(2,FOCAL.leadingZeroCountInByte((byte)64));	81.95	0	1
	8	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(6,FOCAL.leadingZeroCountInByte((byte)2));	81.95	0	1
	9	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(6,FOCAL.leadingZeroCountInByte((byte)2));	81.95	0	1
35	0	myabc/markdownj	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNull(m.markdown(null));	26.25	0	1
	1	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertThrows(NullPointerException.class,()->m.markdown(null));	26.25	0	1
	2	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(text);	26.25	0	1
	3	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(input));	26.25	0	1
	4	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",text.substring(start,end));	26.25	0	1
	5	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",text.getWhitespaceCharacters());	26.25	0	1
	6	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",txt);	26.25	0	1
	7	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(boolean);	26.25	0	1
	8	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertFalse(boolean);	26.25	0	1
	9	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",actual);	26.25	0	1
36	0	arnohaase/a-foundation	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertNotNull(result);	54.92	0	1
	1	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertArrayEquals(newbyte[]{91,34,97,34,44,110,117,108,108,93},baos.toByteArray());	54.92	0	1
	2	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertEquals("STR",result);	54.92	1	1
	3	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertEquals(1,1);	54.92	0	1
	4	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertTrue(true);	54.92	0	1
	5	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertFalse(false);	54.92	0	1
	6	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertSame(out,state.peek());	54.92	0	1
	7	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertNotEquals("STR","STR");	54.92	0	1
	8	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertEquals(0.0,0.0);	54.92	0	1
	9	/	AJsonSerHelperTest	testNullStringInArray	assertEquals("STR",result);	assertTrue(Double.isNaN(Double.NaN));	54.92	0	1
37	0	arnohaase/a-foundation	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertTrue(true);	29.38	0	1
	1	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertFalse(false);	29.38	0	1
	2	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertEquals(expected,actual);	29.38	0	1
	3	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertArrayEquals(expectedArray,resultArray);	29.38	0	1
	4	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNull(null);	29.38	0	1
	5	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNotNull(object);	29.38	0	1
	6	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNotSame(notExpected,actual);	29.38	0	1
	7	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertArrayEquals(expectedArray,actualArray);	29.38	0	1
	8	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertSame(expected,actual);	29.38	0	1
	9	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertEquals(expected,actual);	29.38	0	1
38	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertEquals(authPattern,getAuthPattern());	31.06	0	1
	1	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertNotNull(authPattern);	31.06	0	1
	2	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertTrue(authPatterninstanceofAuthPattern);	31.06	0	1
	3	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertFalse(authPattern==null);	31.06	0	1
	4	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertEquals("STR",getAuthPattern().getName());	31.06	0	1
	5	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertTrue("STR");	31.06	0	1
	6	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertFalse(getAuthPattern().getName().isEmpty());	31.06	0	1
	7	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertEquals("STR","STR");	31.06	0	1
	8	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertNotNull("STR");	31.06	0	1
	9	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertTrue(authPattern.getLength()>=0);	31.06	0	1
39	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertEquals(1,opts.opts.keySet().size());	62.02	0	1
	1	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertEquals(2,args.length);	62.02	0	1
	2	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.args.size());	62.02	0	1
	3	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertFalse(opts.opts.isEmpty());	62.02	0	1
	4	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,options.args.size());	62.02	0	1
	5	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts);	62.02	0	1
	6	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(options);	62.02	0	1
	7	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.args.size());	62.02	0	1
	8	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertThrows(IllegalArgumentException.class,"STR");	62.02	0	1
	9	/	GraphvizServerTest	cmdLineValueSeparated	assertEquals(map("STR","STR"),opts.opts);	assertThrows(NullPointerException.class,()->{GraphvizServer.CmdOptions.parse(null)});	62.02	0	1
40	0	nidi3/graphviz-java	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertNull("STR");	54.27	0	1
	1	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertFalse("STR");	54.27	0	1
	2	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertTrue("STR");	54.27	0	1
	3	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertEquals("STR","STR");	54.27	0	1
	4	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertNotEquals("STR","STR");	54.27	0	1
	5	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertNotNull("STR");	54.27	0	1
	6	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertThrows(NullPointerException.class,"STR");	54.27	0	1
	7	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertTrue("STR");	54.27	0	1
	8	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertFalse("STR");	54.27	0	1
	9	/	AttributeValidatorTest	wrongScope	assertMessage(ERROR,"STR","STR",validate(attr("STR",5),NODE));	assertNotEquals("STR","STR");	54.27	0	1
41	0	nidi3/graphviz-java	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertNotNull(Graph.with());	44.03	0	1
	1	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertNotEquals(Graph.with(),null);	44.03	0	1
	2	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertTrue(Graph.with()instanceofGraph);	44.03	0	1
	3	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertTrue(Graph.with().isEmpty());	44.03	0	1
	4	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertEquals(0,Graph.with().size());	44.03	0	1
	5	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertEquals("STR",Graph.with().getClass().getSimpleName());	44.03	0	1
	6	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertEquals(0,Graph.with().getNodes().size());	44.03	0	1
	7	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertTrue(Graph.with().getLinks().isEmpty());	44.03	0	1
	8	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertNotNull(Graph.with().getNodes());	44.03	0	1
	9	/	SerializerTest	privateAttribute	assertSerialize(graph().graphAttr().with("STR","STR").with(node("STR").with("STR","STR")),"STR");	assertNotNull(Graph.with().getLinks());	44.03	0	1
42	0	fabric8io/fabric8-maven-plugin	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertNotNull(fakePlugin);	62.79	0	1
	1	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertTrue(fakePlugininstanceofPlugin);	62.79	0	1
	2	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertNotNull(config);	62.79	0	1
	3	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertTrue(configinstanceofMap);	62.79	0	1
	4	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertEquals(2,config.size());	62.79	0	1
	5	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertFalse(config.isEmpty());	62.79	0	1
	6	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertNotEquals(3,config.size());	62.79	0	1
	7	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertArrayEquals("STR",config.keySet().toArray());	62.79	0	1
	8	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertEquals("STR",config.keySet().iterator().next());	62.79	0	1
	9	/	MavenConfigurationExtractorTest	should_parse_simple_types	assertThat(config).containsEntry("STR","STR").containsEntry("STR","STR");	assertEquals("STR",config.keySet().toArray()[1]);	62.79	0	1
43	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	52.6	1	1
	1	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	52.6	0	1
	2	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	52.6	0	1
	3	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(result.get(0),null);	52.6	0	1
	4	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(lookup);	52.6	0	1
	5	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(ret);	52.6	0	1
	6	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,ret.size());	52.6	0	1
	7	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(result.get(1),null);	52.6	0	1
	8	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!(result.get(0)instanceofString));	52.6	0	1
	9	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!(result.get(1)instanceofInteger));	52.6	0	1
44	0	PeterisP/morphology	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotNull(sentences);	71.2	0	1
	1	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	71.2	0	1
	2	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	71.2	1	1
	3	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	71.2	0	1
	4	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().size()>0);	71.2	0	1
	5	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.getFirst().size());	71.2	0	1
	6	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals("STR",sentences.getFirst().get(0).getForm());	71.2	0	1
	7	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().get(0).getLexeme().isPartOfSpeech(PartOfSpeech.VERB));	71.2	0	1
	8	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.getFirst().get(0).getLexeme().getPrimaryPos().getId());	71.2	0	1
	9	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals("STR",sentences.getFirst().get(0).getLexeme().getMorphCode());	71.2	0	1
45	0	PeterisP/morphology	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotNull(tokens);	56.69	0	1
	1	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotEquals(null,tokens.get(0));	56.69	0	1
	2	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertFalse(tokens.isEmpty());	56.69	0	1
	3	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertTrue(tokens.size()>0);	56.69	0	1
	4	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertEquals("STR",tokens.get(0).getWord());	56.69	0	1
	5	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertTrue(tokens.get(0)instanceofWord);	56.69	0	1
	6	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertArrayEquals("STR",tokens.toArray());	56.69	0	1
	7	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertEquals("STR",tokens.getFirst());	56.69	0	1
	8	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertArrayEquals("STR",tokens.toArray(newWord[tokens.size()]));	56.69	0	1
	9	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertSame(tokens.get(0),tokens.getFirst());	56.69	0	1
46	0	NanoHttpd/nanohttpd	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertThrows(NullPointerException.class,()->getMimeTypeForFile(null));	49.61	0	1
	1	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR","STR");	49.61	0	1
	2	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotEquals(null,"STR");	49.61	0	1
	3	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertTrue("STR");	49.61	0	1
	4	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertFalse("STR");	49.61	0	1
	5	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR","STR");	49.61	0	1
	6	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotNull("STR");	49.61	0	1
	7	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotSame("STR","STR");	49.61	0	1
	8	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotEquals("STR","STR");	49.61	0	1
	9	/	MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertSame("STR","STR");	49.61	0	1
47	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	43.72	0	1
	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	43.72	0	1
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals("STR",routePrioritizer.getPrioritizedRoutes());	43.72	0	1
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(Collections.emptySet(),routePrioritizer.getPrioritizedRoutes());	43.72	0	1
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	43.72	0	1
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(Collections.EMPTY_LIST));	43.72	0	1
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	43.72	1	1
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.EMPTY_LIST,routePrioritizer.getPrioritizedRoutes());	43.72	0	1
	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),newArrayList<>(routePrioritizer.getPrioritizedRoutes()));	43.72	0	1
	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(newObject[]{},routePrioritizer.getPrioritizedRoutes().toArray());	43.72	0	1
48	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotNull(a);	93.78	0	1
	1	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotNull(b);	93.78	0	1
	2	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(ainstanceofPuzzle);	93.78	0	1
	3	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(binstanceofPuzzle);	93.78	0	1
	4	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a.toString(),b.toString());	93.78	0	1
	5	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertArrayEquals(newint[]{1,2,3,4,5,6,7,8,9},a.getCells());	93.78	0	1
	6	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals(9,a.getCells().length);	93.78	0	1
	7	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals(9,a.getCell(0));	93.78	0	1
	8	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals("STR",a.toString());	93.78	0	1
	9	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertFalse(a.isSolved());	93.78	0	1
1	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(database);	57.24	0	1
	1	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(database.getCurrentSession());	57.24	0	1
	2	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertFalse(database.isClosed());	57.24	0	1
	3	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertFalse(database.exists());	57.24	0	1
	4	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNull(database.getClusterNameById(database.getDefaultClusterId()));	57.24	0	1
	5	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByKey);	57.24	0	1
	6	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByIntegerKey);	57.24	0	1
	7	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByValue);	57.24	0	1
	8	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertTrue(database.getClusters().size()>0);	57.24	0	1
	9	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertEquals(database.getStorage().getSize(),0);	57.24	0	1
2	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNotNull(result);	41.36	0	1
	1	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertEquals(0,result.size());	41.36	0	1
	2	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertTrue(!result.isEmpty());	41.36	0	1
	3	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertFalse(result.isEmpty());	41.36	0	1
	4	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNull(result);	41.36	1	1
	5	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertSame(null,result);	41.36	0	1
	6	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNotSame("STR",null,result);	41.36	0	1
	7	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertSame("STR",result);	41.36	0	1
	8	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNotSame("STR","STR",result);	41.36	0	1
	9	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNotEquals("STR",result);	41.36	0	1
3	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotNull(configurator);	39.77	0	1
	1	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertFalse(configurator.isRegistered());	39.77	0	1
	2	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getLoader()instanceofOETLStubLoader);	39.77	0	1
	3	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getExtractor()instanceofOETLStubRandomExtractor);	39.77	0	1
	4	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertEquals("STR",configurator.getLoader().getName());	39.77	0	1
	5	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertEquals(0,configurator.getExtractors().size());	39.77	0	1
	6	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotNull(configurator.getPipeline());	39.77	0	1
	7	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getPipeline().isEmpty());	39.77	0	1
	8	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotEquals(null,configurator.getName());	39.77	0	1
	9	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertEquals(1,"STR");	39.77	0	1
4	0	orientechnologies/orientdb	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertEquals(3,trackedMap.size());	66.44	0	1
	1	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(trackedMap.isDirty());	66.44	0	1
	2	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertTrue("STR");	66.44	0	1
	3	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertSame(doc,trackedMap.getDocument());	66.44	0	1
	4	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertTrue("STR");	66.44	0	1
	5	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(trackedMap.isEmpty());	66.44	0	1
	6	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertEquals("STR","STR");	66.44	0	1
	7	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertNull(trackedMap.pollLastEntry());	66.44	0	1
	8	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertTrue("STR");	66.44	0	1
	9	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertNotSame(trackedMap.entrySet(),trackedMap.entrySet().iterator().next());	66.44	0	1
5	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertTrue(compositeKey.getKeys().get(0)instanceofInteger);	93.15	0	1
	1	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertEquals(2,compositeKey.getKeys().get(0));	93.15	0	1
	2	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertTrue(compositeKey.getKeys().get(1)instanceofString);	93.15	0	1
	3	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertEquals("STR",compositeKey.getKeys().get(1).toString());	93.15	0	1
	4	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertNotNull(compositeKey.getKeys());	93.15	0	1
	5	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertEquals(2,compositeKey.getKeys().size());	93.15	0	1
	6	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertFalse(compositeKey.getKeys().isEmpty());	93.15	0	1
	7	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertNotEquals(null,compositeKey.getKeys());	93.15	0	1
	8	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertSame(compositeKey.getKeys().get(0),2);	93.15	0	1
	9	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertSame(compositeKey.getKeys().get(1),"STR");	93.15	0	1
6	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	58.05	0	1
	1	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	58.05	1	1
	2	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(!qResult.hasNext());	58.05	0	1
	3	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getStats().getTotalRecords());	58.05	0	1
	4	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.getResult().size());	58.05	0	1
	5	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNull(qResult.getErrorMessage());	58.05	0	1
	6	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull("STR");	58.05	0	1
	7	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(null,qResult.getStats().getExecutionTimeMillis());	58.05	0	1
	8	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.getStats().getRecordElapsedTime());	58.05	0	1
	9	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(2,qResult.getStats().getRecordFetches());	58.05	0	1
7	0	orientechnologies/orientdb	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertThat(execute,Matchers.hasSize(1));	37.48	0	1
	1	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertTrue(context.exists(name.getMethodName()));	37.48	0	1
	2	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotNull(test1);	37.48	0	1
	3	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertTrue(dbinstanceofODatabaseDocument);	37.48	0	1
	4	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertEquals(ODatabaseType.PLOCAL,type);	37.48	0	1
	5	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertFalse(db.isClosed());	37.48	0	1
	6	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotNull(db);	37.48	0	1
	7	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotEquals(0,execute.size());	37.48	0	1
	8	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertEquals("STR",test1.getClassName());	37.48	0	1
	9	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotEquals(0,db.getClass().getDeclaredFields().length);	37.48	0	1
8	0	orientechnologies/orientdb	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction().isActive()==false);	53.74	0	1
	1	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.getTransaction().isActive());	53.74	0	1
	2	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotEquals(true,db.getTransaction().isActive());	53.74	0	1
	3	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.isOpen());	53.74	0	1
	4	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.isClosed());	53.74	0	1
	5	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNull(db.getTransaction());	53.74	0	1
	6	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotNull(db);	53.74	0	1
	7	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertSame(db,db.getTransaction().getDatabase());	53.74	0	1
	8	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotSame(db,db.getTransaction().getDatabase());	53.74	0	1
	9	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertThrows(Exception.class,"STR");	53.74	0	1
9	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertTrue(results.size()>0);	38.53	0	1
	1	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertFalse(results.isEmpty());	38.53	0	1
	2	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertEquals(3,results.size());	38.53	0	1
	3	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotEquals(0,results.size());	38.53	0	1
	4	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNull(null);	38.53	0	1
	5	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotNull(results);	38.53	0	1
	6	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertSame(results,results);	38.53	0	1
	7	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotSame(results,null);	38.53	0	1
	8	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertArrayEquals(1,2});	38.53	0	1
	9	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertEquals(1,"STR");	38.53	0	1
10	0	orientechnologies/orientdb	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(0,db.getMetadata().getSchema().countClasses());	81.36	0	1
	1	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertArrayEquals("STR",db.getMetadata().getSchema().getClassNames().toArray());	81.36	0	1
	2	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(ODefaultType.INTEGER,"STR");	81.36	0	1
	3	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(ODefaultType.STRING,"STR");	81.36	0	1
	4	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(true,"STR");	81.36	0	1
	5	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(false,"STR");	81.36	0	1
	6	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull("STR");	81.36	0	1
	7	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNull("STR");	81.36	0	1
	8	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertSame("STR","STR");	81.36	0	1
	9	/	ODatabaseImportTest	exportImportOnlySchemaTest	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotSame("STR","STR");	81.36	0	1
11	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	38.69	0	1
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	38.69	1	1
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	38.69	0	1
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(null,result);	38.69	0	1
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofNumber);	38.69	0	1
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(resultinstanceofString);	38.69	0	1
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D).intValue(),result.intValue());	38.69	0	1
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(-10.5D,result);	38.69	0	1
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(-10.5D),result);	38.69	0	1
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	38.69	0	1
12	0	orientechnologies/orientdb	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertNotNull(stm);	79.45	0	1
	1	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertTrue(stminstanceofOSelectStatement);	79.45	0	1
	2	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertNull(stm.getOrderBy());	79.45	0	1
	3	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertEquals(OCommandDistributedReplicateRequest.DISTRIBUTED_EXECUTION_MODE.RESPONSE.toString(),stm.getDistributedExecutionMode().toString());	79.45	0	1
	4	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertTrue(stm.isReadOperation());	79.45	0	1
	5	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertFalse(stm.isWriteOperation());	79.45	0	1
	6	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertFalse(stm.isIdempotent());	79.45	0	1
	7	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertNotNull(stm.getProjection());	79.45	0	1
	8	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertEquals(1,stm.getProjection().getItems().size());	79.45	0	1
	9	/	OSelectStatementTest	testTranslateLucene	assertTrue(stm.whereClause.toString().contains("STR"));	assertTrue(stm.isCacheable());	79.45	0	1
13	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNotNull(result);	26.48	0	1
	1	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	26.48	1	1
	2	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	26.48	0	1
	3	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertEquals("STR",result.getPropertyNames()[0]);	26.48	0	1
	4	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertTrue("STR");	26.48	0	1
	5	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertFalse("STR");	26.48	0	1
	6	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertEquals(1,"STR");	26.48	0	1
	7	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNotEquals(2,"STR");	26.48	0	1
	8	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNotNull(db);	26.48	0	1
	9	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNull(db);	26.48	0	1
14	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotNull(result);	36.88	0	1
	1	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertTrue(hasNext());	36.88	0	1
	2	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertFalse(!hasNext());	36.88	0	1
	3	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotSame(db,newODatabaseDocumentTx());	36.88	0	1
	4	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertEquals(0,0);	36.88	0	1
	5	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotEquals(1,0);	36.88	0	1
	6	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertSame(db,db);	36.88	0	1
	7	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotSame(className,null);	36.88	0	1
	8	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertThat(className,"STR");	36.88	0	1
	9	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertThat("STR","STR");	36.88	0	1
15	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getName(),PROP_NAME);	42.49	1	1
	1	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(null,nameProperty.getName());	42.49	0	1
	2	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertSame(String.class,nameProperty.getName().getClass());	42.49	0	1
	3	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(nameProperty.getName());	42.49	0	1
	4	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(5,nameProperty.getName().length());	42.49	0	1
	5	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.getName().length()>=3);	42.49	0	1
	6	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.getName()==null);	42.49	0	1
	7	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.getName().isEmpty());	42.49	0	1
	8	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse("STR");	42.49	0	1
	9	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(!nameProperty.getName().isEmpty());	42.49	0	1
16	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(db);	57.34	0	1
	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	57.34	0	1
	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	57.34	0	1
	3	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.exists());	57.34	0	1
	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(db.isClosed());	57.34	0	1
	5	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.existsProperty(PROP_ID));	57.34	0	1
	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass.getProperty(PROP_ID));	57.34	0	1
	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax());	57.34	0	1
	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,idProperty.getMin());	57.34	0	1
	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	57.34	0	1
17	0	orientechnologies/orientdb	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	31.24	0	1
	1	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	31.24	0	1
	2	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertNotEquals(expectedValue,actualValue);	31.24	0	1
	3	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertNotEquals(expectedValue,actualValue);	31.24	0	1
	4	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertArrayEquals(expectedArray,actualArray);	31.24	0	1
	5	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertArrayEquals(expectedArray,actualArray);	31.24	0	1
	6	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertThrows(expectedException.class,executable);	31.24	0	1
	7	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertThrows(expectedException.class,executable,message);	31.24	0	1
	8	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertTimeout(timeout,executable);	31.24	0	1
	9	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertTimeoutPreemptively(timeout,executable);	31.24	0	1
18	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,compare(field1,field2));	66.6	0	1
	1	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(-1,compare(field1,field2));	66.6	0	1
	2	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(1,compare(field1,field2));	66.6	0	1
	3	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(-1,compare(field1,field2));	66.6	0	1
	4	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(1,compare(field1,field2));	66.6	0	1
	5	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)<0);	66.6	0	1
	6	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)>0);	66.6	0	1
	7	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(compare(field1,field2)==0);	66.6	0	1
	8	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)==0);	66.6	0	1
	9	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(0,compare(field1,field2));	66.6	0	1
19	0	PeterisP/morphology	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(locītājs.isRecognized());	92.03	0	1
	1	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	92.03	0	1
	2	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(locītājs);	92.03	0	1
	3	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(0,locītājs.getCacheSize());	92.03	0	1
	4	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(null,locītājs.defaultSettings());	92.03	0	1
	5	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(locītājs.isRecognized());	92.03	0	1
	6	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(0,locītājs.wordforms.size());	92.03	0	1
	7	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull("STR");	92.03	0	1
	8	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue("STR");	92.03	0	1
	9	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(locītājs.isRecognized(),false);	92.03	0	1
20	0	PeterisP/morphology	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertTrue(locītājs.isRecognized());	32.73	0	1
	1	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertFalse(!locītājs.isRecognized());	32.73	0	1
	2	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotNull(object);	32.73	0	1
	3	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotSame(expectedObject,actualObject);	32.73	0	1
	4	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertSame(expectedObject,actualObject);	32.73	0	1
	5	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNull(object);	32.73	0	1
	6	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertEquals(expectedValue,actualValue);	32.73	0	1
	7	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotEquals(expectedValue,actualValue);	32.73	0	1
	8	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertArrayEquals(expectedArray,resultArray);	32.73	0	1
	9	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertThat(value,Matchers.equalTo(expectedValue));	32.73	0	1
21	0	PeterisP/morphology	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertNotNull(tokens);	53.89	0	1
	1	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals(0,tokens.size());	53.89	0	1
	2	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertFalse(tokens.contains(null));	53.89	0	1
	3	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals(3,tokens.size());	53.89	0	1
	4	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals("STR",tokens.get(0).getForm());	53.89	0	1
	5	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals("STR",tokens.get(2).getForm());	53.89	0	1
	6	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertNotSame(tokens.get(0),tokens.get(2));	53.89	0	1
	7	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertTrue("STR");	53.89	0	1
	8	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertFalse(tokens.get(1).getForm().isEmpty());	53.89	0	1
	9	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertTrue(tokens.get(2).getStartsWithUpperCase());	53.89	0	1
22	0	hazelcast/hazelcast-simulator	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertNotNull(methods);	34.33	0	1
	1	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertNotNull(method);	34.33	0	1
	2	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertTrue(methods.iterator().hasNext());	34.33	0	1
	3	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertFalse(methods.isEmpty());	34.33	0	1
	4	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertEquals(1,methods.size());	34.33	0	1
	5	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertEquals(AnnotationTestClass.class,clazz);	34.33	0	1
	6	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertEquals(Prepare.class,annotationClazz);	34.33	0	1
	7	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertTrue(methods.contains(method));	34.33	0	1
	8	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertSame(methods.get(0),methods.get(0));	34.33	0	1
	9	/	AnnotationFilterTest	testLocalWarmupFilter	assertEquals("STR",method.getName());	assertArrayEquals(methods.toArray(),findAll().toArray());	34.33	0	1
23	0	hazelcast/hazelcast-simulator	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(3,result.size());	37.8	0	1
	1	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	37.8	0	1
	2	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.contains(list.get(1)));	37.8	0	1
	3	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.contains(list.get(0)));	37.8	0	1
	4	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(WorkerData.class,result.get(0).getClass());	37.8	0	1
	5	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(list.get(1),result.get(2));	37.8	0	1
	6	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertArrayEquals(newWorkerData[]{list.get(1),list.get(3)});	37.8	0	1
	7	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertSame(list,input);	37.8	0	1
	8	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	37.8	0	1
	9	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(4,list.size());	37.8	0	1
24	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertTrue(isRunning());	29.28	0	1
	1	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertFalse(!isRunning());	29.28	0	1
	2	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertEquals(true,isRunning());	29.28	0	1
	3	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNull(userDir);	29.28	0	1
	4	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNotNull(userDir);	29.28	0	1
	5	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertThrows(NullPointerException.class,()->isRunning());	29.28	0	1
	6	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNotEquals(123,testContainer);	29.28	0	1
	7	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertSame(null,userDir);	29.28	0	1
	8	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertFalse(isRunning()==false);	29.28	0	1
	9	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertTrue(isRunning()!=true);	29.28	0	1
25	0	hazelcast/hazelcast-simulator	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(driver);	61.03	0	1
	1	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertEquals(0,scriptExecutor.getExecutions().size());	61.03	0	1
	2	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(task);	61.03	0	1
	3	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertEquals("STR",command);	61.03	0	1
	4	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",command);	61.03	0	1
	5	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertTrue("STR");	61.03	0	1
	6	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertThrows(NoSuchElementException.class,"STR");	61.03	0	1
	7	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertTrue(Thread.currentThread().isAlive());	61.03	0	1
	8	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(0,"STR");	61.03	0	1
	9	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertEquals(0,promise.getResults().size());	61.03	0	1
26	0	hazelcast/hazelcast-simulator	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertNotNull(agents);	86.21	0	1
	1	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertFalse(agents.isEmpty());	86.21	0	1
	2	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,agents.size());	86.21	0	1
	3	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,agentCount());	86.21	0	1
	4	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertTrue(agentCount()>0);	86.21	0	1
	5	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,registry.getAgents().size());	86.21	0	1
	6	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertTrue(registry.getAgents().get(0).isActive());	86.21	0	1
	7	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertFalse(registry.getAgents().get(1).isActive());	86.21	0	1
	8	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertNotEquals(3,agentCount());	86.21	0	1
	9	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertNotEquals("STR",registry.getAgents().get(1).getIpAddress());	86.21	0	1
27	0	hazelcast/hazelcast-simulator	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertNull(getWorkerAddress());	40.64	0	1
	1	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertNotNull(getWorkerAddress().toString());	40.64	0	1
	2	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress()instanceofSimulatorAddress);	40.64	0	1
	3	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertEquals(SimulatorAddress.fromString(workerAddress),getWorkerAddress());	40.64	0	1
	4	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertNotEquals("STR",getWorkerAddress());	40.64	0	1
	5	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertSame(SimulatorAddress.fromString(workerAddress),getWorkerAddress());	40.64	0	1
	6	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertThat(getWorkerAddress().toString(),is(equalTo(SimulatorAddress.fromString(workerAddress).toString())));	40.64	0	1
	7	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress().toString()!=null&&!getWorkerAddress().toString().isEmpty());	40.64	0	1
	8	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress()!=null);	40.64	0	1
	9	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress().getClass().getName().equals(SimulatorAddress.class.getName()));	40.64	0	1
28	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(bolt);	29.06	0	1
	1	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(TestUtil.getMockedTopologyContext());	29.06	0	1
	2	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(output);	29.06	0	1
	3	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(metadata);	29.06	0	1
	4	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertTrue(parserConfig.containsValue(true));	29.06	0	1
	5	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertFalse(parserConfig.containsValue(false));	29.06	0	1
	6	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertFalse(parserConfig.isEmpty());	29.06	0	1
	7	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotEquals(null,parserConfig);	29.06	0	1
	8	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertEquals(0,output.size());	29.06	0	1
	9	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertTrue(metadata.md.isEmpty());	29.06	0	1
29	0	DigitalPebble/storm-crawler	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(bolt);	56.9	0	1
	1	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertEquals(config.size(),1);	56.9	0	1
	2	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(metadata);	56.9	0	1
	3	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertEquals(bolt.getClass(),DummyIndexer.class);	56.9	0	1
	4	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertEquals(md.get(key)[0],value);	56.9	0	1
	5	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertFalse(md.isEmpty());	56.9	0	1
	6	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertEquals(fields.size(),2);	56.9	0	1
	7	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals(config.get(AbstractIndexerBolt.urlFieldParamName),"STR");	56.9	0	1
	8	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(md,md2);	56.9	0	1
	9	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	assertEquals("STR","STR",fields.get("STR"));	assertArrayEquals(md.get(key),md2.get(key));	56.9	0	1
30	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(urlFilter);	44.87	0	1
	1	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(testSourceUrl);	44.87	0	1
	2	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	44.87	0	1
	3	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(nonURI,normalizedUrl);	44.87	0	1
	4	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(sourceUrl.getHost(),testSourceUrl.getHost());	44.87	0	1
	5	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(sourceUrl.getPort(),testSourceUrl.getPort());	44.87	0	1
	6	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(sourceUrl.getProtocol(),testSourceUrl.getProtocol());	44.87	0	1
	7	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(sourceUrl.getPath(),testSourceUrl.getPath());	44.87	0	1
	8	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult.toUpperCase(),normalizedUrl.toUpperCase());	44.87	0	1
	9	/	BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult.toLowerCase(),normalizedUrl.toLowerCase());	44.87	0	1
31	0	rockagen/commons-lib	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('a',0));	45.91	0	1
	1	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('a',5));	45.91	0	1
	2	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('',1));	45.91	0	1
	3	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('!',4));	45.91	0	1
	4	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('1',3));	45.91	0	1
	5	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals("STR",FOCAL.repeatChar('x',3));	45.91	0	1
	6	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotSame("STR",FOCAL.repeatChar('a',3));	45.91	0	1
	7	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals("STR",FOCAL.repeatChar('t',2));	45.91	0	1
	8	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals("STR",FOCAL.repeatChar('#',4));	45.91	0	1
	9	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotSame("STR",FOCAL.repeatChar('i',4));	45.91	0	1
32	0	adlnet/jxapi	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	31.08	1	1
	1	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.getVerbName());	31.08	0	1
	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsPastTense());	31.08	0	1
	3	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.getSynonyms().isEmpty());	31.08	0	1
	4	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals(0,actual.getSynonyms().size());	31.08	0	1
	5	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNull(actual.getObject());	31.08	0	1
	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsTransitive());	31.08	0	1
	7	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	31.08	0	1
	8	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.getPresentTense());	31.08	0	1
	9	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsReflexive());	31.08	0	1
33	0	adlnet/jxapi	StatementTest	testStatement	assertNotNull(actual);	assertNotNull(statement);	32.15	0	1
	1	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals("STR",statement.getContext().getLanguage());	32.15	0	1
	2	/	StatementTest	testStatement	assertNotNull(actual);	assertTrue(statement.getResult().getSuccess());	32.15	0	1
	3	/	StatementTest	testStatement	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	32.15	0	1
	4	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals("STR",statement.getAuthority().getMbox());	32.15	0	1
	5	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals("STR",statement.getVersion());	32.15	0	1
	6	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(ID,statement.getId());	32.15	0	1
	7	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(MBOX,statement.getAuthority().getMbox());	32.15	0	1
	8	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals("STR",statement.getVerb().getId());	32.15	0	1
	9	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(TEST_IRI,statement.getObject().getId().substring(0,TEST_IRI.length()));	32.15	0	1
34	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(find());	38.01	0	1
	1	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(!find());	38.01	0	1
	2	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,find());	38.01	0	1
	3	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals(false,find());	38.01	0	1
	4	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals("STR",find());	38.01	0	1
	5	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals("STR",find());	38.01	0	1
	6	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertSame(find(),find());	38.01	0	1
	7	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(find(),null);	38.01	0	1
	8	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(find());	38.01	0	1
	9	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNull(null);	38.01	0	1
35	0	trautonen/coveralls-maven-plugin	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotNull(pullRequest);	33.04	0	1
	1	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotNull(pullRequest);	33.04	0	1
	2	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotNull("STR");	33.04	0	1
	3	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNull(pullRequest);	33.04	0	1
	4	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNull(pullRequest);	33.04	0	1
	5	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertTrue(pullRequest!=null);	33.04	0	1
	6	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertFalse(pullRequest==null);	33.04	0	1
	7	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals("STR",pullRequest);	33.04	0	1
	8	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals("STR",pullRequest);	33.04	0	1
	9	/	ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotEquals("STR",pullRequest);	33.04	0	1
36	0	trautonen/coveralls-maven-plugin	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertNotNull(dir);	47.71	0	1
	1	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertNotNull(sourceLoader);	47.71	0	1
	2	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertNotNull(sourceA);	47.71	0	1
	3	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertTrue(fileA.exists());	47.71	0	1
	4	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertTrue(fileB.exists());	47.71	0	1
	5	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertEquals("STR",sourceA.getName());	47.71	1	1
	6	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertNotNull(getName());	47.71	0	1
	7	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertTrue(getName().length()>0);	47.71	0	1
	8	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertEquals(name,getName());	47.71	0	1
	9	/	ScanSourceLoaderTest	testLoadSource	assertEquals("STR",sourceA.getName());	assertTrue(name.length()>0);	47.71	0	1
37	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertNotNull(services);	31.26	0	1
	1	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertNotSame(null,services);	31.26	0	1
	2	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertTrue(services!=null);	31.26	0	1
	3	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertSame(services,this.services);	31.26	0	1
	4	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertEquals(this.services,services);	31.26	0	1
	5	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertTrue(services.containsAll(Collections.emptyList()));	31.26	0	1
	6	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertTrue(services.containsAll(services));	31.26	0	1
	7	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertTrue(services.containsAll(newArrayList<>()));	31.26	0	1
	8	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertTrue(Arrays.equals(services.toArray(),this.services.toArray()));	31.26	0	1
	9	/	SpecExamplesSerializationTest	testKioskPattern	assertSerializationEqualsSpec(service,"STR");	assertEquals(Collections.emptyList(),newArrayList<>(services));	31.26	0	1
38	0	dbmdz/iiif-apis	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertNotNull(propVal.getValues());	61.69	0	1
	1	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertNotEquals(null,propVal.getValues());	61.69	0	1
	2	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertTrue(propVal.getValues().containsKey(Locale.ENGLISH));	61.69	0	1
	3	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertFalse(propVal.getValues().isEmpty());	61.69	0	1
	4	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertEquals(Locale.ENGLISH,propVal.getValues().keySet().toArray()[0]);	61.69	0	1
	5	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertEquals("STR",propVal.getValues().get(Locale.ENGLISH).get(0));	61.69	0	1
	6	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertEquals(2,propVal.getValues().values().iterator().next().size());	61.69	0	1
	7	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertTrue("STR");	61.69	0	1
	8	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertEquals("STR",propVal.getValues().keySet().toArray()[0]);	61.69	0	1
	9	/	PropertyValueTest	multiValuedLanguage	assertThat(json).isEqualTo("STR".replace("STR","STR"));	assertFalse(propVal.getValues().get(Locale.FRANCE)==null);	61.69	0	1
39	0	nidi3/graphviz-java	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertNotNull(pars.nodes());	36.08	0	1
	1	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertTrue(parsinstanceofMutableGraph);	36.08	0	1
	2	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertEquals(0,pars.messages.size());	36.08	0	1
	3	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertTrue(add(src1,src2).hasEdgeConnecting(src1,src2));	36.08	0	1
	4	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertEquals(0,pars.inDegree(s1));	36.08	0	1
	5	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertEquals(null,add().edges());	36.08	0	1
	6	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertFalse(add(src1).edges().isEmpty());	36.08	0	1
	7	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertEquals(expected,add(s1).inDegree(s2));	36.08	0	1
	8	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertArrayEquals(newLinkSource[]{},sources);	36.08	0	1
	9	/	ParserTest	emptyString	assertParse("STR",mutGraph().add(mutNode("STR"),mutNode("STR").add("STR",Label.of("STR"))));	assertSame(pars,pars);	36.08	0	1
40	0	nidi3/graphviz-java	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertNotNull(result);	46.16	0	1
	1	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertFalse(Graphviz.fromGraph(graph).render(SVG).toString().isEmpty());	46.16	0	1
	2	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertNotEquals("STR",Graphviz.fromGraph(graph).render(SVG).toString());	46.16	0	1
	3	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertNotEquals(0,Graphviz.fromGraph(graph).render(SVG).toString().length());	46.16	0	1
	4	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertTrue(Graphviz.fromGraph(graph).render(SVGZ).toString().length()>0);	46.16	0	1
	5	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertEquals(32000,Graphviz.fromGraph(graph).totalMemory());	46.16	0	1
	6	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertTrue("STR");	46.16	0	1
	7	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertTrue("STR");	46.16	0	1
	8	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertFalse("STR");	46.16	0	1
	9	/	GraphvizTest	withTotalMemory	assertThat(result,is("STR"+"STR"+uriPathOf(newFile("STR"))+"STR"));	assertEquals("STR",Graphviz.fromGraph(graph).render(PNG).toString());	46.16	0	1
41	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts);	41.37	0	1
	1	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts!=null);	41.37	0	1
	2	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals(opts,null);	41.37	0	1
	3	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.isEmpty());	41.37	0	1
	4	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.args.isEmpty());	41.37	0	1
	5	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotSame(opts,GraphvizServer.CmdOptions.parse(newString[]{}));	41.37	0	1
	6	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals(opts.args,opts.opts);	41.37	0	1
	7	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertThrows(IllegalArgumentException.class,"STR");	41.37	0	1
	8	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertEquals(1,opts.opts.size());	41.37	0	1
	9	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertThrows(IndexOutOfBoundsException.class,"STR");	41.37	0	1
42	0	nidi3/graphviz-java	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertThrows(IllegalArgumentException.class,"STR");	34.9	0	1
	1	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertThrows(IllegalArgumentException.class,"STR");	34.9	0	1
	2	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertEquals("STR","STR");	34.9	0	1
	3	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertEquals("STR","STR");	34.9	0	1
	4	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertNotEquals("STR","STR");	34.9	0	1
	5	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertNotEquals("STR","STR");	34.9	0	1
	6	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertNotEquals(null,"STR");	34.9	0	1
	7	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertTrue("STR");	34.9	0	1
	8	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertFalse("STR");	34.9	0	1
	9	/	ColorTest	rgbOk	assertColor(attr("STR","STR"),Color.rgb("STR"));	assertTrue("STR");	34.9	0	1
43	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertNotNull(deflateExtension);	41.86	0	1
	1	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertFalse(deflateExtension.isClientExtension());	41.86	0	1
	2	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertTrue(deflateExtension.isServerExtension());	41.86	0	1
	3	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertEquals(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getName());	41.86	0	1
	4	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertNotNull(deflateExtension.getParameters());	41.86	0	1
	5	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertEquals(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getExtensionDraft().getExtensionName());	41.86	0	1
	6	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertFalse(deflateExtension.getExtensionDraft().isPerMessageCompressExtension());	41.86	0	1
	7	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertTrue(deflateExtension.getExtensionDraft().isPerMessageDeflateExtension());	41.86	0	1
	8	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertNotSame(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getExtensionDraft().getExtensionName());	41.86	0	1
	9	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	assertTrue(deflateExtension.acceptProvidedExtensionAsServer("STR"));	assertEquals(1,deflateExtension.getExtensionDraft().getExtensionDraftVersion());	41.86	0	1
44	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.markSupported());	55.63	0	1
	1	/	ProfileUtilTest	simple	assertNotNull(is);	assertFalse("STR");	55.63	0	1
	2	/	ProfileUtilTest	simple	assertNotNull(is);	assertTrue("STR");	55.63	0	1
	3	/	ProfileUtilTest	simple	assertNotNull(is);	assertFalse(includes.isEmpty());	55.63	0	1
	4	/	ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.available()>0);	55.63	0	1
	5	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	55.63	1	1
	6	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(0,includes.size());	55.63	0	1
	7	/	ProfileUtilTest	simple	assertNotNull(is);	assertEquals(2,includes.size());	55.63	0	1
	8	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(0,excludes.size());	55.63	0	1
	9	/	ProfileUtilTest	simple	assertNotNull(is);	assertEquals(2,excludes.size());	55.63	0	1
45	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(baos);	35.83	0	1
	1	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(ser);	35.83	0	1
	2	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(result);	35.83	0	1
	3	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(baos.size()>0);	35.83	0	1
	4	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue("STR");	35.83	0	1
	5	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse("STR");	35.83	0	1
	6	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	35.83	1	1
	7	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals("STR",result);	35.83	0	1
	8	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertArrayEquals(newbyte[]{91,116,114,117,101,93},baos.toByteArray());	35.83	0	1
	9	/	AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR","STR");	35.83	0	1
46	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertTrue(value<0);	31.74	0	1
	1	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertNotNull(result);	31.74	0	1
	2	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertEquals("STR",result);	31.74	1	1
	3	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertEquals(-1234567890L,value);	31.74	0	1
	4	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertNotEquals(0,numFracDigits);	31.74	0	1
	5	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertArrayEquals("STR",fracPart.getBytes());	31.74	0	1
	6	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertFalse(value>=0);	31.74	0	1
	7	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertNotEquals(0,intPart);	31.74	0	1
	8	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertEquals("STR",result);	31.74	1	1
	9	/	AJsonSerHelperTest	testNegativeNumber1	assertEquals("STR",result);	assertNotSame("STR",-1234567890L,value);	31.74	0	1
47	0	NanoHttpd/nanohttpd	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer);	77.94	0	1
	1	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull("STR");	77.94	0	1
	2	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	77.94	0	1
	3	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()==1);	77.94	0	1
	4	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>1);	77.94	0	1
	5	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	77.94	0	1
	6	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(100,"STR");	77.94	0	1
	7	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,"STR");	77.94	0	1
	8	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,"STR");	77.94	0	1
	9	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue("STR");	77.94	0	1
48	0	amlinv/stat-collection-utils	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(factory);	49.51	0	1
	1	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockVirtualMachine);	49.51	0	1
	2	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockAttacher);	49.51	0	1
	3	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxServiceUrlFactory);	49.51	0	1
	4	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxConnectorFactoryDelegate);	49.51	0	1
	5	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxMbeanConnectorFactory);	49.51	0	1
	6	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxServiceUrl);	49.51	0	1
	7	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxConnector);	49.51	0	1
	8	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxMbeanConnection);	49.51	0	1
	9	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockAgentProperties);	49.51	0	1
49	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotNull(attributeInjector);	36.14	0	1
	1	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertTrue(attributeInjectorinstanceofAttributeInjector);	36.14	0	1
	2	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertEquals(attributeInjector,poller.getAttributeInjector());	36.14	0	1
	3	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertSame(attributeInjector,poller.getAttributeInjector());	36.14	0	1
	4	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertArrayEquals(poller.getPolledObjects().toArray(),polledObjects.toArray());	36.14	0	1
	5	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotEquals(poller.getPolledObjects().size(),0);	36.14	0	1
	6	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotSame(mockBatchPollProcessor,poller.getBatchPollProcessor());	36.14	0	1
	7	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	36.14	0	1
	8	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotNull(poller.getTestHooks());	36.14	0	1
	9	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNull(poller.getTestHooks().getThreadExecutorService());	36.14	0	1
50	0	fizzed/jne	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotNull(file);	72.17	0	1
	1	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.exists());	72.17	0	1
	2	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertEquals("STR",file.getName());	72.17	0	1
	3	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertFalse(file.isDirectory());	72.17	0	1
	4	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotEquals(null,file);	72.17	0	1
	5	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotEquals("STR",file.getAbsolutePath());	72.17	0	1
	6	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.canRead());	72.17	0	1
	7	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.isFile());	72.17	0	1
	8	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertEquals("STR",file.getName().trim());	72.17	0	1
	9	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotEquals(0,file.length());	72.17	0	1
0	0	NanoHttpd/nanohttpd	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.size()>0);	32.81	0	1
	1	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(responseBody,testServer.response.getBodyAsString());	32.81	0	1
	2	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[0],testServer.response.getStatusLine());	32.81	0	1
	3	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[1],"STR");	32.81	0	1
	4	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[3],"STR");	32.81	0	1
	5	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[4],"STR");	32.81	0	1
	6	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(responseBody,outputStream.toString());	32.81	0	1
	7	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(8,testServer.response.getLength());	32.81	0	1
	8	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(Status.OK,testServer.response.getStatus());	32.81	0	1
	9	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(HttpServerTest.URI,testServer.uri);	32.81	0	1
1	0	khennig/jpql-querybuilder	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals("STR",oc.render());	31.93	0	1
	1	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertNotEquals("STR",oc.render());	31.93	0	1
	2	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals(7,oc.render().length());	31.93	0	1
	3	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertTrue(!oc.render().isEmpty());	31.93	0	1
	4	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals("STR",oc.render().toLowerCase());	31.93	0	1
	5	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals("STR",oc.render().toUpperCase());	31.93	0	1
	6	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertNotNull(oc);	31.93	0	1
	7	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertNotNull(oc.render());	31.93	0	1
	8	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals("STR",oc.toString());	31.93	0	1
	9	/	OrderColumnTest	renderDesc	assertThat(oc.render()).isEqualTo("STR");	assertEquals("STR",oc.getColumn());	31.93	0	1
2	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotNull(results);	41.63	0	1
	1	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.size()>0);	41.63	0	1
	2	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	41.63	0	1
	3	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertEquals(results.size(),1);	41.63	1	1
	4	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	41.63	0	1
	5	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertSame(List.class,results.getClass());	41.63	0	1
	6	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.contains(results.get(0)));	41.63	0	1
	7	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertNotSame(results,results.get(0));	41.63	0	1
	8	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertTrue(results.get(0)instanceofODocument);	41.63	0	1
	9	/	OCommandExecutorSQLSelectTest	testEmbeddedMapOfMapsContainsValue	assertEquals(results.size(),1);	assertFalse(results.get(0)instanceofString);	41.63	0	1
3	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(results.size(),2);	64.3	1	1
	1	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue(!results.isEmpty());	64.3	0	1
	2	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertNotNull(results);	64.3	0	1
	3	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertNotEquals(0,results.size());	64.3	0	1
	4	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertSame(ODocument.class,results.get(0).getClass());	64.3	0	1
	5	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue("STR");	64.3	0	1
	6	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue("STR");	64.3	0	1
	7	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals("STR","STR");	64.3	0	1
	8	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals("STR","STR");	64.3	0	1
	9	/	OCommandExecutorSQLSelectTest	testInvertedIndexedCondition	assertEquals(results.size(),2);	assertFalse("STR");	64.3	0	1
4	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotNull(db);	32.25	0	0
	1	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotEquals(0,"STR");	32.25	0	0
	2	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertEquals(26,"STR");	32.25	0	0
	3	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertTrue("STR");	32.25	0	0
	4	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertEquals(0,"STR");	32.25	0	0
	5	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNull("STR");	32.25	0	0
	6	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotNull("STR");	32.25	0	0
	7	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertTrue("STR");	32.25	0	0
	8	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertNotNull(db.getMetadata().getIndexManager().getIndexes());	32.25	0	0
	9	/	OCommandExecutorSQLSelectTest	testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertTrue(db.getClusters().size()>=db.getMetadata().getSchema().getClasses().size());	32.25	0	0
5	0	orientechnologies/orientdb	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertTrue(isHasContent());	62.66	0	1
	1	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertFalse(!isHasContent());	62.66	0	1
	2	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertEquals(true,isHasContent());	62.66	0	1
	3	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertNotEquals(false,isHasContent());	62.66	0	1
	4	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertTrue(isHasContent()==true);	62.66	0	1
	5	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertFalse(isHasContent()!=true);	62.66	0	1
	6	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertEquals(Boolean.TRUE,Boolean.valueOf(isHasContent()));	62.66	0	1
	7	/	ORemoteTransactionMessagesTest	testBeginTransactionEmptyWriteRead	assertFalse(readRequest.isHasContent());	assertNotEquals(Boolean.FALSE,Boolean.valueOf(isHasContent()));	62.66	0	1
6	0	orientechnologies/orientdb	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertNotNull(result);	35.81	0	1
	1	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertTrue(resultinstanceofList<?>);	35.81	0	1
	2	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertEquals(1,result.size());	35.81	0	1
	3	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertTrue(db.getTransaction().isActive());	35.81	0	1
	4	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertFalse(db.isClosed());	35.81	0	1
	5	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertEquals(Double.valueOf(5.0),"STR");	35.81	0	1
	6	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertNull("STR");	35.81	0	1
	7	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertFalse("STR");	35.81	0	1
	8	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertNotNull("STR");	35.81	0	1
	9	/	OCustomSQLFunctionsTest	testAbsDouble	assertTrue((Double)result.get(0).field("STR")==5.0);	assertEquals(1,"STR");	35.81	0	1
7	0	orientechnologies/orientdb	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	46.47	1	1
	1	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.getTransaction().isActive()!=isActive());	46.47	0	1
	2	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction().isActive()==isActive());	46.47	0	1
	3	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotNull(db);	46.47	0	1
	4	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNull(db.getTransaction());	46.47	0	1
	5	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotEquals(null,db.getTransaction());	46.47	0	1
	6	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertEquals(false,db.getTransaction().isActive());	46.47	0	1
	7	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertSame(db,db.getTransaction().getDatabase());	46.47	0	1
	8	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotSame(null,db.getTransaction());	46.47	0	1
	9	/	ORollbackStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.isClosed());	46.47	0	1
8	0	orientechnologies/orientdb	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotNull(resultSet);	64.2	0	1
	1	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertEquals(0,resultSet.stream().count());	64.2	0	1
	2	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertFalse(resultSet.hasNext());	64.2	0	1
	3	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNull(resultSet.next());	64.2	0	1
	4	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertThrows(UnsupportedOperationException.class,"STR");	64.2	0	1
	5	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertFalse(resultSet.getMetadata().getColumnNames().isEmpty());	64.2	0	1
	6	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotEquals(0,resultSet.getMetadata().getColumnNames().size());	64.2	0	1
	7	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotNull(db);	64.2	0	1
	8	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertNotEquals(0,db.getClusters());	64.2	0	1
	9	/	OLuceneSearchOnIndexFunctionTest	shouldFindNothingOnEmptyQuery	assertThat(resultSet).hasSize(0);	assertEquals(8,db.getClusters());	64.2	0	1
9	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	33.29	0	1
	1	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING},result);	33.29	0	1
	2	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(keyType,result[0]);	33.29	0	1
	3	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(propertyIndexByKey.equals(propertyIndexByValue));	33.29	0	1
	4	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.STRING,propertyIndexByKey.getType());	33.29	0	1
	5	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals("STR",propertyIndexByKey.getName());	33.29	0	1
	6	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(propertyIndexByKey.areValuesUnique());	33.29	0	1
	7	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(propertyIndexByKey.isNullValuesIgnored());	33.29	0	1
	8	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(propertyIndexByKey.isAutomatic());	33.29	0	1
	9	/	OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals("STR",propertyIndexByValue.getIndexType().toString());	33.29	0	1
10	0	orientechnologies/orientdb	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(charSerializer);	86.4	0	1
	1	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(charSerializerinstanceofOCharSerializer);	86.4	0	1
	2	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	86.4	0	1
	3	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	86.4	0	1
	4	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	86.4	0	1
	5	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	86.4	0	1
	6	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(data.length<=FIELD_SIZE);	86.4	0	1
	7	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,charSerializer.deserializeNative(data,0));	86.4	0	1
	8	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,walChanges.getBinaryValue(buffer,serializationOffset).length);	86.4	0	1
	9	/	CharSerializerTest	testSerializeInWALChanges	assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset)instanceofbyte[]);	86.4	0	1
11	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotNull(fields);	54.91	0	1
	1	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertTrue("STR");	54.91	0	1
	2	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertFalse("STR");	54.91	0	1
	3	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertEquals(fields.size(),2);	54.91	1	1
	4	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotEquals(fields.size(),0);	54.91	0	1
	5	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertSame(fields.getClass(),LinkedList.class);	54.91	0	1
	6	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotSame(fields.getClass(),ArrayList.class);	54.91	0	1
	7	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertTrue(fieldsinstanceofList);	54.91	0	1
	8	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertFalse(fields.isEmpty());	54.91	0	1
	9	/	OCompositeIndexDefinitionTest	testGetFields	assertEquals(fields.size(),2);	assertNotEquals("STR",-1);	54.91	0	1
12	0	orientechnologies/orientdb	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	45.32	0	1
	1	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isTrackingChanges());	45.32	0	1
	2	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isModified());	45.32	0	1
	3	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(ORecordState.NEW,((ORecord)doc).getInternalStatus());	45.32	0	1
	4	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertNotEquals(ORecordState.DELETED,((ORecord)doc).getInternalStatus());	45.32	0	1
	5	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	45.32	0	1
	6	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.getIdentity().isValid());	45.32	0	1
	7	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertEquals(ODocument.RECORD_TYPE,doc.getRecordType());	45.32	0	1
	8	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertTrue(doc.isValid());	45.32	0	1
	9	/	TrackedListTest	testRemoveIndexOne	assertFalse(doc.isDirty());	assertFalse(doc.isBlob());	45.32	0	1
13	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	31.63	0	1
	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	31.63	0	1
	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	31.63	1	1
	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	31.63	0	1
	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotSame(ODocument.class,qResult.getClass());	31.63	0	1
	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertSame(ODocument.class,qResult.get(0).getClass());	31.63	0	1
	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals("STR",db.getName());	31.63	0	1
	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals("STR",db.getName());	31.63	0	1
	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(db.exists());	31.63	0	1
	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(db.exists(newORecordId()));	31.63	0	1
14	0	orientechnologies/orientdb	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertEquals(42,focalObj.getByteValue(pointer,64));	103.87	0	1
	1	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertArrayEquals(newbyte[]{42},newbyte[]{focalObj.getByteValue(pointer,64)});	103.87	0	1
	2	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertTrue(focalObj.getByteValue(pointer,64)>0);	103.87	0	1
	3	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertFalse(focalObj.getByteValue(pointer,64)<0);	103.87	0	1
	4	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotNull(focalObj.getByteValue(pointer,64));	103.87	0	1
	5	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNull(focalObj.getByteValue(pointer,65));	103.87	0	1
	6	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotSame(43,focalObj.getByteValue(pointer,64));	103.87	0	1
	7	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotEquals(null,focalObj.getByteValue(pointer,64));	103.87	0	1
	8	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertNotEquals(1,Integer.compare(41,focalObj.getByteValue(pointer,64)));	103.87	0	1
	9	/	OWALPageV2ChangesPortionTest	testSingleByteValue	assertEquals(changesCollector.getByteValue(pointer,64),42);	assertEquals(-1,Integer.compare(41,focalObj.getByteValue(pointer,64)));	103.87	0	1
15	0	orientechnologies/orientdb	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(old`:This);	25.04	0	1
	1	/	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(docinstanceofODocument`:This);	25.04	0	1
	2	/	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotNull(json);	25.04	0	1
	3	/	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(doc1instanceofODocument);	25.04	0	1
	4	/	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertEquals("STR","STR");	25.04	0	1
	5	/	OJsonWithCustom	testCustomField	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals(doc,doc1);	25.04	0	1
16	0	orientechnologies/orientdb	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertNotNull(loadedRonnie);	72.39	0	1
	1	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertEquals(savedRonnie.getId(),loadedRonnie.getId());	72.39	0	1
	2	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertEquals(ronnie.getName(),loadedRonnie.getName());	72.39	0	1
	3	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertArrayEquals(ronniePicture,loadedRonnie.getImageData());	72.39	0	1
	4	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertTrue(databaseTx.exists(loadedRonnie.getId()));	72.39	0	1
	5	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertFalse(ronnie.equals(savedRonnie));	72.39	0	1
	6	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertNotEquals(ronnie.hashCode(),savedRonnie.hashCode());	72.39	0	1
	7	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertThrows(ODatabaseException.class,"STR");	72.39	0	1
	8	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertThrows(IllegalArgumentException.class,()->databaseTx.load(null));	72.39	0	1
	9	/	OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory	assertNotNull(savedRonnie);	assertTrue(databaseTx.isClosed());	72.39	0	1
17	0	orientechnologies/orientdb	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(focalMethod());	26.05	0	1
	1	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(focalMethod());	26.05	0	1
	2	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(focalMethod());	26.05	0	1
	3	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(false,focalMethod());	26.05	0	1
	4	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(Boolean.TRUE,focalMethod());	26.05	0	1
	5	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(2,focalMethod()?.toString()?.length());	26.05	0	1
	6	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertSame(2L,focalMethod()?.longValue());	26.05	0	1
	7	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertNull(focalMethod()?.orElse(null));	26.05	0	1
	8	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertThrows(Exception.class,()->focalMethod());	26.05	0	1
	9	/	OConnectionExecutorTransactionTest	testBeginRollbackTransaction	assertFalse(database.getTransaction().isActive());	assertTimeout(Duration.ofMillis(100),()->focalMethod());	26.05	0	1
18	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	30.89	1	1
	1	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	30.89	0	1
	2	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result);	30.89	0	1
	3	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(3,result.getMetadata().getPropertyNames().size());	30.89	0	1
	4	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(!result.hasNext());	30.89	0	1
	5	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getMetadata().getPropertyNames());	30.89	0	1
	6	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getColumnNames());	30.89	0	1
	7	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals("STR",result.getColumnNames().get(0));	30.89	0	1
	8	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getPropertyNames());	30.89	0	1
	9	/	OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(null,result.getExecutionPlan());	30.89	0	1
19	0	orientechnologies/orientdb	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotNull(res);	51.07	0	1
	1	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	51.07	1	1
	2	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	51.07	0	1
	3	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertEquals(1,res.size());	51.07	0	1
	4	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNull(configurator.getError());	51.07	0	1
	5	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	51.07	0	1
	6	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,configurator);	51.07	0	1
	7	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,proc);	51.07	0	1
	8	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).fieldNames().get(0));	51.07	0	1
	9	/	OETLCSVExtractorTest	testStringStartedFromDigit	assertFalse(res.isEmpty());	assertNotEquals(null,res.get(0));	51.07	0	1
20	0	PeterisP/morphology	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	35.91	0	1
	1	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	35.91	0	1
	2	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	35.91	1	1
	3	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	35.91	0	1
	4	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.containsAll(tokens));	35.91	0	1
	5	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(tokens.getFirst()));	35.91	0	1
	6	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(tokens.getFirst()));	35.91	0	1
	7	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.offer(tokens.getLast()));	35.91	0	1
	8	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(null,tokens.poll());	35.91	0	1
	9	/	TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(null,tokens.peekFirst());	35.91	0	1
21	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(isRecognized());	42.18	0	1
	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(!isRecognized());	42.18	0	1
	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	42.18	0	1
	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk);	42.18	0	1
	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.isEmpty());	42.18	0	1
	5	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(!jāmāk.isEmpty());	42.18	0	1
	6	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(1,jāmāk.size());	42.18	0	1
	7	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(jāmāk.size(),jāmāk.stream().unordered().parallel().distinct().count());	42.18	0	1
	8	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(jāmāk,"STR");	42.18	0	1
	9	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(jāmāk,"STR");	42.18	0	1
22	0	PeterisP/morphology	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs.isRecognized());	67.88	0	1
	1	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.isRecognized());	67.88	0	1
	2	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotNull(locītājs);	67.88	0	1
	3	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs!=null);	67.88	0	1
	4	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getRulesLocation());	67.88	0	1
	5	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getVersion());	67.88	0	1
	6	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertTrue(locītājs.getMetadata().size()>0);	67.88	0	1
	7	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.getMetadata().isEmpty());	67.88	0	1
	8	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertNotEquals(null,locītājs.getMetadata());	67.88	0	1
	9	/	MorphologyTest	mazajai	assertTrue(mazajai.isRecognized());	assertFalse(locītājs.isStoplistLoaded());	67.88	0	1
23	0	ExpediaGroup/beeju	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(warehouseDir);	52.39	0	1
	1	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(Files.exists(warehouseDir));	52.39	0	1
	2	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(Files.isDirectory(warehouseDir));	52.39	0	1
	3	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",warehouseDir.toString());	52.39	0	1
	4	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals("STR",warehouseDir.toString());	52.39	0	1
	5	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertSame(Path.class,warehouseDir.getClass());	52.39	0	1
	6	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(warehouseDir.subpath(0,1));	52.39	0	1
	7	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",warehouseDir.getName(0).toString());	52.39	0	1
	8	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",warehouseDir.getFileName().toString());	52.39	0	1
	9	/	BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(warehouseDir.getParent());	52.39	0	1
24	0	OpenLiberty/ci.common	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	78.61	1	1
	1	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isDirectory());	78.61	0	1
	2	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(targetFile,"STR");	78.61	0	1
	3	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(targetFile.getParentFile(),"STR");	78.61	0	1
	4	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.lastModified());	78.61	0	1
	5	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isHidden());	78.61	0	1
	6	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",configFile.getName());	78.61	0	1
	7	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(configFile.isDirectory());	78.61	0	1
	8	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertArrayEquals("STR",FileUtils.readFileToByteArray(configFile));	78.61	0	1
	9	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull("STR");	78.61	0	1
25	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertTrue("STR");	42.75	0	0
	1	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	2	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	3	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	4	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertTrue("STR");	42.75	0	0
	5	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	6	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	7	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertTrue("STR");	42.75	0	0
	8	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
	9	/	PropertyBindingSupport_bind0_NonNumericalTest	bind_enum_nullValue	assertNull(testObject.enumField);	assertFalse("STR");	42.75	0	0
26	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertEquals(list.getResources(),Collections.emptyList());	33.48	0	1
	1	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertNull(list.getResources());	33.48	0	1
	2	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertNotNull(list.getResources());	33.48	0	1
	3	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertTrue(list.getResources().isEmpty());	33.48	0	1
	4	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertNotEquals(list.getResources(),null);	33.48	0	1
	5	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertSame(list.getResources(),list.getResources());	33.48	0	1
	6	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertNotSame(list.getResources(),newArrayList<>());	33.48	0	1
	7	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertTrue(list.getStartIndex()==0);	33.48	0	1
	8	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertFalse(list.getStartIndex()==1);	33.48	0	1
	9	/	SpecExamplesSerializationTest	testAnnotationListPage	assertSerializationEqualsSpec(list,"STR");	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	33.48	0	1
27	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotNull(mapper);	45.17	0	1
	1	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertTrue(mapperinstanceofIiifObjectMapper);	45.17	0	1
	2	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertTrue(mapper.equals(mapper));	45.17	0	1
	3	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(resource,getResource());	45.17	0	1
	4	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotEquals(null,mapper);	45.17	0	1
	5	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(this,this);	45.17	0	1
	6	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertNotEquals(0,mapper.hashCode());	45.17	0	1
	7	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertFalse(mapper.equals(null));	45.17	0	1
	8	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertEquals(IiifObjectMapper.class,mapper.getClass());	45.17	0	1
	9	/	SpecExamplesDeserializationTest	testSvgSelector	assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	assertSame(mapper,mapper);	45.17	0	1
28	0	nidi3/raml-loader	GithubTest	publicGithub	assertRamlStart(in);	assertNotNull(in);	36.12	0	1
	1	/	GithubTest	publicGithub	assertRamlStart(in);	assertEquals(-1,in.available());	36.12	0	1
	2	/	GithubTest	publicGithub	assertRamlStart(in);	assertFalse(in.read()==-1);	36.12	0	1
	3	/	GithubTest	publicGithub	assertRamlStart(in);	assertNotEquals(0,in.read());	36.12	0	1
	4	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.skip(10)==10);	36.12	0	1
	5	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.reset()==0);	36.12	0	1
	6	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.mark(0)==0);	36.12	0	1
	7	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.markSupported());	36.12	0	1
	8	/	GithubTest	publicGithub	assertRamlStart(in);	assertTrue(in.available()==0);	36.12	0	1
	9	/	GithubTest	publicGithub	assertRamlStart(in);	assertFalse(in.markSupported());	36.12	0	1
29	0	arnohaase/a-foundation	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertTrue("STR");	27.73	0	1
	1	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertFalse("STR");	27.73	0	1
	2	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertTrue(true);	27.73	0	1
	3	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertFalse(false);	27.73	0	1
	4	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertEquals("STR","STR");	27.73	0	1
	5	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNull(null);	27.73	0	1
	6	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNotNull("STR");	27.73	0	1
	7	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNotSame(5,3);	27.73	0	1
	8	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertNotEquals(2,"STR");	27.73	0	1
	9	/	ACollectionHelperTest	testFind	assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	assertSame("STR","STR");	27.73	0	1
30	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened);	34.4	0	1
	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(null,flattened);	34.4	0	1
	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	34.4	0	1
	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(5,flattened.size());	34.4	1	1
	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(6,flattened.size());	34.4	0	1
	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue("STR");	34.4	0	1
	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse("STR");	34.4	0	1
	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue("STR");	34.4	0	1
	8	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(set.isEmpty());	34.4	0	1
	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(2,set.iterator().next().size());	34.4	0	1
31	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(1000,invalidHandshakeException.getCloseCode());	38.45	0	1
	1	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotEquals(999,invalidHandshakeException.getCloseCode());	38.45	0	1
	2	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotEquals(1001,invalidHandshakeException.getCloseCode());	38.45	0	1
	3	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>=1000);	38.45	0	1
	4	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertFalse(invalidHandshakeException.getCloseCode()<1000);	38.45	0	1
	5	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNull(invalidHandshakeException.getMessage());	38.45	0	1
	6	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotNull(invalidHandshakeException);	38.45	0	1
	7	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertSame(InvalidHandshakeException.class,invalidHandshakeException.getClass());	38.45	0	1
	8	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotSame(IOException.class,invalidHandshakeException.getClass());	38.45	0	1
	9	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertArrayEquals(newint[]{invalidHandshakeException.getCloseCode()},newint[]{1000});	38.45	0	1
32	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertNotNull(defaultExtension);	73.93	0	1
	1	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertNotNull(binaryFrame);	73.93	0	1
	2	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertTrue(binaryFrame.getPayload()!=null);	73.93	0	1
	3	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertEquals(4,binaryFrame.getPayload().array().length);	73.93	0	1
	4	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertArrayEquals("STR",binaryFrame.getPayload().array());	73.93	0	1
	5	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertNotNull(defaultExtension.encodeFrame(binaryFrame));	73.93	0	1
	6	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertTrue(defaultExtension.encodeFrame(binaryFrame).getPayloadData()!=null);	73.93	0	1
	7	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertEquals(4,defaultExtension.encodeFrame(binaryFrame).getPayloadData().array().length);	73.93	0	1
	8	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertArrayEquals("STR",defaultExtension.encodeFrame(binaryFrame).getPayloadData().array());	73.93	0	1
	9	/	DefaultExtensionTest	testEncodeFrame	assertEquals(ByteBuffer.wrap("STR".getBytes()),binaryFrame.getPayloadData());	assertNotNull(defaultExtension.encodeFrame(binaryFrame).getPayloadData());	73.93	0	1
33	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	39.93	0	1
	1	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater()instanceofDeflater);	39.93	0	1
	2	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(Deflater.NO_COMPRESSION,deflateExtension.getDeflater().getLevel());	39.93	0	1
	3	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(null,deflateExtension.getDeflater());	39.93	0	1
	4	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().isFinished());	39.93	0	1
	5	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(0,deflateExtension.getDeflater().getBytesRead());	39.93	0	1
	6	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().needsInput());	39.93	0	1
	7	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(0,deflateExtension.getDeflater().getBytesWritten());	39.93	0	1
	8	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().needsInput());	39.93	0	1
	9	/	PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotSame(null,deflateExtension.getDeflater().getBytesWritten());	39.93	0	1
34	0	nidi3/graphviz-java	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertEquals("STR",serialized());	30.67	0	1
	1	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotEquals("STR",serialized());	30.67	0	1
	2	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotSame("STR",serialized());	30.67	0	1
	3	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertEquals(quoted().substring(0,3),"STR");	30.67	0	1
	4	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertEquals(quoted().length(),serialized().length()-2);	30.67	0	1
	5	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotSame(String.valueOf(html),serialized());	30.67	0	1
	6	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotEquals(serialized(),"STR");	30.67	0	1
	7	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertSame(quoted(),quoted());	30.67	0	1
	8	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotNull(quoted());	30.67	0	1
	9	/	SimpleLabelTest	simple	assertEquals("STR",SimpleLabel.of("STR").serialized());	assertNotSame(html,false);	30.67	0	1
35	0	nidi3/graphviz-java	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotNull(attrs());	37.88	0	1
	1	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotNull(attrs((Attributes<?extendsFor>)null));	37.88	0	1
	2	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertEquals(attrs(),attrs((Attributes<?extendsFor>)null));	37.88	0	1
	3	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertTrue(attrs()instanceofAttributes);	37.88	0	1
	4	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertFalse(attrs()==attrs((Attributes<?extendsFor>)null));	37.88	0	1
	5	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertArrayEquals(newAttributes[]{attrs((Attributes<?extendsFor>)null)},newAttributes[]{attrs((Attributes<?extendsFor>)null)});	37.88	0	1
	6	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertLinesMatch("STR","STR");	37.88	0	1
	7	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertIterableEquals(Collections.singleton(attrs((Attributes<?extendsFor>)null)),Collections.singletonList(attrs((Attributes<?extendsFor>)null)));	37.88	0	1
	8	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertSame(attrs(),attrs());	37.88	0	1
	9	/	StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertThat(attrs(),is(notNullValue()));	37.88	0	1
36	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotNull(a);	71.08	0	1
	1	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertTrue(ainstanceofSvgSizeAnalyzer);	71.08	0	1
	2	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertEquals(a.getWidth(),SvgSizeAnalyzer.svg(SVG).getWidth());	71.08	0	1
	3	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotEquals(a.getHeight(),SvgSizeAnalyzer.svg(SVG2).getHeight());	71.08	0	1
	4	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertTrue("STR");	71.08	0	1
	5	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertEquals(15.0,SvgSizeAnalyzer.svg(SVG).getAspectRatio());	71.08	0	1
	6	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotEquals(0,a.getWidth());	71.08	0	1
	7	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertFalse(a.getHeight()<0);	71.08	0	1
	8	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertSame(SVG,SvgSizeAnalyzer.svg(SVG).getSvg());	71.08	0	1
	9	/	SvgSizeAnalyzerTest	getValues	assertEquals(1000,a.getWidth());	assertNotSame(a,SvgSizeAnalyzer.svg(a.getSvg()));	71.08	0	1
37	0	nidi3/graphviz-java	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertTrue(true);	53.78	0	1
	1	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertFalse(false);	53.78	0	1
	2	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertEquals(2,1+1);	53.78	0	1
	3	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertNull(null);	53.78	0	1
	4	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertNotNull(newObject());	53.78	0	1
	5	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertSame(obj1,obj1);	53.78	0	1
	6	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertNotSame(obj1,obj2);	53.78	0	1
	7	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	53.78	0	1
	8	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertNotEquals(1,2);	53.78	0	1
	9	/	LabelTest	locate	assertEquals(attrs(attr("STR",label.locate(TOP)),attr("STR","STR")),attrs(label.locate(TOP)));	assertNotEquals(obj1,obj2);	53.78	0	1
38	0	nidi3/graphviz-java	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotNull(s);	61.83	0	1
	1	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue("STR");	61.83	0	1
	2	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue("STR");	61.83	0	1
	3	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse("STR");	61.83	0	1
	4	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertArrayEquals(expectedArray,actualArray);	61.83	0	1
	5	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue("STR");	61.83	0	1
	6	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotEquals("STR",s);	61.83	0	1
	7	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue("STR");	61.83	0	1
	8	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse("STR");	61.83	0	1
	9	/	OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.isEmpty());	61.83	0	1
39	0	nidi3/graphviz-java	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertNotNull(g);	32.87	0	1
	1	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertTrue("STR");	32.87	0	1
	2	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertFalse("STR");	32.87	0	1
	3	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertEquals(g.nodeAttr().size(),1);	32.87	0	1
	4	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertFalse(g.nodeAttr().isEmpty());	32.87	0	1
	5	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertNotEquals("STR","STR");	32.87	0	1
	6	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertTrue(g.nodeAttr().entrySet().stream().allMatch(e->e.getKey().getClass().equals(String.class)));	32.87	0	1
	7	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertEquals("STR",0);	32.87	0	1
	8	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertEquals(g.nodeAttr().values().toArray(),"STR");	32.87	0	1
	9	/	SerializerTest	nodeAttr	assertSerialize(g,"STR",msg(WARN,"STR","STR",NODE_ATTRS,g));	assertSame(g,g.nodeAttr());	32.87	0	1
40	0	nidi3/graphviz-java	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertNotNull(<FOCAL>);	64.67	0	1
	1	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertTrue(<FOCAL>instanceofAttributes);	64.67	0	1
	2	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertEquals(0,<FOCAL>.size());	64.67	0	1
	3	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertNotEquals(5,<FOCAL>.size());	64.67	0	1
	4	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertSame(<FOCAL>,<FOCAL>);	64.67	0	1
	5	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertFalse(<FOCAL>instanceofString);	64.67	0	1
	6	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertNotSame(<FOCAL>,newObject());	64.67	0	1
	7	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertEquals("STR",<FOCAL>);	64.67	0	1
	8	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertNotEquals("STR",<FOCAL>);	64.67	0	1
	9	/	ArrowTest	dir	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Arrow.BOX.dir(Arrow.DirType.BACK));	assertTrue(<FOCAL>instanceofList<?>);	64.67	0	1
41	0	nidi3/graphviz-java	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertNotNull(pars);	57.57	0	1
	1	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertTrue(pars.messages.isEmpty());	57.57	0	1
	2	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertEquals(0,pars.messages.size());	57.57	0	1
	3	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertNotNull(pars.getConfig());	57.57	0	1
	4	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertSame(MutableGraph.class,pars.getClass());	57.57	0	1
	5	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertTrue(pars.isValid());	57.57	0	1
	6	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertFalse(pars.isReadOnly());	57.57	0	1
	7	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertEquals(5,pars.getValues().size());	57.57	0	1
	8	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertNotEquals(10,pars.getValues().size());	57.57	0	1
	9	/	ParserTest	inheritDirected	assertParse("STR",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode("STR").addLink("STR"))));	assertEquals("STR",pars.getStringListValue().get(0));	57.57	0	1
42	0	adlnet/jxapi	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement);	31.27	0	1
	1	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	31.27	0	1
	2	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(ID,statement.getId());	31.27	0	1
	3	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(MBOX,statement.getActor().getMbox());	31.27	0	1
	4	/	StatementTest	testToString	assertNotNull(actual);	assertEquals("STR",statement.getVersion());	31.27	0	1
	5	/	StatementTest	testToString	assertNotNull(actual);	assertEquals("STR",statement.getVerb().getId());	31.27	0	1
	6	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getObject().getId().contains(TEST_IRI));	31.27	0	1
	7	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getObject());	31.27	0	1
	8	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getAttachments().contains(expected));	31.27	0	1
	9	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(expectedList.size(),statement.getAttachments().size());	31.27	0	1
43	0	adlnet/jxapi	ContextTest	testGetTeam	assertNotNull(actual);	assertNotNull(actual);	61.44	1	1
	1	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(group,actual);	61.44	0	1
	2	/	ContextTest	testGetTeam	assertNotNull(actual);	assertSame(c.getTeam(),actual);	61.44	0	1
	3	/	ContextTest	testGetTeam	assertNotNull(actual);	assertTrue(actual.getMembers().contains(expected));	61.44	0	1
	4	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(expected.getName(),actual.getMembers().get(0).getName());	61.44	0	1
	5	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(expected.getEmail(),actual.getMembers().get(0).getEmail());	61.44	0	1
	6	/	ContextTest	testGetTeam	assertNotNull(actual);	assertTrue(actual.getMembers().size()==1);	61.44	0	1
	7	/	ContextTest	testGetTeam	assertNotNull(actual);	assertEquals(1,actual.getMembers().size());	61.44	0	1
	8	/	ContextTest	testGetTeam	assertNotNull(actual);	assertFalse(actual.getMembers().isEmpty());	61.44	0	1
	9	/	ContextTest	testGetTeam	assertNotNull(actual);	assertArrayEquals(group.getMembers().toArray(),actual.getMembers().toArray());	61.44	0	1
44	0	ToastShaman/dropwizard-auth-jwt	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertNull(cache.getIfPresent(null));	30.05	0	1
	1	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertNotNull(cache.getIfPresent(context.getJwt()));	30.05	0	1
	2	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertTrue(principal.isPresent());	30.05	0	1
	3	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertFalse(principal.isPresent());	30.05	0	1
	4	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertNotEquals(0,cacheMisses.getCount());	30.05	0	1
	5	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertEquals(0,cacheMisses.getCount());	30.05	0	1
	6	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertTrue(timer.getElapsedTime(TimeUnit.MILLISECONDS)>0);	30.05	0	1
	7	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertNotEquals(0,gets.getCount());	30.05	0	1
	8	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertEquals(1,gets.getCount());	30.05	0	1
	9	/	JwtCachingAuthenticatorTest	doesNotCacheDifferingTokens	assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl("STR")));	assertTrue(cache.getIfPresent(context.getJwt()).getValue().isPresent());	30.05	0	1
45	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",text.substring(text.length()-2));	31.98	0	1
	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse(text.toString().isEmpty());	31.98	0	1
	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue("STR");	31.98	0	1
	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue("STR");	31.98	0	1
	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse("STR");	31.98	0	1
	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals(null,text);	31.98	0	1
	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(text);	31.98	0	1
	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR","STR");	31.98	0	1
	8	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals("STR",text.charAt(0));	31.98	0	1
	9	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",txt);	31.98	0	1
46	0	trautonen/coveralls-maven-plugin	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	57.37	0	1
	1	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client.execute(newHttpGet(TARGET_URL)).getEntity());	57.37	0	1
	2	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client.getParams());	57.37	0	1
	3	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(client.getParams().getParameter(ClientPNames.MAX_REDIRECTS)>0);	57.37	0	1
	4	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals(HttpStatus.SC_OK,client.execute(newHttpGet(TARGET_URL)).getStatusLine().getStatusCode());	57.37	0	1
	5	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",proxy.getProtocol());	57.37	0	1
	6	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",proxy.getHost());	57.37	0	1
	7	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals(PROXY_PORT,proxy.getPort());	57.37	0	1
	8	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",proxy.getNonProxyHosts());	57.37	0	1
	9	/	HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(rcb);	57.37	0	1
47	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env);	78.07	0	1
	1	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(getCiName());	78.07	0	1
	2	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.keySet().size()==3);	78.07	0	1
	3	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNull(getCiName());	78.07	0	1
	4	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals(env.hashCode(),env.hashCode());	78.07	0	1
	5	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.entrySet().containsAll(env.entrySet()));	78.07	0	1
	6	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals(env.toString(),env.toString());	78.07	0	1
	7	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals(env,newObject());	78.07	0	1
	8	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals(env,newHashMap<>()));	78.07	0	1
	9	/	CiEnvironmentTest	recognises_bamboo	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.isEmpty());	78.07	0	1
48	0	jcodec/jcodec	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual);	60.17	0	1
	1	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actualinstanceofNALUnit);	60.17	0	1
	2	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertEquals(actual.getType(),type);	60.17	0	1
	3	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertEquals(actual.getNalRefIdc(),nal_ref_idc);	60.17	0	1
	4	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()<=3);	60.17	0	1
	5	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertArrayEquals(newbyte[]{(byte)0x7C,(byte)0x81});	60.17	0	1
	6	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(actual,null);	60.17	0	1
	7	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertFalse(actual.isForbidden());	60.17	0	1
	8	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getType()==type);	60.17	0	1
	9	/	NalUnitTest	testCanReadNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(actual.getNalRefIdc(),4);	60.17	0	1
49	0	amlinv/stat-collection-utils	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo);	62.15	0	1
	1	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	62.15	1	1
	2	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	62.15	0	1
	3	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertArrayEquals(setters.keySet().toArray(),objectQueryInfo.getAttributeNames());	62.15	0	1
	4	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(setters.size(),objectQueryInfo.getAttributeNames().length);	62.15	0	1
	5	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(setters.keySet().containsAll(Arrays.asList(objectQueryInfo.getAttributeNames())));	62.15	0	1
	6	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	62.15	0	1
	7	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(setters,objectQueryInfo.getAttributes());	62.15	0	1
	8	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(oname,objectQueryInfo.getObjectName());	62.15	0	1
	9	/	ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotEquals(oname,null);	62.15	0	1