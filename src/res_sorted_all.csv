TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	1337joe/cubesensors-for-java	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1	1	49.29147410392761
0	1	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(Pressure.toMilliBar(802));	0	1	49.29147410392761
0	2	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,Pressure.toMilliBar(802));	0	1	49.29147410392761
0	3	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(expected.contains(Pressure.toMilliBar(802)));	0	1	49.29147410392761
0	4	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(expected.equals(Pressure.toMilliBar(800)));	0	1	49.29147410392761
0	5	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(Pressure.toMilliBar(802).isEmpty());	0	1	49.29147410392761
0	6	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),Pressure.toMilliBar(802).toCharArray());	0	1	49.29147410392761
0	7	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0	1	49.29147410392761
0	8	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,Pressure.toMilliBar(803));	0	1	49.29147410392761
0	9	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNull(Pressure.toMilliBar(0));	0	1	49.29147410392761
1	0	1337joe/cubesensors-for-java	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,Pressure.toInHg(802));	0	1	34.29624891281128
1	1	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1	1	34.29624891281128
1	2	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,Double.parseDouble(Pressure.toInHg(802)));	0	1	34.29624891281128
1	3	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(newchar[]{'2','3','.','7'},Pressure.toInHg(802).toCharArray());	0	1	34.29624891281128
1	4	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(Pressure.toInHg(802));	0	1	34.29624891281128
1	5	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(Pressure.toInHg(8));	0	1	34.29624891281128
1	6	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(Pressure.toInHg(0));	0	1	34.29624891281128
1	7	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(Pressure.toInHg(802).equals(null));	0	1	34.29624891281128
1	8	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(Pressure.toInHg(802).isEmpty());	0	1	34.29624891281128
1	9	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(Pressure.toInHg(0).isEmpty());	0	1	34.29624891281128
2	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	1	1	37.547224044799805
2	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(newObject());	0	1	37.547224044799805
2	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNull(null);	0	1	37.547224044799805
2	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(newObject(),newObject());	0	1	37.547224044799805
2	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(5>2);	0	1	37.547224044799805
2	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(5<2);	0	1	37.547224044799805
2	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	"assertSame(""STR"",""STR"");"	0	1	37.547224044799805
2	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	37.547224044799805
2	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	"assertNotSame(""STR"",""STR"");"	0	1	37.547224044799805
2	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(1.0,1.0004);	0	1	37.547224044799805
3	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	0	1	30.573009729385376
3	1	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	1	1	30.573009729385376
3	2	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.isDirectory());	0	1	30.573009729385376
3	3	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	"assertEquals(""STR"",aXls.getFilename());"	0	1	30.573009729385376
3	4	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(newbyte[0],super.marshal(newCodeListDocument()));	0	1	30.573009729385376
3	5	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertThrows(Exception.class,()->super.unmarshal(newByteArrayInputStream(newbyte[1])));	0	1	30.573009729385376
3	6	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertThrows(NullPointerException.class,()->super.setAttachedSchema(null));	0	1	30.573009729385376
3	7	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(super.marshal(newObjectFactory().createCodeList(newCodeListType())),newbyte[0]);	0	1	30.573009729385376
3	8	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(super.canValidate(CodeListDocument.class));	0	1	30.573009729385376
3	9	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(super.canValidate(Object.class));	0	1	30.573009729385376
4	0	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotNull(sql);	0	1	23.92943787574768
4	1	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertTrue(sqlinstanceofTSqlBuilder);	0	1	23.92943787574768
4	2	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertFalse(sql.toString().isEmpty());	0	1	23.92943787574768
4	3	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertNotEquals(""STR"",sql.toString());"	0	1	23.92943787574768
4	4	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotSame(sql,newTSqlBuilder());	0	1	23.92943787574768
4	5	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertSame(sql,sql);	0	1	23.92943787574768
4	6	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotEquals(null,sql.toString());	0	1	23.92943787574768
4	7	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	23.92943787574768
4	8	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",""STR"");"	0	1	23.92943787574768
4	9	/	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotEquals(sql,null);	0	1	23.92943787574768
5	0	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",focal.toString());"	0	1	70.78973388671875
5	1	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotEquals(""STR"",focal.toString());"	0	1	70.78973388671875
5	2	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertNotNull(focal.toString());	0	1	70.78973388671875
5	3	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertTrue(""STR"");"	0	1	70.78973388671875
5	4	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertFalse(""STR"");"	0	1	70.78973388671875
5	5	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertArrayEquals(expectedArray,focal.toString().toArray());	0	1	70.78973388671875
5	6	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertThat(""STR"",focal.toString(),is(expectedValue));"	0	1	70.78973388671875
5	7	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertSame(expectedObject,focal.toString());	0	1	70.78973388671875
5	8	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotSame(""STR"",unexpectedObject,focal.toString());"	0	1	70.78973388671875
5	9	/	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertNull(nullObject.toString());	0	1	70.78973388671875
55	0	sharneng/gm4java	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNotNull(sut);	0	1	47.30223512649536
55	1	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(exception);	0	1	47.30223512649536
55	2	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertFalse(width==null||height==null);	0	1	47.30223512649536
55	3	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertTrue(width>0&&height>0);	0	1	47.30223512649536
55	4	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertTrue(sut.source(createdFile(),null,null)!=null);	0	1	47.30223512649536
55	5	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertTrue(sut.sizeDetected());	0	1	47.30223512649536
55	6	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertFalse(sut.sizeDetected());	0	1	47.30223512649536
55	7	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertTrue(sut.source(createdFile(),100,200)==sut);	0	1	47.30223512649536
55	8	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertFalse(width>0&&height>0);	0	1	47.30223512649536
55	9	/	GMOperationTest	source_OmitsSize_WhenHeightIsNull	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	"assertThat(sut.getCmdArgs(),""STR"");"	0	1	47.30223512649536
56	0	sharneng/gm4java	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(sut.source(null,0,100));	0	1	37.47069215774536
56	1	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNotNull(sut.source(createdFile(),0,0));	0	1	37.47069215774536
56	2	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNotNull(sut.source(null,null,100));	0	1	37.47069215774536
56	3	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(sut.source(null,null,0));	0	1	37.47069215774536
56	4	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(sut.source(createdFile(),300,0));	0	1	37.47069215774536
56	5	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(sut.source(null,300,null));	0	1	37.47069215774536
56	6	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNull(sut.source(createdFile(),null,0));	0	1	37.47069215774536
56	7	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertEquals(sut.source(createdFile(),null,null),sut.addImage(createdFile()));	0	1	37.47069215774536
56	8	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNotEquals(sut.source(createdFile(),0,null),sut.addImage(createdFile()));	0	1	37.47069215774536
56	9	/	GMOperationTest	source_OmitsSize_WhenHeightIsNotPositive	"assertThat(sut.getCmdArgs(),not(hasItem(""STR"")));"	assertNotEquals(sut.source(createdFile(),100,0),sut.addImage(createdFile()));	0	1	37.47069215774536
57	0	sharneng/gm4java	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotNull(sut);	0	1	89.28851890563965
57	1	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertTrue(sutinstanceofGMOperation);	0	1	89.28851890563965
57	2	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)),null);	0	1	89.28851890563965
57	3	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getClass(),GMOperation.class);	0	1	89.28851890563965
57	4	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getCmdArgs(),null);	0	1	89.28851890563965
57	5	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertTrue(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getCmdArgs().size()>0);	0	1	89.28851890563965
57	6	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getCmdArgs().get(1),resample(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)));	0	1	89.28851890563965
57	7	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertArrayEquals(resample(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly))),sut.resize(1,1);	0	1	89.28851890563965
57	8	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getCmdArgs().size(),2);	0	1	89.28851890563965
57	9	/	GMOperationTest	resize_ForceDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertEquals(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions,GeometryAnnotation.DownsizeOnly)).getCmdArgs().get(0),""STR"");"	0	1	89.28851890563965
58	0	sharneng/gm4java	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotNull(sut);	0	1	30.609827280044556
58	1	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertFalse(sut.isResizing());	0	1	30.609827280044556
58	2	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(null,sut.getResampleDimensions());	0	1	30.609827280044556
58	3	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertEquals(""STR"",sut.getResampleDimensions());"	0	1	30.609827280044556
58	4	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertTrue(sut.getGeometryAnnotations().contains(GeometryAnnotation.FitUsingAspectRatio));	0	1	30.609827280044556
58	5	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertTrue(sut.getGeometryAnnotations().contains(GeometryAnnotation.DownsizeOnly));	0	1	30.609827280044556
58	6	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(2,sut.getCMDArgs().size());	0	1	30.609827280044556
58	7	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertTrue(sut.getGeometryAnnotations().size()==2);	0	1	30.609827280044556
58	8	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertFalse(sut.getGeometryAnnotations().isEmpty());	0	1	30.609827280044556
58	9	/	GMOperationTest	resize_RatioDisallowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(0,sut.getGeometryAnnotations().size());	0	1	30.609827280044556
59	0	sharneng/gm4java	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotNull(sut);	0	1	43.410183906555176
59	1	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertFalse(sut.isInvalid());	0	1	43.410183906555176
59	2	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(0,sut.getExitValue());	0	1	43.410183906555176
59	3	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotEquals(null,sut.getVersion());	0	1	43.410183906555176
59	4	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertTrue(""STR"");"	0	1	43.410183906555176
59	5	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertFalse(sut.resize(1,1,EnumSet.of(GeometryAnnotation.ForceDimensions)).toString().isEmpty());	0	1	43.410183906555176
59	6	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	"assertTrue(""STR"");"	0	1	43.410183906555176
59	7	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertThrows(IOException.class,sut::exec);	0	1	43.410183906555176
59	8	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertEquals(10,sut.resize(10,10,EnumSet.allOf(GeometryAnnotation.class)).getExitValue());	0	1	43.410183906555176
59	9	/	GMOperationTest	resize_ForceAllowUpsample	"assertThat(sut.getCmdArgs(),hasItem(""STR""));"	assertNotNull(sut.removeTransform(GeometryAnnotation.Ignored));	0	1	43.410183906555176
105	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotNull(headers);	0	1	27.72813105583191
105	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(1,headers.size());	0	1	27.72813105583191
105	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertTrue(""STR"");"	0	1	27.72813105583191
105	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertFalse(headers.isEmpty());	0	1	27.72813105583191
105	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotEquals(2,headers.size());	0	1	27.72813105583191
105	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotEquals(oAuth2FeignRequestInterceptor,null);	0	1	27.72813105583191
105	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotNull(requestTemplate.method());	0	1	27.72813105583191
105	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertFalse(requestTemplate.method().name().isEmpty());	0	1	27.72813105583191
105	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(HttpMethod.GET,requestTemplate.method());	0	1	27.72813105583191
105	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertNotNull(requestTemplate.headers());	0	1	27.72813105583191
106	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThrows(OAuth2AccessDeniedException.class,()->{oAuth2FeignRequestInterceptor.getToken()});	0	1	76.48706388473511
106	1	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2FeignRequestInterceptor);	0	1	76.48706388473511
106	2	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertSame(DefaultOAuth2ClientContext.class,oAuth2FeignRequestInterceptor.getCtx().getClass());	0	1	76.48706388473511
106	3	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNull(oAuth2FeignRequestInterceptor.getCtx().getAccessToken().getRefreshToken());	0	1	76.48706388473511
106	4	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2FeignRequestInterceptor.getToken().getValue());	0	1	76.48706388473511
106	5	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(oAuth2FeignRequestInterceptor.getToken().getScopes().isEmpty());	0	1	76.48706388473511
106	6	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertFalse(oAuth2FeignRequestInterceptor.getToken().isExpired());	0	1	76.48706388473511
106	7	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertEquals(""STR"",oAuth2FeignRequestInterceptor.getToken().getTokenType());"	0	1	76.48706388473511
106	8	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertFalse(oAuth2FeignRequestInterceptor.getCtx().getAccessToken().getScope().isEmpty());	0	1	76.48706388473511
106	9	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertEquals(oAuth2FeignRequestInterceptor.getToken().getValue(),oAuth2FeignRequestInterceptor.getCtx().getAccessToken().getValue());	0	1	76.48706388473511
107	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNull(mockedToken);	0	1	47.916733741760254
107	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertFalse(tokenRequest==null);	0	1	47.916733741760254
107	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(existingToken==oAuth2ClientContext.getAccessToken());	0	1	47.916733741760254
107	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(tokenRequest!=null);	0	1	47.916733741760254
107	4	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	0	1	47.916733741760254
107	5	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertEquals(obtainableAccessToken.getValue(),oAuth2ClientContext.getAccessToken().getValue());	0	1	47.916733741760254
107	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertTrue(obtainableAccessToken.getValue()!=null);	0	1	47.916733741760254
107	7	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotEquals(null,obtainableAccessToken);	0	1	47.916733741760254
107	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotEquals(existingToken,obtainableAccessToken);	0	1	47.916733741760254
107	9	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	"assertEquals(""STR"",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());"	assertNotNull(accessTokenProvider.obtainAccessToken(resource,tokenRequest));	0	1	47.916733741760254
108	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	"assertTrue(""STR"");"	0	1	50.888861894607544
108	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(header,template.headers().get(0));	0	1	50.888861894607544
108	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertSame(requestTemplate.method(),HttpMethod.GET);	0	1	50.888861894607544
108	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertTrue(requestTemplate.headers()instanceofMap);	0	1	50.888861894607544
108	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertEquals(1,headers.size());	0	1	50.888861894607544
108	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertArrayEquals(newString[]{header},template.headers().toArray());	0	1	50.888861894607544
108	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertTrue(requestTemplate.headers().keySet().stream().allMatch(k->k!=null));	0	1	50.888861894607544
108	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertTrue(requestTemplate.headers().values().stream().allMatch(v->v!=null));	0	1	50.888861894607544
108	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertFalse(requestTemplate.bodyTemplate().length()>0);	0	1	50.888861894607544
108	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeaderOnlyOnce	"assertTrue(""STR"",headers.containsKey(""STR""));"	assertFalse(headers.isEmpty());	0	1	50.888861894607544
109	0	spring-cloud/spring-cloud-security	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertTrue(isOauth2Route(ctx));	0	1	19.65984606742859
109	1	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertNotNull(details);	0	1	19.65984606742859
109	2	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertNotNull(auth.getDetails());	0	1	19.65984606742859
109	3	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertNotNull(auth);	0	1	19.65984606742859
109	4	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertNotNull(oauth.getTokenValue());	0	1	19.65984606742859
109	5	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	"assertNotEquals(""STR"",""STR"");"	0	1	19.65984606742859
109	6	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	"assertEquals(""STR"",""STR"");"	0	1	19.65984606742859
109	7	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertNull(auth.getPrincipal());	0	1	19.65984606742859
109	8	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertFalse(isOauth2Route(null));	0	1	19.65984606742859
109	9	/	OAuth2TokenRelayFilterTests	emptyContextNoFilter	assertThat(RequestContext.getCurrentContext()).isNotNull();	assertTrue(!auth.isAuthenticated());	0	1	19.65984606742859
156	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focalObject.getName());"	0	1	31.122047901153564
156	1	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotEquals(null,focalObject.getName());	0	1	31.122047901153564
156	2	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotNull(focalObject.getName());	0	1	31.122047901153564
156	3	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotSame(""STR"",focalObject.getName());"	0	1	31.122047901153564
156	4	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertFalse(focalObject.getName().isEmpty());	0	1	31.122047901153564
156	5	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(focalObject.getName()instanceofString);	0	1	31.122047901153564
156	6	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertTrue(focalObject.getName().length()>0);	0	1	31.122047901153564
156	7	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focalObject.getName().toUpperCase());"	0	1	31.122047901153564
156	8	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focalObject.getName().replace('_',''));"	0	1	31.122047901153564
156	9	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotEquals(""STR"",focalObject.getName());"	0	1	31.122047901153564
157	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertNotNull(<FOCAL>.getBuildNumber());	0	1	35.42432403564453
157	1	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertEquals(<EXPECTED_VALUE>,<FOCAL>.getBuildNumber());	0	1	35.42432403564453
157	2	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertNotEquals(<EXPECTED_BUILD_NUMBER>,<FOCAL>.getBuildNumber());	0	1	35.42432403564453
157	3	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertFalse(<FOCAL>.getBuildNumber().isEmpty());	0	1	35.42432403564453
157	4	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertTrue(<FOCAL>.getBuildNumber().contains(<EXPECTED_SUBSTRING>));	0	1	35.42432403564453
157	5	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertTrue(<FOCAL>.getBuildNumber()instanceof<EXPECTED_INSTANCE>);	0	1	35.42432403564453
157	6	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertNotEquals(<EXPECTED_OBJ>,<FOCAL>.getBuildNumber());	0	1	35.42432403564453
157	7	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertFalse(<FOCAL>.getBuildNumber()==Boolean.TRUE);	0	1	35.42432403564453
157	8	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertNotEquals(<EXPECTED_LONG_VALUE>,<FOCAL>.getBuildNumber());	0	1	35.42432403564453
157	9	/	AppveyorTest	testGetBuildNumber	"assertEquals(""STR"",newAppveyor(env()).getBuildNumber());"	assertFalse(<FOCAL>.getBuildNumber()==Boolean.FALSE);	0	1	35.42432403564453
158	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(getBuildUrl(),""STR"");"	0	1	50.27252721786499
158	1	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	assertNotNull(getBuildUrl());	0	1	50.27252721786499
158	2	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	assertFalse(getBuildUrl().isEmpty());	0	1	50.27252721786499
158	3	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	assertThat(getBuildUrl(),is(not(emptyString())));	0	1	50.27252721786499
158	4	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	assertThat(getBuildUrl(),is(not(nullValue()))));	0	1	50.27252721786499
158	5	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertNotEquals(getBuildUrl(),""STR"");"	0	1	50.27252721786499
158	6	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	assertArrayEquals(newbyte[]{0,1,2},newbyte[]{0,1,2});	0	1	50.27252721786499
158	7	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	1	1	50.27252721786499
158	8	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertNotEquals(""STR"",getBuildUrl());"	0	1	50.27252721786499
158	9	/	AppveyorTest	testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertThat(getBuildUrl(),""STR"");"	0	1	50.27252721786499
159	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	1	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	2	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertNotEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	3	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertNotEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	4	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertNotEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	5	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertNotEquals(""STR"",getBranch());"	0	1	31.216350317001343
159	6	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertEquals(""STR"",""STR"");"	0	1	31.216350317001343
159	7	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	assertEquals(5,getBranch().length());	0	1	31.216350317001343
159	8	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	"assertEquals(""STR"",getBranch().toLowerCase());"	0	1	31.216350317001343
159	9	/	AppveyorTest	testGetBranch	"assertEquals(""STR"",newAppveyor(env()).getBranch());"	assertNotNull(getBranch());	0	1	31.216350317001343
160	0	trautonen/coveralls-maven-plugin	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	1	1	25.89792013168335
160	1	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertEquals(expectedString,actualString);	0	1	25.89792013168335
160	2	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertEquals(expectedValue,actualValue);	0	1	25.89792013168335
160	3	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertEquals(expectedArray,actualArray);	0	1	25.89792013168335
160	4	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertTrue(condition);	0	1	25.89792013168335
160	5	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertTrue(booleanVariable);	0	1	25.89792013168335
160	6	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertFalse(condition);	0	1	25.89792013168335
160	7	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertFalse(booleanVariable);	0	1	25.89792013168335
160	8	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertNotNull(object);	0	1	25.89792013168335
160	9	/	AppveyorTest	testPullRequest	"assertEquals(""STR"",newAppveyor(env()).getPullRequest());"	assertNull(object);	0	1	25.89792013168335
200	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	assertNotNull(<FOCAL>.getBranch());	0	1	67.26834917068481
200	1	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	"assertEquals(""STR"",newShippable(env()).getBranch());"	1	1	67.26834917068481
200	2	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	"assertNotEquals(""STR"",<FOCAL>.getBranch());"	0	1	67.26834917068481
200	3	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	assertTrue(!<FOCAL>.getBranch().isEmpty());	0	1	67.26834917068481
200	4	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	assertFalse(<FOCAL>.getBranch().isEmpty());	0	1	67.26834917068481
200	5	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	"assertNotSame(""STR"",null,<FOCAL>.getBranch());"	0	1	67.26834917068481
200	6	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	assertSame(<FOCAL>.getBranch(),<FOCAL>.getBranch());	0	1	67.26834917068481
200	7	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	"assertArrayEquals(""STR"",newString[]{<FOCAL>.getBranch());"	0	1	67.26834917068481
200	8	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	assertNotEquals(3,<FOCAL>.getBranch().length());	0	1	67.26834917068481
200	9	/	ShippableTest	testGetBranch	"assertEquals(""STR"",newShippable(env()).getBranch());"	"assertTrue(""STR"");"	0	1	67.26834917068481
287	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(tempClass);	0	1	57.64515709877014
287	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	1	1	57.64515709877014
287	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertTrue(""STR"");"	0	1	57.64515709877014
287	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(targetDir.equals(outputDirectory));	0	1	57.64515709877014
287	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotSame(serverDirectory,outputDirectory);	0	1	57.64515709877014
287	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotSame(targetDir,outputDirectory.getParentFile());	0	1	57.64515709877014
287	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(util.isWindows());	0	1	57.64515709877014
287	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(outputDirectory.mkdir());	0	1	57.64515709877014
287	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(outputDirectory.isHidden());	0	1	57.64515709877014
287	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(configDirectory.list());	0	1	57.64515709877014
311	0	PeterisP/morphology	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0	1	30.60975694656372
311	1	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0	1	30.60975694656372
311	2	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.get(0).isEmpty());	0	1	30.60975694656372
311	3	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>0);	0	1	30.60975694656372
311	4	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1	1	30.60975694656372
311	5	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	"assertEquals(0,""STR"");"	0	1	30.60975694656372
311	6	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	"assertEquals(1,""STR"");"	0	1	30.60975694656372
311	7	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	"assertEquals(2,""STR"");"	0	1	30.60975694656372
311	8	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(locītājs.getWordCount(null)>0);	0	1	30.60975694656372
311	9	/	TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(locītājs.getLanguage().isEmpty());	0	1	30.60975694656372
332	0	PeterisP/morphology	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertTrue(turiene.isRecognized());	1	1	137.13882184028625
332	1	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	137.13882184028625
332	2	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertTrue(locītājsinstanceofAnalyzer);	0	1	137.13882184028625
332	3	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertFalse(locītājs.isCaseSensitive());	0	1	137.13882184028625
332	4	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertFalse(locītājs.isForcedMixedCase());	0	1	137.13882184028625
332	5	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertSame(locītājs,Analyzer.getSharedInstance());	0	1	137.13882184028625
332	6	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertTrue(locītājs.isActivatedWithValidLicense());	0	1	137.13882184028625
332	7	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertNull(locītājs.getLicenseExpirationDate());	0	1	137.13882184028625
332	8	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	assertFalse(locītājs.isRunningUnderIDE());	0	1	137.13882184028625
332	9	/	MorphologyTest	ticket9	assertTrue(turiene.isRecognized());	"assertTrue(""STR"");"	0	1	137.13882184028625
349	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	40.32425808906555
349	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(!locītājs.isRecognized());	0	1	40.32425808906555
349	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(1,locītājs.getNumOfWords());	0	1	40.32425808906555
349	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	"assertEquals(""STR"",jāmāk.getText());"	0	1	40.32425808906555
349	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	0	1	40.32425808906555
349	5	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(jāmāk,locītājs.getWordform(jāmāk));	0	1	40.32425808906555
349	6	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	"assertEquals(""STR"",locītājs.getBaseForm(jāmāk));"	0	1	40.32425808906555
349	7	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(locītājs.isInitialized());	0	1	40.32425808906555
349	8	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.hasWord(jāmāk));	0	1	40.32425808906555
349	9	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(locītājs.getMaxCacheSize()>=0);	0	1	40.32425808906555
