TestID	OracleID	Project	ClassName#TestName	TrueOracle	GenOracle	Correct
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(actual,expected);	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
0	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(newOIntentMassiveInsert(),db.getActiveIntent());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	"assertTrue(""STR"",db.getActiveIntent()instanceofOIntentMassiveInsert);"	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntent.MATRIX,db.getActiveIntent());	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntentMassiveInsert.class,db.getActiveIntent().getClass()){returnOIntentMassiveInsert.class;}};	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	"assertEquals(""STR"",db.getActiveIntent().toString());"	0
1	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	OIntentexpected=newOIntentMassiveInsert();	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	1
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThat(test.get(24),is(11));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(12,test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThat(test.get(24),equalTo(11));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(10,test.get(24));	0
2	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(24,test.get(24));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(kindAndName));	1
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.equals(kindAndName));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	"KindAndNamesixthKindAndName=newKindAndName(""STR"",""STR"");"	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(kindAndName));	1
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertThat(kindAndName.equals(kindAndName),is(true));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertThat(kindAndName.equals(kindAndName),is(false));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(secondKindAndName));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertThat(kindAndName,equalTo(kindAndName));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.equals(kindAndName));	0
3	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(true,kindAndName.equals(kindAndName));	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	1
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	1
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertThat(storedVar,equalTo(var));	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertThat(storedVar,is(var));	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	"System.out.println(""STR""+var+""STR""+storedVar);"	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertThat(var,is(storedVar));	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	assertThat(storedVar).isEqualTo(var);	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	"System.out.println(""STR""+storedVar);"	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	"System.out.println(""STR""+var);"	0
4	10	orientechnologies_orientdb	OByteBufferUtilsTest#testSplitShort	assertEquals(storedVar,var);	buffer1.position(9);	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(""STR"");"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,is(""STR""));"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,is(equalTo(""STR"")));"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,equalTo(""STR""));"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,""STR""));"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertTrue(url.contains(""STR""));"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,""STR"")+""STR"");"	0
5	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualToIgnoringCase(""STR"");"	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(2,qResult.size());	1
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(1,qResult.size());	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(3,qResult.size());	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(2,qResult.size());	1
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertThat(qResult.size(),is(2));	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertThat(qResult.size(),is(3));	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertThat(qResult).hasSize(2);	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	0
6	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>1);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo(intraMode,decoder,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfomodeInfo=newModeInfo(intraMode,decoder,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfomode=newModeInfo(intraMode,decoder,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo(intraMode);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo(decoder,intraMode,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	modeInfo(intraMode,decoder,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo(0,decoder,c);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfomodeInfo=newModeInfo(intraMode);	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo();	0
7	10	jcodec_jcodec	ModeInfoTest#testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	ModeInfoinfo=newModeInfo(1,decoder,c);	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	util.cleanUpServerEnv();	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes());"	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	serverEnvBak.delete();	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"serverEnvBak=newFile(serverDirectory,""STR"");"	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	Files.delete(serverEnvBak.toPath());	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes(StandardCharsets.US_ASCII));"	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	Files.delete(serverEnvBak.toPath(),StandardCopyOption.REPLACE_EXISTING);	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"System.out.println(""STR""+serverEnv);"	0
8	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	serverEnvBak.deleteOnExit();	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	filter.decide(evt);	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	FilterReplyreply=filter.decide(evt);	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.NEUTRAL));	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.DENY));	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	finalFilterReplyreply=filter.decide(evt);	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	0
9	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	FilterReplyresult=filter.decide(evt);	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	1
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertThat(keyIndexDefinition.getParamCount(),is(1));	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	1
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertThat(keyIndexDefinition.getParamCount(),equalTo(1));	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()==1);	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(2,keyIndexDefinition.getParamCount());	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.STRING);	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.INTEGER,OType.STRING);	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.STRING,OType.INTEGER);	0
10	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertThat(keyIndexDefinition.getParamCount(),is(2));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
11	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedResult));	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(1,result.size());	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(1,result.size());	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertThat(result).hasSize(1);	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""),toMap(""STR"",""STR""))));"	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""),toMap(""STR"",""STR"",""STR""))));"	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
12	10	hazelcast_hazelcast-simulator	WorkerQueryTest#workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""),toMap(""STR"",""STR"",""STR""))));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(1.23d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.0d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.5d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(1.23));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(0.0001d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(0.01d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",GBP_STR_PER100.convert(100.0d));"	0
13	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",GBP_STR_PER100.convert(100.5d));"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,equalTo(Verb.VOID));	0
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertNotNull(actual);	1
14	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.VOID)));	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	"cm.add(conn,""STR"");"	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(1);	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	intcount=cm.count(poolKey);	0
15	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(2);	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
16	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveAllQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(""STR"",grouped.get(0).toString());"	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(Arrays.asList(""STR"",""STR""),grouped.keySet());"	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(""STR"",grouped.get(1).toString());"	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(2,grouped.size());	1
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(Arrays.asList(""STR"",""STR"",""STR""),grouped.keySet());"	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,grouped.size());	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(grouped.isEmpty());	0
17	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	ClassPathLoaderloader=newClassPathLoader(base);	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	finalClassPathLoaderloader=newClassPathLoader(base);	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"ClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"");"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",0),is(nullValue()));"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",-1L),is(nullValue()));"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"finalClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",0L),is(nullValue()));"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",-1),is(nullValue()));"	0
18	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",1L),is(nullValue()));"	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypesEvent.class)));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypesEvent.class)));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypes.class)));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypes.class)));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event).isNotNull();	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(instanceOf(MessageTypes.class))));	0
19	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(true));	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(false));	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(false));	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(true));	0
20	10	arnohaase_a-foundation	ADiGraphTest#testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.unset(""STR"");"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.unset(""STR"",null);"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	1
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(false));"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.set(""STR"",null);"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(true));"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(false));"	0
21	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.put(""STR"",null);"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.MAP));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.MAP));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertThat(config.get(Configs.Key.MAP),is(""STR""));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.PATH));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.PATH));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.CONFIG));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.CONFIG));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.NAME));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.CONFIG_PATH));"	0
22	10	fabric8io_fabric8-maven-plugin	EnricherConfigTest#simple	"assertEquals(""STR"",config.get(Config.type));"	"assertEquals(""STR"",config.get(Configs.Key.CONFIG_NAME));"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
23	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(2,res.size());	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(1,res.size());	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(1);	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertThat(res,hasItem(""STR""));"	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(3,res.size());	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(2);	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res,hasItem(1));	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res.size(),is(1));	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
24	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.size()>0);	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ce��u.isRecognized());	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ce��u.isRecognized());	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertThat(ce��u.isRecognized(),is(true));	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertThat(ce��u.isRecognized(),equalTo(true));	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	"assertTrue(""STR"",ce��u.isRecognized());"	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertThat(ce��u.isRecognized(),equalTo(false));	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ce��u.isRecognized());	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertThat(ce��u.isRecognized(),is(false));	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ce��u.isRecognized());	0
25	10	PeterisP_morphology	MorphologyTest#ceļu	assertTrue(ceļu.isRecognized());	"assertFalse(""STR"",ce��u.isRecognized());"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoader(base);	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	finalClassPathLoaderloader=newClassPathLoader(base);	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"");"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"finalClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"finalClassPathLoaderloader=newClassPathLoader(""STR"");"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"",base);"	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloaders=newClassPathLoader(base);	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoader();	0
26	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoaderImpl(base);	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertThat(registry.agentCount(),is(0));	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertThat(registry.agentCount(),equalTo(0));	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	1
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	1
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()==0);	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()==0);	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry.agentCount());	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertThat(registry.agentCount(),is(1));	0
27	10	hazelcast_hazelcast-simulator	SimulatorUtilsTest#testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(1,registry.agentCount());	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertThat(poller.getObjectQueryPreparer()).isEqualTo(this.mockObjectQueryPreparer);	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerresult=poller.getObjectQueryPreparer();	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerexpected=Mockito.mock(ObjectQueryPreparer.class);	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertThat(poller.getObjectQueryPreparer()).isSameAs(this.mockObjectQueryPreparer);	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerexpectedObjectQueryPreparer=Mockito.mock(ObjectQueryPreparer.class);	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=poller.getObjectQueryPreparer();	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPrepareractual=poller.getObjectQueryPreparer();	0
28	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	this.poller.getObjectQueryPreparer();	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaWithLoader.class));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaFactory.class));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory).isNotNull();	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchema.class));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchemaWithLoader.class)));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaWithLoaderFactory.class));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchemaFactory.class)));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory).isInstanceOf(JsonSchemaWithLoader.class);	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchema.class)));	0
29	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(notNullValue()));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	"registry.addAgent(""STR"",""STR"");"	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	registry.save();	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertEquals(1,registry.agentCount());	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),equalTo(1));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),is(2));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),is(1));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),equalTo(2));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),equalTo(3));	0
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	1
30	10	hazelcast_hazelcast-simulator	AgentsFileTest#testSave	assertEquals(2,registry.agentCount());	assertThat(registry.agentCount(),is(3));	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
31	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testProperURLEncodingWithBackSlash	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),empty());	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasSize(0));	0
32	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasItem(null));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(1);	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey),equalTo(1));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey),is(1));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
33	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)==1);	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertThat(actual,is(expected));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
34	10	adlnet_jxapi	SubStatementTest#testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,IndexHandler.class);"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,NotImplementedHandler.class);"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setRouter(routerNanoHttpd);	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,indexHandler);"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertEquals(""STR"",routerNanoHttpd.toString());"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",1,IndexHandler.class);"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setHandler(notFoundHandler);	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,newIndexHandler());"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,notImplementedHandler.getClass());"	0
35	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setNotImplemented(notFoundHandler);	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,is(""STR""));"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString).isEqualTo(""STR"");"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.contains(""STR""));"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,equalTo(""STR""));"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.contains(""STR""));"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString.trim());"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,containsString(""STR""));"	0
36	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"",""STR"")));"	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"")));"	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(1);	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(1));	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(2);	0
37	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(2));	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>refs=manager.getNewRecords();	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>references=manager.getNewRecords();	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>records=manager.getNewRecords();	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	manager.getNewRecords().add(doc2);	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	0
38	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	verify(factory).registerExtractor(OETLStubRandomExtractor.class);	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class);	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLStubRandomExtractor.class);	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLRandomExtractor.class);	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	"assertThat(result,is(equalTo(""STR"")));"	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	assertThat(result,is(notNullValue()));	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	assertEquals(1,transformers.size());	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	"verify(reader).readValue(""STR"",OETLProcessor.class);"	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	"verify(reader).readValue(""STR"",OETLFieldTransformer.class);"	0
39	10	orientechnologies_orientdb	OETLFieldTransformerTest#testExpression	assertEquals(1,getResult().size());	verify(factory).registerExtractor(OETLRandomExtractor.class);	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes());"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetResource.toPath(),""STR"".getBytes());"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetDir.toPath(),""STR"".getBytes());"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"files.write(targetFile.toPath(),""STR"".getBytes());"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.US_ASCII));"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(UTF_8));"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.copy(targetFile.toPath(),""STR"".getBytes());"	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),src.getBytes(StandardCharsets.UTF_8));	0
40	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(true));"	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	Profile	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	List<Profile>profiles=ProfileUtil.fromYaml(is);	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2ary	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	ProfilerofileDUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2DUP_X2	0
41	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#multiple	assertNotNull(is);	Profile	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"booleanremoved=handler.hasInitContainer(builder,""STR"");"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	1
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(false));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(false));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"builder.withNewMetadata().withName(""STR"").endMetadata();"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(true));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"builder.withInitContainers(Arrays.asList(""STR"",""STR""));"	0
42	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"handler.addInitContainer(builder,""STR"");"	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
43	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.OK));	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(Status.OK));	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.SUCCESS));	0
44	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackListlist=newTrackList();	0
45	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
46	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	Shippable	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
47	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	Shippable	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(-1));	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),equalTo(-1));	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),equalTo(0));	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(0));	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(1,p.getBlankIndex());	0
48	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==0);	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',1));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',-1));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',2));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',1);	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',3));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('A',1));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',2);	0
49	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',5));"	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(true));	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(true));	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	"assertTrue(""STR"",v��rds.isRecognized());"	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(false));	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(false));	0
50	10	PeterisP_morphology	MorphologyTest#gunta19dec_3	assertTrue(vārds.isRecognized());	"assertFalse(""STR"",v��rds.isRecognized());"	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(8080,simulatorProperties.getCoordinatorPort());	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),equalTo(8080));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),is(8080));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),is(0));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),is(9090));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),is(123));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),is(8888));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(8080,simulatorProperties.getCoordinatorPort());	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),equalTo(8888));	0
51	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertThat(simulatorProperties.getCoordinatorPort(),equalTo(9090));	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerA_lh2=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB0=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"loggerB0=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA_lh0);	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"",""STR"",123);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA_lh0);	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerA_lh2=loggerFactory.getLogger(""STR"",""STR"",123);"	0
52	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"");"	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause.getMessage(),exception.getMessage());	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),is(""STR""));"	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause.getMessage(),exception.getMessage());	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),equalTo(""STR""));"	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause,exception.getCause());	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),containsString(""STR""));"	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0
53	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_withException	"assertEquals(""STR"",exception.getMessage());"	assertThat(exception.getMessage(),equalTo(cause.getMessage()));	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),hasItem(""STR"",text(""STR"")));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(style().tapered(),hasItem(""STR"",""STR""));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),hasItem(""STR"",""STR""));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),hasItem(""STR"",newText(""STR"")));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(style().tapered(),hasItem(""STR"",text(""STR"")));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(style(""STR"").tapered(),hasItem(""STR"",""STR""));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),hasItem(""STR"",equalTo(""STR"")));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
54	10	nidi3_graphviz-java	StyleTest#tapered	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",5.0),attr(""STR"",""STR"")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));"	"assertThat(Style.tapered(),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
55	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass();	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classLinked);	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	OClasslinked=prop.getLinkedClass();	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass(classLinked);	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"prop.setLinkedClass(""STR"");"	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(null);	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.getLinkedClass();	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.addLinkedClass(classLinked);	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	db.drop();	0
56	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classA);	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.BAD,response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.OK));	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
57	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g,equalTo(graph));	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g).isSameAs(graph);	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,g.size());	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	g=factory.getTx();	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g).isNotNull();	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g,is(graph));	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g,instanceOf(OrientGraphImpl.class));	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	g.close();	0
58	10	orientechnologies_orientdb	OrientGraphFactoryTest#createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertThat(g,instanceOf(OrientGraph.class));	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
59	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray3	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR"",result);"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"report(""STR"",exceptionFile);"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"report(""STR"",newRuntimeException(""STR""));"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"report(""STR"",newRuntimeException(exceptionFile));"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists(),exceptionFile.exists());	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.exists(),is(true));	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"report(exceptionFile,newRuntimeException(""STR""));"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.exists());	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"report(""STR"",newIOException(exceptionFile));"	0
60	10	hazelcast_hazelcast-simulator	ExceptionReporterTest#testReport	assertTrue(exceptionFile.exists());	"ExceptionReporter.report(""STR"",exceptionFile);"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha1=WARCRecordFormat.getDigestSha1(content);	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(content));"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(content));"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR""+sha1str,WARCRecordFormat.getDigestSha1(content));"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(content);	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	StringdigestSha1=WARCRecordFormat.getDigestSha1(content);	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha2str=WARCRecordFormat.getDigestSha1(content);	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));"	0
61	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8));	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",newArrayList<Object>()->{
});"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",parentArray);"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",data);"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(""STR"",doc.field(""STR"").value);"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(""STR"",doc.field(""STR"").toString());"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"assertEquals(""STR"",doc.get(""STR"").toString());"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",Arrays.asList(3));"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",newArrayList<String>()->{
});"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",Arrays.asList(object4));"	0
62	10	orientechnologies_orientdb	ODocumentTest#testSetFieldAtListIndex	"assertEquals(doc.field(""STR""),""STR"");"	"doc.field(""STR"",1);"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret,is(""STR""));"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret).isEqualTo(""STR"");"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret,equalTo(""STR""));"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret.trim());"	0
63	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_SYNC	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	assertNotNull(ret);	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(1,fields.size());	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(2,fields.size());	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.containsKey(""STR""),is(true));"	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	1
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertThat(fields).hasSize(1);	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),equalTo(""STR""));"	0
64	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields,hasItem(""STR""));"	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(2,tokens.size());	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(1,tokens.size());	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertTrue(tokens.contains(""STR""));"	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertThat(tokens,hasItem(""STR""));"	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertTrue(tokens.contains(""STR""));"	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()>0);	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokens.isEmpty());	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()==2);	0
65	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()==1);	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(0,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(500,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	1
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(InvalidHandshakeException.CLOSE_CODE,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(1,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(0,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(400,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotNull(invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(4,invalidHandshakeException.getCloseCode());	0
66	10	TooTallNate_Java-WebSocket	InvalidHandshakeExceptionTest#testConstructor	assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(5,invalidHandshakeException.getCloseCode());	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	Stringnow2=format.format(newDate());	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))<0);"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertEquals(-1,comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now)));"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertEquals(0,comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now)));"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"intcompare=comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now));"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))>0);"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))==0);"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"Stringnow2=format.format(""STR"");"	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(-1,comparator.compare(OType.DATETIME,now));	0
67	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(comparator.compare(OType.DATETIME,now)<0);	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertEquals(""STR"",cookie.getHTTPHeader());"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertEquals(""STR"",cookie.getHTTPHeader());"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	assertEquals(randomExpirationTime,cookie.getHTTPHeader());	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertThat(cookie.getHTTPHeader(),is(""STR""));"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertEquals(randomExpirationTime+""STR"",cookie.getHTTPHeader());"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertTrue(cookie.getHTTPHeader().contains(""STR""));"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	assertEquals(randomExpirationTime,cookie.getHTTPHeader());	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertThat(cookie.getHTTPHeader(),equalTo(""STR""));"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	"assertEquals(cookie.getHTTPHeader(),""STR"");"	0
68	10	NanoHttpd_nanohttpd	CookieTest#testCookieWithExpiresString	assertTrue(cookie.getHTTPHeader().contains(expiresString));	assertEquals(expiresString,cookie.getHTTPHeader());	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertThat(clazz,equalTo(exp));	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertThat(clazz,is(exp));	0
69	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[1]);	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts,is(notNullValue()));	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(1);	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(2);	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertThat(opts.args,hasItem(""STR""));"	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts).hasSize(1);	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
70	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineSimple	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts).isNotNull();	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_34));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23d));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(3.14d));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR_UK_R));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(0.5d));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_33));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RURUKR));"	0
71	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR_UKR));"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.CUSTOM);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc.field(""STR"",String.class,OType.CUSTOM);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",Integer.class,OType.CUSTOM);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.NONE);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",OType.CUSTOM);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",Object.class,OType.CUSTOM);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.UNKNOWN);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.ALL);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.BOOK);"	0
72	10	orientechnologies_orientdb	OJsonWithCustom#testCustomFieldDisabled	"assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.ANY);"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"MapUtil.putIfAbsent(map,""STR"",""STR"");"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertTrue(map.containsKey(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertFalse(map.containsKey(""STR""));"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(map.get(""STR""),""STR"");"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR"")[0]);"	0
73	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testPutIfAbsent	assertEquals(1,map.size());	"assertEquals(""STR"",map.get(""STR"")[0]);"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
74	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR""+""STR"",result);"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(Attributes.of(""STR"",""STR""),Attributes.of(""STR"",""STR"")),hasItem(""STR"",""STR""));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(2));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(2));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(1));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(1));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(Attributes.of(""STR"",""STR"",""STR""),Attributes.of(""STR"",""STR"",""STR"")),hasItem(""STR"",""STR""));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(3));"	0
75	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(3));"	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(l��z��s.isRecognized());	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(l��z��s.isRecognized());	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertThat(l��z��s.isRecognized(),is(true));	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertThat(l��z��s.isRecognized(),equalTo(true));	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(l��z��s.isRecognized());	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertThat(l��z��s.isRecognized(),equalTo(false));	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(l��z��s.isRecognized());	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertThat(l��z��s.isRecognized(),is(false));	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	"assertTrue(""STR"",l��z��s.isRecognized());"	0
76	10	PeterisP_morphology	MorphologyTest#lūzīs	assertTrue(lūzīs.isRecognized());	assertThat(l��z��s,is(true));	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	1
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(0));	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	1
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),equalTo(0));	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),isZero());	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(1,p.getDistanceToGoal());	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(-1,p.getDistanceToGoal());	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	1
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()==0);	0
77	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal()<0,is(0));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a.length);	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,2,3)));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2}));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(a,Seq.array(0,2,3));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,3)));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2,3}));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,2)));	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),5,4);	0
78	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),-1,4);	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	1
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertThat(Seq.join(null,""STR""),equalTo(""STR""));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	1
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertThat(Seq.join(null,""STR""),is(""STR""));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(null,Seq.join(null,""STR""));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,null));"	0
79	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNull(Seq.join(null,""STR""));"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(PERIOD_SEPARATOR,macAddress.toString());	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(""STR""));"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(PERIOD_SEPARATOR+""STR"",macAddress.toString());"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR""+PERIOD_SEPARATOR+""STR"",macAddress.toString());"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR""+PERIOD_SEPARATOR,macAddress.toString());"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(PERIOD_SEPARATOR));	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),equalTo(""STR""));"	0
80	10	fluenda_ParCEFone	MacAddressTest#testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),containsString(PERIOD_SEPARATOR));	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertNotNull(parsed);	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertThat(parsed,is(nullValue()));	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertEquals(null,parsed);	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertThat(parsed).isNull();	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertNull(parsed);	1
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertNull(parsed);	1
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertThat(parsed,nullValue());	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertEquals(null,parsed);	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertNotNull(parsed);	0
81	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseNull	assertNull(parsed);	assertEquals(0,parsed.getTime());	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(ImmutableSet.of(),Collectors.toImmutableSet());	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(1));	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),isEmpty());	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(ImmutableSet.of(),Collectors.toImmutableSet());	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(0));	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(1)));	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(""STR"")));"	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(""STR"",""STR"")));"	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(ImmutableSet.of(1)));	0
82	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),iterates(ImmutableSet.of(""STR"",""STR"")));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Short.toString(Short.MIN_VALUE)));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Short.valueOf(123)));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
83	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3));"	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(0,1);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,1);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,0);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,2);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,1);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(0,2);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,0);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,2);	0
84	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,0);	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==1);	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertThat(panel.getTurtleCount()).isEqualTo(1);	0
85	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,is(notNullValue()));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,instanceOf(NalUnit.class));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,isA(NalUnit.class));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,notNullValue());	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,isA(NALUnit.class));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(actual);	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertNotNull(actual);	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,is(NALUnit.Type.NANO_UNIT));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,is(NALUnit.TYPE_NOU));	0
86	10	jcodec_jcodec	NalUnitTest#testCanWriteNalUnitFromValidNal	assertEquals(3,actual.nal_ref_idc);	assertThat(actual,is(NALUnit.Type.NANOS));	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toByteArray()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toByteArray()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toArray()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.array()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toArray()));"	0
87	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",Util.hexdump(bs.getBytes()));"	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertFalse(matcher.find());	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	booleanfound=matcher.find();	0
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
88	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertEquals(false,matcher.find());	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	cl1.addCl2(newCl2(cl1));	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	Stringjson=ToJSON.toJSON(cl1);	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	1
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
89	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[0]);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR""),""STR"").toArray(newString[0]);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	1
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[1]);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	1
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR""),""STR"").toArray(newString[0]);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[2]);"	0
90	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR""),""STR"").toArray(newString[1]);"	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(false));"	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	matcher.lookingAt();	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(true));"	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),equalTo(false));"	0
91	10	basis-technology-corp_tcl-regex-java	RegressionTest#cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(false));	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(true));	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(true));	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(false));	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(false));	0
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
92	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	Assertions.assertTrue(austrumlatvija.isRecognized());	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception);	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception.getMessage(),is(MESSAGE));	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception).isNotNull();	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception.getMessage()).isEqualTo(MESSAGE);	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exceptioninstanceofValidationException);	0
93	10	trautonen_coveralls-maven-plugin	ValidationExceptionTest#testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exceptioninstanceofValidationException);	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isNotNull();	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass,notNullValue());	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getSimpleName());"	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(Object.class);	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass);"	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass!=null);	0
94	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyTestClass.class);	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	1
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	1
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(""STR""),is(""STR""));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(null));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(null));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",StringEscapeUtils.escapeJava(""STR""));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",StringEscapeUtils.escapeJava(""STR""));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(null),is(""STR""));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(""STR""),equalTo(""STR""));"	0
95	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(CommUtil.escapeJava(""STR""));"	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list.size(),is(2));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list,hasItem(owner1));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list.size(),is(1));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertEquals(2,list.size());	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	1
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertEquals(2,list.size());	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list.size(),equalTo(2));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list.size(),is(3));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertThat(list.size(),equalTo(1));	0
96	10	orientechnologies_orientdb	OCommandExecutorSQLCreateEdgeTest#testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.size()==2);	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(1,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(2,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(3,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(1,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertThat(results.size(),is(1));	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(0,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(2,results.size());	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertThat(results.size(),is(2));	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.size()>0);	0
97	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.size()>1);	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
98	10	PeterisP_morphology	MorphologyTest#plāns_B	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertThat(tail,hasItem(""STR""));"	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertThat(tail,hasItem(""STR"",""STR""));"	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertThat(tail).hasSize(1);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertThat(tail).hasSize(2);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertThat(tail.attrs).hasSize(2);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertThat(tail.attrs).hasSize(1);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	finalAttributes<EndLabel>attributes=attrs(tail);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	assertThat(tail).hasSize(3);	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	finalAttributes<EndLabel>attributes=tail.attrs();	0
99	10	nidi3_graphviz-java	EndLabelTest#attrTail	"assertEquals(attrs(attr(""STR"",tail),attr(""STR"",1d),attr(""STR"",2d)),attrs(tail));"	"assertThat(tail,hasItem(""STR"",newText(""STR"")));"	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	"assertEquals(""STR"",draft_6455.getExtension());"	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertNull(draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(IExtension.NONE,draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(null,draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(Draft_6455.EXTENSION,draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertNull(draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(null,draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(IExtension.NONE,draft_6455.getExtension());	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	"assertEquals(""STR"",draft_6455.getExtension());"	0
100	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetExtension	assertNotNull(draft_6455.getExtension());	IExtensionextension=draft_6455.getExtension();	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<String>()->{
},null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(null,null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(null),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
101	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),null));"	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertThat(actual,is(expected));	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertThat(actual,equalTo(expected));	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertThat(actual,is(equalTo(expected)));	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertThat(actual).isEqualTo(expected);	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	"assertThat(""STR"",actual,is(expected));"	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	"assertThat(""STR"",actual,is(equalTo(expected)));"	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
102	10	adlnet_jxapi	ScoreTest#testSetRaw	assertEquals(expected,actual,0);	assertEquals(actual,expected);	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanProcessorJava.normalize(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanTextProcessor.normalize(""STR""),is(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanProcessorJava.normalize(""STR""),is(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanTextProcessorJava.normalize(""STR""),is(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	1
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanProcessorJava.normalize(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	1
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",openKoreanTextProcessorJava.normalize(""STR""));"	0
103	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",openKoreanProcessorJava.normalize(""STR""));"	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(3,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertNotNull(schemas);	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(0,schemas.size());	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==1);	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==2);	0
104	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertThat(schemas).hasSize(1);	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,equalTo(b));	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,not(equalTo(b)));	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(equalTo(b)));	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(b));	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.equals(b));	0
105	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertTrue(a==b);	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),instanceOf(BaseTest.class));	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	Objectinstance=testContainer.getTestInstance();	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),equalTo(test));	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),is(test));	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),instanceOf(Object.class));	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	"assertEquals(""STR"",testContainer.getTestInstance());"	0
106	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertThat(expected,actual);	0
107	10	adlnet_jxapi	SubStatementTest#testGetVerb	assertNotNull(actual);	assertNotNull(actual);	1
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertEquals(1,qResult.size());	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertEquals(2,qResult.size());	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	1
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertThat(qResult.size(),is(2));	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertThat(qResult.size(),is(1));	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertThat(qResult.size(),is(3));	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()>0);	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()>0);	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertThat(qResult).hasSize(1);	0
108	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testLimit	assertEquals(qResult.size(),3);	assertThat(qResult.size(),equalTo(26));	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.createClass(""STR"");"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property,classA.getProperty(""STR""));"	1
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.createClass(""STR"");"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.createClass(""STR"",OType.STRING);"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	classA.addProperty(property);	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	db.reload();	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.getOrCreateClass(""STR"");"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.createClass(""STR"",OType.STRING);"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"property.setValue(""STR"");"	0
109	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.getOrCreateClass(""STR"");"	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(1,testData.getTestIndex());	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(0,testData.getTestIndex());	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(1,testData.getTestIndex());	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(0,testData.getTestIndex());	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	"assertEquals(""STR"",testData.getTestIndex());"	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),is(1));	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	1
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),equalTo(0));	0
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	1
110	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),is(0));	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNull(this.mockJ4pReadResponse1.getLog());	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.logger,this.mockJ4pReadResponse1.getLog());	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.log,this.mockJ4pReadResponse1.getLog());	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.log,this.getJ4pReadResponse1.getLog());	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=Mockito.mock(Logger.class);	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	"assertTrue(""STR"",this.mockJ4pReadResponse1.getLog()instanceofLogger);"	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=this.mockJ4pReadResponse1.getLog();	0
111	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()instanceofLogger);	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	1
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	1
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertThat(CommUtil.toDBC(""STR""),is(equalTo(""STR"")));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertThat(CommUtil.toDBC(""STR""),equalTo(""STR""));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Strings=CommUtil.toDBC(""STR"");"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""+""STR""));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").contains(""STR""));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").equals(""STR""));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""+""STR""));"	0
112	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Stringresult=CommUtil.toDBC(""STR"");"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(2,cm.count(""STR""));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(1));"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertTrue(cm.count(""STR"")==1);"	0
113	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.get(0).isUnknown());	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.isUnknown());	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isUnknown());	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	List<KoreanTokenizer.KoreanToken>tokens2=OpenKoreanTextProcessorJava.tokenize(text);	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(){@OverridepublicbooleanisUnknown(){returnfalse;}}));	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(){@OverridepublicbooleanisUnknown(){returntrue;}}));	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.isUnknown());	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken()));	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isUnknown());	0
114	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(""STR"")));"	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	1
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	1
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(WebSocketImpl.class));	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl).isNotNull();	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(webSocketAdapter,webSocketImpl);	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(webSocketAdapter,webSocketImpl);	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(CustomWebSocket.class));	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketAdapter,instanceOf(WebSocketImpl.class));	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(DefaultSSLWebSocketAdapter.class));	0
115	10	TooTallNate_Java-WebSocket	DefaultSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,notNullValue());	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsProxyClientclient=newCoverallsProxyClient(""STR"",proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsClientclient=newCoverallsProxyClient(""STR"",proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"newCoverallsProxyClient(""STR"",proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"StringcoverallsUrl=""STR"";"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	CoverallsProxyClientclient=newCoverallsProxyClient(coverallsUrl,proxy);	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"Stringresponse=newCoverallsProxyClient(""STR"",proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsProxyClientclient=newCoverallsProxyClient(""STR""+proxy.getHost(),proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsProxyClientclient=newCoverallsProxyClient(""STR""+proxy.getPort(),proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsProxyClientclient=newCoverallsProxyClient(""STR""+proxy.toString(),proxy);"	0
116	10	trautonen_coveralls-maven-plugin	CoverallsProxyClientTest#testConstructorWithProxy	"assertNotNull(newCoverallsProxyClient(""STR"",proxy));"	"CoverallsProxyClientclient=newCoverallsProxyClient(""STR""+""STR"",proxy);"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertThat(CloudProviderUtils.isLocal(""STR""),is(false));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertTrue(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertThat(CloudProviderUtils.isLocal(""STR""),is(true));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertFalse(CloudProviderUtils.isLocal(""STR""));"	0
117	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	"assertThat(CloudProviderUtils.isLocal(""STR""),equalTo(false));"	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updatedRecords=manager.getNewRecords();	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	1
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updated=manager.getNewRecords();	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updateRecords=manager.getNewRecords();	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc1));	0
118	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==1);	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR"")==false);"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR"")==true);"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	Objectobject=newTestObject();	0
119	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_shortWithUnderscore	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(5,SeekHeadFactory.estimeteSeekSize(3,4));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(10,SeekHeadFactory.estimeteSeekSize(3,4));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,1));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,5));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(3,SeekHeadFactory.estimeteSeekSize(3,4));	0
120	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,6));	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertEquals(1,profiles.size());	1
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	"assertThat(profiles,hasItem(newProfile(""STR"",""STR"")));"	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertEquals(1,profiles.size());	1
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertEquals(2,profiles.size());	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertThat(profiles).hasSize(1);	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertThat(profiles).hasSize(2);	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertThat(profiles,hasItem(Profile.class));	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.size()>0);	0
121	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#fromClasspath	assertEquals(1,profiles.size());	assertThat(profiles).hasSize(3);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	workerProcessManager.updateLastSeenTimestamp(workerAddress2);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen,secondLastSeen);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	workerProcessManager.updateLastSeenTimestamp(workerAddress1);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen+1,secondLastSeen);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen,secondLastSeen);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertThat(firstLastSeen).isEqualTo(secondLastSeen);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertThat(firstLastSeen,is(equalTo(secondLastSeen)));	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen+1,secondLastSeen);	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	longthirdLastSeen=workerProcess1.getLastSeen();	0
122	10	hazelcast_hazelcast-simulator	WorkerProcessManagerTest#testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertThat(firstLastSeen).isEqualTo(secondLastSeen-1);	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,is(expected));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(expected,actual,is(equalTo(expected)));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
123	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute();"	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	ORecordrecord=newORecord();	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"db.command(newOCommandSQL(""STR"",""STR"")).execute();"	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	ORecordo=newORecord();	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	ORecordobj=newORecord();	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	ODatabaseRecorddb=getDatabase();	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	ODatabaseRecorddatabase=getDatabase();	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute(1);"	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"db.command(newOCommandSQL(""STR"")).executeQuery(""STR"");"	0
124	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testManager	"assertEquals(""STR"",getManager(""STR"").field(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute(null);"	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(3,schemas.size());	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas).hasSize(1);	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(2));	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()==2);	0
125	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(1));	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringHelper.bytesToHexString(null));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(StringHelper.bytesToHexString(null));	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringHelper.bytesToHexString(null));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringHelper.bytesToHexString(newbyte[0]));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertThat(StringHelper.bytesToHexString(null),is(""STR""));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringHelper.bytesToHexString(newbyte[0]));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(StringHelper.bytesToHexString(null));	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringHelper.bytesToHexString(newbyte[]{0}));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	"assertEquals(""STR"",StringUtils.bytesToHexString(null));"	0
126	10	arnohaase_a-foundation	StringHelperTest#testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	byte[]bytes=null;	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(true));	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(false));	0
127	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	System.clearProperty(RpcConfigs.CONNECTION_NUM_KEY);	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=simulatorProperties.get(""STR"",""STR"");"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	1
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	1
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringresult=simulatorProperties.get(""STR"",""STR"");"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=this.simulatorProperties.get(""STR"",""STR"");"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),is(equalTo(""STR"")));"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),is(""STR""));"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),equalTo(""STR""));"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",this.simulatorProperties.get(""STR"",""STR""));"	0
128	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=SimulatorProperties.get(""STR"",""STR"");"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.14f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.14f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"booleanresult=PropertyBindingSupport.bind0(testObject,""STR"",3.14f);"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.5f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1.23f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.6f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Float.NaN));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.5f));"	0
129	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Float	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Float.valueOf(3.14f)));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"cookies.add(newCookie(""STR"",""STR"",30));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertThat(cookies.get(""STR""),is(equalTo(newCookie(""STR"",""STR"",30))));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertThat(cookies).hasSize(1);	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertThat(cookies.get(""STR""),is(newCookie(""STR"",""STR"",30)));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals(1,cookies.size());	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"Cookiecookie=cookies.get(""STR"");"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertThat(cookies.get(""STR""),is(notNullValue()));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(cookies);	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	"assertThat(cookies,hasItem(""STR""));"	0
130	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertThat(cookies).hasSize(2);	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','a','n'},res));"	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'t','h','e'},res));"	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','h','e'},res));"	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','t','a','n'},res));	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','h','e'},res);	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','t','a','n'},res);	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','h','e'},res));	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','a','n'},res));"	0
131	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','h','e'},res));"	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isTrue();"	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(1);	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(1);"	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(2);"	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(2);	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(1);	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(2);	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isFalse();"	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.containsKey(header)).isTrue();	0
132	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(3);"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	assertEquals(1,fields.length);	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	assertEquals(2,fields.length);	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	assertEquals(1,fields.length);	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertThat(fields,hasItem(""STR""));"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertThat(fields,containsInAnyOrder(""STR"",""STR""));"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertThat(fields,is(equalTo(newString[]{""STR"",""STR""})));"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertEquals(""STR"",fields[0]);"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertThat(fields,is(equalTo(newString[]{""STR""})));"	0
133	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testFieldNamesRaw	assertNotNull(fields);	"assertThat(fields,containsInAnyOrder(""STR""));"	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	filter.decide(evt);	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyreply=filter.decide(evt);	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.NEUTRAL));	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	finalFilterReplyreply=filter.decide(evt);	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.DENY));	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
134	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyresult=filter.decide(evt);	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
135	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23d));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(3.14d));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_2_34));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(2.5d));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_1_23));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(0.5d));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.5d));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_1_34));"	0
136	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(-1.23d));"	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertThat(actual,equalTo(agent));	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(MBOX,actual);	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	1
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.getId());"	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(expected,actual);	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
137	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(notNullValue()));	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,instanceOf(ObjectQueryInfo.class));	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,notNullValue());	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(nullValue()));	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(ObjectQueryInfo.class,result.getClass());	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(null,result);	0
138	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(true));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"booleanhasInitContainer=handler.hasInitContainer(builder,""STR"");"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(true));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(false));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(false));"	0
139	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#append	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"builder.withNewMetadata().withName(""STR"").endMetadata();"	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(1,qResult.size());	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(2));	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(1));	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(3,qResult.size());	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(3));	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(qResult.size()>0);	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult).hasSize(1);	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),equalTo(2));	0
140	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),equalTo(1));	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertThat(result,is(nullValue()));	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertNull(result);	1
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertThat(result,nullValue());	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertNull(result);	1
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertThat(result).isNull();	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	"assertThat(""STR"",result,is(nullValue()));"	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertNull(result);	1
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertNull(result);	1
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	assertThat(result,is(notNullValue()));	0
141	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testNullParamItem	assertNull(result);	"assertThat(result,is(nullValue(""STR"")));"	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertEquals(""STR"",m.decode(encoded));"	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg,m.decode(encoded));	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringdecoded=m.decode(encoded);	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(encoded,m.decode(encoded));	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(encoded,m.decode(billg));	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringtext=m.decode(encoded);	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringunencoded=m.decode(encoded);	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringt=m.decode(encoded);	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"Stringh=""STR"";"	0
142	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"Stringexpected=""STR"";"	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",newSimulatorAddress(1,2).toString());"	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",newSimulatorAddress(0,1).toString());"	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	finalSimulatorAddressaddress=newSimulatorAddress(1,2);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	"assertEquals(""STR"",newSimulatorAddress(1,0).toString());"	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	finalSimulatorAddressaddress=newSimulatorAddress(0,1);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	finalSimulatorAddressaddress=newSimulatorAddress(1,0);	0
143	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenAgent	"assertEquals(""STR"",agentAddress(5).toString());"	SimulatorAddressaddress=newSimulatorAddress();	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),is(true));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),is(false));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	1
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),equalTo(false));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),equalTo(true));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	1
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertThat(map.containsKey(1),is(true));	0
144	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertThat(map.containsKey(1),is(false));	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(oldTag);	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,is(oldTag));	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	"assertThat(resultedTag).isEqualTo(newTagEvent(""STR"",null,null,null));"	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(latestTag);	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,equalTo(oldTag));	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,instanceOf(TagEvent.class));	0
145	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	"assertEquals(newTagEvent(""STR"",null,null,null),resultedTag);"	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(2,formas.size());	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertThat(formas.size(),is(1));	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertThat(formas.size(),is(2));	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()>1);	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()==2);	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()==1);	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	"assertThat(formas,hasItem(newWordform(""STR"")));"	0
146	10	PeterisP_morphology	MorphologyTest#inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
147	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(1,res.size());	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertThat(res,hasItem(doc));	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(2,res.size());	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	1
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertThat(res.size(),is(1));	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(3,res.size());	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertThat(res.size(),is(0));	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.size()==1);	0
148	10	orientechnologies_orientdb	TestNullFieldQuery#testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.size()==0);	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	1
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	1
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(true));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(false,config.isNull(""STR""));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(false));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(true));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(true,config.isNull(""STR""));"	0
149	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(false));"	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor(0),is(Constants.WHITE));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('a'),is(Constants.WHITE));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor(0));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('0'),is(Constants.WHITE));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor(0));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	cm.okcolors(nfa);	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor('a'));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor('a'));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.NOSUB,cm.getcolor(0));	0
150	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('a'),is(Constants.BLUE));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343,OVarIntSerializer.readAsLong(bytes));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343,OVarIntSerializer.readAsLong(bytes));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertThat(OVarIntSerializer.readAsLong(bytes),is(20432343L));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	longvalue=OVarIntSerializer.readAsLong(bytes);	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343,OIntegerSerializer.readAsLong(bytes));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	longresult=OVarIntSerializer.readAsLong(bytes);	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertThat(OVarIntSerializer.readAsLong(bytes),equalTo(20432343L));	0
151	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	longval=OVarIntSerializer.readAsLong(bytes);	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
152	10	PeterisP_morphology	MorphologyTest#līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	assertEquals(1,flattened.size());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	assertEquals(3,flattened.size());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	assertEquals(1,flattened.size());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	assertEquals(1,flattened.size());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	"assertThat(flattened,hasItem(""STR""));"	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	"assertEquals(Arrays.asList(""STR"",""STR""),flattened);"	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	assertEquals(3,flattened.size());	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	"assertEquals(""STR"",flattened.toString());"	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	"assertEquals(Arrays.asList(""STR"",""STR"",""STR""),flattened);"	0
153	10	arnohaase_a-foundation	ACollectionHelperTest#testFlatten	assertEquals(5,flattened.size());	"assertEquals(""STR"",flattened.toString());"	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	1
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleanisGeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertThat(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir),is(false));	0
154	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangenerated=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(1,treeBucket.size());	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(1,treeBucket.size());	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(2,treeBucket.size());	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(2,treeBucket.size());	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertThat(treeBucket.size(),is(0));	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertThat(treeBucket.size(),is(1));	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>0);	0
155	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>0);	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR""+10,result);"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	"System.out.println(""STR""+result);"	0
156	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test10ReturnsBuzz	"assertEquals(""STR"",result);"	assertEquals(10,result.length());	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	1
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	"assertEquals(""STR"",result.toString());"	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	assertThat(result,instanceOf(JMXServiceURL.class));	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	"assertThat(result).isEqualTo(newJMXServiceURL(""STR""));"	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	"assertThat(result).isSameAs(factory.createJMXServiceUrl(""STR""));"	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	"assertThat(result).isSameAs(newJMXServiceURL(""STR""));"	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	"assertEquals(""STR"",result.toString());"	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	assertThat(result).isInstanceOf(JMXServiceURL.class);	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	assertThat(result).isNotNull();	0
157	10	amlinv_stat-collection-utils	DefaultJmxServiceUrlFactoryTest#testCreateJMXServiceUrl	assertNotNull(result);	assertThat(result,instanceOf(JmxServiceURL.class));	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	1
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	1
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	1
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertTrue(server.existsDatabase(""STR""));"	1
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(server.existsDatabase(""STR""));"	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertThat(server.existsDatabase(""STR""),is(true));"	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(server.existsDatabase(""STR""));"	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertThat(server.existsDatabase(""STR""),equalTo(true));"	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertFalse(server.existsDatabase(""STR""));"	0
158	10	orientechnologies_orientdb	OServerDatabaseOperationsTest#testCreateOpenDatabase	"assertTrue(server.existsDatabase(""STR""));"	"assertThat(server.existsDatabase(""STR""),equalTo(false));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null));"	1
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),is(""STR""));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	assertEquals(null,m.markdown(null));	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null));"	1
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),is(equalTo(""STR"")));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(null,m.markdown(""STR""));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),equalTo(""STR""));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	Stringh=m.markdown(null);	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR""+""STR"",m.markdown(null));"	0
159	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(null));"	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	1
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertEquals(EXTENSION_REGISTERED_NAME,deflateExtension.getProvidedExtensionAsServer());	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(EXTENSION_REGISTERED_NAME+""STR"",deflateExtension.getProvidedExtensionAsServer());"	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR""+EXTENSION_REGISTERED_NAME,deflateExtension.getProvidedExtensionAsServer());"	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR""+EXTENSION_REGISTERED_NAME+""STR"",deflateExtension.getProvidedExtensionAsServer());"	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	1
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertEquals(EXTENSION_REGISTERED_NAME,deflateExtension.getProvidedExtensionAsServer());	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertThat(deflateExtension.getProvidedExtensionAsServer(),is(""STR""));"	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	assertThat(deflateExtension.getProvidedExtensionAsServer(),equalTo(EXTENSION_REGISTERED_NAME));	0
160	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",deflateExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR""+EXTENSION_REGISTERED_NAME+""STR"",deflateExtension.getProProvidedExtensionAsServer());"	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=decoder.readInterIntraMode(miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo(decoder,miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	inti=decoder.readInterIntraMode(miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo(miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	decoder.readInterIntraMode(miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo();	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfomode=newInterModeInfo(decoder,miCol,miRow,blSz,decoder,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo(decoder,miCol,miRow,blSz,c);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo(decoder.readInterIntraMode(miCol,miRow,blSz,decoder,c),false);	0
161	10	jcodec_jcodec	InterModeInfoTest#testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	InterModeInfoinfo=newInterModeInfo(decoder,c);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(tempClass);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(targetDir);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(targetDir,""STR""));"	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(tmpClass);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(src,""STR""));"	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(target,""STR""));"	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(src);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(target);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	this.util.cleanTargetDir(tempClass);	0
162	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	Util.cleanTargetDir(tempClass);	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	assertThat(actual,is(not(nullValue())));	0
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	assertNotNull(actual);	1
163	10	adlnet_jxapi	VerbsTest#testRegistered	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(1.23d));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_2_34));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",GBP_2_34.convert(1.23d));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUS.convert(1.23d));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUHRUS.convert(1.23d));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(1.23));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_1_23));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_1_34));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_2_33));"	0
164	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUS.convert(1.23));"	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	DefaultExtensiondefaultExtension2=newDefaultExtension();	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),equalTo(defaultExtension1.hashCode()));	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(sameInstance(defaultExtension1.hashCode())));	0
165	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),not(equalTo(defaultExtension1.hashCode())));	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,is(equalTo(expected)));	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual).isEqualTo(expected);	0
166	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	"assertEquals(expected+""STR"",actual);"	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value,is(100));	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value).isEqualTo(100);	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertEquals(100,value);	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value).isEqualTo(10);	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value,equalTo(100));	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value,is(10));	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertEquals(10,value);	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertEquals(100,value);	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value,equalTo(10));	0
167	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomInt_withBound	assertTrue(value>=0);	assertThat(value).isEqualTo(99);	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat(FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2FLOAD_2	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
168	10	nidi3_graphviz-java	StyleTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Style.wedged(Color.RED,Color.GREEN)));"	assertThat	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(expected,actual,is(equalTo(expected)));	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	"assertEquals(expected,""STR"",actual);"	0
169	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	"assertEquals(expected+""STR"",actual);"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",123L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",2L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3L));"	0
170	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123456789));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",resp);"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",resp);"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertThat(resp,is(""STR""));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(""STR"".equals(resp));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertThat(resp).isEqualTo(""STR"");"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	0
171	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertThat(resp,is(request));	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	Stringresult=simulatorProperties.getCloudIdentity();	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	1
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	assertThat(simulatorProperties.getCloudIdentity(),equalTo(customFile.getAbsolutePath()));	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	StringidentityString=simulatorProperties.getCloudIdentity();	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	Stringidentity=simulatorProperties.getCloudIdentity();	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	StringcloudIdentity=simulatorProperties.getCloudIdentity();	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertThat(simulatorProperties.getCloudIdentity(),equalTo(""STR""));"	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertEquals(""STR"",customFile.getAbsolutePath());"	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertThat(simulatorProperties.getCloudIdentity(),is(""STR""));"	0
172	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_CLOUD_IDENTITY	"assertEquals(""STR"",simulatorProperties.getCloudIdentity());"	"assertThat(simulatorProperties.getCloudIdentity(),is(equalTo(""STR"")));"	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>result=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(text);	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>expected=newArrayList<>();	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(2,tokens.size());	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>results=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(tokens);	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertThat(tokens.size(),is(1));	0
173	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),hasItem(1));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(ImmutableList.of(),Collectors.toImmutableList());	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(1));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),is(ImmutableList.of(3)));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),isEmpty());	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),is(ImmutableList.of(1)));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(3));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(0));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(2));	0
174	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),is(ImmutableList.of(1)));	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(vi����.isRecognized());	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(vi����.isRecognized());	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(vi����.isRecognized());	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertThat(vi����.isRecognized(),is(true));	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertThat(vi����.isRecognized(),equalTo(true));	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(vi����.isRecognized());	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	"assertTrue(""STR"",vi����.isRecognized());"	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertThat(vi����.isRecognized(),equalTo(false));	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	assertThat(vi����.isRecognized(),is(false));	0
175	10	PeterisP_morphology	MorphologyTest#laura_20130605	assertTrue(viņš.isRecognized());	"assertFalse(""STR"",vi����.isRecognized());"	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertEquals(3,res.size());	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertThat(res.size(),is(3));	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	assertThat(res.size(),equalTo(1));	0
176	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloat	assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertThat(actual,is(not(createVerb(""STR""))));"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
177	10	adlnet_jxapi	VerbsTest#testImported	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventevent=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventevent1=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventexpected=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventcef=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	commonEvent=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventactual=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEventev=parser.parse(sample1);	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	"CommonEventevent=parser.parse(""STR"");"	0
178	10	fluenda_ParCEFone	CEFParserTest#validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	CommonEvente=parser.parse(sample1);	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeyotherCompositeKey=newOCompositeKey();	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey.equals(anotherCompositeKey),is(false));	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey,not(equalTo(anotherCompositeKey)));	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(otherCompositeKey));	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeytwoCompositeKey=newOCompositeKey();	0
179	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	matcher.reset();	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(false));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
180	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(true));	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertThat(result,equalTo(expectedResult));	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertThat(result,is(expectedResult));	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,2,""STR""));"	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,3,""STR""));"	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,1,""STR""));"	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertThat(result,is(equalTo(expectedResult)));	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.toString(),result);	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,4,""STR""));"	0
181	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	assertEquals(statement.toString(),actual.toString());	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	actual.setId(ID);	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	assertEquals(ID,actual.getId());	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	"assertEquals(""STR""+ID,actual.getId());"	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	assertEquals(ID,actual.getId());	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	assertEquals(statement.toString(),actual.toString());	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	"assertThat(actual.toString(),equalTo(""STR""));"	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	"assertTrue(actual.toString().contains(""STR""));"	0
182	10	adlnet_jxapi	StatementTest#testToString	assertNotNull(actual);	assertThat(actual.toString(),equalTo(verb));	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCiEnvironment(env);	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv=newCiEnvironment(env);	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenvironment=newCiEnvironment(env);	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv=newCiEnvironment(env,""STR"");"	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(env,""STR"");"	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCIEnvironment(env);	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenvironment=newCiEnvironment(env,""STR"");"	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv=newCiEnvironment(""STR"",env);"	0
183	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(""STR"",env);"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertThat(property.getName(),is(""STR""));"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(""STR"",property.getName());"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertThat(property.getName(),equalTo(""STR""));"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(""STR"",property.getName());"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertThat(property.getName(),is(equalTo(""STR"")));"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertThat(property.getName(),is(notNullValue()));	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertThat(property.getName(),is(nullValue()));	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertTrue(property.getName().equals(""STR""));"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertEquals(property.getName(),""STR"");"	0
184	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testIfNotExists	assertEquals(property.getName(),PROP_NAME);	"assertThat(property.getName(),is(""STR""+System.nanoTime()));"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	assertThat(actual,instanceOf(Verb.class));	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
185	10	adlnet_jxapi	VerbsTest#testInitialized	assertNotNull(actual);	assertNotNull(actual);	1
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>changeEvents=timeLine.getMultiValueChangeEvents();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>multiValueChangeEvents=timeLine.getMultiValueChangeEvents();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>valueChangeEvents=timeLine.getMultiValueChangeEvents();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().iterator().next();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().iterator().next();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().iterator().next();	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().get(0);	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().get(0);	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().get(0);	0
186	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()==2);	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(RANK.dir(),hasItem(""STR"",""STR""));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasSize(1));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasSize(2));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	Rankrank=newRank();	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attribute(""STR"",""STR""),attribute(""STR"",""STR""))));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attribute(""STR"",""STR""))));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasItem(""STR"",attrs(attr(""STR"",""STR""))));"	0
187	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR"",""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(emptyList(),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singletonList(""STR""),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>(),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<String>()->{
},""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>(),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singletonList(""STR""),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singleton(1),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR""),""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singleton(1),""STR"",""STR"",""STR""));"	0
188	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringFull	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR"",""STR"",""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR""),""STR"",""STR""));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1.23d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Double.NaN));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",12.34d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.5d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1.23d));"	0
189	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.6d));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	assertThat(label.simple(),hasSize(1));	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(),hasItem(""STR"",newText(""STR"")));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(""STR"",""STR""),hasItem(""STR"",""STR""));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label,hasItem(""STR""));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(),deepEquals(attrs(newAttribute[]{""STR"",""STR""})));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(),hasItem(""STR"",attrs(newAttribute(""STR"",""STR""))));"	0
190	10	nidi3_graphviz-java	LabelTest#simple	"assertEquals(attrs(attr(""STR"",label)),attrs(label));"	"assertThat(label.simple(""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",render(viz).toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",viz.render().toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",newRenderer(viz).render().toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",newRenderer(viz).toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR"",newRenderer().render(viz).toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR""+""STR""+""STR"",viz.render().toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR""+""STR"",viz.render().toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR""+""STR""+""STR""+""STR"",viz.render().toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR""+""STR""+""STR""+""STR"",render(viz).toString());"	0
191	10	nidi3_graphviz-java	SimpleTest#simple	assertNotNull(viz.render(SVG).toString());	"assertEquals(""STR""+""STR""+""STR""+""STR"",newRenderer(viz).toString());"	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertNull(field);	1
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertThat(field,is(notNullValue()));	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertThat(field,nullValue());	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertThat(field,is(nullValue()));	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.TYPE,field.getType());	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertThat(field,notNullValue());	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertThat(field).isNull();	0
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertNull(field);	1
192	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetField_typeMismatch	assertNull(field);	assertNull(field);	1
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
193	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
194	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeDouble	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR"",result);"	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass,instanceOf(InnerClass.class));	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isNotNull();	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getSimpleName());"	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass);"	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass!=null);	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyInnerClass.class);	0
195	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyTestClass.class);	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getResponse().getHTTPHeader());"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),is(equalTo(""STR"")));"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),is(""STR""));"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getResponseHeaders().get(0).getHTTPHeader());"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",clientCookie.getHTTPHeader());"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Response<String>response=responseHandler.getResponse();	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),containsString(""STR""));"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Cookiecookie=responseHandler.getResponse();	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getHTTPHeader());"	0
196	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Stringresponse=responseHandler.getResponse().getHTTPHeader();	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertThat(options,is(notNullValue()));	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	1
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	1
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	"assertThat(options,hasItem(""STR""));"	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.size());	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.size());	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertFalse(options.isEmpty());	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(1,options.size());	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertThat(options,is(empty()));	0
197	10	hazelcast_hazelcast-simulator	CliUtilsTest#testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Language.USD));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Language.USD));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_20,Language.USD));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(1.23d,Language.USD));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Language.RUS));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,MoneyToStr.Language.RUS));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Pennies.TEXT));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Pennies.TEXT));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Language.RUS));"	0
198	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_33,MoneyToStr.Language.RUS));"	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(equalTo(this.mockJmxServiceUrlFactory)));	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	"assertThat(this.factory.getJmxServiceUrlFactory()).isEqualTo(JMXServiceUrlFactory.createJMXServiceUrl(""STR""));"	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	finalJMXServiceUrlFactoryjmxServiceUrlFactory=factory.getJmxServiceUrlFactory();	0
199	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(nullValue()));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration,is(durationLimit));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration>durationLimit,is(true));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration,lessThanOrEqualTo(durationLimit));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration,lessThan(durationLimit));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration/durationLimit,is(1L));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	sleepRandomNanos(newRandom(),durationLimit-1);	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration>durationLimit,is(false));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertEquals(durationLimit,duration);	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertThat(duration/durationLimit,is(0L));	0
200	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepRandomNanosMinDelayZero	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>durationLimit);	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	1
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertThat(clazz.getCustom(""STR""),is(""STR""));"	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	1
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertThat(clazz.getCustom(""STR""),equalTo(""STR""));"	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	1
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"Stringcustom=clazz.getCustom(""STR"");"	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertThat(clazz.getCustom(""STR""),is(equalTo(""STR"")));"	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertTrue(clazz.getCustom(""STR"").equals(""STR""));"	0
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"assertEquals(""STR"",clazz.getCustom(""STR""));"	1
201	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testCustom	"assertEquals(""STR"",clazz.getCustom(""STR""));"	"Stringname=clazz.getCustom(""STR"");"	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
202	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertThat(routePrioritizer.getPrioritizedRoutes(),hasItem(null));	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.add(null);	0
203	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(SVG,a.getSvg());	1
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2D);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG2);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	"finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(""STR"");"	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(BAR);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	"assertEquals(""STR"",a.getSvg());"	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_1);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_PATTERN);	0
204	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithoutChanges	assertEquals(SVG,a.getSvg());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_SIZE);	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(mapToTest))));	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(mapToTest.get(""STR"")))));"	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(mapToTest.get(""STR"")));"	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(mapToTest));	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(notNullValue()));"	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(mapToTest[""STR""]));"	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(mapToTest[""STR""])));"	0
205	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(notNullValue(""STR"")));"	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuffer=ByteBuffer.allocate(8);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuffer=ByteBuffer.allocate(4);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuf=ByteBuffer.allocate(8);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	"ByteBufferbuffer=ByteBuffer.wrap(""STR"".getBytes());"	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferb=ByteBuffer.allocate(8);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuf=ByteBuffer.allocate(4);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuffer=ByteBuffer.allocate(16);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuffer=ByteBuffer.allocate(1);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferbuffer=ByteBuffer.allocate(32);	0
206	10	jcodec_jcodec	MkvBlockTest#testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	ByteBufferb=ByteBuffer.allocate(4);	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(OType.STRING));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(OType.INTEGER));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,equalTo(OType.INTEGER));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(notNullValue()));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,instanceOf(OType[].class));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,arrayWithSize(1));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(newOType[]{OType.INTEGER}));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(newOType[]{OType.STRING}));	0
207	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(OType.INTEGER));	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected,actual);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(MBOX_SHA1SUM,actual);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(MBOX_SHA1SUM,actual);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(MBOX_SHA1SUM,actual[0]);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(Arrays.equals(expected,actual));	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length==expected.length);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(MBOX_SHA1SUM,expected,actual);	0
208	10	adlnet_jxapi	PersonTest#testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode04CodeListMarshallersut=newGenericode04CodeListMarshaller();	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXlsSds=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaCodeList=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSds=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaYls=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().readValue(aXls,CodeListDocument.class);	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSheet=newClassPathResource(""STR"");"	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().fromResource(aXls);	0
209	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().fromJson(aXls,CodeListDocument.class);	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(env).getName());"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral().getName());"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",env.getGeneral().getName());"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"System.out.println(""STR"");"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNull(env.getGeneral(""STR"").getName());"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(null).getName());"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNull(newGeneral(env).getName());	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"System.setProperty(CI_NAME,""STR"");"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"finalGeneralgeneral=newGeneral(""STR"");"	0
210	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(env.getEnvironment()).getName());"	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofYuv444jToYuv420j);	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertEquals(transform,Yuv444jToYuv420j.getTransform(src.getColor(),dst.getColor()));	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofYuv444jToYuv420j);	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofYuv4jToYuv420j);	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertEquals(transform,Yuv444jToYuv420jTestUtil.getTransform(src.getColor(),dst.getColor()));	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertEquals(expPix,transform.apply(src));	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofYuv444jToYuv420jTransform);	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertEquals(expPix,transform.apply(src));	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertEquals(transform,Yuv444jToYuv420j.getTransform(src.getColorSpace(),dst.getColorSpace()));	0
211	10	jcodec_jcodec	Yuv444jToYuv420jTest#testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofYuv444jToYuv420jTransform);	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertTrue(actual.contains(e));	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertThat(actual,hasItem(e));	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertEquals(1,actual.size());	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertThat(actual,hasItems(e));	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
212	10	adlnet_jxapi	ActivityDefinitionTest#testSetChoices	assertNotNull(actual);	assertThat(actual,contains(e));	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=markup.markdown(""STR"");"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""+""STR""));"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=m.markdown(""STR"");"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringtext=m.markdown(""STR"");"	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	LineConventionsconventions=newLineConventions(markup);	0
213	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isEqualTo(mockedToken);	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isSameAs(mockedToken);	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessTokenProvider();	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	OAuth2AccessTokenresult=oAuth2FeignRequestInterceptor.acquireAccessToken();	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessTokenProvider(mockedToken);	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	OAuth2AccessTokentoken=oAuth2FeignRequestInterceptor.acquireAccessToken();	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isInstanceOf(MockOAuth2AccessTokenProvider.class);	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"oAuth2FeignRequestInterceptor.configureAccessTokenProvider(""STR"");"	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessToken(mockedToken);	0
214	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessToken(requestTemplate);	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasEntry(""STR"",""STR""));"	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,not(hasEntry(""STR"",""STR"")));"	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(1,convertedEnv.size());	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(2,convertedEnv.size());	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsKey(""STR""));"	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(2);	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasItem(""STR""));"	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env,convertedEnv);	0
215	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(1);	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertTrue(actual.getId()==expected.getId());	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertThat(actual,is(expected));	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertTrue(actual.getId()!=expected.getId());	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertNotEquals(expected,actual);	0
216	10	adlnet_jxapi	StatementTest#testGetObject	assertNotNull(actual);	assertNotNull(actual);	1
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR""));"	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertThat(atts).hasSize(1);	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertThat(atts,hasItem(""STR""));"	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.isEmpty());	0
217	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),is(equalTo(""STR"")));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),is(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),equalTo(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""+""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR"",markup.markdown(""STR""));"	0
218	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=markup.markdown(""STR"");"	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(0,1).toString());"	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(1,2).toString());"	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(1,0).toString());"	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	finalSimulatorAddressaddress=newSimulatorAddress(0,1);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	finalSimulatorAddressaddress=newSimulatorAddress(1,2);	0
219	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),arrayView().flatMap(tokens));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnCollections.singletonList(param);}}));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),this.arrayView.flatMap(tokens));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnCollections.singletonList(param);}})),newArrayList<String>());"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),asArrayView().flatMap(tokens));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	newAsArrayView<String>().flatMap(tokens);	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnArrays.asList(param);}}));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnArrays.asList(param);}})),Collections.singletonList(""STR""));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnArrays.asList(param);}})),Collections.singleton(""STR""));"	0
220	10	arnohaase_a-foundation	AsArrayViewTest#testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	"assertEquals(Arrays.asList(""STR"",""STR""),newAsArrayView<String>(tokens).flatMap(newAFunction1<String,Iterable<String>,String>(){@OverridepublicList<String>apply(Stringparam){returnArrays.asList(param);}})),newArrayList<String>());"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(Arrays.asList(""STR"",""STR""),compositeKey.getKeys());"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	finalList<Object>keys=compositeKey.getKeys();	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(Arrays.asList(""STR"",""STR""),compositeKey.getKeys());"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(Arrays.asList(""STR""),compositeKey.getKeys());"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertThat(compositeKey.getKeys(),hasItem(""STR""));"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertTrue(compositeKey.getKeys().contains(""STR""));"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	"assertEquals(Arrays.asList(""STR""),compositeKey.getKeys());"	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	1
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(2,compositeKey.getKeys().size());	0
221	10	orientechnologies_orientdb	OCompositeKeyTest#testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()==1);	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,times(1)).execute(any(Tuple.class));	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,never()).execute(any(Tuple.class));	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").getName());"	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").toString());"	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(newMetadata(),md);	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt,times(1)).execute(eq(tuple(""STR"",""STR"")));"	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.toString());"	0
222	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt,times(1)).execute(tuple(""STR"",""STR""));"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"db.command(newOCommandSQL(""STR"")).execute();"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"index.update(""STR"");"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	index.update();	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"db.command(newOCommandSQL(""STR"")).execute(index);"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"db.command(newOCommandSQL(""STR"",""STR"")).execute();"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	index.update(null);	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"index.update(null,""STR"");"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"index.update(""STR"",null);"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"db.command(newOCommandSQL(""STR"",""STR"")).execute(index);"	0
223	10	orientechnologies_orientdb	LuceneGeoUpdateTest#testUpdate	assertEquals(2,index.getSize());	"index.update(0,""STR"");"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasEntry(""STR"",""STR""));"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),equalTo(""STR""));"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),is(equalTo(""STR"")));"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.containsKey(""STR""),is(true));"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),is(""STR""));"	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(1);	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(2);	0
224	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasItem(""STR""));"	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.hasNext(),is(true));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(1,2,3,4));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(2,3,4));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),contains(1,2,3,4));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),is(2));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(3,4));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),contains(2,3,4));	0
225	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"System.out.println(""STR""+result);"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	"assertEquals(""STR""+15,result);"	0
226	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test15ReturnsFizzBuzz	"assertEquals(""STR"",result);"	assertEquals(FizzBuzzTDD.convert(15),result);	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertThat(result,is(newBigDecimal(10.5D)));	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertThat(result,equalTo(newBigDecimal(10.5D)));	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertThat(result,is(newBigDecimal[]{newBigDecimal(10.5D)}));	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(10.5D,result);	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(10.5D,result);	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertThat(result,is(notNullValue()));	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(10.5D,result);	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	"assertThat(result,equalTo(newBigDecimal(""STR"")));"	0
227	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertThat(result,is(newBigDecimal[]{newBigDecimal(10)}));	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>tokens2=OpenKoreanTextProcessorJava.tokenize(text);	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	Seq<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(tokens);	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenizer.KoreanTokentoken=tokens.iterator().next();	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	Iterator<KoreanTokenizer.KoreanToken>it=tokens.iterator();	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(""STR"");"	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.addWordsToDictionary(tokens);	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenJavatoken=tokens.iterator().next();	0
228	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text,tokens);	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"",""STR"")));"	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"")));"	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(1);	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(1));	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(2));	0
229	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#inc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(2);	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(1,fields.size());	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(2,fields.size());	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.containsKey(""STR""),is(true));"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),is(equalTo(""STR"")));"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),equalTo(""STR""));"	0
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	1
230	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertThat(fields).hasSize(1);	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
231	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.setHandler(null);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.add(null);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	"routePrioritizer.add(""STR"");"	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	"assertFalse(routePrioritizer.getPrioritizedRoutes().contains(newUriResource(""STR"")));"	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().size()==0);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.handle(null);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.addHandler(null);	0
232	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	"routePrioritizer.add(""STR"",null);"	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>actualEnv=envFilter.filter(expectedEnv);	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),is(equalTo(expectedEnv)));	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),equalTo(expectedEnv));	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>result=envFilter.filter(expectedEnv);	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>envMap=envFilter.filter(expectedEnv);	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>env2=envFilter.filter(expectedEnv);	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	envFilter.filter(expectedEnv);	0
233	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"expectedEnv.put(""STR"",""STR"");"	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertThat(qResult,is(notNullValue()));	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(1,qResult.size());	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(""STR"",qResult.toString());"	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(2,qResult.size());	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(3,qResult.size());	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	getProfilerInstance().stopRecording();	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(""STR"",qResult.next().toString());"	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(1,qResult.get(0).size());	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	assertThat(qResult,hasItem(1));	0
234	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testMaxDepthArrow	assertEquals(2,size(qResult));	"assertEquals(""STR"",qResult.get(0).toString());"	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(true));"	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThat(matcher,lookingAt());	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(true));	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(false));"	0
235	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThat(matcher,is(true));	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(2,formas.size());	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas.size(),is(1));	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas.size(),is(2));	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>1);	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertThat(formas,hasItem(newWordform(""STR"")));"	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==2);	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==1);	0
236	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==3);	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(10));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertThat(listener.hasToken(10),is(false));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(1));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(0));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertThat(listener.hasToken(10),is(true));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(1));	0
237	10	orientechnologies_orientdb	OLiveCommandResultListenerTest#testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	OLiveQueryQueueThreadqueueThread=newOLiveQueryQueueThread();	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	1
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertThat(sourceLoader,instanceOf(MultiSourceLoader.class));	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(1,sourceLoader.getSourcePaths().size());	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(2,sourceLoader.getSourcePaths().size());	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(1,sourceLoader.getSourceDirectories().size());	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(1,sourceLoader.sources.size());	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertThat(sourceLoader).isNotNull();	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(1,sourceLoader.size());	0
238	10	trautonen_coveralls-maven-plugin	SourceLoaderFactoryTest#testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertThat(sourceLoader).isEqualTo(newMultiSourceLoader());	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),is(equalTo(expected)));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),equalTo(expected));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),iterates(1,2,3));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),iterates(expected));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),hasItem(expected));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Collectors.toLinkedHashSet());	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),is(expected));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	expected.add(4);	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),hasItems(expected));	0
239	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Collectors.toLinkedHashSet());	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,times(1)).execute(any(Tuple.class));	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,never()).execute(any(Tuple.class));	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(newMetadata(),md);	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").toString());"	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").getName());"	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt,times(1)).execute(eq(tuple(""STR"",""STR"")));"	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(md.get(""STR""),newMetadata());"	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(md.get(""STR""),metadata);"	0
240	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt).execute(eq(tuple(""STR"",""STR"")));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),is(nullValue()));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"OPropertyprop=oClass.getProperty(""STR"");"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),is(notNullValue()));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"oClass.createProperty(""STR"",OType.LINKLIST,(OClass)null,true);"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(null,oClass.getProperty(""STR""));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"oClass.createProperty(""STR"",OType.LINKLIST,(OClass)null,false);"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(null,oClass.getProperty(""STR""));"	0
241	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),nullValue());"	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(2);	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(1);	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts,is(notNullValue()));	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(3);	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts).hasSize(2);	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
242	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts).hasSize(1);	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(""STR"")));"	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(""STR"",result);"	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(""STR""));"	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertThat(result,instanceOf(Integer.class));	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertThat(result).isEqualTo(""STR"");"	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertThat(result,instanceOf(String.class));	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertThat(result,is(instanceOf(Integer.class)));	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(1)));	0
243	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	"assertEquals(""STR"",result);"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_34));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23d));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(EUR_RUS));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(3.14d));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_23));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_33));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_34));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_20));"	0
244	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(2.5d));"	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.verify(this.mockObjectQueryPreparer).prepareObjectQuery(this.polled001);	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001)).thenReturn(this.mockObjectQueryInfo001);	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001)).thenReturn(this.mockObjectQueryPreparer);	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerexpected=Mockito.mock(ObjectQueryPreparer.class);	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,this.mockObjectQueryPreparer.getObjectQueryPreparer());	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerpreparer=this.mockObjectQueryPreparer();	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertSame(this.mockObjectQueryPreparer,this.mockObjectQueryPreparer.getObjectQueryPreparer());	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=this.mockObjectQueryPreparer();	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.verify(this.mockObjectQueryPreparer).prepareSetObjectQuery(this.polled001);	0
245	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=newMockObjectQueryPreparer();	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),is(""STR""));"	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),equalTo(""STR""));"	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),is(equalTo(""STR"")));"	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(DefaultExtension.class.getSimpleName(),defaultExtension.toString());	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(DefaultExtension.class.getSimpleName()+""STR"",defaultExtension.toString());"	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(DefaultExtension.class.getSimpleName(),defaultExtension.getClass().getSimpleName());	0
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
246	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertThat(defaultExtension.toString(),equalTo(DefaultExtension.class.getSimpleName()));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(1,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(3,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(4,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(1,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),0);	0
247	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	1
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(src.toString()));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"Stringresult=DevUtil.removeSurroundingQuotes(""STR"");"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(null));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertThat(DevUtil.removeSurroundingQuotes(""STR""),is(""STR""));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(src.getAbsolutePath()));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	1
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(src.getPath()));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(src.toString()));"	0
248	10	OpenLiberty_ci.common	DevUtilTest#testRemoveSurroundingQuotes	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(""STR""));"	"assertEquals(""STR"",DevUtil.removeSurroundingQuotes(src));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),is(""STR""));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR""+""STR"",m.markdown(""STR""));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),equalTo(""STR""));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),is(equalTo(""STR"")));"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"Strings=m.markdown(""STR"");"	0
249	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"m.markdown(""STR"");"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	1
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,','));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),""STR""),""STR""));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"Strings=Seq.join(Arrays.asList(""STR"",""STR""),""STR"");"	0
250	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	1
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	long[]out=MkvBlock.calcEbmlLacingDiffs(_in);	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	long[]result=MkvBlock.calcEbmlLacingDiffs(_in);	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MKVBlock.calcEbmlLacingDiffs(_in));	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	long[]actual=MkvBlock.calcEbmlLacingDiffs(_in);	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	long[]expected=MkvBlock.calcEbmlLacingDiffs(_in);	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(newint[]{187,630,255,60,0xFFFFFF}));	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	int[]_out=newint[]{187,630,255,60,0xFFFFFF};	0
251	10	jcodec_jcodec	MkvBlockTest#testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(newint[]{187,630,255,60,0xFFFFFF}));	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER);	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUHRUS.convert(-1.23d));"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,""STR"");"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,""STR"");"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR"",""STR""});"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR""});"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR"",""STR"",""STR""});"	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertEquals(GBP_STR_US_MINUS,GBP_STR_US_MINUS);	0
252	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(-1.23d));"	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	Objectfirst=OMultiValue.getFirstValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	OMultiValuemulti=newOMultiValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	Objectlast=OMultiValue.getFirstValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	1
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	Objectvalue=OMultiValue.getFirstValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	OMultiValuem=newOMultiValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	Objecti=OMultiValue.getFirstValue(collection);	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"OMultiValuemulti=newOMultiValue(""STR"",collection);"	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"OMultiValuemulti=newOMultiValue(collection,""STR"");"	0
253	10	orientechnologies_orientdb	OMultiValueTest#testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	OMultiValueobj=newOMultiValue(collection);	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warn(""STR"");"	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(Level.WARN);	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(Level.WARN);	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.set(""STR"",LogLevel.WARN);"	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(LogLevel.WARN);	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warn(""STR"",Level.WARN);"	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn();	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warning(""STR"");"	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn(LogLevel.WARN);	0
254	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn(Level.WARN);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	1
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertThat(comparison,is(0));	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(-1,comparison);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(-1,comparison);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison);	0
255	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison==0);	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertThat(sql.toString(),equalTo(""STR""));"	0
256	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertThat(sql.toString(),is(""STR""));"	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	1
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasItem(doc));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(2,vertices.size());	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),is(1));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),is(2));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(3,vertices.size());	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasItems(doc));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),equalTo(2));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasSize(1));	0
257	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),equalTo(1));	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").toString());"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(html(""STR""),Label.markdown(""STR""));"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(newLabel(""STR""),Label.markdown(""STR""));"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertThat(Label.markdown(""STR""),equalTo(newLabel(""STR"")));"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(label(""STR""),Label.markdown(""STR""));"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(markdown(""STR""),Label.markdown(""STR""));"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").getText());"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"Labellabel=Label.markdown(""STR"");"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").getValue());"	0
258	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").get(0).toString());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",newWercker().getBranch());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",newWercker(env).getBranch());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",newWercker().getBranch());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",newWercker(env).getBranch());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertEquals(WERCKER_BRANCH,newWercker(env).getBranch());	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertEquals(WERCKER_BRANCH,newWercker().getBranch());	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"assertEquals(""STR"",newWercker().branch());"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	"Werckerwercker=newWercker(""STR"");"	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	Werckerwercker=newWercker();	0
259	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	Stringbranch=env.getProperty(WERCKER_BRANCH);	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	AssertJson.assertEquals(expected,actual);	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertThat(actual,is(expected));	0
260	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	AssertEquals(expected,actual);	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertThat(result,is(nullValue()));	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertThat(result,instanceOf(OCompositeKey.class));	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertThat(result,is(nullValue(12)));	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertThat(""STR"",result,is(nullValue()));"	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertThat(result,is(nullValue(""STR"")));"	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertThat(result,is(notNullValue()));	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertThat(result,nullValue());	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNull(result);	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertThat(result,equalTo(newOCompositeKey(""STR"",12)));"	0
261	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	"assertThat(""STR"",result,is(nullValue(12)));"	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
262	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
263	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	"assertThat(result,hasItem(""STR""));"	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallersut=newGenericode10CodeListMarshaller();	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallero=newGenericode10CodeListMarshaller();	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXlsSds=newClassPathResource(""STR"");"	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallers=newGenericode10CodeListMarshaller();	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().readValue(aXls,CodeListDocument.class);	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSds=newClassPathResource(""STR"");"	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaCodeList=newClassPathResource(""STR"");"	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().fromResource(aXls);	0
264	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().fromXLSStream(aXls);	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertTrue(newCircle(env,""STR"").isSelected());"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertTrue(newCircle(env,""STR"").isSelected());"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertFalse(newCircle(env,""STR"").isSelected());"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertTrue(newCircle(""STR"").isSelected());"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"System.out.println(""STR"");"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	"assertTrue(newCircle(""STR"").isSelected());"	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(newCircle(env).isSelected());	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(newCircle(env).isSelected());	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(newCircle(env,null).isSelected());	0
265	10	trautonen_coveralls-maven-plugin	CircleTest#testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	finalCirclecircle=newCircle();	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	1
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.toString());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(ID,statementRef.getId());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(ID,statementRef.getId());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.toString());	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	assertEquals(statementRef.getId(),id);	0
266	10	adlnet_jxapi	StatementReferenceTest#testStatementReferenceString	assertNotNull(statementRef);	"assertEquals(""STR"",statementRef.toString());"	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(1,actual.size());	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(2,actual.size());	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(3,actual.size());	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertThat(actual,hasItem(MBOX));	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.size()==2);	0
267	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
268	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedResult));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	1
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	1
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	1
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.equals(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.matches(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.startsWith(expected));	0
269	10	adlnet_jxapi	PersonTest#testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.equals(expected));	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getCode());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	"assertEquals(""STR"",frame.getReason());"	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	"assertEquals(frame.getReason(),""STR"");"	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getOpcode());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(CloseOpcode.CLOSING,frame.getCode());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getReason());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	"frame.setReason(""STR"");"	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(0,frame.getCode());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSE,frame.getCode());	0
270	10	TooTallNate_Java-WebSocket	CloseFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getCode(),Opcode.CLOSING);	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	finalIterable<Integer>iterable=Iterations.iterable(1,2);	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasItem(""STR""));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),is(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR""))));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),iterates(""STR"",""STR""));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasSize(2));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR"")),iterates(""STR"",""STR""));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR"")),iterates(""STR"",""STR"",""STR""));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasSize(3));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),iterates(""STR"",""STR"",""STR""));"	0
271	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),is(StreamUtils.stream(Arrays.asList(""STR"",""STR""))));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,""STR"");"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-1.23d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUKRUS.convert(-1.23d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-1.5d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-0.5d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUKRUS.convert(-0.5d));"	0
272	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,null);	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertThat(contentEncoding.getValue(),is(""STR""));"	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertThat(contentEncoding.getValue(),is(equalTo(""STR"")));"	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertThat(contentEncoding,is(notNullValue()));	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertThat(contentEncoding.getValue(),is(notNullValue()));	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertEquals(""STR"",contentEncoding.getValue());"	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertThat(contentEncoding).hasSize(1);	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertThat(contentEncoding,hasItem(""STR""));"	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertEquals(""STR"",contentEncoding.getValue());"	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertThat(contentEncoding).isNotNull();	0
273	10	NanoHttpd_nanohttpd	GZipIntegrationTest#contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertThat(contentEncoding).isEqualTo(""STR"");"	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	1
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(BYTE,byteSerializer.deserialize(stream,0));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	1
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT,byteSerializer.deserialize(stream,1));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(Byte.valueOf(0),byteSerializer.deserialize(stream,0));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	finalByteresult=byteSerializer.deserialize(stream,0);	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(BYTE,byteSerializer.deserialize(stream,0));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT.byteValue(),byteSerializer.deserialize(stream,0));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertSame(OBJECT,byteSerializer.deserialize(stream,0));	0
274	10	orientechnologies_orientdb	ByteSerializerTest#testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT,byteSerializer.deserialize(stream,1));	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(1,result.size());	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(2,result.size());	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertThat(result,hasItem(""STR""));"	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(3,result.size());	1
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(1,result.size());	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertThat(result).hasSize(1);	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertTrue(result.size()==1);	0
275	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+1,database.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount,OGlobalConfiguration.RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD.getValueAsInteger());	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+2,database.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	1
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+1,OGlobalConfiguration.RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD.getValueAsInteger());	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(1,database.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(1,ridBag.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(2,database.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount,ridBag.countClusterElements(database.getDefaultClusterId()));	0
276	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(2,ridBag.countClusterElements(database.getDefaultClusterId()));	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ENGLISH);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,false,newLocale(""STR""));"	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ENGLISH);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,true,newLocale(""STR""));"	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,null);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ROOT);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"parser.parse(sample1,false,newLocale(""STR""));"	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,null);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.GERMAN);	0
277	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ROOT);	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(""STR""));"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),equalTo(""STR""));"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_NAME));	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_ID));	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(equalTo(""STR"")));"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(idProperty.getName().equals(""STR""));"	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),equalTo(PROP_ID));	0
278	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	System.out.println(idProperty.getName());	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(1,actual.size());	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertTrue(actual.contains(e));	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertThat(actual,hasItem(e));	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(2,actual.size());	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertEquals(1,actual.size());	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertTrue(actual.size()==1);	0
279	10	adlnet_jxapi	ActivityDefinitionTest#testSetTarget	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertThat(result,equalTo(expectedResult));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertThat(result,is(expectedResult));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertThat(result,is(equalTo(expectedResult)));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(12,3));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(expectedResult.toString(),result);	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(12,1));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(12,2));	0
280	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(12,4));	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(""STR""));"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),equalTo(""STR""));"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_ID));	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(equalTo(""STR"")));"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_NAME));	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"db.command(newOCommandSQL(""STR"")).execute();"	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),equalTo(PROP_ID));	0
281	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	System.out.println(idProperty.getName());	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),is(""STR""));"	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),equalTo(""STR""));"	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),is(equalTo(""STR"")));"	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	StringprovidedProtocol=protocol0.getProvidedProtocol();	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertThat(protocol0.getProvidedProtocol(),is(nullValue()));	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(protocol0.getProvidedProtocol().equals(""STR""));"	0
282	10	TooTallNate_Java-WebSocket	ProtocolTest#testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNull(protocol0.getProvidedProtocol());	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),equalTo(newint[]{s,t}));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),is(equalTo(newint[]{s,t})));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),equalTo(newint[]{s}));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),equalTo(newint[]{s+t}));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(s,clazzV.getClusterIds().length);	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),hasItem(s));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(s,clazzV.getClusterIds().length);	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),is(equalTo(newint[]{s+t})));	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertArrayEquals(s,clazzV.getClusterIds());	0
283	10	orientechnologies_orientdb	CreateClassMultipleClusterTest#testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertThat(clazzV.getClusterIds(),containsInAnyOrder(s,t));	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
284	10	orientechnologies_orientdb	TrackedSetTest#testClearOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(1)));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1,2));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,2)));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iterator=Iterations.iterator(1,2);	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(2)));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iter=Iterations.iterator(1,2);	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertThat(StreamUtils.stream(Iterations.iterator(1,2)),hasSize(3));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,3)));	0
285	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(3)));	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins().isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins(env).isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertThat(newJenkins().isSelected(),is(false));	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins().isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertThat(newJenkins(env).isSelected(),is(false));	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins().isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins().isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins(env).isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newJenkins(env).isSelected());	0
286	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	finalbooleanselected=newJenkins().isSelected();	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	1
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(0,ret.getId());	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(1,ret.getId());	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(1,ret.getData().sessionId);	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(0,ret.getData().sessionId);	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertNull(ret);	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertThat(ret,instanceOf(OClientConnection.class));	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(ret!=null);	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	0
287	10	orientechnologies_orientdb	OClientConnectionManagerTest#testSimpleConnectDisconnect	assertNotNull(ret);	Mockito.verify(protocol).getServer();	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertEquals(""STR"",client.removeHeader(""STR""));"	1
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringresponse=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringresult=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"StringremoveHeader=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringremoved=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"assertNull(client.removeHeader(""STR""));"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringremove=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringheader=client.removeHeader(""STR"");"	0
288	10	TooTallNate_Java-WebSocket	HeadersTest#test_Add_RemoveHeaders	"assertEquals(""STR"",client.removeHeader(""STR""));"	"Stringexpected=""STR"";"	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(0,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(3,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),is(1));	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(4,extr.fields());	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),equalTo(1));	0
289	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()==1);	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeyotherCompositeKey=newOCompositeKey();	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(false,compositeKey.equals(anotherCompositeKey));	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey,equalTo(anotherCompositeKey));	0
290	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeyanotherCompositeKey2=newOCompositeKey();	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,other.getCommand());	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,other.getCommand());	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,request.getCommand());	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,request.getCommand());	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertThat(request.getCommand(),is(OChannelBinaryProtocol.REQUEST_QUERY));	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertThat(other.getCommand(),is(OChannelBinaryProtocol.REQUEST_QUERY));	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertThat(channel.getCommand(),is(OChannelBinaryProtocol.REQUEST_QUERY));	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(OChannelBinaryProtocol.REQUEST_QUERY,channel.getCommand());	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertEquals(""STR"",other.getCommand());"	0
291	10	orientechnologies_orientdb	OQueryRequestTest#testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertEquals(""STR"",request.getCommand());"	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]bytes=EbmlUtil.ebmlEncode(123L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]bytes=EbmlUtil.ebmlEncode(1L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]bytes=EbmlUtil.ebmlEncode(1);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]encoded=EbmlUtil.ebmlEncode(123L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]data=EbmlUtil.ebmlEncode(1L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]encoded=EbmlUtil.ebmlEncode(1L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]result=EbmlUtil.ebmlEncode(123L);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]bytes=EbmlUtil.ebmlEncode(123);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]data=EbmlUtil.ebmlEncode(1);	0
292	10	jcodec_jcodec	EbmlUtilTest#testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	byte[]encoded=EbmlUtil.ebmlEncode(1);	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"logger.info(""STR"");"	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(LOG_MESSAGE);	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(true));	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(Level.INFO);	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled()).isTrue();	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),equalTo(true));	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(false));	0
293	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"logger.info(""STR"",Level.INFO);"	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"",""STR"");"	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	OpenKoreanTextProcessorJava.addNounsToDictionary(tokens);	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	OpenKoreanTextProcessor.addNounsToDictionary(tokens);	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"");"	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>wordsList=Arrays.asList(""STR"",""STR"");"	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"",""STR"",""STR"");"	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenizer.addNounsToDictionary(tokens);	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(text);	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(tokens);	0
294	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Collections.singletonList(""STR"");"	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(newObject()));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(MAC_ADDRESS));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertFalse(macAddress.equals(""STR""));"	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertFalse(macAddress.equals(newMacAddress(""STR"")));"	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(newObject()));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(MAC_ADDRESS));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(MACADDRESS));	0
295	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(null));	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertThat(result,is(notNullValue()));	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(1,result);	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertThat(result,is(equalTo(""STR"")));"	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(1,result.intValue());	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertThat(result,is(OType.STRING));	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertThat(result,equalTo(OType.STRING));	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertEquals(result,""STR"");"	1
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertThat(result,equalTo(""STR""));"	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertThat(result,instanceOf(Integer.class));	0
296	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(OType.STRING,result);	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	server.shutdown();	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	server.get().shutdown();	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	Serverserver=mock(Server.class);	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown(){}};	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown(){return;}};	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown()throwsException{}};	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"Serverserver=newServer(""STR""){@Overridepublicvoidshutdown(){}};"	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	Serverserver=newServer();	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"server.setAvailability(""STR"");"	0
297	10	sofastack_sofa-bolt	LifeCycleTest#testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"Serverserver=newServer(""STR"");"	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer();	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(RocketMqProducer.class);	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(TestRocketMqProducer.class);	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(""STR"");"	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(""STR"",RocketMqProducer.class);"	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)configuration.getProducer();	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqConfiguration.getInstance().getProducer();	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultMQProducerproducer=(DefaultMQProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
298	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=getRocketMqProducer();	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.sort().toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toSql().toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
299	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),is(true));	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(true));	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(""STR"",configFile.getName());"	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(""STR"",configFile.getName());"	0
300	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(false));	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasEntry(""STR"",""STR""));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasSize(1));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasSize(1));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasEntry(""STR"",""STR""));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasSize(2));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasItem(newTextNode(""STR"")));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasSize(2));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasItem(attr(SHAPE,RECORD)));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasItem(attr(SHAPE,RECORD)));"	0
301	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),deepEquals(attrs(SHAPE,RECORD),attrs(LABEL,""STR"")));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	1
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	1
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertThat(value,is(""STR""));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertThat(value).isEqualTo(""STR"");"	0
302	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.startsWith(""STR""));"	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	1
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	1
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	1
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,client1.isConnectionMonitorSwitchOn());	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(false));	0
303	10	sofastack_sofa-bolt	GlobalSwitchTest#testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(true));	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	1
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	1
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.BAD_SIGNATURE));	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.NOT_FOUND));	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.BAD_REQUEST));	0
304	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(Status.BAD_SIGNATURE));	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(newID,actual.get(0).getId());	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertThat(actual,hasItem(newID));	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(1,actual.size());	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertTrue(actual.contains(newID));	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(newID,actual.get(0).getID());	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(2,actual.size());	0
305	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertThat(actual,hasItems(newID));	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertEquals(false,frame.isFin());	1
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertTrue(frame.isFin());	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),is(false));	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),equalTo(false));	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertTrue(frame.isFin());	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),is(true));	0
306	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertEquals(true,frame.isFin());	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(3,qResult.size());	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
307	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testAliasesWithSubquery	assertEquals(1,qResult.size());	assertThat(qResult.size(),equalTo(2));	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	1
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	1
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertThat(btUrl.getIp(),is(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertThat(btUrl.getIp(),equalTo(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().contains(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().contains(""STR""));"	0
308	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserConnectTimeout	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(btUrl.getIp());	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),equalTo(""STR""));"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"",""STR"");"	0
309	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(""STR""));"	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR""));"	1
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(2,names.size());	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(1,names.size());	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR""));"	1
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertThat(names,hasItem(""STR""));"	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR""));"	1
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(3,names.size());	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	assertEquals(1,names.size());	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertTrue(names.contains(""STR"",""STR""));"	0
310	10	orientechnologies_orientdb	OElementTest#testGetSetProperty	"assertTrue(names.contains(""STR""));"	"assertThat(names,containsInAnyOrder(""STR"",""STR""));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),is(""STR""));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),is(equalTo(""STR"")));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),equalTo(""STR""));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(nullValue()));	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertEquals(""STR"",factory.getDsn());"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(notNullValue()));	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(""STR"",factory.getDsn(),is(""STR""));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(""STR"",factory.getDsn(),is(equalTo(""STR"")));"	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(equalTo(DEFAULT_DSN)));	0
311	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(DEFAULT_DSN));	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertThat(actual,is(newJsonObject()));	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertEquals(SCORE_JSON,actual.toString());	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertEquals(1,actual.size());	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertEquals(MAX,actual.get(0).toString());	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	"assertThat(actual,hasItem(""STR""));"	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	assertEquals(MAX,actual.get(0).getName());	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	"assertThat(actual.get(""STR""),is(equalTo(MAX)));"	0
312	10	adlnet_jxapi	ScoreTest#testSerialize	assertNotNull(actual);	"assertThat(actual.get(""STR""),is(MIN));"	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	"map.put(key1,""STR"");"	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertEquals(key1,map.get(key2));	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	"finalStringkey4=newString(""STR"");"	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	map.put(key1,key2);	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	"finalStringkey4=""STR"";"	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertEquals(map.size(),1);	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertEquals(map.size(),0);	0
313	10	arnohaase_a-foundation	AHashMapTest#testEqualityIdentity	assertEquals(key1,key2);	assertEquals(key1,map.get(key3));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,3));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	1
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	assertThat(a,same(b));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	assertThat(a,equalTo(b));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	assertThat(a,sameInstance(b));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,4));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	1
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,2));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,1));	0
314	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#same_cells_means_same_puzzle	assertEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),9,3));	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=FileHelper.getStringFrom(""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=FileHelper.getStringFrom(""STR""+getDatabaseName()+""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=readFileAsString(""STR""+getDatabaseName()+""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=readFileAsString(""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=readFileAsString(getClass().getResource(""STR""),""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=FileHelper.getStringFrom(""STR""+getDatabaseName()+""STR"",""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=readFileAsString(getClass().getResource(""STR""),""STR""+getDatabaseName()+""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=FileHelper.getStringFrom(getClass(),""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=readFileFromClassPathOrPath(""STR"");"	0
315	10	orientechnologies_orientdb	HttpCommandTest#commandWithPosParams	"assertEquals(post(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.TEXT).setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	"Stringjson=FileHelper.getStringFrom(""STR"",""STR"");"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(ddl,""STR"");"	1
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	assertEquals(1,ddl.length());	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.contains(""STR""));"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(1,ddl.indexOf(""STR""));"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertTrue(ddl.contains(""STR""));"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(""STR""+OPropertyMapIndexDefinition.INDEX_BY.KEY,ddl);"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(""STR""+OPropertyMapIndexDefinition.INDEX_BY.KEY+""STR""+OPropertyMapIndexDefinition.INDEX_BY.VALUE+""STR"",ddl);"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(""STR""+OPropertyMapIndexDefinition.INDEX_BY.KEY+""STR"",ddl);"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(""STR""+OPropertyMapIndexDefinition.INDEX_BY.KEY+""STR""+OPropertyMapIndexDefinition.INDEX_BY.VALUE,ddl);"	0
316	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateDDLByKey	"assertEquals(ddl,""STR"");"	"assertEquals(""STR"",ddl.trim());"	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher,lookingAt());	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(true));	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(false));	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher,is(true));	0
317	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(true));"	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m��k.isRecognized());	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(j��m��k.isRecognized());	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�IF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGE	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertThat(j��m��k.isRecognized(),equalTo(true));	0
318	10	PeterisP_morphology	MorphologyTest#jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(j��m�IF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGELDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_END	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",0);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",0);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	FileLoaderloader=newFileLoader(resource);	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",-1);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",-1);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",0L);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",1234L);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",-1L);"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",resource.lastModified());"	0
319	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",resource.getLastModified());"	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"logger=FluentLogger.getLogger(""STR"");"	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	logger.close();	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).flush();	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).close();	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isOpen());	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isClosed());	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isOpen());	0
320	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertEquals(""STR"",logger.toString());"	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(testParameterReplacer,preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.mockParameterReplacer,preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(this.mockParameterReplacer,preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.parameterReplacer,preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(parameterReplacer,preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(this.preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	ParameterReplacerresult=preparer.getParameterReplacer();	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	this.preparer.setParameterReplacer(null);	0
321	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.mockParameterReplacer,testTarget001.getParameterReplacer());	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==1;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==2;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".equals(o);}};"	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==0;}};	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".length()==1;}};"	0
322	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==3;}};	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
323	10	PeterisP_morphology	MorphologyTest#žirafe	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,is(notNullValue()));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,notNullValue());	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(VoidMethod.class));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,nullValue());	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,is(instanceOf(VoidMethod.class)));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,not(nullValue()));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,is(nullValue()));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(Void.class));	0
324	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertThat(method).isNotNull();	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	Zigzagzigzag=zigzag();	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	Zigzagzigzag=newZigzag();	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(zigzag(),is(newZigzag()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(Zigzag.zigzag(),is(newZigzag()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(zigzag(),equalTo(newZigzag()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(zigzag(),is(notNullValue()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertEquals(ZIGZAG,zigzag());	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(Zigzag.zigzag(),equalTo(newZigzag()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(Zigzag.zigzag(),is(nullValue()));	0
325	10	nidi3_graphviz-java	FillStyleTest#zigzag	"assertEquals(map(""STR"",""STR""),FillStyle.zigzag().values);"	assertThat(Zigzag.zigzag(),is(notNullValue()));	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanProcessorJava.detokenize(words));"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringresult=OpenKoreanProcessorJava.detokenize(words);	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanProcessorJava.detokenize(words));"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringactual=OpenKoreanProcessorJava.detokenize(words);	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertThat(OpenKoreanProcessorJava.detokenize(words),is(""STR""));"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanTextProcessor.detokenize(words));"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringtext=OpenKoreanProcessorJava.detokenize(words);	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"Stringexpected=""STR"";"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertThat(OpenKoreanProcessorJava.detokenize(words),equalTo(""STR""));"	0
326	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"List<String>words2=Arrays.asList(""STR"",""STR"");"	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertThat(v,is(0.0f));	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertThat(v,is(equalTo(0.0f)));	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v.floatValue());	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertThat(v,is(1.0f));	0
327	10	orientechnologies_orientdb	FloatSerializerTest#testSerializeNative	assertEquals(v,OBJECT);	assertEquals(0.0f,v.doubleValue());	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,instanceOf(CachedExtractor.class));	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(instanceOf(CachedExtractor.class)));	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor).isNotNull();	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	"assertThat(""STR"",extractor,instanceOf(CachedExtractor.class));"	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(notNullValue()));	0
328	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"booleanresult=PropertyBindingSupport.bind0(testObject,""STR"",""STR"");"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
329	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"this.testServer.cookiesToSend.add(newCookie(""STR"",""STR"",30));"	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	Response<Cookie>response=responseHandler.getResponse();	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	Response<String>response=responseHandler.getResponse();	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertThat(responseHandler.getStatusCode(),is(200));	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"this.testServer.cookiesToSend.add(newCookie(""STR"",""STR"",20));"	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"this.testServer.cookiesToSend.add(newCookie(""STR"",""STR"",10));"	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(30,responseHandler.getStatusCode());	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	HttpEntityentity=responseHandler.getResponse();	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"this.testServer.cookiesToSend.add(newCookie(""STR"",""STR"",25));"	0
330	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"this.testServer.cookiesToSend.add(newCookie(""STR"",""STR"",15));"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties);	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(""STR"",properties.getProperty(SHIPPABLE_BUILD_NUMBER));"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(""STR"",properties.getProperty(SHIPPABLE_BUILD_NUMBER));"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	assertEquals(properties.getProperty(SHIPPABLE_BUILD_NUMBER),System.getProperty(SHIPPABLE_BUILD_NUMBER));	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.containsKey(SHIPPABLE_BUILD_NUMBER));	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(properties.getProperty(""STR""),System.getProperty(SHIPPABLE_BUILD_NUMBER));"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	assertEquals(properties.getProperty(SHIPPABLE_BUILD_NUMBER),System.getProperty(SHIPPABLE_BUILD_ID));	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(properties.getProperty(SHIPPABLE_BUILD_NUMBER),""STR"");"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	0
331	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetEnvironment	assertEquals(5,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(equalTo(yaml)));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(yaml));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),equalTo(yaml));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
332	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isNotNull();	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isNull();	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertThat(oAuth2AccessToken).isEqualTo(""STR"");"	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken,is(notNullValue()));	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken,notNullValue());	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).notNullValue();	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isEqualTo(OAuth2_TOKEN);	0
333	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isEqualTo(OAUTH2_TOKEN);	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(""STR""));"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(equalTo(""STR"")));"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),equalTo(""STR""));"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	Stringresult=factory.getTargetDescription();	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(""STR""));"	0
334	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(equalTo(""STR"")));"	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(nullValue()));	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(not(notNullValue())));	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertNull(event);	1
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	validator.validate(event);	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event).isNotNull();	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(instanceOf(MessageEvent.class)));	0
335	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	"assertEquals(""STR"",event.getMessage());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getVoId());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getVoId());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getName());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNull(obj);	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getName());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getId());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getId());"	0
336	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
337	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"env.put(""STR"",""STR"");"	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put(ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"env.put(""STR"",""STR""+CIEnvironment.detect(env).get	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put(ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD,ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
338	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR"");"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""));"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=""STR"";"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringmarkdown=m.markdown(""STR"");"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR"");"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""+""STR""));"	0
339	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR""+""STR"");"	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
340	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationThree	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo(env).getName());"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo(env).getName());"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,newBamboo(env).getName());	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,newBamboo(env).getName());	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"System.out.println(""STR"");"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo().getName());"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo().getName());"	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,newBamboo().getName());	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	assertEquals(BAMBOO_NAME,newBamboo().getName());	0
341	10	trautonen_coveralls-maven-plugin	BambooTest#testGetName	"assertEquals(""STR"",newBamboo(env()).getName());"	"assertEquals(""STR"",newBamboo(null).getName());"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	1
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),is(""STR""));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	1
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),equalTo(""STR""));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),is(equalTo(""STR"")));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().contains(""STR""));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().startsWith(""STR""));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().equals(""STR""));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),not(equalTo(""STR"")));"	0
342	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR""+""STR"",node.getPath());"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.setAppName(""STR"");"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNull(execs.getAppName());	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.run(newString[]{""STR"",""STR""});"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.run(newString[]{""STR""});"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.execute(newString[]{""STR"",""STR""});"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.cliAppName(""STR"");"	0
343	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.execute(newString[]{""STR""});"	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertThat(r.next(),is(notNullValue()));	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.size());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.count());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	finalODocumentdoc=r.next();	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.getCount());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	finalODocumentdocument=r.next();	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(2,r.size());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertTrue(r.hasNext());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.next().size());	0
344	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertTrue(r.next()instanceofODocument);	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),is(1));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),is(2));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"db.command(""STR"");"	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.size(),is(1));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),equalTo(1));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.size(),is(2));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),equalTo(2));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(1,index.getSize());	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),is(3));	0
345	10	orientechnologies_orientdb	OLuceneManualIndexTest#shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertThat(index.getSize(),is(4));	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(1);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffffL);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1L);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]buf=EbmlUtil.convertToBytes(1);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffff);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
346	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INTEGER);	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),instanceOf(RpcRequestProcessor.class));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),is(rpcRequestProcessor1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	1
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),is(rpcRequestProcessor2));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),equalTo(rpcRequestProcessor1));	0
347	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd2));	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(not(notNullValue())));	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals(0,response.getMaxRetries());	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getCode());"	0
348	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getStatusCode());"	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(actual,expected);	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
349	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
