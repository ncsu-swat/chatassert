TestID	NumPreds	TrueOracle	GenOracle	Correct
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(expected.equals(actual));	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(expected,equalTo(actual));	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertNotEquals(expected,actual);	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(expected.containsAll(actual));	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertArrayEquals(expected,actual);	0
0	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(expected==actual);	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertNotNull(method);	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,notNullValue());	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(TeardownMethod.class)));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(TeardownFilter.class)));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(Teardown.class)));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(notNullValue()));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(TeardownMethod.class));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(Teardown.class));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(TeardownClass.class)));	0
1	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(TeardownFilter.class));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(expected));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(expected,actual,is(equalTo(expected)));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(equalTo(expected)));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,greaterThan(expected));	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual).isEqualTo(expected);	0
2	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertNotEquals(expected,actual);	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	mapper.writeValueAsString(anno);	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+"""	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",anno);"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",anno"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	mapper.writeValue(anno);	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",anno);"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",anno);"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",anno);"	0
3	10	"org.junit.Assert.assertSerializationEqualsSpec(anno,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut,times(1)).rotate(90.0,RotationAnnotation.HeightExceedsWidthOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut,times(1)).rotate(90.0,RotationAnnotation.WidthExceedsWidthOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut).rotate(90.0,RotationAnnotation.WidthExceedsWidthOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut).rotate(90.0,RotationAnnotation.HeightExceedsWidthOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut).rotate(90.0,RotationAnnotation.WidthExceedsHeightOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut,times(1)).rotate(90.0,RotationAnnotation.HeightExceedsHeightOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut,times(1)).rotate(90.0,RotationAnnotation.WidthExceedsHeightOnly);	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	org.junit.Assert.assertEquals(90.0,sut.getRotationAnnotation().asAnnotation());	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	org.junit.Assert.assertEquals(GMOperation.RotationAnnotation.HeightExceedsWidthOnly,sut.getRotationAnnotation());	0
4	10	"org.junit.Assert.assertThat(sut.getCmdArgs(),hasItem(""STR""));"	verify(sut,times(1)).rotate(90.0,RotationAnnotation.HeightExceedsHorizontalOnly);	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returnedOriginalState=trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returned=trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>result=trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returnedOriginal=trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>()));	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returnedSet=trackedSet.returnOriginalState(newArrayList<OMultiValueChangeEvent<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returnedOriginalState=trackedSet.returnOriginalState(newArrayList<OMultiValueChange<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>returned=trackedSet.returnOriginalState(newArrayList<OMultiValueChange<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	finalSet<String>result=trackedSet.returnOriginalState(newArrayList<OMultiValueChange<String,String>>());	0
5	10	org.junit.Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));	"trackedSet.remove(""STR"");"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR"",""STR"",""STR""));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	org.junit.Assert.assertEquals(l,l2);	1
6	10	org.junit.Assert.assertEquals(l,l2);	org.junit.Assert.assertEquals(l,l2);	1
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR"",""STR""));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR""));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create((Iterable<String>)Arrays.asList(""STR"",""STR"",""STR""));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList(""STR"",""STR"",""STR"")));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList(""STR"",""STR"")));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(asList(""STR"",""STR"",""STR""));"	0
6	10	org.junit.Assert.assertEquals(l,l2);	"finalAList<String>l4=AList.create(Collections.singletonList(""STR""),Arrays.asList(""STR"",""STR"",""STR""));"	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>set=manager.getNewRecords();	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>refs=manager.getNewRecords();	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>links=manager.getNewRecords();	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().contains(doc2));	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	manager.setNewRecords(Arrays.asList(doc2));	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().isEmpty());	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	set(manager.getNewRecords());	0
7	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	manager.setNewRecords(Arrays.asList(doc));	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	"serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	"SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtil.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=makeSSLSocketFactory(keyStorePath,newchar[0]);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(keyStorePath,newchar[]{'a','b'});	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(keyStorePath,StandardCharsets.UTF_8);	0
8	10	org.junit.Assert.assertNotNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(keyStorePath,newchar[]{'a'});	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	server.shutdown();	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	server.get().shutdown();	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	Serverserver=mock(Server.class);	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown(){}};	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown(){return;}};	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	Serverserver=newServer(){@Overridepublicvoidshutdown()throwsException{}};	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	"Serverserver=newServer(""STR""){@Overridepublicvoidshutdown(){}};"	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	Serverserver=newServer();	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	"server.setAvailability(""STR"");"	0
9	10	org.junit.Assert.assertTrue(testFunctionAvailable(false));	"Serverserver=newServer(""STR"");"	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(null));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(3.14d));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(1.0d));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(1.23d));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(DOUBLE_ZERO));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(0,doubleSerializer.getObjectSize(null));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(newDouble(3.14d)));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(newDouble(3.14d),newObject[]{3.14d}));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(newDouble(0.0d),null));	0
10	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSize(newDouble(3.14d),newObject[0]));	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertEquals(EnglishAnalyzer.class,analyzer.getWrappedAnalyzer(""STR"").getClass());"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertEquals(StandardAnalyzer.class,analyzer.getWrappedAnalyzer(""STR"").getClass());"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertEquals(EnglishAnalyzer.class,analyzer.getWrappedAnalyzer(""STR"").getClass());"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR""),instanceOf(StandardAnalyzer.class));"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR""),instanceOf(EnglishAnalyzer.class));"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertEquals(StandardAnalyzer.class,analyzer.getWrappedAnalyzer(""STR"").getClass());"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(""STR"",analyzer.getWrappedAnalyzer(""STR""),instanceOf(EnglishAnalyzer.class));"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(""STR"",analyzer.getWrappedAnalyzer(""STR""),is(equalTo(StandardAnalyzer.class)));"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(""STR"",analyzer.getWrappedAnalyzer(""STR""),is(equalTo(EnglishAnalyzer.class)));"	0
11	10	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR"")).isNotNull();"	"org.junit.Assert.assertThat(analyzer.getWrappedAnalyzer(""STR""),is(StandardAnalyzer.class));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertEquals(attrs(),Records.mLabel(""STR""));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertEquals(attrs(),mLabel(""STR""));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasItem(attr(SHAPE,M_RECORD)));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertEquals(attrs(M_RECORD,mLabel(""STR"")),empty());"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),deepEquals(attrs(SHAPE,M_RECORD)));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasEntry(""STR"",newTextNode(""STR"")));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasItem(newSimpleAttribute(SHAPE,M_RECORD)));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasItem(newSimpleAttribute(M_RECORD,""STR"")));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasItem(forNode(""STR"")));"	0
12	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"org.junit.Assert.assertThat(Records.mLabel(""STR""),hasItem(attr(SHAPE,M_HEADING)));"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertTrue(out.contains(""STR""));"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertThat(out,containsString(""STR""));"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertEquals(""STR"",out);"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"System.out.println(""STR""+out);"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertThat(out,is(""STR""));"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	System.out.println(out);	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertTrue(out.contains(""STR""));"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	System.err.println(out);	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR""+""STR"",out);"	0
13	10	"org.junit.Assert.assertThat(out).contains(""STR"");"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",out);"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertThat(protocol0.getProvidedProtocol(),is(""STR""));"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertThat(protocol0.getProvidedProtocol(),equalTo(""STR""));"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertThat(protocol0.getProvidedProtocol(),is(equalTo(""STR"")));"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"Protocolprotocol1=newProtocol(""STR"");"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	org.junit.Assert.assertThat(protocol0.getProvidedProtocol(),is(nullValue()));	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertTrue(protocol0.getProvidedProtocol().equals(""STR""));"	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	StringprovidedProtocol=protocol0.getProvidedProtocol();	0
14	10	"org.junit.Assert.assertEquals(""STR"",protocol0.getProvidedProtocol());"	"org.junit.Assert.assertTrue(protocol0.getProvidedProtocol().contains(""STR""));"	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertArrayEquals(expected,actual);	1
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(equalTo(expected)));	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertTrue(actual.length==expected.length);	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(expected));	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertArrayEquals(expected,actual);	1
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual[0]);	0
15	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head.attributes).hasSize(1);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head.attrs).hasSize(1);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head.attributes).hasSize(2);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"org.junit.Assert.assertThat(head,hasItem(""STR""));"	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"org.junit.Assert.assertThat(head,hasItem(""STR"",""STR""));"	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head).hasSize(1);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head.attrs).hasSize(2);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	org.junit.Assert.assertThat(head).hasSize(2);	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	finalAttributes<EndLabel>attributes=head.attrs();	0
16	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	finalAttributesattributes=head.attrs();	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertEquals(0,cm.count(""STR""));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"cm.remove(""STR"");"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertEquals(1,cm.count(""STR""));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertEquals(0,cm.count(""STR""));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertThat(cm.count(""STR""),is(0));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertEquals(2,cm.count(""STR""));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"intcount=cm.count(""STR"");"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertThat(cm.count(""STR""),equalTo(0));"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"org.junit.Assert.assertThat(cm.count(""STR"")).isEqualTo(0);"	0
17	10	org.junit.Assert.assertEquals(2,cm.count(poolKey));	"cm.removeConn(""STR"");"	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertThat(m,instanceOf(BusySpinningMetronome.class));	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertNotNull(m);	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertEquals(BusySpinningMetronome.INSTANCE,m);	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertEquals(BusySpinningMetronome.INSTANCE,m);	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertThat(m).isNotNull();	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertThat(m,instanceOf(MasterMetronome.class));	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getMetronomeClass());	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertThat(m.getMetronomeClass(),instanceOf(BusySpinningMetronome.class));	0
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	1
18	10	org.junit.Assert.assertEquals(BusySpinningMetronome.class,m.getClass());	org.junit.Assert.assertThat(m,instanceOf(CustomMetronome.class));	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>expectedKeys=newHashMap<Object,Integer>();	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>convertedKeys=newHashMap<Object,Integer>();	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(multiValueChangeEvent,addedKeys,removedKeys);	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>updatedKeys=newHashMap<Object,Integer>();	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	org.junit.Assert.assertEquals(1,addedKeys.size());	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove);	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(multiValueChangeEvent,keysToAdd,removedKeys);	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	org.junit.Assert.assertEquals(1,addedKeys.get(42));	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	org.junit.Assert.assertEquals(addedKeys,removedKeys);	0
19	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	org.junit.Assert.assertEquals(1,addedKeys.get(41));	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env).getName());"	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	"org.junit.Assert.assertEquals(""STR"",newAppveyor().getName());"	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env).getName());"	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	org.junit.Assert.assertEquals(Appveyor.APPVEYOR_NAME,newAppveyor(env).getName());	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	org.junit.Assert.assertEquals(APPVEYOR_NAME,newAppveyor(env).getName());	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	org.junit.Assert.assertEquals(Appveyor.APPVEYOR_NAME,newAppveyor().getName());	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	"org.junit.Assert.assertEquals(""STR"",newAppveyor().getName());"	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	org.junit.Assert.assertEquals(Appveyor.APPVEYOR_NAME,env.getAppveyor().getName());	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	"org.junit.Assert.assertEquals(""STR"",env.getAppveyor().getName());"	0
20	10	"org.junit.Assert.assertEquals(""STR"",newAppveyor(env()).getName());"	Appveyorappveyor=newAppveyor(env);	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"ACollectionHelper.flatMap(Arrays.asList(""STR"",""STR""),tokens);"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"ACollectionHelper.flatMap(Collections.singletonList(""STR""),tokens);"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalCollection<String>coll=Arrays.asList(""STR"",""STR"");"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalIterable<String>coll=Arrays.asList(""STR"",""STR"");"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"ACollectionHelper.flatMap(Arrays.asList(""STR"",""STR"",""STR""),tokens);"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalIterable<String>values=Arrays.asList(""STR"",""STR"");"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalCollection<String>values=Arrays.asList(""STR"",""STR"");"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"ACollectionHelper.flatMap(Arrays.asList(""STR""),tokens);"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalCollection<String>coll=Arrays.asList(""STR"",""STR"",""STR"");"	0
21	10	org.junit.Assert.assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"finalIterable<String>coll=Arrays.asList(""STR"",""STR"",""STR"");"	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertEquals(1,manager.getLockCount());	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertEquals(0,manager.getLockCount());	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertThat(manager.getLockCount(),is(0));	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertEquals(0,manager.getLockCount());	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertEquals(1,manager.getLockCount());	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertThat(manager.getLockCount(),is(1));	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertThat(manager.getLockCount(),equalTo(1));	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	org.junit.Assert.assertThat(manager.getLockCount(),equalTo(0));	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	finalCountableLockWrapper<String>wrapper=newCountableLockWrapper<String>(lock);	0
22	10	org.junit.Assert.assertEquals(2,wrapper(lock).getLockCount());	finalCountableLockWrapper<String>wrapper=newCountableLockWrapper<String>(lock,0);	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"List<ODocument>qResult6=db.command(newOCommandSQL(""STR"")).execute();"	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"db.command(newOCommandSQL(""STR"")).execute();"	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"List<ODocument>qResult6=db.command(newOCommandSQL(""STR"",""STR"")).execute();"	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	List<ODocument>qResult6=db.command(newOCommandSQL()).execute();	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	org.junit.Assert.assertEquals(3,qResult.size());	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"List<ODocument>qResult6=db.command(newOCommandSQL(""STR"")).execute(Arrays.asList(qResult,qResult2,qResult3,qResult4,qResult5));"	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	org.junit.Assert.assertEquals(2,qResult.size());	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	org.junit.Assert.assertEquals(1,qResult.size());	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"List<ODocument>qResult6=db.command(newCommandSQL(""STR"")).execute();"	0
23	10	org.junit.Assert.assertEquals(qResult.size(),qResult2.size());	"List<ODocument>qResult6=db.command(newOCommandSQL(""STR"")).execute(Arrays.asList(qResult1,qResult2,qResult3,qResult4,qResult5));"	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertEquals(1,authService.getServices().size());	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertEquals(2,authService.getServices().size());	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertEquals(0,authService.getServices().size());	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertNotNull(authService);	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertTrue(authService.getServices().size()==1);	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertThat(authService.getServices()).hasSize(1);	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	List<AuthService>services=authService.getServices();	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertTrue(authService.getServices().size()==2);	0
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	1
24	10	org.junit.Assert.assertThat(authService.getServices()).hasSize(2);	org.junit.Assert.assertTrue(authService.getServices().size()==3);	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res.size(),is(1));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res,hasItem(1));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res.size(),is(2));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertEquals(1,res.size());	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res,hasSize(1));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	"org.junit.Assert.assertThat(res,hasItem(""STR""));"	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res,is(notNullValue()));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertEquals(2,res.size());	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertThat(res.size(),equalTo(1));	0
25	10	org.junit.Assert.assertThat(res.size()).isEqualTo(1);	org.junit.Assert.assertEquals(3,res.size());	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",15,""STR"",""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	org.junit.Assert.assertEquals(sair��ana,laivas_ir��ana);	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	org.junit.Assert.assertTrue(sair��ana.containsAll(laivas_ir��ana));	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",15,""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",15,""STR"",""STR"",""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"pagaatne.addAttribute(AttributeNames.i_Sair��,""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",15);"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",14,""STR"",""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",20,""STR"",""STR"");"	0
26	10	"org.junit.Assert.assertInflection(sairšana,pagaatne,""STR"");"	"List<Wordform>sair��=loc��t��js.generateInflectionsFromParadigm(""STR"",16,""STR"",""STR"");"	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAOption<String>uppercaseSecond=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAOption<String>lowercaseFirst=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.nothing();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	"finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.some(""STR"");}};"	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicOptional<String>apply(Stringparam){returnAOption.none();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	"finalAOption<String>uppercaseSecond=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.some(""STR"");}};"	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverrideprotectedAOption<String>apply(Stringparam){returnAOption.none();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.any();}};	0
27	10	org.junit.Assert.assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringinput){returnAOption.none();}};	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertEquals(g,OrientGraphFactory.getActiveGraph());	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertEquals(graph,g);	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertEquals(g,OrientGraphFactory.getActiveGraph());	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertTrue(g==OrientGraphFactory.getActiveGraph());	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertThat(g,is(equalTo(graph)));	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertThat(g,is(notNullValue()));	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertEquals(graph,g);	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertNotNull(g);	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertEquals(g,OrientGraphManager.getActiveGraph());	0
28	10	org.junit.Assert.assertSame(g,OrientBaseGraph.getActiveGraph());	org.junit.Assert.assertThat(g,is(graph));	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(1));	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(0,res.size());	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(2,res.size());	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(1);	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(2));	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res,hasSize(1));	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(0));	0
29	10	org.junit.Assert.assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	org.junit.Assert.assertEquals(metadata,metadata);	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	metadata=newMetadata();	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	org.junit.Assert.assertEquals(metadata.getMetadata(),md);	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	"org.junit.Assert.assertEquals(""STR"",metadata.getName());"	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	"org.junit.Assert.assertEquals(""STR"",metadata.getMetadata().getName());"	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	org.junit.Assert.assertEquals(0,metadata.size());	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	org.junit.Assert.assertEquals(metadata.getMetadata(),metadata);	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	org.junit.Assert.assertEquals(metadata,md);	0
30	10	org.junit.Assert.assertEquals(1,output.getEmitted().size());	"org.junit.Assert.assertEquals(""STR"",metadata.toString());"	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(expectedResult));	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl).isEqualTo(expectedResult);	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,equalTo(expectedResult));	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertTrue(normalizedUrl.contains(expectedResult));	0
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
31	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertTrue(normalizedUrl.contains(expectedResult));	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(""STR"");"	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getPath());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	StringhazelcastVersion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"Stringversion=getBuildInfoUtils(file).getHazelcastVersionFromJarOrNull(""STR"");"	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=getBuildInfoUtils().getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"StringhazelcastVersion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(""STR"");"	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringresult=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.toURI().toString());	0
32	10	org.junit.Assert.assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"StringhazelcastVersion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath()+""STR"");"	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertEquals(2,res.size());	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertEquals(1,res.size());	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertEquals(3,res.size());	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertEquals(2,res.size());	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertThat(res.size(),is(1));	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertTrue(res.size()>0);	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertEquals(1,res.size());	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertTrue(res.size()>1);	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertTrue(res.size()==1);	0
33	10	org.junit.Assert.assertEquals(0,res.size());	org.junit.Assert.assertTrue(res.size()==2);	0
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(expected));	0
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(equalTo(expected)));	0
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertThat(actual).isEqualTo(expected);	0
34	10	org.junit.Assert.assertEquals(expected,actual);	"org.junit.Assert.assertThat(""STR"",actual,is(expected));"	0
34	10	org.junit.Assert.assertEquals(expected,actual);	"org.junit.Assert.assertThat(""STR"",actual,is(equalTo(expected)));"	0
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	1
34	10	org.junit.Assert.assertEquals(expected,actual);	org.junit.Assert.assertEquals(actual,expected);	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(expectedResult));	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl).isEqualTo(expectedResult);	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,equalTo(expectedResult));	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertTrue(normalizedUrl.contains(expectedResult));	0
35	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertTrue(normalizedUrl.contains(expectedResult));	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_String,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Text,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	aizkost.add(tu);	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Aizkost,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Name,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	tu.addAttribute(AttributeNames.i_Aizkost,aizkost);	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	tu.addAttribute(AttributeNames.i_Number,AttributeNames.v_Long);	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Sex,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Dog,""STR"");"	0
36	10	"org.junit.Assert.assertInflection(aizkost,tu,""STR"");"	"tu.addAttribute(AttributeNames.i_Number,""STR"");"	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertTrue(v��rds.isRecognized());	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertFalse(v��rds.isRecognized());	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertThat(v��rds.isRecognized(),is(true));	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertTrue(v��rds.isRecognized());	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertThat(v��rds.isRecognized(),equalTo(true));	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertTrue(v��rds.isRecognized());	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertThat(v��rds.isRecognized(),equalTo(false));	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertFalse(v��rds.isRecognized());	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertThat(v��rds.isRecognized(),is(false));	0
37	10	org.junit.Assert.assertTrue(vārds.isRecognized());	org.junit.Assert.assertFalse(v��rds.isRecognized());	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=newOContextConfiguration();	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	org.junit.Assert.assertEquals(parent,settings.getValue(OGlobalConfiguration.CONFIG));	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	org.junit.Assert.assertEquals(parent,settings.getValue(OGlobalConfiguration.DB_POOL_MAX));	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=newOContextConfiguration(settings);	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=newOContextConfiguration(parent,settings);	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationcontext=newOContextConfiguration();	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=(OContextConfiguration)OContextConfiguration.builder().build();	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfiguration=newOContextConfiguration();	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OGlobalConfigurationconfig=newOGlobalConfiguration();	0
38	10	org.junit.Assert.assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	org.junit.Assert.assertEquals(parent,settings.getValue(OGlobalConfiguration.INSTANCE));	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+"");"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR"";);"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR"";);"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+OPEN);"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR"";);"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+');"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR"";);"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+'STR'+NEW_LINE+"");"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+'STR'+NEW_LINE+""STR""+NEW_LINE+"");"	0
39	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"org.junit.Assert.assertThat(mapper.writeValueAsString(service),is(""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE+""STR""+NEW_LINE;);"	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(1,execute.size());	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(2,execute.size());	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(3,execute.size());	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute.size(),is(2));	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute).hasSize(2);	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertTrue(execute.size()>0);	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute).hasSize(1);	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute.size(),equalTo(2));	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertTrue(execute.size()>0);	0
40	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute.size(),equalTo(1));	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Stringm3=builder.asText(collection);	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Stringm3=builder.asText(geometryCollection);	0
41	10	org.junit.Assert.assertEquals(m2,m1);	org.junit.Assert.assertEquals(m1,m2);	0
41	10	org.junit.Assert.assertEquals(m2,m1);	"org.junit.Assert.assertEquals(""STR"",m1);"	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Strings1=builder.asText(collection);	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Stringm3=collection.toText();	0
41	10	org.junit.Assert.assertEquals(m2,m1);	org.junit.Assert.assertTrue(m1.equals(m2));	0
41	10	org.junit.Assert.assertEquals(m2,m1);	org.junit.Assert.assertEquals(m1,m2);	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Stringm3=collection.asText();	0
41	10	org.junit.Assert.assertEquals(m2,m1);	Stringm3=collection.fromText();	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(1,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(FLOAT_SIZE,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(3,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(4,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(1,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),0);	0
42	10	org.junit.Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	workerProcessFailureMonitor.run();	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	verify(workerProcess,times(1)).exitValue();	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	org.junit.Assert.assertThat(workerProcessFailureMonitor.run(),is(true));	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	workerProcess=addRunningWorkerProcess();	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	"workerProcessFailureMonitor.run(""STR"");"	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	org.junit.Assert.assertThat(workerProcessFailureMonitor.run(),is(false));	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	verify(workerProcess,times(1)).run();	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	"workerProcessFailureMonitor.run(newException(""STR""));"	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	workerProcessFailureMonitor.run(null);	0
43	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{failureHandler,WORKER_OOME}});	workerProcessFailureMonitor.check();	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertNotNull(file);	1
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertTrue(file.exists());	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file,is(notNullValue()));	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file).isNotNull();	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file,instanceOf(File.class));	0
44	10	org.junit.Assert.assertNotNull(file);	"org.junit.Assert.assertEquals(""STR"",file.getName());"	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file.exists(),is(true));	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file.exists(),equalTo(true));	0
44	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertNotNull(file);	1
44	10	org.junit.Assert.assertNotNull(file);	"org.junit.Assert.assertEquals(""STR"",file.getPath());"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	org.junit.Assert.assertFalse(multiKey.equals(newObject()));	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	org.junit.Assert.assertFalse(multiKey.equals(multiKey));	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"org.junit.Assert.assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR"",""STR""))));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"org.junit.Assert.assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(""STR""))));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"org.junit.Assert.assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR""))));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"finalOMultiKeymultiKey2=newOMultiKey(Arrays.asList(""STR"",""STR""));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"org.junit.Assert.assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR"",""STR""))));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	"finalOMultiKeymultiKey2=newOMultiKey(Collections.singletonList(""STR""));"	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	org.junit.Assert.assertFalse(multiKey.equals(newObject()));	0
45	10	"org.junit.Assert.assertFalse(multiKey.equals(""STR""));"	org.junit.Assert.assertFalse(multiKey.equals(multiKey));	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
46	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertFalse(deflateExtension.isServerNoContextTakeover());	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	1
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertFalse(deflateExtension.isServerNoContextTakeover());	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertEquals(false,deflateExtension.isServerNoContextTakeover());	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertThat(deflateExtension.isServerNoContextTakeover(),is(false));	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertThat(deflateExtension.isServerNoContextTakeover(),is(true));	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertThat(deflateExtension.isServerNoContextTakeover(),equalTo(false));	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	booleanisServerNoContextTakeover=deflateExtension.isServerNoContextTakeover();	0
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	1
47	10	org.junit.Assert.assertTrue(deflateExtension.isServerNoContextTakeover());	org.junit.Assert.assertEquals(true,deflateExtension.isServerNoContextTakeover());	0
48	10	org.junit.Assert.assertNotNull(uuid);	org.junit.Assert.assertNotNull(uuid);	1
48	10	org.junit.Assert.assertNotNull(uuid);	"org.junit.Assert.assertEquals(""STR"",uuid.toString());"	0
48	10	org.junit.Assert.assertNotNull(uuid);	"org.junit.Assert.assertEquals(""STR"",uuid.toString());"	0
48	10	org.junit.Assert.assertNotNull(uuid);	org.junit.Assert.assertThat(uuid,is(notNullValue()));	0
48	10	org.junit.Assert.assertNotNull(uuid);	"org.junit.Assert.assertEquals(UUID.fromString(""STR""),uuid.toString());"	0
48	10	org.junit.Assert.assertNotNull(uuid);	"System.out.println(""STR""+uuid);"	0
48	10	org.junit.Assert.assertNotNull(uuid);	org.junit.Assert.assertNull(uuid);	0
48	10	org.junit.Assert.assertNotNull(uuid);	"org.junit.Assert.assertTrue(uuid.equals(UUID.fromString(""STR"")));"	0
48	10	org.junit.Assert.assertNotNull(uuid);	org.junit.Assert.assertTrue(uuid.equals(UUID.randomUUID()));	0
48	10	org.junit.Assert.assertNotNull(uuid);	org.junit.Assert.assertNotNull(uuid);	1
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.get(0));	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.size());	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.get(0));	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.toString());	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.iterator().next());	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.get(0));	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.size());	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertTrue(version.contains(expected));	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(1,version.size());	0
49	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.size());	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertTrue(a.equals(b));	1
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertThat(a,equalTo(b));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertFalse(a.equals(b));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertTrue(a.equals(b));	1
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertEquals(true,a.equals(b));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertThat(a.equals(b),is(true));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertEquals(false,a.equals(b));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	org.junit.Assert.assertFalse(a.equals(b));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	PuzzleStatec=newPuzzleState(getPuzzle(1));	0
50	10	org.junit.Assert.assertTrue(a.equals(b));	PuzzleStatec=newPuzzleState(getPuzzle(2));	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	1
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Record.rec(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertThat(Records.rec(""STR""),equalTo(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertThat(Records.rec(""STR"")).isEqualTo(""STR"");"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertThat(Records.rec(""STR""),is(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertThat(rec(""STR""),equalTo(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertThat(rec(""STR""),is(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertEquals(""STR"",records.rec(""STR""));"	0
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	1
51	10	"org.junit.Assert.assertEquals(""STR"",Records.rec(""STR""));"	"org.junit.Assert.assertEquals(""STR"",rec(""STR""));"	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertFalse(p.isSolved());	1
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertThat(p.isSolved(),is(false));	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertFalse(p.isSolved());	1
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertThat(p.isSolved(),equalTo(false));	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertFalse(p.isSolved());	1
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertTrue(p.isSolved());	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertFalse(p.isSolved());	1
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertThat(p.isSolved(),is(true));	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertEquals(false,p.isSolved());	0
52	10	org.junit.Assert.assertFalse(p.isSolved());	org.junit.Assert.assertTrue(p.isSolved());	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertThat(result.getProperty(""STR""),is(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertThat(result.getProperty(""STR""),equalTo(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(1,result.getProperty(""STR"").size());"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertNull(result.getProperty(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(id.getIdentity(),result.getProperty(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(""STR"",result.getProperty(""STR"").toString());"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(id,result.getProperty(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(doc2.getProperty(""STR""),result.getProperty(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(""STR"",result.getProperty(""STR""));"	0
53	10	"org.junit.Assert.assertEquals((long)result.next().getProperty(""STR""),1L);"	"org.junit.Assert.assertEquals(""STR"",result.getProperty(""STR"").getValue());"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.addProperty(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.LONG);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.getProperty(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.INT);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.property(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.INTEGER);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.setProperty(""STR"",OType.STRING);"	0
54	10	"org.junit.Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.DOUBLE);"	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,greaterThan(0));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,is(1));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,greaterThan(1));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,greaterThan(0L));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,is(1L));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,equalTo(1));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,greaterThanOrEqualTo(1));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count).isEqualTo(1);	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,is(2L));	0
55	10	org.junit.Assert.assertEquals(1,count);	org.junit.Assert.assertThat(count,greaterThanOrEqualTo(1L));	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	org.junit.Assert.assertEquals(1,result.size());	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,""STR"",""STR""))));"	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	org.junit.Assert.assertEquals(1,result.size());	0
56	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,5,""STR"",""STR""))));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertEquals(""STR"",env.get(""STR"").getCiName());"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertEquals(""STR"",env.get(""STR"").getCiName());"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"org.junit.Assert.assertThat(env.get(""STR""),equalTo(""STR""));"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"",""STR"");"	0
57	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"");"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(URI.create(""STR""),manifest.getLogoUri());"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR"",manifest.getLogoUri().toString());"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(manifest.getLogoUri()).isEqualTo(URI.create(""STR""));"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	org.junit.Assert.assertNotNull(manifest);	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR"",manifest.getLogoUri().toString());"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(URI.create(""STR""),manifest.getLogoUri());"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	org.junit.Assert.assertNotNull(manifest.getLogoUri());	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(newURI(""STR""),manifest.getLogoUri());"	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	org.junit.Assert.assertNull(manifest.getLogoUri());	0
58	10	"org.junit.Assert.assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR"",manifest.getLogoUri().getPath());"	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertThat(contentEncoding,is(notNullValue()));	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	"org.junit.Assert.assertThat(contentEncoding.getValue(),is(""STR""));"	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertThat(contentEncoding.getValue(),is(notNullValue()));	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	"org.junit.Assert.assertThat(contentEncoding.getValue()).isEqualTo(""STR"");"	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertThat(contentEncoding).isNotNull();	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	"org.junit.Assert.assertThat(contentEncoding.getValue(),is(equalTo(""STR"")));"	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	"org.junit.Assert.assertThat(contentEncoding).isEqualTo(""STR"");"	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertThat(contentEncoding).hasSize(0);	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertThat(contentEncoding.getValue(),is(nullValue()));	0
59	10	org.junit.Assert.assertThat(contentEncoding,is(nullValue()));	org.junit.Assert.assertNotNull(contentEncoding);	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.ORDERED,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.UNORDERED,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().updateSequence(""STR"",OSequence.SEQUENCE_TYPE.ORDERED,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.SINGLE,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.CREATED,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.ALL,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.ORDERED,params);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.SORTED,null);"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.ORDERED,newOSequenceCreateParams());"	0
60	10	org.junit.Assert.assertEquals(count,1);	"session.getMetadata().getSequenceLibrary().createSequence(""STR"",OSequence.SEQUENCE_TYPE.ORDERED,newCreateParams());"	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	1
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertThat(propertyIndex.getClassName(),is(""STR""));"	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertThat(propertyIndex.getClassName(),equalTo(""STR""));"	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertThat(propertyIndex.getClassName(),is(equalTo(""STR"")));"	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	1
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	StringclassName=propertyIndex.getClassName();	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	org.junit.Assert.assertEquals(OPropertyIndexDefinition.class.getName(),propertyIndex.getClassName());	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	org.junit.Assert.assertEquals(OPropertyIndexDefinitionTest.class.getName(),propertyIndex.getClassName());	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	org.junit.Assert.assertEquals(OPropertyIndexDefinitionTest.class.getSimpleName(),propertyIndex.getClassName());	0
61	10	"org.junit.Assert.assertEquals(""STR"",propertyIndex.getClassName());"	"org.junit.Assert.assertTrue(propertyIndex.getClassName().contains(""STR""));"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=MyClass.class.getMethod(""STR"",String.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTest.class.getMethod(""STR"",String.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTestClass.class.getMethod(""STR"",String.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=MyClass.class.getMethod(""STR"");"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	Objectinstance=newObject();	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTest.class.getMethod(""STR"",Object.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTestClass.class.getMethod(""STR"",Object.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=MyClass.class.getMethod(""STR"",Object.class);"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTestClass.class.getMethod(""STR"");"	0
62	10	org.junit.Assert.assertFalse(InvokeMethodTest.hasBeenInvoked);	"Methodmethod=ReflectionUtilsTest.class.getMethod(""STR"");"	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertTrue(macAddress.isMulticast());	1
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertFalse(macAddress.isMulticast());	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertEquals(true,macAddress.isMulticast());	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertTrue(macAddress.isMulticast());	1
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertTrue(macAddress.isMulticast());	1
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertEquals(false,macAddress.isMulticast());	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertFalse(macAddress.isMulticast());	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertThat(macAddress.isMulticast(),is(true));	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertThat(macAddress.isMulticast(),equalTo(true));	0
63	10	org.junit.Assert.assertTrue(macAddress.isMulticast());	org.junit.Assert.assertThat(macAddress.isMulticast(),is(false));	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertNotNull(exception);	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertEquals(cause,exception.getCause());	1
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertSame(cause,exception.getCause());	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	"org.junit.Assert.assertEquals(""STR"",exception.getMessage());"	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertEquals(cause.getMessage(),exception.getMessage());	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertEquals(cause.getMessage(),exception.getMessage());	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertEquals(cause,exception.getCause());	1
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertThat(exception,instanceOf(ReflectionException.class));	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertThat(exception,is(instanceOf(ReflectionException.class)));	0
64	10	org.junit.Assert.assertEquals(cause,exception.getCause());	org.junit.Assert.assertThat(exception,is(instanceOf(RuntimeException.class)));	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertTrue(port>0);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertTrue(port>0);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	"System.out.println(""STR""+port);"	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertEquals(0,port);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	"org.junit.Assert.assertEquals(""STR"",port);"	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertEquals(8080,port);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertThat(port).isEqualTo(8080);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertTrue(port>=0);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertThat(port).isEqualTo(0);	0
65	10	org.junit.Assert.assertThat(port,not(equalTo(0)));	org.junit.Assert.assertNotNull(port);	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	1
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	1
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),is(true));	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(true));	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(false));	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),is(false));	0
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	1
66	10	org.junit.Assert.assertTrue(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertEquals(1,createdFrame.size());	1
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertThat(createdFrame,hasItem(curframe));	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertThat(createdFrame).hasSize(1);	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertEquals(1,createdFrame.size());	1
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertEquals(2,createdFrame.size());	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertThat(createdFrame,hasItems(curframe));	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertTrue(createdFrame.size()>0);	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertEquals(0,createdFrame.size());	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertThat(createdFrame).hasSize(2);	0
67	10	org.junit.Assert.assertEquals(1,createdFrame.size());	org.junit.Assert.assertThat(createdFrame.size(),is(1));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertTrue(throttlingLogger.isThrottling());	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertTrue(throttlingLogger.isThrottled());	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertTrue(throttlingLogger.isEnabledFor(FATAL));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertTrue(throttlingLogger.isThrottling(rateMs));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertThat(throttlingLogger,is(instanceOf(ThrottlingLogger.class)));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertTrue(throttlingLogger.isThrottled(rateMs));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertThat(throttlingLogger,is(notNullValue()));	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertFalse(throttlingLogger.isThrottling());	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertFalse(throttlingLogger.isThrottled());	0
68	10	org.junit.Assert.assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	org.junit.Assert.assertThat(throttlingLogger,instanceOf(ThrottlingLogger.class));	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertEquals(""STR"",plugin.getName());"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertEquals(""STR"",plugin.getName());"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertThat(plugin.getName(),is(""STR""));"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	1
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertEquals(Assertions.""STR"",plugin.getName());"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertTrue(plugin.getName().contains(""STR""));"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertTrue(plugin.getName().contains(""STR""));"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertTrue(plugin.getName().equals(""STR""));"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertTrue(plugin.getName().contains(""STR""));"	0
69	10	"org.junit.Assert.assertThat(plugin.getName(),equalTo(""STR""));"	"org.junit.Assert.assertTrue(plugin.getName().equals(""STR""));"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>words=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>inflections=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"List<Wordform>words=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"List<Wordform>inflections=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>result=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"List<Wordform>result=loc��t��js.generateInflections(""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>inflections=loc��t��js.generateInflections(""STR""+""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>words=loc��t��js.generateInflections(""STR""+""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"List<Wordform>inflections=loc��t��js.generateInflections(""STR""+""STR"");"	0
70	10	"org.junit.Assert.assertTrue(""STR"".matches(""STR""));"	"ArrayList<Wordform>words=loc��t��js.generateInflections(""STR""+""STR""+""STR"");"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""),is(expected));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	1
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""),is(equalTo(expected)));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"Stringactual=config.toYaml(""STR"");"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""),equalTo(expected));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	1
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""),containsString(expected));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""),hasString(expected));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertThat(config.toYaml(""STR""+""STR""),is(expected));"	0
71	10	"org.junit.Assert.assertEquals(expected,config.toYaml(""STR""));"	"org.junit.Assert.assertEquals(""STR"",config.toYaml(""STR""));"	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertEquals(className,result.getClass(className).getName());	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertEquals(className,schema.getClass(className).getName());	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertEquals(className,result.getResult().getClass(className).getName());	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertEquals(className,result.getClass(className).getName());	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertThat(result.getClass(className),is(notNullValue()));	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	"result=db.command(""STR""+className+""STR"");"	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	"OClassresult2=db.command(""STR""+className+""STR"");"	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	org.junit.Assert.assertThat(result.getClass(className),instanceOf(OClass.class));	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	"org.junit.Assert.assertEquals(className,result.getClass(""STR"").getName());"	0
72	10	org.junit.Assert.assertNull(schema.getClass(className));	OClassclass=schema.getClass(className);	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertThat(result.getTarget(),is(TEST_ONAME_STR002B));	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertThat(result.getTarget(),equalTo(TEST_ONAME_STR002B));	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
73	10	org.junit.Assert.assertSame(this.testTarget002,result.getTarget());	org.junit.Assert.assertSame(TEST_ONAME_STR002B,result.getTarget());	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertEquals(multiKey.hashCode(),mapResult.hashCode());	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertThat(mapResult,is(newObject()));	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertThat(mapResult,equalTo(newObject()));	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertThat(mapResult,is(equalTo(newObject())));	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertEquals(1,mapResult.size());	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertThat(mapResult,is(equalTo(multiKey)));	0
74	10	org.junit.Assert.assertNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
74	10	org.junit.Assert.assertNull(mapResult);	"org.junit.Assert.assertEquals(""STR"",mapResult);"	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(3,result.size());	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(3,result.size());	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result.size(),is(2));	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(2);	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result.size(),is(3));	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.size()==2);	0
75	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(3);	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	List<Profile>profiles=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
76	10	org.junit.Assert.assertThat(anno).isNotNull();	Serviceservice=mapper	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(""STR""));"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),equalTo(""STR""));"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME));	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(nullValue()));	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME+""STR""));"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),equalTo(PROP_NAME));	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertTrue(nameProperty.getName().equals(""STR""));"	0
77	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"db.command(""STR"").close();"	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertNotNull(file);	1
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertTrue(file.exists());	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file,is(notNullValue()));	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file).isNotNull();	0
78	10	org.junit.Assert.assertNotNull(file);	"org.junit.Assert.assertEquals(""STR"",file.getName());"	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file,instanceOf(File.class));	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file.exists(),equalTo(true));	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertThat(file.exists(),is(true));	0
78	10	org.junit.Assert.assertNotNull(file);	org.junit.Assert.assertNotNull(file);	1
78	10	org.junit.Assert.assertNotNull(file);	"org.junit.Assert.assertEquals(""STR"",file.getPath());"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertEquals(""STR"",joined);"	1
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertEquals(""STR"",joined);"	1
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertThat(joined,is(""STR""));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertThat(joined).isEqualTo(""STR"");"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertTrue(joined.contains(""STR""));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertTrue(joined.contains(""STR""));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertThat(joined,equalTo(""STR""));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertThat(joined,is(equalTo(""STR"")));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	"org.junit.Assert.assertTrue(joined.contains(""STR""));"	0
79	10	"org.junit.Assert.assertEquals(""STR"",joined);"	org.junit.Assert.assertTrue(joined.isEmpty());	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(true));	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(true));	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(false));	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(false));	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertEquals(true,qResult.hasNext());	0
80	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertTrue(Turpm��kaj��.isRecognized());	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertFalse(Turpm��kaj��.isRecognized());	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertThat(Turpm��kaj��.isRecognized(),is(true));	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertTrue(Turpm��kaj��.isRecognized());	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertThat(Turpm��kaj��.isRecognized(),equalTo(true));	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertFalse(Turpm��kaj��.isRecognized());	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertThat(Turpm��kaj��.isRecognized(),equalTo(false));	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertThat(Turpm��kaj��.isRecognized(),is(false));	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertTrue(Turpm�IF_ICMPGEkaj��.isRecognized());	0
81	10	org.junit.Assert.assertTrue(Turpmākajā.isRecognized());	org.junit.Assert.assertTrue(Turpm��.isRecognized());	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(0L,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(0,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(0L,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertThat(OVarIntSerializer.readAsLong(bytes),is(0L));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(0l,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(0,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertEquals(-1L,OVarIntSerializer.readAsLong(bytes));	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	longresult=OVarIntSerializer.readAsLong(bytes);	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	longvalue=OVarIntSerializer.readAsLong(bytes);	0
82	10	org.junit.Assert.assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	org.junit.Assert.assertThat(OVarIntSerializer.readAsLong(bytes),equalTo(0L));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.matches(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.contains(expected));	0
83	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(expected.equals(actual));	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternr=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternn=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,is(HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,is(equalTo(HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED))));"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternr=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(newRePattern(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
84	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternn=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
85	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertNotNull(properties);	1
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties,is(notNullValue()));	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties).isEqualTo(newUnknownGitProperties());	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties,is(nullValue()));	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties).isNotNull();	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties,not(notNullValue()));	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertFalse(properties.isEmpty());	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertNull(properties);	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertThat(properties,notNullValue());	0
86	10	org.junit.Assert.assertNotNull(properties);	org.junit.Assert.assertFalse(properties.isEmpty());	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",newCircle(env).getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",newCircle(env).getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.build().getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"System.out.println(""STR"");"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.getCircleBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.getCircle().getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.getCircleBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"org.junit.Assert.assertEquals(""STR"",env.getBuildNumber());"	0
87	10	"org.junit.Assert.assertEquals(""STR"",newCircle(env()).getBuildNumber());"	finalStringbuildNumber=env.getBuildNumber();	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher.lookingAt(),is(true));	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertTrue(matcher.lookingAt());	1
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher.lookingAt(),is(false));	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertFalse(matcher.lookingAt());	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher,lookingAt());	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher.lookingAt(),equalTo(true));	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertTrue(matcher.lookingAt());	1
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher.lookingAt(),equalTo(false));	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	org.junit.Assert.assertThat(matcher,is(true));	0
88	10	org.junit.Assert.assertTrue(matcher.lookingAt());	"org.junit.Assert.assertThat(""STR"",matcher.lookingAt(),is(true));"	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertTrue(YubicoClient.isValidOTPFormat(otp));	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	1
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	1
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertTrue(YubicoClient.isValidOTPFormat(otp));	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertTrue(YubicoClient.isValidOTPFormat(otp));	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	org.junit.Assert.assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
89	10	org.junit.Assert.assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(10.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertThat(result,is(10.5F));	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(10.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertThat(result,equalTo(10.5F));	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(10.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(10.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertThat(result,is(equalTo(10.5F)));	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(1.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertEquals(1.5F,result);	0
90	10	org.junit.Assert.assertTrue(resultinstanceofFloat);	org.junit.Assert.assertThat(result,greaterThan(0f));	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",err,IFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLEIFLE"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	Stringjson=mapper.writeValueAsString(err);	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
91	10	"org.junit.Assert.assertSerializationEqualsSpec(err,""STR"");"	"JSONObjectjson=mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"");"	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertTrue(webSocket.isOpen());	1
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	webSocket.close();	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertTrue(webSocket.isOpen());	1
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertThat(webSocket.isOpen(),is(true));	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertFalse(webSocket.isOpen());	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertTrue(webSocket.isOpen());	1
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertThat(webSocket.isOpen(),equalTo(true));	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertThat(countServerDownLatch.getCount(),is(1));	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	org.junit.Assert.assertThat(webSocket.isOpen(),is(false));	0
92	10	org.junit.Assert.assertTrue(webSocket.isOpen());	server.close();	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url).isEqualTo(""STR"");"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertEquals(""STR"",url);"	1
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertEquals(""STR"",url);"	1
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url,is(equalTo(""STR"")));"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url,is(""STR""));"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url,equalTo(""STR""));"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertTrue(url.contains(""STR""));"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url).isEqualToIgnoringCase(""STR"");"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertTrue(url.contains(""STR""));"	0
93	10	"org.junit.Assert.assertEquals(""STR"",url);"	"org.junit.Assert.assertThat(url).isEqualTo(""STR""+System.getProperty(Keys.CUCUMBERPRO_URL)+""STR"");"	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,instanceOf(JsonSchemaWithLoader.class));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,instanceOf(JsonSchemaFactory.class));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory).isNotNull();	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,instanceOf(JsonSchema.class));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,is(instanceOf(JsonSchemaWithLoader.class)));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,instanceOf(JsonSchemaWithLoaderFactory.class));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,is(instanceOf(JsonSchemaFactory.class)));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory).isInstanceOf(JsonSchemaWithLoader.class);	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,is(instanceOf(JsonSchema.class)));	0
94	10	org.junit.Assert.assertTrue(validate(factory).isSuccess());	org.junit.Assert.assertThat(factory,is(notNullValue()));	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getMonitorId());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getMonitorId());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertThat(responseRead.getResponse(),is(notNullValue()));	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getStreams().size());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getMessageCount());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getStreams().size());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(10,responseRead.getResponse().getMessageCount());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	"org.junit.Assert.assertEquals(""STR"",responseRead.getResponse().getMonitorId());"	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	org.junit.Assert.assertEquals(response,responseRead.getResponse());	0
95	10	org.junit.Assert.assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	"org.junit.Assert.assertEquals(""STR"",responseRead.getResponse().getMessageId());"	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(true));	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(true));	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(false));	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(false));	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	"qResult=db.query(""STR"");"	0
96	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertEquals(true,qResult.hasNext());	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertNotNull(field);	1
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,instanceOf(PrimitiveType.class));	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,instanceOf(Primitive.class));	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,notNullValue());	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,is(notNullValue()));	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,instanceOf(PrimitiveField.class));	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertEquals(Field.class,field.getType());	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field).isNotNull();	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,is(instanceOf(PrimitiveType.class)));	0
97	10	org.junit.Assert.assertNotNull(field);	org.junit.Assert.assertThat(field,is(instanceOf(Primitive.class)));	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertEquals(expectedFile,actualFile);	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertThat(actualFile,equalTo(expectedFile));	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertThat(actualFile,is(expectedFile));	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertTrue(actualFile.exists());	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertTrue(actualFile.isFile());	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	"org.junit.Assert.assertThat(""STR"",actualFile,equalTo(expectedFile));"	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	"org.junit.Assert.assertThat(""STR"",actualFile,is(expectedFile));"	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertTrue(actualFile.exists());	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertEquals(expectedFile,actualFile);	0
98	10	org.junit.Assert.assertEquals(expectedFile.getPath(),actualFile.getPath());	org.junit.Assert.assertTrue(actualFile.isFile());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	1
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	1
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertNotNull(incompleteException.getPreferredSize());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(0,incompleteException.getPreferredSize());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(0,incompleteException.getPreferredSize());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertThat(incompleteException.getPreferredSize(),is(42));	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(4,incompleteException.getPreferredSize());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertEquals(1,incompleteException.getPreferredSize());	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	org.junit.Assert.assertTrue(incompleteException.getPreferredSize()==42);	0
99	10	org.junit.Assert.assertEquals(42,incompleteException.getPreferredSize());	"org.junit.Assert.assertEquals(""STR"",incompleteException.getPreferredSize());"	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(1,qResult.size());	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(2,qResult.size());	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),is(2));	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(3,qResult.size());	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),is(1));	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(2,qResult.size());	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),equalTo(2));	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult).hasSize(1);	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertTrue(qResult.size()>0);	0
100	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult).hasSize(2);	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertThat(filterResult,is(""STR""));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertTrue(filterResult.contains(""STR""));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertEquals(""STR"",filterResult);"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertThat(filterResult).isEqualTo(""STR"");"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertThat(filterResult,containsString(""STR""));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertThat(filterResult,equalTo(""STR""));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertThat(filterResult,is(equalTo(""STR"")));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertTrue(filterResult.contains(""STR""));"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertEquals(""STR"",filterResult);"	0
101	10	org.junit.Assert.assertEquals(null,filterResult);	"org.junit.Assert.assertTrue(filterResult.contains(""STR""));"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertEquals(""STR"",idProperty.getName());"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),is(""STR""));"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertEquals(""STR"",idProperty.getName());"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),equalTo(""STR""));"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),is(PROP_NAME));	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),is(PROP_ID));	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),is(equalTo(""STR"")));"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertTrue(idProperty.getName().equals(""STR""));"	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),equalTo(PROP_ID));	0
102	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	System.out.println(idProperty.getName());	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.matches(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.contains(expected));	0
103	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertNotEquals(expected,actual);	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	ODocumentprevious=execute.iterator().next();	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	ODocumentprev=execute.iterator().next();	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	ODocumentfirst=execute.iterator().next();	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	ODocumentprevious=next.iterator().next();	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"org.junit.Assert.assertThat(next.field(""STR""),equalTo(newBigDecimal(""STR"")));"	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"org.junit.Assert.assertEquals(1,next.field(""STR"").size());"	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"ORecordfirst=next.field(""STR"");"	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"org.junit.Assert.assertThat(next.field(""STR""),is(equalTo(1)));"	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"org.junit.Assert.assertThat(next.field(""STR""),is(equalTo(newInteger(1))));"	0
104	10	"org.junit.Assert.assertThat(next.<Double>field(""STR"")).isEqualTo(0.0015056772638228177);"	"org.junit.Assert.assertEquals(""STR"",next.field(""STR"").toString());"	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertEquals(expected,config);	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertThat(config).isEqualTo(expected);	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertThat(config,equalTo(expected));	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertThat(config,is(expected));	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	finalMap<String,Object>expectedMap=MavenConfigurationExtractor.extract((Xpp3Dom)fakePlugin.getConfiguration());	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertEquals(expected,config);	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	finalMap<String,Object>expected2=newHashMap<>();	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	finalMap<String,Object>expectedMap=MavenConfigurationExtractor.extract(config);	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	org.junit.Assert.assertThat(config,is(equalTo(expected)));	0
105	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",expected);"	"finalMap<String,Object>expectedMap=MavenConfigurationExtractor.extract(newXpp3Dom(""STR""));"	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
106	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(1,item.getProperty(""STR"").size());"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",item.getProperty(""STR""));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),is(""STR""));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),equalTo(""STR""));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),is(set));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),is(equalTo(""STR"")));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertNull(item.getProperty(""STR""));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(true,item.getProperty(""STR"")instanceofSet);"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),is(true));"	0
107	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",item.getProperty(""STR""));"	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	"doc.addField(""STR"",""STR"");"	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
108	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,is(notNullValue()));	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,notNullValue());	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,not(nullValue()));	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,instanceOf(Cluster.class));	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz).isNotNull();	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,instanceOf(Clusters.class));	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertNotNull(clazz);	1
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertNotNull(clazz);	1
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertThat(clazz,instanceOf(ClassCluster.class));	0
109	10	org.junit.Assert.assertNotNull(clazz);	org.junit.Assert.assertTrue(clazz!=null);	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertFalse(source1.equals(source2));	1
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertFalse(source1.equals(source2));	1
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	"Sourcesource3=newSource(""STR"",""STR"",""STR"");"	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertThat(source1.equals(source2),is(false));	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertTrue(source1.equals(source2));	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertEquals(false,source1.equals(source2));	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertThat(source1,not(equalTo(source2)));	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertNotEquals(source1.equals(source2),false);	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertNotEquals(source1,source2);	0
110	10	org.junit.Assert.assertFalse(source1.equals(source2));	org.junit.Assert.assertThat(source1.equals(source2),equalTo(false));	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertEquals(1,request.getOperations().size());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertEquals(1,request.getOperations().size());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertEquals(0,request.getOperations().size());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertEquals(0,request.getOperations().size());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	List<ORecordOperationRequest>result=request.getOperations();	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertTrue(request.getOperations().isEmpty());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertEquals(operations,request.getOperations());	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertTrue(request.getOperations().size()==1);	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertTrue(request.getOperations().size()==0);	0
111	10	org.junit.Assert.assertEquals(request.getOperations().size(),1);	org.junit.Assert.assertTrue(request.getOperations().size()==1);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress();	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(0);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(null,0);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(-1,null);	0
112	10	org.junit.Assert.assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	SimulatorAddressaddress=newSimulatorAddress(1,3);	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
113	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertEquals(1,theMap.size());	1
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertEquals(2,theMap.size());	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	"org.junit.Assert.assertTrue(theMap.containsKey(""STR""));"	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertEquals(1,theMap.size());	1
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap.size(),is(1));	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap,is(notNullValue()));	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap.size(),is(2));	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap).hasSize(1);	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap,hasItem(className));	0
114	10	org.junit.Assert.assertEquals(1,theMap.size());	org.junit.Assert.assertThat(theMap).hasSize(2);	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,1));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(m.readMBSkipFlag(cabac,SliceType.P,true,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,1));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	org.junit.Assert.assertTrue(m.readMBSkipFlag(cabac,SliceType.P,false,false,0));	0
115	10	org.junit.Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	booleanresult=cabac.readMBSkipFlag(m,SliceType.P,true,false,0);	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updatedRecords=manager.getNewRecords();	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	1
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	1
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updateRecords=manager.getNewRecords();	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().isEmpty());	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updates=manager.getNewRecords();	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().size()==1);	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	"org.junit.Assert.assertTrue(manager.getNewRecords().contains(newORecord(""STR"",""STR"")));"	0
116	10	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	"org.junit.Assert.assertTrue(manager.getNewRecords().contains(newORecord(""STR"",""STR"")));"	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertEquals(1,array.size());	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertEquals(1,array.size());	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertThat(array.size(),is(1));	0
117	10	org.junit.Assert.assertEquals(0,array.size());	array.add(1);	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertThat(array.size(),equalTo(1));	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertEquals(0,array.size());	1
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertEquals(2,array.size());	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertTrue(array.size()==1);	0
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertEquals(0,array.size());	1
117	10	org.junit.Assert.assertEquals(0,array.size());	org.junit.Assert.assertThat(array.size(),greaterThan(0));	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertNull(this.mockJ4pReadResponse1.getLog());	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertEquals(this.logger,this.mockJ4pReadResponse1.getLog());	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertEquals(this.log,this.mockJ4pReadResponse1.getLog());	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertEquals(this.log,this.getJ4pReadResponse1.getLog());	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=Mockito.mock(Logger.class);	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertTrue(this.mockJ4pReadResponse1.getLog()instanceofLogger);	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=this.mockJ4pReadResponse1.getLog();	0
118	10	org.junit.Assert.assertNotNull(this.jolokiaConnection.getLog());	org.junit.Assert.assertTrue(this.mockJ4pReadResponse1.getLog()instanceofLogger);	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(Opcode.BINARY,frame.getOpcode());	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(Opcode.BINARY,frame.getType());	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	"frame.setPayload(""STR"");"	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(frame.getType(),BinaryFrame.Type.EXTENDED);	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(BinaryOpcode.BINARY,frame.getOpcode());	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(frame.getOpcode(),Opcode.BINARY);	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(frame.getOpcode(),BinaryFrame.Opcode.BINARY);	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(frame.getOpcode(),BinaryFrame.Opcode.EXTENDED);	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(Opcode.BINARY,frame.getOpCode());	0
119	10	org.junit.Assert.assertEquals(true,frameinstanceofDataFrame);	org.junit.Assert.assertEquals(frame.getType(),Opcode.BINARY);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(11,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>removedKeys2=newHashMap<Object,Integer>();	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	addedKeys.put(12,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(13,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(9,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(14,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(10,2);	0
120	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,1);	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	org.junit.Assert.assertThat(envFilter.filter(expectedEnv),is(equalTo(expectedEnv)));	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>actualEnv=envFilter.filter(expectedEnv);	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	org.junit.Assert.assertThat(envFilter.filter(expectedEnv),equalTo(expectedEnv));	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>result=envFilter.filter(expectedEnv);	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	1
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>filteredEnv=envFilter.filter(expectedEnv);	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>envMap=envFilter.filter(expectedEnv);	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	1
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	"expectedEnv.put(""STR"",""STR"");"	0
121	10	org.junit.Assert.assertEquals(expectedEnv,envFilter.filter(env));	"org.junit.Assert.assertThat(envFilter.filter(expectedEnv),hasItem(""STR"",""STR""));"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(newORecordId(12,0),to.getRid());	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"to.init(newORecordId(12,0),""STR"".getBytes(),1,(byte)0);"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"from.init(newORecordId(12,0),""STR"".getBytes(),1,(byte)0);"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	1
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"verify(from).init(newORecordId(12,0),""STR"".getBytes(),1,(byte)0);"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(newORecordId(12,0),to.getRid());	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(newORecordId(12,1),to.getRid());	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"to.init(newORecordId(12,0),""STR"".getBytes(),2,(byte)0);"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"from.init(newORecordId(12,0),""STR"".getBytes(),2,(byte)0);"	0
122	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertThat(to.getRid(),is(newORecordId(12,0)));	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertTrue(s��do��s.isRecognized());	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertFalse(s��do��s.isRecognized());	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertThat(s��do��s.isRecognized(),is(true));	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertThat(s��do��s.isRecognized(),equalTo(true));	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertTrue(s��do��s.isRecognized());	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertThat(s��do��s.isRecognized(),equalTo(false));	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertFalse(s��do��s.isRecognized());	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertThat(s��do��s.isRecognized(),is(false));	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertTrue(s��do��s.isRecognized());	0
123	10	org.junit.Assert.assertTrue(sēdošs.isRecognized());	org.junit.Assert.assertEquals(true,s��do��s.isRecognized());	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	color.write(buf);	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	color.read(buf);	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	"System.out.println(""STR""+buf);"	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(8,color.getHeaderSize());	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(8,color.getHeaderSize());	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(8,color.bodySize());	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	"System.out.println(""STR"");"	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(0,color.read(buf));	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(0,color.read(buf));	0
124	10	org.junit.Assert.assertEquals(18,buf.remaining());	org.junit.Assert.assertEquals(1,color.read(buf));	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,2);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,1);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,0);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	addedKeys.put(42,2);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,-1);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,3);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	"removedKeys.put(""STR"",1);"	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,0);	0
125	10	org.junit.Assert.assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,4);	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute();"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.command(newOCommandSQL(""STR"")).execute();"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OResult<String>result=db.query(""STR""+DB_NAME+""STR"");"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.query(""STR""+DB_NAME+""STR"");"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.command(newOCommandSQL(""STR""));"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	List<String>friendList=newArrayList<String>();	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementmatch=db.query(""STR""+DB_NAME+""STR"");"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=newOMatchStatement(""STR"");"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=newOMatchStatement(""STR"",""STR"");"	0
126	10	"org.junit.Assert.assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute(true);"	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	org.junit.Assert.assertTrue(iter.hasNext());	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	1
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	"org.junit.Assert.assertThat(iter.next(),equalTo(""STR""));"	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	org.junit.Assert.assertThat(iter.hasNext(),is(true));	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",iter.next());"	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	"org.junit.Assert.assertThat(iter.next(),is(equalTo(""STR"")));"	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	org.junit.Assert.assertFalse(iter.hasNext());	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	"org.junit.Assert.assertThat(iter,hasItem(""STR""));"	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	org.junit.Assert.assertTrue(iter.hasNext());	0
127	10	"org.junit.Assert.assertThat(iter.next(),is(""STR""));"	org.junit.Assert.assertEquals(1,iter.count());	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update().toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update().toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update(null).toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update(1).toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"sql.update(""STR"");"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update(Simple.class).toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update(1).toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.update(null).toString());"	0
128	10	"org.junit.Assert.assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"finalTSqlBuilderbuilder=sql.update(""STR"");"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	org.junit.Assert.assertTrue(db.isClosed());	0
129	10	"org.junit.Assert.assertRids(""STR"");"	"org.junit.Assert.assertEquals(1,person1.field(""STR"").size());"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	"org.junit.Assert.assertEquals(""STR"",person1.get(""STR"").getName());"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	"org.junit.Assert.assertEquals(""STR"",person1.get(""STR"").getId());"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	"org.junit.Assert.assertEquals(1,person1.get(""STR"").size());"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	org.junit.Assert.assertEquals(1,db.size());	0
129	10	"org.junit.Assert.assertRids(""STR"");"	"org.junit.Assert.assertEquals(1,person1.field(""STR"").count());"	0
129	10	"org.junit.Assert.assertRids(""STR"");"	org.junit.Assert.assertEquals(1,index.size());	0
129	10	"org.junit.Assert.assertRids(""STR"");"	db.drop();	0
129	10	"org.junit.Assert.assertRids(""STR"");"	org.junit.Assert.assertEquals(1,person1.size());	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressaddress=operation.getWorkerAddress();	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressactual=operation.getWorkerAddress();	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressresult=operation.getWorkerAddress();	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	"SimulatorAddressexpected=SimulatorAddress.fromString(""STR"");"	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	org.junit.Assert.assertNull(operation.getWorkerAddress());	1
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressworkerAddress=operation.getWorkerAddress();	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	org.junit.Assert.assertNull(operation.getWorkerAddress());	1
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	org.junit.Assert.assertThat(operation.getWorkerAddress(),is(nullValue()));	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressexpected=SimulatorAddress.fromString(null);	0
130	10	org.junit.Assert.assertNull(operation.getWorkerAddress());	SimulatorAddressoutput=operation.getWorkerAddress();	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Izteiksme,AttributeNames.v_Vajadziibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Vajadziibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Vajadziibas,AttributeNames.v_Vajadziibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Number,AttributeNames.v_Vajadziibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Izteiksme,AttributeNames.v_Vajadziiba);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	"testset.addAttribute(AttributeNames.i_Vajadziibas,""STR"");"	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Vajadziiba,AttributeNames.v_Vajadziibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Verb);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Izteiksme,AttributeNames.v_Vajadiibas);	0
131	10	"org.junit.Assert.assertInflection(formas,testset,""STR"");"	testset.addAttribute(AttributeNames.i_Izteiksme,AttributeNames.v_VajadZiibas);	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertEquals(2,result.size());	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertEquals(1,result.size());	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertThat(result).hasSize(1);	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertEquals(3,result.size());	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertEquals(2,result.size());	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertEquals(1,result.size());	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertThat(result).hasSize(2);	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertThat(result,hasItem(this.testAttributeList));	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertTrue(result.size()>0);	0
132	10	org.junit.Assert.assertSame(this.testAttributeList,result);	org.junit.Assert.assertTrue(result.size()==1);	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertThat(birthday,is(notNullValue()));	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertThat(birthday).isNotNull();	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertNotNull(birthday);	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	"org.junit.Assert.assertEquals(""STR"",birthday.toString());"	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	"org.junit.Assert.assertEquals(""STR"",birthday.toString());"	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	"org.junit.Assert.assertEquals(""STR"",birthday.getTime());"	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertThat(birthday,notNullValue());	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	"org.junit.Assert.assertEquals(""STR"",birthday.getTime());"	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertNotNull(birthday);	0
133	10	org.junit.Assert.assertEquals(2008,birthday.getYear()+1900);	org.junit.Assert.assertThat(birthday.getTime(),is(0L));	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertNotNull(statementRef);	1
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(id,statementRef.getId());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(id,statementRef.getId());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(id,statementRef.toString());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(ID,statementRef.getId());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(id,statementRef.getId());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(ID,statementRef.getId());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(id,statementRef.toString());	0
134	10	org.junit.Assert.assertNotNull(statementRef);	org.junit.Assert.assertEquals(statementRef.getId(),id);	0
134	10	org.junit.Assert.assertNotNull(statementRef);	"org.junit.Assert.assertEquals(""STR"",statementRef.toString());"	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options,equalTo(expected));	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertEquals(expected,options);	1
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options).isEqualTo(expected);	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options,is(expected));	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options,not(equalTo(expected)));	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertNotEquals(expected,options);	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options).isNotEqualTo(expected);	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertEquals(expected,options);	1
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertThat(options).isSameAs(expected);	0
135	10	org.junit.Assert.assertEquals(expected,options);	org.junit.Assert.assertSame(expected,options);	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternr=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternn=HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED);"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(HsrePattern.compile(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(newRePattern(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(newHsrePattern(""STR"",PatternFlags.ADVANCED,PatternFlags.EXPANDED)));"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternr=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	org.junit.Assert.assertEquals(exp,exp);	0
136	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternn=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),compositeKey.getKeys());"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	finalList<Object>keys=compositeKey.getKeys();	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),compositeKey.getKeys());"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertEquals(Arrays.asList(""STR""),compositeKey.getKeys());"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR"",""STR""),compositeKey.getKeys());"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertThat(compositeKey.getKeys(),hasItem(""STR""));"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	org.junit.Assert.assertEquals(1,compositeKey.getKeys().size());	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	org.junit.Assert.assertEquals(2,compositeKey.getKeys().size());	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	"org.junit.Assert.assertTrue(compositeKey.getKeys().contains(""STR""));"	0
137	10	org.junit.Assert.assertEquals(compositeKey.getKeys().size(),3);	org.junit.Assert.assertTrue(compositeKey.getKeys().size()==1);	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"env.put(""STR"",""STR"");"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",newAbstractServiceSetup(env).getProperty(""STR""));"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",newAbstractServiceSetup(env).getProperty(""STR""));"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	AbstractServiceSetupsetup=newTestSetup(env);	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"Stringvalue=newAbstractServiceSetup(env).getProperty(""STR"");"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	AbstractServiceSetupsetup=newMockAbstractServiceSetup(env);	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",newAbstractServiceSetup(null,env).getProperty(""STR""));"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	finalAbstractServiceSetupsetup=newTestSetup(env);	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"AbstractServiceSetupsetup=newTestSetup(env,""STR"");"	0
138	10	"org.junit.Assert.assertEquals(""STR"",create(env).getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",newAbstractServiceSetup().getProperty(""STR""));"	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan,is(equalTo(agent1)));	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan).hasSize(1);	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan).isNotNull();	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan).isEqualTo(plan);	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan,equalTo(plan));	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan,is(equalTo(plan)));	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertEquals(agent1,plan.getAddress());	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertEquals(agent1,plan.getAddress());	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertNotNull(plan);	0
139	10	org.junit.Assert.assertDeploymentPlanWorkerCount(plan,agent1,0,1);	org.junit.Assert.assertThat(plan).hasAddress(agent1);	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedName,account.getName());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedName,account.getName());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedHomepage,account.getHomepage());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedHomepage,account.getHomepage());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedName,account.getName());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedName,account.getName());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(account.getName(),expectedName);	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedHomepage,account.getHomepageId());	0
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertNotNull(account);	1
140	10	org.junit.Assert.assertNotNull(account);	org.junit.Assert.assertEquals(expectedName,account.toString());	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
141	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(2,res.size());	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(1));	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(2));	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(3,res.size());	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(1);	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(2);	0
142	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertTrue(res.size()>0);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"System.out.println(""STR""+msgToEncrypt);"	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(msgToEncrypt,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(msgToEncrypt,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"System.out.println(""STR""+magic);"	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(magic,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(magic,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(msgToEncrypt,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"System.out.println(""STR"");"	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	org.junit.Assert.assertEquals(msgToEncrypt,decryptedMsg);	0
143	10	org.junit.Assert.assertThat(msgToEncrypt).isEqualTo(decryptedMsg);	"System.out.println(""STR""+sk);"	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	1
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(false));	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertFalse(CassandraUnitCommandLineLoader.isUsageBeenPrinted());	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(isUsageBeenPrinted(),is(false));	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(isUsageBeenPrinted(),is(true));	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertTrue(CassandraUnitCommandLineLoader.isUsageBeenPrinted());	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertFalse(CassandraUnitCommandLineLoader.isUsageBeenPrinted());	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),equalTo(false));	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),equalTo(true));	0
144	10	org.junit.Assert.assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));	org.junit.Assert.assertTrue(CassandraUnitCommandLineLoader.isUsageBeenPrinted());	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"Sourcesource=sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"Sourcesrc=sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	1
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	1
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"Sources=sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"Sourceresult=sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"Sourcesources=sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"sourceLoader.load(""STR"");"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	"org.junit.Assert.assertNotNull(sourceLoader.load(""STR""));"	0
145	10	"org.junit.Assert.assertNull(sourceLoader.load(""STR""));"	Sourcesource=sourceLoader.load(null);	0
146	10	org.junit.Assert.assertNull(treeValue);	org.junit.Assert.assertThat(treeValue,is(notNullValue()));	0
146	10	org.junit.Assert.assertNull(treeValue);	org.junit.Assert.assertNull(treeValue);	1
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertEquals(""STR"",treeValue.toString());"	0
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertEquals(""STR"",treeValue.getValue());"	0
146	10	org.junit.Assert.assertNull(treeValue);	org.junit.Assert.assertNull(treeValue);	1
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertEquals(""STR"",treeValue.toString());"	0
146	10	org.junit.Assert.assertNull(treeValue);	org.junit.Assert.assertThat(treeValue,notNullValue());	0
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertThat(treeValue.getValue(),is(""STR""));"	0
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertEquals(""STR"",treeValue.getStringValue());"	0
146	10	org.junit.Assert.assertNull(treeValue);	"org.junit.Assert.assertEquals(""STR"",treeValue.getValue());"	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertArrayEquals(expected,actual);	1
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertTrue(Arrays.equals(expected,actual));	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertTrue(expected.equals(actual));	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertArrayEquals(expected,actual);	1
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertTrue(expected.length==actual.length);	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertThat(actual,is(expected));	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertNotEquals(expected,actual);	0
147	10	org.junit.Assert.assertArrayEquals(expected,actual);	org.junit.Assert.assertEquals(expected,actual);	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertEquals(1,vertices.size());	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertEquals(2,vertices.size());	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertEquals(3,vertices.size());	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertEquals(0,vertices.size());	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertThat(vertices,hasItem(doc));	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertTrue(vertices.size()>0);	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertTrue(vertices.size()==1);	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertTrue(vertices.size()>1);	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertThat(vertices,hasSize(1));	0
148	10	org.junit.Assert.assertThat(vertices).hasSize(1);	org.junit.Assert.assertTrue(vertices.size()==2);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	util.cleanTargetDir(tempClass);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	util.cleanTargetDir(targetDir);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(targetDir,""STR""));"	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	util.cleanTargetDir(tmpClass);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(src,""STR""));"	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(target,""STR""));"	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	util.cleanTargetDir(src);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	util.cleanTargetDir(target);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	this.util.cleanTargetDir(tempClass);	0
149	10	org.junit.Assert.assertTrue(tempClass.exists());	Util.cleanTargetDir(tempClass);	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	registry.addTests(newTestSuite().addTest(test3));	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	"org.junit.Assert.assertEquals(""STR"",registry.getId());"	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	org.junit.Assert.assertEquals(test1.getId(),registry.getTests().get(0).getId());	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	registry.addTests(newTestSuite().addTest(test1));	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	"org.junit.Assert.assertEquals(""STR"",registry.getTests().get(0).getId());"	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	org.junit.Assert.assertEquals(test1.getId(),registry.getTests().get(0).getId());	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	"org.junit.Assert.assertEquals(""STR"",registry.getTests().get(0).getId());"	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	"org.junit.Assert.assertEquals(""STR"",registry.getId());"	0
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	1
150	10	"org.junit.Assert.assertEquals(""STR"",test1.getId());"	registry.addTests(newTestSuite().addTest(test4));	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file.exists());	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertEquals(""STR"",file.getName());"	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file.exists());	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertEquals(""STR"",file.getAbsolutePath());"	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertThat(file).isNotNull();	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertThat(file).isEqualTo(""STR"");"	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
151	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file!=null);	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
152	10	org.junit.Assert.assertEquals(1,result.size());	"org.junit.Assert.assertThat(result,hasItem(""STR""));"	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(0,result.size());	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(1);	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.isEmpty());	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.isEmpty());	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.isEmpty());	0
152	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.size()==1);	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	List<Sequence>sequences=manifest.getSequences();	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertEquals(1,manifest.getSequences().size());	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertEquals(2,manifest.getSequences().size());	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertEquals(1,manifest.getSequences().size());	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertTrue(manifest.getSequences().size()==2);	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertTrue(manifest.getSequences().size()==1);	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	List<Sequence>ranges=manifest.getSequences();	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertTrue(manifest.getSequences().size()==2);	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertTrue(manifest.getSequences().size()==3);	0
153	10	org.junit.Assert.assertThat(manifest.getSequences()).isEmpty();	org.junit.Assert.assertThat(manifest.getSequences()).hasSize(1);	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
154	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
154	10	org.junit.Assert.assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=newJsonWriter(file,job);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=createJsonWriter(job);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=prepareJsonWriter(job);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=mock(JsonWriter.class);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	"JsonWriterwriter=createJsonWriter(job,""STR"");"	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=newJsonWriter(job);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=newJsonWriter(job,file);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=newJsonWriter(file);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=createJsonWriter(job,file);	0
155	10	org.junit.Assert.assertSame(file,newJsonWriter(job,file).getCoverallsFile());	JsonWriterwriter=createJsonWriter();	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(0,treeBucket.size());	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(0,treeBucket.size());	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>tree=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(1,treeBucket.size());	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(2,treeBucket.size());	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>leafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,true,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE);	0
156	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(2,treeBucket.size());	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),is(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(1,item.getProperty(""STR"").size());"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",item.getProperty(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertThat(item.getProperty(""STR""),equalTo(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(null,item.getProperty(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(""STR"",item.getProperty(""STR"").toString());"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(emb,item.getProperty(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertNull(item.getProperty(""STR""));"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertEquals(1,item.getProperty(""STR"").intValue());"	0
157	10	"org.junit.Assert.assertNotNull(item.getProperty(""STR""));"	"org.junit.Assert.assertTrue(item.getProperty(""STR"")instanceofMap);"	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	org.junit.Assert.assertEquals(value,storedValue);	1
158	10	org.junit.Assert.assertEquals(value,storedValue);	org.junit.Assert.assertEquals(value,storedValue);	1
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part1,part2,storedValue);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part2,part1,storedValue);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part1,part2,value);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part1,part2,value-storedValue);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part2,part1,value);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	OByteBufferUtils.splitLongToBuffers(part2,part1,value-storedValue);	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	"System.out.println(""STR""+storedValue);"	0
158	10	org.junit.Assert.assertEquals(value,storedValue);	org.junit.Assert.assertThat(storedValue,is(value));	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(newORecordId(12,0),to.getRid());	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	1
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertEquals(newORecordId(12,1),to.getRid());	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	to.init(newORecordId(12,0),1);	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	from.init(newORecordId(12,0),1);	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertTrue(to.getRid()==newORecordId(12,0));	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	"org.junit.Assert.assertEquals(""STR"",to.getRid());"	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	to.init(newORecordId(12,0),2);	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	from.init(newORecordId(12,0),2);	0
159	10	org.junit.Assert.assertEquals(from.getRid(),to.getRid());	org.junit.Assert.assertTrue(to.getRid()instanceofORecordId);	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",one.getString(""STR""));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",two.getString(""STR""));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",one.getString(""STR""));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",two.getString(""STR""));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	1
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(root.getString(""STR""),two.getString(""STR""));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	1
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"org.junit.Assert.assertThat(one.getString(""STR""),is(equalTo(""STR"")));"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"one.set(""STR"",""STR"");"	0
160	10	"org.junit.Assert.assertEquals(""STR"",root.getString(""STR""));"	"Stringthree=two.getString(""STR"");"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertThat(finder.linkedNodeNamesOf(element(""STR"")),hasItem(""STR""));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),finder.linkedNodeNamesOf(element(""STR"")));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertThat(Matcherfinder.linkedNodeNamesOf(element(""STR"")),Matchers.hasItem(""STR""));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),finder.linkedNodeNamesOf(element(""STR"")));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),finder.linkedNodeNamesOf(Element.getElementById(""STR"")));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertThat(Matcherfinder.linkedNodeNamesOf(element(""STR"")),hasItem(""STR""));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),finder.linkedNodeNamesOf(Element.valueOf(""STR"")));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),finder.linkedNodeNamesOf(document.getElementById(""STR"")));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"org.junit.Assert.assertThat(finder.linkedNodeNamesOf(null),hasItem(""STR""));"	0
161	10	"org.junit.Assert.assertEquals(asList(""STR"",""STR""),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));"	"finalElementelement=document.createElement(""STR"");"	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertEquals(1,res.intValue());	1
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertEquals(0,res.intValue());	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertEquals(1,res);	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertEquals(3,res.intValue());	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertThat(res,is(1));	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertThat(res).isEqualTo(1);	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertEquals(0,res);	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertTrue(res>0);	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertTrue(res==1);	0
162	10	org.junit.Assert.assertEquals(1,res.intValue());	org.junit.Assert.assertThat(res).isEqualTo(0);	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,serializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(serializationOffset,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(0));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(2));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
163	10	org.junit.Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertThat(requestRead.getQuery()).isEqualTo(""STR"");"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertEquals(""STR"",requestRead.getQuery());"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertEquals(""STR"",requestRead.getQuery());"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertThat(request.getQuery()).isEqualTo(""STR"");"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertThat(requestRead.getQuery(),is(""STR""));"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertTrue(requestRead.getQuery().equals(""STR""));"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	org.junit.Assert.assertThat(requestRead.getQuery()).isNull();	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertEquals(""STR"",request.getQuery());"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertEquals(""STR"",params.get(""STR"").getQuery());"	0
164	10	"org.junit.Assert.assertEquals(requestRead.getQuery(),""STR"");"	"org.junit.Assert.assertThat(requestRead.getQuery()).isEqualTo(String.valueOf(""STR""));"	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(false));	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(true));	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),is(true));	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),is(false));	0
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
165	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete().toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete().toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete(null).toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete(null).toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete(0).toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete(1).toString());"	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	sql.delete();	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
166	10	"org.junit.Assert.assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"org.junit.Assert.assertEquals(""STR"",sql.delete(1).toString());"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,""STR"");"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",GBP_STR_USD.convert(-1.23d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",moneyToStrUKRUS.convert(-1.23d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",moneyToStrUSD.convert(-1.23));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",GBP_STR_USD.convert(-1.5d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",moneyToStrUSD.convert(-1));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",GBP_STR_USD.convert(-0.5d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"org.junit.Assert.assertEquals(""STR"",moneyToStrUKRUS.convert(-0.5d));"	0
167	10	"org.junit.Assert.assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,null);	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search,hasItem(c1));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search.size(),is(1));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertEquals(1,search.size());	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search.size(),is(2));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertEquals(1,search.size());	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search,hasItems(c1));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search.size(),greaterThan(0));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search).hasSize(1);	1
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertThat(search.size(),equalTo(1));	0
168	10	org.junit.Assert.assertThat(search).hasSize(1);	org.junit.Assert.assertEquals(2,search.size());	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(equalTo(""STR"")));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(""STR""));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,equalTo(""STR""));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result).isEqualTo(""STR"");"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,containsString(""STR""));"	0
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
169	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEqualsJson(""STR"",result);"	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	sleepMillis(300);	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.interrupt();	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.join();	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.sleepMillis(300);	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.start();	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	performTestThread.run(testContext);	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	Thread.sleepMillis(300);	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.stop();	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	runTestThread.waitUntilRunning();	0
170	10	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}});	performTestThread.run();	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	org.junit.Assert.assertThat(os,is(notNullValue()));	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertTrue(os.toString().contains(""STR""));"	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertTrue(os.toString(StandardCharsets.UTF_8).contains(""STR""));"	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	org.junit.Assert.assertTrue(os.length()>0);	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertThat(""STR"",os.toString(),is(""STR""));"	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	org.junit.Assert.assertTrue(os.isWritable());	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	org.junit.Assert.assertThat(os,notNullValue());	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertThat(""STR"",os.toString(StandardCharsets.UTF_8),is(""STR""));"	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertTrue(os.toString().startsWith(""STR""));"	0
171	10	org.junit.Assert.assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	"org.junit.Assert.assertTrue(os.toString(StandardCharsets.UTF_8).startsWith(""STR""));"	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.when(this.mockAccessConnection.batchQueryAttributes(this.createAttributeMapMatcher(this.resultAttributeMap))).thenReturn(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters}	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
172	10	org.junit.Assert.assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertTrue(formas.size()>0);	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertEquals(2,formas.size());	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertThat(formas.size(),is(1));	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertThat(formas.size(),is(2));	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertEquals(1,formas.size());	1
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertTrue(formas.size()>1);	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	"org.junit.Assert.assertThat(formas,hasItem(newWordform(""STR"")));"	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertTrue(formas.size()==2);	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertTrue(formas.size()==1);	0
173	10	org.junit.Assert.assertEquals(1,formas.size());	org.junit.Assert.assertTrue(formas.size()==3);	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertTrue(stum.isRecognized());	1
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertFalse(stum.isRecognized());	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertThat(stum.isRecognized(),equalTo(true));	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertThat(stum.isRecognized(),is(true));	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertThat(stum.isRecognized(),equalTo(false));	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertTrue(stum.isRecognized());	1
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertTrue(stum.isRecognized());	1
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertFalse(stum.isRecognized());	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertThat(stum.isRecognized(),is(false));	0
174	10	org.junit.Assert.assertTrue(stum.isRecognized());	org.junit.Assert.assertThat(stum,is(true));	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertEquals(value1,saved.field(""STR"").getValue());"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertThat(saved.field(""STR""),is(equalTo(value1)));"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertThat(saved.field(""STR""),is(value1));"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertEquals(""STR"",saved.field(""STR"").toString());"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"Stringvalue2=database.field(""STR"");"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"Stringvalue2=database.field(""STR"").toString();"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertEquals(value1,saved.field(""STR"").get(0).getValue());"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertEquals(""STR"",saved.field(""STR"").getValue());"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"Stringvalue2=database.field(""STR"").getValue();"	0
175	10	"org.junit.Assert.assertNotNull(saved.field(""STR""));"	"org.junit.Assert.assertEquals(value1,saved.field(""STR"").get(0).getDefaultValue());"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	1
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertFalse(Wildcards.matches(""STR"",""STR""));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertTrue(Wildcards.matches(null,""STR""));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	1
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	1
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertFalse(Wildcards.matches(null,""STR""));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertFalse(Wildcards.matches(""STR"",""STR""));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertThat(MatcherWildcards.matches(""STR"",""STR""),is(true));"	0
176	10	"org.junit.Assert.assertTrue(Wildcards.matches(""STR"",""STR""));"	"org.junit.Assert.assertThat(Wildcards.matches(""STR"",""STR""),is(false));"	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize,is(FIELD_SIZE));	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize,is(FIELD_SIZE+serializationOffset));	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize).isEqualTo(FIELD_SIZE+serializationOffset);	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertEquals(FIELD_SIZE+serializationOffset,binarySize);	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize,is(4));	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize,is(2));	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize).isEqualTo(FIELD_SIZE);	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertEquals(0,binarySize);	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertEquals(FIELD_SIZE,binarySize);	0
177	10	org.junit.Assert.assertEquals(binarySize,FIELD_SIZE);	org.junit.Assert.assertThat(binarySize).isEqualTo(FIELD_SIZE-serializationOffset);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(OBJECT,stringSerializer.deserializeFromByteBufferObject(buffer));	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringresult=stringSerializer.deserializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringdeserialized=stringSerializer.deserializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringserialized=stringSerializer.deserializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	"org.junit.Assert.assertEquals(""STR"",stringSerializer.deserializeFromByteBufferObject(buffer));"	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(OBJECT,stringSerializer.deserializeFromByteBufferObject(buffer));	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringactual=stringSerializer.deserializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	stringSerializer.deserializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	stringSerializer.serializeFromByteBufferObject(buffer);	0
178	10	org.junit.Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringserialized=stringSerializer.serializeFromByteBufferObject(buffer);	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",dbNameAndHiveConfCore.databaseName());"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",dbNameAndHiveConfCore.databaseName());"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),equalTo(""STR""));"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	1
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	org.junit.Assert.assertNotNull(dbNameAndHiveConfCore.databaseName());	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(equalTo(""STR"")));"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",dbNameAndHiveConfCore.databaseName());"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",dbNameAndHiveConfCore.databaseName());"	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(nullValue()));	0
179	10	"org.junit.Assert.assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"	"org.junit.Assert.assertEquals(""STR"",newBeejuCore().databaseName());"	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertThat(result,hasItem(this.objectName));	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertThat(result).hasSize(1);	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertEquals(1,result.size());	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertTrue(result.contains(this.objectName));	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertThat(result,is(this.testQueryResult));	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertEquals(2,result.size());	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertEquals(this.testQueryResult,result);	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertTrue(result.contains(this.testObjectName));	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertEquals(3,result.size());	0
180	10	org.junit.Assert.assertSame(this.testQueryResult,result);	org.junit.Assert.assertThat(result).hasSize(2);	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"byte[]result=model.getTimeStepProbabilityArray(""STR"");"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"byte[]array=model.getTimeStepProbabilityArray(""STR"");"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"byte[]data=model.getTimeStepProbabilityArray(""STR"");"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),equalTo(newbyte[]{0}));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),equalTo(newbyte[]{1}));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),equalTo(newbyte[0]));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),is(notNullValue()));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),is(newbyte[]{0}));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),is(newbyte[]{1}));"	0
181	10	"org.junit.Assert.assertProbability(model,""STR"",1.0);"	"org.junit.Assert.assertThat(model.getTimeStepProbabilityArray(""STR""),is(newbyte[0]));"	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertEquals(1,readRequest.getHosts().size());	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),readRequest.getHosts());"	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	"org.junit.Assert.assertEquals(Arrays.asList(""STR""),readRequest.getHosts());"	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertEquals(hosts,readRequest.getHosts());	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),readRequest.getHosts());"	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertEquals(hosts,readRequest.getHosts());	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertTrue(readRequest.getHosts().size()>0);	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertTrue(readRequest.getHosts().size()==1);	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	"org.junit.Assert.assertTrue(readRequest.getHosts().contains(""STR""));"	0
182	10	org.junit.Assert.assertEquals(readRequest.getHosts().size(),2);	org.junit.Assert.assertTrue(readRequest.getHosts().size()>0);	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
183	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject,instanceOf(NumberJsonType.class));	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject,is(instanceOf(NumberJsonType.class)));	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject,instanceOf(LocalDateJsonType.class));	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject,is(notNullValue()));	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject).isInstanceOf(NumberJsonType.class);	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject).isNotNull();	1
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject,is(instanceOf(LocalDateJsonType.class)));	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertEquals(localDate,jsonObject);	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	"org.junit.Assert.assertEquals(""STR"",jsonObject.getName());"	0
184	10	org.junit.Assert.assertThat(jsonObject).isNotNull();	org.junit.Assert.assertThat(jsonObject).isEqualTo(LocalDateJsonType.class);	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	1
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertFalse(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
185	10	org.junit.Assert.assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	org.junit.Assert.assertThat(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir),equalTo(true));	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	org.junit.Assert.assertEquals(exp,exp);	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED);"	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	org.junit.Assert.assertEquals(exp,exp);	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertThat(exp,equalTo(newRePattern(""STR"",PatternFlags.ADVANCED)));"	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertEquals(""STR"",exp.toString());"	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.ADVANCED|PatternFlags.ADVANCED);"	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"org.junit.Assert.assertEquals(""STR"",exp.toString());"	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	org.junit.Assert.assertThat(exp,is(nullValue()));	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	org.junit.Assert.assertThat(exp,equalTo(null));	0
186	10	"org.junit.Assert.assertThat(""STR"",matches(exp));"	"RePatternexp2=HsrePattern.compile(""STR"",PatternFlags.AHEAD_OF_DAY);"	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(3,result.size());	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result,hasItem(1));	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result.size(),is(3));	0
187	10	org.junit.Assert.assertEquals(1,result.size());	getProfilerInstance().stopRecording();	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result.size(),is(2));	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(2);	0
187	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(3);	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertThat(options,is(notNullValue()));	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertNotNull(options);	1
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertNotNull(options);	1
188	10	org.junit.Assert.assertNotNull(options);	"org.junit.Assert.assertThat(options,hasItem(""STR""));"	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(0,options.size());	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(0,options.size());	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertFalse(options.isEmpty());	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(1,options.size());	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertThat(options,is(empty()));	0
188	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertTrue(options.isEmpty());	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertEquals(""STR"",text);"	1
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertTrue(text.contains(""STR""));"	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertEquals(""STR"",text);"	1
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertThat(text).isEqualTo(""STR"");"	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertTrue(text.contains(""STR""));"	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	org.junit.Assert.assertEquals(content,text);	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	org.junit.Assert.assertNotNull(text);	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertThat(text,is(""STR""));"	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	org.junit.Assert.assertEquals(content,text);	0
189	10	"org.junit.Assert.assertEquals(""STR"",text);"	"org.junit.Assert.assertEquals(text,""STR"");"	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(0,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(0,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(1,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(1,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(2,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertEquals(2,treeBucket.size());	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertThat(treeBucket.size(),is(0));	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertThat(treeBucket.size(),is(1));	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertTrue(treeBucket.size()>0);	0
190	10	org.junit.Assert.assertEquals(treeBucket.size(),0);	org.junit.Assert.assertTrue(treeBucket.size()==1);	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(3,result.size());	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(3,result.size());	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertEquals(1,result.size());	1
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result.size(),is(3));	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(3);	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertTrue(result.size()==3);	0
191	10	org.junit.Assert.assertEquals(1,result.size());	org.junit.Assert.assertThat(result).hasSize(2);	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertEquals(1,keyIndexDefinition.getParamCount());	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertThat(keyIndexDefinition.getParamCount(),is(1));	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertEquals(1,keyIndexDefinition.getParamCount());	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertThat(keyIndexDefinition.getParamCount(),equalTo(1));	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertTrue(keyIndexDefinition.getParamCount()==1);	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertEquals(2,keyIndexDefinition.getParamCount());	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.STRING);	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.INTEGER,OType.STRING);	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	finalOSimpleKeyIndexDefinitionvalueIndexDefinition=newOSimpleKeyIndexDefinition(OType.STRING,OType.INTEGER);	0
192	10	org.junit.Assert.assertEquals(keyIndexDefinition.getParamCount(),1);	org.junit.Assert.assertThat(keyIndexDefinition.getParamCount(),is(2));	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertThat(performanceStats.isEmpty(),is(false));	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertFalse(performanceStats.isEmpty());	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertThat(performanceStats.isEmpty(),is(true));	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertThat(performanceStats.isEmpty(),equalTo(false));	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertTrue(performanceStats.isEmpty());	1
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertFalse(performanceStats.isEmpty());	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	"org.junit.Assert.assertThat(""STR"",performanceStats.isEmpty(),is(false));"	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertThat(performanceStats.isEmpty(),equalTo(true));	0
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertTrue(performanceStats.isEmpty());	1
193	10	org.junit.Assert.assertTrue(performanceStats.isEmpty());	org.junit.Assert.assertFalse(performanceStats.isEmpty());	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(0),deepEquals(newAttributes<>(""STR"",1)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(10),deepEquals(newAttributes<>(""STR"",1)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(0),deepEquals(newAttributes<>(""STR"",true)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.BLUE.angle(0),deepEquals(newAttributes<>(""STR"",1)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(10),deepEquals(newAttributes<>(""STR"",true)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(10),deepEquals(newAttributes<>(""STR"",0)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(1),deepEquals(newAttributes<>(""STR"",0)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.GREEN.angle(0),deepEquals(newAttributes<>(""STR"",1)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(Color.RED.angle(5),deepEquals(newAttributes<>(""STR"",1)));"	0
194	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",45)),Color.RED.angle(45));"	"org.junit.Assert.assertThat(color(""STR"").angle(0),deepEquals(newAttributes<>(""STR"",1)));"	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertTrue(types.isEmpty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertEquals(0,types.size());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertThat(types,is(empty()));	1
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertFalse(types.isEmpty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertThat(types,empty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertFalse(types.isEmpty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertTrue(types.isEmpty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertNotNull(types);	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertThat(types,isEmpty());	0
195	10	org.junit.Assert.assertThat(types,is(empty()));	org.junit.Assert.assertThat(types,hasItem(ANY));	0
196	10	failureCollector.notify(normalExitFailure);	"FailureOperationexception=newFailureOperation(""STR"",WORKER_EXCEPTION,workerAddress,agentAddress.toString(),""STR"",""STR"",null);"	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure),is(1));	0
196	10	failureCollector.notify(normalExitFailure);	"FailureOperationexception=newFailureOperation(""STR"",WORKER_EXCEPTION,workerAddress,agentAddress.toString(),""STR"",null);"	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure,oomeFailure),is(1));	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure),is(equalTo(1)));	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertEquals(1,failureCollector.getFailureCount());	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.getFailureCount(),is(1));	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure),is(2));	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure),is(0));	0
196	10	failureCollector.notify(normalExitFailure);	org.junit.Assert.assertThat(failureCollector.notify(exceptionFailure,oomeFailure),is(0));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(size+1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(size+OShortSerializer.SHORT_SIZE,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(3,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(size+2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(65628,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertEquals(4,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
197	10	org.junit.Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	org.junit.Assert.assertThat(linkSerializer.getObjectSizeInByteBuffer(buffer),is(size));	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
198	10	org.junit.Assert.assertNotNull(mapResult);	"org.junit.Assert.assertEquals(""STR"",mapResult.toString());"	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(2,mapResult.size());	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(multiKey.hashCode(),mapResult.hashCode());	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(1,mapResult.size());	0
198	10	org.junit.Assert.assertNotNull(mapResult);	"org.junit.Assert.assertEquals(""STR"",mapResult);"	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertThat(mapResult,is(equalTo(newObject())));	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertThat(mapResult,is(equalTo(multiKey)));	0
198	10	org.junit.Assert.assertNotNull(mapResult);	org.junit.Assert.assertEquals(multiKey,mapResult);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value,is(100));	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value).isEqualTo(100);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertEquals(100,value);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value).isEqualTo(10);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value,equalTo(100));	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value,is(10));	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertEquals(10,value);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertEquals(100,value);	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value,equalTo(10));	0
199	10	org.junit.Assert.assertTrue(value>=0);	org.junit.Assert.assertThat(value).isEqualTo(99);	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	StringresultOtp=YubicoClient.getPublicId(testPublicId);	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	1
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	1
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	1
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	"org.junit.Assert.assertEquals(""STR"",resultPublicId);"	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertTrue(resultPublicId.equals(testPublicId));	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	1
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertTrue(resultPublicId.equals(testPublicId));	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertTrue(resultPublicId.contains(testPublicId));	0
200	10	org.junit.Assert.assertEquals(testPublicId,resultPublicId);	org.junit.Assert.assertThat(resultPublicId,is(testPublicId));	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertEquals(""STR"",to.getFileName());"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertEquals(""STR"",to.getFileName());"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertThat(to.getFileName(),is(""STR""));"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertThat(to.getFileName(),equalTo(""STR""));"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	1
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertEquals(""STR"",from.getFileName());"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertTrue(to.getFileName().equals(""STR""));"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertTrue(to.getFileName().equals(""STR""));"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	"org.junit.Assert.assertEquals(to.getFileName(),""STR"");"	0
201	10	org.junit.Assert.assertEquals(from.getFileName(),to.getFileName());	StringfileName=to.getFileName();	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove);	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	propertyIndexByValue.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove);	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	propertyIndexByKey.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove);	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	"org.junit.Assert.assertEquals(1,mapToTest.get(""STR""));"	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	"org.junit.Assert.assertEquals(1,mapToTest.get(""STR""));"	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	org.junit.Assert.assertTrue(multiValueChangeEvent.getChangeType()==OMultiValueChangeEvent.OChangeType.UPDATE);	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	org.junit.Assert.assertEquals(1,multiValueChangeEvent.getChangeType());	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	"org.junit.Assert.assertEquals(""STR"",multiValueChangeEvent.getChangeType());"	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	org.junit.Assert.assertTrue(multiValueChangeEvent.getChangeType()==OChangeType.UPDATE);	0
202	10	org.junit.Assert.assertTrue(keysToAdd.isEmpty());	org.junit.Assert.assertEquals(1,multiValueChangeEvent.getChangedKeys().size());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(2,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(1,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(0,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(3,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(2,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(1,extr.fields());	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertThat(extr.fields(),is(1));	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(extr.fields(),1);	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertThat(extr.fields(),equalTo(1));	0
203	10	org.junit.Assert.assertEquals(extr.fields(),document.fields());	org.junit.Assert.assertEquals(4,extr.fields());	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.get(0));	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.get(0));	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.size());	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.iterator().next());	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertTrue(version.contains(expected));	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(expected,version.size());	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertEquals(1,version.size());	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertTrue(version.contains(expected));	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertTrue(version.contains(expected));	0
204	10	org.junit.Assert.assertNotNull(version);	org.junit.Assert.assertThat(version,hasItem(expected));	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
205	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	longidxUsagesAfter=indexUsages(qResult);	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(1,qResult.size());	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	longidxUsagesAfter=indexUsages(db);	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(2,qResult.size());	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	intidxUsagesAfter=indexUsages(qResult);	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),is(1));	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertEquals(3,qResult.size());	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	"longidxUsagesAfter=indexUsages(qResult,""STR"");"	0
206	10	org.junit.Assert.assertEquals(qResult.size(),2);	org.junit.Assert.assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.contains(expected));	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual).isEqualTo(expected);	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
207	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.matches(expected));	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertEquals(1,schemas.size());	1
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertEquals(2,schemas.size());	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertEquals(1,schemas.size());	1
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertEquals(3,schemas.size());	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertEquals(2,schemas.size());	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertNotNull(schemas);	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertThat(schemas).hasSize(1);	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertThat(schemas.size(),is(2));	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertTrue(schemas.size()==2);	0
208	10	org.junit.Assert.assertEquals(1,schemas.size());	org.junit.Assert.assertThat(schemas.size(),is(1));	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent2,3,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent2,1,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent2,2,""STR"",""STR""))));"	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	org.junit.Assert.assertThat(result).hasSize(3);	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	org.junit.Assert.assertEquals(1,result.size());	0
209	10	org.junit.Assert.assertEquals(asList(list.get(0),list.get(2)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	List<String>list=factory.list();	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),factory.list());"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"org.junit.Assert.assertThat(factory.list(),hasItem(""STR""));"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"org.junit.Assert.assertEquals(Arrays.asList(""STR""),factory.list());"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	List<String>result=factory.list();	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"factory.drop(""STR"");"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	Stringdb=factory.list().get(0);	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"OrientDBdb=newOrientDB(""STR"",""STR"",""STR"");"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	"OrientDBdb=newOrientDB(""STR"",""STR"");"	0
210	10	org.junit.Assert.assertEquals(factory.list().size(),0);	org.junit.Assert.assertThat(factory.list(),is(not(empty())));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NALUnitType.fromValue(0));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NalUnitType.fromValue(0));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertThat(NALUnitType.fromValue(0),is(nullValue()));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NalUnitType.fromValue(-1));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertThat(NALUnitType.fromValue(-1),is(nullValue()));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NALUnitType.fromValue(-1));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertThat(NalUnitType.fromValue(0),is(nullValue()));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NalUnitType.fromValue(1));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NALUnitType.fromValue(0));	0
211	10	org.junit.Assert.assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	org.junit.Assert.assertNull(NalUnitType.fromValue(0));	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.SETUP_WITH_RUN);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.STOP);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.SETUP);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.REFRESH);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.EXECUTE);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.RUN_WITH_SETUP);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer=createTestContainer(test);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.GET);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.RUN);	0
212	10	org.junit.Assert.assertTrue(test.childRunCalled);	testContainer.invoke(TestPhase.SETUP_WITH_RUNS);	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual,is(""STR""));"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertEquals(""STR"",actual);"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual,containsString(""STR""));"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual,equalTo(""STR""));"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual,is(equalTo(""STR"")));"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"Stringexpected=""STR"";"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual).isEqualTo(""STR"");"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertEquals(""STR"",actual);"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	"org.junit.Assert.assertThat(actual,startsWith(""STR""));"	0
213	10	"org.junit.Assert.assertEqualsStringFormat(""STR"",""STR"",actual);"	org.junit.Assert.assertThat(actual,containsString(GIGA_BYTE));	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	1
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertThat(m.markdown(null),is(""STR""));"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	org.junit.Assert.assertEquals(null,m.markdown(null));	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertEquals(m.markdown(null),""STR"");"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertThat(m.markdown(null),is(equalTo(""STR"")));"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertEquals(null,m.markdown(""STR""));"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertThat(m.markdown(null),equalTo(""STR""));"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	Stringh=m.markdown(null);	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertEquals(""STR""+""STR"",m.markdown(null));"	0
214	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(null));"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",m.markdown(null));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(""STR""));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(equalTo(""STR"")));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result).isEqualTo(""STR"");"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,equalTo(""STR""));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	org.junit.Assert.assertThat(result,is(notNullValue()));	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEqualsJson(""STR"",result);"	0
215	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"org.junit.Assert.assertEquals(newAuthPattern(""STR""),service.getAuthPattern());"	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	org.junit.Assert.assertNotNull(service.getAuthPattern());	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(newAuthPattern(""STR""));"	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(""STR"");"	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"org.junit.Assert.assertEquals(""STR"",service.getAuthPattern().toString());"	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"org.junit.Assert.assertEquals(""STR"",service.getAuthPattern().getName());"	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	org.junit.Assert.assertNotNull(service);	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	org.junit.Assert.assertThat(service.getAuthPattern()).isNotNull();	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	org.junit.Assert.assertEquals(null,service.getAuthPattern());	0
216	10	org.junit.Assert.assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	org.junit.Assert.assertNull(service.getAuthPattern());	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	1
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	1
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertNotNull(testContainer.getTestInstance());	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertThat(testContainer.getTestInstance(),instanceOf(Object.class));	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertThat(testContainer.getTestInstance(),is(equalTo(test)));	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertThat(testContainer.getTestInstance(),equalTo(test));	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertSame(test,testContainer.getTestInstance());	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	org.junit.Assert.assertSame(test,testContainer.getTestInstance());	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	"org.junit.Assert.assertThat(testContainer.getTestInstance(),equalTo(""STR""));"	0
217	10	org.junit.Assert.assertEquals(test,testContainer.getTestInstance());	"org.junit.Assert.assertThat(testContainer.getTestInstance(),is(equalTo(""STR"")));"	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	"SimulatorAddressaddress=SimulatorAddress.fromString(""STR"");"	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	"SimulatorAddressaddress=SimulatorAddress.fromString(""STR"");"	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	SimulatorAddressaddress=SimulatorAddress.workerAddress(1,0);	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	"finalSimulatorAddressaddress=SimulatorAddress.fromString(""STR"");"	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	SimulatorAddressaddress=SimulatorAddress.workerAddress(0,1);	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	SimulatorAddressaddress=SimulatorAddress.workerAddress(1,2);	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	finalSimulatorAddressaddress=SimulatorAddress.workerAddress(1,0);	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	"finalSimulatorAddressaddress=SimulatorAddress.fromString(""STR"");"	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	finalSimulatorAddressaddress=SimulatorAddress.workerAddress(0,1);	0
218	10	org.junit.Assert.assertToAndFromStringEquals(workerAddress(3,7));	"Stringaddress=""STR"";"	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts.args).hasSize(2);	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.name);"	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts.args).hasSize(1);	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertEquals(1,opts.args.size());	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.args.get(0).name);"	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts,is(notNullValue()));	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.args.get(0).name);"	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.name);"	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts).hasSize(2);	0
219	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts).hasSize(1);	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,equalTo(createVerb(""STR"")));"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertSame(createVerb(""STR""),actual);"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(createVerb(""STR"")));"	0
220	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(notNullValue()));	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(createVerb(""STR""),actual);"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(createVerb(""STR""),actual);"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(not(equalTo(createVerb(""STR"")))));"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(""STR"",actual.toString());"	0
220	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(not(equalTo(createVerb(""STR""))))));"	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertEquals(1,tests.size());	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertEquals(1,tests.size());	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertEquals(2,tests.size());	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertEquals(2,tests.size());	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertThat(tests.size(),is(1));	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	"org.junit.Assert.assertThat(tests,hasItem(newTestData(1,""STR"",""STR"")));"	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertThat(tests).hasSize(1);	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	"org.junit.Assert.assertThat(tests,hasItem(newTestData(1,""STR"",testSuite)));"	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	org.junit.Assert.assertThat(tests.size(),is(2));	0
221	10	org.junit.Assert.assertEquals(3,tests.size());	"org.junit.Assert.assertThat(tests,hasItem(newTestData(0,""STR"",""STR"")));"	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs,is(empty()));	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs,is(nullValue()));	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs.wasNull(),is(false));	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs.wasNull(),is(true));	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs,empty());	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs,is(notNullValue()));	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertTrue(rs.wasNull());	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertFalse(rs.wasNull());	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs).isEmpty();	0
222	10	org.junit.Assert.assertThat(rs.next()).isFalse();	org.junit.Assert.assertThat(rs,is(0));	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	org.junit.Assert.assertThat(config).hasSize(1);	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"org.junit.Assert.assertThat(config,hasItem(""STR""));"	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	org.junit.Assert.assertEquals(1,config.size());	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	org.junit.Assert.assertThat(config).hasSize(2);	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	org.junit.Assert.assertEquals(1,config.size());	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"org.junit.Assert.assertThat(config.containsKey(""STR""),is(true));"	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"org.junit.Assert.assertThat(config.get(""STR""),is(notNullValue()));"	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"org.junit.Assert.assertThat(config,hasEntry(""STR"",""STR""));"	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	org.junit.Assert.assertThat(config.size(),is(1));	0
223	10	"org.junit.Assert.assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"org.junit.Assert.assertThat(config.get(""STR""),hasItem(""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertTrue(bind0(someObject,""STR"",""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertFalse(bind0(someObject,""STR"",""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertEquals(true,bind0(someObject,""STR"",""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertTrue(bind0(someObject,""STR"",""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertEquals(false,bind0(someObject,""STR"",""STR""));"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"verify(someObject,times(1)).setProperty(""STR"",""STR"");"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"bind0(someObject,""STR"",""STR"");"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	"org.junit.Assert.assertEquals(""STR"",someObject.toString());"	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	org.junit.Assert.assertTrue(testCase.result);	0
224	10	"org.junit.Assert.assertEquals(""STR"",someObject.otherObject.stringField);"	org.junit.Assert.assertTrue(testCase);	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(1,sentences.size());	1
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(2,sentences.size());	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(3,sentences.size());	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(4,sentences.size());	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(0,sentences.size());	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertEquals(1,sentences.size());	1
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertTrue(sentences.size()==2);	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertTrue(sentences.size()==1);	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertTrue(sentences.size()==3);	0
225	10	org.junit.Assert.assertEquals(1,sentences.size());	org.junit.Assert.assertTrue(sentences.size()>1);	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"finalOCompositeKeykey=newOCompositeKey(Arrays.asList(""STR"",""STR""));"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertEquals(newOCompositeKey(Arrays.asList(""STR"",""STR"")),result);"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(result,equalTo(newOCompositeKey(Arrays.asList(""STR"",""STR""))));"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"")),equalTo(result));"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(result,is(newOCompositeKey(Arrays.asList(""STR"",""STR""))));"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"")),is(result));"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertEquals(newOCompositeKey(Arrays.asList(""STR"",""STR"")),result);"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	org.junit.Assert.assertThat(result,instanceOf(OCompositeKey.class));	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertEquals(newOCompositeKey(Arrays.asList(""STR"")),result);"	0
226	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"")),equalTo(result));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(attr(""STR"",""STR""),is(attrs(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(attr(""STR"",""STR""),is(newAttributes<>(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(""STR"",attr(""STR"",""STR""),is(newAttributes<>(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(""STR"",attr(""STR"",""STR""),is(attrs(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(attr(""STR"",""STR""),is(attributes(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"AttributeValidator.attr(""STR"",""STR"");"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(""STR"",attr(""STR"",""STR""),is(newHashMap<>()));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(attr(""STR"",""STR""),is(newHashMap<>()));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(""STR"",attr(""STR"",""STR""),is(attributes(""STR"",""STR"")));"	0
227	10	"org.junit.Assert.assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"org.junit.Assert.assertThat(attr(""STR"",""STR""),is(empty()));"	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertEquals(1,manager.getNewRecords().size());	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().contains(doc1));	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().contains(doc2));	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().contains(doc1));	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	Set<ORecord>records=manager.getNewRecords();	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().contains(doc2));	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().size()==2);	0
228	10	org.junit.Assert.assertEquals(2,manager.getNewRecords().size());	org.junit.Assert.assertTrue(manager.getNewRecords().size()==2);	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	Graph<String>g=createGraph();	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	Graphg=newDefaultGraph();	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	Graph<String>g=newDefaultGraph();	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"Graph<String>g=newDefaultGraph().from(""STR"",""STR"").to(""STR"");"	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"Graph<String>g=newDefaultGraph().from(""STR"").to(""STR"");"	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"Graphg=newDefaultGraph().from(""STR"",""STR"").to(""STR"");"	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"Graph<String>g=createGraph().from(""STR"",""STR"").to(""STR"");"	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	Graph<Edge>g=createGraph();	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	Graphg=createGraph();	0
229	10	"org.junit.Assert.assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"Graphg=newDefaultGraph().from(""STR"").to(""STR"");"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(null,""STR""));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(""STR"",null));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(null,""STR""));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(""STR"",null));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"BuildInfoUtils.isMinVersion(""STR"",""STR"");"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"StringminVersion=""STR"";"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertTrue(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
230	10	"org.junit.Assert.assertFalse(isMinVersion(""STR"",null));"	"org.junit.Assert.assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(result,is(newOCompositeKey(Arrays.asList(""STR"",""STR""))));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"finalOCompositeKeykey=newOCompositeKey(Arrays.asList(""STR"",""STR""));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"")),is(result));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"")),equalTo(result));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertEquals(newOCompositeKey(Arrays.asList(""STR"",""STR"")),result);"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertEquals(newOCompositeKey(Arrays.asList(""STR"",""STR"")),result);"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(result,is(newOCompositeKey(Arrays.asList(""STR"",""STR"",""STR""))));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"",""STR"")),is(result));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"org.junit.Assert.assertThat(newOCompositeKey(Arrays.asList(""STR"",""STR"",""STR"")),equalTo(result));"	0
231	10	"org.junit.Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"finalOCompositeKeykey=newOCompositeKey(Arrays.asList(""STR""));"	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	1
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(3,tokens.size());	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	"org.junit.Assert.assertThat(tokens,hasItem(newWord(""STR"")));"	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(4,tokens.size());	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	1
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(6,tokens.size());	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==2);	0
232	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==3);	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,newORecordId(""STR""),""STR""));"	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertEquals(expectedResult,result);	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertThat(result,equalTo(expectedResult));	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertEquals(expectedResult.size(),result);	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertThat(result,is(expectedResult));	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertThat(result,is(equalTo(expectedResult)));	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertEquals(expectedResult.toString(),result);	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,""STR"",""STR""));"	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	"expectedResult.add(newOCompositeKey(12,newORecordId(""STR""),null));"	0
233	10	org.junit.Assert.assertEquals(result,expectedResult);	org.junit.Assert.assertTrue(result.equals(expectedResult));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	finalintresult=compositeKey.compareTo(anotherCompositeKey);	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	finalOCompositeKeyotherCompositeKey=newOCompositeKey();	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertEquals(-1,compositeKey.compareTo(anotherCompositeKey));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertEquals(1,compositeKey.compareTo(anotherCompositeKey));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertEquals(-1,compositeKey.compareTo(anotherCompositeKey));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	org.junit.Assert.assertThat(compositeKey.compareTo(anotherCompositeKey),is(0));	0
234	10	org.junit.Assert.assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	finalOCompositeKeyanotherCompositeKey2=newOCompositeKey();	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.equals(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.contains(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(actual,expected);	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertTrue(actual.matches(expected));	0
235	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertEquals(1,execute.size());	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertEquals(2,execute.size());	1
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertEquals(3,execute.size());	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute.size(),is(2));	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute).hasSize(1);	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute.size(),is(1));	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute).hasSize(2);	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertEquals(0,execute.size());	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute.size(),equalTo(2));	0
236	10	org.junit.Assert.assertEquals(2,execute.size());	org.junit.Assert.assertThat(execute).hasSize(3);	0
237	10	org.junit.Assert.assertEquals(2,result.size());	org.junit.Assert.assertEquals(2,result.size());	1
237	10	org.junit.Assert.assertEquals(2,result.size());	org.junit.Assert.assertEquals(1,result.size());	0
237	10	org.junit.Assert.assertEquals(2,result.size());	org.junit.Assert.assertEquals(1,result.size());	0
237	10	org.junit.Assert.assertEquals(2,result.size());	org.junit.Assert.assertEquals(2,result.size());	1
237	10	org.junit.Assert.assertEquals(2,result.size());	"org.junit.Assert.assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""))));"	0
237	10	org.junit.Assert.assertEquals(2,result.size());	"org.junit.Assert.assertThat(result,hasItem(newTestNamed(""STR"")));"	0
237	10	org.junit.Assert.assertEquals(2,result.size());	"org.junit.Assert.assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""))));"	0
237	10	org.junit.Assert.assertEquals(2,result.size());	"org.junit.Assert.assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR"")));"	0
237	10	org.junit.Assert.assertEquals(2,result.size());	org.junit.Assert.assertTrue(result.size()>0);	0
237	10	org.junit.Assert.assertEquals(2,result.size());	"org.junit.Assert.assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR"")));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"StringmimeType=Mime.getMimeTypeForFile(""STR"");"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertThat(Mime.getMimeTypeForFile(""STR""),equalTo(""STR""));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertThat(Mime.getMimeTypeForFile(""STR""),is(equalTo(""STR"")));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertThat(Mime.getMimeTypeForFile(""STR""),is(""STR""));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"Stringmime=Mime.getMimeTypeForFile(""STR"");"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"org.junit.Assert.assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""+myPort+""STR""));"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"Mime.getMimeTypeForFile(""STR"");"	0
238	10	"org.junit.Assert.assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"finalStringmimeType=Mime.getMimeTypeForFile(""STR"");"	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a,not(equalTo(b)));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertNotEquals(a,b);	1
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a.cells,not(equalTo(b)));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a.cells,not(equalTo(b.cells)));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a.cells,equalTo(b.cells));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a,equalTo(b));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,2));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertNotEquals(a,b);	1
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a.cells,is(equalTo(b.cells)));	0
239	10	org.junit.Assert.assertNotEquals(a,b);	org.junit.Assert.assertThat(a.cells,is(not(b)));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.of());	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.empty(AEquality.EQUALS));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.empty(AEquality.EQUAL));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<Integer,Boolean>empty(AEquality.EQUAL));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<Integer,Boolean>empty(AEquality.EQUALS));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<Object,Boolean>empty(AEquality.EQUAL));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<String,Boolean>empty(AEquality.EQUAL));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<Object,Boolean>empty(AEquality.EQUALS));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<String,Boolean>empty(AEquality.EQUALS));	0
240	10	org.junit.Assert.assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	checkSerSame(AHashSet.<Integer>empty(AEquality.EQUAL));	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertThat(routePrioritizer.getPrioritizedRoutes(),hasItem(null));	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.add(null);	0
241	10	org.junit.Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	registry.workerCount();	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount();	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR"")));"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress);	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(""STR"",""STR""));"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR""),newWorkerParametersList(agentAddress,2,""STR"")));"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(""STR"");"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerData(""STR""),newWorkerData(""STR"")));"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR""),newWorkerParametersList(agentAddress,3,""STR"")));"	0
242	10	org.junit.Assert.assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress,2);	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(1,BooleanCoding.leadingZeroCountInByte(0));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0xFF));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertThat(BooleanCoding.leadingZeroCountInByte(0),is(0));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0x01));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(1));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0x00));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(2,BooleanCoding.leadingZeroCountInByte(0));	0
243	10	org.junit.Assert.assertEquals(7,leadingZeroCountInByte((byte)1));	org.junit.Assert.assertEquals(0,BooleanCoding.leadingZeroCountInByte(0x01));	0
244	10	org.junit.Assert.assertNotNull(options);	"org.junit.Assert.assertThat(options,hasItem(""STR""));"	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertThat(options,is(notNullValue()));	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(1,options.size());	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(1,options.size());	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(1,options.size());	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertEquals(0,options.size());	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertNotNull(options);	1
244	10	org.junit.Assert.assertNotNull(options);	"org.junit.Assert.assertTrue(options.contains(""STR""));"	0
244	10	org.junit.Assert.assertNotNull(options);	org.junit.Assert.assertNotNull(options);	1
244	10	org.junit.Assert.assertNotNull(options);	"org.junit.Assert.assertThat(options,containsInAnyOrder(""STR"",""STR""));"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(""STR""));"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),equalTo(""STR""));"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(nullValue()));	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(equalTo(""STR"")));"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME));	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertTrue(nameProperty.getName().equals(""STR""));"	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertEquals(clazz.getName(),nameProperty.getName());	0
245	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME+""STR""));"	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Doubleresult=doubleSerializer.deserializeFromByteBufferObject(buffer);	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	doubleresult=doubleSerializer.deserializeFromByteBufferObject(buffer);	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(OBJECT,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(DOUBLE,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
246	10	org.junit.Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	org.junit.Assert.assertEquals(OBJECT,doubleSerializer.deserializeFromByteBufferObject(buffer));	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertEquals(1,result.size());	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertEquals(insertcount,result.size());	1
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertThat(result.size(),is(1));	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertEquals(1,result.size());	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertEquals(2,result.size());	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	ODocumentdocument=result.get(0);	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertTrue(result.size()>0);	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertTrue(result.size()==insertcount);	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertThat(result.size(),is(2));	0
247	10	org.junit.Assert.assertEquals(insertcount,result.size());	org.junit.Assert.assertTrue(result.size()>0);	0
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(newJsonObject()));	0
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(SCORE_JSON,actual.toString());	0
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(1,actual.size());	0
248	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(""STR"",actual.toString());"	0
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(MAX,actual.get(0).toString());	0
248	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,hasItem(""STR""));"	0
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertNotNull(actual);	1
248	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(MAX,actual.get(0).getName());	0
248	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual.get(""STR""),is(equalTo(MAX)));"	0
248	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual.get(""STR""),is(MIN));"	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(1,results.size());	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(2,results.size());	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(3,results.size());	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),is(1));	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),is(2));	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results,hasItem(1));	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results).hasSize(1);	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results,hasItem(0));	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),equalTo(1));	0
249	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),equalTo(2));	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	org.junit.Assert.assertEquals(1,mapToTest.size());	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	org.junit.Assert.assertEquals(0,mapToTest.size());	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertEquals(0,mapToTest.get(""STR"").size());"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertEquals(2,mapToTest.get(""STR"").size());"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertEquals(1,mapToTest.get(""STR"").size());"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertThat(mapToTest.get(""STR""),is(notNullValue()));"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertThat(mapToTest.get(""STR""),is(equalTo(1)));"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertThat(mapToTest.get(""STR""),is(equalTo(2)));"	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	org.junit.Assert.assertEquals(2,mapToTest.size());	0
250	10	org.junit.Assert.assertEquals(result,propertyIndexByKey);	"org.junit.Assert.assertThat(mapToTest.get(""STR""),is(1));"	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),is(true));	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(true));	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertThat(w.isRecognized(),equalTo(false));	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertTrue(w.isRecognized());	0
251	10	org.junit.Assert.assertFalse(w.isRecognized());	org.junit.Assert.assertFalse(w.isRecognized());	1
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertNotNull(method);	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(notNullValue()));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,notNullValue());	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(LocalWarmupMethod.class));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(LocalWarmupFilter.class));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(LocalWarmupMethod.class)));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(LocalWarmupFilter.class)));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,is(instanceOf(PrepareMethod.class)));	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method).isNotNull();	0
252	10	"org.junit.Assert.assertEquals(""STR"",method.getName());"	org.junit.Assert.assertThat(method,instanceOf(WarmupMethod.class));	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(0,output.get(""STR"").size());"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	org.junit.Assert.assertEquals(metadata,output.getMetadata());	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(metadata,output.get(""STR""));"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(""STR"",output.toString());"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	org.junit.Assert.assertEquals(metadata,output);	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	org.junit.Assert.assertEquals(metadata.getMetadata(),md);	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(""STR"",metadata.getValueByField(""STR"").toString());"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(""STR"",metadata.getName());"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(""STR"",metadata.getMetadata().getName());"	0
253	10	org.junit.Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"org.junit.Assert.assertEquals(""STR"",md.get(""STR"").toString());"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,""STR"",""STR""))));"	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	org.junit.Assert.assertEquals(1,result.size());	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	org.junit.Assert.assertEquals(1,result.size());	0
254	10	org.junit.Assert.assertEquals(asList(list.get(1),list.get(3)),result);	"org.junit.Assert.assertThat(result,hasItem(newWorkerData(newParameters(agent1,5,""STR"",""STR""))));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',1));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',-1));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',2));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',1);	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',3));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('A',1));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',2);	0
255	10	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"org.junit.Assert.assertEquals(""STR"",CommUtil.repeatChar('a',5));"	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(2,res.size());	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(1));	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(2));	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(3,res.size());	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(2,res.size());	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(1);	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(2);	0
256	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertTrue(res.size()>0);	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,equalTo(createVerb(""STR"")));"	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertSame(createVerb(""STR""),actual);"	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(createVerb(""STR""),actual);"	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(createVerb(""STR"")));"	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(createVerb(""STR""),actual);"	0
257	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(notNullValue()));	0
257	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,instanceOf(Verb.class));	0
257	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(""STR"",actual.toString());"	0
257	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertNotNull(actual);	1
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertFalse(testContainer.isRunning());	1
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertFalse(testContainer.isRunning());	1
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertTrue(testContainer.isRunning());	0
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertThat(testContainer.isRunning(),is(false));	0
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertFalse(testContainer.isRunning());	1
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertTrue(testContainer.isRunning());	0
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertTrue(testContainer.isRunning());	0
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertFalse(testContainer.isRunning());	1
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertTrue(testContainer.isRunning());	0
258	10	org.junit.Assert.assertFalse(testContainer.isRunning());	org.junit.Assert.assertThat(testContainer.isRunning(),equalTo(false));	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertTrue(matcher.find());	1
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertFalse(matcher.find());	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertThat(matcher.find(),is(true));	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertTrue(matcher.find());	1
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertThat(matcher.find(),equalTo(true));	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertThat(matcher.find(),is(false));	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertThat(matcher.find(),equalTo(false));	0
259	10	org.junit.Assert.assertTrue(matcher.find());	booleanfound=matcher.find();	0
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertTrue(matcher.find());	1
259	10	org.junit.Assert.assertTrue(matcher.find());	org.junit.Assert.assertEquals(false,matcher.find());	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	Shippable	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
260	10	"org.junit.Assert.assertEquals(""STR"",newShippable(env()).getPullRequest());"	Shippable	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	org.junit.Assert.assertEquals(1,fields.size());	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	org.junit.Assert.assertEquals(2,fields.size());	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertThat(fields.get(""STR""),is(newString[]{""STR""}));"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertThat(fields.get(""STR""),is(equalTo(""STR"")));"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertThat(fields.containsKey(""STR""),is(true));"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertEquals(""STR"",fields.get(AbstractIndexerBolt.urlFieldParamName));"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR"")[0]);"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertTrue(fields.containsKey(""STR""));"	0
261	10	"org.junit.Assert.assertEquals(""STR"",fields.get(""STR""));"	"org.junit.Assert.assertThat(fields.containsKey(""STR""),is(false));"	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(trackedMap.isDirty());	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertThat(trackedMap.isDirty(),is(false));	0
262	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertThat(trackedMap.isDirty(),is(true));	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	scriptExecutor.execute(scriptOperation,promise);	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(scriptOperation,promise);	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	"org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR""}}));"	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	"org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR""}}));"	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}}));	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	verify(driver).execute(scriptOperation,promise);	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	"org.junit.Assert.assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR""}}));"	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	"org.junit.Assert.assertTrueEventually(newAssertTask(){@Overridepublicvoidrun(){thrownewException(""STR""}}));"	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(eq(scriptOperation),eq(promise));	0
263	10	org.junit.Assert.assertTrue(promise.getAnswer()instanceofString);	"org.junit.Assert.assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR""}}));"	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	1
264	10	org.junit.Assert.assertEquals(2,tokens.size());	"org.junit.Assert.assertThat(tokens,hasItem(newWord(""STR"")));"	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(3,tokens.size());	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	1
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertEquals(0,tokens.size());	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==1);	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==2);	0
264	10	org.junit.Assert.assertEquals(2,tokens.size());	org.junit.Assert.assertNotNull(tokens);	0
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertThat(result,is(nullValue()));	0
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertThat(result,is(notNullValue()));	0
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertNull(result);	1
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertNull(result);	1
265	10	org.junit.Assert.assertNull(result);	"org.junit.Assert.assertThat(""STR"",result,is(nullValue()));"	0
265	10	org.junit.Assert.assertNull(result);	"org.junit.Assert.assertThat(result,is(nullValue(""STR"")));"	0
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertThat(result,nullValue());	0
265	10	org.junit.Assert.assertNull(result);	"org.junit.Assert.assertThat(""STR"",result,is(notNullValue()));"	0
265	10	org.junit.Assert.assertNull(result);	"org.junit.Assert.assertThat(result,is(equalTo(""STR"")));"	0
265	10	org.junit.Assert.assertNull(result);	org.junit.Assert.assertEquals(1,result.intValue());	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService.class);"	0
266	10	"org.junit.Assert.assertSerializationEqualsSpec(service,""STR"");"	"mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",service,AccessCookieService."	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Strings=""STR"";"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"finalMutableGraphgraph=parse(""STR"");"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	org.junit.Assert.assertEquals(0,pars.messages.size());	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	List<LinkSource>sources=newArrayList<LinkSource>();	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"finalMutableGraphg=parse(""STR"");"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Stringinput=""STR"";"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Strings=read(""STR"");"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Strings=""STR""+""STR""+""STR""+""STR"";"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Strings=""STR""+""STR""+""STR"";"	0
267	10	"org.junit.Assert.assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	"Strings=""STR""+""STR"";"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	1
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	1
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertFalse(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertFalse(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"booleanaccepted=deflateExtension.acceptProvidedExtensionAsServer(""STR"");"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertThat(deflateExtension.acceptProvidedExtensionAsServer(""STR""),is(true));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertThat(deflateExtension.acceptProvidedExtensionAsServer(""STR""),equalTo(true));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertThat(deflateExtension.acceptProvidedExtensionAsServer(""STR""),is(false));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	"org.junit.Assert.assertThat(deflateExtension.acceptProvidedExtensionAsServer(""STR""),equalTo(false));"	0
268	10	"org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	org.junit.Assert.assertTrue(deflateExtension.acceptProvidedExtensionAsServer(null));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertThat(result,is(compositeKey));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertThat(result,equalTo(compositeKey));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertThat(result,is(equalTo(compositeKey)));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertThat(result,instanceOf(CompositeKey.class));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertThat(result,hasItem(compositeKey));	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	"org.junit.Assert.assertThat(""STR"",result,is(compositeKey));"	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertEquals(2,result.intValue());	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertTrue(resultinstanceofList);	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertEquals(2,result.size());	0
269	10	org.junit.Assert.assertEquals(result,compositeKey);	org.junit.Assert.assertEquals(2,result.hashCode());	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parse(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfile(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.simple(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.load(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.loadProcessorConfig(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.read(is);	0
270	10	org.junit.Assert.assertNotNull(is);	"ProcessorConfigconfig=ProfileUtil.parseProfile(is,""STR"");"	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.process(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfileFile(is);	0
270	10	org.junit.Assert.assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.readProfile(is);	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(true));	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(true));	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertTrue(qResult.hasNext());	1
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),equalTo(false));	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	"qResult=db.query(""STR"");"	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertThat(qResult.hasNext(),is(false));	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertFalse(qResult.hasNext());	0
271	10	org.junit.Assert.assertTrue(qResult.hasNext());	org.junit.Assert.assertEquals(true,qResult.hasNext());	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(equalTo(""STR"")));"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(""STR""));"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,equalTo(""STR""));"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result).isEqualTo(""STR"");"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,containsString(""STR""));"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEqualsJson(""STR"",result);"	0
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
272	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(""STR""+""STR""));"	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(1,execute.size());	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(2,execute.size());	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute,hasItem(test1));	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(3,execute.size());	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute).hasSize(1);	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertEquals(0,execute.size());	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute.size(),is(1));	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute).hasSize(2);	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertThat(execute,hasItems(test1));	0
273	10	org.junit.Assert.assertEquals(execute.size(),1);	org.junit.Assert.assertTrue(execute.size()>0);	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(result),equalTo(""STR""));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),equalTo(result));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(result),is(""STR""));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(result),containsString(""STR""));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),is(equalTo(result)));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(result.replace(""STR"",""STR""))).isEqualTo(""STR"");"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),containsString(result));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertEquals(uriPathOf(newFile(""STR"")),result);"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),is(result));"	0
274	10	"org.junit.Assert.assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"org.junit.Assert.assertEquals(""STR"",uriPathOf(result));"	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"org.junit.Assert.assertFalse(prioritizer.getPrioritizedRoutes().contains(""STR""));"	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(prioritizer.getPrioritizedRoutes().size()==0);	0
275	10	org.junit.Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());	org.junit.Assert.assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=db.begin();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	db.begin();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	org.junit.Assert.assertTrue(db.begin().isActive());	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	org.junit.Assert.assertTrue(db.begin().isActive());	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	Transactiontx=db.begin();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	ODatabaseDocumenttx=db.begin();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=newOTransaction(db);	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	finalOTransactiontx=db.begin();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=newOTransaction();	0
276	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OCommitStatementexecution=newOCommitStatement();	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(1,results.size());	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(2,results.size());	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(3,results.size());	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertThat(results.size(),is(1));	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(1,results.size());	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(2,results.size());	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()==2);	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()>0);	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()>0);	0
277	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()==2);	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertTrue(importer.getMetadata().getSchema().existsClass(""STR""));"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	dbImp.drop();	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertFalse(importer.getMetadata().getSchema().existsClass(""STR""));"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	1
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertTrue(importer.getMetadata().getSchema().existsClass(""STR""));"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"org.junit.Assert.assertFalse(importer.getMetadata().getSchema().existsClass(""STR""));"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"dbImp=newODatabaseDocumentTx(""STR""+ODatabaseImportTest.class.getSimpleName());"	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	db.drop();	0
278	10	"org.junit.Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"db=newODatabaseDocumentTx(""STR""+ODatabaseImportTest.class.getSimpleName());"	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result,instanceOf(JMXMBeanConnection.class));	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result).isSameAs(this.mockJmxMbeanConnection);	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result,instanceOf(JmxMBeanConnection.class));	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertEquals(this.mockJmxMbeanConnection,result);	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result).isInstanceOf(JMXMBeanConnection.class);	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result,instanceOf(MBeanAccessConnection.class));	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result,instanceOf(JMXMBeanAccessConnection.class));	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertNotNull(result);	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	org.junit.Assert.assertThat(result,instanceOf(JmxMBeanAccessConnection.class));	0
279	10	org.junit.Assert.assertSame(result,this.mockJmxMbeanConnection);	Mockito.verify(result).close();	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	"registry.addAgent(""STR"",""STR"");"	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertEquals(1,registry.agentCount());	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertEquals(2,registry.agentCount());	1
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertEquals(1,registry.agentCount());	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertThat(registry.agentCount(),is(2));	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertThat(registry.agentCount(),is(1));	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertThat(registry.agentCount(),equalTo(1));	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertThat(registry.agentCount(),equalTo(2));	0
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertEquals(2,registry.agentCount());	1
280	10	org.junit.Assert.assertEquals(2,registry.agentCount());	org.junit.Assert.assertEquals(3,registry.agentCount());	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertThat(result,is(newBigDecimal(10.5D)));	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertThat(result,equalTo(newBigDecimal(10.5D)));	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertThat(result,is(newBigDecimal[]{newBigDecimal(10.5D)}));	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertEquals(newBigDecimal(10.5D),result);	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertEquals(10.5D,result);	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertEquals(10.5D,result);	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertThat(result,is(notNullValue()));	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertEquals(10.5D,result);	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	"org.junit.Assert.assertThat(result,equalTo(newBigDecimal(""STR"")));"	0
281	10	org.junit.Assert.assertTrue(resultinstanceofBigDecimal);	org.junit.Assert.assertThat(result,is(newBigDecimal[]{newBigDecimal(10)}));	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertEquals(""STR"",stm.toString());"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertEquals(""STR"",stm.toString());"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertThat(stm.toString(),is(""STR""));"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertEquals(""STR""+""STR"",stm.toString());"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertEquals(""STR""+""STR"",stm.toString());"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertThat(stm.toString(),is(equalTo(""STR"")));"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"Stringexpected=""STR"";"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",stm.toString());"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	"org.junit.Assert.assertThat(stm.toString(),equalTo(""STR""));"	0
282	10	"org.junit.Assert.assertTrue(stm.whereClause.toString().contains(""STR""));"	stm.whereClause.getBaseExpression().translateLuceneOperator();	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertTrue(pokemons.isRecognized());	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertFalse(pokemons.isRecognized());	1
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertThat(pokemons.isRecognized(),is(true));	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertThat(pokemons.isRecognized(),equalTo(true));	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertThat(pokemons.isRecognized(),equalTo(false));	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertTrue(pokemons.isRecognized());	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertTrue(pokemons.isRecognized());	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertThat(pokemons.isRecognized(),is(false));	0
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertFalse(pokemons.isRecognized());	1
283	10	org.junit.Assert.assertFalse(pokemons.isRecognized());	org.junit.Assert.assertFalse(pokemons.isRecognized());	1
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertEquals(""STR"",json);"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertEquals(""STR"",json);"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertThat(json,is(""STR""));"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertThat(json,containsString(""STR""));"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertTrue(json.contains(""STR""));"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertTrue(json.contains(""STR""));"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",json);"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	org.junit.Assert.assertTrue(mapper.readValue(json,PropertyValue.class).isEmpty());	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR""+""STR"",json);"	0
284	10	"org.junit.Assert.assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"org.junit.Assert.assertThat(json,is(""STR""+""STR""+""STR""));"	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(expectedResult));	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl).isEqualTo(expectedResult);	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	1
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,equalTo(expectedResult));	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	org.junit.Assert.assertThat(normalizedUrl,is(not(expectedResult)));	0
285	10	org.junit.Assert.assertEquals(expectedResult,normalizedUrl);	"org.junit.Assert.assertThat(normalizedUrl,is(""STR""));"	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
286	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
287	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,is(""STR""));"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertTrue(result.contains(""STR""));"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,containsString(""STR""));"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR"",result);"	1
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertThat(result,equalTo(""STR""));"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEqualsJson(""STR"",result);"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR""+""STR"",result);"	0
288	10	"org.junit.Assert.assertEquals(""STR"",result);"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",result);"	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	SimulatorAddressaddress=operation.getWorkerAddress();	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	org.junit.Assert.assertNull(operation.getWorkerAddress());	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	SimulatorAddressworkerAddress=operation.getWorkerAddress();	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	"SimulatorAddressexpected=SimulatorAddress.fromString(""STR"");"	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	SimulatorAddressactual=operation.getWorkerAddress();	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	org.junit.Assert.assertNull(operation.getWorkerAddress());	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	org.junit.Assert.assertThat(operation.getWorkerAddress(),is(workerAddress));	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	SimulatorAddressresult=operation.getWorkerAddress();	0
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	1
289	10	org.junit.Assert.assertEquals(workerAddress,operation.getWorkerAddress());	org.junit.Assert.assertThat(operation.getWorkerAddress(),is(nullValue()));	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	SourcesourceB=sourceLoader.load(fileB.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	SourcesourceB=sourceLoader.load(fileA.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	sourceA=sourceLoader.load(fileA.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	1
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	sourceA=sourceLoader.load(fileB.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	sourceB=sourceLoader.load(fileB.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	org.junit.Assert.assertNotNull(sourceA);	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	sourceB=sourceLoader.load(fileA.getName());	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	"SourcesourceB=sourceLoader.load(""STR"");"	0
290	10	"org.junit.Assert.assertEquals(""STR"",sourceA.getName());"	org.junit.Assert.assertEquals(fileA,sourceA);	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(""STR""));"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertEquals(""STR"",nameProperty.getName());"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),equalTo(""STR""));"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(nullValue()));	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(equalTo(""STR"")));"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertNull(nameProperty.getName());	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME));	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertFalse(nameProperty.getName().equals(""STR""));"	0
291	10	org.junit.Assert.assertEquals(nameProperty.getName(),PROP_NAME);	"org.junit.Assert.assertThat(nameProperty.getName(),is(PROP_NAME+""STR""));"	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts.args).hasSize(2);	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts.args).hasSize(1);	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.name);"	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts,is(notNullValue()));	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts.args).hasSize(3);	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.args.get(0).name);"	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts).hasSize(2);	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.args.get(0).name);"	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	"org.junit.Assert.assertEquals(""STR"",opts.name);"	0
292	10	"org.junit.Assert.assertEquals(map(""STR"",""STR""),opts.opts);"	org.junit.Assert.assertThat(opts).hasSize(1);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.setStatement(statement);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.setId(statement.getId());	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.addAttachment(attachment);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.setStored(true);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.add(statement);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.addStatement(statement);	0
293	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(statement,actual);	0
293	10	org.junit.Assert.assertNotNull(actual);	"actual.addAttachment(newAttachment(""STR"",""STR""));"	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.setId(statement.getId()+1);	0
293	10	org.junit.Assert.assertNotNull(actual);	actual.addAttachment(newAttachment());	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertEquals(Color.RED,Color.rgb(""STR""));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertEquals(newColor(""STR""),Color.rgb(""STR""));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"Colorrgb=Color.rgb(""STR"");"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	org.junit.Assert.assertEquals(RED,Color.rgb(RED));	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertThat(Color.rgb(""STR""),instanceOf(Color.class));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"Colorcolor=Color.rgb(""STR"");"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertEquals(newColor(""STR"",0,0),Color.rgb(""STR""));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertThat(Color.rgb(""STR""),is(color(""STR"")));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertThat(Color.rgb(""STR""),equalTo(newColor(""STR"",0,0)));"	0
294	10	"org.junit.Assert.assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"org.junit.Assert.assertThat(Color.rgb(""STR""),equalTo(newColor(""STR"",""STR"")));"	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertEquals(""STR"",file.getName());"	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertThat(file).isEqualTo(""STR"");"	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file.exists());	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file.exists());	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertThat(file).isNotNull();	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	"org.junit.Assert.assertEquals(""STR"",file.getAbsolutePath());"	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertNotNull(file);	0
295	10	org.junit.Assert.assertThat(file,is(not(nullValue())));	org.junit.Assert.assertTrue(file!=null);	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertEquals(""STR"",idProperty.getName());"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),is(""STR""));"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertEquals(""STR"",idProperty.getName());"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),equalTo(""STR""));"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),is(PROP_ID));	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"org.junit.Assert.assertThat(idProperty.getName(),is(equalTo(""STR"")));"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),is(PROP_NAME));	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	"db.command(newOCommandSQL(""STR"")).execute();"	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	org.junit.Assert.assertThat(idProperty.getName(),equalTo(PROP_ID));	0
296	10	org.junit.Assert.assertEquals(idProperty.getName(),PROP_ID);	System.out.println(idProperty.getName());	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	org.junit.Assert.assertEquals(1,transformers.size());	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	org.junit.Assert.assertEquals(0,transformers.size());	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"org.junit.Assert.assertThat(transformers.remove(""STR""),is(true));"	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	org.junit.Assert.assertThat(result,is(notNullValue()));	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"org.junit.Assert.assertThat(transformers.remove(""STR""),is(false));"	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	org.junit.Assert.assertThat(result(),is(notNullValue()));	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"log.info(""STR"");"	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"org.junit.Assert.assertThat(transformers.remove(""STR""),equalTo(0));"	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"log.info(""STR""+""STR"");"	0
297	10	org.junit.Assert.assertEquals(1,getResult().size());	"log.info(""STR""+""STR""+""STR"");"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	Stringnow2=format.format(newDate());	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"org.junit.Assert.assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))<0);"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"org.junit.Assert.assertEquals(-1,comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now)));"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"org.junit.Assert.assertEquals(0,comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now)));"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"intcompare=comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now));"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"org.junit.Assert.assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))>0);"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"org.junit.Assert.assertTrue(comparator.compare(newBinaryField(""STR"",now),newBinaryField(""STR"",now))==0);"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	"Stringnow2=format.format(""STR"");"	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	org.junit.Assert.assertEquals(-1,comparator.compare(OType.DATETIME,now));	0
298	10	org.junit.Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	org.junit.Assert.assertTrue(comparator.compare(OType.DATETIME,now)<0);	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertEquals(this.mockAttributeInjector,poller.getAttributeInjector());	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertEquals(this.mockAttributeInjector,poller.getAttributeInjector());	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertSame(this.mockAttributeInjector,poller.getAttributeInjector());	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(Matcherpoller.getAttributeInjector(),Matchers.instanceOf(AttributeInjector.class));	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(Matcherpoller.getAttributeInjector(),Matchers.equalTo(this.mockAttributeInjector));	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(Matcherpoller.getAttributeInjector(),Matchers.<AttributeInjector>is(this.mockAttributeInjector));	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(Matcherpoller.getAttributeInjector(),Matchers.<AttributeInjector>instanceOf(SetAttributeInjector.class));	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(Matcherpoller.getAttributeInjector(),Matchers.hasItem(this.mockAttributeInjector));	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	Mockito.when(this.mockAttributeInjector.getAttributeInjector()).thenReturn(this.mockAttributeInjector);	0
299	10	org.junit.Assert.assertNotNull(this.poller.getAttributeInjector());	org.junit.Assert.assertThat(poller.getAttributeInjector()).isEqualTo(this.mockAttributeInjector);	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	org.junit.Assert.assertArrayEquals(expected,outputStream.toByteArray());	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	"org.junit.Assert.assertArrayEquals(expected,newString[]{""STR""});"	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	"org.junit.Assert.assertArrayEquals(newString[]{""STR"",""STR""});"	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	org.junit.Assert.assertEquals(expected,outputStream.toByteArray());	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	"org.junit.Assert.assertArrayEquals(expected,newString[]{""STR"",""STR"",""STR""},outputStream.toByteArray());"	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	org.junit.Assert.assertArrayEquals(expected,outputStream.toByteArray());	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	"org.junit.Assert.assertArrayEquals(expected,newString[]{""STR"",""STR"",""STR"",""STR""},outputStream.toByteArray());"	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	org.junit.Assert.assertThat(outputStream.toByteArray(),is(expected));	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	org.junit.Assert.assertArrayEquals(expected,newString[]{responseBody});	0
300	10	org.junit.Assert.assertResponse(outputStream,expected);	"org.junit.Assert.assertEquals(expected,newString[]{""STR""});"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR"",oc.render());"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render(),is(""STR""));"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR"",oc.render());"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render(),is(equalTo(""STR"")));"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render(),equalTo(""STR""));"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render(),containsString(""STR""));"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	1
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR""+""STR"",oc.render());"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertEquals(""STR""+""STR"",oc.render());"	0
301	10	"org.junit.Assert.assertThat(oc.render()).isEqualTo(""STR"");"	"org.junit.Assert.assertThat(oc.render(),is(""STR""+""STR""));"	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(1,results.size());	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(2,results.size());	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),is(1));	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertTrue(results.size()>0);	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results.size(),is(2));	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertTrue(results.size()>0);	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertEquals(3,results.size());	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertTrue(results.size()>1);	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	"org.junit.Assert.assertThat(results,hasItem(""STR""));"	0
302	10	org.junit.Assert.assertEquals(results.size(),1);	org.junit.Assert.assertThat(results,hasSize(1));	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertFalse(readRequest.isHasContent());	1
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertTrue(readRequest.isHasContent());	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertFalse(readRequest.isHasContent());	1
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertTrue(readRequest.isHasContent());	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertThat(readRequest.isHasContent(),is(false));	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertThat(readRequest.isHasContent(),is(true));	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertEquals(false,readRequest.isHasContent());	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertEquals(false,readRequest.isHasContent());	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertThat(readRequest.isHasContent(),equalTo(false));	0
303	10	org.junit.Assert.assertFalse(readRequest.isHasContent());	org.junit.Assert.assertThat(readRequest.isHasContent(),equalTo(true));	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(3,tokens.size());	1
304	10	org.junit.Assert.assertEquals(3,tokens.size());	"org.junit.Assert.assertThat(tokens,hasItem(newWord(""STR"")));"	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(1,tokens.size());	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==1);	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(2,tokens.size());	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertEquals(0,tokens.size());	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==2);	0
304	10	org.junit.Assert.assertEquals(3,tokens.size());	org.junit.Assert.assertTrue(tokens.size()==3);	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertFalse(testCore.warehouseDir().exists());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertTrue(testCore.warehouseDir().exists());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	PathwarehouseDir=testCore.warehouseDir();	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertNull(testCore.warehouseDir());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertNull(testCore.warehouseDir());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	"org.junit.Assert.assertEquals(""STR"",testCore.warehouseDir().toString());"	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertFalse(testCore.warehouseDir().isDirectory());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertEquals(null,testCore.warehouseDir());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertTrue(testCore.warehouseDir().isDirectory());	0
305	10	org.junit.Assert.assertFalse(Files.exists(testCore.warehouseDir()));	org.junit.Assert.assertFalse(testCore.warehouseDir().isEmpty());	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes());"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetResource.toPath(),""STR"".getBytes());"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetDir.toPath(),""STR"".getBytes());"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"files.write(targetFile.toPath(),""STR"".getBytes());"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.US_ASCII));"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(UTF_8));"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.copy(targetFile.toPath(),""STR"".getBytes());"	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),src.getBytes(StandardCharsets.UTF_8));	0
306	10	org.junit.Assert.assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(true));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertFalse(bind0(testObject,""STR"",null));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertFalse(bind0(testObject,""STR"",null));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertTrue(bind0(testObject,""STR"",null));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertFalse(bind0(testObject,""STR"",null));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertEquals(false,bind0(testObject,""STR"",null));"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"verify(testObject,times(1)).set(eq(""STR""),null);"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	org.junit.Assert.assertThat(testObject,notNullValue());	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"org.junit.Assert.assertFalse(testObject.getEnumValue(""STR"")==null);"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"verify(testObject,times(1)).set(""STR"",null);"	0
307	10	org.junit.Assert.assertNull(testObject.enumField);	"verify(testObject,never()).set(eq(""STR""),null);"	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+"	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>listList=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"""	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>list2=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"""	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"mapper.readTree(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+"""	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>listList=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"""	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"","	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",List.class)"	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",List.class);"	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",List.class);"	0
308	10	"org.junit.Assert.assertSerializationEqualsSpec(list,""STR"");"	"List<Annotation>results=mapper.readValue(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",List.class);"	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertNotNull(in);	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertThat(in,is(notNullValue()));	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertThat(in).isNotNull();	0
309	10	org.junit.Assert.assertRamlStart(in);	"org.junit.Assert.assertEquals(""STR"",in.read());"	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertThat(in,notNullValue());	0
309	10	org.junit.Assert.assertRamlStart(in);	"org.junit.Assert.assertEquals(""STR"",in.readLine());"	0
309	10	org.junit.Assert.assertRamlStart(in);	"org.junit.Assert.assertThat(in.read(),is(""STR""));"	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertTrue(in!=null);	0
309	10	org.junit.Assert.assertRamlStart(in);	org.junit.Assert.assertTrue(in!=null);	0
309	10	org.junit.Assert.assertRamlStart(in);	"org.junit.Assert.assertThat(in).isEqualTo(""STR"");"	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==1;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==2;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==0;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".equals(o);}};"	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".length()==1;}};"	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
310	10	org.junit.Assert.assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));	"finalAOption<String>got=ACollectionHelper.find(Arrays.asList(""STR"",""STR""),len1);"	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(0,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(500,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	1
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(InvalidHandshakeException.CLOSE_CODE,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(1,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(0,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(400,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertNotNull(invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(4,invalidHandshakeException.getCloseCode());	0
311	10	org.junit.Assert.assertEquals(CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	org.junit.Assert.assertEquals(5,invalidHandshakeException.getCloseCode());	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertEquals(1,result.size());	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertEquals(2,result.size());	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertEquals(1,result.size());	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	ODocumentdocument=result.get(0);	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	ORecordrecord=result.get(0);	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	ODocumentdoc=result.get(0);	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertEquals(3,result.size());	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertThat(result.size(),is(1));	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertThat(result.size(),is(2));	0
312	10	"org.junit.Assert.assertTrue((Double)result.get(0).field(""STR"")==5.0);"	org.junit.Assert.assertEquals(1,result.size());	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	org.junit.Assert.assertNotNull(anno.getResource());	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	org.junit.Assert.assertNotNull(anno);	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().toString());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().toString());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().asString());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().asString());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().getName());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	Resource<?>resource=mapper.readValue(anno.getResource(),Resource.class);	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	"org.junit.Assert.assertEquals(""STR"",anno.getResource().getName());"	0
313	10	org.junit.Assert.assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);	org.junit.Assert.assertTrue(anno.getResource()instanceofSvgSelector);	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",newSimpleLabel(""STR"").serialized());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertThat(newSimpleLabel(""STR"").serialized(),is(""STR""));"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.create(""STR"").serialized());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"finalSimpleLabellabel=newSimpleLabel(""STR"");"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",simple().serialized());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.simple(""STR"").serialized());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",newSimpleLabel(""STR"").serialize());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertThat(newSimpleLabel(""STR"").serialized()).isEqualTo(""STR"");"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"org.junit.Assert.assertEquals(""STR"",newSimpleLabel().serialized());"	0
314	10	"org.junit.Assert.assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	"SimpleLabellabel=newSimpleLabel(""STR"");"	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	ODatabaseTxtx=db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	org.junit.Assert.assertTrue(db.begin().isActive());	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OBasicTransactiontx=db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	Transactiontx=db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	ODatabaseDocumenttx=db.begin();	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assumeTrue(db.isActive());	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=newOTransaction(db);	0
315	10	org.junit.Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	OTransactiontx=newOTransaction();	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(1,results.size());	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(2,results.size());	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(3,results.size());	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()>0);	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(1,results.size());	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertThat(results.size(),is(1));	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()>0);	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertEquals(2,results.size());	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertThat(results.size(),is(2));	0
316	10	org.junit.Assert.assertEquals(results.size(),2);	org.junit.Assert.assertTrue(results.size()>1);	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(empty()));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(nullValue()));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(notNullValue()));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(not(nullValue())));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,empty());	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet.size(),is(0));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(not(empty())));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,is(not(notNullValue())));	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,nullValue());	0
317	10	org.junit.Assert.assertThat(resultSet).hasSize(0);	org.junit.Assert.assertThat(resultSet,hasItem(0));	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	Stylestyle=Style.simple();	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(),hasItem(""STR"",text(""STR"")));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"Stylestyle=Style.simple(""STR"");"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"Stylestyle=Style.simple(""STR"",""STR"");"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(""STR"",""STR""),hasItem(""STR"",""STR""));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(),hasItem(""STR"",newText(""STR"")));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(""STR""),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(""STR"",""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(""STR""),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
318	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"org.junit.Assert.assertThat(Style.simple(""STR"",""STR""),deepEquals(attrs(newSimpleAttribute(""STR"",""STR""),newSimpleAttribute(""STR"",""STR""))));"	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,hasItem(OType.STRING));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,equalTo(newOType[]{OType.STRING}));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,hasItem(propertyIndexByIntegerKey));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,arrayWithSize(1));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertArrayEquals(newOType[]{OType.STRING,OType.INTEGER});	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,is(notNullValue()));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,is(newOType[]{OType.STRING}));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertEquals(1,result.length);	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertThat(result,containsInAnyOrder(OType.STRING,OType.INTEGER));	0
319	10	org.junit.Assert.assertEquals(result.length,1);	org.junit.Assert.assertArrayEquals(newOType[]{OType.STRING},result);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2D);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG2);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(BAR);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_1);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	"finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(""STR"");"	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(DOT);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_PATTERN);	0
320	10	org.junit.Assert.assertEquals(1000,a.getWidth());	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_BGR);	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(1,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(CHAR_SIZE,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(CHAR_SIZE+serializationOffset,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(1,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(2,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	org.junit.Assert.assertEquals(0,charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
321	10	org.junit.Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	"org.junit.Assert.assertEquals(""STR"",charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));"	0
322	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(statement.toString(),actual.toString());	0
322	10	org.junit.Assert.assertNotNull(actual);	actual.setId(ID);	0
322	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(ID,actual.getId());	0
322	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(""STR""+ID,actual.getId());"	0
322	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(ID,actual.getId());	0
322	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertEquals(""STR"",actual.toString());"	0
322	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(statement.toString(),actual.toString());	0
322	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertThat(actual.toString(),equalTo(""STR""));"	0
322	10	org.junit.Assert.assertNotNull(actual);	"org.junit.Assert.assertTrue(actual.toString().contains(""STR""));"	0
322	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual.toString(),equalTo(verb));	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),hasSize(1));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),hasItem(newAttribute(""STR"",""STR"")));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(newString[]{""STR"",""STR""}),hasItem(""STR"",""STR""));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(newString[]{""STR"",""STR""}),hasSize(1));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),equalTo(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(newString[]{""STR"",""STR""}),hasSize(2));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),equalTo(attrs(asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))))));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),equalTo(attrs(asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR"")))));"	0
323	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",label.locate(TOP)),attr(""STR"",""STR"")),attrs(label.locate(TOP)));"	"org.junit.Assert.assertThat(label.locate(""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	"org.junit.Assert.assertThat(fields,hasItem(""STR""));"	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertEquals(1,fields.size());	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertEquals(2,fields.size());	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertThat(fields).hasSize(2);	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertEquals(1,fields.size());	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertThat(fields).hasSize(1);	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertTrue(fields.size()>0);	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertThat(fields.size(),is(2));	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertTrue(fields.size()==2);	0
324	10	org.junit.Assert.assertEquals(fields.size(),2);	org.junit.Assert.assertTrue(fields.size()==1);	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(expected));	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(expected,actual);	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,instanceOf(Group.class));	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(expected));	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual).isEqualTo(expected);	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,is(group));	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertEquals(group,actual);	0
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertNotNull(actual);	1
325	10	org.junit.Assert.assertNotNull(actual);	org.junit.Assert.assertThat(actual,equalTo(group));	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	org.junit.Assert.assertEquals(1,flattened.size());	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	org.junit.Assert.assertEquals(3,flattened.size());	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	org.junit.Assert.assertEquals(1,flattened.size());	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	org.junit.Assert.assertEquals(1,flattened.size());	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	"org.junit.Assert.assertThat(flattened,hasItem(""STR""));"	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR""),flattened);"	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	org.junit.Assert.assertEquals(3,flattened.size());	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	"org.junit.Assert.assertEquals(""STR"",flattened.toString());"	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	"org.junit.Assert.assertEquals(Arrays.asList(""STR"",""STR"",""STR""),flattened);"	0
326	10	org.junit.Assert.assertEquals(5,flattened.size());	"org.junit.Assert.assertEquals(""STR"",flattened.toString());"	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertFalse(doc.isDirty());	1
327	10	org.junit.Assert.assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	org.junit.Assert.assertTrue(doc.isDirty());	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
327	10	org.junit.Assert.assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc,true);	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.of(newPrincipalImpl(""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(cached.authenticate(any(JwtContext.class))).thenReturn(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(cached.authenticate(any(JwtContext.class))).thenReturn(Optional.of(newPrincipalImpl(""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContexts.class))).thenReturn(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.<Principal>of(newPrincipalImpl(""STR"",""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.<Principal>empty());	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.<Principal>of(""STR""));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	"when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.of(newPrincipalImpl(""STR"",""STR"")));"	0
328	10	"org.junit.Assert.assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(""STR"")));"	when(underlying.authenticate(any(JwtContext.class))).thenReturn(Optional.empty());	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertEquals(1,qResult.size());	1
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertEquals(2,qResult.size());	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertThat(qResult.size(),is(2));	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertEquals(1,qResult.size());	1
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertEquals(2,qResult.size());	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertEquals(3,qResult.size());	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertThat(qResult).hasSize(2);	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertThat(qResult.size(),is(1));	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertThat(qResult).hasSize(1);	0
329	10	org.junit.Assert.assertEquals(1,qResult.size());	org.junit.Assert.assertThat(qResult.size(),equalTo(2));	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR"");"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR""));"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=""STR"";"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringmarkdown=m.markdown(""STR"");"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR"");"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"org.junit.Assert.assertEquals(""STR""+""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR""+""STR""+""STR""));"	0
330	10	"org.junit.Assert.assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR""+""STR"");"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),equalTo(s));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(s),equalTo(""STR""));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertEquals(""STR"",uriPathOf(s.replace(""STR"",""STR"")));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertEquals(""STR"",uriPathOf(newFile(s)));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(s),is(""STR""));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(s.replace(""STR"",""STR""))).isEqualTo(""STR"");"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),is(s));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(newFile(""STR"")),containsString(s));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertThat(uriPathOf(s.split(""STR"")[0]),equalTo(""STR""));"	0
331	10	"org.junit.Assert.assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"org.junit.Assert.assertEquals(uriPathOf(newFile(""STR"")),s);"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertThat(binaryFrame.getPayloadData(),is(ByteBuffer.wrap(""STR"".getBytes())));"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	org.junit.Assert.assertTrue(binaryFrame.getPayloadData().hasRemaining());	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	org.junit.Assert.assertEquals(binaryFrame.getPayloadData(),defaultExtension.getPayloadData());	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertEquals(""STR"",binaryFrame.getPayloadData().toString());"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertEquals(""STR"".getBytes(),binaryFrame.getPayloadData().remaining());"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertEquals(""STR"".getBytes(),binaryFrame.getPayloadData().array());"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertThat(binaryFrame.getPayloadData(),is(ByteBuffer.wrap(""STR"".getBytes(UTF_8))));"	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	org.junit.Assert.assertTrue(binaryFrame.getPayloadData().remaining()>0);	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	org.junit.Assert.assertNotNull(binaryFrame.getPayloadData());	0
332	10	"org.junit.Assert.assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"org.junit.Assert.assertEquals(""STR"",binaryFrame.getPayloadData().toString());"	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)31,changesCollector.getByteValue(pointer,0));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)31,changesCollector.getByteValue(pointer,0));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)42,changesCollector.getByteValue(pointer,0));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)33,changesCollector.getByteValue(pointer,0));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)31,changesCollector.getByteValue(pointer,64));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	byteresult=changesCollector.getByteValue(pointer,0);	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)31,changesCollector.getByteValue(pointer,64));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)34,changesCollector.getByteValue(pointer,0));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertThat(changesCollector.getByteValue(pointer,0),is((byte)31));	0
333	10	org.junit.Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);	org.junit.Assert.assertEquals((byte)33,changesCollector.getByteValue(pointer,64));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertEquals(1,qResult.size());	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),is(1));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	longidxUsagesAfter=indexUsages(qResult);	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),is(2));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),is(idxUsagesBefore+1));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertEquals(0,qResult.size());	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	longidxUsagesAfter=indexUsages(db);	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
334	10	org.junit.Assert.assertEquals(indexUsages(db),idxUsagesBefore);	org.junit.Assert.assertThat(qResult.size(),is(idxUsagesBefore));	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertThat(body,containsString(""STR""));"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertEquals(""STR"",body);"	1
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertTrue(body.contains(""STR""));"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"System.out.println(""STR""+body);"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertTrue(body.contains(""STR""));"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertThat(body,is(""STR""));"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertThat(body).isEqualTo(""STR"");"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertEquals(""STR"",body);"	1
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	"org.junit.Assert.assertThat(body,containsString(""STR""+PROXY_PORT+""STR""));"	0
335	10	"org.junit.Assert.assertEquals(""STR"",body);"	org.junit.Assert.assertNotNull(body);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCiEnvironment(env);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv=newCiEnvironment(env);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenvironment=newCiEnvironment(env);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(env,""STR"");"	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCIEnvironment(env);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(""STR"");"	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenvCi=newCiEnvironment(env);	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(""STR"",env);"	0
336	10	"org.junit.Assert.assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",null);"	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertEquals(null,deflateExtension.getDeflater());	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertThat(deflateExtension.getDeflater(),instanceOf(Deflater.class));	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	Deflaterdeflate=deflateExtension.getDeflater();	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertThat(deflateExtension.getDeflater(),is(nullValue()));	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertNull(deflateExtension.getDeflater());	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertThat(deflateExtension.getDeflater(),is(notNullValue()));	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertThat(deflateExtension.getDeflater(),notNullValue());	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertEquals(null,deflateExtension.getDeflater());	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	"org.junit.Assert.assertEquals(""STR"",deflateExtension.getDeflater().toString());"	0
337	10	org.junit.Assert.assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	org.junit.Assert.assertThat(deflateExtension.getDeflater()).isNotNull();	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.CUSTOM);"	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	System.out.println(doc1);	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	OGlobalConfiguration.DB_CUSTOM_SUPPORT.setValueAsBoolean(old);	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	ODocumentdoc2=newODocument();	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	OGlobalConfiguration.DB_CUSTOM_SUPPORT.setValue(old);	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.STRING);"	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.CUSTOM);"	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",OType.CUSTOM);"	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"org.junit.Assert.assertEquals(old,doc1.field(""STR"",String.class,OType.CUSTOM));"	0
338	10	"org.junit.Assert.assertEquals(doc.<String>field(""STR""),doc1.field(""STR""));"	"doc1.field(""STR"",String.class,OType.ANY);"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	org.junit.Assert.assertThat(g).isNotNull();	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	org.junit.Assert.assertThat(g).hasSize(1);	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	org.junit.Assert.assertThat(g).hasSize(2);	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"org.junit.Assert.assertThat(g.toString(),is(""STR""));"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"ser.messages.add(""STR"",g);"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	org.junit.Assert.assertThat(g).hasSize(3);	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"org.junit.Assert.assertThat(serialize(g),deepEquals(graph().attr(""STR"",""STR"")));"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"org.junit.Assert.assertThat(serialize(g),deepEquals(graph().nodeAttr().with(""STR"",""STR""))));"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"org.junit.Assert.assertThat(g.toString(),is(equalTo(""STR"")));"	0
339	10	"org.junit.Assert.assertSerialize(g,""STR"",msg(WARN,""STR"",""STR"",NODE_ATTRS,g));"	"org.junit.Assert.assertThat(g,deepEquals(graph().nodeAttr().with(""STR"",""STR""))));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",""STR""}},arrow().dir(DirType.DIR));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",""STR""}},arrow().dir(DirType.DOT));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",""STR""}},arrow().dir(DirType.FILE));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",""STR""}},arrow().dir(DirType.ROOT));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",""STR""}},Arrow.dir(DirType.FILE));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",1put(""STR"",2}},Arrow.dir(DirType.DIR));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",1put(""STR"",2}},Arrow.dir(DirType.FILES));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",1put(""STR"",2}},Arrow.dir(DirType.NONE));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",1put(""STR"",2}},Arrow.dir(DirType.FILE));"	0
340	10	"org.junit.Assert.assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Arrow.BOX.dir(Arrow.DirType.BACK));"	"org.junit.Assert.assertEquals(newAttributes<ForLink>(){{put(""STR"",value}},arrow().dir(DirType.DOT));"	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
341	10	"org.junit.Assert.assertParse(""STR"",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(""STR"").addLink(""STR""))));"	finalLinkSourcesource=newSimpleLinkSource(){@Overridepublicboolean<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>,<cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls><cls>	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m��k.isRecognized());	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertFalse(j��m��k.isRecognized());	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�IF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGEIF_ICMPGELDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_ENDLDC_END);	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertThat(j��m��k.isRecognized(),equalTo(true));	0
342	10	org.junit.Assert.assertTrue(jāmāk.isRecognized());	org.junit.Assert.assertTrue(j��m�	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertThat(savedRonnie).isEqualTo(loadedRonnie);	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertThat(savedRonnie,equalTo(loadedRonnie));	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertEquals(savedRonnie.getId(),loadedRonnie.getId());	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertEquals(savedRonnie.getName(),loadedRonnie.getName());	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertThat(savedRonnie).isSameAs(loadedRonnie);	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertThat(savedRonnie.getName(),equalTo(loadedRonnie.getName()));	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertThat(savedRonnie,is(loadedRonnie));	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertEquals(savedRonnie,loadedRonnie);	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	"org.junit.Assert.assertThat(savedRonnie.getName(),equalTo(""STR""));"	0
343	10	org.junit.Assert.assertNotNull(savedRonnie);	org.junit.Assert.assertEquals(ronnie,loadedRonnie);	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.DELETED));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.CREATED));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.UPDATED));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.REMOVED));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.RECEIVED));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.NOT_EXISTS));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.COMMIT));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.NOT_FOUND));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.STATUS));	0
344	10	org.junit.Assert.assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.COMMIT_READ));	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(true));	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(true));	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),equalTo(false));	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertTrue(result.hasNext());	1
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertFalse(result.hasNext());	0
345	10	org.junit.Assert.assertTrue(result.hasNext());	org.junit.Assert.assertThat(result.hasNext(),is(false));	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertTrue(mazajai.isRecognized());	1
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertFalse(mazajai.isRecognized());	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertThat(mazajai.isRecognized(),equalTo(true));	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertThat(mazajai.isRecognized(),is(true));	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertThat(mazajai.isRecognized(),equalTo(false));	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertTrue(mazajai.isRecognized());	1
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertTrue(mazajai.isRecognized());	1
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertFalse(mazajai.isRecognized());	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertThat(mazajai.isRecognized(),is(false));	0
346	10	org.junit.Assert.assertTrue(mazajai.isRecognized());	org.junit.Assert.assertFalse(mazajai.isRecognized());	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(2,res.size());	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(1));	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(1,res.size());	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(2));	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertEquals(3,res.size());	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(1);	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res.size(),is(3));	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertTrue(res.size()>0);	0
347	10	org.junit.Assert.assertFalse(res.isEmpty());	org.junit.Assert.assertThat(res).hasSize(2);	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,is(notNullValue()));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,instanceOf(NalUnit.class));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,isA(NALUnit.class));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,isA(NalUnit.class));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,is(instanceOf(NalUnit.class)));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,notNullValue());	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertNotNull(actual);	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertNotNull(actual);	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,is(NALUnit.Type.NANO_UNIT));	0
348	10	org.junit.Assert.assertEquals(3,actual.nal_ref_idc);	org.junit.Assert.assertThat(actual,is(NALUnit.Type.NANOS));	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertEquals(target,objectQueryInfo.getTarget());	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertThat(objectQueryInfo.getTarget(),equalTo(target));	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertThat(objectQueryInfo.getTarget(),is(target));	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertEquals(target,objectQueryInfo.getTarget());	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertNull(objectQueryInfo.getTarget());	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	1
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertNotNull(objectQueryInfo.getTarget());	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertNotEquals(target,objectQueryInfo.getTarget());	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertThat(objectQueryInfo.getTarget(),instanceOf(Object.class));	0
349	10	org.junit.Assert.assertSame(target,objectQueryInfo.getTarget());	org.junit.Assert.assertNotSame(target,objectQueryInfo.getTarget());	0
