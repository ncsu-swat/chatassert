TestID	NumPreds	TrueOracle	GenOracle
0	10	assertEquals(expected,actual);	assertEquals(expected,actual);
0	10	assertEquals(expected,actual);	"assertEquals(""STR"",expected,actual);"
0	10	assertEquals(expected,actual);	assertEquals(expected,actual);
0	10	assertEquals(expected,actual);	"assertEquals(""STR"",expected,actual);"
0	10	assertEquals(expected,actual);	"assertEquals(""STR""+expected+""STR"",actual);"
0	10	assertEquals(expected,actual);	"assertEquals(""STR""+expected,actual);"
0	10	assertEquals(expected,actual);	"assertTrue(""STR"",actual.indexOf(""STR"")>=0);"
0	10	assertEquals(expected,actual);	"assertTrue(""STR"",actual.equals(expected));"
0	10	assertEquals(expected,actual);	"assertTrue(""STR"",actual.indexOf(expected)>=0);"
0	10	assertEquals(expected,actual);	"assertNotNull(""STR"",actual);"
1	10	assertEquals(expected,actual);	assertEquals(expected,actual);
1	10	assertEquals(expected,actual);	"assertEquals(""STR"",expected,actual);"
1	10	assertEquals(expected,actual);	assertEquals(expected,actual);
1	10	assertEquals(expected,actual);	"assertEquals(""STR"",expected,actual);"
1	10	assertEquals(expected,actual);	"assertNotNull(""STR"",actual);"
1	10	assertEquals(expected,actual);	"System.out.println(""STR""+actual);"
1	10	assertEquals(expected,actual);	"assertEquals(""STR""+expected+""STR"",actual);"
1	10	assertEquals(expected,actual);	"assertEquals(""STR""+expected,actual);"
1	10	assertEquals(expected,actual);	"assertEquals(""STR"",actual);"
1	10	assertEquals(expected,actual);	System.out.println(actual);
2	10	assertTrue(aXls.exists());	"finalIReadableResourcebXls=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"finalIReadableResourceaXls=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"finalIReadableResourceaBls=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"IReadableResourcebXls=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"finalIReadableResourceaSheet=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	"finalIReadableResourceaCode=newClassPathResource(""STR"");"
2	10	assertTrue(aXls.exists());	newGenericode04CodeListMarshaller().fromXls(aXls);
2	10	assertTrue(aXls.exists());	"finalIReadableResourcebXls=newClassPathResource(""STR""){};"
2	10	assertTrue(aXls.exists());	newGenericode04CodeListMarshaller().fromXLS(aXls);
3	10	assertTrue(aXls.exists());	"finalIReadableResourcebXls=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"finalIReadableResourceaXls=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"finalIReadableResourceaBls=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"finalIReadableResourceaSheet=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"IReadableResourcebXls=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	"finalIReadableResourceaCode=newClassPathResource(""STR"");"
3	10	assertTrue(aXls.exists());	newGenericode10CodeListMarshaller().fromXls(aXls);
3	10	assertTrue(aXls.exists());	"finalIReadableResourcebXls=newClassPathResource(""STR""){};"
3	10	assertTrue(aXls.exists());	newGenericode10CodeListMarshaller().fromXLS(aXls);
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"Stringsql=sql.selectAllFrom(""STR"").toString();"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom().toString());"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"sql.selectAllFrom(""STR"");"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"StringsqlSql=sql.selectAllFrom(""STR"").toString();"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"StringsqlStr=sql.selectAllFrom(""STR"").toString();"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom().toString());"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.getSelectAllFrom().toString());"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
4	10	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"Stringsql=sql.select(""STR"").from(""STR"").toString();"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNull(Seq.join(null,""STR""));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNull(Seq.join(null,""STR""));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join((Collection<?>)null,""STR""));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"
5	10	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join((Collection<?>)null,""STR""));"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"Stringsql=sql.selectSomeFrom(""STR"").toString();"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom().toString());"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom().toString());"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"StringsqlStr=sql.selectSomeFrom(""STR"").toString();"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom(""STR"").toString());"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"sql.selectSomeFrom(""STR"");"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"Stringsql=sql.select(""STR"").from(""STR"").toString();"
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	Stringsql=sql.selectSomeFrom().toString();
6	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<Object>emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<String>emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<Object>emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<String>emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<Integer>emptyList(),null));"
7	10	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"
8	10	"assertEquals(""STR"",sql.toString());"	System.out.println(sql.toString());
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"
8	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"
8	10	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());
8	10	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<String>(),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"
9	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null),null));"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
10	10	"assertEquals(""STR"",sql.toString());"	System.out.println(sql.toString());
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toSql().toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"
10	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toSql().toString());"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<Object>emptyList(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<String>emptyList(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"
11	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.<Object>emptyList(),""STR""));"
12	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
12	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
12	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
12	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"
12	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"
12	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().indexOf(""STR"")>=0);"
12	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().indexOf(""STR"")!=-1);"
12	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().indexOf(""STR"")>-1);"
12	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"
12	10	"assertEquals(""STR"",sql.toString());"	System.out.println(sql.toString());
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),null));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"
13	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
14	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(10,sql.toString().indexOf(""STR""));"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"
14	10	"assertEquals(""STR"",sql.toString());"	"assertEquals(sql.toString(),""STR"");"
14	10	"assertEquals(""STR"",sql.toString());"	System.out.println(sql.toString());
14	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().indexOf(""STR"")>=0);"
14	10	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().indexOf(""STR"")!=-1);"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"
15	10	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(sql.toString(),""STR"");"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.query().toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"Stringsql=sql.query(""STR"").toString();"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"sql.query(""STR"");"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.query().toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.build().toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.build().toString());"
16	10	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.getQuery().toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update().toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"sql.update(""STR"");"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update().toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"Stringsql=sql.update(""STR"").toString();"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"finalStringsql=sql.update(""STR"").toString();"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"System.out.println(sql.update(""STR"").toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"StringsqlStr=sql.update(""STR"").toString();"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(""STR"").toString());"
17	10	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	Stringsql=sql.update().toString();
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertEquals(2,actuals.length);
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",2,actuals.length);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",1,actuals.length);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
18	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"sql.delete(""STR"");"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete().toString());"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete().toString());"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"Stringsql=sql.delete(""STR"").toString();"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	Stringsql=sql.delete().toString();
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"finalStringsql=sql.delete(""STR"").toString();"
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	finalStringsql=sql.delete().toString();
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	sql.delete();
19	10	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	StringsqlStr=sql.delete().toString();
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},actuals);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	assertEquals(2,actuals.length);
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",2,actuals.length);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"
20	10	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	assertEquals(2,actuals.length);
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	assertEquals(2,actuals.length);
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertEquals(""STR"",2,actuals.length);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"
21	10	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR"",""STR"",""STR""},actuals);"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.toString());"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"Stringsql=sql.insert(""STR"").toString();"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"sql.insert(""STR"");"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(sql.toString(),""STR"");"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	Stringsql=sql.insert().toString();
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"finalStringsql=sql.insert(""STR"").toString();"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert().toString());"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert().toString());"
22	10	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	finalStringsql=sql.insert().toString();
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[5],a);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(Arrays.equals(newint[5],a));
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,2,3,4},a);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,2,3,4},a);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{1,3,4},a);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[]{0,1,3,4},a);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a[0]);
23	10	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(newint[5],a);
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"
24	10	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),equalToIgnoringCase(""STR""));"
24	10	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),equalTo(""STR""));"
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",nodeWithPath(""STR"").getPath());"
24	10	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),is(""STR""));"
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(node.getPath(),""STR"");"
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR""+""STR"",node.getPath());"
24	10	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR""+""STR"",node.getPath());"
24	10	"assertEquals(""STR"",node.getPath());"	StringcommonPath=node.getPath();
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer();
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(DefaultRocketMqProducer.class);
25	10	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(""STR"",DefaultRocketMqProducer.class);"
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer(TEST_PRODUCER_GROUP);
25	10	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=newDefaultRocketMqProducer(""STR"");"
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)context.getBean(DefaultRocketMqProducer.class);
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer(TEST_NAME_SERVER,TEST_PRODUCER_GROUP);
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(RocketMqProducer.class);
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getConfiguration().getProducer();
25	10	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer(TEST_NAME_SERVER);
26	10	"assertEquals(""STR"",value);"	assertNotNull(value);
26	10	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"
26	10	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"
26	10	"assertEquals(""STR"",value);"	"assertNotNull(""STR"",value);"
26	10	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"
26	10	"assertEquals(""STR"",value);"	"assertTrue(value.startsWith(""STR""));"
26	10	"assertEquals(""STR"",value);"	assertNotNull(value);
26	10	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"
26	10	"assertEquals(""STR"",value);"	log.info(value);
26	10	"assertEquals(""STR"",value);"	"assertTrue(value.startsWith(""STR""));"
27	10	assertEquals(21,obj.getAge());	assertNotNull(obj);
27	10	assertEquals(21,obj.getAge());	assertNotNull(obj);
27	10	assertEquals(21,obj.getAge());	"assertNotNull(""STR"",obj);"
27	10	assertEquals(21,obj.getAge());	"assertNotNull(""STR"",obj);"
27	10	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.toString());"
27	10	assertEquals(21,obj.getAge());	assertTrue(objinstanceofTestVo);
27	10	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.toString());"
27	10	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj);"
27	10	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getId());"
27	10	assertEquals(21,obj.getAge());	System.out.println(obj);
28	10	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);
28	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz);
28	10	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);
28	10	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));
28	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz);
28	10	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);
28	10	assertArrayEquals(clazz,exp);	assertNotNull(clazz);
28	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);
28	10	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));
28	10	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);
29	10	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);
29	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz);
29	10	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));
29	10	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);
29	10	assertArrayEquals(clazz,exp);	assertNotNull(clazz);
29	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz);
29	10	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);
29	10	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);
29	10	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));
29	10	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"CommUtil.escapeJava(""STR"");"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertTrue(CommUtil.escapeJava(""STR"").equals(""STR""));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"Stringstr=CommUtil.escapeJava(""STR"");"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(CommUtil.escapeJava(""STR""));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	assertNull(CommUtil.escapeJava(null));
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(null));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNull(CommUtil.escapeJava(""STR""));"
30	10	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(CommUtil.escapeJava(""STR""),""STR"");"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,""STR""));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"Stringstr=""STR"";"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,null));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,1,null));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,1,""STR""));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,""STR""));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",1,2,null));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",1,2,""STR""));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,-1,null));"
31	10	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,null));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',2));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',1));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',2));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',10));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',0));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',-1));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',1));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',3));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',4));"
32	10	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',5));"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"StringsBC=CommUtil.toDBC(""STR"");"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Strings=CommUtil.toDBC(""STR"");"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").equals(""STR""));"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Stringresult=CommUtil.toDBC(""STR"");"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Stringstr=CommUtil.toDBC(""STR"");"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").contains(""STR""));"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"CommUtil.toDBC(""STR"");"
33	10	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""+""STR""));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(null));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(null));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{}));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[0]));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{'a','b'}));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{}));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[0]));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{0}));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{'a','b'}));"
34	10	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{1,2,3,4}));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(bs,CommUtil.hexdump(b));
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(bs,CommUtil.hexdump(b));
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toByteArray()));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(bs+""STR"",CommUtil.hexdump(b));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR""+bs,CommUtil.hexdump(b));"
35	10	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertEquals(bs,CommUtil.hexdump(b.toByteArray()));
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	"assertThat(sut.getGMPath(),equalTo(""STR""));"
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	"assertEquals(""STR"",sut.getGMPath());"
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	"assertEquals(""STR"",sut.getGMPath());"
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertEquals(gmPath,sut.getGMPath());
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertThat(sut.getGMPath(),equalTo(gmPath));
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertNotNull(sut.getGMPath());
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertEquals(gmPath,sut.getGMPath());
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	"assertEquals(""STR"",gmPath,sut.getGMPath());"
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertNotNull(sut.getGMPath());
36	10	assertThat(sut.getGMPath(),equalTo(gmPath));	assertThat(sut.getGMPath(),equalTo(nullValue()));
37	10	assertThat(result,notNullValue());	assertNotNull(result);
37	10	assertThat(result,notNullValue());	assertEquals(Version.GM,result);
37	10	assertThat(result,notNullValue());	assertThat(result,notNullValue());
37	10	assertThat(result,notNullValue());	"assertEquals(""STR"",result.getVersion());"
37	10	assertThat(result,notNullValue());	"assertEquals(""STR"",result.toString());"
37	10	assertThat(result,notNullValue());	assertEquals(version,result);
37	10	assertThat(result,notNullValue());	"assertEquals(""STR"",result);"
37	10	assertThat(result,notNullValue());	"assertEquals(""STR"",result.getArtifactId());"
37	10	assertThat(result,notNullValue());	assertThat(result,equalTo(Version.GM));
37	10	assertThat(result,notNullValue());	"assertNotNull(""STR"",result);"
38	10	assertThat(sut.getVersion(),is(result));	assertEquals(version,result);
38	10	assertThat(sut.getVersion(),is(result));	assertNotNull(result);
38	10	assertThat(sut.getVersion(),is(result));	assertEquals(version,result.getVersion());
38	10	assertThat(sut.getVersion(),is(result));	assertThat(result,equalTo(version));
38	10	assertThat(sut.getVersion(),is(result));	assertThat(result,notNullValue());
38	10	assertThat(sut.getVersion(),is(result));	assertEquals(version,result.toString());
38	10	assertThat(sut.getVersion(),is(result));	"assertNotNull(""STR"",result);"
38	10	assertThat(sut.getVersion(),is(result));	assertThat(result,is(version));
38	10	assertThat(sut.getVersion(),is(result));	assertThat(result).isEqualTo(version);
38	10	assertThat(sut.getVersion(),is(result));	assertThat(result).isNotNull();
39	10	assertThat(result,equalTo(gmPath));	"assertEquals(""STR"",result);"
39	10	assertThat(result,equalTo(gmPath));	"assertThat(result,equalTo(""STR""));"
39	10	assertThat(result,equalTo(gmPath));	"assertEquals(""STR"",result);"
39	10	assertThat(result,equalTo(gmPath));	"assertThat(result).isEqualTo(""STR"");"
39	10	assertThat(result,equalTo(gmPath));	"assertThat(result,is(""STR""));"
39	10	assertThat(result,equalTo(gmPath));	assertThat(result).isNotNull();
39	10	assertThat(result,equalTo(gmPath));	"assertThat(result,equalToIgnoringCase(""STR""));"
39	10	assertThat(result,equalTo(gmPath));	assertThat(result,equalTo(gmPath));
39	10	assertThat(result,equalTo(gmPath));	assertThat(result,notNullValue());
39	10	assertThat(result,equalTo(gmPath));	assertEquals(gmPath,result);
40	10	assertThat(connection2,is(connection));	assertSame(connection,connection2);
40	10	assertThat(connection2,is(connection));	assertEquals(connection,connection2);
40	10	assertThat(connection2,is(connection));	assertNotNull(connection2);
40	10	assertThat(connection2,is(connection));	assertSame(connection,connection2);
40	10	assertThat(connection2,is(connection));	assertThat(connection2).isSameAs(connection);
40	10	assertThat(connection2,is(connection));	assertNotNull(connection2);
40	10	assertThat(connection2,is(connection));	assertThat(connection).isEqualTo(connection2);
40	10	assertThat(connection2,is(connection));	assertThat(connection2).isEqualTo(connection);
40	10	assertThat(connection2,is(connection));	assertThat(connection2).isNotNull();
40	10	assertThat(connection2,is(connection));	assertThat(connection).isSameAs(connection);
41	10	assertThat(result,is(expected));	assertEquals(expected,result);
41	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
41	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
41	10	assertThat(result,is(expected));	assertThat(result).isEqualTo(expected);
41	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
41	10	assertThat(result,is(expected));	assertEquals(expected,result);
41	10	assertThat(result,is(expected));	assertThat(result,equalTo(expected));
41	10	assertThat(result,is(expected));	"assertTrue(result.indexOf(""STR"")>=0);"
41	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
41	10	assertThat(result,is(expected));	"assertTrue(result.indexOf(""STR"")!=-1);"
42	10	assertThat(connection2,is(connection));	sut.returnObject(connection2);
42	10	assertThat(connection2,is(connection));	sut.close();
42	10	assertThat(connection2,is(connection));	assertSame(connection,connection2);
42	10	assertThat(connection2,is(connection));	sut.setTestOnBorrow(true);
42	10	assertThat(connection2,is(connection));	assertThat(connection2,is(nullValue()));
42	10	assertThat(connection2,is(connection));	assertEquals(connection,connection2);
42	10	assertThat(connection2,is(connection));	sut.setTestOnBorrow(false);
42	10	assertThat(connection2,is(connection));	assertThat(connection2).isSameAs(connection);
42	10	assertThat(connection2,is(connection));	assertNull(connection2);
42	10	assertThat(connection2,is(connection));	assertThat(connection2).isNotNull();
43	10	assertThat(result,is(expected));	assertEquals(expected,result);
43	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
43	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
43	10	assertThat(result,is(expected));	assertThat(result).isEqualTo(expected);
43	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
43	10	assertThat(result,is(expected));	assertThat(result,equalTo(expected));
43	10	assertThat(result,is(expected));	assertEquals(expected,result);
43	10	assertThat(result,is(expected));	assertThat(result,is(expected));
43	10	assertThat(result,is(expected));	"assertThat(result).isEqualTo(""STR"");"
43	10	assertThat(result,is(expected));	assertThat(result).isEqualToIgnoringCase(expected);
44	10	assertThat(connection2,not(is(connection)));	sut.setTestOnBorrow(false);
44	10	assertThat(connection2,not(is(connection)));	sut.returnObject(connection2);
44	10	assertThat(connection2,not(is(connection)));	sut.close();
44	10	assertThat(connection2,not(is(connection)));	assertThat(connection2,is(nullValue()));
44	10	assertThat(connection2,not(is(connection)));	assertSame(connection,connection2);
44	10	assertThat(connection2,not(is(connection)));	verify(connection,times(1)).close();
44	10	assertThat(connection2,not(is(connection)));	assertThat(connection2).isNull();
44	10	assertThat(connection2,not(is(connection)));	verify(connection,times(2)).close();
44	10	assertThat(connection2,not(is(connection)));	verify(connection,times(1)).testOnBorrow();
44	10	assertThat(connection2,not(is(connection)));	assertNull(connection2);
45	10	assertThat(connection2,not(is(connection)));	sut.close();
45	10	assertThat(connection2,not(is(connection)));	sut.setTestOnReturn(false);
45	10	assertThat(connection2,not(is(connection)));	exception.expect(GMServiceException.class);
45	10	assertThat(connection2,not(is(connection)));	assertThat(connection2,is(nullValue()));
45	10	assertThat(connection2,not(is(connection)));	sut.returnObject(connection2);
45	10	assertThat(connection2,not(is(connection)));	assertThat(connection2).isNull();
45	10	assertThat(connection2,not(is(connection)));	assertSame(connection,connection2);
45	10	assertThat(connection2,not(is(connection)));	assertThat(connection2,notNullValue());
45	10	assertThat(connection2,not(is(connection)));	"sut.throwException(newRuntimeException(""STR""));"
45	10	assertThat(connection2,not(is(connection)));	assertThat(connection2).isSameAs(connection);
46	10	assertThat(result,is(expected));	assertEquals(expected,result);
46	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
46	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
46	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
46	10	assertThat(result,is(expected));	assertEquals(expected,result);
46	10	assertThat(result,is(expected));	assertThat(result).isEqualTo(expected);
46	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
46	10	assertThat(result,is(expected));	assertThat(result,equalTo(expected));
46	10	assertThat(result,is(expected));	"Stringexpected=sut.execute(""STR"");"
46	10	assertThat(result,is(expected));	Stringexpected=sut.execute(gmCommand);
47	10	assertThat(sut.getGMPath(),is(gmPath));	assertEquals(gmPath,sut.getGMPath());
47	10	assertThat(sut.getGMPath(),is(gmPath));	assertEquals(gmPath,sut.getGMPath());
47	10	assertThat(sut.getGMPath(),is(gmPath));	"assertEquals(""STR"",gmPath,sut.getGMPath());"
47	10	assertThat(sut.getGMPath(),is(gmPath));	assertThat(sut.getGMPath(),equalTo(gmPath));
47	10	assertThat(sut.getGMPath(),is(gmPath));	sut.close();
47	10	assertThat(sut.getGMPath(),is(gmPath));	"assertEquals(""STR""+gmPath,sut.getGMPath());"
47	10	assertThat(sut.getGMPath(),is(gmPath));	assertThat(sut.getGMPath(),Matchers.equalTo(gmPath));
47	10	assertThat(sut.getGMPath(),is(gmPath));	verify(factory).getGMPath();
47	10	assertThat(sut.getGMPath(),is(gmPath));	"assertEquals(""STR"",gmPath,sut.getGMPath());"
47	10	assertThat(sut.getGMPath(),is(gmPath));	assertThat(sut.getGMPath(),is(gmPath));
48	10	assertThat(result,is(expected));	assertEquals(expected,result);
48	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
48	10	assertThat(result,is(expected));	"assertEquals(""STR"",expected,result);"
48	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
48	10	assertThat(result,is(expected));	assertThat(result).isEqualTo(expected);
48	10	assertThat(result,is(expected));	assertEquals(expected,result);
48	10	assertThat(result,is(expected));	assertThat(result,equalTo(expected));
48	10	assertThat(result,is(expected));	assertThat(result,is(expected));
48	10	assertThat(result,is(expected));	"assertThat(result).isEqualTo(""STR"");"
48	10	assertThat(result,is(expected));	"assertEquals(""STR"",result);"
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	verify(builder).command(Matchers.<String[]>anyObject());
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	verify(builder,times(1)).command(Matchers.<String[]>anyObject());
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	"assertEquals(""STR"",text,stream.toString(StandardCharsets.UTF_8));"
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	verify(builder).command(Matchers.<String[]>anyString());
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	"assertEquals(""STR"",text,stream.toString());"
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	"assertEquals(""STR"",newString(stream.toByteArray(),StandardCharsets.UTF_8));"
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	verify(builder,times(1)).command(Matchers.<String[]>anyString());
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	assertThat(stream.toByteArray(),equalTo(text));
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	"verify(builder,times(1)).command(eq(""STR""));"
49	10	assertThat(stream.toByteArray(),equalTo(text.getBytes()));	assertThat(stream.toString(),equalTo(text));
