TestID	OracleID	Project	ClassName#TestName	TrueOracle	GenOracle	Correct
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertEquals(true,handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertFalse(handler.getTokenBased());	0
0	10	orientechnologies_orientdb	OClientConnectionTest#testValidToken	assertTrue(conn.getTokenBased());	assertTrue(server.getTokenBased());	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,2);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,1);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	addedKeys.put(12,2);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(11,2);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,3);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,0);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	"removedKeys.put(""STR"",2);"	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(13,2);	0
1	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(9,2);	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",newJenkins().getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",newJenkins(env).getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",jenkins.getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",newJenkins().getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",newJenkins(env).getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	assertEquals(JENKINS_BUILD_URL,newJenkins(env).getBuildUrl());	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	assertEquals(JENKINS_BUILD_URL,newJenkins().getBuildUrl());	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",createMock(Jenkins.class).getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",jenkins.getBuildUrl());"	0
2	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBuildUrl	"assertEquals(""STR"",newJenkins(env()).getBuildUrl());"	"assertEquals(""STR"",createJenkins().getBuildUrl());"	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).getJobId();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).getBuildUrl();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock).getBuildUrl();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).isSelected();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",mojo.serviceName);"	1
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock).getJobId();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"verify(serviceMock,times(1)).setJobId(""STR"");"	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(0)).getJobId();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock).isSelected();	0
3	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).buildAndAssertSuccess();	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(null));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(null));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[0]));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[0]));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertThat(CommUtil.hexdump(null),is(""STR""));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[1]));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{0x01,0x02}));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[]{0x01,0x02}));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(newbyte[1]));"	0
4	10	rockagen_commons-lib	CommUtilTest#testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"Stringhex=CommUtil.hexdump(""STR"".getBytes());"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),equalTo(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(emb,item.getProperty(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertNull(item.getProperty(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").size());"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(equalTo(""STR"")));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(null,item.getProperty(""STR""));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(emb));"	0
5	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.mockScheduler,poller.getScheduler());	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.mockScheduler,poller.getScheduler());	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(this.mockScheduler,poller.getScheduler());	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertThat(poller.getScheduler()).isEqualTo(this.mockScheduler);	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(this.mockScheduler,poller.getScheduler());	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(this.poller.getScheduler());	1
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(this.poller.getScheduler());	1
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	"Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription()).thenReturn(""STR"");"	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(this.scheduler,poller.getScheduler());	0
6	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetScheduler	assertNull(this.poller.getScheduler());	"Mockito.when(this.mockMBeanAccessConnection.getTargetDescription()).thenReturn(""STR"");"	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),is(false));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),is(true));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),equalTo(false));	0
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
7	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertThat(StringUtils.isEmpty(null),equalTo(true));	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER,0));	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes(UTF_8)),0));"	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes(StandardCharsets.UTF_8)),0));"	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(""STR""),0));"	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertFalse(Charsetfunctions.isValidUTF8(BUFFER,0));	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes()),0));"	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.allocate(256),0));	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(buffer(""STR""),0));"	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER,0));	0
8	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes(UTF_8)),1));"	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.getObjectSize(OBJECT));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset);	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE,walChanges.getObjectSize(OBJECT));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.getObjectSize(OBJECT));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset+2);	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	walChanges.setBinaryValue(buffer,data,serializationOffset+1);	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,stringSerializer.getObjectSize(OBJECT,walChanges));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(1,stringSerializer.getObjectSize(OBJECT));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(0,stringSerializer.getObjectSize(OBJECT));	0
9	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+serializationOffset,walChanges.objectSize(OBJECT));	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertEquals(""STR"",simulatorProperties.get(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertEquals(""STR"",simulatorProperties.get(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertThat(simulatorProperties.get(""STR""),is(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertThat(simulatorProperties.get(""STR""),equalTo(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertNull(simulatorProperties.get(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertThat(simulatorProperties.get(""STR""),is(nullValue()));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertThat(simulatorProperties.get(""STR""),is(equalTo(""STR"")));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertNull(simulatorProperties.get(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertNotNull(simulatorProperties.get(""STR""));"	0
10	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"Stringvalue=simulatorProperties.get(""STR"");"	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenest2=db.load(id.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ODocumentnest2=db.load(id.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	db.getLocalCache().clear();	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(id.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	"ODocumentnest2=base1.field(""STR"");"	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	db.localCache().clear();	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(nest1.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ORecordnested2=db.load(id.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	ORecordnested2=db.load(nest1.getIdentity());	0
11	10	orientechnologies_orientdb	CollectionOfLinkInNestedDocumentTest#nestedLinkSet	assertNotNull(nest1);	OIdentifiablenested2=db.load(nest1.getId());	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection).isNotNull();	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,notNullValue());	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,connection.getConnectTimeout());	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(Connection.class));	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	"assertEquals(""STR"",connection.toString());"	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(ReconnectConnection.class));	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(addr,connection.toString());	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(addr,connection.getConnectTimeout());	0
12	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(5,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	intdistance=p.getDistanceToGoal();	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(8,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(7,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(3,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(2,p.getDistanceToGoal());	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(8));	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(7));	0
13	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertThat(p.getDistanceToGoal(),is(5));	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",0);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",0);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	FileLoaderloader=newFileLoader(resource);	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",-1);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",-1);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",0L);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",1234L);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"newFileLoader(resource).fetchResource(""STR"",-1L);"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",resource.lastModified());"	0
14	10	nidi3_raml-loader	LoaderTest#fileNok	"assertEquals(""STR"",resource.getProtocol());"	"loader.fetchResource(""STR"",resource.getLastModified());"	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	1
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
15	10	OpenLiberty_ci.common	DevUtilTest#testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertThat(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir),equalTo(true));	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_SEPARATOR,macAddress.toString());	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(UNDERSCORE_SEPARATOR+""STR"",macAddress.toString());"	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(""STR""));"	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(UNDERSCORE_SEPARATOR));	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(UNDERSCORE_PREFIX+""STR"",macAddress.toString());"	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(UNDERSCORE_SEPARATOR,macAddress.toString());	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),equalTo(UNDERSCORE_SEPARATOR));	0
16	10	fluenda_ParCEFone	MacAddressTest#testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(UNDERSCORE_SEPARATOR+""STR""));"	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertThat(actual,is(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
17	10	adlnet_jxapi	ActivityProfileTest#testGetActivityId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(OType.STRING));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,equalTo(newOType[]{OType.STRING}));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,hasItem(propertyIndexByIntegerKey));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,arrayWithSize(1));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING,OType.INTEGER},result);	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(notNullValue()));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,is(newOType[]{OType.STRING}));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertThat(result,containsInAnyOrder(OType.STRING,OType.INTEGER));	0
18	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.STRING},result);	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(2,res.size());	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(1,res.size());	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(1);	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertThat(res,hasItem(""STR""));"	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(3,res.size());	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res).hasSize(2);	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res,hasItem(1));	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThat(res.size(),is(1));	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
19	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.size()>0);	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,provider.getDefaultClusterId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertTrue(provider.getDefaultClusterId()==doc.getVertexType(""STR"").getDefaultClusterId());"	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getDefaultClusterId(),provider.getDefaultClusterId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertEquals(""STR"",doc.getDefaultClusterId());"	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,knows.getDefaultClusterId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertEquals(""STR"",provider.getDefaultClusterId());"	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,customer.getDefaultClusterId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getIdentity().getDefaultClusterId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getId());	0
20	10	orientechnologies_orientdb	SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"doc.addAttribute(""STR"",""STR"");"	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison<0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
21	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>0);	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.isRecognized());	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),equalTo(true));	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),is(true));	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),equalTo(false));	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.isRecognized());	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum.isRecognized(),is(false));	0
22	10	PeterisP_morphology	MorphologyTest#tuStum	assertTrue(stum.isRecognized());	assertThat(stum,is(true));	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,toMergeMap);	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	"Map<String,String>actualMap=createMap(""STR"",""STR"",""STR"",""STR"");"	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,toMergeMap);	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>mergedMap=newHashMap<String,String>();	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	Map<String,String>actualMap=newHashMap<String,String>();	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	"Map<String,String>actualMap=createMap(""STR"",""STR"",""STR"",""STR"",""STR"");"	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	"Map<String,String>actualMap=createMap(""STR"",""STR"",""STR"");"	0
23	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeIfAbsent	assertEquals(expected,origMap);	"Map<String,String>mergedMap=newHashMap<String,String>(){{put(""STR"",""STR"");}};"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	1
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",rec(""STR"",""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",Record.rec(""STR"",""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR""+""STR"",Records.rec(""STR"",""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertThat(rec(""STR"",""STR""),equalTo(""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",Records.rec(""STR"",null));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertThat(rec(""STR"",""STR""),is(""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",records.rec(""STR"",""STR""));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",rec(""STR"",null));"	0
24	10	nidi3_graphviz-java	RecordsTest#tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",Record.rec(""STR"",null));"	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(1000);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReConnection(url);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelConnection(url);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReconnect(url);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	ReconnectManager.cancelReConnection();	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	reconnectManager.cancelReConnection();	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(100);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	verify(reconnectManager).cancelReconnection(url);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	reconnectManager.cancelReConnection(url);	0
25	10	sofastack_sofa-bolt	ReconnectManagerTest#testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	Thread.sleep(2000);	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(1,actual.size());	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertEquals(2,actual.size());	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
26	10	adlnet_jxapi	SubStatementTest#testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()==1);	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(ODateHelper.getDateTimeFormatInstance().format(newDate())));"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",saved.field(""STR"").toString());"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(newDate()));"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",classA.field(""STR"").toString());"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(ODateHelper.getDateTimeFormatInstance().format(newDate()))));"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(classA,saved.field(""STR""));"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",saved.field(""STR"").getValue());"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",classA.field(""STR"").getValue());"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",prop.field(""STR"").toString());"	0
27	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",classA.field(""STR"").value);"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(newFile(""STR"")),equalTo(s));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(s),equalTo(""STR""));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertEquals(""STR"",uriPathOf(s.replace(""STR"",""STR"")));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertEquals(""STR"",uriPathOf(newFile(s)));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(s),is(""STR""));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(s.replace(""STR"",""STR""))).isEqualTo(""STR"");"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(newFile(""STR"")),is(s));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(newFile(""STR"")),containsString(s));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertThat(uriPathOf(s.split(""STR"")[0]),equalTo(""STR""));"	0
28	10	nidi3_graphviz-java	OptionsTest#toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertEquals(uriPathOf(newFile(""STR"")),s);"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"Stringduration=""STR"";"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(durationSeconds(""STR""),is(nullValue()));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(durationSeconds(""STR""),is(1));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(GoTimeUtil.durationSeconds(""STR""),is(nullValue()));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(GoTimeUtil.durationSeconds(""STR""),is(1));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(durationSeconds(""STR""),is(0));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(GoTimeUtil.durationSeconds(""STR""),is(0));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertNull(GoTimeUtil.durationSeconds(""STR""));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(GoTimeUtil.durationSeconds(""STR""),is(10));"	0
29	10	fabric8io_fabric8-maven-plugin	GoTimeUtilTest#testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertThat(durationSeconds(""STR""),is(10));"	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(""STR""));"	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(equalTo(""STR"")));"	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,equalTo(""STR""));"	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult).isEqualTo(""STR"");"	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	assertThat(filterResult,is(nullValue()));	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
30	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllAllowed	"assertEquals(""STR"",filterResult);"	assertNull(filterResult);	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTime());	1
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTime());	1
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed,is(notNullValue()));	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed).isEqualTo(time);	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	"System.out.println(""STR""+parsed);"	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed);	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTimeInMillis());	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertThat(parsed,is(time));	0
31	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed);	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','a','n'},res));"	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'t','h','e'},res));"	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','h','e'},res));"	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','t','a','n'},res));	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','h','e'},res);	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(newbyte[]{'s','t','a','n'},res);	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(Arrays.equals(newbyte[]{'s','h','e'},res));	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','a','n'},res));"	0
32	10	jcodec_jcodec	H264UtilsTest#testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	"assertTrue(""STR"",Arrays.equals(newbyte[]{'s','t','h','e'},res));"	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(1,atts.size());	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR""));"	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertThat(atts).hasSize(1);	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertThat(atts,hasItem(""STR""));"	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.isEmpty());	0
33	10	amlinv_stat-collection-utils	MBeanAnnotationUtilTest#testGetAttributes	assertEquals(2,atts.size());	"assertTrue(atts.containsKey(""STR""));"	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	Shippable	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
34	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	Shippable	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	ObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	StringretrievedChild=retrievedParent.getFriends().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	retrievedChild=retrievedParent.getFriends().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	finalObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	Iterator<ObjectWithSet>iterator=retrievedParent.getFriends().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	ObjectWithSetretrievedChild=retrievedParent.getFriendsets().iterator().next();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	StringretrievedChild=retrievedParent.getFriends().iterator().next().getName();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	assertNotNull(retrievedParent);	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	Iterator<ObjectWithSet>iterator=retrievedParent.getFriends().iterator();	0
35	10	orientechnologies_orientdb	SimpleParentChildTest#testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	ObjectWithSetretrievedChild=retrievedParent.getFriends().iterator().first();	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR"")))));"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,is(equalTo(newVerb(""STR""))));"	0
36	10	adlnet_jxapi	VerbsTest#testTerminated	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR""))))));"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").size());"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(""STR""));"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	1
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").size());"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	1
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),equalTo(""STR""));"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").intValue());"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(1));"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").length);"	0
37	10	orientechnologies_orientdb	OScriptExecutionTest#testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertNull(item.getProperty(""STR""));"	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,TimeUnit.SECONDS);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	ThreadLocalArriveTimeHolder.arrive(channel,1);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<=end);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<end);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,TimeUnit.MILLISECONDS);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await(start,end-time);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<=end);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	assertTrue(time>start&&time<end);	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	countDownLatch.await();	0
38	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testMultiThread	assertTrue(time>=start);	ThreadLocalArriveTimeHolder.arrive(channel,2);	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertThat(currentValue,is(""STR""));"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertEquals(""STR"",currentValue);"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertThat(currentValue,equalTo(""STR""));"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertThat(currentValue).isEqualTo(""STR"");"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertThat(currentValue,is(equalTo(""STR"")));"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertEquals(""STR"",currentValue);"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"assertEquals(""STR"",currentValue.toString());"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	assertThat(currentValue,instanceOf(String.class));	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	"System.out.println(""STR""+currentValue);"	0
39	10	orientechnologies_orientdb	OAlterPropertyStatementExecutionTest#testSetCustom	assertNotNull(result);	System.out.println(currentValue);	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertThat(deserializedValue,is(setValue));	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	"embeddedListElement.field(""STR"",deserializedValue,OType.EMBEDDEDLIST);"	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(newValue,deserializedValue);	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	"assertEquals(embeddedListElement.field(""STR"",deserializedValue,OType.EMBEDDEDLIST),rawElementBytes[0]);"	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(newValue,deserializedValue);	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertThat(deserializedValue).isEqualTo(setValue);	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue2,deserializedValue);	0
40	10	orientechnologies_orientdb	ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue2,deserializedValue);	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertEquals(""STR"",uri.toString());"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	assertNotNull(uri);	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertEquals(""STR"",uri.toString());"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertThat(uri,equalTo(newURI(""STR"")));"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertThat(uri).isEqualTo(newURI(""STR""));"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertThat(uri).isEqualTo(""STR"");"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	assertThat(uri,is(instanceOf(URI.class)));	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	assertThat(uri,is(notNullValue()));	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertEquals(""STR"",uri.getPath());"	0
41	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertEquals(""STR"",uri.getScheme());"	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzera2=SvgSizeAnalyzer.svg(SVG);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	assertEquals(SVG,a.getSvg());	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG2);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertEquals(""STR"",a.getSvg());"	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG+""STR"");"	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_2D);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	finalSvgSizeAnalyzerb=SvgSizeAnalyzer.svg(SVG_1);	0
42	10	nidi3_graphviz-java	SvgSizeAnalyzerTest#svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertEquals(""STR""+SVG,a.getSvg());"	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(""STR""));"	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	assertThat(filterResult,is(nullValue()));	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	assertNull(filterResult);	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(equalTo(""STR"")));"	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult).isEqualTo(""STR"");"	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,equalTo(""STR""));"	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	assertNull(filterResult);	0
43	10	DigitalPebble_storm-crawler	HostURLFilterTest#testAllForbidden	"assertEquals(""STR"",filterResult);"	assertThat(filterResult,nullValue());	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(1,fields.size());	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(2,fields.size());	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.containsKey(""STR""),is(true));"	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	1
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	assertThat(fields).hasSize(1);	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),equalTo(""STR""));"	0
44	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields,hasItem(""STR""));"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertEquals(""STR"",uuid);"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertThat(uuid).isEqualTo(""STR"");"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertTrue(uuid.contains(""STR""));"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertTrue(uuid.equals(""STR""));"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertEquals(""STR"",uuid);"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertThat(uuid,is(""STR""));"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertTrue(uuid.contains(""STR""));"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"System.out.println(""STR""+uuid);"	0
45	10	hazelcast_hazelcast-simulator	UuidUtilTest#testNewUnsecureUuidString	assertNotNull(uuid);	"assertTrue(uuid.contains(""STR""));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(Attributes.of(""STR"",""STR""),Attributes.of(""STR"",""STR"")),hasItem(""STR"",""STR""));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(2));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(2));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(1));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(1));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(Attributes.of(""STR"",""STR"",""STR""),Attributes.of(""STR"",""STR"",""STR"")),hasItem(""STR"",""STR""));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(3));"	0
46	10	nidi3_graphviz-java	RankTest#combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertThat(RANK.combine(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasSize(3));"	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(2,docs.size());	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),is(2));	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),is(1));	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(3,docs.size());	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs,hasSize(1));	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),equalTo(2));	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertThat(docs.size(),equalTo(1));	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
47	10	orientechnologies_orientdb	LuceneMixIndexTest#testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>1);	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Mockito.verify(this.mockObjectQueryPreparer).prepareObjectQuery(this.polled001);	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Loggerlogger=Mockito.mock(Logger.class);	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(""STR""),this.mockObjectQueryInfo001.getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(getClass().getName()+""STR""),this.getPolledObjects().get(0).getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	Loggerlog=Mockito.mock(Logger.class);	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(""STR""),this.getPolledObjects().get(0).getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(getClass().getName()+""STR""),this.mockObjectQueryInfo001.getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(getClass().getName()+""STR""),this.getPolledObjects().get(1).getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	"assertEquals(Logger.getLogger(""STR""),this.getPolledObjects().get(1).getLog());"	0
48	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001),this.mockObjectQueryPreparer.getLog());	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertThat(actual,is(expected));	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	"assertEquals(""STR""+expected,actual);"	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	"assertEquals(expected+""STR"",actual);"	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
49	10	adlnet_jxapi	ResultTest#testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>pResult=db.command(newOCommandSQL(""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>oResult=db.command(newOCommandSQL(""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>q=db.command(newOCommandSQL(""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"ODocumentdoc=db.command(newOCommandSQL(""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"db.command(newOCommandSQL(""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>pResult=db.command(newOCommandSQL(""STR""+""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>oResult=db.command(newOCommandSQL(""STR""+""STR"")).execute();"	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
50	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"List<ODocument>q=db.command(newOCommandSQL(""STR""+""STR"")).execute();"	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buffer);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.packet(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	packet1=mpeges.frame(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	packet=mpeges.frame(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,4);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,3);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frames(buf);	0
51	10	jcodec_jcodec	MPEGESTest#testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.frame(buf,0,90000);	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertThat(copied.size(),is(2));	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertThat(copied.size(),is(1));	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(3,copied.size());	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
52	10	arnohaase_a-foundation	AsCollectionCopyTest#testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(3,copied.size());	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),is(""STR""));"	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),equalTo(""STR""));"	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertThat(protocol0.getProvidedProtocol(),is(equalTo(""STR"")));"	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"Protocolprotocol1=newProtocol(""STR"");"	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertThat(protocol0.getProvidedProtocol(),is(nullValue()));	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(protocol0.getProvidedProtocol().equals(""STR""));"	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	StringprovidedProtocol=protocol0.getProvidedProtocol();	0
53	10	TooTallNate_Java-WebSocket	ProtocolTest#testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(protocol0.getProvidedProtocol().contains(""STR""));"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(""STR""));"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),equalTo(""STR""));"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().contains(""STR""));"	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_SEPARATOR,macAddress.toString());	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(STANDARD_SEPARATOR,macAddress.toString());	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(MAC_ADDRESS,macAddress.toString());	0
54	10	fluenda_ParCEFone	MacAddressTest#testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(STANDARD_SEPARATOR));	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>result=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(text);	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>expected=newArrayList<>();	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(2,tokens.size());	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>results=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(tokens);	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertThat(tokens.size(),is(1));	0
55	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.removeWordsFromDictionary(tokens);	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(""STR"")));"	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(1)));	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(2,result.intValue());	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result.intValue());	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(""STR""));"	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(2,result);	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(equalTo(1)));"	0
56	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(equalTo(2)));"	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
57	10	adlnet_jxapi	SubStatementTest#testSetVerb	assertNotNull(actual);	assertThat(expected,actual);	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt.getId(),equalTo(loadedHunt.getId()));	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,loadedHunt.getImageData());	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt).isEqualTo(loadedHunt);	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertThat(savedHunt,equalTo(loadedHunt));	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(hunt,loadedHunt);	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getId()==loadedHunt.getId());	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getName(),loadedHunt.getName());	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,savedHunt.getImageData());	0
58	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(huntUglyPicture,loadedHunt.getImageData());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.params());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOCreateParams());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Parameters());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.NONE,newOSequence.CreateParams());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.params());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Params());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.metadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,newOSequence.Parameters());	0
59	10	orientechnologies_orientdb	ODropSequenceStatementExecutionTest#testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	db.getMetadata().getSequenceLibrary().createSequence(name,OSequence.SEQUENCE_TYPE.CACHED,null);	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(1.23d));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_2_34));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",GBP_2_34.convert(1.23d));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUS.convert(1.23d));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUHRUS.convert(1.23d));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(1.23));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_1_23));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_1_34));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(GBP_2_33));"	0
60	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUS	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSUS.convert(1.23));"	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	finalintresult=compositeKey.compareTo(anotherCompositeKey);	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey),lessThan(0));	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	finalintcompareResult=compositeKey.compareTo(anotherCompositeKey);	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(0<compositeKey.compareTo(anotherCompositeKey));	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey)<0,is(true));	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey),greaterThan(0));	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertThat(compositeKey.compareTo(anotherCompositeKey)<0,is(false));	0
61	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	"anotherCompositeKey.addKey(""STR"");"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	ODocumentprevious=execute.iterator().next();	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	ODocumentprev=execute.iterator().next();	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(1,next.field(""STR"").size());"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertThat(next.field(""STR""),is(equalTo(""STR"")));"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(""STR"",next.field(""STR"").toString());"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(""STR"",next.field(""STR"").value);"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertThat(next.field(""STR""),equalTo(""STR""));"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"ORecordrecord=next.field(""STR"");"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertThat(next.field(""STR""),is(equalTo(1L)));"	0
62	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"ORecordfirst=next.field(""STR"");"	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	"assertEquals(expected.toArray(newString[]{""STR"",""STR""}),actual);"	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	"assertEquals(expected.toArray(newString[]{""STR""}),actual);"	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(expected,actual);	0
63	10	adlnet_jxapi	ActivityDefinitionTest#testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(3.14d));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(1.23d));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(GBP_2_34));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23d));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_2_34));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(0.5d));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(GBP_1_34));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_1_34));"	0
64	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23));"	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.mockBatchPollProcessor,poller.getBatchPollProcessor());	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.mockBatchPollProcessor,poller.getBatchPollProcessor());	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.batchPollProcessor,poller.getBatchPollProcessor());	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(this.batchPollProcessor,poller.getBatchPollProcessor());	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor()).isEqualTo(this.mockBatchPollProcessor);	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	this.poller.setBatchPollProcessor(null);	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor()).isSameAs(this.mockBatchPollProcessor);	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNull(this.poller.getBatchPollProcessor());	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertThat(poller.getBatchPollProcessor(),instanceOf(BatchPollProcessor.class));	0
65	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	"this.poller.setBatchPollProcessor(""STR"");"	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(1);	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(1,index.getSize());	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(2);	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize()).isEqualTo(3);	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),equalTo(1));	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),is(1));	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(1,index.size());	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),is(2));	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.size()).isEqualTo(1);	0
66	10	orientechnologies_orientdb	LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertThat(index.getSize(),equalTo(2));	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,is(notNullValue()));	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result);	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result.intValue());	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	"assertThat(result,is(equalTo(""STR"")));"	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,is(equalTo(1)));	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,instanceOf(Integer.class));	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	"assertThat(result,equalTo(""STR""));"	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,result);	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	"assertEquals(""STR"",result);"	0
67	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue	assertEquals(result,12);	assertThat(result,equalTo(1));	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"StringmimeType=Mime.getMimeTypeForFile(""STR"");"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),equalTo(""STR""));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),is(equalTo(""STR"")));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),is(""STR""));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"Stringmime=Mime.getMimeTypeForFile(""STR"");"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""+myPort+""STR""));"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"Mime.getMimeTypeForFile(""STR"");"	0
68	10	NanoHttpd_nanohttpd	MimeTest#testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"finalStringmimeType=Mime.getMimeTypeForFile(""STR"");"	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.size());	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	"assertEquals(""STR"",result.toString());"	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.size());	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,result.size());	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertEquals(1,compositeIndex.indexes.size());	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	result.reload();	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	compositeIndex.reload();	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	docToStore.reload();	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertTrue(docToStore.exists());	0
69	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.isReloadable());	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ENGLISH);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ENGLISH);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,false,newLocale(""STR""));"	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,true,newLocale(""STR""));"	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,null);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ROOT);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.GERMAN);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ROOT);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent1=parser.parse(sample1,false,Locale.ENGLISH);	0
70	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	parser.parse(sample1,false,Locale.ENGLISH);	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.sort().toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toSql().toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
71	10	redraiment_jactiverecord	TSqlBuilderTest#testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDrafts();	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertThat(server.getDrafts(),hasItem(newDraft_6455()));	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	server.setDrafts(Collections.singletonList(newDraft_6455()));	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDrafts();	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDrafts().size());	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	List<Draft>drafts=server.getDetails();	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	server.setDrafts(newDraft_6455());	0
72	10	TooTallNate_Java-WebSocket	WebSocketServerTest#testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getDrafts().size()==1);	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	1
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	1
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertThat(btUrl.getIp(),is(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertThat(btUrl.getIp(),equalTo(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(btUrl.getIp());	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().contains(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().contains(""STR""));"	0
73	10	sofastack_sofa-bolt	RpcAddressParserTest#testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertTrue(btUrl.getIp().equals(""STR""));"	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props.isEmpty(),is(false));	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(not(nullValue())));	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props.isEmpty(),is(true));	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props).isNotNull();	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertThat(props,is(nullValue()));	0
74	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentYamlToPropertiesParsing	assertNotNull(props);	"assertEquals(""STR"",props.toString());"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"cm.remove(""STR"");"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(0));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(2,cm.count(""STR""));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"intcount=cm.count(""STR"");"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),equalTo(0));"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR"")).isEqualTo(0);"	0
75	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"cm.removeConn(""STR"");"	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file,is(notNullValue()));	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file).isNotNull();	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file,instanceOf(File.class));	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	"assertEquals(""STR"",file.getName());"	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file.exists(),is(true));	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertThat(file.exists(),equalTo(true));	0
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
76	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetFileFromUrl_fromJarFile	assertNotNull(file);	"assertEquals(""STR"",file.getPath());"	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").doubleValue());"	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").floatValue());"	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").asDouble());"	0
77	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDoubleWithingQuotes	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").doubleValue());"	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(11,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>removedKeys2=newHashMap<Object,Integer>();	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	addedKeys.put(12,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(13,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(9,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(14,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(10,2);	0
78	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	removedKeys.put(12,1);	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(3,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(0,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),is(2));	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(4,extr.fields());	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),equalTo(2));	0
79	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()==2);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement(cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	intclusterId=db.getClusterIdByName(cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution();	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	intid=db.getClusterIdByName(cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement(db,cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(db,cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	db.dropCluster(cluster);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementExecutionp=newODropClusterStatementExecution(db);	0
80	10	orientechnologies_orientdb	ODropClusterStatementExecutionTest#testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	ODropClusterStatementexecution=newODropClusterStatement();	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(0,request.getOperations().size());	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(0,request.getOperations().size());	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	List<ORecordOperationRequest>result=request.getOperations();	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().isEmpty());	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(operations,request.getOperations());	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==1);	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==0);	0
81	10	orientechnologies_orientdb	OBatchOperationsTest#testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()==1);	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"TextEditoreditor=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"TextEditort=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"finalTextEditoreditor=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"TextEditortest=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"finalTextEditort=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"finalTextEditortest=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"finalTextEditortextEditor=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"TextEditortextEditor=newTextEditor(""STR"");"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"finalStringtext=""STR"";"	0
82	10	myabc_markdownj	TestTextEditor#testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	finalTextEditoreditor=newTextEditor();	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(nullValue()));	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	"assertThat(""STR"",result,is(nullValue()));"	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertNull(result);	1
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(notNullValue()));	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertNull(result);	1
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result).isNull();	0
83	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testEmpty	assertNull(result);	assertThat(result,is(empty()));	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(1,result.size());	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(2,result.size());	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	"assertThat(result,hasItem(""STR""));"	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertEquals(1,result.size());	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertThat(result).hasSize(1);	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	"assertEquals(""STR"",result.get(0));"	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
84	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testRelease	assertEquals(3,result.size());	assertThat(result).hasSize(2);	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",config.toYaml(""STR""));"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(equalTo(""STR"")));"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",configLoader.toYaml(""STR""));"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",config.toYaml(""STR""));"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),equalTo(""STR""));"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"StringexpectedYaml=""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"";"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"StringexpectedYaml=""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"";"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"StringexpectedYaml=""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"";"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"StringexpectedYaml=""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"";"	0
85	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	"StringexpectedYaml=""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"";"	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(10);	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(1,pushRequestRead.getMonitorId());	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(0,pushRequestRead.getMonitorId());	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(1);	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(0);	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(9,pushRequestRead.getMonitorId());	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertThat(pushRequestRead.getMonitorId()).isEqualTo(9);	0
86	10	orientechnologies_orientdb	OLiveQueryMessagesTests#testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getMonitorId()==10);	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,equalTo(b));	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,not(equalTo(b)));	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(equalTo(b)));	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertThat(a,is(b));	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.equals(b));	0
87	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#equal_even_with_different_history	assertEquals(a,b);	assertTrue(a==b);	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,false,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(3,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(2,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(3,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,true,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(2,m.readIntraChromaPredMode(m,0,MBType.CABAC,true,false,false));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,1,MBType.CABAC,false,false,true));	0
88	10	jcodec_jcodec	CABACTest#testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,m.readIntraChromaPredMode(m,0,MBType.CABAC,false,false,true));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(actual,expected);	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
89	10	adlnet_jxapi	ActivityDefinitionTest#testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	"assertEquals(""STR"",ob2.getName());"	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1,ob2);	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getName(),ob2.getName());	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2,ob1);	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertNull(ob2);	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	"assertEquals(""STR"",ob1.getFriend().getName());"	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2.getName(),ob1.getFriend().getName());	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getFriend(),ob2);	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2.getName(),ob1.getName());	0
90	10	orientechnologies_orientdb	TestObjectWithDeletedLink#testDeletedLink	assertNotNull(ob1.getFriend());	"assertTrue(ob2.getName().equals(""STR""));"	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.UPDATED));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.CREATED));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.DELETED));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.EXECUTING));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	OBasicTransactiontransaction=executor.execute(operations);	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.ACTIVE));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.IN_PROGRESS));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.STATUS));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	operations.add(newORecordOperation(rec,ORecordOperation.EXECUTE));	0
91	10	orientechnologies_orientdb	OConnectionExecutorTransactionTest#testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	OBasicTransactiontx=executor.execute(operations);	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,is(nullValue()));	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result).isSameAs(this.mockJmxMbeanConnection);	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,instanceOf(JMXMBeanConnection.class));	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,is(notNullValue()));	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	Mockito.verify(result).close();	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	"Mockito.verify(result,times(1)).loadAgent(""STR"");"	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,notNullValue());	0
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
92	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl	assertNull(result);	assertThat(result,nullValue());	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"database.dropClass(""STR"");"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"database.createClass(""STR"");"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(database.existsClass(""STR""),is(false));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertFalse(database.existsClass(""STR""));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(database.existsClass(""STR""),is(true));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertTrue(database.existsClass(""STR""));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"booleanexists=database.existsClass(""STR"");"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(database.existsClass(""STR""),equalTo(false));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(database.existsClass(""STR""),equalTo(true));"	0
93	10	orientechnologies_orientdb	RemoteSimpleSchemaTest#testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"database.drop(""STR"");"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
94	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""+""STR""));"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertThat(actual,is(equalTo(""STR"")));"	0
95	10	adlnet_jxapi	VerbsTest#testCompleted	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertThat(result.getTarget(),is(TEST_ONAME_STR002B));	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertThat(result.getTarget(),equalTo(TEST_ONAME_STR002B));	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002A,result.getTarget());	0
96	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(TEST_ONAME_STR002B,result.getTarget());	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(2,result.size());	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(1,result.size());	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	"assertThat(result,hasItem(""STR""));"	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(2,result.size());	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertEquals(1,result.size());	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	"assertEquals(""STR"",result.get(0));"	0
97	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testTarget	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(3,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertNotNull(schemas);	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertEquals(0,schemas.size());	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==1);	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertTrue(schemas.size()==2);	0
98	10	xmlet_XsdParser	IssuesTest#testIssue23	assertTrue(true);	assertThat(schemas).hasSize(1);	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(1)));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1,2));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,2)));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iterator=Iterations.iterator(1,2);	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(2)));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalStream<Integer>stream=IterableToStream.stream(Iterations.iterator(1));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	finalIterator<Integer>iter=Iterations.iterator(1,2);	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertThat(StreamUtils.stream(Iterations.iterator(1,2)),hasSize(3));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2),IterableToStream.stream(Iterations.iterator(1,3)));	0
99	10	gvlasov_collections-utils	IterableToStreamTest#iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1),IterableToStream.stream(Iterations.iterator(3)));	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isMulticast());	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(true,macAddress.isMulticast());	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(false,macAddress.isMulticast());	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isMulticast());	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),is(true));	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),equalTo(true));	0
100	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticast	assertTrue(macAddress.isMulticast());	assertThat(macAddress.isMulticast(),is(false));	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(3,result.size());	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(0,1,2,3,4),result);	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(2,result.size());	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(1,result.size());	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(4,result.size());	1
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(1,2,3,4),result);	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertTrue(result.isEmpty());	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(0.0,1.0,2.0,3.0),result);	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertEquals(Arrays.asList(1.0,2.0,3.0),result);	0
101	10	arnohaase_a-foundation	ACollectionHelperTest#testCollect	assertEquals(4,result.size());	assertTrue(result.size()==4);	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(mapToTest))));	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(mapToTest.get(""STR"")))));"	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(mapToTest.get(""STR"")));"	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(mapToTest));	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(notNullValue()));"	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(mapToTest[""STR""]));"	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(mapToTest[""STR""])));"	0
102	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	"assertThat(result,is(notNullValue(""STR"")));"	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,actual,hasItem(newActivity(ID)));	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,equalTo(actual));	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertNotEquals(expected,actual);	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(actual,is(expected));	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
103	10	adlnet_jxapi	ContentActivitiesTest#testGetCategory	assertNotNull(actual);	assertThat(expected,actual,hasItems(newActivity(ID)));	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
104	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testIndexedEdgeArrows	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected.toString(),actual.get(""STR"").toString());"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected.toString(),actual.getString(""STR""));"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR"").toString());"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected.toString(),actual.get(""STR"").getString(""STR""));"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR"").getString(""STR""));"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
105	10	adlnet_jxapi	AboutTest#testSetExtensions	assertNotNull(actual);	"assertEquals(expected.toString(),actual.get(""STR"").asString());"	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(actual,is(expected));	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertNotEquals(expected,actual);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertNotSame(expected,actual);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertTrue(actual==expected);	0
106	10	adlnet_jxapi	SubStatementTest#testGetContext	assertNotNull(actual);	assertThat(expected,actual);	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertThat(actual,is(expected));	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	"assertEquals(expected.toString()+""STR"",actual.toString());"	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
107	10	adlnet_jxapi	AttachmentTest#testGetUsageType	assertNotNull(actual);	assertEquals(actual,expected);	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	"assertEquals(""STR"",props.getProperty(""STR"").toString());"	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	"assertEquals(""STR"",props.getProperty(""STR"").toString());"	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	"assertTrue(props.containsKey(""STR""));"	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	"assertTrue(props.containsKey(""STR""));"	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props).isNotNull();	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	"assertEquals(""STR"",props.get(""STR"").toString());"	0
108	10	fabric8io_fabric8-maven-plugin	ThorntailUtilTest#testReadThorntailPort	assertNotNull(props);	assertThat(props,notNullValue());	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,serializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(serializationOffset,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(0));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertThat(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),is(2));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(0,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
109	10	orientechnologies_orientdb	DoubleSerializerTest#testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(2,doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset+1));	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	assertEquals(12345,result.substring(0,1));	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	assertEquals(12345,result.substring(0,4));	0
110	10	arnohaase_a-foundation	AJsonSerHelperTest#testNumber	"assertEquals(""STR"",result);"	assertEquals(12345,result.substring(0,2));	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	thrown.expect(IOException.class);	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	"SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	"SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	"SSLServerSocketFactorysocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtil.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=NetUtils.makeSSLSocketFactory(keyStorePath,newchar[0]);	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	"SSLServerSocketFactorysocketFactory=makeSSLSocketFactory(keyStorePath,""STR"".toCharArray());"	0
111	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	SSLServerSocketFactorysocketFactory=makeSSLSocketFactory(keyStorePath,newchar[0]);	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.OK));	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(Status.OK));	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.SUCCESS));	0
112	10	Yubico_yubico-java-client	YubicoClientTest#testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(""STR""));"	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(equalTo(""STR"")));"	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,equalTo(""STR""));"	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult).isEqualTo(""STR"");"	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertTrue(filterResult.contains(""STR""));"	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	assertNull(filterResult);	0
113	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinHostOnly	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(2,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(2,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,computeSize);	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	"System.out.println(""STR""+a.estimateSize());"	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
114	10	jcodec_jcodec	SeekHeadFactoryTest#testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	"System.out.println(""STR"");"	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(2,result.size());	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result.size(),is(2));	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(3,result.size());	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertEquals(2,result.size());	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result,hasItem(1));	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result).hasSize(2);	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result,hasItem(3));	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertThat(result).hasSize(1);	0
115	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertThat(nameProperty.getName(),is(""STR""));"	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertEquals(""STR"",nameProperty.getName());"	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertThat(nameProperty.getName(),equalTo(""STR""));"	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertEquals(""STR"",nameProperty.getName());"	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertThat(nameProperty.getName(),is(equalTo(""STR"")));"	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(notNullValue()));	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(nullValue()));	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	System.out.println(nameProperty.getName());	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(KEY_EMBEDDED_TYPE));	0
116	10	orientechnologies_orientdb	OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(Mandatory.class.getName()));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,hasItem(OType.STRING));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,arrayWithSize(1));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,arrayWithSize(2));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(newOType[]{OType.STRING}));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertEquals(1,result.length);	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,is(equalTo(OType.STRING))));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,is(notNullValue()));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(OType.STRING));	0
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
117	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testGetTypes	assertEquals(result.length,2);	assertThat(result,equalTo(newOType[]{OType.INTEGER}));	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
118	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,4));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(5,SeekHeadFactory.estimeteSeekSize(3,4));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(10,SeekHeadFactory.estimeteSeekSize(3,4));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,0));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,1));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,5));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(3,SeekHeadFactory.estimeteSeekSize(3,4));	0
119	10	jcodec_jcodec	SeekHeadFactoryTest#testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(2,SeekHeadFactory.estimeteSeekSize(3,6));	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property,classA.getProperty(""STR""));"	1
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.createClass(""STR"");"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property.getProperty(""STR""),is(notNullValue()));"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property,classA.getProperty(""STR""));"	1
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property,equalTo(classA.getProperty(""STR"")));"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property.getProperty(""STR""),is(equalTo(classA.getProperty(""STR""))));"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property.getProperty(""STR""),is(not(nullValue())));"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property.getProperty(""STR""),equalTo(classA.getProperty(""STR"")));"	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	assertThat(property,is(notNullValue()));	0
120	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertThat(property.getProperty(""STR""),is(equalTo(classA)));"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"Sourcesource=sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(sourceLoader.load(""STR""));"	1
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(sourceLoader.load(""STR""));"	1
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"Sourcesrc=sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"Sourceresult=sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"Sources=sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"Sourcesources=sourceLoader.load(""STR"");"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNotNull(sourceLoader.load(""STR""));"	0
121	10	trautonen_coveralls-maven-plugin	DirectorySourceLoaderTest#testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	Sourcesource=sourceLoader.load(null);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress();	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	"SimulatorAddressaddress=newSimulatorAddress(0,""STR"");"	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(1,3);	0
122	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,null);	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(buf1,buf2);	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(buf1,buf2);	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.remaining());	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.remaining());	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(4,buf1.remaining());	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	reader.setBufferIncrement(2);	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.capacity());	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.equals(buf2));	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.hasRemaining());	0
123	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.capacity());	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertThat(actual,is(expected));	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	"assertTrue(""STR"".equals(expected,actual));"	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
124	10	adlnet_jxapi	StatementTest#testSetVersion	assertNotNull(actual);	"System.out.println(""STR""+actual);"	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertThat(d,is(calendar.getTime()));	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,calendar.get(Calendar.HOUR_OF_DAY));	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,d.getTimeInMillis());	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	"System.out.println(""STR""+d);"	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	"assertEquals(""STR"",d.toString());"	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertThat(d,is(calendar));	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,calendar.get(Calendar.MILLISECOND));	0
125	10	orientechnologies_orientdb	OIOUtilsTest#shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(5,d.getTimeInMillis());	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(3,qResult.size());	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
126	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testSimpleLimit	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	1
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertThat(defaultExtension.getProvidedExtensionAsClient(),is(equalTo(""STR"")));"	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertThat(defaultExtension.getProvidedExtensionAsClient(),is(""STR""));"	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertThat(defaultExtension.getProvidedExtensionAsClient(),equalTo(""STR""));"	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	1
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	1
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertTrue(defaultExtension.getProvidedExtensionAsClient().equals(""STR""));"	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertTrue(defaultExtension.getProvidedExtensionAsClient().contains(""STR""));"	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	Stringresult=defaultExtension.getProvidedExtensionAsClient();	0
127	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	assertNull(defaultExtension.getProvidedExtensionAsClient());	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent1=parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	commonEvent=parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventexpected=parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventcef=parser.parse(sample1Array);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(sample1Array,false);	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertThat(parser.parse(sample1Array),instanceOf(CEFCommonEvent.class));	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertThat(parser.parse(sample1Array),instanceOf(CEFEvent.class));	0
128	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	CommonEventevent=parser.parse(newbyte[]{1,2});	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.warn(""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.set(""STR"",""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.set(Keys.CUCUMBERPRO_PROJECTNAME,""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.ignore(Level.INFO);	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.set(Keys.CUCUMBERPRO_LOGGING,""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.log(Level.INFO,""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.info(""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	"logger.set(Keys.CUCUMBERPRO_LOGLEVEL,""STR"");"	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.setLevel(Level.INFO);	0
129	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	logger.setLevel(Level.INFO);	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"logger.info(""STR"");"	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(LOG_MESSAGE);	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(true));	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	logger.info(Level.INFO);	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled()).isTrue();	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),equalTo(true));	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertThat(logger.isInfoEnabled(),is(false));	0
130	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	"logger.info(""STR"",Level.INFO);"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR"")))));"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
131	10	adlnet_jxapi	VerbsTest#testAnswered	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR""))))));"	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypesEvent.class)));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypesEvent.class)));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(CEFInvalidMessageTypes.class)));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(instanceOf(InvalidMessageTypes.class)));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event).isNotNull();	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertThat(event,is(not(instanceOf(MessageTypes.class))));	0
132	10	fluenda_ParCEFone	CEFParserTest#invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(1,parseBuf);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(0,parseBuf);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	"System.out.println(""STR""+parseBuf);"	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(1,parseBuf);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(2,parseBuf);	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	"assertEquals(""STR"",parseBuf);"	0
133	10	jcodec_jcodec	PlatformTest#testInvokeStatic2	assertEquals(42,parseBuf);	assertThat(parseBuf,is(0));	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertNotNull(response);	1
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertNotNull(response);	1
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	"assertEquals(""STR"",response.toString());"	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	"assertEquals(""STR"",response.toString());"	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertThat(response).isNotNull();	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	"assertEquals(""STR"",response.getSignature());"	0
134	10	Yubico_yubico-java-client	YubicoClientTest#testSignature	assertNotNull(response);	assertTrue(response!=null);	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newRoutingNanoHTTPD.UriResource(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newURI(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newUriResource(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",routerNanoHTTPD.getUriResource(""STR"").toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(null).toString());"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertThat(routerNanoHTTPD.uriToString(),is(""STR""));"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"System.out.println(""STR"");"	0
135	10	NanoHttpd_nanohttpd	TestNanolets#uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertEquals(""STR"",newRoutingNanoHTTPD.UriResource(null).toString());"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha1=WARCRecordFormat.getDigestSha1(content);	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(content));"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(content));"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR""+sha1str,WARCRecordFormat.getDigestSha1(content));"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(content);	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	StringdigestSha1=WARCRecordFormat.getDigestSha1(content);	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringsha2str=WARCRecordFormat.getDigestSha1(content);	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	"assertEquals(""STR"",WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8)));"	0
136	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	Stringdigest=WARCRecordFormat.getDigestSha1(sha1str.getBytes(StandardCharsets.UTF_8));	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle(env).getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle(env).getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	assertEquals(CIRCLE_NAME,newCircle(env).getName());	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	assertEquals(CIRCLE_NAME,newCircle(env).getName());	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle(null).getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle(null).getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(CIRCLE_NAME,newCircle(""STR"").getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(CIRCLE_NAME,newCircle(""STR"").getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle().getName());"	0
137	10	trautonen_coveralls-maven-plugin	CircleTest#testGetName	"assertEquals(""STR"",newCircle(env()).getName());"	"assertEquals(""STR"",newCircle().getName());"	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	matcher.reset();	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(false));	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
138	10	basis-technology-corp_tcl-regex-java	MatcherTest#reset	assertTrue(matcher.find());	assertThat(matcher,is(true));	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(1,actual.size());	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,hasItem(s));	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(2,actual.size());	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertTrue(actual.contains(s));	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(0,actual.size());	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,contains(s));	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertThat(actual,hasItems(s));	0
139	10	adlnet_jxapi	StatementResultTest#testSetStatements	assertNotNull(actual);	assertEquals(expected.size()+1,actual.size());	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(0));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(1));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(1));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThan(0L));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(1L));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,equalTo(1));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThanOrEqualTo(1));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count).isEqualTo(1);	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,is(2L));	0
140	10	orientechnologies_orientdb	LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertThat(count,greaterThanOrEqualTo(1L));	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1.23d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3.14d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Double.NaN));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",12.34d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.5d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1.23d));"	0
141	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Double	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3.6d));"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertEquals(""STR"",markup.markdown(""STR""));"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"Stringmarkdown=markup.markdown(""STR"");"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertThat(markup.markdown(""STR""),is(equalTo(""STR"")));"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"Stringtext=markup.markdown(""STR"");"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertThat(markup.markdown(""STR""),equalTo(""STR""));"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"Stringhtml=markup.markdown(""STR"");"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertThat(markup.markdown(""STR""),is(""STR""));"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"markup.markdown(""STR"");"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"Stringresult=markup.markdown(""STR"");"	0
142	10	myabc_markdownj	MarkupFileTester#runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertThat(markup.markdown(""STR""),containsString(""STR""));"	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass();	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classLinked);	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	OClasslinked=prop.getLinkedClass();	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.removeLinkedClass(classLinked);	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"prop.setLinkedClass(""STR"");"	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(null);	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.getLinkedClass();	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.addLinkedClass(classLinked);	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	db.drop();	0
143	10	orientechnologies_orientdb	AlterPropertyTest#testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	prop.setLinkedClass(classA);	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	DefaultExtensiondefaultExtension2=newDefaultExtension();	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),equalTo(defaultExtension1.hashCode()));	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()==defaultExtension1.hashCode());	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(sameInstance(defaultExtension1.hashCode())));	0
144	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),not(equalTo(defaultExtension1.hashCode())));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+1,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+OShortSerializer.SHORT_SIZE,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(3,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+2,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(65628,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(4,linkSerializer.getObjectSizeInByteBuffer(buffer));	0
145	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThat(linkSerializer.getObjectSizeInByteBuffer(buffer),is(size));	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(not(expectedResult)));	0
146	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testInvalidURI	assertEquals(expectedResult,normalizedUrl);	"assertThat(normalizedUrl,is(""STR""));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");}})),hasItem(""STR"",""STR""));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(emptyAttributes()));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),is(empty()));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(map(""STR"",""STR""))));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(map(""STR"",""STR""))));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),is(empty()));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(map(""STR"",""STR""))));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");put(""STR"",""STR"");}})),is(true));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(empty()));"	0
147	10	nidi3_graphviz-java	ShapeTest#polygon	"assertEquals(attrs(attr(""STR"",4),attr(""STR"",""STR""),attr(""STR"",2.5),attr(""STR"",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));"	"assertThat(polygon().applyTo(newAttributes<String>(){{put(""STR"",""STR"");put(""STR"",""STR"");}})),equalTo(shape()));"	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(2,results.size());	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(3,results.size());	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),is(1));	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),is(2));	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertEquals(2,results.size());	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	"assertThat(results,hasItem(""STR""));"	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertTrue(results.size()>0);	0
148	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testAggregations	assertEquals(1,results.size());	assertThat(results.size(),equalTo(1));	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	assertEquals(1,result.length());	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertEquals(1,result.indexOf(""STR""));"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertEquals(""STR""+1,result);"	0
149	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test1Returns1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	longidxUsagesAfter=indexUsages(qResult);	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(1));	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	longidxUsagesAfter=indexUsages(db);	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>idxUsagesBefore);	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	intidxUsagesAfter=indexUsages(qResult);	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
150	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection	assertEquals(qResult.size(),1);	"longidxUsagesAfter=indexUsages(qResult,""STR"");"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(true));"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"booleanhasInitContainer=handler.hasInitContainer(builder,""STR"");"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(true));"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"booleanresult=handler.hasInitContainer(builder,""STR"");"	0
151	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(false));"	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(true));	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(false));	0
152	10	sofastack_sofa-bolt	GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	System.clearProperty(RpcConfigs.CONNECTION_NUM_KEY);	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null));"	1
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),is(""STR""));"	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	assertEquals(null,m.markdown(null));	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(null));"	1
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),is(equalTo(""STR"")));"	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(null,m.markdown(""STR""));"	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertThat(m.markdown(null),equalTo(""STR""));"	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	Stringh=m.markdown(null);	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR""+""STR"",m.markdown(null));"	0
153	10	myabc_markdownj	EdgeCases#testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(null));"	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,is(expected));	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,equalTo(expected));	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(expected,actual,is(equalTo(expected)));	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertThat(actual,is(equalTo(expected)));	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	"assertThat(""STR"",actual,is(expected));"	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	"assertThat(""STR"",actual,is(equalTo(expected)));"	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	"assertThat(""STR"",actual,equalTo(expected));"	0
154	10	adlnet_jxapi	ScoreTest#testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(1,result.size());	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(1,result.size());	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	"assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""))));"	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	"assertThat(result,hasItem(newTestNamed(""STR"")));"	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	"assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR""))));"	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	"assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR"")));"	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	assertTrue(result.size()>0);	0
155	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#order	assertEquals(2,result.size());	"assertThat(result,hasItems(newTestNamed(""STR""),newTestNamed(""STR""),newTestNamed(""STR"")));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertThat(body,containsString(""STR""));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertEquals(""STR"",body);"	1
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertTrue(body.contains(""STR""));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"System.out.println(""STR""+body);"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertTrue(body.contains(""STR""));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertThat(body,is(""STR""));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertThat(body).isEqualTo(""STR"");"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertEquals(""STR"",body);"	1
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertThat(body,containsString(""STR""+PROXY_PORT+""STR""));"	0
156	10	trautonen_coveralls-maven-plugin	HttpClientFactoryTest#testNonProxiedHostRequest	"assertEquals(""STR"",body);"	assertNotNull(body);	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".length()==1;}};"	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".equals(o);}};"	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==1;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return!""STR"".equals(o);}};"	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Objecto){returntrue;}};	0
157	10	arnohaase_a-foundation	ACollectionHelperTest#testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR""+o.length()==1;}};"	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isTrue();"	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(1);	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(1);"	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(2);"	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(2);	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(1);	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(2);	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isFalse();"	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.containsKey(header)).isTrue();	0
158	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(3);"	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertThat(a,not(equalTo(b)));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(1));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getSolvedPuzzle());	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(3));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(2));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(0));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	PuzzleStatec=newPuzzleState(getPuzzle(4));	0
159	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	notEquals(a,b);	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(this.mockLogger,injector.getLog());	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	this.injector.setLog(null);	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(this.mockLogger,injector.getLog());	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(this.mockLogger,injector.getLog());	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(this.injector.getLog());	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog(),is(this.mockLogger));	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog()).isEqualTo(this.mockLogger);	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertThat(injector.getLog(),instanceOf(Logger.class));	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.injector.getLog()instanceofLogger);	0
160	10	amlinv_stat-collection-utils	AttributeInjectorTest#testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.injector.getLog()!=null);	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertThat(sql.toString(),equalTo(""STR""));"	0
161	10	redraiment_jactiverecord	TSqlBuilderTest#testWhere	"assertEquals(""STR"",sql.toString());"	"assertThat(sql.toString(),is(""STR""));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertEquals(1,result.size());	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertEquals(0,result.size());	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,0,""STR"",""STR""))));"	0
162	10	hazelcast_hazelcast-simulator	WorkerQueryTest#noFilters	assertEquals(list,result);	assertThat(result).hasSize(1);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(0,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(0,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(result,data.length);	1
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(1,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(9,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertThat(result,is(equalTo(15)));	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(5,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(2,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(3,result);	0
163	10	orientechnologies_orientdb	ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertThat(result,is(equalTo(5)));	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties);	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertTrue(properties.containsKey(""STR""));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(CIRCLE_BUILD_NUMBER));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(properties.getProperty(""STR""),System.getProperty(CIRCLE_BUILD_NUMBER));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(properties.getProperty(""STR""),System.getProperty(""STR""));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	assertEquals(properties.getProperty(CIRCLE_BUILD_NUMBER),System.getProperty(CIRCLE_BUILD_NUMBER));	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(properties.getProperty(CIRCLE_BUILD_NUMBER),System.getProperty(""STR""));"	0
164	10	trautonen_coveralls-maven-plugin	CircleTest#testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(CIRCLE_BUILD_NUMBER));"	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.add(1);	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(1));	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.set(1,2);	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertThat(array.add(1),is(2));	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	array.set(0,1);	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(3));	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(1,array.add(2));	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertThat(array.add(3),is(2));	0
165	10	orientechnologies_orientdb	CASObjectArrayTest#testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.add(5));	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertNotNull(verb);	1
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.toString());	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertNotNull(verb);	1
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getId());	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.id);	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.id);	0
166	10	adlnet_jxapi	VerbTest#testVerb	assertNotNull(verb);	assertEquals(ID,verb.getID());	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertEquals(""STR"",newWercker().getBuildUrl());"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertEquals(""STR"",newWercker(env).getBuildUrl());"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	assertEquals(WERCKER_BUILD_URL,newWercker().getBuildUrl());	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertEquals(""STR"",newWercker().getBuildUrl());"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	assertEquals(WERCKER_BUILD_URL,newWercker(env).getBuildUrl());	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertEquals(""STR"",newWercker(env).getBuildUrl());"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	Werckerwercker=newWercker();	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertEquals(WERCKER_BUILD_URL,newWercker(""STR"").getBuildUrl());"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"assertThat(newWercker().getBuildUrl(),is(""STR""));"	0
167	10	trautonen_coveralls-maven-plugin	WerckerTest#testGetBuildUrl	"assertEquals(""STR"",newWercker(env()).getBuildUrl());"	"Werckerwercker=newWercker(""STR"");"	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),equalTo(false));	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
168	10	Yubico_yubico-java-client	YubicoClientTest#testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom().toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom().toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom(1).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom(null).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom(1).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.select().from(User.class).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.selectSomeFrom(null).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.select().from(User.class).toString());"	0
169	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.select(1).toString());"	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),is(true));	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),equalTo(true));	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),equalTo(false));	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertThat(crap.isRecognized(),is(false));	0
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
170	10	PeterisP_morphology	MorphologyTest#crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>actualEnv=envFilter.filter(expectedEnv);	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),is(equalTo(expectedEnv)));	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),equalTo(expectedEnv));	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>result=envFilter.filter(expectedEnv);	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>envMap=envFilter.filter(expectedEnv);	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>env2=envFilter.filter(expectedEnv);	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	envFilter.filter(expectedEnv);	0
171	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"expectedEnv.put(""STR"",""STR"");"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"fields.put(""STR"",""STR"");"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	assertEquals(1,fields.size());	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	assertEquals(2,fields.size());	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertTrue(fields.containsKey(""STR""));"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertThat(fields.get(""STR""),is(newString[]{""STR""}));"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertThat(fields,hasItem(""STR""));"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertThat(fields.get(""STR""),is(equalTo(""STR"")));"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertThat(fields.get(""STR""),hasItem(""STR""));"	0
172	10	DigitalPebble_storm-crawler	BasicIndexingTest#testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	assertThat(fields).hasSize(1);	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
173	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testArrayRange2	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey.hashCode(),mapResult.hashCode());	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.size());	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertThat(mapResult,is(newObject()));	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(multiKey,mapResult);	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,mapResult.intValue());	0
174	10	orientechnologies_orientdb	OMultiKeyTest#testOneKeyMap	assertNotNull(mapResult);	"assertEquals(""STR"",mapResult);"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,is(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,containsString(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
175	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertThat(UrlUtils.create(""STR""),equalTo(newURL(""STR"")));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertThat(UrlUtils.create(""STR""),is(newURL(""STR"")));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertEquals(""STR"",UrlUtils.create(""STR"").toString());"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"URLurl=UrlUtils.create(""STR"");"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertEquals(""STR"",UrlUtils.create(""STR"").toString());"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertEquals(newURL(""STR""),UrlUtils.create(""STR""));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertThat(UrlUtils.create(""STR""),is(equalTo(newURL(""STR""))));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertThat(UrlUtils.create(""STR""),instanceOf(URL.class));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertNotNull(UrlUtils.create(""STR""));"	0
176	10	trautonen_coveralls-maven-plugin	UrlUtilsTest#testCreateValidUrl	"assertEquals(""STR"",UrlUtils.create(""STR"").toURI().toASCIIString());"	"assertThat(UrlUtils.create(""STR""),is(instanceOf(URL.class)));"	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	List<Object>polledObjects=poller.getPolledObjects();	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertThat(poller.getPolledObjects(),hasItem(polled001));	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	List<Object>actual=poller.getPolledObjects();	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()==1);	0
177	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(2,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(2,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(1,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(1,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(3,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	"assertEquals(1,AThreadPool.prime(3,newHashSet<Integer>()->{
}));"	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	Set<Integer>exceptions=newHashSet<>();	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	intresult=AThreadPool.prime(1,newHashSet<Integer>());	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,newHashSet<>()));	0
178	10	arnohaase_a-foundation	AThreadPoolTest#testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(1,AThreadPool.prime(2,Sets.newHashSet(0)));	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(1);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffffL);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(1L);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]buf=EbmlUtil.convertToBytes(1);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(0xffffffff);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]bytes=EbmlUtil.convertToBytes(SintTest.INT_MAX);	0
179	10	jcodec_jcodec	EbmlSintTest#testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	byte[]data=EbmlUtil.convertToBytes(SintTest.INTEGER);	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]result=DevUtil.parseNetworks(""STR"");"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"assertThat(DevUtil.parseNetworks(""STR""),equalTo(networkArray));"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]expected=newString[]{""STR"",""STR""};"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	1
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	String[]result=DevUtil.parseNetworks(src.toString());	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]networks=DevUtil.parseNetworks(""STR"");"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]expected=newString[]{""STR""};"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"assertEquals(""STR"",DevUtil.parseNetworks(""STR"")[0]);"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]result=DevUtil.parseNetworks(""STR""+src);"	0
180	10	OpenLiberty_ci.common	DevUtilTest#testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"String[]result=DevUtil.parseNetworks(""STR""+src.getAbsolutePath()+""STR""+src.getPath());"	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(2,result.size());	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(3,result.size());	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(2,result.size());	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result.size(),is(2));	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertEquals(3,result.size());	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result).hasSize(2);	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertThat(result.size(),equalTo(2));	0
181	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()==2);	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[0]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR""),""STR"").toArray(newString[0]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	1
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[1]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertThat(actuals,containsString(""STR""));"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR""),""STR"").toArray(newString[0]);"	0
182	10	redraiment_jactiverecord	SeqTest#testFormatMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[2]);"	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(manager.isSame(manager2));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),is(true));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),is(false));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(manager.isSame(manager2));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),equalTo(true));	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	ODirtyManagermanager3=ORecordInternal.getDirtyManager(doc1);	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	ODirtyManagermanager3=ORecordInternal.getDirtyManager(doc2);	0
183	10	orientechnologies_orientdb	ODirtyManagerTest#testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertThat(manager.isSame(manager2),equalTo(false));	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{put(""STR"",""STR"");put(""STR"",""STR"");}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{put(""STR"",""STR"");}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{add(""STR"",""STR"");}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(Collections.singletonMap(""STR"",""STR"")));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),equalTo(newAttributes<>(){{put(""STR"",""STR"");}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){@OverridepublicbooleanisEmpty(){returnfalse;}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){@OverridepublicbooleanisEmpty(){returntrue;}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{put(""STR"",1);put(""STR"",2);}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{add(""STR"",value);}}));"	0
184	10	nidi3_graphviz-java	ColorTest#striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	"assertThat(color(""STR"").striped(),deepEquals(newAttributes<>(){{add(""STR"",1);}}));"	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertThat(binary.getOpcode(),is(Opcode.BINARY));	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(0,binary.getOpcode());	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary);	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertThat(binary.getOpcode(),equalTo(Opcode.BINARY));	0
185	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	"assertEquals(""STR"",binary.getOpcode());"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha2str=""STR"";"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1=WARCRecordFormat.getDigestSha1(content1,content2);	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha2str=WARCRecordFormat.getDigestSha1(content1,content2);	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	Stringsha1str=WARCRecordFormat.getDigestSha1(content1,content2);	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha1str2=""STR"";"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha1Str2=""STR"";"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha1str2=""STR""+WARCRecordFormat.getDigestSha1(content1,content2);"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha12str=""STR"";"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha2Str=""STR"";"	0
186	10	DigitalPebble_storm-crawler	WARCRecordFormatTest#testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	"Stringsha2str=WARCRecordFormat.getDigestSha1(content1,content2)+""STR"";"	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
187	10	orientechnologies_orientdb	TrackedSetTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.select(""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.select();	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.setRidSelect(""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.select(""STR"",""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.selectRid(""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.ridSelect(""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.setRidSelect(""STR"",""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.ridSelect(""STR"",""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"live.setRid(""STR"");"	0
188	10	orientechnologies_orientdb	OLiveQueryRemoteTest#testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	live.selectRid();	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(expected));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(expected,config.toYaml(""STR""));"	1
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(equalTo(expected)));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"Stringactual=config.toYaml(""STR"");"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),equalTo(expected));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(expected,config.toYaml(""STR""));"	1
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),containsString(expected));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),hasString(expected));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""+""STR""),is(expected));"	0
189	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(""STR"",config.toYaml(""STR""));"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(1,db.countClass(""STR""));"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(2,db.countClass(""STR""));"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(0,db.countClass(""STR""));"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertTrue(db.countClass(""STR"")>0);"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertTrue(db.countClass(""STR"")==1);"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(3,db.countClass(""STR""));"	1
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(1,db.countClass(""STR""));"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertTrue(db.countClass(""STR"")>1);"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertTrue(db.countClass(""STR"")==2);"	0
190	10	orientechnologies_orientdb	RecursiveLinkedSaveTest#testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"longcount=db.countClass(""STR"");"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',1));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',-1));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',2));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',1);	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',3));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('A',1));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',0));"	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	Strings=CommUtil.repeatChar('a',2);	0
191	10	rockagen_commons-lib	CommUtilTest#testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',5));"	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.port());	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.port());	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	"assertEquals(""STR"",rpcServer.port());"	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(randomPort(),rpcServer.port());	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),is(0));	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	"assertEquals(""STR"",rpcServer.port());"	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(123,rpcServer.port());	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),equalTo(0));	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertThat(rpcServer.port(),is(8080));	0
192	10	sofastack_sofa-bolt	RpcServerTest#doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	intport=rpcServer.port();	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,is(""STR""));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertFalse(filterResult.contains(""STR""));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertFalse(filterResult.contains(""STR""));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,is(equalTo(""STR"")));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
193	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	1
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,','));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),""STR""),""STR""));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"Strings=Seq.join(Arrays.asList(""STR"",""STR""),""STR"");"	0
194	10	redraiment_jactiverecord	SeqTest#testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(0,registry.agentCount());	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),is(0));	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),equalTo(0));	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()==0);	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),is(1));	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(0,registry.agentCount());	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertThat(registry.agentCount(),equalTo(1));	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(2,registry.agentCount());	0
195	10	hazelcast_hazelcast-simulator	AgentsFileTest#testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.agentCount()==0);	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").toString());"	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.getAsString());	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.getAsString(""STR""));"	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").asString());"	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.asString());	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").getAsString());"	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").asText());"	0
196	10	adlnet_jxapi	ActivityTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").toJsonString());"	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	"assertThat(newRank(""STR""),hasSize(1));"	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	assertThat(newRank(),hasSize(1));	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	"assertThat(newRank(""STR""),hasSize(2));"	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	assertThat(newRank(),hasSize(2));	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	"assertThat(newRank(),hasItem(""STR"",""STR""));"	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	finalAttributes<Rank>rank=newRank();	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	finalAttributes<Rank>attributes=newRank();	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	finalAttributes<Rank>attrs=newRank();	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	"assertThat(newRank(""STR""),hasSize(3));"	0
197	10	nidi3_graphviz-java	RankTest#newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	"assertThat(newRank(),hasItem(""STR"",1));"	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertNotNull(response);	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine(),is(200));	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine()).isEqualTo(Status.OK);	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertEquals(200,response.getStatusLine());	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine(),is(Status.OK));	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine()).isEqualTo(200);	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	"assertThat(response.getContent(),is(""STR""));"	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertEquals(200,response.getStatusLine());	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertEquals(200,response.getStatus());	0
198	10	NanoHttpd_nanohttpd	GZipIntegrationTest#fixedLengthContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	"assertThat(response.readEntity(String.class),is(""STR""));"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(1,fields.size());	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(2,fields.size());	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.containsKey(""STR""),is(true));"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),is(equalTo(""STR"")));"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),equalTo(""STR""));"	0
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	1
199	10	DigitalPebble_storm-crawler	BasicIndexingTest#testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertThat(fields).hasSize(1);	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",resp);"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",resp);"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertThat(resp,is(""STR""));"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(""STR"".equals(resp));"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertThat(resp).isEqualTo(""STR"");"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertTrue(resp.contains(""STR""));"	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	0
200	10	jribble_Java-Websockify	FlashPolicyHandlerTest#testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertThat(resp,is(request));	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(oldTag);	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,is(oldTag));	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	"assertThat(resultedTag).isEqualTo(newTagEvent(""STR"",null,null,null));"	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag).isEqualTo(latestTag);	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,equalTo(oldTag));	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(oldTag,resultedTag);	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertThat(resultedTag,instanceOf(TagEvent.class));	0
201	10	fabric8io_fabric8-maven-plugin	ImageStreamServiceTest#should_return_newer_tag	assertEquals(latestTag,resultedTag);	"assertEquals(newTagEvent(""STR"",null,null,null),resultedTag);"	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"logger=FluentLogger.getLogger(""STR"");"	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	logger.close();	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).flush();	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	verify(logger,times(1)).close();	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isOpen());	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isClosed());	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.size());	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isOpen());	0
202	10	fluent_fluent-logger-java	TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	"assertEquals(""STR"",logger.toString());"	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertSame(this.mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertEquals(this.mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),equalTo(this.mockConnectorFactoryDelegate));	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),is(this.mockConnectorFactoryDelegate));	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	finalJMXConnectorFactoryDelegatedelegate=factory.getConnectorFactoryDelegate();	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(this.factory.getConnectorFactoryDelegate(),is(this.mockConnectorFactoryDelegate));	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	JMXConnectorFactoryDelegatedelegate=factory.getConnectorFactoryDelegate();	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNull(this.factory.getConnectorFactoryDelegate());	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),is(this.mockJmxMBeanConnectionFactory));	0
203	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertThat(factory.getConnectorFactoryDelegate(),instanceOf(JMXConnectorFactoryDelegate.class));	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	"assertEquals(""STR"",ad.getId());"	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getChoices().size());	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getSteps().size());	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	"assertEquals(""STR"",ad.getId());"	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getChoices().size());	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getActivities().size());	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(ad,activityDefinition);	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	"assertEquals(ad.getId(),""STR"");"	0
204	10	adlnet_jxapi	ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertThat(ad).isEqualTo(newActivityDefinition(name,description));	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,StandardCharsets.UTF_8);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,StandardCharsets.UTF_8);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtil.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NetUtils.makeSSLSocketFactory(nonExistentPath,newchar[0]);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	serverSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	sslServerSocketFactory=SSLServerSocketFactory.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
205	10	NanoHttpd_nanohttpd	LoadKeyStoreTest#loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	SSLServerSocketFactorysslServerSocketFactory=NeoHTTPD.makeSSLSocketFactory(nonExistentPath,UTF_8);	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,is(expectedURL));	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedURL);	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedURL));	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedURL));	0
206	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis();	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis()-begin;	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	"System.out.println(""STR""+begin);"	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertEquals(begin,System.currentTimeMillis()-1);	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin>System.currentTimeMillis()-1);	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin>System.currentTimeMillis()-1);	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin<System.currentTimeMillis()-1);	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(begin<System.currentTimeMillis()-1);	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	longend=System.currentTimeMillis()+1;	0
207	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	"script.append(""STR"");"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanProcessorJava.detokenize(words));"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringresult=OpenKoreanProcessorJava.detokenize(words);	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanProcessorJava.detokenize(words));"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringactual=OpenKoreanProcessorJava.detokenize(words);	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertThat(OpenKoreanProcessorJava.detokenize(words),is(""STR""));"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",OpenKoreanTextProcessor.detokenize(words));"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	Stringtext=OpenKoreanProcessorJava.detokenize(words);	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"Stringexpected=""STR"";"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertThat(OpenKoreanProcessorJava.detokenize(words),equalTo(""STR""));"	0
208	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"List<String>words2=Arrays.asList(""STR"",""STR"");"	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(this.mockAttacher,factory.getAttacher());	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),equalTo(this.mockAttacher));	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),is(this.mockAttacher));	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(this.mockAttacher,factory.getAttacher());	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher()).isEqualTo(this.mockAttacher);	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(this.mockAttacher,factory.getAttacher());	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(factory.getAttacher(),is(this.mockAttacher));	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(this.mockAttacher,factory.getAttacher());	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertThat(this.factory.getAttacher(),instanceOf(VirtualMachineAttacher.class));	0
209	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNull(this.factory.getAttacher());	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	Stylestyle=Style.simple();	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(),hasItem(""STR"",text(""STR"")));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"Stylestyle=Style.simple(""STR"");"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"Stylestyle=Style.simple(""STR"",""STR"");"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(""STR"",""STR""),hasItem(""STR"",""STR""));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(),hasItem(""STR"",newText(""STR"")));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(""STR""),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(""STR"",""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(""STR""),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
210	10	nidi3_graphviz-java	StyleTest#simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	"assertThat(Style.simple(""STR"",""STR""),deepEquals(attrs(newSimpleAttribute(""STR"",""STR""),newSimpleAttribute(""STR"",""STR""))));"	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertThat(testSuite.getTestCase(null),is(nullValue()));	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertThat(testSuite.getTestCase(""STR""),nullValue());"	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertThat(testSuite.getTestCase(""STR""),is(nullValue()));"	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getTestCase(null));	0
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
211	10	hazelcast_hazelcast-simulator	TestSuiteTest#getTestCase_null	assertNull(testSuite.getTestCase(null));	TestCasetestCase=testSuite.getTestCase(null);	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"LineConventionsconventions=m.markdown(""STR"");"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	LineConventionsconventions=newLineConventions();	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"LineConventionscons=m.markdown(""STR"");"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"LineConventionslineConventions=m.markdown(""STR"");"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(""STR"",LineConventions.markdown(""STR""));"	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	LineConventionslineConventions=newLineConventions();	0
212	10	myabc_markdownj	LineConventions#testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"LineConventionsconventions=m.markdown(""STR""+""STR"");"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getLanguage());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY);"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getLocale());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getValue());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"");"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getI18n());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getLanguage());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.getText());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.command(""STR"",Locale.GERMANY.toString());"	0
213	10	orientechnologies_orientdb	RemoteMetadataReloadTest#testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"database.update(""STR"");"	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,equalTo(expected));	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options).isEqualTo(expected);	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,is(expected));	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,not(equalTo(expected)));	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertThat(options,deepEquals(expected));	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertNotEquals(expected,options);	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertSame(expected,options);	0
214	10	nidi3_graphviz-java	OptionsTest#fromJsonEmptyImages	assertEquals(expected,options);	assertTrue(options==expected);	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,is(expected));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertThat(expected,actual,is(equalTo(expected)));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
215	10	adlnet_jxapi	ResultTest#testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertArrayEquals(""STR"".getBytes(StandardCharsets.US_ASCII),Charsetfunctions.asciiBytes(""STR""));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertEquals(""STR"".getBytes(StandardCharsets.US_ASCII),Charsetfunctions.asciiBytes(""STR""));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"byte[]bytes=Charsetfunctions.asciiBytes(""STR"");"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertThat(Charsetfunctions.asciiBytes(""STR""),is(equalTo(newbyte[0])));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertEquals(""STR"",newString(Charsetfunctions.asciiBytes(""STR"")));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertThat(Charsetfunctions.asciiBytes(""STR""),is(notNullValue()));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertThat(Charsetfunctions.asciiBytes(""STR""),is(equalTo(newbyte[]{0})));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertEquals(""STR"",Charsetfunctions.asciiBytes(""STR""));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertThat(Charsetfunctions.asciiBytes(""STR""),is(equalTo(newbyte[]{})));"	0
216	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testAsciiBytes	"assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes(""STR""));"	"assertThat(Charsetfunctions.asciiBytes(""STR""),equalTo(newbyte[]{0}));"	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(1,a.getStatements().size());	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertEquals(responseMessage,a.getResponseMessage());	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().size()==1);	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	"assertEquals(""STR"",a.getResponseMessage());"	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	"assertEquals(""STR"",a.getMessage());"	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().isEmpty());	0
217	10	adlnet_jxapi	AttachmentResultTest#testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().size()>0);	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(1,rs.getProperty(""STR"").size());"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	assertEquals(1,rs.getProperty(className).size());	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(2,rs.getProperty(""STR"").size());"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(""STR"",rs.getProperty(""STR"").toString());"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertThat(rs.getProperty(""STR""),is(className));"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertThat(rs.getProperty(""STR""),is(1));"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(null,rs.getProperty(""STR""));"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(1,rs.getProperty(""STR"").length);"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertThat(rs.getProperty(""STR""),equalTo(""STR""));"	0
218	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertNull(rs.getProperty(""STR""));"	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	Stepresult=process.getNextStep();	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	Stepstep=process.getNextStep();	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),is(nullValue()));	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(null,process.getNextStep());	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),instanceOf(Step.class));	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),nullValue());	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep()).isNull();	0
219	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetStepAfterShutdown	assertNull(process.getNextStep());	assertThat(process.getNextStep(),equalTo(null));	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertEquals(newDots(),dots());	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	"assertEquals(""STR"",dots().toString());"	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertThat(dots(),deepEquals(newDots()));	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	"assertThat(dots().toString(),is(""STR""));"	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertEquals(dots(),dots());	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	"assertThat(dots().toString(),equalTo(""STR""));"	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertThat(dots(),equalTo(Dots.ONE));	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertThat(dots(),is(newDots()));	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertThat(dots(),equalTo(Dots.ZERO));	0
220	10	nidi3_graphviz-java	FillStyleTest#dots	"assertEquals(map(""STR"",""STR""),FillStyle.dots().values);"	assertNotNull(dots());	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.isRecognized());	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),equalTo(true));	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),is(true));	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),equalTo(false));	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertThat(simtiem.isRecognized(),is(false));	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.isRecognized());	0
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
221	10	PeterisP_morphology	MorphologyTest#simtiem	assertTrue(simtiem.isRecognized());	assertEquals(true,simtiem.isRecognized());	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=4;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=3;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=0;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=2;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	ModeInfomodeInfo=newModeInfo();	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=5;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=7;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=6;	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	ModeInfoinfo=newModeInfo();	0
222	10	jcodec_jcodec	ModeInfoTest#testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	c.leftModes[1]=8;	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.get(GitInfo.GIT_INFO_FILE).toString());	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertTrue(properties.containsKey(GitInfo.GIT_INFO_FILE));	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.toString());	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	"assertEquals(GitInfo.GIT_INFO_FILE,properties.getProperty(""STR"").toString());"	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertThat(properties).isNotNull();	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertThat(properties,is(notNullValue()));	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	"assertEquals(GitInfo.GIT_INFO_FILE,properties.get(""STR"").toString());"	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	assertEquals(GitInfo.GIT_INFO_FILE,properties.getProperty(GitInfo.GIT_INFO_FILE));	0
223	10	hazelcast_hazelcast-simulator	GitInfoTest#testLoadProperties	assertNotNull(properties);	"assertEquals(""STR"",properties.getProperty(GitInfo.GIT_INFO_FILE).toString());"	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(2));	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(4));	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(2,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(1,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(1,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(2,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertThat(keys.size(),is(1));	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(0,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(0,keys.size());	0
224	10	arnohaase_a-foundation	AListMapTest#testKeysValues	assertEquals(4,keys.size());	assertEquals(3,keys.size());	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),is(equalTo(""STR"")));"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),equalTo(""STR""));"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"config.set(""STR"",""STR"");"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR"")).isEqualTo(""STR"");"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),is(""STR""));"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"Stringvalue=config.getString(""STR"");"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"Stringactual=config.getString(""STR"");"	0
225	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"Stringresult=config.getString(""STR"");"	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertThat(m,instanceOf(ThreadCountMetronome.class));	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertThat(m).isNotNull();	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(10,m.getThreadCount());	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	"assertEquals(""STR"",m.getMetronomeClass().getName());"	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	"assertEquals(""STR"",m.getMetronomeClass().getName());"	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofMasterMetronome);	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofThreadCountMetronome);	0
226	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(10,m.getThreadCount());	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertThat(pid,is(notNullValue()));	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNull(pid);	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNull(pid);	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null);	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertThat(pid,is(nullValue()));	0
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
227	10	hazelcast_hazelcast-simulator	NativeUtilsTest#testGetPidStringOrNull	assertNotNull(pid);	assertEquals(1,pid);	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>actualA=MapUtil.mergeMaps(mapA,mapB);	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	"Map<String,String>expectedA2=createMap(""STR"",""STR"",""STR"",""STR"",""STR"");"	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>mergedA=MapUtil.mergeMaps(mapA,mapB);	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	"Map<String,String>expectedA2=createMap(""STR"",""STR"",""STR"",""STR"");"	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>actual=MapUtil.mergeMaps(mapA,mapB);	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	"Map<String,String>expectedC=createMap(""STR"",""STR"",""STR"",""STR"",""STR"");"	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	"Map<String,String>expectedC=createMap(""STR"",""STR"",""STR"",""STR"");"	0
228	10	fabric8io_fabric8-maven-plugin	MapUtilTest#testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	Map<String,String>result=MapUtil.mergeMaps(mapA,mapB);	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	array.add(1);	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(1));	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),is(1));	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(1));	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),greaterThan(0));	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	array.set(0,1);	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertThat(array.add(1),lessThan(0));	0
229	10	orientechnologies_orientdb	CASObjectArrayTest#testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(0));	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
230	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testOrderByDesc	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(null));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),is(false));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(null));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),is(true));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(false,compositeKey.equals(null));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey.equals(null),equalTo(false));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(newObject()));	0
231	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNull	assertFalse(compositeKey.equals(null));	assertThat(compositeKey,equalTo(null));	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertEquals(prop.getName(),""STR"");"	1
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertEquals(prop.getName(),""STR"");"	1
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertThat(prop.getName(),is(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertThat(prop.getName(),equalTo(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertTrue(prop.getName().equals(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertThat(prop.getName(),is(equalTo(""STR"")));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertTrue(prop.getName().equals(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertTrue(prop.getName().contains(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	"assertTrue(prop.getName().startsWith(""STR""));"	0
232	10	orientechnologies_orientdb	OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	System.out.println(prop.getName());	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.toString());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.getCode());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.getStatusCode());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	"assertEquals(""STR"",response.toString());"	0
233	10	Yubico_yubico-java-client	YubicoClientTest#testReplayedOTP	assertNotNull(response);	assertThat(response).isNotNull();	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parse(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfile(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.simple(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.load(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.loadProcessorConfig(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.read(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	"ProcessorConfigconfig=ProfileUtil.parseProfile(is,""STR"");"	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.process(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.parseProfileFile(is);	0
234	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#simple	assertNotNull(is);	ProcessorConfigconfig=ProfileUtil.readProfile(is);	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==1);	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertThat(panel.getTurtleCount()).isEqualTo(1);	0
235	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	"map.put(""STR"",""STR"");"	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isDirty());	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	"map.remove(""STR"");"	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	"map.remove(""STR"",""STR"");"	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertThat(map.isDirty(),is(true));	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isDirty());	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertThat(map.isDirty(),is(false));	0
236	10	orientechnologies_orientdb	TrackedMapTest#testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.isDirty());	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	"expectedDockerfileLines.add(""STR"");"	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
237	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,util.getDockerfileLines(dockerfileLines));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	1
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]result=MkvBlock.muxXiphLacing(_in);	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]expected=MkvBlock.muxXiphLacing(_in);	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MKVBlock.muxXiphLacing(_in));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255,120,0}));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255}));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630}));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]out=MkvBlock.muxXiphLacing(_in);	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(newint[]{187,630,255,120}));	0
238	10	jcodec_jcodec	MkvBlockTest#testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	byte[]output=MkvBlock.muxXiphLacing(_in);	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(1,rootAtoms.size());	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(1,rootAtoms.size());	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(0,rootAtoms.size());	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertEquals(0,rootAtoms.size());	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()==1);	0
239	10	jcodec_jcodec	SegmentTypeBoxTest#testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()==2);	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	"db.command(newOCommandSQL(""STR"")).execute();"	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(2,result.size());	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result,hasItem(prop));	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result.size(),is(1));	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(2,result.size());	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	ODocumentdocument=result.get(0);	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertThat(result.size(),is(2));	0
240	10	orientechnologies_orientdb	SaveLinkedTypeAnyTest#testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.size()>0);	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(InstructorActor.class));	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,is(expected));	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(Instructor.class));	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertEquals(expected.getName(),actual.getName());	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertThat(actual,instanceOf(Agent.class));	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
241	10	adlnet_jxapi	ContextTest#testSetInstructor	assertNotNull(actual);	assertNotSame(expected,actual);	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(true));	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(true));	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),equalTo(false));	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertThat(austrumlatvija.isRecognized(),is(false));	0
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
242	10	PeterisP_morphology	MorphologyTest#izskanjas	assertTrue(austrumlatvija.isRecognized());	Assertions.assertTrue(austrumlatvija.isRecognized());	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	"assertEquals(""STR"",multiInterestUserProcessor.interest());"	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(1,userProcessors.size());	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	"assertEquals(""STR"",multiInterestUserProcessor.interest());"	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor);	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	"assertThat(multiInterestUserProcessor.interest(),is(""STR""));"	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(multiInterestUserProcessor.interest(),userProcessors.get(multiInterestUserProcessor.interest()));	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	"assertThat(multiInterestUserProcessor.interest(),equalTo(""STR""));"	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor.interest());	0
243	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(1,userProcessors.get(multiInterestUserProcessor.interest()).size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(2,result.size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(2,result.size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertThat(result.size(),is(1));	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(3,result.size());	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertThat(result,hasItem(c0));	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
244	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()==1);	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(3));	0
245	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertEquals(2,cm.count(""STR""));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(1));"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	"assertTrue(cm.count(""STR"")==1);"	0
246	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher,lookingAt());	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher,is(true));	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(true));"	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(true));	0
247	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAtPrefix	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(false));	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").setVersion(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.JSON).exec());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").setVersion(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.JSON).exec());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"finalORecordrecord=read(""STR""+getDatabaseName()+""STR"");"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=read(""STR""+getDatabaseName()+""STR"");"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").version(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT.JSON).exec());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").setVersion(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT_JSON).exec());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").setVersion(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT_JSON).exec());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").getVersion(),1);"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").setVersion(1),get(""STR""+getDatabaseName()+""STR"").getVersion());"	0
248	10	orientechnologies_orientdb	HttpIndexTest#updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(update(""STR""+getDatabaseName()+""STR"").version(1),get(""STR""+getDatabaseName()+""STR"").payload(""STR"",CONTENT_JSON).exec());"	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrame();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrames();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFault();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf12=mpeges.getFrame();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getPictureHeader();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrames()[0];	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFack();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFrame();	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getPictureHeader(frame1);	0
249	10	jcodec_jcodec	MPEGESTest#testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	Packetf2=mpeges.getFramedPacket();	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	1
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertTrue(StringUtils.isNonZero(""STR""));"	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertTrue(StringUtils.isNonZero(null));	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertThat(StringUtils.isNonZero(null),is(false));	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertThat(StringUtils.isNonZero(""STR""),is(false));"	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	1
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
250	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertThat(StringUtils.isNonZero(""STR""),equalTo(false));"	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(0,result.getClusterIdByName(clusterName));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(1));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(-1,result.getClusterIdByName(clusterName));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(1));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(0));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(0));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(-1));	0
251	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getClusterIdByName(clusterName)>0);	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	id=prop.getId();	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	Integerid2=prop.getId();	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	"oClass.dropProperty(""STR"");"	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(id==prop.getId());	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	intid2=prop.getId();	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	Integerid=prop.getId();	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	id=prop.getId()+1;	0
252	10	orientechnologies_orientdb	OClassImplTest#testCreatePropertyIdKeep	assertEquals(id,prop.getId());	prop.setId(id);	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,prioritizer.getPrioritizedRoutes().size());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertFalse(prioritizer.getPrioritizedRoutes().contains(""STR""));"	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()==0);	0
253	10	NanoHttpd_nanohttpd	TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(notNullValue()));	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertThat(response,is(not(notNullValue())));	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNotNull(response);	1
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getMessage());"	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertNull(response);	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	assertEquals(0,response.getMaxRetries());	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getCode());"	0
254	10	Yubico_yubico-java-client	YubicoClientTest#testBadOTP	assertNotNull(response);	"assertEquals(""STR"",response.getStatusCode());"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<Object>()->{
},null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<String>()->{
},null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(emptyList(),null));"	0
255	10	redraiment_jactiverecord	SeqTest#testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,is(equalTo(expected)));	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,is(expected));	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertNotSame(expected,actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertEquals(expected.getMbox(),actual);	0
256	10	adlnet_jxapi	ActivityStateTest#testSetAgent	assertNotNull(actual);	assertTrue(actualinstanceofAgent);	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	ODocumentprevious=execute.iterator().next();	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	ODocumentprev=execute.iterator().next();	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	ORecordprevious=execute.iterator().next();	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	ODocumentthird=execute.iterator().next();	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),is(equalTo(""STR"")));"	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),is(equalTo(newInteger(1))));"	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"ORecordprevious=next.field(""STR"");"	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertEquals(1,next.field(""STR"").size());"	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),equalTo(newInteger(1)));"	0
257	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertEquals(""STR"",next.field(""STR""));"	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,instanceOf(CachedExtractor.class));	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(instanceOf(CachedExtractor.class)));	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor).isNotNull();	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	"assertThat(""STR"",extractor,instanceOf(CachedExtractor.class));"	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertThat(extractor,is(notNullValue()));	0
258	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(1,grouped.size());	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(2,grouped.size());	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(""STR"",grouped.get(1).toString());"	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(0,grouped.size());	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(""STR"",grouped.get(0).toString());"	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(grouped.isEmpty());	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(""STR"",grouped.get(1).get(0).toString());"	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(Arrays.asList(""STR"",""STR""),grouped.get(1));"	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(""STR"",grouped.get(0).get(0).toString());"	0
259	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(1,grouped.size());	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(1,routePrioritizer.getPrioritizedRoutes().size());	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().size()==0);	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
260	10	NanoHttpd_nanohttpd	TestNanolets#testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	"assertTrue(routePrioritizer.getPrioritizedRoutes().contains(newUriResource(""STR"",100,null)));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
261	10	adlnet_jxapi	VerbTest#testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	"a.setAttachments(newHashMap<String,AttachmentAndType>()->{
});"	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	"a.setAttachments(Collections.singletonMap(""STR"",newAttachmentAndType(attachment,type)));"	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	assertEquals(1,a.getAttachments().size());	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	"a.setAttachments(Collections.singletonMap(""STR"",attachment));"	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	AttachmentAndTypeatt=newAttachmentAndType(attachment,type);	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	"a.setAttachments(Collections.singletonMap(""STR"",newAttachmentAndType(attachment,TYPE)));"	0
262	10	adlnet_jxapi	AttachmentResultTest#testSetAttachments	assertNotNull(a);	"assertEquals(""STR"",a.getResponseMessage());"	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	"assertThat(result,is(equalTo(""STR"")));"	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerExtractor(OETLStubRandomExtractor.class);	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class);	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLStubRandomExtractor.class);	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	"assertThat(result,equalTo(""STR""));"	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(factory).registerLoader(OETLStubLoader.class).registerExtractor(OETLRandomExtractor.class);	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	verify(processor).toLowerCase();	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	"log.info(""STR"");"	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	"assertEquals(""STR"",newString[]{""STR"",""STR""});"	0
263	10	orientechnologies_orientdb	OETLFieldTransformerTest#testToLowerCase	assertEquals(1,getResult().size());	"assertEquals(""STR"",result().toString());"	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,is(notNullValue()));	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	"assertEquals(clazz,db.createEdgeClass(""STR""));"	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	"assertEquals(clazz,db.createEdgeClass(""STR""));"	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	"assertEquals(clazz.getName(),""STR"");"	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,instanceOf(OClass.class));	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,is(instanceOf(OClass.class)));	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	assertThat(clazz,instanceOf(EdgeClass.class));	0
264	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testCreateEdgeClass	assertNotNull(clazz);	"assertEquals(clazz,db.getEdgeClass(""STR""));"	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
265	10	PeterisP_morphology	MorphologyTest#jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,is(notNullValue()));	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,notNullValue());	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(VerifyMethod.class));	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	"assertThat(method,equalTo(Verify.class.getMethod(""STR"")));"	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(VerifyFilter.class));	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,nullValue());	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method,not(nullValue()));	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertThat(method).isNotNull();	0
266	10	hazelcast_hazelcast-simulator	AnnotationFilterTest#testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertThat(performance,is(""STR""));"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertEquals(""STR"",performance);"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertThat(performance).isEqualTo(""STR"");"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertEquals(""STR"",performance);"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertThat(performance,containsString(""STR""));"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertTrue(performance.contains(""STR""));"	1
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"System.out.println(""STR""+performance);"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertThat(performance,is(equalTo(""STR"")));"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	"assertTrue(performance.matches(""STR""));"	0
267	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	System.out.println(performance);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,durationLimit);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,duration);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(NANOSECONDS,durationLimit);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(SECONDS,durationLimit);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,durationLimit-duration);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,duration-durationLimit);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,duration/durationLimit);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(SECONDS,duration);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(NANOSECONDS,duration);	0
268	10	hazelcast_hazelcast-simulator	CommonUtils_SleepTest#testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	sleepTimeUnit(MILLISECONDS,durationLimit+1);	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	assertNull(propertyIndex.createValue(newObject[]{null}));	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertNull(propertyIndex.createValue(newObject[]{""STR""}));"	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	assertNull(propertyIndex.createValue(newObject[0]));	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	assertNull(propertyIndex.createValue(newObject[]{1,2}));	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	assertNull(propertyIndex.createValue(newObject[]{1}));	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertNull(propertyIndex.createValue(newObject[]{""STR"",""STR""}));"	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertNull(propertyIndex.createValue(newString[]{""STR"",""STR""}));"	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertNull(propertyIndex.createValue(newString[]{""STR""}));"	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertThat(propertyIndex.createValue(newObject[]{""STR""}),is(nullValue()));"	0
269	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	assertThat(propertyIndex.createValue(newObject[]{1,2}),is(nullValue()));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-1L));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,EbmlSignedLength(-1L));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,EbmlSignedLength(-1L));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(0,EbmlSignedLength(-1L));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-1));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x00FFFFFFFFFFFFL));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-0x00FFFFFFFFFFFFL));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x1000000000000L));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,EbmlSignedLength(-0x00FFFFFFFFFFFFFFL));	0
270	10	jcodec_jcodec	EbmlSintTest#testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(9,EbmlSignedLength(-0x00FFFFFFFFFFFFFFL));	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"booleanremoved=handler.hasInitContainer(builder,""STR"");"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertTrue(handler.hasInitContainer(builder,""STR""));"	1
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(false));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),equalTo(false));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"builder.withNewMetadata().withName(""STR"").endMetadata();"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertThat(handler.hasInitContainer(builder,""STR""),is(true));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"builder.withInitContainers(Arrays.asList(""STR"",""STR""));"	0
271	10	fabric8io_fabric8-maven-plugin	InitContainerHandlerTest#removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"handler.addInitContainer(builder,""STR"");"	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertFalse(matcher.find());	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),is(true));"	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	booleanfound=matcher.find();	0
272	10	basis-technology-corp_tcl-regex-java	SmpTest#findCharClass	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),equalTo(true));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singletonList(""STR""),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.singletonList(""STR""),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR""),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(emptyList(),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR""),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<String>()->{
},""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<String>()->{
},""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>(),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
273	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>(),""STR""));"	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(2));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(1));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(5));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(3));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),equalTo(2));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(6));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(4));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),is(0));	0
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
274	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertThat(s.getActualCost(),equalTo(1));	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
275	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCell	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),is(16238L));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238L,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238L,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),equalTo(16238L));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(1,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(17238,OVarIntSerializer.readAsLong(bytes));	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	longvalue=OVarIntSerializer.readAsLong(bytes);	0
276	10	orientechnologies_orientdb	OVarIntSerializerTest#serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertThat(OVarIntSerializer.readAsLong(bytes),is(2L));	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"System.out.println(""STR"");"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(AppNanolets.class).toString());"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",handler.initParameter(AppNanolets.class).toString());"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(ConfigParam2.class).toString());"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(String.class));"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",handler.initParameter(AppNanolets.class).uri);"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(AppNanolets.class).uri);"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(AppNanolets.class).getPath());"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"Stringuri=""STR"";"	0
277	10	NanoHttpd_nanohttpd	TestNanolets#checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"").initParameter(AppNanolets.class).toUri());"	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	"assertEquals(""STR"",exception.getMessage());"	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause.getMessage(),exception.getMessage());	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	"assertEquals(""STR"",exception.getMessage());"	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertThat(exception,instanceOf(TestException.class));	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertThat(exception,instanceOf(RuntimeException.class));	0
278	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertThat(props,is(notNullValue()));	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(2,props.size());	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	"assertTrue(props.containsKey(""STR""));"	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	"assertEquals(""STR"",props.getProperty(""STR"").toString());"	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(1,props.size());	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	"assertEquals(""STR"",props.getProperty(""STR"").toString());"	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	assertThat(props).isNotNull();	0
279	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testMultipleProfilesParsing	assertTrue(props.size()>0);	"assertEquals(""STR"",props.toString());"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute();"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.command(newOCommandSQL(""STR"")).execute();"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OResult<String>result=db.query(""STR""+DB_NAME+""STR"");"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.query(""STR""+DB_NAME+""STR"");"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=db.command(newOCommandSQL(""STR""));"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	List<String>friendList=newArrayList<String>();	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementmatch=db.query(""STR""+DB_NAME+""STR"");"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=newOMatchStatement(""STR"");"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"OMatchStatementexecution=newOMatchStatement(""STR"",""STR"");"	0
280	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"db.command(newOCommandSQL(""STR"")).execute(true);"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",environment.getProperty(""STR""));"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"verify(environment).setProperty(""STR"",""STR"");"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).getBuildNumber();	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertThat(environment.getProperty(""STR""),equalTo(""STR""));"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertThat(environment.getProperty(""STR""),is(equalTo(""STR"")));"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).getSelected();	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).getEnvironment();	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	verify(serviceMock,times(1)).isEnabled();	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertThat(environment.getProperty(""STR""),is(""STR""));"	0
281	10	trautonen_coveralls-maven-plugin	EnvironmentTest#testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"verify(environment).getProperty(""STR"");"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(1.23d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.0d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100.5d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(100d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(1.23));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(0.0001d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",moneyToStrPER100.convert(0.01d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",GBP_STR_PER100.convert(100.0d));"	0
282	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	"assertEquals(""STR"",GBP_STR_PER100.convert(100.5d));"	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),is(true));	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.isEmpty());	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),is(false));	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.isEmpty());	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),equalTo(true));	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats.isEmpty(),equalTo(false));	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	"assertThat(""STR"",performanceStats.isEmpty(),is(true));"	0
283	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testGet	assertFalse(performanceStats.isEmpty());	assertThat(performanceStats,is(notNullValue()));	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.STRING,doc.fieldType(""STR""));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	1
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertNull(doc.fieldType(""STR""));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.STRING,doc.fieldType(""STR""));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertThat(doc.fieldType(""STR""),is(OType.STRING));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.BINARY,doc.fieldType(""STR""));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertThat(doc.fieldType(""STR""),is(OType.INTEGER));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertThat(doc.fieldType(""STR""),is(equalTo(OType.STRING)));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertThat(doc.fieldType(""STR""),is(equalTo(OType.INTEGER)));"	0
284	10	orientechnologies_orientdb	ODocumentTest#testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertThat(doc.fieldType(""STR""),equalTo(OType.STRING));"	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(0,1).toString());"	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(1,2).toString());"	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",newSimulatorAddress(1,0).toString());"	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	finalSimulatorAddressaddress=newSimulatorAddress(0,1);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	finalSimulatorAddressaddress=newSimulatorAddress(1,2);	0
285	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),equalTo(true));	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),is(true));	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),equalTo(false));	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.isRecognized());	0
286	10	PeterisP_morphology	MorphologyTest#reziduāļi	assertTrue(m.isRecognized());	assertThat(m.isRecognized(),is(false));	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	"assertThat(methodList,hasItem(Subclass.class.getMethod(""STR"")));"	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(2,methodList.size());	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	"assertThat(methodList,hasItem(Subclass.class.getDeclaredMethod(""STR"")));"	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList.size(),is(1));	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasSize(1));	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList.size(),is(2));	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList).hasSize(1);	0
287	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertThat(methodList,hasItem(Subclass.class));	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertThat(routePrioritizer.getPrioritizedRoutes(),hasItem(null));	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	routePrioritizer.add(null);	0
288	10	NanoHttpd_nanohttpd	TestNanolets#testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().contains(null));	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(2,formas.size());	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas.size(),is(1));	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas.size(),is(2));	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>1);	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	"assertThat(formas,hasItem(newWordform(""STR"")));"	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==2);	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==1);	0
289	10	PeterisP_morphology	MorphologyTest#apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==3);	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()==1);	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>0);	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().count()>1);	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,result.stream().count());	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(oneMore));	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().count(),is(1));	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
290	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertThat(result.stream(),hasSize(1));	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialized());"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR"",label.serialized());"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertThat(newSimpleLabel(""STR"").serialized(),is(""STR""));"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"",""STR"").serialized());"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR"",SimpleLabel.raw(""STR"").serialized());"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR"",newLabel(""STR"").serialized());"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"SimpleLabellabel=newSimpleLabel(""STR"");"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertThat(newSimpleLabel(""STR"").serialized()).isEqualTo(""STR"");"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertThat(newSimpleLabel(""STR"",""STR"").serialized(),is(""STR""));"	0
291	10	nidi3_graphviz-java	LabelTest#raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"SimpleLabellabel=newSimpleLabel(""STR"",""STR"");"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertTrue(importer.getMetadata().getSchema().existsClass(""STR""));"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	dbImp.drop();	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertFalse(importer.getMetadata().getSchema().existsClass(""STR""));"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	1
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(importer.getMetadata().getSchema().existsClass(""STR""),is(true));"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"dbImp=newODatabaseDocumentTx(""STR""+ODatabaseImportTest.class.getSimpleName()+""STR"");"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertThat(importer.getMetadata().getSchema().existsClass(""STR""),is(false));"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertTrue(importer.getMetadata().getSchema().existsClass(""STR""));"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"db=newODatabaseDocumentTx(""STR""+ODatabaseImportTest.class.getSimpleName()+""STR"");"	0
292	10	orientechnologies_orientdb	ODatabaseImportTest#exportImportExcludeClusters	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertFalse(importer.getMetadata().getSchema().existsClass(""STR""));"	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(2,conns.size());	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.isEmpty());	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(0,conns.size());	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertEquals(2,conns.size());	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertThat(conns.size(),is(1));	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()>0);	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertThat(conns).hasSize(1);	0
293	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()==1);	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertThat(turn(""STR"",""STR"")).isEqualTo(""STR"");"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertThat(turn(""STR"",""STR"",""STR"")).isEqualTo(""STR"");"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertThat(turn(""STR""),equalTo(""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertThat(turn(""STR""),is(""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertThat(turn(""STR"",""STR"",""STR"",""STR"")).isEqualTo(""STR"");"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",turn(""STR"",""STR""));"	0
294	10	nidi3_graphviz-java	RecordsTest#turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Turn.turn(""STR"",""STR""));"	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),is(""STR""));"	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),equalTo(""STR""));"	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),containsString(""STR""));"	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),is(equalTo(""STR"")));"	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	assertEquals(1,exception.getMessage().length());	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	assertEquals(1,exception.getCause().getMessage().length());	0
295	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.toString());"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,IndexHandler.class);"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,NotImplementedHandler.class);"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setRouter(routerNanoHttpd);	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,indexHandler);"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"assertEquals(""STR"",routerNanoHttpd.toString());"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",1,IndexHandler.class);"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setHandler(notFoundHandler);	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,newIndexHandler());"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	"router.addRoute(""STR"",Integer.MAX_VALUE/2,notImplementedHandler.getClass());"	0
296	10	NanoHttpd_nanohttpd	TestNanolets#testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	router.setNotImplemented(notFoundHandler);	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,is(notNullValue()));	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(1,result.size());	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.size());	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,hasItem(0));	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(3,result.size());	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.next(),is(notNullValue()));	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(4,result.size());	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.size(),is(2));	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result.size(),is(1));	0
297	10	orientechnologies_orientdb	OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertThat(result,hasSize(1));	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	document=compositeKeyTwo.toDocument();	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getFieldValue(""STR""),is(nullValue()));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getField(""STR""),is(nullValue()));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.field(""STR""),is(nullValue()));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getFieldValue(""STR""),is(1));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getField(""STR""),is(equalTo(1)));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getFieldValue(""STR""),equalTo(1));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertThat(document.getField(""STR""),equalTo(1));"	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(1,compositeKeyTwo.getKey());	0
298	10	orientechnologies_orientdb	OCompositeKeyTest#testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertEquals(1,document.getField(""STR"").size());"	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertEquals(""STR"",s.get());"	1
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertEquals(""STR"",s.get());"	1
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertThat(s.get(),is(""STR""));"	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertThat(s.get(),equalTo(""STR""));"	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertThat(s.get(),is(equalTo(""STR"")));"	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	assertNull(s.get());	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	"assertTrue(s.get()==""STR"");"	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	assertNull(s.get());	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	assertTrue(s.get()instanceofString);	0
299	10	arnohaase_a-foundation	AOptionTest#testSome	"assertEquals(""STR"",s.get());"	assertThat(s.get(),is(1));	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),is(0));	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),equalTo(0));	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost()==0,is(false));	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()==0);	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),isZero());	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(0,s.getEstimatedCost());	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertThat(s.getEstimatedCost(),is(0L));	0
300	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(1,s.getEstimatedCost());	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	"cm.add(conn,""STR"");"	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(poolKey));	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(1);	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	intcount=cm.count(poolKey);	0
301	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(cm.count(poolKey)).isEqualTo(2);	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
302	10	orientechnologies_orientdb	TrackedListTest#testAddIndexNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(3,res.size());	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertThat(res).hasSize(2);	0
303	10	orientechnologies_orientdb	OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	1
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacterresult=charSerializer.deserialize(stream,0);	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(STRING,charSerializer.deserialize(stream,0).toString());	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT.charValue(),charSerializer.deserialize(stream,0));	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	1
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacteractual=charSerializer.deserialize(stream,0);	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT,charSerializer.deserialize(stream,1));	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(STRING,charSerializer.deserialize(stream,0).toString());	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	finalCharacterresult=charSerializer.deserialize(stream,1);	0
304	10	orientechnologies_orientdb	CharSerializerTest#testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(OBJECT.charValue(),charSerializer.deserialize(stream,1));	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v).isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getPersistentRID().isPersistent());	0
305	10	orientechnologies_orientdb	BlueprintsTest#testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertThat(graph.isPersistent(),is(true));	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(null,""STR""));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"MatcherassertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
306	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertEquals(false,Wildcards.matches(""STR"",""STR""));"	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.when(this.mockAccessConnection.batchQueryAttributes(this.createAttributeMapMatcher(this.resultAttributeMap))).thenReturn(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters}	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
307	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	Mockito.verify(this.mockAccessConnection).batchQueryAttributes(this.createAttributeMapMatcher(this.attributeSetters	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"ReflectionUtils.setFieldValue(this,setFieldTest.getField(),""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField(),""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"ReflectionUtils.setFieldValue(null,setFieldTest.getField(),""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"Fieldfield=ReflectionUtilsTest.getField(setFieldTest,""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"Fieldfield=ReflectionUtilsTest.class.getDeclaredField(""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField(""STR""),""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"ReflectionUtils.setFieldValue(this,setFieldTest.getField(""STR""),""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	Objectinstance=newObject();	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	"FieldsetFieldValue=ReflectionUtilsTest.getField(setFieldTest,""STR"");"	0
308	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testSetFieldValue	assertNull(setFieldTest.injectField);	ReflectionUtils.setFieldValue(newObject(),setFieldTest.getField(),1);	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes());"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetResource.toPath(),""STR"".getBytes());"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetDir.toPath(),""STR"".getBytes());"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"files.write(targetFile.toPath(),""STR"".getBytes());"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(StandardCharsets.US_ASCII));"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(UTF_8));"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.copy(targetFile.toPath(),""STR"".getBytes());"	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	Files.write(targetFile.toPath(),src.getBytes(StandardCharsets.UTF_8));	0
309	10	OpenLiberty_ci.common	DevUtilTest#testCopyFile	assertTrue(targetFile.exists());	"Files.write(targetFile.toPath(),""STR"".getBytes(true));"	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(1,collectionResult.size());	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),is(1));	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),is(2));	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),equalTo(1));	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(0,collectionResult.size());	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult,hasItem(newOCompositeKey()));	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.isEmpty());	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.isEmpty());	0
310	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertThat(collectionResult.size(),equalTo(2));	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(expected,actual,is(equalTo(expected)));	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	"assertEquals(expected,""STR"",actual);"	0
311	10	1337joe_cubesensors-for-java	TestPressure#testToInHg	assertEquals(expected,actual);	"assertEquals(expected+""STR"",actual);"	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(file,job);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(f,job);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(job);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(f,job);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=mock(JsonWriter.class);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter(job,f);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	"JsonWriterwriter=createJsonWriter(job,""STR"");"	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter(f);	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=createJsonWriter();	0
312	10	trautonen_coveralls-maven-plugin	JsonWriterTest#testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	JsonWriterwriter=newJsonWriter();	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('a');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('b');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('c');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('z');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('e');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('d');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.size());	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	cm.subcolor('A');	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.size());	0
313	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(0,cm.size());	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertEquals(""STR"",result.get(""STR""));"	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertEquals(""STR"",result.get(""STR""));"	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertTrue(result.containsKey(""STR""));"	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	assertEquals(1,result.size());	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	assertEquals(1,result.size());	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertThat(result,hasItem(""STR"",""STR""));"	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	assertEquals(2,result.size());	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertTrue(result.containsKey(""STR""));"	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	assertThat(result).hasSize(1);	0
314	10	hazelcast_hazelcast-simulator	TagUtilsTest#parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertEquals(""STR"",result.get(""STR"")[0]);"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",newTravis(env).getBranch());"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",newTravis().getBranch());"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	Travistravis=newTravis(env);	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",newTravis(env).getBranch());"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"System.out.println(""STR"");"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",newTravis().getBranch());"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	Travistravis=newTravis();	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	finalTravistravis=newTravis(env);	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",Travis.parse(""STR"").getBranch());"	0
315	10	trautonen_coveralls-maven-plugin	TravisTest#testGetBranch	"assertEquals(""STR"",newTravis(env()).getBranch());"	"assertEquals(""STR"",newTravis(null).getBranch());"	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,to.getClusterId());	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(1,to.getClusterId());	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(0,to.getClusterId());	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	"assertEquals(""STR"",to.getClusterId());"	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(101,to.getClusterId());	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertThat(to.getClusterId(),is(100));	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>0);	0
316	10	orientechnologies_orientdb	OClusterRepairInfoTaskTest#testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()==100);	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,is(nullValue()));	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,instanceOf(OCompositeKey.class));	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,is(nullValue(12)));	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	"assertThat(""STR"",result,is(nullValue()));"	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	"assertThat(result,is(nullValue(""STR"")));"	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertThat(result,nullValue());	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNull(result);	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	"assertThat(""STR"",result,is(nullValue(12)));"	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	"assertThat(result,equalTo(newOCompositeKey(""STR"",12)));"	0
317	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNull(result);	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame,hasItem(curframe));	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame).hasSize(1);	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(2,createdFrame.size());	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame,hasItems(curframe));	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.size()>0);	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertEquals(0,createdFrame.size());	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame).hasSize(2);	0
318	10	TooTallNate_Java-WebSocket	Draft_6455Test#createFramesText	assertEquals(1,createdFrame.size());	assertThat(createdFrame.size(),is(1));	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"ODocumentv2=database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"finalODocumentv2=database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"ODocumentv12=database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"assertEquals(""STR"",v1.getClassName());"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"v1=database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"Stringv2=database.command(newOCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"ODocumentv2=database.command(newOCommandSQL(""STR"",true)).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"ODocumentv2=database.command(newCommandSQL(""STR"")).execute();"	0
319	10	orientechnologies_orientdb	SQLCreateVertexAndEdgeTest#testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	StringclassName=v1.getClassName();	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
320	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.NOT_FOUND));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(IStatus.NOT_FOUND,handshakeResponse.getStatus());	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(500,handshakeResponse.getStatus());	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(500));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(IStatus.NOT_FOUND));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(HttpServletResponse.SC_NOT_FOUND));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.BAD_REQUEST));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(HttpStatusCode.NOT_FOUND));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(Status.UNAUTHORIZED));	0
321	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertThat(handshakeResponse.getStatus(),is(404));	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	"expectedDockerfileLines.add(""STR"");"	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
322	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,util.getDockerfileLines(dockerfileLines));	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.workerCount();	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount();	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR"")));"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress);	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(""STR"",""STR""));"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR""),newWorkerParametersList(agentAddress,2,""STR"")));"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(""STR"");"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerData(""STR""),newWorkerData(""STR"")));"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"registry.getWorkers(Arrays.asList(newWorkerParametersList(agentAddress,2,""STR""),newWorkerParametersList(agentAddress,3,""STR"")));"	0
323	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress,2);	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").size());"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),equalTo(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(null,item.getProperty(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR"").toString());"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(emb,item.getProperty(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertNull(item.getProperty(""STR""));"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").intValue());"	0
324	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertTrue(item.getProperty(""STR"")instanceofMap);"	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(""STR""));"	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,is(equalTo(""STR"")));"	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult,equalTo(""STR""));"	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	"assertThat(filterResult).isEqualTo(""STR"");"	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	assertThat(filterResult,nullValue());	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	assertTrue(filterResult!=null);	0
325	10	DigitalPebble_storm-crawler	HostURLFilterTest#testWithinDomain	"assertEquals(""STR"",filterResult);"	assertNull(filterResult);	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	1
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertThat(Seq.join(null,""STR""),equalTo(""STR""));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	1
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertThat(Seq.join(null,""STR""),is(""STR""));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(null,Seq.join(null,""STR""));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,null));"	0
326	10	redraiment_jactiverecord	SeqTest#testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertNull(Seq.join(null,""STR""));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertThat(index.get(""STR""),is(nullValue()));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(null,index.get(""STR""));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(person1.get(""STR""),person2.get(""STR""));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(person1,index.get(""STR""));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertNull(index.get(""STR""));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(""STR"",index.get(1).getName());"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertThat(index.get(""STR""),is(person1));"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(""STR"",index.get(1).name);"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(""STR"",index.get(person1.getId()).toString());"	0
327	10	orientechnologies_orientdb	DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(""STR"",index.get(person1.id()).toString());"	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a.length);	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,2,3)));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2}));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(a,Seq.array(0,2,3));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,3)));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(newint[]{1,2,3}));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertThat(a,equalTo(Seq.array(0,1,2)));	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),5,4);	0
328	10	redraiment_jactiverecord	SeqTest#testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	Seq.assignAt(a,Seq.array(0,2,3),-1,4);	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(result.size(),1);	1
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(2,result.size());	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result,hasItem(1));	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertEquals(3,result.size());	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result.size(),is(1));	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertThat(result.size(),is(2));	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	"assertThat(result,hasItem(""STR""));"	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
329	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatches	assertEquals(result.size(),1);	assertTrue(result.size()==1);	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(OType.STRING,simpleKeyIndexDefinition.getTypes());	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(newOType[]{OType.STRING},simpleKeyIndexDefinition.getTypes());	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(OType.INTEGER,simpleKeyIndexDefinition.getTypes());	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(OType.STRING));	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),hasItem(OType.STRING));	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),is(equalTo(OType.STRING))));	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(newOType[]{OType.STRING}));	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.STRING,simpleKeyIndexDefinition.getTypes()[0]);	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	OType[]types=simpleKeyIndexDefinition.getTypes();	0
330	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertThat(simpleKeyIndexDefinition.getTypes(),equalTo(newOType[]{OType.INTEGER}));	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(false));	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(true));	0
331	10	orientechnologies_orientdb	ODocumentTest#testNoDirtySameBytes	assertFalse(doc.isDirty());	"doc.field(""STR"",bytes);"	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	"assertTrue(""STR"",v��rds.isRecognized());"	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(true));	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(true));	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(false));	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(false));	0
332	10	PeterisP_morphology	MorphologyTest#vajadzības_minēšana	assertTrue(vārds.isRecognized());	"assertFalse(""STR"",v��rds.isRecognized());"	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertEquals(0,results.size());	0
333	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()==1);	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"env.put(""STR"",""STR"");"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",newAbstractServiceSetup(env).getProperty(""STR""));"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",newAbstractServiceSetup(env).getProperty(""STR""));"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	AbstractServiceSetupsetup=newTestSetup(env);	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"Stringvalue=newAbstractServiceSetup(env).getProperty(""STR"");"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	AbstractServiceSetupsetup=newMockAbstractServiceSetup(env);	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",newAbstractServiceSetup(null,env).getProperty(""STR""));"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	finalAbstractServiceSetupsetup=newTestSetup(env);	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"AbstractServiceSetupsetup=newTestSetup(env,""STR"");"	0
334	10	trautonen_coveralls-maven-plugin	AbstractServiceSetupTest#testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",newAbstractServiceSetup().getProperty(""STR""));"	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(expected.toString(),actual);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(actual,expected);	0
335	10	adlnet_jxapi	StatementReferenceTest#testSetId	assertNotNull(actual);	assertEquals(ID,actual);	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().count());	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().count());	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	"assertThat(result.stream().collect(Collectors.toList()),hasItem(""STR""));"	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(2));	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().count()==2);	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),is(not(empty())));	0
336	10	orientechnologies_orientdb	OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),is(empty()));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(notNullValue()));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,notNullValue());	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(VoidMethod.class));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(VoidMethodWithoutArgs.class));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(Void.class));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(instanceOf(VoidMethod.class)));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method).isNotNull();	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(instanceOf(VoidMethodWithoutArgs.class)));	0
337	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,nullValue());	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	"assertThat(results,hasItem(""STR""));"	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(6,results.size());	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
338	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(factory.getJmxMBeanConnectionFactory(),equalTo(this.mockJmxMbeanConnectorFactory));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),instanceOf(JMXMBeanConnectionFactory.class));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertSame(this.mockJmxMbeanConnectorFactory,factory.getJmxMBeanConnectionFactory());	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),is(nullValue()));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),equalTo(this.mockJmxMbeanConnectorFactory));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(this.factory.getJmxMBeanConnectionFactory(),is(equalTo(this.mockJmxMbeanConnectorFactory)));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(this.mockJmxMbeanConnectorFactory,factory.getJmxMBeanConnectionFactory());	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertThat(factory.getJmxMBeanConnectionFactory(),instanceOf(JMXMBeanConnectionFactory.class));	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNull(this.factory.getJmxMBeanConnectionFactory());	0
339	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	this.factory.setJmxMBeanConnectionFactory(this.mockJmxMbeanConnectorFactory);	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(""STR"",grouped.get(0).toString());"	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(Arrays.asList(""STR"",""STR""),grouped.keySet());"	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(""STR"",grouped.get(1).toString());"	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(2,grouped.size());	1
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	"assertEquals(Arrays.asList(""STR"",""STR"",""STR""),grouped.keySet());"	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,grouped.size());	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(grouped.isEmpty());	0
340	10	arnohaase_a-foundation	ACollectionHelperTest#testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,grouped.size());	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(-10.5D));	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,equalTo(-10.5D));	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	"assertThat(""STR"",result,is(-10.5D));"	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	"assertThat(""STR"",result,equalTo(-10.5D));"	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(-10.5d));	0
341	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testNegativeDouble	assertTrue(resultinstanceofDouble);	assertThat(result,equalTo(-10.5d));	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getOpcode(),Opcode.CONTINUOUS);	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS_FRAME,frame.getOpcode());	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getType());	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS_FRAME,frame.getType());	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getOpcode(),Opcode.EXTENDED);	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getType(),Type.EXTENDED);	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getPayloadData(),newbyte[]{0x01,0x02});	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	"assertEquals(""STR"",frame.getPayloadData().get(0).getType());"	0
342	10	TooTallNate_Java-WebSocket	ContinuousFrameTest#testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(frame.getPayloadData(),newbyte[]{1,2,3});	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(5)));	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofInteger);	1
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofBoolean);	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	"assertThat(result,equalTo(""STR""));"	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(true));	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(1)));	0
343	10	orientechnologies_orientdb	OMathExpressionTest#testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	createClasses(db);	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"vertex=db.newVertex(""STR"");"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(1,loader.countClass(""STR""));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(2,loader.countClass(""STR""));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"OVertexvertex=db.newVertex(""STR"");"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(1,configurator.countClass(""STR""));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(0,loader.countClass(""STR""));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),is(2));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),is(1));"	0
344	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),equalTo(2));"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
345	10	redraiment_jactiverecord	TSqlBuilderTest#testPaging	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR""));"	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
346	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(3,qResult.size());	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(1));	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(2));	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	"assertThat(qResult,hasItem(""STR""));"	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==1);	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertThat(qResult).hasSize(1);	0
347	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==2);	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	"registry.addAgent(""STR"",""STR"");"	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(1,registry.agentCount());	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(2,registry.agentCount());	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	intcount=registry.agentCount();	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(1,registry.agentCount());	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(0,registry.agentCount());	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertThat(registry.agentCount(),is(2));	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(2,registry.agentCount());	0
348	10	hazelcast_hazelcast-simulator	RegistryTest#testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertThat(registry.agentCount(),equalTo(2));	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress);	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(0,registry.workerCount());	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),is(1));	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,parametersList);	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	"registry.removeWorker(agentAddress,""STR"");"	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),equalTo(1));	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,0);	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.removeWorker(agentAddress,1);	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	registry.addWorker(agentAddress);	0
349	10	hazelcast_hazelcast-simulator	RegistryTest#testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertThat(registry.workerCount(),is(2));	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertNull(activityState.getState());	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	activityState.setRegistration(REG_ID);	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	"assertTrue(""STR"",activityState.getState()instanceofJsonObject);"	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertTrue(activityState.getState()instanceofJsonObject);	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertEquals(activityState,activityState);	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	assertTrue(activityState.isRegistered(REG_ID));	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	"assertEquals(activityState.getState(),""STR"");"	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	"assertEquals(""STR"",activityState.getId());"	0
350	10	adlnet_jxapi	ActivityStateTest#testActivityState	assertNotNull(activityState);	"assertEquals(""STR"",activityState.getState().toString());"	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.report(exceptionFile);	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	ExceptionReporter.reportException(exceptionFile);	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertThat(exceptionFile,is(notNullValue()));	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	spawner.reportException(exceptionFile);	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	exceptionReporter.reportException(exceptionFile);	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	"ExceptionReporter.reportException(exceptionFile,""STR"");"	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	"ExceptionReporter.report(exceptionFile,""STR"");"	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	"ExceptionReporter.reportException(exceptionFile,newIOException(""STR""));"	0
351	10	hazelcast_hazelcast-simulator	ThreadSpawnerTest#testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	"ExceptionReporter.report(exceptionFile,newIOException(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",newString[]{""STR""},getMetadata().getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",newString[]{""STR""},metadata.getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",newString[]{""STR""},bolt.getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertArrayEquals(""STR"",newString[]{""STR""},bolt.getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertTrue(Arrays.equals(newString[]{""STR"",""STR""},getMetadata().getValues(""STR"")));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertArrayEquals(""STR"",newString[]{""STR""},metadata.getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertTrue(""STR"",Arrays.equals(newString[]{""STR""},getMetadata().getValues(""STR"")));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",newString[]{""STR"",""STR""},getMetadata().getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",newString[]{""STR"",""STR""},metadata.getValues(""STR""));"	0
352	10	DigitalPebble_storm-crawler	XPathFilterTest#testScriptExtraction	assertEquals(1,output.getEmitted().size());	"assertArrayEquals(newString[]{""STR""},bolt.getValues(""STR""));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertNotNull(newGithubLoader().fetchResource(""STR"",0));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertThat(newGithubLoader().fetchResource(""STR"",1234L),is(nullValue()));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertThat(newGithubLoader().fetchResource(""STR"",0L),is(nullValue()));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertThat(newGithubLoader().fetchResource(""STR"",-1),is(nullValue()));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertNull(newGithubLoader().fetchResource(""STR"",0));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertNotNull(newGithubLoader().fetchResource(""STR"",-1));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertThat(newGithubLoader().fetchResource(""STR"",-1L),is(nullValue()));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertNull(newGithubLoader().fetchResource(""STR"",-1));"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"InputStreamresource=newGithubLoader().fetchResource(""STR"",0);"	0
353	10	nidi3_raml-loader	GithubTest#publicGithubNotModified	"assertNull(GithubLoader.forPublic(USER,""STR"").fetchResource(""STR"",newDate(130,0,1).getTime()));"	"assertThat(newGithubLoader(client).fetchResource(""STR"",0),is(nullValue()));"	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasEntry(""STR"",""STR""));"	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,not(hasEntry(""STR"",""STR"")));"	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(1,convertedEnv.size());	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(2,convertedEnv.size());	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertTrue(convertedEnv.containsKey(""STR""));"	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(2);	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasItem(""STR""));"	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertEquals(env,convertedEnv);	0
354	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(1);	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	1
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	1
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertThat(CommUtil.toDBC(""STR""),is(equalTo(""STR"")));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertThat(CommUtil.toDBC(""STR""),equalTo(""STR""));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Strings=CommUtil.toDBC(""STR"");"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""+""STR""));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").contains(""STR""));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertTrue(CommUtil.toDBC(""STR"").equals(""STR""));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"assertEquals(""STR"",CommUtil.toDBC(""STR""+""STR""));"	0
355	10	rockagen_commons-lib	CommUtilTest#testBC	"assertEquals(""STR"",CommUtil.toDBC(""STR""));"	"Stringresult=CommUtil.toDBC(""STR"");"	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(3,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(1,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(2,p.getBlankIndex());	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(4));	0
356	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(7,p.getBlankIndex());	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertThat(actual,is(expected));	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
357	10	adlnet_jxapi	ActivityStateTest#testGetState	assertNotNull(actual);	assertNotEquals(expected,actual);	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertThat(actual,is(equalTo(Verb.createVerb(""STR""))));"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.attended())));	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertThat(actual,is(equalTo(Verb.attended(""STR""))));"	0
358	10	adlnet_jxapi	VerbsTest#testAttended	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",newJenkins().getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",newJenkins(env).getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",jenkins.getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",newJenkins().getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",newJenkins(env).getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertEquals(""STR"",jenkins.getName());"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	assertEquals(JENKINS_NAME,newJenkins().getName());	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	assertEquals(JENKINS_NAME,newJenkins(env).getName());	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	"assertThat(jenkins.getName(),is(""STR""));"	0
359	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetName	"assertEquals(""STR"",newJenkins(env()).getName());"	assertEquals(Jenkins.JENKINS_NAME,jenkins.getName());	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeyotherCompositeKey=newOCompositeKey();	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey.equals(anotherCompositeKey),is(false));	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertThat(compositeKey,not(equalTo(anotherCompositeKey)));	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(otherCompositeKey));	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	finalOCompositeKeytwoCompositeKey=newOCompositeKey();	0
360	10	orientechnologies_orientdb	OCompositeKeyTest#testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.class.getName()));"	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.toString());"	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props).isNotNull();	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.PROPERTY_NAME));"	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props,is(notNullValue()));	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertTrue(props.containsKey(""STR""));"	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertTrue(props.containsKey(SpringBootUtilTest.class.getProperty(""STR"")));"	0
361	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.class.getSimpleName()));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(null,""STR""));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"finalStringtext=""STR"";"	0
362	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertThat(Wildcards.matches(""STR"",""STR""),is(false));"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(""STR""));"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),equalTo(""STR""));"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_ID));	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(PROP_NAME));	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),is(nullValue()));	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertThat(idProperty.getName(),is(equalTo(""STR"")));"	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThat(idProperty.getName(),equalTo(PROP_ID));	0
363	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(idProperty.getName().equals(""STR""));"	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(parentClass));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(1,result.stream().count());	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream(),hasSize(1));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(1));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream(),hasItem(parentClass));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().count()>0);	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().count(),is(1));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasItem(childClass));	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().collect(Collectors.toList()).count()>0);	0
364	10	orientechnologies_orientdb	CheckClassTypeStepTest#shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertThat(result.stream().collect(Collectors.toList()),hasSize(2));	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	"assertThat(tokens,hasItem(newWord(""STR"")));"	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==1);	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertEquals(0,tokens.size());	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==2);	0
365	10	PeterisP_morphology	TokenizeTest#singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==3);	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	1
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	Stringresult=Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1);	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	1
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));"	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2));	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	assertEquals(value,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_3));	0
366	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getPropertyValueTest	"assertEquals(""STR"",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));"	Stringresult=Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_2);	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getType());	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	"frame.setPayload(""STR"");"	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getType(),Opcode.PONG);	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getOpcode(),Opcode.PONG);	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpCode());	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getPid());	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	frame.setPayload(newbyte[]{0x01,0x02,0x03});	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(0,frame.getPayloadLength());	0
367	10	TooTallNate_Java-WebSocket	PongFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	frame.setPayload(newbyte[]{0x01,0x02});	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),is(true));	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),equalTo(true));	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),equalTo(false));	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.isSolution(),is(false));	0
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
368	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#state_can_be_solution	assertTrue(s.isSolution());	assertThat(s.getSolution(),is(true));	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool).isNotNull();	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNull(pool);	1
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool,notNullValue());	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNull(pool);	1
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool).isNull();	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertNotNull(pool);	0
369	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGet	assertNull(pool);	assertThat(pool,nullValue());	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse(sample1,false);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent=parser.parse(sample1,true);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent1=parser.parse(sample1,false);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventevent1=parser.parse(sample1,true);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	parser.parse(sample1,false);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	parser.parse(sample1,true);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventexpected=parser.parse(sample1,false);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	"CommonEventevent=parser.parse(""STR"",false);"	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	CommonEventexpected=parser.parse(sample1,true);	0
370	10	fluenda_ParCEFone	CEFParserTest#validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	"CommonEventevent=parser.parse(""STR"",true);"	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,mock));	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock).registerLiveListener(10,newOLiveQueryClientListener(database,mock));	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,mock);	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,null));	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock).registerLiveListener(10,newOLiveQueryClientListener(database,null));	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,MockLiveListener.class);	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,MockLiveListener.class));	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).executeLiveQueryPush(request);	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,MockLiveListener.INSTANCE);	0
371	10	orientechnologies_orientdb	ORemoteLiveQueryPushTest#testLiveEvents	assertEquals(mock.countCreate,1);	verify(mock,times(1)).registerLiveListener(10,newOLiveQueryClientListener(database,MockLiveListener.INSTANCE));	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString,equalTo(expected));	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString).isEqualTo(expected);	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertThat(fromString,is(expected));	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertSame(expected,fromString);	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertSame(expected,fromString);	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertArrayEquals(expected,fromString);	0
372	10	jcodec_jcodec	ULTest#testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(3,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(0,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(1));	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(2));	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(4,extr.fields());	0
373	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.fields()==1);	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	IProtocolprotoocl2=protocol0.copyInstance();	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	IProtocolprotoocl2=protocol1.copyInstance();	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protoocl1);	1
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protoocl1);	1
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertSame(protocol0,protoocl1);	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1,is(protocol0));	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1).isSameAs(protocol0);	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertThat(protoocl1,instanceOf(Protocol.class));	0
374	10	TooTallNate_Java-WebSocket	ProtocolTest#testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protoocl1instanceofDraft_6455);	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR"",""STR"",""STR""));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR"",""STR""));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(Arrays.asList(""STR""));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create((Iterable<String>)Arrays.asList(""STR"",""STR"",""STR""));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList(""STR"",""STR"",""STR"")));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(newIterableOf<String>(Arrays.asList(""STR"",""STR"")));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(asList(""STR"",""STR"",""STR""));"	0
375	10	arnohaase_a-foundation	AListTest#testFromJavaUtil	assertEquals(l,l2);	"finalAList<String>l4=AList.create(Collections.singletonList(""STR""),Arrays.asList(""STR"",""STR"",""STR""));"	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
376	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertFalse(matcher.find());	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),is(true));"	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher,is(true));	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
377	10	basis-technology-corp_tcl-regex-java	MatcherTest#findPrefix	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),equalTo(true));"	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,1));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(m.readMBSkipFlag(cabac,SliceType.P,true,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,1));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(m.readMBSkipFlag(cabac,SliceType.P,false,false,0));	0
378	10	jcodec_jcodec	CABACTest#testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	booleanresult=cabac.readMBSkipFlag(m,SliceType.P,true,false,0);	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
379	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR""+""STR"",result);"	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=newDefaultRocketMqProducer();	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(RocketMqProducer.class);	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(TestRocketMqProducer.class);	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(""STR"");"	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)this.context.getBean(""STR"",RocketMqProducer.class);"	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)configuration.getProducer();	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=(DefaultRocketMqProducer)RocketMqConfiguration.getInstance().getProducer();	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultMQProducerproducer=(DefaultMQProducer)RocketMqAutoConfiguration.getInstance().getProducer();	0
380	10	rhwayfun_spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest#defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	DefaultRocketMqProducerproducer=getRocketMqProducer();	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertEquals(""STR"",text);"	1
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertTrue(text.contains(""STR""));"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertEquals(""STR"",text);"	1
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertThat(text).isEqualTo(""STR"");"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertTrue(text.contains(""STR""));"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertTrue(text.contains(""STR""));"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertThat(text,is(""STR""));"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	"assertTrue(text.matches(""STR""));"	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	assertEquals(content,text);	0
381	10	DigitalPebble_storm-crawler	TextExtractorTest#testExclusionCase	"assertEquals(""STR"",text);"	assertNotNull(text);	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Integer>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Object>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Integer>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<Object>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<String>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	ALista=newAList();	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.<String>empty().size());	0
382	10	arnohaase_a-foundation	AListTest#testNil	assertEquals(0,AList.nil().size());	assertEquals(0,AList.EMPTY.size());	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(0);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getPlaneData(0).length);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(2,out.getPlaneData(0).length);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]result=out.getPlaneData(0);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(0,out.getPlaneData(0).length);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]result=transform.getPlaneData(0);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]outData=out.getPlaneData(0);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(1);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	byte[]data=out.getPlaneData(3);	0
383	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0).length==4);	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	"assertThat(graph.edges(),hasItem(edge(""STR"",""STR"")));"	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertFalse(graph.edges().isEmpty());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	"assertFalse(graph.edges().contains(edge(""STR"",""STR"")));"	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertTrue(graph.edges().isEmpty());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertEquals(0,graph.edges().size());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertEquals(1,graph.edges().size());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertFalse(graph.edges().isEmpty());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertTrue(graph.edges().isEmpty());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertThat(graph.edges(),empty());	0
384	10	arnohaase_a-foundation	ADiGraphTest#testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertThat(graph.edges(),hasSize(1));	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_34));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_33));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(newBigDecimal(""STR"")));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23d));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_23));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_34));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(3.14d));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(Currency.EUR));"	0
385	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(EUR_RUSCustom));"	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(-1,c.getBlankIndex());	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(0,c.getBlankIndex());	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertThat(c.getBlankIndex(),is(4));	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(-1,c.getBlankIndex());	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(1,c.getBlankIndex());	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(3,c.getBlankIndex());	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertThat(c.getBlankIndex(),equalTo(4));	0
386	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(2,c.getBlankIndex());	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),is(""STR""));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR""+""STR"",m.markdown(""STR""));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),equalTo(""STR""));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),is(equalTo(""STR"")));"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"Strings=m.markdown(""STR"");"	0
387	10	myabc_markdownj	EdgeCases#testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"m.markdown(""STR"");"	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(notNullValue()));	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,is(nullValue()));	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	"assertThat(result,is(nullValue(""STR"")));"	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	"assertThat(""STR"",result,is(nullValue()));"	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	assertThat(result,nullValue());	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	"assertThat(""STR"",result,is(notNullValue()));"	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	"assertThat(result,is(equalTo(""STR"")));"	0
388	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter	assertNull(result);	"assertThat(result,is(notNullValue(""STR"")));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,is(""STR""));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertEquals(""STR"",filterResult);"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,is(equalTo(""STR"")));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	"assertFalse(filterResult.contains(""STR""));"	0
389	10	DigitalPebble_storm-crawler	MetadataFilterTest#testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(env).getName());"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral().getName());"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",env.getGeneral().getName());"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"System.out.println(""STR"");"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertNull(env.getGeneral(""STR"").getName());"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(null).getName());"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	assertNull(newGeneral(env).getName());	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"System.setProperty(CI_NAME,""STR"");"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"finalGeneralgeneral=newGeneral(""STR"");"	0
390	10	trautonen_coveralls-maven-plugin	GeneralTest#testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",newGeneral(env.getEnvironment()).getName());"	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	Inflaterinflater=deflateExtension.getInflater();	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(null,deflateExtension.getInflater());	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(null,deflateExtension.getInflater());	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	finalInflaterinflater=deflateExtension.getInflater();	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),instanceOf(Inflater.class));	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),is(nullValue()));	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertThat(deflateExtension.getInflater(),is(notNullValue()));	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNull(deflateExtension.getInflater());	0
391	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater()instanceofInflater);	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_34));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23d));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(EUR_RUS));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(3.14d));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_23));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_2_33));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(1.23));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_1_34));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(GBP_20));"	0
392	10	javadev_moneytostr-russian	MoneyToStrTest#checkEURRUS	"assertEquals(""STR"",moneyToStrEURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrEURRUS.convert(2.5d));"	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertTrue(nop��sts.isRecognized());	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertFalse(nop��sts.isRecognized());	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertThat(nop��sts.isRecognized(),is(true));	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertTrue(nop��sts.isRecognized());	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertThat(nop��sts.isRecognized(),equalTo(true));	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertFalse(nop��sts.isRecognized());	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertThat(nop��sts.isRecognized(),equalTo(false));	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	assertThat(nop��sts.isRecognized(),is(false));	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	Assertions.assertFalse(nop��sts.isRecognized());	0
393	10	PeterisP_morphology	MorphologyTest#ts	assertTrue(nopūsts.isRecognized());	Assertions.assertTrue(nop��sts.isRecognized());	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(this.mockLog,factory.getLog());	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertSame(this.mockLog,factory.getLog());	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertNull(this.factory.getLog());	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	this.factory.setLog(this.mockLog);	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(this.mockLog,factory.getLog());	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog()).isEqualTo(this.mockLog);	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog(),is(this.mockLog));	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(factory.getLog(),instanceOf(Logger.class));	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	finalLoggerlog=this.factory.getLog();	0
394	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	Mockito.verify(this.mockLog).setLevel(Level.WARN);	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(BUFFER));	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes(UTF_8))));"	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes(StandardCharsets.UTF_8))));"	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	"assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(""STR"")));"	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	"assertTrue(Charsetfunctions.isValidUTF8(newByteBuffer(""STR"".getBytes())));"	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	"assertTrue(Charsetfunctions.isValidUTF8(buffer(""STR"")));"	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.allocate(8)));	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertFalse(Charsetfunctions.isValidUTF8(BUFFER));	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(EMPTY_BUFFER));	0
395	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(Charsetfunctions.isValidUTF8(null));	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	Travistravis=newTravis(env);	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",newTravis(env).getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",newTravis().getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	finalTravistravis=newTravis(env);	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",Travis.getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	Travistravis=newTravis();	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",Travis.getInstance().getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",Travis.getInstance(env).getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",Travis.parse(""STR"").getPullRequest());"	0
396	10	trautonen_coveralls-maven-plugin	TravisTest#testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	finalTravistravis=newTravis();	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(1,result.size());	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(1,result.size());	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	assertEquals(2,result.size());	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.containsAll(Arrays.asList(""STR"",""STR"")));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.containsAll(Arrays.asList(""STR"",""STR"")));"	0
397	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.containsAll(Arrays.asList(""STR"")));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_34));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23d));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(3.14d));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR_UK_R));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(0.5d));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_33));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RURUKR));"	0
398	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR_UKR));"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"fields.put(""STR"",""STR"");"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(1,fields.size());	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	assertEquals(2,fields.size());	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.containsKey(""STR""),is(true));"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),is(equalTo(""STR"")));"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR"")[0]);"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields.get(""STR""),equalTo(""STR""));"	0
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",fields.get(""STR""));"	1
399	10	DigitalPebble_storm-crawler	BasicIndexingTest#testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertThat(fields,hasItem(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret,is(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret).isEqualTo(""STR"");"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret.trim());"	0
400	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.matches(""STR""));"	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor).getExtractor(OETLStubRandomExtractor.class);	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verifyNoMoreInteractions(extractor);	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	assertThat(result,is(notNullValue()));	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(OETLStubRandomExtractor.class);	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).execute();	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(eq(OETLStubRandomExtractor.class));	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(1)).getExtractor(OETLJsonExtractor.class);	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor).getExtractor(OETLStubRandomExtractor.class),times(1));	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	verify(extractor,times(0)).execute();	0
401	10	orientechnologies_orientdb	OETLJsonExtractorTest#testEmptyCollection	assertEquals(0,getResult().size());	"verify(extractor).getExtractor(OETLStubRandomExtractor.class,""STR"");"	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(notNullValue()));	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,instanceOf(ObjectQueryInfo.class));	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,notNullValue());	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertThat(result,is(nullValue()));	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(ObjectQueryInfo.class,result.getClass());	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertEquals(null,result);	0
402	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertEquals(3,qResult.size());	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(3));	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	getProfilerInstance().stopRecording();	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()==3);	0
403	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testOptional3	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>refs=manager.getNewRecords();	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>references=manager.getNewRecords();	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>records=manager.getNewRecords();	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	manager.getNewRecords().add(doc2);	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	0
404	10	orientechnologies_orientdb	ODirtyManagerTest#testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	1
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",newError404UriHandler().getMimeType());"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",ERROR_404_URI_HANDLER.getMimeType());"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",routerNanoHTTPD.getError404UriHandler().getMimeType());"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	1
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	RouterNanoHTTPD.Error404UriHandlerhandler=newRouterNanoHTTPD.Error404UriHandler();	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",newError404UriHandler().getMimeType());"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler(null).getMimeType());"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"RouterNanoHTTPD.Error404UriHandlerhandler=newRouterNanoHTTPD.Error404UriHandler(""STR"");"	0
405	10	NanoHttpd_nanohttpd	TestNanolets#testError404UriHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.Error404UriHandler().getMimeType());"	"assertEquals(""STR"",routerNanoHTTPD.getError404UriHandler(404).getMimeType());"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(),hasItem(""STR"",""STR""));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(),hasEntry(""STR"",""STR""));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(),hasItem(""STR"",newText(""STR"")));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(""STR"",""STR""),hasItem(""STR"",""STR""));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.externalAttributes(),hasItem(""STR"",""STR""));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(""STR""),hasItem(""STR"",""STR""));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(),hasEntry(""STR"",attrs(newAttribute(""STR"",""STR""))));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(),hasItem(""STR"",attrs(newAttribute(""STR"",""STR""))));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(""STR"",""STR""),hasItem(newAttribute(""STR"",""STR"")));"	0
406	10	nidi3_graphviz-java	LabelTest#external	"assertEquals(attrs(attr(""STR"",label.external())),attrs(label.external()));"	"assertThat(label.external(""STR"",""STR""),hasItem(""STR"",newText(""STR"")));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertTrue(usedProperties.contains(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertTrue(usedProperties.contains(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertTrue(usedProperties.contains(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertThat(usedProperties,hasItem(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertTrue(usedProperties.contains(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertFalse(usedProperties.contains(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertThat(usedProperties,containsInAnyOrder(""STR"",""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertThat(usedProperties,containsInAnyOrder(""STR""));"	0
407	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()==1);	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	"assertEquals(""STR"",answer.getMetadata().getName());"	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	"assertEquals(""STR"",answer.getMetadata().getName());"	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(1,answer.getSpecs().size());	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(1,answer.getSpecs().size());	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(0,answer.getSpecs().size());	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	"Assertions.assertEquals(""STR"",answer.getMetadata().getName());"	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	Assertions.assertEquals(1,answer.getSpecs().size());	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(0,answer.getSpecs().size());	0
408	10	fabric8io_fabric8-maven-plugin	MergeResourceTest#testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals(resource,answer);	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,is(""STR""));"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString).isEqualTo(""STR"");"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.contains(""STR""));"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,equalTo(""STR""));"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertTrue(fileString.contains(""STR""));"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString.trim());"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertThat(fileString,containsString(""STR""));"	0
409	10	OpenLiberty_ci.common	DevUtilTest#testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(1,result.size());	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,""STR"",""STR""))));"	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(1,result.size());	0
410	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertThat(result).hasSize(1);	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.isRecognized());	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),equalTo(true));	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),is(true));	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),equalTo(false));	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest.isRecognized(),is(false));	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.isRecognized());	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	Assertions.assertTrue(panest.isRecognized());	0
411	10	PeterisP_morphology	MorphologyTest#ticket37	assertTrue(panest.isRecognized());	assertThat(panest,is(true));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(null));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertThat(floatSerializer.getObjectSize(null),is(0));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(null));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(4,floatSerializer.getObjectSize(null));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(0,floatSerializer.getObjectSize(null));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(newObject()));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject[]{1}));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject[]{1.0f}));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(OFloatSerializer.OBJECT_SIZE,floatSerializer.getObjectSize(FLOAT_ZERO));	0
412	10	orientechnologies_orientdb	FloatSerializerTest#testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(2,floatSerializer.getObjectSize(newObject()));	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(2,sentences.size());	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(3,sentences.size());	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(4,sentences.size());	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()==1);	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()==2);	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(0,sentences.size());	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()>1);	0
413	10	PeterisP_morphology	TokenizeTest#pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>tokens2=OpenKoreanTextProcessorJava.tokenize(text);	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	Seq<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text);	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(tokens);	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenizer.KoreanTokentoken=tokens.iterator().next();	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	Iterator<KoreanTokenizer.KoreanToken>it=tokens.iterator();	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(""STR"");"	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.addWordsToDictionary(tokens);	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenJavatoken=tokens.iterator().next();	0
414	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddWordsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words=OpenKoreanTextProcessorJava.tokenize(text,tokens);	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
415	10	PeterisP_morphology	MorphologyTest#apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.command(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"database.command(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.updateSequence(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.getSequence(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.sequence(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.insertSequence(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.updateSequence(""STR"",1);"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"database.sequence(""STR"");"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.sequence(""STR"",1);"	0
416	10	orientechnologies_orientdb	MetadataPushTest#testSequencesUpdate	"assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(""STR""));"	"secondDatabase.setSequence(""STR"",1);"	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
417	10	Yubico_yubico-java-client	YubicoClientTest#testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,true);	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,false);	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	"System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,""STR"");"	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigs.dispatch_msg_list_in_default_executor());	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(RpcConfigs.dispatch_msg_list_in_default_executor());	0
418	10	sofastack_sofa-bolt	RpcConfigManagerTest#testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_DEFAULT_executor());	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertNotNull(response);	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertEquals(200,response.getStatusLine());	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine(),is(Status.OK));	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertEquals(200,response.getStatusLine());	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine()).isEqualTo(Status.OK);	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine(),is(200));	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine(),equalTo(Status.OK));	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertThat(response.getStatusLine()).isEqualTo(200);	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertNotNull(response);	0
419	10	NanoHttpd_nanohttpd	GZipIntegrationTest#chunkedContentIsEncodedProperly	"assertEquals(""STR"",EntityUtils.toString(response.getEntity()));"	assertTrue(response.getStatusLine()==Status.OK);	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	filter.decide(evt);	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyreply=filter.decide(evt);	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.NEUTRAL));	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	finalFilterReplyreply=filter.decide(evt);	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.DENY));	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
420	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	FilterReplyresult=filter.decide(evt);	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertThat(result,is(equalTo(""STR"")));"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	assertThat(result,is(notNullValue()));	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertThat(result,is(equalTo(Arrays.asList(""STR"",""STR""))));"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertThat(result,equalTo(Arrays.asList(""STR"",""STR"")));"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertEquals(Arrays.asList(""STR""),result);"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertEquals(Arrays.asList(""STR""),result);"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertThat(result,equalTo(Arrays.asList(""STR"")));"	0
421	10	orientechnologies_orientdb	OSQLMethodKeysTest#testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	"assertThat(""STR"",result,is(equalTo(Arrays.asList(""STR"",""STR"")))));"	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
422	10	orientechnologies_orientdb	OETLCSVExtractorTest#testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempSrcFile,srcDir,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempSrcFile,configDirectory,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempSrcFile,serverDirectory,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempSrcFile,dir,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempTargetFile,srcDir,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"Files.delete(tempTargetFile.toPath(),""STR"".getBytes());"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"util.deleteFile(tempSrcFile,targetDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"FiledeletedFile=newFile(srcDir,""STR"");"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"Files.delete(tempTargetFile.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
423	10	OpenLiberty_ci.common	DevUtilTest#testDeleteFile	assertTrue(tempSrcFile.exists());	"StringtargetFileName=""STR"";"	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	1
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertTrue(StringUtils.isEmpty(null));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	"assertTrue(StringUtils.isEmpty(""STR""));"	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertThat(StringUtils.isEmpty(null),is(false));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	"assertThat(StringUtils.isEmpty(""STR""),is(false));"	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertTrue(StringUtils.isEmpty(null));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
424	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	1
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"booleanresult=PropertyBindingSupport.bind0(testObject,""STR"",""STR"");"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertEquals(false,PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR"")==false);"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(null,""STR"",""STR""));"	0
425	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR"")==true);"	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertEquals(1,result.size());	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result.size(),is(1));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result,hasItem(v6));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result.size(),is(6));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result.size(),is(2));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertEquals(1,result.size());	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result.size(),equalTo(1));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertEquals(2,result.size());	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result.size(),equalTo(2));	0
426	10	orientechnologies_orientdb	OSQLFunctionAstarTest#test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertThat(result).hasSize(1);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=resultHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]result=pictureHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertThat(resultHbd.getPlaneData(0),equalTo(Y));	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=pictureHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(Y,resultHbd.getPlaneData(0));	1
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]x=resultHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]data=resultHbd.getPlaneData(1);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]R=resultHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]A=resultHbd.getPlaneData(0);	0
427	10	jcodec_jcodec	PictureTest#testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	int[]result=picture.getPlaneData(0);	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),equalTo(true));"	0
428	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),is(true));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
429	10	arnohaase_a-foundation	AJsonSerHelperTest#testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR""+""STR"",result);"	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().exists());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().exists());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	PathwarehouseDir=testCore.warehouseDir();	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(testCore.warehouseDir());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNull(testCore.warehouseDir());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	"assertEquals(""STR"",testCore.warehouseDir().toString());"	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().isDirectory());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals(null,testCore.warehouseDir());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().isDirectory());	0
430	10	ExpediaGroup_beeju	BeejuCoreTest#deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().isEmpty());	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,is(""STR""));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,is(equalTo(""STR"")));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,containsString(""STR""));"	0
431	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testCustomDepthZero	assertEquals(null,filterResult);	System.out.println(filterResult);	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vair��ki.isRecognized());	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vair��ki.isRecognized());	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertThat(vair��ki.isRecognized(),is(true));	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertThat(vair��ki.isRecognized(),equalTo(true));	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	"assertTrue(""STR"",vair��ki.isRecognized());"	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vair��ki.isRecognized());	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertThat(vair��ki.isRecognized(),equalTo(false));	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vair��ki.isRecognized());	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	assertThat(vair��ki.isRecognized(),is(false));	0
432	10	PeterisP_morphology	MorphologyTest#vairāki	assertTrue(vairāki.isRecognized());	"assertFalse(""STR"",vair��ki.isRecognized());"	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual,is(expected));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
433	10	adlnet_jxapi	StatementResultTest#testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",newAppveyor(env).getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",newAppveyor().getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",newAppveyor(env).getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	Appveyorappveyor=newAppveyor(env);	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",newAppveyor().getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",Appveyor.getInstance(env).getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"assertEquals(""STR"",Appveyor.getInstance().getBuildUrl());"	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	Appveyorappveyor=newAppveyor();	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	finalAppveyorappveyor=newAppveyor(env);	0
434	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetBuildUrl	"assertEquals(""STR"",newAppveyor(env()).getBuildUrl());"	"Appveyorappveyor=newAppveyor(env,""STR"");"	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	"assertTrue(StringUtils.isEmpty(""STR""));"	1
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertTrue(StringUtils.isEmpty(null));	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	"assertThat(StringUtils.isEmpty(""STR""),is(false));"	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertThat(StringUtils.isEmpty(null),is(false));	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertTrue(StringUtils.isEmpty(null));	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
435	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isEmpty(null));	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(null,deflateExtension.getDeflater());	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),instanceOf(Deflater.class));	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	Deflaterdeflate=deflateExtension.getDeflater();	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),is(nullValue()));	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNull(deflateExtension.getDeflater());	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),is(notNullValue()));	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater(),notNullValue());	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(null,deflateExtension.getDeflater());	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	"assertEquals(""STR"",deflateExtension.getDeflater().toString());"	0
436	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertThat(deflateExtension.getDeflater()).isNotNull();	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	cm.add(getAConn());	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>all=cm.getAll(poolKey);	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	"List<Connection>all=cm.getAll(""STR"");"	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>result=cm.getAll(poolKey);	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(1,cm.getAll(poolKey).size());	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>connections=cm.getAll(poolKey);	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	"List<Connection>result=cm.getAll(""STR"");"	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	"List<Connection>connections=cm.getAll(""STR"");"	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>allConnections=cm.getAll(poolKey);	0
437	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	List<Connection>connectionList=cm.getAll(poolKey);	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(className));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(className),is(""STR""));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(className),equalTo(""STR""));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").size());"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),equalTo(className));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(1));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(className));"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	1
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(className,item.getProperty(""STR"").getClass().getName());"	0
438	10	orientechnologies_orientdb	OScriptExecutionTest#testReturnInIf2	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	1
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nop��zdam��s.isRecognized());	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nop��zdam��s.isRecognized());	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertThat(nop��zdam��s.isRecognized(),is(true));	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nop��zdam��s.isRecognized());	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertThat(nop��zdam��s.isRecognized(),equalTo(true));	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nop��zdam��s.isRecognized());	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertThat(nop��zdam��s.isRecognized(),is(false));	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertThat(nop��zdam��s.isRecognized(),equalTo(false));	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	Assertions.assertFalse(nop��zdam��s.isRecognized());	0
439	10	PeterisP_morphology	MorphologyTest#nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertThat(nop��zdam��s,is(true));	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>changeEvents=timeLine.getMultiValueChangeEvents();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>multiValueChangeEvents=timeLine.getMultiValueChangeEvents();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	List<OMultiValueChangeEvent<Object,Object>>valueChangeEvents=timeLine.getMultiValueChangeEvents();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().iterator().next();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().iterator().next();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().iterator().next();	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>changeEvent=timeLine.getMultiValueChangeEvents().get(0);	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>event=timeLine.getMultiValueChangeEvents().get(0);	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	OMultiValueChangeEvent<Object,Object>change=timeLine.getMultiValueChangeEvents().get(0);	0
440	10	orientechnologies_orientdb	ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()==2);	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertSame(createVerb(""STR"",""STR""),actual);"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
441	10	adlnet_jxapi	VerbsTest#testMastered	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.isRecognized());	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),is(true));	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),equalTo(true));	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),equalTo(false));	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties.isRecognized(),is(false));	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.isRecognized());	0
442	10	PeterisP_morphology	MorphologyTest#riebties	assertTrue(riebties.isRecognized());	assertThat(riebties,is(true));	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),instanceOf(Object.class));	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),is(equalTo(test)));	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertThat(testContainer.getTestInstance(),equalTo(test));	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	"assertThat(testContainer.getTestInstance(),equalTo(""STR""));"	0
443	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	"assertThat(testContainer.getTestInstance(),is(equalTo(""STR"")));"	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(2));	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(2);	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult.size(),is(1));	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	"assertThat(qResult,hasItem(createFriend(""STR"")));"	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertThat(qResult).hasSize(1);	0
444	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	1
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),is(""STR""));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath());"	1
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),equalTo(""STR""));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),is(equalTo(""STR"")));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().contains(""STR""));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().startsWith(""STR""));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().equals(""STR""));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertThat(node.getPath(),not(equalTo(""STR"")));"	0
445	10	retog_wymiwyg-commons-core	MultiPathNodeTest#commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR""+""STR"",node.getPath());"	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertThat(actual,is(expected));	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
446	10	adlnet_jxapi	ActorTest#testGetMbox	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	StringresultOtp=YubicoClient.getPublicId(testPublicId);	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertEquals(""STR"",resultPublicId);"	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.equals(testPublicId));	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.equals(testPublicId));	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains(testPublicId));	0
447	10	Yubico_yubico-java-client	YubicoClientTest#testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertThat(resultPublicId,is(testPublicId));	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),is(true));	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(true));	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(""STR"",configFile.getName());"	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	"assertEquals(""STR"",configFile.getName());"	0
448	10	OpenLiberty_ci.common	DevUtilTest#testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertThat(configFile.exists(),equalTo(false));	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata,metadata);	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	metadata=newMetadata();	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata.getMetadata(),md);	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",metadata.getName());"	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",metadata.getMetadata().getName());"	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.size());	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata.getMetadata(),metadata);	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(metadata,md);	0
449	10	DigitalPebble_storm-crawler	StackOverflowTest#testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",metadata.toString());"	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()==macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS.hashCode(),macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MULTICAST_ADDRESS.hashCode(),macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS,macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(0,macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	"assertEquals(""STR"",macAddress.hashCode());"	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(MAC_ADDRESS_HASH,macAddress.hashCode());	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertThat(macAddress.hashCode(),is(equalTo(MULTICAST_ADDRESS.hashCode())));	0
450	10	fluenda_ParCEFone	MacAddressTest#testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),MAC_ADDRESS.hashCode());	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newObject()));	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(multiKey));	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR"",""STR""))));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(""STR""))));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR""))));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"finalOMultiKeymultiKey2=newOMultiKey(Arrays.asList(""STR"",""STR""));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(multiKey.equals(newOMultiKey(Arrays.asList(""STR"",""STR""))));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"finalOMultiKeymultiKey2=newOMultiKey(Collections.singletonList(""STR""));"	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newObject()));	0
451	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(multiKey));	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JMXMBeanConnection.class));	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isSameAs(this.mockJmxMbeanConnection);	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	"System.setProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY,""STR"");"	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JmxMBeanConnection.class));	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	System.setProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY,null);	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertSame(this.mockJmxMbeanConnection,result);	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isInstanceOf(JMXMBeanConnection.class);	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JMXMBeanAccessConnection.class));	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result,instanceOf(JmxMBeanAccessConnection.class));	0
452	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertThat(result).isSameAs(this.mockJmxConnector);	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(resourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(ResourceUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(JsonUtil.jsonEquals(first,different));	0
453	10	fabric8io_fabric8-maven-plugin	ResourceUtilTest#simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(ResourceUtil.jsonEquals(first,same));	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().isEmpty());	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),empty());	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasSize(0));	0
454	10	arnohaase_a-foundation	ADiGraphTest#testEmpty	assertTrue(graph.edges().isEmpty());	assertThat(graph.edges(),hasItem(null));	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(null,""STR""));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(""STR"",null));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(null,""STR""));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(""STR"",null));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"BuildInfoUtils.isMinVersion(""STR"",""STR"");"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"StringminVersion=""STR"";"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertTrue(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
455	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(BuildInfoUtils.isMinVersion(""STR"",""STR""));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertTrue(Wildcards.matches(null,""STR""));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",null));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertTrue(Wildcards.matches(""STR"",null));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertThat(Wildcards.matches(null,""STR""),is(false));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertEquals(false,Wildcards.matches(null,""STR""));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",null));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertThat(Wildcards.matches(""STR"",null),is(false));"	0
456	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertEquals(""STR"",draft_6455.toString());"	1
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertEquals(""STR"",draft_6455.toString());"	1
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertTrue(draft_6455.toString().contains(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertTrue(draft_6455.toString().contains(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertThat(draft_6455.toString(),is(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertTrue(draft_6455.toString().contains(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertThat(draft_6455.toString(),equalTo(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertThat(draft_6455.toString(),is(equalTo(""STR"")));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertThat(draft_6455.toString(),containsString(""STR""));"	0
457	10	TooTallNate_Java-WebSocket	Draft_6455Test#testToString	"assertEquals(""STR"",draft_6455.toString());"	"assertEquals(""STR""+""STR"",draft_6455.toString());"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toByteArray()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toByteArray()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toArray()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.array()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(b.toArray()));"	0
458	10	rockagen_commons-lib	CommUtilTest#testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",Util.hexdump(bs.getBytes()));"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	assertEquals(newCrossHatch(),crossHatch());	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR"",CrossHatch.crossHatch());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	assertNotNull(CrossHatch.crossHatch());	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR"",CrossHatch.crossHatch());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR"",crossHatch());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	assertThat(crossHatch(),equalTo(newCrossHatch()));	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR""+""STR"",CrossHatch.crossHatch());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR"",crossHatch());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"assertEquals(""STR"",CrossHatch.crossHatch().toString());"	0
459	10	nidi3_graphviz-java	FillStyleTest#crosshatch	"assertEquals(map(""STR"",""STR""),FillStyle.crossHatch().values);"	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR""+""STR"",crossHatch());"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertThat(""STR"",result,is(equalTo(""STR"")));"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR"",result);"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR""+""STR"",result);"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
460	10	amlinv_stat-collection-utils	ParameterReplacerTest#testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(1,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(4,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0x353,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(2,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(3,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertThat(be.headerSize,is(equalTo(0)));	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	bb.position(startPosition);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(1,be.headerSize);	0
461	10	jcodec_jcodec	MkvBlockTest#testReadingXiphV2	assertEquals(12,be.headerSize);	"assertEquals(""STR"",be.headerSize);"	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(this.mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),equalTo(this.mockJmxServiceUrlFactory));	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(factory.getJmxServiceUrlFactory(),instanceOf(JMXServiceUrlFactory.class));	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(equalTo(this.mockJmxServiceUrlFactory)));	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	"assertThat(this.factory.getJmxServiceUrlFactory()).isEqualTo(JMXServiceUrlFactory.createJMXServiceUrl(""STR""));"	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	finalJMXServiceUrlFactoryjmxServiceUrlFactory=factory.getJmxServiceUrlFactory();	0
462	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertThat(this.factory.getJmxServiceUrlFactory(),is(nullValue()));	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
463	10	PeterisP_morphology	MorphologyTest#rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.bytes);	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	bytesContainer.setBytes(newbyte[64]);	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.toBytes());	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.getBytes());	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.size());	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.toByteArray());	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	"bytesContainer.setBytes(""STR"");"	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	"bytesContainer.setBytes(""STR"".getBytes());"	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.size());	0
464	10	orientechnologies_orientdb	BytesContainerTest#testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.isEmpty());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),equalTo(target));	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),is(target));	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNull(objectQueryInfo.getTarget());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotEquals(target,objectQueryInfo.getTarget());	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertThat(objectQueryInfo.getTarget(),instanceOf(Object.class));	0
465	10	amlinv_stat-collection-utils	ObjectQueryInfoTest#testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo.getTarget());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(1,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(2,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(3,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertThat(results.size(),is(1));	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(1,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertThat(results.size(),is(2));	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(0,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertEquals(2,results.size());	0
466	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>1);	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",this.objectName);"	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(17L,this.attributeList.size());	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(1L,this.attributeList.size());	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	"assertEquals(""STR"",this.objectName.toString());"	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(17L,this.attributeList.get(0).getValue());	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	"assertEquals(17L,this.attributeList.get(0).getLongValue(""STR""));"	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,this.objectName);	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,null,this.objectName);	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),eq(this.objectName));	0
467	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",objectName);"	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertFalse(matcher.find());	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),is(true));"	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	"assertThat(""STR"",matcher.find(),equalTo(true));"	0
468	10	basis-technology-corp_tcl-regex-java	SmpTest#find	assertTrue(matcher.find());	booleanfound=matcher.find();	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(1.23d));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertThat(GBP_STR_CONVERTER.convert(GBP_1000),is(""STR""));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(1.23));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(3.14d));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",GBP_STR_PER1000.convert(GBP_2_34));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(1000.0d));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",GBP_STR_PER1000.convert(1.23d));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(1000.5d));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(GBP_1_23));"	0
469	10	javadev_moneytostr-russian	MoneyToStrTest#checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(100));"	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
470	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").toString());"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(html(""STR""),Label.markdown(""STR""));"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(newLabel(""STR""),Label.markdown(""STR""));"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertThat(Label.markdown(""STR""),equalTo(newLabel(""STR"")));"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(label(""STR""),Label.markdown(""STR""));"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(markdown(""STR""),Label.markdown(""STR""));"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").getText());"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"Labellabel=Label.markdown(""STR"");"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").getValue());"	0
471	10	nidi3_graphviz-java	LabelTest#markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertEquals(""STR"",Label.markdown(""STR"").get(0).toString());"	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(true));	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),is(false));	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(false));	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
472	10	arnohaase_a-foundation	ADiGraphTest#testTree	assertFalse(graph.hasCycles());	assertThat(graph.hasCycles(),equalTo(true));	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(this.mockLogger,poller.getLog());	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertNull(this.poller.getLog());	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertSame(this.mockLogger,poller.getLog());	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	this.poller.setLog(this.mockLogger);	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(this.mockLogger,poller.getLog());	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	"Mockito.when(this.mockMBeanAccessConnection.getTargetDescription()).thenReturn(""STR"");"	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	"Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription()).thenReturn(""STR"");"	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Mockito.when(this.mockMBeanAccessConnection.getLog()).thenReturn(this.mockLogger);	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	finalLoggerlogger=this.poller.getLog();	0
473	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetLog	assertNotNull(this.poller.getLog());	Loggerlogger=this.poller.getLog();	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	ODocumentprevious=execute.iterator().next();	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	ODocumentprev=execute.iterator().next();	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),is(equalTo(""STR"")));"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),is(notNullValue()));"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertEquals(1,next.field(""STR"").size());"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertEquals(""STR"",next.field(""STR"").toString());"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertThat(next.field(""STR""),equalTo(""STR""));"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertEquals(""STR"",next.field(""STR"").value);"	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	ODocumentprevious=next.iterator().next();	0
474	10	orientechnologies_orientdb	LuceneSpatialWithinTest#testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"ORecordfirst=next.field(""STR"");"	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),is(true));"	0
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
475	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0L,addState.getOperationCount());	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(1,addState.getOperationCount());	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),is(0L));	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()==0);	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),is(0));	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),equalTo(0));	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertThat(addState.getOperationCount(),equalTo(0L));	0
476	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.getOperationCount()==0);	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),is(equalTo(""STR"")));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),is(""STR""));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),equalTo(""STR""));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"Assertions.assertEquals(""STR"",config.getString(""STR""));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR""+""STR"",config.getString(""STR""));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertThat(config.getString(""STR""),is(nullValue()));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertTrue(config.getString(""STR"").contains(""STR""));"	0
477	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(newID,actual.get(0).getId());	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertThat(actual,hasItem(newID));	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(1,actual.size());	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(newID,actual.get(0).getID());	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(2,actual.size());	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newID));	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
478	10	adlnet_jxapi	ContentActivitiesTest#testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newActivity(newID)));	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),is(false));	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),equalTo(false));	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved());	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertThat(p.isSolved(),is(true));	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
479	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(3,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(0,extr.fields());	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(1));	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),is(2));	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),equalTo(1));	0
480	10	orientechnologies_orientdb	ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertThat(extr.fields(),equalTo(2));	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(actual==expected);	0
481	10	adlnet_jxapi	StatementTest#testSetVerb	assertNotNull(actual);	assertTrue(expected.matches(actual));	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasRemaining());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(ByteBuffer.wrap(message),frame.getPayloadData());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length(),frame.getPayloadData().remaining());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length(),frame.getPayloadData().limit());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,frame.getPayloadData().remaining());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().array());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().remaining());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	ByteBufferpayload=frame.getPayloadData();	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().remaining());	0
482	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message,frame.getPayloadData().array());	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	1
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertEquals(""STR"",value);"	1
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertThat(value,is(""STR""));"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	assertNotNull(value);	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.contains(""STR""));"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertThat(value).isEqualTo(""STR"");"	0
483	10	rockagen_commons-lib	OPLogTest#testDescription	"assertEquals(""STR"",value);"	"assertTrue(value.startsWith(""STR""));"	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(0));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(2));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(1));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),equalTo(0));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(5));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),equalTo(1));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(1,s.getActualCost());	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertThat(s.getActualCost(),is(3));	0
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
484	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#actual_cost	assertEquals(0,s.getActualCost());	assertEquals(2,s.getActualCost());	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	"Sourcesource4=newSource(""STR"",""STR"",""STR"");"	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertThat(source1.hashCode(),equalTo(source2.hashCode()));	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source2.hashCode());	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.hashCode()==source2.hashCode());	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertThat(source1.hashCode(),is(source2.hashCode()));	0
485	10	trautonen_coveralls-maven-plugin	SourceTest#testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source3.hashCode());	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	scriptExecutor.execute(scriptOperation,promise);	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(scriptOperation,promise);	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	verify(driver).executeScriptOperation(scriptOperation,promise);	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR"");}}));"	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}}));	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR"");}}));"	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{scriptOperation.isFireAndForget();}}));	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun(){thrownewException(""STR"");}}));"	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	"assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR"");}}));"	0
486	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#javascript	assertTrue(promise.getAnswer()instanceofString);	"assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR"");}}));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",12));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
487	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_Integer	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,is(notNullValue()));	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	"assertThat(qResult,not(hasItem(""STR"")));"	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertEquals(1,qResult.size());	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,not(hasItem(0)));	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,notNullValue());	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult,hasItem(1));	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult).hasSize(1);	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertEquals(2,qResult.size());	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult.next(),is(1));	0
488	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testWhileArrows	assertEquals(3,size(qResult));	assertThat(qResult.next(),is(true));	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,is(score));	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,equalTo(score));	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,is(equalTo(score)));	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual).isEqualTo(score);	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertThat(actual,instanceOf(Score.class));	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
489	10	adlnet_jxapi	ResultTest#testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,index.getSize());	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(1));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(index.getSize(),1);	1
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(2));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(0L));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(0));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(0));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),equalTo(1));	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(2,index.getSize());	0
490	10	orientechnologies_orientdb	LuceneNullTest#testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertThat(index.getSize(),is(0L));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(1,manual.getSize());	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(8));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(0,manual.getSize());	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(2));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),is(1));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),equalTo(8));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),greaterThan(0));	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(2,manual.getSize());	0
491	10	orientechnologies_orientdb	LuceneManualIndexTest#testManualIndex	assertEquals(manual.getSize(),4);	assertThat(manual.getSize(),equalTo(1L));	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR"").getString(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR"").toString());"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(expected.get(""STR""),actual.get(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(expected.toString(),actual.getString(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(expected.toString(),actual.get(""STR"").toString());"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(""STR"",actual.getString(""STR""));"	0
492	10	adlnet_jxapi	ActivityStateTest#testSetState	assertNotNull(actual);	"assertEquals(""STR"",actual.get(""STR"").getAsString());"	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	assertEquals(responseMessage,a.getResponseMessage());	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	"a.setXapiStatements(""STR"");"	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapiStatements(null);	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	"a.setXapi(""STR"");"	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	a.setXapiStatements(statement);	0
493	10	adlnet_jxapi	AttachmentResultTest#testSetXapiStatements	assertNotNull(a);	AttachmentResulta2=newAttachmentResult(RESPONSE_MESSAGE,statement,attachments);	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.class.getName()));"	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertThat(props,is(notNullValue()));	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertThat(props).isNotNull();	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	"assertFalse(props.containsKey(""STR""));"	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.PROPERTY_NAME));"	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	"assertEquals(""STR"",props.toString());"	0
494	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testNonExistentPropertiesParsing	assertNotNull(props);	"assertFalse(props.containsKey(""STR""));"	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(3,schemas.size());	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.size());	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas).hasSize(1);	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(2));	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()==2);	0
495	10	xmlet_XsdParser	IssuesTest#testIssue27Attributes	assertEquals(1,schemas.size());	assertThat(schemas.size(),is(1));	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertEquals(""STR"",searchResult.toString());"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertEquals(""STR"",searchResult.toString());"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertThat(searchResult.toString(),is(""STR""));"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertThat(searchResult.toString(),is(equalTo(""STR"")));"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertTrue(searchResult.toString().contains(""STR""));"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertEquals(""STR""+""STR"",searchResult.toString());"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertThat(searchResult.toString(),equalTo(""STR""));"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertTrue(searchResult.toString().contains(""STR""));"	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	assertEquals(filter.toString(),searchResult.toString());	0
496	10	orientechnologies_orientdb	OFilterOptimizerTest#testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	assertThat(searchResult.toString(),is(equalTo(filter.toString())));	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res).hasSize(0);	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,is(empty()));	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
497	10	orientechnologies_orientdb	OETLCSVExtractorTest#testQuotedEmptyString	assertFalse(res.isEmpty());	assertThat(res,hasSize(0));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
498	10	adlnet_jxapi	GroupTest#testGetObjectType	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),is(equalTo(""STR"")));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),is(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertThat(markup.markdown(""STR""),equalTo(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""+""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR"",markup.markdown(""STR""));"	0
499	10	myabc_markdownj	LineConventions#testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=markup.markdown(""STR"");"	0
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	assertEquals(output,processed);	1
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	assertEquals(output,processed);	1
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	"assertEquals(""STR"",processed);"	0
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	assertEquals(output,processed);	1
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	assertEquals(output,processed);	1
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	"assertEquals(output,processed.replaceAll(""STR"",CHAR_PROTECTOR.encode(""STR"")));"	0
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	"assertEquals(processed.replaceAll(""STR"",CHAR_PROTECTOR.encode(""STR"")),output);"	0
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	"assertEquals(""STR"",output,processed.replaceAll(imageLink,newReplacement(){@OverridepublicStringreplacement(Matchermatcher){return""STR"";}}));"	0
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	assertEquals(output,processed);	1
500	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testImages	assertEquals(output,processed);	"assertEquals(""STR""+url+""STR"",output,processed);"	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertTrue(simt.isRecognized());	1
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertFalse(simt.isRecognized());	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertThat(simt.isRecognized(),is(true));	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertThat(simt.isRecognized(),equalTo(true));	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertThat(simt.isRecognized(),equalTo(false));	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertThat(simt.isRecognized(),is(false));	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertTrue(simt.isRecognized());	1
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertFalse(simt.isRecognized());	0
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertTrue(simt.isRecognized());	1
501	10	PeterisP_morphology	MorphologyTest#ticket76	assertTrue(simt.isRecognized());	assertThat(simt,is(true));	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.query().toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.query().toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"Stringsql=sql.query(""STR"").toString();"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toSql().toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"assertEquals(""STR"",sql.toSql().toString());"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"sql.query(""STR"");"	0
502	10	redraiment_jactiverecord	TSqlBuilderTest#testQuery	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").where(""STR"",""STR"").groupBy(""STR"").having(""STR"").orderBy(""STR"").limit(10).offset(100).toString());"	"sql.append(""STR"",""STR"");"	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),is(true));"	0
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
503	10	orientechnologies_orientdb	OCreateUserStatementExecutionTest#testPlain	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),equalTo(true));"	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected,actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected.toArray(newInteractionComponent[]{e}),actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected,actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected.toArray(newInteractionComponent[0]),actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected.toArray(newInteractionComponent[]{e,desc}),actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertEquals(expected.toArray(newInteractionComponent[]{}),actual);	0
504	10	adlnet_jxapi	ActivityDefinitionTest#testGetSource	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanvalid=YubicoClient.isValidOTPFormat(otp);	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(false));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThat(YubicoClient.isValidOTPFormat(otp),is(true));	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanisValid=YubicoClient.isValidOTPFormat(otp);	0
505	10	Yubico_yubico-java-client	YubicoClientTest#testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	booleanresult=YubicoClient.isValidOTPFormat(otp);	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(doc,""STR"");"	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	finalTrackedSet<String>set=newTrackedSet<String>();	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"",doc);"	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	finalTrackedSet<String>set=newTrackedSet<String>(doc);	0
506	10	orientechnologies_orientdb	TrackedSetTest#testAddOne	assertFalse(doc.isDirty());	"doc.addField(""STR"",""STR"");"	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertTrue(bool);	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertThat(bool).isTrue();	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertThat(bool,is(true));	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertThat(bool,equalTo(true));	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertNotNull(bool);	1
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertThat(bool).isEqualTo(true);	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertEquals(true,bool);	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertTrue(bool);	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertThat(bool,equalTo(false));	0
507	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFieldValue	assertNotNull(bool);	assertEquals(1,bool.intValue());	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"graph.getRawGraph().getLocalCache().put(""STR"",v1);"	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	assertTrue(graph.getRawGraph().getLocalCache().isEmpty());	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	assertFalse(graph.getRawGraph().getLocalCache().isPersistent());	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"assertFalse(graph.getRawGraph().getLocalCache().get(""STR"").isPersistent());"	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	assertFalse(graph.getRawGraph().getLocalCache().isEmpty());	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"graph.rawGraph().getLocalCache().put(""STR"",v1);"	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	assertFalse(v1.isPersistent());	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"graph.getRawGraph().getLocalCache().put(""STR"",v2);"	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"graph.getRawGraph().localCache().put(""STR"",v1);"	0
508	10	orientechnologies_orientdb	SimplePropertyLinkTest#testSimplePropertyLink	"assertTrue(((OIdentifiable)graph.getVertex(v1.getIdentity()).getProperty(""STR"")).getIdentity().isPersistent());"	"graph.rawGraph().localCache().put(""STR"",v1);"	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),is(true));"	0
509	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testSelectNoTargetSkipZero	assertTrue(result.hasNext());	"assertThat(""STR"",result.hasNext(),equalTo(false));"	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress();	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(0);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(0,1);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(1,0);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(1);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(1,2);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(-1);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(-1,0);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(-1,null);	0
510	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#getParent_fromAgent	assertEquals(coordinatorAddress(),agentAddress(1).getParent());	SimulatorAddressparent=newSimulatorAddress(0,null);	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedHomepage,account.getHomepage());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedHomepage,account.getHomepage());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(account.getName(),expectedName);	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedHomepage,account.getHomepageId());	0
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertNotNull(account);	1
511	10	adlnet_jxapi	AccountTest#testAccount	assertNotNull(account);	assertEquals(expectedName,account.toString());	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.emptyList()));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(null));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newObject[]{}));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>()));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<String>()->{
}));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.emptyList()));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newObject[]{}));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<>()));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(null));"	0
512	10	arnohaase_a-foundation	ACollectionHelperTest#testMkStringNoArgs	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList()));"	"assertEquals(""STR"",ACollectionHelper.mkString(newArrayList<String>()->{
}));"	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	Attachmentattachment=client.getAttachment();	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	Attachmentattachment=(Attachment)client.getAttachment();	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	"Attachmentattachment=newAttachment(""STR"");"	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	"Attachmentattachment=newAttachment(""STR"",client);"	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	Attachmentattachment=newAttachment(client);	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	"Attachmentattachment=newAttachment(client,""STR"");"	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	finalAttachmentattachment=client.getAttachment();	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	Attachmentattachment=newAttachment();	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	Objectattachment=client.getAttachment();	0
513	10	TooTallNate_Java-WebSocket	AttachmentTest#testDefaultValue	assertNull(client.getAttachment());	attachment=client.getAttachment();	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertTrue(webSocketFrame.isMasked());	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertFalse(webSocketFrame.isMasked());	1
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertThat(webSocketFrame.isMasked(),is(true));	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertThat(webSocketFrame.isMasked(),is(false));	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertFalse(webSocketFrame.isMasked());	1
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertTrue(webSocketFrame.isMasked());	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertTrue(webSocketFrame.isMasked());	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertFalse(webSocketFrame.isMasked());	1
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertThat(webSocketFrame.isMasked(),equalTo(false));	0
514	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testIsMasked	assertFalse(webSocketFrame.isMasked());	assertThat(webSocketFrame.isMasked(),equalTo(true));	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"loc��t��js.generateInflectionsFromParadigm(""STR"",16);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(""STR"",loc��t��js.generateInflectionsFromParadigm(""STR"",16).size()>0);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(""STR"",loc��t��js.generateInflectionsFromParadigm(""STR"",16).isEmpty());"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"List<Wordform>words=loc��t��js.generateInflectionsFromParadigm(""STR"",16);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	assertEquals(2,loc��t��js.getCacheSize());	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(loc��t��js.generateInflectionsFromParadigm(""STR"",16).size()>0);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(""STR"",loc��t��js.generateInflectionsFromParadigm(""STR"",16).size()==1);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(""STR"",loc��t��js.generateInflectionsFromParadigm(""STR"",16).size()==2);"	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	assertEquals(0,loc��t��js.getCacheSize());	0
515	10	PeterisP_morphology	MorphologyTest#locīt_ar_sliktu_paradigmu	assertTrue(true);	"assertTrue(loc��t��js.generateInflectionsFromParadigm(""STR"",16).isEmpty());"	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertEquals(3,qResult.size());	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(1));	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(2));	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(3));	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertThat(qResult).hasSize(1);	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
516	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamsInLetSubquery	assertEquals(qResult.size(),1);	assertThat(qResult.size(),equalTo(1));	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	"doc.addField(""STR"",""STR"");"	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
517	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationTwo	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",UHENG.convert(GBP_2_34));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(GBP_2_34));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",MoneyToStr.convert(GBP_2_34));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(1.23d));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(1.23d));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(GBP_1_34));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(1.23));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",GBP_STR_UAHENG.convert(1.23d));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(GBP_1_23));"	0
518	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHENG	"assertEquals(""STR"",moneyToStrUAHENG.convert(V_300D));"	"assertEquals(""STR"",GBP_STR_UAHENG.convert(1.23));"	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t,t1));	1
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertFalse(StringUtils.equals(t,t1));	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t,t1));	1
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t,t1));	1
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertFalse(StringUtils.equals(t,t1));	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t,t1));	1
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertFalse(StringUtils.equals(t,t1));	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t1,b));	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t1,b));	0
519	10	sofastack_sofa-bolt	StringUtilsTest#testEquals	assertTrue(StringUtils.equals(t,t1));	assertTrue(StringUtils.equals(t1,b));	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(PrivateConstructorTestClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(Object.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(PrivateConstructorClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(PrivateTestClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(MyClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(PrivateClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(TestClass.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(String.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(Dog.class);	0
520	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testInvokePrivateConstructor	assertFalse(PrivateConstructorTest.hasBeenConstructed);	ReflectionUtils.invokePrivateConstructor(SubType.class);	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	1
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasItem(doc));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(2,vertices.size());	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),is(1));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),is(2));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertEquals(3,vertices.size());	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasItems(doc));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),equalTo(2));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices,hasSize(1));	0
521	10	orientechnologies_orientdb	LuceneInheritanceQueryTest#testQuery	assertEquals(1,vertices.size());	assertThat(vertices.size(),equalTo(1));	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertNotNull(activityState);	1
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertNull(activityState);	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertEquals(activityState.getId(),activityId);	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertEquals(activityId,activityState.getId());	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertTrue(activityState.isRegistered(REG_ID));	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	"assertEquals(""STR"",activityState.getId());"	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	assertEquals(activityId,activityState.getRegistration(REG_ID).getId());	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	"assertEquals(activityState.getRegistration(REG_ID),""STR"");"	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	"assertTrue(""STR"",activityState.getState()instanceofJsonObject);"	0
522	10	adlnet_jxapi	ActivityStateTest#testActivityStateStringStringAgent	assertNotNull(activityState);	"assertEquals(""STR"",activityState.getState().toString());"	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	"assertEquals(""STR"",GitInfo.getBuildTime());"	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	assertNotNull(GitInfo.getBuildTime());	1
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	"assertEquals(""STR"",GitInfo.getBuildTime());"	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	StringbuildTime=GitInfo.getBuildTime();	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	assertEquals(GIT_BUILD_TIME,GitInfo.getBuildTime());	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	assertEquals(GIT_BUILD_TIME,GitInfo.getBuildTime());	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	"assertThat(GitInfo.getBuildTime(),equalTo(""STR""));"	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	"assertThat(GitInfo.getBuildTime(),is(""STR""));"	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	assertThat(GitInfo.getBuildTime(),is(UNKNOWN));	0
523	10	hazelcast_hazelcast-simulator	GitInfoTest#testGetBuildTime	assertNotNull(GitInfo.getBuildTime());	finalStringbuildTime=GitInfo.getBuildTime();	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(0,res.size());	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	assertThat(res.size(),is(0));	0
524	10	orientechnologies_orientdb	OETLCSVExtractorTest#testCustomNullValueInCell	assertFalse(res.isEmpty());	OrientElementelement=res.get(0);	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertEquals(ByteBuffer.allocate(100),pongFrame.getPayloadData());	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertEquals(ByteBuffer.allocate(100),pongFrame.getPayloadData());	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	pingFrame.setPayload(ByteBuffer.allocate(100));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertNotNull(pongFrame.getPayloadData());	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	pongFrame.setPayload(ByteBuffer.allocate(100));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertThat(pongFrame.getPayloadData(),is(ByteBuffer.allocate(100)));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	pongFrame.setPayloadData(ByteBuffer.allocate(100));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	pingFrame.setPayloadData(ByteBuffer.allocate(100));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertThat(pongFrame.getPayloadData(),is(ByteBuffer.allocate(0)));	0
525	10	TooTallNate_Java-WebSocket	PongFrameTest#testCopyConstructor	assertEquals(pingFrame.getPayloadData(),pongFrame.getPayloadData());	assertThat(pongFrame.getPayloadData(),is(ByteBuffer.allocate(10)));	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception);	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exceptioninstanceofProcessingException);	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception.getMessage(),is(MESSAGE));	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exceptioninstanceofProcessingException);	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception,is(not(nullValue())));	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception.getMessage(),equalTo(MESSAGE));	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception).isNotNull();	0
526	10	trautonen_coveralls-maven-plugin	ProcessingExceptionTest#testExceptionWithMessageAndCause	assertEquals(MESSAGE,exception.getMessage());	assertThat(exception,is(notNullValue()));	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertEquals(12,result);	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertEquals(12,result);	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertThat(result,is(equalTo(12)));	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertEquals(12,result);	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertThat(result,is(newObject[]{12}));	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertThat(result,is(12));	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertEquals(12,result);	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertThat(result,equalTo(12));	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	assertEquals(12,result.intValue());	0
527	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromInteger	assertEquals(result,newBigDecimal(12));	"assertThat(""STR"",result,is(12));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	1
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertThat(defaultExtension.getProvidedExtensionAsServer(),is(equalTo(""STR"")));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertThat(defaultExtension.getProvidedExtensionAsServer(),is(""STR""));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertThat(defaultExtension.getProvidedExtensionAsServer(),equalTo(""STR""));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	1
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	1
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertTrue(defaultExtension.getProvidedExtensionAsServer().equals(""STR""));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	"assertTrue(defaultExtension.getProvidedExtensionAsServer().contains(""STR""));"	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	assertNull(defaultExtension.getProvidedExtensionAsServer());	0
528	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testGetProvidedExtensionAsServer	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsServer());"	Stringresult=defaultExtension.getProvidedExtensionAsServer();	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertFalse(newJenkins(env).isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertFalse(newJenkins().isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertTrue(newJenkins(env).isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertTrue(newJenkins(env).isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertTrue(newJenkins().isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertThat(newJenkins(env).isSelected(),is(true));	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertTrue(newJenkins().isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertFalse(newJenkins().isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertTrue(newJenkins(env).isSelected());	0
529	10	trautonen_coveralls-maven-plugin	JenkinsTest#testIsSelectedForJenkins	assertTrue(newJenkins(env()).isSelected());	assertThat(newJenkins(env).isSelected(),is(false));	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
530	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testCreateSequenceIfNotExists	assertFalse(result.hasNext());	assertEquals(false,result.hasNext());	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertEquals(1,res.size());	1
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertEquals(2,res.size());	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertThat(res,hasItem(rec));	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertEquals(1,res.size());	1
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertEquals(3,res.size());	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertThat(res.size(),is(1));	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertTrue(res.size()==1);	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertThat(res,hasItems(rec));	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertEquals(0,res.size());	0
531	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectRidBinary	assertEquals(1,res.size());	assertTrue(res.size()>0);	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertEquals(""STR"",propertyIndex.getClassName());"	1
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertThat(propertyIndex.getClassName(),is(""STR""));"	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertThat(propertyIndex.getClassName(),equalTo(""STR""));"	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertThat(propertyIndex.getClassName(),is(equalTo(""STR"")));"	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertEquals(""STR"",propertyIndex.getClassName());"	1
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	StringclassName=propertyIndex.getClassName();	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertEquals(OPropertyIndexDefinition.class.getName(),propertyIndex.getClassName());	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertEquals(OPropertyIndexDefinitionTest.class.getName(),propertyIndex.getClassName());	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertEquals(OPropertyIndexDefinitionTest.class.getSimpleName(),propertyIndex.getClassName());	0
532	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertTrue(propertyIndex.getClassName().contains(""STR""));"	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertThat(savedLauda.getId(),equalTo(loadedLauda.getId()));	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertEquals(laudaRealisticPicture,loadedLauda.getImageData(ODocumentFieldHandlingStrategyFactory.SINGLE_ORECORD_BYTES));	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertThat(savedLauda).isEqualTo(loadedLauda);	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertThat(savedLauda,equalTo(loadedLauda));	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertEquals(laudaRealisticPicture,loadedLauda.getImageData());	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertEquals(savedLauda.getName(),loadedLauda.getName());	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertThat(savedLauda.getName(),equalTo(loadedLauda.getName()));	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertEquals(laudaRealisticPicture,loadedLauda.getImageData());	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertEquals(laudaRealisticPicture,loadedLauda.getImageData()[0]);	0
533	10	orientechnologies_orientdb	OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSingleRecordMapping	assertNotNull(savedLauda);	assertThat(savedLauda).isSameAs(loadedLauda);	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(newObject()));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(MAC_ADDRESS));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertFalse(macAddress.equals(""STR""));"	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertFalse(macAddress.equals(newMacAddress(""STR"")));"	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(newObject()));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(MAC_ADDRESS));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(MACADDRESS));	0
534	10	fluenda_ParCEFone	MacAddressTest#testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(null));	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
535	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testNegativePattern2	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(actual,expected);	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
536	10	adlnet_jxapi	StatementTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed);	1
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed);	1
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	"assertEquals(""STR"",processed);"	0
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed);	1
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed);	1
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	"assertEquals(output,processed.replaceAll(""STR"",""STR""));"	0
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed);	1
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertThat(processed).isEqualTo(output);	0
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	"assertEquals(""STR""+""STR""+""STR""+""STR"",output,processed);"	0
537	10	myabc_markdownj	EscapeSpecialCharsWithinTagAttributes#testAutoLinks	assertEquals(output,processed);	assertEquals(output,processed.trim());	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,instanceOf(AtMostOneMethodWithoutArgs.class));	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(instanceOf(AtMostOneMethodWithoutArgs.class)));	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(notNullValue()));	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,notNullValue());	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,is(instanceOf(GetAtMostOneMethodWithoutArgs.class)));	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,nullValue());	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	"assertEquals(""STR"",method.getName());"	1
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method,equalTo(AtMostOneMethodWithoutArgs.class));	0
538	10	hazelcast_hazelcast-simulator	AnnotatedMethodRetrieverTest#testGetAtMostOneMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertThat(method).isNotNull();	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	List<IExtension>knownExtensions=draft_6455.getKnownExtensions();	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertEquals(1,draft_6455.getKnownExtensions().size());	1
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	List<IExtension>extensions=draft_6455.getKnownExtensions();	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().isEmpty());	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().isEmpty());	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().size()>0);	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().size()>0);	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().size()==1);	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().size()==1);	0
539	10	TooTallNate_Java-WebSocket	Draft_6455Test#testGetKnownExtensions	assertEquals(1,draft_6455.getKnownExtensions().size());	assertTrue(draft_6455.getKnownExtensions().size()==0);	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	ODocumentprevious=execute.iterator().next();	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	ODocumentprev=execute.iterator().next();	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"assertThat(next.field(""STR""),is(equalTo(""STR"")));"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(1,next.field(""STR"").size());"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(""STR"",next.field(""STR"").toString());"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"assertThat(next.field(""STR""),equalTo(""STR""));"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"ORecordfirst=next.field(""STR"");"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"OIdentifiablefirst=next.field(""STR"");"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(""STR"",next.field(""STR"").value);"	0
540	10	orientechnologies_orientdb	LuceneSpatialMiscFunctionsTest#testStWithinPoint	"assertEquals(true,next.field(""STR""));"	"ODocumentprevious=next.field(""STR"");"	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertTrue(expected.containsAll(actual));	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertNotEquals(expected,actual);	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertTrue(expected==actual);	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertTrue(expected.matches(actual));	0
541	10	adlnet_jxapi	SubStatementTest#testGetAttachments	assertNotNull(actual);	assertThat(actual,is(expected));	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(1,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(2,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(100,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(200,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(4,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(3,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertThat(addState.getOperationCount(),is(0L));	0
542	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput	assertEquals(150,addState.getOperationCount());	assertThat(addState.getOperationCount(),equalTo(1));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	"assertTrue(StringUtils.isNonZero(""STR""));"	1
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertTrue(StringUtils.isNonZero(null));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertThat(StringUtils.isNonZero(null),is(false));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	"assertThat(StringUtils.isNonZero(""STR""),is(false));"	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
543	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNonZero	"assertTrue(StringUtils.isNonZero(""STR""));"	assertTrue(StringUtils.isNonZero(null));	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(RANK.dir(),hasItem(""STR"",""STR""));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasSize(1));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasSize(2));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	Rankrank=newRank();	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attribute(""STR"",""STR""),attribute(""STR"",""STR""))));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attribute(""STR"",""STR""))));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR""),dir(""STR"")),hasItem(""STR"",attrs(attr(""STR"",""STR""))));"	0
544	10	nidi3_graphviz-java	RankTest#dir	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.dir(LEFT_TO_RIGHT)));"	"assertThat(rank(dir(""STR"",""STR"")),deepEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR""))));"	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertThat(clazz,equalTo(exp));	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertThat(clazz,is(exp));	0
545	10	rockagen_commons-lib	ReflexUtilTest#testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[1]);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1Array,false,newLocale(""STR""));"	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1Array,false,Locale.ENGLISH);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1Array,true,Locale.ENGLISH);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1Array,true,newLocale(""STR""));"	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1Array,false,null);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1Array,false,Locale.GERMAN);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	"parser.parse(sample1Array,false,newLocale(""STR""));"	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1Array,false,Locale.ROOT);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	CommonEventevent1=parser.parse(sample1Array,false,Locale.ENGLISH);	0
546	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1Array,true,Locale.FRANCE));	parser.parse(sample1Array,false,Locale.ENGLISH);	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertFalse(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertTrue(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertTrue(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertFalse(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertTrue(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertTrue(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertFalse(CloudProviderUtils.isEC2(""STR""));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertThat(CloudProviderUtils.isEC2(""STR""),equalTo(false));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"assertThat(CloudProviderUtils.isEC2(""STR""),equalTo(true));"	0
547	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsEC2_withEC2	assertTrue(CloudProviderUtils.isEC2(PROVIDER_EC2));	"booleanisEC2=CloudProviderUtils.isEC2(""STR"");"	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(1,testData.getTestIndex());	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(0,testData.getTestIndex());	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(1,testData.getTestIndex());	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(0,testData.getTestIndex());	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	"assertEquals(""STR"",testData.getTestIndex());"	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),is(1));	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	1
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),equalTo(0));	0
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	1
548	10	hazelcast_hazelcast-simulator	RegistryTest#testGetTest	assertEquals(2,testData.getTestIndex());	assertThat(testData.getTestIndex(),is(0));	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",newCircle(env).getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",newCircle(env).getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.build().getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"System.out.println(""STR"");"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.getCircleBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.getCircle().getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.getCircleBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",env.getBuildNumber());"	0
549	10	trautonen_coveralls-maven-plugin	CircleTest#testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	finalStringbuildNumber=env.getBuildNumber();	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	assertThat(result,is(notNullValue()));	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertThat(result,is(equalTo(""STR"")));"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertEquals(""STR"",result);"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertThat(result,equalTo(""STR""));"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	assertThat(result,instanceOf(Integer.class));	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertThat(result,is(""STR""));"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertThat(result).isEqualTo(""STR"");"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	assertThat(result,instanceOf(String.class));	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	"assertEquals(""STR"",result);"	0
550	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testCreateValueSingleParameter	assertEquals(result,12);	assertThat(result,is(OType.INTEGER));	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getMonitorId());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getMonitorId());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertThat(responseRead.getResponse(),is(notNullValue()));	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getStreams().size());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getMessageCount());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getStreams().size());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(10,responseRead.getResponse().getMessageCount());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	"assertEquals(""STR"",responseRead.getResponse().getMonitorId());"	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(response,responseRead.getResponse());	0
551	10	orientechnologies_orientdb	ORemotePushMessagesTest#testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	"assertEquals(""STR"",responseRead.getResponse().getMessageId());"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",3L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",123L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",2L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",3L));"	0
552	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_long	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123456789));"	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertEquals(1,array.length);	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertEquals(2,array.length);	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertTrue(Arrays.equals(array,0));	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertTrue(Arrays.equals(newbyte[]{0,278539},array));	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertTrue(Arrays.equals(newbyte[0],array));	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertEquals(0,array.length);	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertTrue(Arrays.equals(newbyte[0],array));	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	"assertTrue(""STR"",Arrays.equals(newbyte[]{0},array));"	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertTrue(Arrays.equals(array,newbyte[0]));	0
553	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithSingleEntry	assertEquals(19,array.length);	assertEquals(1,array.length);	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	finalLinklink=finder.linkOf(a);	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	"MatcherassertThat(finder.linkOf(a),Matchers.hasItem(""STR""));"	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	"finalNodeb=node(""STR"").linkOf(a);"	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	finalLinklinkOf=finder.linkOf(a);	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	"finalLinklink=finder.linkOf(node(""STR""));"	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	"assertThat(finder.linkOf(a),equalTo(node(""STR"")));"	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	"assertThat(finder.linkOf(a),Matchers.hasItem(""STR""));"	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	finalLinkr=finder.linkOf(a);	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	finalLinkl=finder.linkOf(a);	0
554	10	nidi3_graphviz-java	GraphElementFinderTest#linkOf	assertEquals(a.links().get(0),finder.linkOf(finder.findLinks().get(0)));	MatcherassertThat(finder.linkOf(a),Matchers.hasSize(1));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertEquals(expected,actual);	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertEquals(expected,actual);	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertThat(actual,is(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertEquals(expected,actual);	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
555	10	adlnet_jxapi	ActorTest#testGetName	assertNotNull(actual);	assertEquals(MBOX_NAME,expected,actual);	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	1
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	1
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertEquals(Position.BEFORE,newJobLogger(jobMock,jsonMapperMock).getPosition());	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertEquals(Position.BEFORE,newJobLogger(jobMock,jsonMapperMock).getPosition());	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	JobLoggerlogger=newJobLogger(jobMock,jsonMapperMock);	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	finalJobLoggerlogger=newJobLogger(jobMock,jsonMapperMock);	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertThat(newJobLogger(jobMock).getPosition(),is(Position.BEFORE));	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	JobLoggerlogger=newJobLogger(jobMock);	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertThat(newJobLogger(jobMock,jsonMapperMock).getPosition(),is(Position.BEFORE));	0
556	10	trautonen_coveralls-maven-plugin	JobLoggerTest#testGetPosition	assertEquals(Position.BEFORE,newJobLogger(jobMock).getPosition());	assertEquals(Position.BEFORE,newJobLogger(jobMock,logMock).getPosition());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(0,empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(smallArray.length,empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(0,empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(1,empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(small.remaining(),empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(smallArray.remaining(),empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertTrue(empty.remaining()==0);	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(4,empty.remaining());	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertThat(empty.remaining(),is(0));	0
557	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToEmpty	assertArrayEquals(smallArray,small.array());	assertEquals(0,small.remaining());	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR"");"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""));"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=""STR"";"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringmarkdown=m.markdown(""STR"");"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR"");"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",m.markdown(""STR""));"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""+""STR""));"	0
558	10	myabc_markdownj	HandleHtmlInlineTagsTest#testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR""+""STR"");"	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	"executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.addVertex(""STR"");}}).get();"	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.begin();}}).get();	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.end();}}).get();	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.commit();}}).get();	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	"executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.createVertexType(""STR"");}}).get();"	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.close();}}).get();	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){}}).get();	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	"executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.begin();graph.addVertex(""STR"");}}).get();"	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	"executorService.submit(newRunnable(){@Overridepublicvoidrun(){graph.addVertex(""STR"",""STR"");}}).get();"	0
559	10	orientechnologies_orientdb	NestedTxTest#testNestedTx	"assertTrue(!vertexExists(graph,""STR""));"	executorService.submit(newRunnable(){@Overridepublicvoidrun(){}});	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	ClassPathLoaderloader=newClassPathLoader(base);	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	finalClassPathLoaderloader=newClassPathLoader(base);	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"ClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"");"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",0),is(nullValue()));"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",-1L),is(nullValue()));"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"finalClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",0L),is(nullValue()));"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",-1),is(nullValue()));"	0
560	10	nidi3_raml-loader	LoaderTest#jarInClassPathNotModified	"assertNull(newClassPathLoader(""STR"").fetchResource(""STR"",newDate(130,0,0).getTime()-1));"	"assertThat(newClassPathLoader(base).fetchResource(""STR"",1L),is(nullValue()));"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(""STR"",formatted);"	1
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(""STR"",format);"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(""STR"",formatted);"	1
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertTrue(formatted.contains(""STR""));"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertThat(formatted,is(""STR""));"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertThat(formatted).isEqualTo(""STR"");"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(format,""STR"");"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(""STR"",format);"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"System.out.println(""STR""+formatted);"	0
561	10	trautonen_coveralls-maven-plugin	TimestampParserTest#testParseSimpleFormat	"assertEquals(""STR"",formatted);"	"assertEquals(format,""STR"");"	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>tree=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(1,treeBucket.size());	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(2,treeBucket.size());	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>leafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,true,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	OSBTreeBonsaiBucket<Long,OIdentifiable>nonLeafBucket=newOSBTreeBonsaiBucket<>(treeBucket,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE);	0
562	10	orientechnologies_orientdb	OSBTreeBonsaiNonLeafBucketTest#testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(2,treeBucket.size());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.SUCCESS,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.BAD,response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.OK));	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
563	10	Yubico_yubico-java-client	YubicoClientTest#testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus(),ResponseStatus.OK);	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertEquals(""STR"",simulatorProperties.getUser());"	1
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertThat(simulatorProperties.getUser(),equalTo(""STR""));"	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertThat(simulatorProperties.getUser(),is(""STR""));"	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertEquals(""STR"",simulatorProperties.getUser());"	1
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertThat(simulatorProperties.getUser(),is(equalTo(""STR"")));"	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	"assertThat(simulatorProperties.getUser()).isEqualTo(""STR"");"	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	assertNull(simulatorProperties.getUser());	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	assertNotNull(simulatorProperties.getUser());	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	Stringuser=simulatorProperties.getUser();	0
564	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testInit_customFile	"assertEquals(""STR"",simulatorProperties.getUser());"	assertThat(simulatorProperties.getUser(),nullValue());	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertThat(actual,equalTo(agent));	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertEquals(MBOX,actual);	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertNotNull(actual);	1
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertThat(actual,is(agent));	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertThat(actual,instanceOf(Agent.class));	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
565	10	adlnet_jxapi	StatementTest#testSetAuthority	assertNotNull(actual);	assertEquals(MBOX,actual.toString());	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(0,1);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,1);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,0);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,2);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,1);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(0,2);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,0);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,2);	0
566	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(555,0);	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(BuildInfoUtils.DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	assertEquals(BuildInfoUtils.DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(null));	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(BuildInfoUtils.DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	assertEquals(BuildInfoUtils.DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(null));	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(null));	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(0,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	"assertEquals(BuildInfoUtils.DEFAULT_FALLBACK_MINOR_VERSION+1,BuildInfoUtils.getMinorVersion(""STR""));"	0
567	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetMinorVersion_whenVersionCannotBeFound_thenReturnDefaultVersion	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,getMinorVersion(null));	assertEquals(DEFAULT_FALLBACK_MINOR_VERSION,BuildInfoUtils.getMinorVersion(null));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor(0),is(Constants.WHITE));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('a'),is(Constants.WHITE));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor(0));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('0'),is(Constants.WHITE));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor(0));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	cm.okcolors(nfa);	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor('a'));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.WHITE,cm.getcolor('a'));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(Constants.NOSUB,cm.getcolor(0));	0
568	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThat(cm.getcolor('a'),is(Constants.BLUE));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	finalOCompositeKeycompositeKeyThree=newOCompositeKey();	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertEquals(0,compositeKeyOne.compareTo(compositeKeyTwo));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertEquals(1,compositeKeyOne.compareTo(compositeKeyTwo));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertTrue(compositeKeyOne.compareTo(compositeKeyTwo)<0);	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertEquals(0,compositeKeyOne.compareTo(compositeKeyTwo));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertTrue(compositeKeyOne.compareTo(compositeKeyTwo)<0);	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertTrue(0<compositeKeyOne.compareTo(compositeKeyTwo));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	compositeKeyTwo.addKey(2);	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertTrue(0==compositeKeyOne.compareTo(compositeKeyTwo));	0
569	10	orientechnologies_orientdb	OCompositeKeyTest#testCompareToSymmetryOne	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),-1);	assertTrue(compositeKeyOne.compareTo(compositeKeyTwo)==0);	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(0));"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	assertEquals(0,cm.count(RpcConfigs.CONNECTION_NUM_KEY));	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"cm.removeAll(""STR"");"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"intcount=cm.count(""STR"");"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(equalTo(0)));"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR"")).isEqualTo(0);"	0
570	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveAllConnsOfSpecifiedPoolKey	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),equalTo(0));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),is(true));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),is(false));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	1
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),equalTo(false));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertThat(map.containsKey(""STR""),equalTo(true));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertTrue(map.containsKey(""STR""));"	1
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	"assertFalse(map.containsKey(""STR""));"	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertThat(map.containsKey(1),is(true));	0
571	10	gvlasov_collections-utils	ZippedMapTest#constructsFromEquallySizedLists	"assertTrue(map.containsKey(""STR""));"	assertThat(map.containsKey(1),is(false));	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertEquals(""STR"",joined);"	1
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertEquals(""STR"",joined);"	1
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertThat(joined,is(""STR""));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertThat(joined,is(equalTo(""STR"")));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertTrue(joined.contains(""STR""));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertTrue(joined.contains(""STR""));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertThat(joined).isEqualTo(""STR"");"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertThat(joined,equalTo(""STR""));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertThat(joined,containsString(""STR""));"	0
572	10	hazelcast_hazelcast-simulator	FormatUtilsTest#testJoin	"assertEquals(""STR"",joined);"	"assertTrue(joined.contains(""STR""));"	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertEquals(expected,actual);	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertEquals(expected,actual);	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertEquals(expected,actual);	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertThat(actual,is(expected));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
573	10	adlnet_jxapi	ActivityDefinitionTest#testGetInteractionType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	id=doc.save(db.getClusterNameById(db.getDefaultClusterId()));	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	doc1.save(db.getClusterNameById(db.getDefaultClusterId()));	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	doc1=db.load(id.getIdentity());	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	doc1=db.save(db.getClusterNameById(db.getDefaultClusterId()));	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	doc=db.load(id.getIdentity());	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	"id=doc.save(db.getClusterNameById(""STR""));"	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	"doc1=db.save(db.getClusterNameById(db.getDefaultClusterId()),""STR"");"	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	ODirtyManagermanager=newDirtyManager(db);	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	db.save(id.getIdentity());	0
574	10	orientechnologies_orientdb	DirtyManagerReferenceCleanTest#testReferDeletedDocument	assertFalse(ORecordInternal.getDirtyManager(doc).getUpdateRecords().contains(doc1));	"id=doc.save(db.getClusterNameById(db.getDefaultClusterId()+""STR""));"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",newNotImplementedHandler().getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NOT_IMPLEMENTED_HANDLER.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NOT_IMPLEMENTED_HANDLER.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",newNotImplementedHandler().getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NOT_IMPLICIT_HANDLER.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NOT_IMPLICIT_HANDLER.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",notImplementedHandler().getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NotImplementedHandler.GET_MIME_TYPE.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NotImplementedHandler.GET_NOT_IMPLEMENTED_HANDLER.getMimeType());"	0
575	10	NanoHttpd_nanohttpd	TestNanolets#testNotImplementedHandlerGetMimeType	"assertEquals(""STR"",newRouterNanoHTTPD.NotImplementedHandler().getMimeType());"	"assertEquals(""STR"",NotImplementedHandler.GET_MIME_TYPE.getMimeType());"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(""STR"");"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url,is(equalTo(""STR"")));"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url,is(""STR""));"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url,equalTo(""STR""));"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(url.contains(""STR""));"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url).isEqualToIgnoringCase(""STR"");"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(url.contains(""STR""));"	0
576	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(""STR""+System.getProperty(Keys.CUCUMBERPRO_URL)+""STR"");"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis(env).getName());"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	assertEquals(TRAVIS_NAME,newTravis(env).getName());	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis().getName());"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis(env).getName());"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	finalTravistravis=newTravis(env);	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis(null).getName());"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	Travistravis=newTravis(env);	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis().getName());"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"System.out.println(""STR"");"	0
577	10	trautonen_coveralls-maven-plugin	TravisTest#testGetName	"assertEquals(""STR"",newTravis(env()).getName());"	"assertEquals(""STR"",newTravis(null).getName());"	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(true));	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.hasNext(),is(false));	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
578	10	orientechnologies_orientdb	RemoteTransactionSupportTest#testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	"assertThat(result,hasItem(""STR""));"	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	"assertTrue(map.containsKey(""STR""));"	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	"assertEquals(""STR"",map.get(""STR""));"	1
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	"assertTrue(map.containsKey(""STR""));"	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	"assertEquals(""STR"",map.get(""STR""));"	1
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	assertEquals(1,map.size());	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	assertEquals(1,map.size());	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	assertEquals(1,map.size());	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	assertThat(map).hasSize(1);	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	assertEquals(map.size(),1);	0
579	10	OpenLiberty_ci.common	DevUtilTest#testGetDebugEnvironmentVariables	"assertEquals(""STR"",map.get(""STR""));"	"assertEquals(""STR"",map.get(""STR"")[0]);"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.createClass(""STR"");"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property,classA.getProperty(""STR""));"	1
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.createClass(""STR"");"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.createClass(""STR"",OType.STRING);"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	classA.addProperty(property);	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	db.reload();	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"OClassclassB=schema.getOrCreateClass(""STR"");"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.createClass(""STR"",OType.STRING);"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"property.setValue(""STR"");"	0
580	10	orientechnologies_orientdb	AlterPropertyTest#testPropertyRenamingReload	"assertEquals(property,classA.getProperty(""STR""));"	"ClassclassB=schema.getOrCreateClass(""STR"");"	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertEquals(4,results.size());	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
581	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testConvertDouble	assertEquals(results.size(),1);	assertThat(results.size(),equalTo(1));	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)1,from,to);	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertEquals(1,runtime.getcolor('a'));	1
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)2,from,to);	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)0,from,to);	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	verify(nfa,times(1)).newarc(compiler.PLAIN,(short)1,from,to);	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertThat(runtime.getcolor('a'),is((short)1));	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertEquals(0,runtime.getcolor('a'));	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertEquals(Short.valueOf(1),runtime.getcolor('a'));	0
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertEquals(1,runtime.getcolor('a'));	1
582	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSimpleRange	assertEquals(1,runtime.getcolor('a'));	assertThat(runtime.getcolor('a'),equalTo((short)1));	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(0,tokens.size());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	"assertThat(tokens,hasItem(newWord(""STR"")));"	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(1,tokens.size());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertTrue(tokens.size()==1);	0
583	10	PeterisP_morphology	TokenizeTest#falseBruteSplit	assertEquals(3,tokens.size());	assertTrue(tokens.size()==2);	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertEquals(1,results.size());	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertEquals(results.size(),2);	1
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertEquals(3,results.size());	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertTrue(results.size()>0);	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertThat(results.size(),is(2));	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertThat(results.size(),is(1));	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertEquals(1,results.size());	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertTrue(results.size()>0);	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertTrue(results.size()==2);	0
584	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testCompositeIndexWithoutNullValues	assertEquals(results.size(),2);	assertTrue(results.size()==1);	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),is(equalTo(expected)));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),equalTo(expected));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),iterates(1,2,3));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),iterates(expected));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),hasItem(expected));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Collectors.toLinkedHashSet());	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),is(expected));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	expected.add(4);	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertThat(Collectors.toLinkedHashSet(),hasItems(expected));	0
585	10	gvlasov_collections-utils	CollectorsTest#toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Collectors.toLinkedHashSet());	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR"")))));"	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	assertThat(actual,equalTo(Verb.COMMENTED));	0
586	10	adlnet_jxapi	VerbsTest#testCommented	assertNotNull(actual);	"assertThat(actual,is(not(equalTo(createVerb(""STR""))))));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertThat(w.getValue(""STR""),is(""STR""));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertEquals(""STR"",w.getValue(""STR""));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertThat(w.getValue(""STR""),equalTo(""STR""));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertEquals(""STR"",w.getValues(""STR"").getValue(""STR""));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertThat(w.getValue(""STR""),is(equalTo(""STR"")));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertTrue(w.getValue(""STR"").equals(""STR""));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"AttributeValuesv=w.getValues(""STR"");"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"assertThat(w.getValue(""STR""),is(nullValue()));"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"AttributeValuesvalues=w.getValues(""STR"");"	0
587	10	PeterisP_morphology	MorphologyTest#feminineAdjectives	"assertEquals(""STR"",w.getBestWordform().getValue(AttributeNames.i_Lemma));"	"AttributeValuesa=w.getValues(""STR"");"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"assertEquals(""STR"",m.markdown(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.hasItem(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.containsString(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.equalTo(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.hasString(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.is(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),Matchers.hasItemString(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"MatcherassertThat(m.markdown(""STR""),is(""STR""));"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"Stringmarkdown=m.markdown(""STR"");"	0
588	10	myabc_markdownj	PreserveHtmlBlockTagsTest#testRoundtripPreservesTags	assertEquals(value,m.markdown(value).trim());	"Stringh=m.markdown(""STR"");"	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(1,res.intValue());	1
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(0,res.intValue());	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(1,res);	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(3,res.intValue());	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertThat(res,is(1));	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertThat(res).isEqualTo(1);	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertEquals(0,res);	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(res>0);	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertTrue(res==1);	0
589	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectDeleteBinary	assertEquals(1,res.intValue());	assertThat(res).isEqualTo(0);	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertThat(extr.getPropertyNames(),hasItem(""STR""));"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertTrue(extr.getPropertyNames().contains(""STR""));"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertTrue(extr.getPropertyNames().contains(""STR""));"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertEquals(Sets.newHashSet(""STR"",""STR""),extr.getPropertyNames());"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertEquals(Arrays.asList(""STR"",""STR""),extr.getPropertyNames());"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertFalse(extr.getPropertyNames().contains(""STR""));"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertEquals(Sets.newHashSet(""STR""),extr.getPropertyNames());"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertEquals(Collections.singleton(""STR""),extr.getPropertyNames());"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertThat(extr.getPropertyNames(),containsInAnyOrder(""STR"",""STR""));"	0
590	10	orientechnologies_orientdb	OResultSerializationTest#testSimpleEmbeddedDoc	assertEquals(document.getPropertyNames(),extr.getPropertyNames());	"assertEquals(Arrays.asList(""STR"",""STR""),extr.getProperties());"	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	List<TestCase>testCaseList=testSuite.getTestCaseList();	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertEquals(1,testSuite.getTestCaseList().size());	1
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertEquals(0,testSuite.getTestCaseList().size());	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertEquals(1,testSuite.getTestCaseList().size());	1
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	testSuite.getTestCaseList();	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertTrue(testSuite.getTestCaseList().isEmpty());	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertNotNull(testSuite.getTestCaseList());	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertThat(testSuite.getTestCaseList(),hasSize(1));	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertTrue(testSuite.getTestCaseList().isEmpty());	0
591	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#test_whenNonExistingTestFile	assertEquals(1,testSuite.getTestCaseList().size());	assertTrue(testSuite.getTestCaseList().size()==1);	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertThat(poller.getObjectQueryPreparer()).isEqualTo(this.mockObjectQueryPreparer);	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerresult=poller.getObjectQueryPreparer();	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerexpected=Mockito.mock(ObjectQueryPreparer.class);	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertThat(poller.getObjectQueryPreparer()).isSameAs(this.mockObjectQueryPreparer);	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerexpectedObjectQueryPreparer=Mockito.mock(ObjectQueryPreparer.class);	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=poller.getObjectQueryPreparer();	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	ObjectQueryPrepareractual=poller.getObjectQueryPreparer();	0
592	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	this.poller.getObjectQueryPreparer();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>superClasses=result.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>superClasses=result.getResult().getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>superClasses=superclass.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>classes=result.getResult().getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>classes=result.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>classes=superclass.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	"result=db.command(""STR""+className+""STR""+superclassName);"	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>superClasses=schema.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	List<OClass>superclasses=result.getSuperClasses();	0
593	10	orientechnologies_orientdb	OAlterClassStatementExecutionTest#testSuperclass	assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));	result.getResult().close();	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertFalse(binding.loadAsBoolean(""STR"",false));"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertFalse(binding.loadAsBoolean(""STR"",true));"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"booleanvalue=binding.loadAsBoolean(""STR"",false);"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertThat(binding.loadAsBoolean(""STR"",true),is(false));"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"booleanresult=binding.loadAsBoolean(""STR"",false);"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertThat(binding.loadAsBoolean(""STR"",false),is(false));"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertFalse(binding.loadAsBoolean(""STR"",false));"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"booleanvalue=binding.loadAsBoolean(""STR"",true);"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"booleanresult=binding.loadAsBoolean(""STR"",true);"	0
594	10	hazelcast_hazelcast-simulator	PropertyBindingTest#loadAsBoolean_nonExisting	"assertEquals(true,binding.loadAsBoolean(""STR"",true));"	"assertThat(binding.loadAsBoolean(""STR"",false),is(true));"	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	AssertJson.assertEquals(expected,actual);	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	assertThat(actual,is(expected));	0
595	10	adlnet_jxapi	AboutTest#testGetExtensions	assertNotNull(actual);	AssertEquals(expected,actual);	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(false));	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	assertThat(doc.isDirty(),is(true));	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
596	10	orientechnologies_orientdb	TrackedListTest#testClearTwo	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertTrue(results.iterator().hasNext());	1
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertEquals(1,results.size());	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertThat(results).hasSize(1);	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertTrue(results.iterator().hasNext());	1
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	"assertThat(results,hasItem(newSimpleVertex().setProperty(""STR"",""STR"")));"	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertThat(results).hasSize(2);	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertEquals(2,results.size());	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	"assertThat(results,hasItem(newSimpleVertex(""STR"")));"	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertThat(results,hasItem(0));	0
597	10	orientechnologies_orientdb	GraphCommandsTest#testAddValueSQL	assertTrue(results.iterator().hasNext());	assertThat(results,hasItem(1));	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(10.5D));	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertEquals(10.5D,result);	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertThat(result,equalTo(10.5D));	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertEquals(10.5D,result);	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertEquals(10.5D,result);	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertEquals(10.5D,result);	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertThat(result,is(equalTo(10.5D)));	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertTrue(resultinstanceofDouble);	1
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertEquals(1.5D,result);	0
598	10	orientechnologies_orientdb	OSQLFunctionAbsoluteValueTest#testPositiveDouble	assertTrue(resultinstanceofDouble);	assertThat(result,greaterThan(0));	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	"assertEquals(parsed.getType(),""STR"");"	1
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	"assertEquals(parsed.getType(),""STR"");"	1
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	"assertThat(parsed.getType(),is(""STR""));"	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	"assertThat(parsed.getType(),equalTo(""STR""));"	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	assertNull(parsed.getType());	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	assertNull(parsed.getType());	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	"assertTrue(parsed.getType().equals(""STR""));"	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	assertEquals(OURLHelper.TYPE_REMOTE,parsed.getType());	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	assertEquals(OURLHelper.TYPE_REMOTE,parsed.getType());	0
599	10	orientechnologies_orientdb	OURLHelperTest#testRemoteNoDatabase	"assertEquals(parsed.getType(),""STR"");"	Stringtype=parsed.getType();	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertEquals(2,ridBag.size());	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertEquals(1,ridBag.size());	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertThat(ridBag.size(),is(2));	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertEquals(2,ridBag.size());	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertTrue(ridBag.size()==2);	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertEquals(ridBag.size(),0);	1
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertThat(ridBag.size(),equalTo(2));	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertEquals(3,ridBag.size());	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertTrue(ridBag.size()>2);	0
600	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoNewDocuments	assertEquals(ridBag.size(),0);	assertTrue(ridBag.size()==1);	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"assertEquals(""STR"",m.decode(encoded));"	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg,m.decode(encoded));	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringdecoded=m.decode(encoded);	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(encoded,m.decode(encoded));	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(encoded,m.decode(billg));	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringtext=m.decode(encoded);	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringunencoded=m.decode(encoded);	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	Stringt=m.decode(encoded);	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"Stringh=""STR"";"	0
601	10	myabc_markdownj	EmailAddresses#testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	"Stringexpected=""STR"";"	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertEquals(false,frame.isFin());	1
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertTrue(frame.isFin());	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),is(false));	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),equalTo(false));	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertFalse(frame.isFin());	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertTrue(frame.isFin());	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertThat(frame.isFin(),is(true));	0
602	10	TooTallNate_Java-WebSocket	FramedataImpl1Test#testSetters	assertEquals(false,frame.isFin());	assertEquals(true,frame.isFin());	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,""STR"");"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-1.23d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUKRUS.convert(-1.23d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-1.5d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",GBP_STR_USD.convert(-0.5d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUKRUS.convert(-0.5d));"	0
603	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,null);	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(!hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertFalse(hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(!hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(result.exists());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(hasFeaturesShWarning.get());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(test.isEmpty());	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(hasFeaturesShWarning);	0
604	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDetectFeaturesSh	assertEquals(false,util.hasFeaturesSh.get());	assertTrue(!hasFeaturesShWarning);	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
605	10	PeterisP_morphology	MorphologyTest#saites	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertNotNull(event);	1
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertThat(event,is(notNullValue()));	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertThat(event,is(not(nullValue())));	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertEquals(0,event.getHeaders().size());	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertEquals(1,event.getHeaders().size());	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertEquals(0,event.getHeaders().size());	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertEquals(0,event.getHeaderCount());	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertNotNull(event);	1
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertNull(event);	0
606	10	fluenda_ParCEFone	CEFParserTest#testMissingHeaders	assertNotNull(event);	assertEquals(0,event.getHeaderCount());	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",item.getProperty(""STR""));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").getValueAsInteger());"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(null,item.getProperty(""STR""));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,item.getProperty(""STR"").intValue());"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(emb1,item.getProperty(""STR""));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(emb1));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertNull(item.getProperty(""STR""));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(equalTo(emb1)));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),equalTo(emb1));"	0
607	10	orientechnologies_orientdb	RemoteQuerySupportTest#testQueryDoubleEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertThat(item.getProperty(""STR""),is(equalTo(""STR"")));"	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertThat(actual,is(expected));	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertThat(actual,is(equalTo(expected)));	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertEquals(MORE,actual);	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
608	10	adlnet_jxapi	StatementResultTest#testSetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(newODistributedRequestId(10,1000),to.getRequestId());	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(from.getRequestId(),to.getRequestId());	1
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	"assertEquals(""STR"",to.getRequestId());"	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(newODistributedRequestId(10,1000).getRequestId(),to.getRequestId());	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(from.getRequestId(),to.getRequestId());	1
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(to.getRequestId(),newODistributedRequestId(10,1000));	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	"assertEquals(""STR"",from.getRequestId());"	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(newODistributedRequestId(10,1000),from.getRequestId());	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertEquals(newODistributedRequestId(10,1000),to.getFixTask().getRequestId());	0
609	10	orientechnologies_orientdb	OCompleted2pcTaskTest#testSerialization	assertEquals(from.getRequestId(),to.getRequestId());	assertThat(to.getRequestId(),is(10));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertFalse(StringUtils.isNonZero(null));	1
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertTrue(StringUtils.isNonZero(null));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertThat(StringUtils.isNonZero(null),is(false));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertFalse(StringUtils.isNonZero(null));	1
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertFalse(StringUtils.isNonZero(null));	1
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertTrue(StringUtils.isNonZero(null));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertThat(StringUtils.isNonZero(null),equalTo(false));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	"assertFalse(StringUtils.isNonZero(""STR""));"	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertThat(StringUtils.isNonZero(null),is(true));	0
610	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	StringUtilsTest#testIsNullNonZero	assertFalse(StringUtils.isNonZero(null));	assertTrue(StringUtils.isNonZero(null));	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert().toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert(1).toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert().toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert(1).toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert(0).toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert(0).toString());"	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
611	10	redraiment_jactiverecord	TSqlBuilderTest#testInsert	"assertEquals(""STR"",sql.insert().into(""STR"").values(""STR"",""STR"").toString());"	"assertEquals(""STR"",sql.insert(null).toString());"	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.get(0).isUnknown());	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.isUnknown());	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isUnknown());	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	List<KoreanTokenizer.KoreanToken>tokens2=OpenKoreanTextProcessorJava.tokenize(text);	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(){@OverridepublicbooleanisUnknown(){returnfalse;}}));	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(){@OverridepublicbooleanisUnknown(){returntrue;}}));	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertTrue(tokens.isUnknown());	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken()));	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	assertFalse(tokens.isUnknown());	0
612	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testTokensToJavaKoreanTokenList	"assertEquals(""STR""+""STR"",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());"	"assertThat(tokens,hasItem(newKoreanTokenizer.KoreanToken(""STR"")));"	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,equalTo(expected));	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,is(expected));	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual,is(equalTo(expected)));	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	assertThat(actual).isEqualTo(expected);	0
613	10	1337joe_cubesensors-for-java	TestPressure#testToMillibar	assertEquals(expected,actual);	"assertEquals(expected+""STR"",actual);"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),is(""STR""));"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),is(equalTo(""STR"")));"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(factory.getDsn(),equalTo(""STR""));"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(nullValue()));	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertEquals(""STR"",factory.getDsn());"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(notNullValue()));	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(""STR"",factory.getDsn(),is(""STR""));"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	"assertThat(""STR"",factory.getDsn(),is(equalTo(""STR"")));"	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(equalTo(DEFAULT_DSN)));	0
614	10	tradier_dropwizard-raven	RavenAppenderFactoryTest#hasValidDefaults	assertNull(factory.getDsn());	assertThat(factory.getDsn(),is(DEFAULT_DSN));	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",this.objectName);"	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	assertEquals(1,this.attributeList.size());	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),eq(this.objectName));	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,null,this.objectName);	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	"verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),""STR"",this.objectName);"	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",this.getObjectName());"	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",objectName);"	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),anyObject());	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	"verify(target).copyOutAttributes(this.attributeList,this.attributeSetters,""STR"",this.object);"	0
615	10	amlinv_stat-collection-utils	AttributeInjectorTest#testCopyOutAttributes	"assertEquals(""STR"",this.target.stringValue);"	verify(target).copyOutAttributes(eq(this.attributeList),eq(this.attributeSetters),anyMap(),anyObject());	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),equalTo(""STR""));"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"",""STR"");"	0
616	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(""STR""));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(GBP_2_34));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(1.23d));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(1.23));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(GBP_1_23));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(0.5d));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(GBP_2_33));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(1.5d));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(GBP_20));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(GBP_1_34));"	0
617	10	javadev_moneytostr-russian	MoneyToStrTest#custom	"assertEquals(""STR"",moneyToStrUAH.convert(V_1D));"	"assertEquals(""STR"",moneyToStrUAH.convert(1));"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	"assertEquals(""STR"",newBamboo().getBuildUrl());"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	"System.out.println(""STR"");"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	"assertEquals(""STR"",newBamboo(env).getBuildUrl());"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	"assertEquals(""STR"",newBamboo().getBuildUrl());"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	"assertEquals(""STR"",newBamboo(env).getBuildUrl());"	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	assertEquals(Bamboo.DEFAULT_BUILD_URL,newBamboo().getBuildUrl());	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	assertEquals(Bamboo.DEFAULT_BUILD_URL,newBamboo().getBuildUrl());	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	assertEquals(Bamboo.DEFAULT_BUILD_URL,newBamboo(env).getBuildUrl());	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	assertEquals(Bamboo.DEFAULT_BUILD_URL,newBamboo(env).getBuildUrl());	0
618	10	trautonen_coveralls-maven-plugin	BambooTest#testGetBuildUrl	"assertEquals(""STR"",newBamboo(env()).getBuildUrl());"	assertNotNull(newBamboo().getBuildUrl());	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertEquals(2,statusTuples.size());	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertEquals(1,statusTuples.size());	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertEquals(3,statusTuples.size());	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertThat(statusTuples).hasSize(1);	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertTrue(statusTuples.size()>0);	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertEquals(0,statusTuples.size());	1
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertThat(statusTuples).hasSize(2);	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertThat(statusTuples.size(),is(2));	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertTrue(statusTuples.size()==1);	0
619	10	DigitalPebble_storm-crawler	JSoupParserBoltTest#testHTTPRobots	assertEquals(0,statusTuples.size());	assertTrue(statusTuples.size()==2);	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.getCiName(),is(""STR""));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),equalTo(""STR""));"	0
620	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_wercker	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.getCiName(),is(equalTo(""STR"")));"	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	"db.command(newOCommandSQL(""STR"")).execute();"	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertEquals(3,qResult.size());	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertEquals(2,qResult.size());	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertThat(qResult.size(),is(2));	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	"db.command(newOCommandSQL(""STR"")).execute(qResult);"	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertTrue(qResult.size()==2);	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>1);	0
621	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleClusters	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>2);	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	"assertEquals(""STR"",qResult);"	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertThat(qResult,is(true));	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	"assertEquals(""STR"",qResult.toString());"	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	"assertEquals(""STR"",qResult);"	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertEquals(1,qResult.intValue());	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertThat(qResult,instanceOf(Boolean.class));	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	"assertThat(qResult).isEqualTo(""STR"");"	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertThat(qResult,is(1));	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertThat(qResult,equalTo(1));	0
622	10	orientechnologies_orientdb	OCommandExecutorSQLScriptTest#testIfRealQuery	assertNotNull(qResult);	assertThat(qResult).isEqualTo(1);	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(),hasItem(""STR"",newText(""STR"")));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(""STR"",""STR""),hasItem(""STR"",""STR""));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),hasItem(""STR"",""STR""));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),deepEquals(attrs(newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR""))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),deepEquals(attrs(newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR""))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),deepEquals(attrs(newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR""),newTextAttribute(""STR"",""STR"")))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(Attributes.of(""STR"",""STR"")),deepEquals(attrs(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR""))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(""STR""),deepEquals(attrs(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))));"	0
623	10	nidi3_graphviz-java	LabelTest#decorated	"assertEquals(attrs(attr(""STR"",label.decorated()),attr(""STR"",true)),attrs(label.decorated()));"	"assertThat(label.decorated(),hasItem(""STR"",attrs(newTextAttribute(""STR"",""STR""))));"	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertThat(copied.size(),is(2));	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertThat(copied.size(),is(1));	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(1,copied.size());	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertThat(copied.size(),is(3));	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertThat(copied.size(),is(4));	0
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
624	10	arnohaase_a-foundation	AsCollectionViewTest#testAsCollectionView	assertEquals(2,copied.size());	assertEquals(3,copied.size());	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update().toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update().toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(null).toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(1).toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"sql.update(""STR"");"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(Simple.class).toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(1).toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"assertEquals(""STR"",sql.update(null).toString());"	0
625	10	redraiment_jactiverecord	TSqlBuilderTest#testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	"finalTSqlBuilderbuilder=sql.update(""STR"");"	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	testContainer.invoke(TestPhase.SETUP);	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	assertTrue(currentPhase.get()==TestPhase.SETUP);	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	"assertTrue(""STR"",currentPhase.get()instanceofSetUpTask);"	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	assertTrue(testContainer.isSetupCalled());	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	assertEquals(userDir,testContext.getUserDir());	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	testContainer.invoke(TestPhase.TEST);	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	assertTrue(currentPhase.get()==TestCase.SETUP);	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	assertTrue(testContext.isSetupCalled());	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	testContainer.invoke(TestPhase.REFRESH);	0
626	10	hazelcast_hazelcast-simulator	TestContainer_SetupTest#testSetup	assertTrue(test.setupCalled);	testContainer.invoke(TestPhase.SETUP_COMPLETE);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertNotNull(fields);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertEquals(1,fields.size());	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertEquals(2,fields.size());	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertThat(fields).hasSize(1);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertEquals(1,fields.size());	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertTrue(fields.size()>0);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertTrue(fields.size()==1);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertThat(fields).hasSize(2);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertTrue(fields.size()==2);	0
627	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields	assertEquals(3,fields.size());	assertThat(fields,hasItem(FieldByAnnotationTest.class));	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(2,tokens.size());	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(1,tokens.size());	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertTrue(tokens.contains(""STR""));"	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertThat(tokens,hasItem(""STR""));"	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	"assertTrue(tokens.contains(""STR""));"	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()>0);	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokens.isEmpty());	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()==2);	0
628	10	myabc_markdownj	CharacterProtectorTest#testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()==1);	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertThat(m,instanceOf(BusySpinningMetronome.class));	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertNotNull(m);	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.INSTANCE,m);	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.INSTANCE,m);	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertThat(m).isNotNull();	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertThat(m,instanceOf(MasterMetronome.class));	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.class,m.getMetronomeClass());	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertThat(m.getMetronomeClass(),instanceOf(BusySpinningMetronome.class));	0
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertEquals(BusySpinningMetronome.class,m.getClass());	1
629	10	hazelcast_hazelcast-simulator	MetronomeSupplierTest#withCustomMetronome	assertEquals(BusySpinningMetronome.class,m.getClass());	assertThat(m,instanceOf(CustomMetronome.class));	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(0,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(3,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(2,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(1,extr.fields());	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),is(1));	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(extr.fields(),1);	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertThat(extr.fields(),equalTo(1));	0
630	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertEquals(4,extr.fields());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertEquals(1,integer.get());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertEquals(1,integer.get());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	db.unregisterHook(iHookImpl);	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertEquals(0,integer.get());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertEquals(0,integer.get());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertEquals(2,integer.get());	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	db.removeHook(iHookImpl);	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertTrue(integer.get()>0);	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertTrue(integer.get()>0);	0
631	10	orientechnologies_orientdb	HookRegisterRemoveTest#addAndRemoveHookTest	assertEquals(3,integer.get());	assertTrue(integer.get()==1);	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"NanoHTTPD.mimeTypes().put(""STR"",""STR"");"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),equalTo(""STR""));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),is(equalTo(""STR"")));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"StringmimeType=Mime.getMimeTypeForFile(""STR"");"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertThat(Mime.getMimeTypeForFile(""STR""),is(""STR""));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"System.out.println(Mime.getMimeTypeForFile(""STR""));"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"Stringmime=Mime.getMimeTypeForFile(""STR"");"	0
632	10	NanoHttpd_nanohttpd	MimeTest#testManualMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",Mime.getMimeTypeForFile(""STR""+myPort+""STR""));"	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertThat(actual,is(expected));	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertTrue(actual==expected);	0
633	10	adlnet_jxapi	StatementTest#testGetVerb	assertNotNull(actual);	assertNotNull(actual);	1
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),instanceOf(RpcRequestProcessor.class));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),is(rpcRequestProcessor1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	1
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),is(rpcRequestProcessor2));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertThat(processorManager.getProcessor(cmd1),equalTo(rpcRequestProcessor1));	0
634	10	sofastack_sofa-bolt	ProcessorManagerTest#testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd2));	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=getBuildInfoUtils().getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	assertThat(getBuildInfoUtils().getHazelcastVersionFromJarOrNull(file.getAbsolutePath()),is(nullValue()));	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getPath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"Stringversion=getBuildInfoUtils(file).getHazelcastVersionFromJarOrNull(""STR"");"	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	StringhazelcastVersion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	StringhazelcastVersion=getBuildInfoUtils().getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringresult=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.getAbsolutePath());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(file.toURI().toString());	0
635	10	hazelcast_hazelcast-simulator	BuildInfoUtilsTest#testGetHazelcastVersionFromJarOrNull_whenJarContainsNoVersion_thenReturnNull	assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));	"Stringversion=BuildInfoUtils.getHazelcastVersionFromJarOrNull(""STR"");"	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	1
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	1
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertThat(panel.getTurtleCount()).isEqualTo(1);	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==1);	0
636	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest#testAddGhostTurtle	assertEquals(0,panel.getTurtleCount());	assertThat(panel.getTurtleCount(),is(1));	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	"assertFalse(usedProperties.contains(""STR""));"	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	"assertThat(usedProperties,hasItem(""STR""));"	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	"assertFalse(usedProperties.contains(""STR""));"	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	assertFalse(usedProperties.isEmpty());	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	assertFalse(usedProperties.isEmpty());	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	assertEquals(1,usedProperties.size());	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	assertEquals(0,usedProperties.size());	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
637	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testNotAllPropertiesBound	assertEquals(40,person.age);	assertFalse(usedProperties.isEmpty());	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertThat(actual,is(expected));	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	"assertEquals(expected.toString()+""STR"",actual.toString());"	0
638	10	adlnet_jxapi	ActorTest#testGetOpenid	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc1));	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc1));	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>oldRecords=manager.getNewRecords();	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>records=manager.getNewRecords();	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
639	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(testParameterReplacer,preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.mockParameterReplacer,preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(this.mockParameterReplacer,preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.parameterReplacer,preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(parameterReplacer,preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(this.preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	ParameterReplacerresult=preparer.getParameterReplacer();	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	this.preparer.setParameterReplacer(null);	0
640	10	amlinv_stat-collection-utils	ObjectQueryPreparerTest#testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(this.mockParameterReplacer,testTarget001.getParameterReplacer());	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"",""STR"");"	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	OpenKoreanTextProcessorJava.addNounsToDictionary(tokens);	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	OpenKoreanTextProcessor.addNounsToDictionary(tokens);	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"");"	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>wordsList=Arrays.asList(""STR"",""STR"");"	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Arrays.asList(""STR"",""STR"",""STR"");"	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	KoreanTokenizer.addNounsToDictionary(tokens);	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(text);	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	List<KoreanTokenizer.KoreanToken>words2=OpenKoreanTextProcessorJava.tokenize(tokens);	0
641	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	"List<String>words=Collections.singletonList(""STR"");"	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(tempClass);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(targetDir);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(targetDir,""STR""));"	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(tmpClass);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(src,""STR""));"	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	"util.cleanTargetDir(newFile(target,""STR""));"	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(src);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	util.cleanTargetDir(target);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	this.util.cleanTargetDir(tempClass);	0
642	10	OpenLiberty_ci.common	DevUtilTest#testCleanTargetDir	assertTrue(tempClass.exists());	Util.cleanTargetDir(tempClass);	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerA_lh2=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB0=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"loggerB0=loggerFactory.getLogger(""STR"",""STR"",1234);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA_lh0);	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"",""STR"",123);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA_lh0);	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerA_lh2=loggerFactory.getLogger(""STR"",""STR"",123);"	0
643	10	fluent_fluent-logger-java	TestFluentLogFactory#testGetLogger	assertTrue(loggerA0==loggerA1);	"FluentLoggerloggerB1=loggerFactory.getLogger(""STR"");"	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(actual,is(expected));	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(actual,equalTo(expected));	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(expected,actual,is(equalTo(expected)));	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(actual,is(equalTo(expected)));	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(actual,greaterThan(expected));	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertThat(actual).isEqualTo(expected);	0
644	10	adlnet_jxapi	ScoreTest#testGetMax	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(1)));	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(equalTo(1)));"	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result.intValue());	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,instanceOf(Integer.class));	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,equalTo(1));"	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(1));	0
645	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByValueSingleParameterArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(""STR"",result,is(1));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertThat(filterResult,is(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	"assertThat(filterResult,containsString(""STR""));"	0
646	10	DigitalPebble_storm-crawler	FastURLFilterTest#testImagesFilter	assertEquals(null,filterResult);	assertNotNull(filterResult);	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertEquals(""STR"",deflateExtension.toString());"	1
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertThat(deflateExtension.toString(),is(""STR""));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertThat(deflateExtension.toString(),is(equalTo(""STR"")));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertEquals(""STR"",deflateExtension.toString());"	1
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertThat(deflateExtension.toString(),equalTo(""STR""));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertTrue(deflateExtension.toString().contains(""STR""));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertThat(deflateExtension.toString()).isEqualTo(""STR"");"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertFalse(deflateExtension.toString().contains(""STR""));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertTrue(deflateExtension.toString().equals(""STR""));"	0
647	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testToString	"assertEquals(""STR"",deflateExtension.toString());"	"assertEquals(""STR"",deflateExtension.toString());"	1
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertEquals(""STR"",userProcessor.interest());"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertEquals(""STR"",userProcessor.interest());"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	assertEquals(1,userProcessors.size());	1
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertThat(userProcessors.containsKey(""STR""),is(true));"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertThat(userProcessors.get(""STR""),instanceOf(SimpleServerUserProcessor.class));"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertThat(userProcessors.get(""STR""),instanceOf(MultiInterestUserProcessor.class));"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertNotNull(userProcessors.get(""STR""));"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"verify(userProcessors).put(""STR"",userProcessor);"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	"assertThat(userProcessors.get(""STR""),is(notNullValue()));"	0
648	10	sofastack_sofa-bolt	UserProcessorRegisterHelperTest#testRegisterUserProcessor	assertEquals(1,userProcessors.size());	assertNotNull(userProcessor);	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertEquals(newTimezone,""STR"");"	1
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertEquals(newTimezone,""STR"");"	1
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertThat(newTimezone,is(""STR""));"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertThat(newTimezone).isEqualTo(""STR"");"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertEquals(""STR"",newTimezone.toString());"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertThat(newTimezone,equalTo(""STR""));"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"db.set(ODatabase.ATTRIBUTES.TIMEZONE,""STR"");"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"System.out.println(""STR""+newTimezone);"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	"assertThat(newTimezone,is(equalTo(""STR"")));"	0
649	10	orientechnologies_orientdb	ODatabaseDocumentTxTest#testTimezone	"assertEquals(newTimezone,""STR"");"	assertNull(newTimezone);	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isNotNull();	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass,notNullValue());	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getSimpleName());"	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(Object.class);	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass);"	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass!=null);	0
650	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenTypical	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyTestClass.class);	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.unset(""STR"");"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.unset(""STR"",null);"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	1
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(false));"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.set(""STR"",null);"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(true));"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(false));"	0
651	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#unset_value_is_null	"assertTrue(config.isNull(""STR""));"	"config.put(""STR"",null);"	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.getName());"	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertThat(actual,equalTo(agent));	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(MBOX,actual);	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	1
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	"assertEquals(""STR"",actual.getId());"	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(expected,actual);	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
652	10	adlnet_jxapi	StatementTest#testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertEquals(uuid,fromString);	1
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertEquals(uuid,fromString);	1
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	"System.out.println(""STR""+s);"	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertThat(fromString,equalTo(uuid));	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertThat(fromString).isEqualTo(uuid);	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertThat(fromString,is(uuid));	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	finalAUUIDall=AUUID.getAll(fromString);	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	finalAUUIDall=AUUID.all();	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertThat(fromString).isNotNull();	0
653	10	arnohaase_a-foundation	AUUIDTest#testAll	assertEquals(uuid,fromString);	assertNotNull(fromString);	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	1
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	1
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(""STR""),is(""STR""));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(null));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",CommUtil.escapeJava(null));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",StringEscapeUtils.escapeJava(""STR""));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertEquals(""STR"",StringEscapeUtils.escapeJava(""STR""));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(null),is(""STR""));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertThat(CommUtil.escapeJava(""STR""),equalTo(""STR""));"	0
654	10	rockagen_commons-lib	CommUtilTest#testEscape	"assertEquals(""STR"",CommUtil.escapeJava(""STR""));"	"assertNotNull(CommUtil.escapeJava(""STR""));"	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertThat(target.getWidth(),equalTo(42));	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertThat(target.getWidth(),is(42));	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertEquals(42,target.getWidth());	1
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertEquals(42,target.getWidth());	1
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertThat(target.getWidth(),equalTo(43));	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertThat(target.getWidth(),is(equalTo(42)));	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertEquals(1,target.getWidth());	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertThat(target.getWidth(),is(equalTo(43)));	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertEquals(40,target.getWidth());	0
655	10	jcodec_jcodec	PlatformTest#testNewInstance	assertEquals(42,target.getWidth());	assertEquals(2,target.getWidth());	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"System.out.println(""STR""+result);"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	"assertEquals(""STR""+3,result);"	0
656	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest#test3ReturnsFizz	"assertEquals(""STR"",result);"	assertEquals(FizzBuzzTDD.convert(3),result);	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(true));	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(true));	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),equalTo(false));	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertThat(qResult.hasNext(),is(false));	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	"qResult=db.query(""STR"");"	0
657	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testElements	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete().toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete().toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete(null).toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete(null).toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete(0).toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete(1).toString());"	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	sql.delete();	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	finalTSqlBuilderbuilder=newTSqlBuilder();	0
658	10	redraiment_jactiverecord	TSqlBuilderTest#testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"	"assertEquals(""STR"",sql.delete(1).toString());"	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertEquals(1,parse);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertTrue(parse>0);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertEquals(0,parse);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertTrue(parse>0);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertEquals(1,parse);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertEquals(1,parse);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertThat(parse,is(1));	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertThat(parse,is(0));	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertEquals(0,parse);	0
659	10	jcodec_jcodec	PlatformTest#testInvokeStatic	assertEquals(42,parse);	assertNotNull(parse);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(0);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	assertEquals(4,out.getPlaneData(0).length);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]result=out.getPlaneData(0);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(1);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(3);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(4);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	assertEquals(0,out.getPlaneData(0).length);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]imgData=out.getPlaneData(0);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]outData=out.getPlaneData(0);	0
660	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbN2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=transform.getPlaneData(0);	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
661	10	adlnet_jxapi	AgentTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	client2.enableConnectionMonitorSwitch();	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	System.clearProperty(Configs.CONN_MONITOR_SWITCH);	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),equalTo(true));	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	System.clearProperty(Configs.CONN_RECONNECT_SWITCH);	0
662	10	sofastack_sofa-bolt	GlobalSwitchTest#testUserSettings_takesEffect_before_SystemSettingsTrue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertThat(client1.isConnectionMonitorSwitchOn(),is(true));	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertEquals(0,results.size());	0
663	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testParamWithMatchesAndNot	assertEquals(results.size(),1);	assertTrue(results.size()==1);	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(1,result.size());	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(1,result.size());	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(a.size(),result.size());	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(1,result.size());	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(2,result.size());	0
664	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testCombineToSetCaseInsensitive	assertEquals(5,result.size());	assertEquals(1,result.size());	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"factory.drop(""STR"");"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertFalse(factory.exists(""STR""));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertThat(factory.exists(""STR""),is(false));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertThat(factory.exists(""STR""),is(true));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertTrue(factory.exists(""STR""));"	1
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertTrue(factory.exists(""STR""));"	1
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertFalse(factory.exists(""STR""));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertFalse(factory.exists(""STR""));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertThat(factory.exists(""STR""),equalTo(false));"	0
665	10	orientechnologies_orientdb	OrientDBRemoteTest#createDropRemoteDatabase	"assertTrue(factory.exists(""STR""));"	"assertTrue(factory.exists(""STR""));"	1
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"assertThat(response).isEqualTo(""STR"");"	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"assertThat(response,is(""STR""));"	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"assertEquals(""STR"",response);"	1
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"assertEquals(""STR"",response);"	1
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	assertEquals(start,response);	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	longend=System.currentTimeMillis()-start;	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"assertEquals(""STR"",response.toString());"	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	"System.out.println(""STR""+start);"	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	assertEquals(1,response);	0
666	10	sofastack_sofa-bolt	ConnectionCreatingTest#testCreateConnection	"assertEquals(""STR"",response);"	assertNotNull(response);	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	assertEquals(1,usedProperties.size());	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertTrue(usedProperties.contains(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertThat(usedProperties,hasItem(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	assertEquals(3,usedProperties.size());	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	assertEquals(2,usedProperties.size());	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	"assertFalse(usedProperties.contains(""STR""));"	0
667	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_nestedPropertiesTest#testBindAll	assertEquals(40,person.age);	assertTrue(usedProperties.size()==1);	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(2,amountPlusVat.intValue());	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(300,amountPlusVat.intValue());	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(1,amountPlusVat.intValue());	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(3,amountPlusVat.intValue());	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(equalTo(300)));	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(300));	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat).isEqualTo(300);	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(300,amountPlusVat);	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,equalTo(300));	0
668	10	orientechnologies_orientdb	DocumentTest#testEval	assertEquals(amountPlusVat.longValue(),360l);	assertTrue(amountPlusVat!=null);	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"OClassclass=schema.getClass(""STR"");"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"OClassoClass=schema.getClass(""STR"");"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"OClassclazz=schema.getClass(""STR"");"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"StringclassName=schema.getClass(""STR"").getName();"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"List<OClass>classes=schema.getClass(""STR"");"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"Classclazz=schema.getClass(""STR"");"	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	OClassclass=schema.getClass(name.getMethodName());	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	OClassoClass=schema.getClass(name.getMethodName());	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	schema.createAbstractClass(getName(),superClass(db));	0
669	10	orientechnologies_orientdb	LuceneSpatialClassCreateTest#testClasses	"assertNotNull(schema.getClass(""STR""));"	"Class[]classes=schema.getClass(""STR"");"	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertThat(clazz,equalTo(exp));	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp,clazz[0]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	1
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz[0]==exp[0]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[1]);	0
670	10	rockagen_commons-lib	ReflexUtilTest#testSuperClassesGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp[0],clazz[0]);	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertEquals(newDashed(),dashed());	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertEquals(dashed(),dashed());	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	"assertEquals(""STR"",Dashed.dashed().toString());"	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertEquals(DASHED,dashed());	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	"assertEquals(""STR"",dashed().toString());"	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertEquals(DASH,dashed());	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertThat(dashed(),is(newDashed()));	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertSame(dashed(),dashed());	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertThat(dashed(),equalTo(Dashed.RED));	0
671	10	nidi3_graphviz-java	FillStyleTest#dashed	"assertEquals(map(""STR"",""STR""),FillStyle.dashed().values);"	assertThat(dashed(),equalTo(DASHED));	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCiEnvironment(env);	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv=newCiEnvironment(env);	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenvironment=newCiEnvironment(env);	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv=newCiEnvironment(env,""STR"");"	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(env,""STR"");"	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	CIEnvironmentenv2=newCIEnvironment(env);	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenvironment=newCiEnvironment(env,""STR"");"	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv=newCiEnvironment(""STR"",env);"	0
672	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_jenkins	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCiEnvironment(""STR"",env);"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertThat(filterResult,is(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertThat(filterResult,containsString(""STR""));"	0
673	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepth	assertEquals(null,filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ENGLISH);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,false,newLocale(""STR""));"	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ENGLISH);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"CommonEventevent=parser.parse(sample1,true,newLocale(""STR""));"	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,null);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.ROOT);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"parser.parse(sample1,false,newLocale(""STR""));"	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,null);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,false,Locale.GERMAN);	0
674	10	fluenda_ParCEFone	CEFParserTest#validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	CommonEventevent=parser.parse(sample1,true,Locale.ROOT);	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	Shippable	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippable	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
675	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForShippable	assertTrue(newShippable(env()).isSelected());	Shippable	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	1
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThat(test.get(24),is(11));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(11,test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(12,test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThat(test.get(24),equalTo(11));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(10,test.get(24));	0
676	10	jcodec_jcodec	CollectionsTest#testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(24,test.get(24));	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	assertThat(actual,is(instanceOf(Verb.class)));	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	assertThat(actual,is(not(notNullValue())));	0
677	10	adlnet_jxapi	VerbsTest#testResponded	assertNotNull(actual);	assertNotNull(actual);	1
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,1,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",1,2,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,-1,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,1,""STR""));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,1,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,2,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",1,0,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,-1,null));"	0
678	10	rockagen_commons-lib	CommUtilTest#testString	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",0,4,""STR""));"	"assertEquals(""STR"",CommUtil.subPostfix(""STR"",1,2,null));"	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertTrue(��uk��i.isRecognized());	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertFalse(��uk��i.isRecognized());	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertThat(��uk��i.isRecognized(),is(true));	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertTrue(��uk��i.isRecognized());	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertFalse(��uk��i.isRecognized());	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertThat(��uk��i.isRecognized(),equalTo(true));	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	"assertTrue(""STR"",��uk��i.isRecognized());"	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertThat(��uk��i.isRecognized(),equalTo(false));	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	assertThat(��uk��i.isRecognized(),is(false));	0
679	10	PeterisP_morphology	MorphologyTest#ņukši	assertTrue(ņukši.isRecognized());	"assertTrue(""STR"",��uk��i.isRecognized());"	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(AList.empty(),AList.nil());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(nil(),AList.empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(AList.nil(),AList.empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(AList.empty(),AList.nil());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertNotEquals(AList.nil(),AList.empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(nil(),AList.<Integer>empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(AList.nil(),AList.empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertNotEquals(nil(),AList.empty());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(empty(),AList.nil());	0
680	10	arnohaase_a-foundation	AListTest#testEquals2	assertEquals(AList.nil(),AList.nil());	assertEquals(AList.nil(),AList.EMPTY);	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertEquals(""STR"",wrapped.mkString());"	1
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"raw[2]=""STR"";"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertEquals(""STR"",wrapped.mkString());"	1
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertThat(wrapped.mkString(),is(equalTo(""STR"")));"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertThat(wrapped.mkString(),is(""STR""));"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertEquals(""STR"",wrapped[0].mkString());"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertEquals(""STR"",wrapped[0].mkString());"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	"assertThat(wrapped.mkString(),equalTo(""STR""));"	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	finalACollection<String>wrapped2=ACollectionHelper.asArrayCopy(wrapped);	0
681	10	arnohaase_a-foundation	AsArrayCopyTest#testIsolation	"assertEquals(""STR"",wrapped.mkString());"	assertThat(wrapped.mkString(),is(equalTo(raw[0])));	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,settings.getValue(OGlobalConfiguration.DB_POOL_MAX));	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=newOContextConfiguration(settings);	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationconfig=newOContextConfiguration();	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,settings.getValue(OGlobalConfig.DB_POOL_MAX));	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationcontext=newOContextConfiguration(settings);	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	Map<String,Object>configs2=newHashMap<>();	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationcontext=settings.getContext();	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	Map<String,Object>map=newHashMap<>();	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	OContextConfigurationcontext=newOContextConfiguration();	0
682	10	orientechnologies_orientdb	OrientDBConfigTest#testBuildSettingsFromMap	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,settings.getValue(OGlobalConfiguration.DATABASE_POOL_MAX));	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertEquals(NAME,agent.getName());	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertEquals(NAME,agent.getName());	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertEquals(NAME,agent.getName());	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertEquals(NAME,agent.getName());	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	"assertEquals(""STR"",agent.getName());"	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertThat(agent.getName(),is(NAME));	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	testAgent(agent);	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertNotNull(agent);	1
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertTrue(agentinstanceofStringAgent);	0
683	10	adlnet_jxapi	AgentTest#testAgentStringURI	assertNotNull(agent);	assertTrue(agent.getName().equals(NAME));	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertTrue(nenest.isRecognized());	1
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertFalse(nenest.isRecognized());	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertThat(nenest.isRecognized(),is(true));	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertThat(nenest.isRecognized(),equalTo(true));	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertThat(nenest.isRecognized(),equalTo(false));	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertThat(nenest.isRecognized(),is(false));	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertTrue(nenest.isRecognized());	1
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertTrue(nenest.isRecognized());	1
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertFalse(nenest.isRecognized());	0
684	10	PeterisP_morphology	MorphologyTest#noliegumu_lemma	assertTrue(nenest.isRecognized());	assertFalse(nenest.isRecognized());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	"assertFalse(newShippable(""STR"").isSelected());"	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(env).isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(null).isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(env).isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(null).isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable().isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	"assertFalse(newShippable(""STR"").isSelected());"	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable().isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(env).isSelected());	0
685	10	trautonen_coveralls-maven-plugin	ShippableTest#testIsSelectedForNothing	"assertFalse(newShippable(newHashMap<String,String>()->{
}).isSelected());"	assertFalse(newShippable(null).isSelected());	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"cm.remove(""STR"");"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertEquals(0,cm.count(""STR""));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),is(0));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertEquals(2,cm.count(""STR""));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertEquals(1,cm.count(""STR""));"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"intcount=cm.count(""STR"");"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"cm.removeConn(""STR"");"	0
686	10	sofastack_sofa-bolt	RpcConnectionManagerTest#testRemoveConn	assertEquals(2,cm.count(poolKey));	"assertThat(cm.count(""STR""),equalTo(0));"	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertEquals(bytes[0],1);	1
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertTrue(Arrays.equals(data,bytes));	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertThat(bytes,is(equalTo(data)));	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertEquals(2,bytes.length);	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertThat(bytes,equalTo(data));	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertNotNull(bytes);	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertThat(bytes).isEqualTo(data);	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertEquals(data,bytes);	0
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertEquals(bytes[0],1);	1
687	10	orientechnologies_orientdb	OWALPageV2ChangesPortionTest#testReadNoChanges	assertEquals(bytes[0],1);	assertEquals(data,bytes[0]);	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(nullValue()));	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertNotNull(event);	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(not(notNullValue())));	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertNull(event);	1
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	validator.validate(event);	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event).isNotNull();	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	assertThat(event,is(instanceOf(MessageEvent.class)));	0
688	10	fluenda_ParCEFone	CEFParserTest#invalidMessageValidationTest	assertNull(event);	"assertEquals(""STR"",event.getMessage());"	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertFalse(isInterrupted.get());	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertTrue(isInterrupted.get());	1
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertFalse(isInterrupted.get());	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertTrue(isInterrupted.get());	1
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertEquals(false,isInterrupted.get());	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertThat(isInterrupted.get(),is(true));	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertThat(isInterrupted.get(),equalTo(true));	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertThat(isInterrupted.get(),equalTo(false));	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertThat(isInterrupted.get(),is(false));	0
689	10	hazelcast_hazelcast-simulator	CommonUtils_MiscTest#testJoinThread_interrupted	assertTrue(isInterrupted.get());	assertTrue(!isInterrupted.get());	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	1
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,src,targetDir));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleanisGeneratedConfigFile=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertThat(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir),is(false));	0
690	10	OpenLiberty_ci.common	DevUtilTest#testNotGeneratedConfigFiles	assertFalse(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	booleangenerated=util.isGeneratedConfigFile(sourceFile,srcDir,targetDir);	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props,is(notNullValue()));	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.toString());"	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.class.getName()));"	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props,is(instanceOf(Properties.class)));	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.class.getName()));"	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	assertThat(props).isNotNull();	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.toString());"	0
691	10	fabric8io_fabric8-maven-plugin	SpringBootUtilTest#testYamlToPropertiesParsing	assertNotEquals(0,props.size());	"assertEquals(""STR"",props.getProperty(SpringBootUtilTest.PROPERTY_NAME));"	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertEquals(kindAndName.hashCode(),secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertEquals(kindAndName.hashCode(),secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	"KindAndNamethirdKindAndName=newKindAndName(""STR"",""STR"");"	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertEquals(kindAndName.hashCode(),secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertTrue(kindAndName.hashCode()==secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertNotEquals(kindAndName.hashCode(),secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertEquals(kindAndName.hashCode(),secondKindAndName.hashCode());	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertThat(kindAndName.hashCode(),equalTo(secondKindAndName.hashCode()));	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertThat(kindAndName.hashCode(),is(equalTo(secondKindAndName.hashCode())));	0
692	10	fabric8io_fabric8-maven-plugin	KindAndNameTest#testHashCode	assertEquals(1812739127,kindAndName.hashCode());	assertFalse(kindAndName.hashCode()==secondKindAndName.hashCode());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(newID,actual.get(0).getId());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertThat(actual,hasItem(newID));	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(1,actual.size());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertTrue(actual.contains(newID));	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(newID,actual.get(0).getID());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertEquals(2,actual.size());	0
693	10	adlnet_jxapi	ContentActivitiesTest#testSetCategory	assertNotNull(actual);	assertThat(actual,hasItems(newID));	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertTrue(augstp����u.isRecognized());	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertFalse(augstp����u.isRecognized());	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertThat(augstp����u.isRecognized(),is(true));	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertTrue(augstp����u.isRecognized());	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertThat(augstp����u.isRecognized(),equalTo(true));	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertThat(augstp����u.isRecognized(),is(false));	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertFalse(augstp����u.isRecognized());	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertThat(augstp����u.isRecognized(),equalTo(false));	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	"assertTrue(""STR"",augstp����u.isRecognized());"	0
694	10	PeterisP_morphology	MorphologyTest#daudzskaitlinieki	assertTrue(augstpapēžu.isRecognized());	assertEquals(true,augstp����u.isRecognized());	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.workerCount();	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount();	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.workerCount()-1;	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers().size();	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.workerCount()-2;	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers(agentAddress).workerCount();	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount()-1;	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers(2);	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.getWorkers().workerCount()-2;	0
695	10	hazelcast_hazelcast-simulator	RegistryTest#testGetWorkers_withHigherWorkerCountThanRegisteredWorkers	assertEquals(4,registry.workerCount());	registry.workerCount()+1;	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialize());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertThat(newSimpleLabel(""STR"").serialized(),is(""STR""));"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").html(true).serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",SimpleLabel.html().serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",SimpleLabel.create(""STR"").serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",newSimpleLabel().html(true).serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",SimpleLabel.from(""STR"").serialized());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialised());"	0
696	10	nidi3_graphviz-java	SimpleLabelTest#html	"assertEquals(""STR"",newSimpleLabel(""STR"",true).serialized());"	"finalSimpleLabellabel=newSimpleLabel(""STR"");"	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(0);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	assertEquals(4,out.getPlaneData(0).length);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]result=out.getPlaneData(0);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	assertEquals(0,out.getPlaneData(0).length);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(1);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]imgData=out.getPlaneData(0);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(3);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]outData=out.getPlaneData(0);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(4);	0
697	10	jcodec_jcodec	Yuv420pToRgbTest#testYuv420pToRgbH2N	assertArrayEquals(rgb,out.getPlaneData(0));	byte[]data=out.getPlaneData(2);	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertEquals(""STR"",newDeflateExtension.toString());"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertEquals(""STR"",newDeflateExtension.toString());"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertThat(newDeflateExtension.toString(),is(""STR""));"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertThat(newDeflateExtension.toString(),is(equalTo(""STR"")));"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertThat(newDeflateExtension.toString(),equalTo(""STR""));"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	1
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertEquals(newDeflateExtension.toString(),""STR"");"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertTrue(newDeflateExtension.toString().contains(""STR""));"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertTrue(newDeflateExtension.toString().equals(""STR""));"	0
698	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testCopyInstance	assertEquals(deflateExtension.toString(),newDeflateExtension.toString());	"assertEquals(newDeflateExtension.toString(),""STR"");"	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a,not(equalTo(b)));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a.cells,not(equalTo(b)));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a.cells,not(equalTo(b.cells)));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a.cells,equalTo(b.cells));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a,equalTo(b));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	Puzzlec=newPuzzle(swap(getSolution(),8,2));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a.cells,is(equalTo(b.cells)));	0
699	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#different_cells_means_different_puzzle	assertNotEquals(a,b);	assertThat(a.cells,is(not(b)));	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"doc2.field(""STR"",""STR"").save(db.getClusterNameById(db.getDefaultClusterId()));"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	db.commit();	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	assertThat(doc2,is(notNullValue()));	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"assertEquals(""STR"",doc2.field(""STR"").value);"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"doc2.field(""STR"",""STR"").save(db.clusterNameById(db.getDefaultClusterId()));"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"doc2.field(""STR"",""STR"").save();"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"assertEquals(""STR"",doc2.getField(""STR"").value);"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"doc2.field(""STR"",""STR"").save(db.getClusterNameById(db.defaultClusterId()));"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"assertTrue(doc2.field(""STR"",""STR"").isPersistent());"	0
700	10	orientechnologies_orientdb	NonDurableTxTest#testChangesStored	"assertEquals(""STR"",doc2.field(""STR""));"	"doc2.field(""STR"",""STR"").save(db.getClusterNameById(db.DEFAULTClusterId()));"	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertEquals(1287623847384l,result);	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertThat(result,is(equalTo(1287623847384l)));	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertEquals(1287623847384l,result);	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertEquals(1287623847384l,result);	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertThat(result,is(newObject[]{1287623847384l}));	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertThat(result,is(1287623847384l));	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertEquals(1287623847384l,result);	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertThat(result,equalTo(1287623847384l));	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertEquals(1287623847384l,result.longValue());	0
701	10	orientechnologies_orientdb	OSQLFunctionDecimalTest#testFromLong	assertEquals(result,newBigDecimal(1287623847384l));	assertThat(result,is(1L));	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(""STR""));"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(SPACE_SEPARATOR,macAddress.toString());	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),equalTo(""STR""));"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR""+SPACE_SEPARATOR+""STR"",macAddress.toString());"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR""+SPACE_SEPARATOR,macAddress.toString());"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertTrue(macAddress.toString().contains(""STR""));"	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(MAC_ADDRESS,macAddress.toString());	0
702	10	fluenda_ParCEFone	MacAddressTest#testAddressSpaceSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),containsString(""STR""));"	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertEquals(expected,actual);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertNotEquals(expected,actual);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertEquals(expected,actual);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertEquals(expected,actual);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertThat(actual,is(expected));	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertTrue(actual==expected);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertEquals(actual,expected);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertTrue(expected==actual);	0
703	10	adlnet_jxapi	ActivityStateTest#testGetRegistration	assertNotNull(actual);	assertSame(expected,actual);	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(RUR_RUS));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RUR_RUS));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(GBP_2_34));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(1.23d));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(3.14d));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(RUR));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_34));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(0.5d));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(GBP_1_23));"	0
704	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURRUS	"assertEquals(""STR"",moneyToStrRURRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(GBP_2_33));"	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
705	10	adlnet_jxapi	ActivityTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertThat(nameProperty.getName(),is(""STR""));"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertEquals(""STR"",nameProperty.getName());"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertEquals(""STR"",nameProperty.getName());"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertThat(nameProperty.getName(),equalTo(""STR""));"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(nameProperty.getName(),is(PROP_NAME));	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(nameProperty.getName(),is(nullValue()));	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertThat(nameProperty.getName(),is(PROP_NAME+""STR""));"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertTrue(nameProperty.getName().equals(""STR""));"	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(nameProperty.getName(),equalTo(PROP_NAME));	0
706	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getName(),PROP_NAME);	1
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertEquals(""STR"",log);"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertThat(log,containsString(""STR""));"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertThat(log,is(""STR""));"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertEquals(""STR"",log);"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertEquals(""STR""+TEST_ID+""STR"",log);"	0
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	assertNotNull(log);	1
707	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage	assertNotNull(log);	"assertThat(log).isEqualTo(""STR"");"	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertEquals(3,results.size());	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	"assertThat(results,hasItem(""STR""));"	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
708	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMethodsOnStrings	assertEquals(results.size(),1);	assertThat(results.size(),equalTo(1));	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.getAsString());	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").toString());"	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").getAsString());"	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.getAsString(""STR""));"	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get(0).toString());	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR"").asString());"	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.getName());	0
709	10	adlnet_jxapi	VerbTest#testSerialize	assertNotNull(actual);	assertEquals(expected,actual.get(0).getName());	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),equalTo(""STR""));"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"",""STR"");"	0
710	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"");"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(equalTo(yaml)));"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),is(yaml));"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertThat(config.toYaml(""STR""),equalTo(yaml));"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	1
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
711	10	cucumber-ltd_cucumber-pro-plugin-jvm	YamlConfigLoaderTest#merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",yaml,config.toYaml(""STR""));"	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
712	10	adlnet_jxapi	VerbTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	1
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertThat(e.executeJavascript(""STR"",""STR"",""STR"")).isEqualTo(""STR"");"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",f.executeJavascript(""STR"",""STR"",""STR""));"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"e.executeJavascript(""STR"",""STR"",""STR"");"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	1
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertThat(f.executeJavascript(""STR"",""STR"",""STR"")).isEqualTo(""STR"");"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",f.executeJavascript(""STR"",""STR"",""STR""));"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertThat(e.executeJavascript(""STR"",""STR"",""STR"")).isEqualTo(f.executeJavascript(""STR"",""STR"",""STR""));"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR""+""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	0
713	10	nidi3_graphviz-java	JavascriptEngineTest#jdkOk	"assertEquals(""STR"",e.executeJavascript(""STR"",""STR"",""STR""));"	"assertEquals(""STR"",f.executeJavascript(""STR"",""STR"",null));"	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertThat(simulatorProperties.getWorkerLastSeenTimeoutSeconds(),is(0));	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	intlastSeenTimeoutSeconds=simulatorProperties.getWorkerLastSeenTimeoutSeconds();	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertEquals(0,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	finalintlastSeenTimeoutSeconds=simulatorProperties.getWorkerLastSeenTimeoutSeconds();	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertThat(simulatorProperties.getWorkerLastSeenTimeoutSeconds(),is(600));	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertThat(simulatorProperties.getWorkerLastSeenTimeoutSeconds(),is(60000));	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertThat(simulatorProperties.getWorkerLastSeenTimeoutSeconds(),is(60));	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertEquals(60,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	inttimeoutSeconds=simulatorProperties.getWorkerLastSeenTimeoutSeconds();	0
714	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetWorkerLastSeenTimeoutSeconds	assertEquals(180,simulatorProperties.getWorkerLastSeenTimeoutSeconds());	assertThat(simulatorProperties.getWorkerLastSeenTimeoutSeconds(),equalTo(0));	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNull(this.mockJ4pReadResponse1.getLog());	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.logger,this.mockJ4pReadResponse1.getLog());	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.log,this.mockJ4pReadResponse1.getLog());	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(this.log,this.getJ4pReadResponse1.getLog());	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=Mockito.mock(Logger.class);	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()!=null);	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	"assertTrue(""STR"",this.mockJ4pReadResponse1.getLog()instanceofLogger);"	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	Loggerlogger=this.mockJ4pReadResponse1.getLog();	0
715	10	amlinv_stat-collection-utils	JolokiaConnectionTest#testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.mockJ4pReadResponse1.getLog()instanceofLogger);	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(1,result.size());	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(2,result.size());	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertThat(result,hasItem(""STR""));"	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(3,result.size());	1
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertEquals(1,result.size());	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertThat(result).hasSize(1);	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertTrue(result.size()==1);	0
716	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testSource	assertEquals(3,result.size());	assertTrue(result.size()==2);	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	Shippable	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=newShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	Shippable	0
717	10	trautonen_coveralls-maven-plugin	ShippableTest#testGetBuildUrl	"assertEquals(""STR"",newShippable(env()).getBuildUrl());"	Shippable	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertThat(handshakeResponse.getHeader(""STR""),is(nullValue()));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertNull(handshakeResponse.getHeader(""STR""));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertNull(handshakeResponse.getHeader(""STR""));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertThat(handshakeResponse.getHeader(""STR""),nullValue());"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	assertThat(handshakeResponse,is(nullValue()));	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertEquals(""STR"",handshakeResponse.getHeader(""STR""));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertEquals(""STR"",handshakeResponse.getHeader(""STR""));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertEquals(null,handshakeResponse.getHeader(""STR""));"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	"assertThat(handshakeResponse.getHeader(""STR""),isNull());"	0
718	10	NanoHttpd_nanohttpd	WebSocketResponseHandlerTest#testWrongConnectionHeaderReturnsNullResponse	assertNull(handshakeResponse.getHeader(NanoWSD.HEADER_UPGRADE));	assertThat(handshakeResponse,is(notNullValue()));	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertTrue(��d��s.isRecognized());	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertFalse(��d��s.isRecognized());	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertThat(��d��s.isRecognized(),is(true));	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertTrue(��d��s.isRecognized());	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertThat(��d��s.isRecognized(),equalTo(true));	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	"assertTrue(""STR"",��d��s.isRecognized());"	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertFalse(��d��s.isRecognized());	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertThat(��d��s.isRecognized(),equalTo(false));	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	assertThat(��d��s.isRecognized(),is(false));	0
719	10	PeterisP_morphology	MorphologyTest#ēdīs	assertTrue(ēdīs.isRecognized());	"assertTrue(""STR"",��d��s.isRecognized());"	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(42,incompleteException.getPreferredSize());	1
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(42,incompleteException.getPreferredSize());	1
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertNotNull(incompleteException.getPreferredSize());	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(0,incompleteException.getPreferredSize());	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(0,incompleteException.getPreferredSize());	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertThat(incompleteException.getPreferredSize(),is(42));	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(4,incompleteException.getPreferredSize());	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertEquals(1,incompleteException.getPreferredSize());	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	assertTrue(incompleteException.getPreferredSize()==42);	0
720	10	TooTallNate_Java-WebSocket	IncompleteExceptionTest#testConstructor	assertEquals(42,incompleteException.getPreferredSize());	"assertEquals(""STR"",incompleteException.getPreferredSize());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertEquals(""STR"",newSimpleLabel(""STR"").value());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"Stringhtml=""STR"";"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertEquals(""STR"",newSimpleLabel(""STR"").nodeName().value());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertThat(newSimpleLabel(""STR"").value(),is(""STR""));"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertEquals(""STR"",newLabel(""STR"").value());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertEquals(""STR"",newSimpleLabel(""STR"").text(""STR"").value());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"SimpleLabellabel=newSimpleLabel(""STR"");"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"assertEquals(""STR"",label().nodeName().value());"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"Labellabel=newSimpleLabel(""STR"");"	0
721	10	nidi3_graphviz-java	LabelTest#nodeName	"assertEquals(""STR"",Label.nodeName().value());"	"finalSimpleLabellabel=newSimpleLabel(""STR"");"	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	"assertTrue(props.containsKey(""STR""));"	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	"assertThat(props.containsKey(""STR""),is(true));"	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	"assertTrue(props.containsKey(""STR""));"	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	assertEquals(1,props.size());	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	assertEquals(1,props.size());	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	assertEquals(2,props.size());	1
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	assertEquals(2,props.size());	1
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	"assertThat(props.get(""STR""),equalTo(""STR""));"	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	assertThat(props).hasSize(2);	0
722	10	orientechnologies_orientdb	GetPropertiesTest#getPropertiesFromEdge	assertEquals(2,props.size());	"assertThat(props.containsKey(""STR""),equalTo(true));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	1
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertThat(result,is(equalTo(""STR"")));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	1
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertThat(result,is(Arrays.asList(""STR"",""STR"")));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	assertThat(result,is(notNullValue()));	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertThat(result,is(equalTo(Arrays.asList(""STR"",""STR""))));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertThat(result,equalTo(Arrays.asList(""STR"",""STR"")));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertEquals(Arrays.asList(""STR""),result);"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertThat(result,is(Arrays.asList(""STR"")));"	0
723	10	orientechnologies_orientdb	OSQLMethodValuesTest#testWithOResult	"assertEquals(Arrays.asList(""STR"",""STR""),result);"	"assertEquals(Arrays.asList(""STR""),result);"	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	1
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertThat(comparison,is(0));	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(-1,comparison);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(-1,comparison);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison);	0
724	10	fluenda_ParCEFone	MacAddressTest#testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison==0);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(5)));	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertThat(result,is(5));	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertThat(result,equalTo(5));	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertEquals(4,result);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertEquals(5,result);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofInteger);	1
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofBoolean);	0
725	10	orientechnologies_orientdb	OMathExpressionTest#testAnd2	assertTrue(resultinstanceofInteger);	assertEquals(4,result);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertNotNull(source);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertEquals(s1,source);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertThat(source,equalTo(s1));	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertThat(source).isEqualTo(s1);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertEquals(s2,source);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertSame(s1,source);	1
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertThat(source,instanceOf(Source.class));	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertEquals(s1,source);	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	"assertEquals(""STR"",source.toString());"	0
726	10	trautonen_coveralls-maven-plugin	MultiSourceLoaderTest#testPrimarySource	assertSame(s1,source);	assertThat(source).isEqualTo(s2);	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",Records.rec(""STR""));"	1
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",Record.rec(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThat(Records.rec(""STR""),equalTo(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThat(Records.rec(""STR"")).isEqualTo(""STR"");"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThat(Records.rec(""STR""),is(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThat(rec(""STR""),equalTo(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertThat(rec(""STR""),is(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",records.rec(""STR""));"	0
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",Records.rec(""STR""));"	1
727	10	nidi3_graphviz-java	RecordsTest#rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",rec(""STR""));"	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(zigzagLine(),instanceOf(ZigzagLine.class));	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(zigzagLine(),deepEquals(newZigzagLine()));	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(zigzagLine(),equalTo(newZigzagLine()));	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(zigzagLine(),is(newZigzagLine()));	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertEquals(newZigzagLine(),zigzagLine());	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	ZigzagLinezigzagLine=zigzagLine();	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertEquals(ZIGZAG_LINE,zigzagLine());	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(ZigzagLine.zigzagLine(),is(newZigzagLine()));	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	ZigzagLinezigzagLine=newZigzagLine();	0
728	10	nidi3_graphviz-java	FillStyleTest#zigzagLine	"assertEquals(map(""STR"",""STR""),FillStyle.zigzagLine().values);"	assertThat(ZigzagLine.zigzagLine(),equalTo(newZigzagLine()));	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>updatedRecords=manager.getNewRecords();	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==1);	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()>0);	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(embeddedInList));	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>updated=manager.getNewRecords();	0
729	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleMapEmbedded	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()>1);	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
730	10	orientechnologies_orientdb	HttpDocumentTest#patchPartial	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(""STR""+getDatabaseName()+""STR"",get	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warn(""STR"");"	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(Level.WARN);	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(Level.WARN);	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.set(""STR"",LogLevel.WARN);"	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.setLevel(LogLevel.WARN);	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warn(""STR"",Level.WARN);"	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn();	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	"logger.warning(""STR"");"	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn(LogLevel.WARN);	0
731	10	cucumber-ltd_cucumber-pro-plugin-jvm	SystemLoggerTest#defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	logger.warn(Level.WARN);	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertThat(actual,is(expected));	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertNotEquals(expected,actual);	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertThat(actual,deepEquals(expected));	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
732	10	adlnet_jxapi	AgentProfileTest#testGetProfile	assertNotNull(actual);	assertTrue(actual.isEqualTo(expected));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
733	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testQuerySort	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedResult));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	Stepresult=process.getNextStep();	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	Stepstep=process.getNextStep();	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertThat(process.getNextStep(),is(nullValue()));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertThat(process.getNextStep(),Matchers.<Step>instanceOf(Step.class));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertThat(process.getNextStep(),instanceOf(Step.class));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertThat(process.getNextStep(),is(true));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertNull(process.getNextStep());	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertNull(process.getNextStep());	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertThat(process.getNextStep(),Matchers.<Step>is(true));	0
734	10	amlinv_stat-collection-utils	JmxAttributePollerTest#testSchedulerStepIsBlocking	assertTrue(process.getNextStep().isBlocking());	assertEquals(Step.EXECUTING,process.getNextStep());	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),404);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").response().getStatusLine().getStatusCode(),200);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),201);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),204);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").response().getStatusLine().getStatusCode(),404);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").createUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),200);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").getResponse().getStatusLine().getStatusCode(),409);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").response().getStatusLine().getStatusCode(),201);"	0
735	10	orientechnologies_orientdb	HttpIndexTest#updateValueMVCCError	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"assertEquals(create(""STR""+getDatabaseName()+""STR"").setUserName(""STR"").setUserPassword(""STR"").execute(),200);"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,times(1)).execute(any(Tuple.class));	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt,never()).execute(any(Tuple.class));	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(newMetadata(),md);	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	verify(bolt).execute(any(Tuple.class));	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").toString());"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(""STR"",md.get(""STR"").getName());"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt,times(1)).execute(eq(tuple(""STR"",""STR"")));"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(md.get(""STR""),newMetadata());"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"assertEquals(md.get(""STR""),metadata);"	0
736	10	DigitalPebble_storm-crawler	FeedParserBoltTest#testNonFeedParsing	assertEquals(1,output.getEmitted().size());	"verify(bolt).execute(eq(tuple(""STR"",""STR"")));"	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(result,0);	1
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(result,0);	1
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertThat(result,is(0));	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(1,result);	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertThat(result,is(equalTo(0)));	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(1,result);	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(-1,result);	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(4,result);	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertEquals(2,result);	0
737	10	orientechnologies_orientdb	ORecordBytesTest#testFromInputStream_ReadEmpty	assertEquals(result,0);	assertThat(result,is(equalTo(1)));	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,is(""STR""));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult).isEqualTo(""STR"");"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,is(equalTo(""STR"")));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertThat(filterResult,equalTo(""STR""));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
738	10	DigitalPebble_storm-crawler	MaxDepthFilterTest#testDepthZero	assertEquals(null,filterResult);	"assertTrue(filterResult.contains(""STR""));"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",newJenkins().getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",jenkins.getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",newJenkins(env).getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",newJenkins().getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",newJenkins(env).getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",jenkins.getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",Jenkins.get().getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",createJenkins().getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"assertEquals(""STR"",createSlave().getBranch());"	0
739	10	trautonen_coveralls-maven-plugin	JenkinsTest#testGetBranch	"assertEquals(""STR"",newJenkins(env()).getBranch());"	"System.out.println(""STR"");"	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),equalTo(Options.FORMAT_MINIMAL));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertEquals(Options.Format.MINIMAL,options.format(Format.MINIMAL));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),is(equalTo(Options.FORMAT_MINIMAL)));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options).isEqualTo(Options.Format.MINIMAL);	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),equalTo(Options.DEFAULT_FORMAT));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),is(equalTo(Options.DEFAULT_FORMAT)));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),is(Options.FORMAT_MINIMAL));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),is(equalTo(Options.DEFAULT_OPTIONS)));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),is(equalTo(Options.NONE)));	0
740	10	nidi3_graphviz-java	OptionsTest#fromJsonMinimal	assertEquals(Options.create().engine(Engine.DOT).format(Format.PNG),options);	assertThat(options.format(Format.MINIMAL),equalTo(Options.DEFAULT_OPTIONS));	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventevent=parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventevent=parser.parse(sample1Array,true);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventevent1=parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventevent1=parser.parse(sample1Array,true);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	parser.parse(sample1Array,true);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	commonEvent=parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventexpected=parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	CommonEventcef=parser.parse(sample1Array,false);	0
741	10	fluenda_ParCEFone	CEFParserTest#validByteArrayMessageWithValidationTest	assertNotNull(parser.parse(sample1Array,true));	commonEvent=parser.parse(sample1Array,true);	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertTrue(turiene.isRecognized());	1
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertFalse(turiene.isRecognized());	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertThat(turiene.isRecognized(),is(true));	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertThat(turiene.isRecognized(),equalTo(true));	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertThat(turiene.isRecognized(),equalTo(false));	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertTrue(turiene.isRecognized());	1
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertThat(turiene.isRecognized(),is(false));	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertTrue(turiene.isRecognized());	1
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertFalse(turiene.isRecognized());	0
742	10	PeterisP_morphology	MorphologyTest#ticket9	assertTrue(turiene.isRecognized());	assertFalse(turiene.isRecognized());	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertEquals(sz,channelEmpty.size());	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertEquals(sz,channelEmpty.size());	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertThat(channelEmpty.size(),is(sz));	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertTrue(channelEmpty.size()==sz);	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	SeekableByteChannelchannelSeekable=writeToByteBuffer(ByteBuffer.allocate(sz));	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertThat(channelEmpty.size(),equalTo(sz));	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertEquals(0,channelEmpty.size());	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertEquals(0,channelEmpty.size());	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertThat(channelEmpty.size()).isEqualTo(sz);	0
743	10	jcodec_jcodec	ByteBufferSeekableByteChannelTest#testSize	assertEquals(0L,channelEmpty.size());	assertTrue(channelEmpty.size()==sz);	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR"",result);"	0
744	10	arnohaase_a-foundation	AJsonSerHelperTest#testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR""+""STR"",result);"	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	1
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringresult=stringSerializer.deserializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringdeserialized=stringSerializer.deserializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringserialized=stringSerializer.deserializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	"assertEquals(""STR"",stringSerializer.deserializeFromByteBufferObject(buffer));"	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	1
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringactual=stringSerializer.deserializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	stringSerializer.deserializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	stringSerializer.serializeFromByteBufferObject(buffer);	0
745	10	orientechnologies_orientdb	OUTFSerializerTest#testNativeDirectMemoryCompatibilityAsWhole	assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Stringserialized=stringSerializer.serializeFromByteBufferObject(buffer);	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
746	10	adlnet_jxapi	StatementTest#testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(equalTo(""STR"")));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(equalTo(""STR"")));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(""STR""));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(""STR""));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),equalTo(""STR""));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),equalTo(""STR""));"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
747	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(newArrayList<String>()->{
},null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(null,null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(null),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
748	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),null));"	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress();	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,3);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,10);	0
749	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetWorkerIndex	assertEquals(5,workerAddress(5,6).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,2);	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(-1));	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),equalTo(-1));	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),equalTo(0));	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertThat(p.getBlankIndex(),is(0));	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(0,p.getBlankIndex());	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(1,p.getBlankIndex());	0
750	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleTest#puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==0);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>expectedFetch=Optional.of(cal.getTime());	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>previousFetch=scheduler.schedule(Status.FETCHED,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>lastFetch=scheduler.schedule(Status.FETCHED,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>nextFetch=scheduler.schedule(Status.FETCHED,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>nextFetch=scheduler.schedule(Status.FETCH_ERROR,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	cal.setTime(cal.getTime());	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>previousFetch=scheduler.schedule(Status.FETCH_ERROR,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>nextFetch2=scheduler.schedule(Status.FETCH_ERROR,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	Optional<Date>nextFetch2=scheduler.schedule(Status.FETCHED,metadata);	0
751	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testCustomWithDot	assertEquals(DateUtils.round(cal.getTime(),Calendar.SECOND),DateUtils.round(nextFetch.get(),Calendar.SECOND));	assertEquals(Optional.of(cal.getTime()),nextFetch);	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringdecoded=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringunencoded=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	Stringdecoded=characterProtector.decode(encoded);	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringunprotected=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringunprotect=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringdecode=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringencoded2=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringdecrypted=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringcoded=characterProtector.decode(""STR"");"	0
752	10	myabc_markdownj	CharacterProtectorTest#testEncodeAndDecodeRoundtrip	"assertEquals(""STR"",characterProtector.decode(encoded));"	"Stringdecoder=characterProtector.decode(""STR"");"	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isTrue();"	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(1);	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(1);	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(1);"	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.size()).isEqualTo(2);	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.containsKey(""STR"")).isFalse();"	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers).hasSize(2);	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	"assertThat(headers.get(""STR"")).hasSize(2);"	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.keySet()).hasSize(1);	0
753	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#applyAuthorizationHeaderOnlyOnce	"assertTrue(headers.containsKey(""STR""));"	assertThat(headers.isEmpty()).isTrue();	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertFalse(newPerformanceStats().isEmpty());	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertThat(newPerformanceStats().isEmpty(),is(false));	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertTrue(newPerformanceStats().isEmpty());	1
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	PerformanceStatsstats=newPerformanceStats();	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertThat(newPerformanceStats().isEmpty(),is(true));	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertThat(newPerformanceStats().isEmpty(),equalTo(false));	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	finalPerformanceStatsstats=newPerformanceStats();	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertFalse(PerformanceStats.EMPTY.isEmpty());	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	assertThat(newPerformanceStats().isEmpty(),equalTo(true));	0
754	10	hazelcast_hazelcast-simulator	PerformanceStatsTest#testIsEmpty	assertTrue(newPerformanceStats().isEmpty());	PerformanceStatsstats=newPerformanceStats(0);	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_20,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(moneyToStrRUS,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_33,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(1.23d,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_34,Language.RUS));"	0
755	10	javadev_moneytostr-russian	MoneyToStrTest#checkPercentToStrRus	"assertEquals(""STR"",MoneyToStr.percentToStr(V_1_01D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,LANGUAGE_RUS));"	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertTrue(macAddress.isLocal());	1
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertFalse(macAddress.isLocal());	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertThat(macAddress.isLocal(),is(true));	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertTrue(macAddress.isLocal());	1
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertFalse(macAddress.isLocal());	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertThat(macAddress.isLocal(),is(false));	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertTrue(macAddress.isLocal());	1
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertEquals(false,macAddress.isLocal());	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertEquals(true,macAddress.isLocal());	0
756	10	fluenda_ParCEFone	MacAddressTest#testAddressLocal	assertTrue(macAddress.isLocal());	assertThat(macAddress.isLocal(),equalTo(true));	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	"assertEquals(""STR"",a.getResponseMessage());"	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(a.getResponseMessage(),RESPONSE_MESSAGE);	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	AttachmentResultb=newAttachmentResult(RESPONSE_MESSAGE,statements,attachments);	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(response_MESSAGE,a.getResponseMessage());	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getMessage());	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(response_message,a.getResponseMessage());	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	"assertEquals(""STR"",a.getMessage());"	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	assertEquals(a.getMessage(),RESPONSE_MESSAGE);	0
757	10	adlnet_jxapi	AttachmentResultTest#testGetResponseMessage	assertNotNull(a);	"assertEquals(a.getResponseMessage(),""STR"");"	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertFalse(deflateExtension.isClientNoContextTakeover());	1
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertTrue(deflateExtension.isClientNoContextTakeover());	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertThat(deflateExtension.isClientNoContextTakeover(),is(false));	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertFalse(deflateExtension.isClientNoContextTakeover());	1
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertEquals(false,deflateExtension.isClientNoContextTakeover());	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertThat(deflateExtension.isClientNoContextTakeover(),equalTo(false));	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertThat(deflateExtension.isClientNoContextTakeover(),is(true));	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	booleanisClientNoContextTakeover=deflateExtension.isClientNoContextTakeover();	0
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertFalse(deflateExtension.isClientNoContextTakeover());	1
758	10	TooTallNate_Java-WebSocket	PerMessageDeflateExtensionTest#testIsClientNoContextTakeover	assertFalse(deflateExtension.isClientNoContextTakeover());	assertTrue(deflateExtension.isClientNoContextTakeover());	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url).isEqualTo(OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_6_13,null));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertNotNull(url);	1
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url,is(notNullValue()));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url).isEqualTo(OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_6_13,OperatingSystem.LINUX));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	"assertThat(url).isEqualTo(""STR""+OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_6_13,null));"	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url).isEqualTo(OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_7,null));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	"assertEquals(""STR"",url.toString());"	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url,instanceOf(URL.class));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url).isEqualTo(OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_6_14,null));	0
759	10	AlejandroRivera_embedded-rabbitmq	OfficialArtifactRepositoryTest#rabbitMqRepoWillGenerateUrlForVersionsBelow3_7	assertNotNull(url);	assertThat(url).isEqualTo(OfficialArtifactRepository.RABBITMQ.getUrl(PredefinedVersion.V3_6_13,OperatingSystem.LENIENT));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results,hasItem(doc));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results.size(),is(1));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results.size(),is(2));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results,hasItems(doc));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results).hasSize(1);	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertEquals(2,results.size());	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results.size(),equalTo(1));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results.size(),equalTo(2));	0
760	10	orientechnologies_orientdb	DocumentEmbeddedTest#embeddedTx	assertEquals(results.size(),1);	assertThat(results,hasSize(1));	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(expected,actual[0]);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(expected,actual);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(1,actual.length);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(expected,actual[0]);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(expected,actual);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(2,actual.length);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertEquals(expected,actual[0]);	0
761	10	adlnet_jxapi	PersonTest#testGetAccount	assertNotNull(actual);	assertSame(expected,actual);	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertTrue(person.areIndexed(""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertTrue(person.areIndexed(""STR"",""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertThat(person.areIndexed(""STR""),is(true));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertFalse(person.areIndexed(""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertThat(person.areIndexed(""STR"",""STR""),is(true));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertThat(person.areIndexed(""STR""),equalTo(true));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertFalse(person.areIndexed(""STR"",""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertTrue(person.areIndexed(""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertTrue(person.areIndexed(""STR""));"	0
762	10	orientechnologies_orientdb	LuceneCreateIndexIntegrationTest#testCreateIndexJavaAPI	"assertTrue(session.getMetadata().getSchema().getClass(""STR"").areIndexed(""STR"",""STR""));"	"assertTrue(person.areIndexed(""STR"",""STR"",""STR""));"	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertThat(r.next(),is(notNullValue()));	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.size());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.count());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	finalODocumentdoc=r.next();	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.getCount());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	finalODocumentdocument=r.next();	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(2,r.size());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertTrue(r.hasNext());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertEquals(1,r.next().size());	0
763	10	orientechnologies_orientdb	TxNonUniqueIndexWithCollationTest#testIn	assertEquals(4,r.size());	assertTrue(r.next()instanceofODocument);	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	"assertThat(coll,hasItem(""STR""));"	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertEquals(1,coll.size());	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertThat(coll.size(),is(1));	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertEquals(2,coll.size());	1
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	"assertTrue(coll.contains(""STR""));"	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertThat(coll).hasSize(1);	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertThat(coll,hasSize(1));	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertTrue(coll.size()==1);	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertThat(coll,hasItem(1));	0
764	10	orientechnologies_orientdb	OLuceneInsertUpdateSingleDocumentNoTxTest#testInsertUpdateTransactionWithIndex	assertEquals(2,coll.size());	assertTrue(coll.size()==2);	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
765	10	orientechnologies_orientdb	TrackedListTest#testRemoveNotificationOne	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	1
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	1
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertNotEquals(oldClusterId,oClass.getDefaultClusterId());	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	finalintnewClusterId=oClass.getDefaultClusterId();	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertThat(oClass.getDefaultClusterId(),is(oldClusterId));	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertEquals(oldClusterId+1,oClass.getDefaultClusterId());	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	oClass.setDefaultClusterId(oldClusterId+1);	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	finalintnewClusterId=oClass.getDefaultClusterId()+1;	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertThat(oClass.getDefaultClusterId(),equalTo(oldClusterId));	0
766	10	orientechnologies_orientdb	OClassImplTest#testSetAbstractClusterNotChanged	assertEquals(oClass.getDefaultClusterId(),oldClusterId);	assertTrue(oldClusterId!=oClass.getDefaultClusterId());	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR""),newOBinaryField(""STR"")));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newBinaryField(""STR""),newBinaryField(""STR"")));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR"",""STR""),newOBinaryField(""STR"",""STR"")));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	List<OBinaryField>links=newArrayList<OBinaryField>();	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR"",0),newOBinaryField(""STR"",2)));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR"",3),newOBinaryField(""STR"",4)));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"OBinaryFieldo1=newOBinaryField(""STR"");"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newBinaryField(""STR"",0),newBinaryField(""STR"",2)));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR"",3),newOBinaryField(""STR"",2)));"	0
767	10	orientechnologies_orientdb	BinaryComparatorCompareTest#testLinks	assertTrue(comparator.compare(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2)))==0);	"assertEquals(-1,comparator.compare(newOBinaryField(""STR"",0),newOBinaryField(""STR"",3)));"	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	"assertEquals(0,MPEGDecoder.probe(newByteBuffer(""STR"".getBytes())));"	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	"assertEquals(0,MPEGDecoder.probe(newByteBuffer(""STR"".getBytes())));"	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(8)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(16)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(2)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(4)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(byteBuffer));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(8)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(ByteBuffer.allocate(16)));	0
768	10	jcodec_jcodec	MPEGDecoderTest#testProbe	assertEquals(50,MPEGDecoder.probe(ByteBuffer.wrap(MPEGTestConst.mpeg())));	assertEquals(0,MPEGDecoder.probe(sh));	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertThat(actual,is(expected));	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	"assertEquals(""STR""+expected,actual);"	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
769	10	adlnet_jxapi	ResultTest#testSetDuration	assertNotNull(actual);	"assertEquals(expected+""STR"",actual);"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertEquals(""STR"",WizardUtils.getCommentedOutProperty(""STR"",""STR""));"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"StringpropertiesString=""STR"";"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertNull(WizardUtils.getCommentedOutProperty(""STR"",""STR""));"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertEquals(""STR"",WizardUtils.getCommentedOutProperty(""STR"",""STR""));"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertNull(WizardUtils.getCommentedOutProperty(""STR"",""STR""));"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"Stringresult=WizardUtils.getCommentedOutProperty(""STR"",""STR"");"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"StringpropertiesString=WizardUtils.getCommentedOutProperty(""STR"",""STR"");"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"Stringproperty=WizardUtils.getCommentedOutProperty(""STR"",""STR"");"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertThat(getCommentedOutProperty(""STR"",""STR""),is(""STR""));"	0
770	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetCommentedOutProperty	"assertEquals(""STR"",getCommentedOutProperty(BEFORE+""STR""+AFTER,""STR""));"	"assertEquals(""STR"",WizardUtils.getCommentedOutProperty(null,""STR""));"	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertEquals(1,testSuite.getDurationSeconds());	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertEquals(0,testSuite.getDurationSeconds());	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertTrue(testSuite.getDurationSeconds()>0);	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertThat(testSuite.getDurationSeconds(),is(0L));	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertEquals(2,testSuite.getDurationSeconds());	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertThat(testSuite.getDurationSeconds(),is(5L));	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertEquals(3,testSuite.getDurationSeconds());	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertEquals(5,testSuite.getDurationSeconds());	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertThat(testSuite.getDurationSeconds(),is(2L));	0
771	10	hazelcast_hazelcast-simulator	CoordinatorCliTest#testInit_duration_withDays	assertEquals(DAYS.toSeconds(23),testSuite.getDurationSeconds());	assertThat(testSuite.getDurationSeconds(),equalTo(0L));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,is(100L));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,equalTo(100L));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertEquals(100,value);	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,equalTo(100));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,equalTo(0L));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,is(100));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value).isEqualTo(100L);	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertThat(value,is(10L));	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertEquals(10,value);	0
772	10	hazelcast_hazelcast-simulator	BaseThreadStateTest#randomLong_withBound	assertTrue(value>=0);	assertTrue(value>0);	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"env.put(""STR"",""STR"");"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.get(""STR"").getCiName());"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(equalTo(""STR"")));"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),equalTo(""STR""));"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR"").getCiName(),is(""STR""));"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertThat(env.get(""STR""),is(equalTo(""STR"")));"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"",""STR"");"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenv2=newCIEnvironment(""STR"",""STR"",""STR"");"	0
773	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#recognises_travis	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"CIEnvironmentenvironment=newCIEnvironment(""STR"",env);"	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	"assertEquals(""STR"",plain);"	1
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressesemailAddresses=m.parseEmailAddresses(plain);	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressese=m.parseEmailAddresses(plain);	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	"EmailAddressesemailAddresses=m.parseEmailAddresses(plain,""STR"");"	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressest=m.parseEmailAddresses(plain);	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressesemailAddresses=newEmailAddresses();	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressese=newEmailAddresses();	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	"EmailAddressese=m.parseEmailAddresses(plain,""STR"");"	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	"assertEquals(""STR"",EmailAddresses.fromString(plain).toString());"	0
774	10	myabc_markdownj	EmailAddresses#testEmail	"assertEquals(""STR"",plain);"	EmailAddressesemailAddresses=newEmailAddresses(plain);	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAOption<String>uppercaseSecond=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAOption<String>lowercaseFirst=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.none();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.nothing();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.some(""STR"");}};"	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicOptional<String>apply(Stringparam){returnAOption.none();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"finalAOption<String>uppercaseSecond=newAOption<String>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.some(""STR"");}};"	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverrideprotectedAOption<String>apply(Stringparam){returnAOption.none();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringparam){returnAOption.any();}};	0
775	10	arnohaase_a-foundation	AsArrayCopyTest#testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	finalAFunction1<String,Iterable<String>,AOption<String>>uppercaseSecond=newAFunction1<String,Iterable<String>,AOption<String>>(){@OverridepublicAOption<String>apply(Stringinput){returnAOption.none();}};	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)2,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)0,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)3,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(2)).newarc(Compiler.PLAIN,(short)1,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)4,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(2)).newarc(Compiler.PLAIN,(short)0,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)5,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(2)).newarc(Compiler.PLAIN,(short)3,from,to);	0
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	assertEquals(1,runtime.getcolor('a'));	1
776	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubRange	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).subrange('a','z',from,to);	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.addProperty(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.LONG);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.getProperty(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.INT);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.property(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.INTEGER);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.setProperty(""STR"",OType.STRING);"	0
777	10	orientechnologies_orientdb	OCreateIndexStatementExecutionTest#testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"clazz.createProperty(""STR"",OType.DOUBLE);"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	OTransactionPhase1TaskResultresponse=mock(OTransactionPhase1TaskResult.class);	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	OTransactionPhase1TaskResultresult=newOTransactionPhase1TaskResult(transaction,responseManager);	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	"OTransactionPhase1TaskResultresponse=newOTransactionPhase1TaskResult(transaction,""STR"");"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	"assertFalse(responseManager.collectResponse(null,""STR""));"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	"OTransactionPhase1TaskResultresult=responseManager.getResponse(""STR"");"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	"OTransactionPhase1TaskResultresult=newOTransactionPhase1TaskResult(transaction,""STR"");"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	"OTransactionPhase1TaskResultresult=responseManager.getResponse(transaction,""STR"");"	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	OTransactionPhase1TaskResultresponse=newOTransactionPhase1TaskResult();	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	OTransactionPhase1TaskResultresponse=newOTransactionPhase1TaskResult(transaction);	0
778	10	orientechnologies_orientdb	TestNewDistributedResponseManager#testSimpleNoQuorum	"assertFalse(responseManager.collectResponse(newOTransactionPhase1TaskResult(newOTxSuccess()),""STR""));"	OTransactionPhase1TaskResultresult=newOTransactionPhase1TaskResult();	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(1,result.size());	1
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(2,result.size());	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(3,result.size());	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(2,result.size());	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(1,result.size());	1
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertEquals(3,result.size());	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertThat(result.size(),is(2));	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertThat(result).hasSize(2);	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertThat(result).hasSize(1);	0
779	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle2Old	assertEquals(1,result.size());	assertThat(result).hasSize(3);	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.toString());"	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	assertEquals(bytesContainer,bytesContainer);	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.toString());"	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	assertEquals(BytesContainer.class,bytesContainer.getClass());	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.asString());"	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.get(0).toString());"	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	assertEquals(0,bytesContainer.remaining());	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	assertEquals(bytesContainer,bytesContainer);	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.get(0).asString());"	0
780	10	orientechnologies_orientdb	BytesContainerTest#testReadSimple	assertEquals(bytesContainer.offset,100);	"assertEquals(""STR"",bytesContainer.read());"	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet();	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	finalTrackedSetset=newTrackedSet(doc);	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"");"	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(doc,""STR"");"	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	finalTrackedSet<String>set=newTrackedSet<String>();	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	"finalTrackedSetset=newTrackedSet(""STR"",doc);"	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	finalTrackedSettracker=newTrackedSet();	0
781	10	orientechnologies_orientdb	TrackedSetTest#testAddFour	assertFalse(doc.isDirty());	"doc.addField(""STR"",""STR"");"	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.SETUP_WITH_RUN);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.SETUP);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.STOP);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.REFRESH);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.EXECUTE);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer=createTestContainer(test);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.RUN_WITH_SETUP);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.GET);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.REFRESH_SETUP);	0
782	10	hazelcast_hazelcast-simulator	TestContainer_BasicTest#testAnnotationInheritance_withSetupInChildClass_withRunInBaseClass	assertTrue(test.childSetupCalled);	testContainer.invoke(TestPhase.SETUP_WITH_RUNS);	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),is(equalTo(expectedEnv)));	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>actualEnv=envFilter.filter(expectedEnv);	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertThat(envFilter.filter(expectedEnv),equalTo(expectedEnv));	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>result=envFilter.filter(expectedEnv);	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>filteredEnv=envFilter.filter(expectedEnv);	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	Map<String,String>envMap=envFilter.filter(expectedEnv);	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(expectedEnv,envFilter.filter(env));	1
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"expectedEnv.put(""STR"",""STR"");"	0
783	10	cucumber-ltd_cucumber-pro-plugin-jvm	EnvFilterTest#filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertThat(envFilter.filter(expectedEnv),hasItem(""STR"",""STR""));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	1
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"Strings=Seq.join(Arrays.asList(""STR"",""STR""),""STR"");"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),""STR""),""STR""));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),null));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"List<String>list=Arrays.asList(""STR"",""STR"");"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),null));"	0
784	10	redraiment_jactiverecord	SeqTest#testConditionList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1L,2L,3L),""STR""));"	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==1;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returntrue;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==2;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".equals(o);}};"	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicate<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returnfalse;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==0;}};	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	"finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){return""STR"".length()==1;}};"	0
785	10	arnohaase_a-foundation	ACollectionHelperTest#testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	finalAPredicateNoThrow<String>len2=newAPredicateNoThrow<String>(){@Overridepublicbooleanapply(Stringo){returno.length()==3;}};	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(Integer.valueOf(3),result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(3)));	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertThat(result,equalTo(3));	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertThat(result,is(3));	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertNull(result);	0
786	10	orientechnologies_orientdb	OMathExpressionTest#testPriority3	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertTrue(manager.isSame(managerNested));	1
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertThat(manager.isSame(managerNested),is(true));	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertFalse(manager.isSame(managerNested));	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertThat(manager.isSame(managerNested),is(false));	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertTrue(manager.isSame(managerNested));	1
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	ODirtyManagermanagerTwo=ORecordInternal.getDirtyManager(embeddedInSet);	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertFalse(manager.isSame(managerNested));	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	ODirtyManagermanagerOne=ORecordInternal.getDirtyManager(embeddedInSet);	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	assertThat(manager.isSame(managerNested),equalTo(true));	0
787	10	orientechnologies_orientdb	ODirtyManagerTest#testDoubleLevelEmbeddedCollection	assertTrue(manager.isSame(managerNested));	ODirtyManagermanagerTwo=ORecordInternal.getDirtyManager(embeddedInList);	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoader(base);	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	finalClassPathLoaderloader=newClassPathLoader(base);	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"");"	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"finalClassPathLoaderloader=newClassPathLoader(base,""STR"");"	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"finalClassPathLoaderloader=newClassPathLoader(""STR"");"	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	"ClassPathLoaderloader=newClassPathLoader(""STR"",base);"	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloaders=newClassPathLoader(base);	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoader();	0
788	10	nidi3_raml-loader	LoaderTest#jarInClassPath	"assertNotNull(newClassPathLoader(""STR"").fetchResource(""STR"",-1));"	ClassPathLoaderloader=newClassPathLoaderImpl(base);	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertTrue(mergeConfig.use(""STR""));"	1
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertFalse(mergeConfig.use(""STR""));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertThat(mergeConfig.use(""STR""),is(true));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertTrue(mergeConfig.use(""STR""));"	1
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertThat(mergeConfig.use(""STR""),equalTo(true));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertThat(mergeConfig.use(""STR""),is(false));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertFalse(mergeConfig.use(""STR""));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertThat(mergeConfig.use(""STR""),equalTo(false));"	0
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertTrue(mergeConfig.use(""STR""));"	1
789	10	fabric8io_fabric8-maven-plugin	ProfileUtilTest#blendProfiles	"assertTrue(mergeConfig.use(""STR""));"	"assertEquals(false,mergeConfig.use(""STR""));"	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertEquals(2,array.length);	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertEquals(1,array.length);	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(array,0));	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertEquals(0,array.length);	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(newbyte[0],array));	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(newbyte[]{1,2},array));	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(array,newbyte[2]));	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	"assertTrue(""STR"",Arrays.equals(newbyte[]{0},array));"	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(array,newbyte[0]));	0
790	10	jcodec_jcodec	CuesFactoryTest#testLengthOfIndexWithTwoEntries	assertEquals(34,array.length);	assertTrue(Arrays.equals(newbyte[2],array));	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertTrue(skansts.size()>0);	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertEquals(1,skansts.size());	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertEquals(2,skansts.size());	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertThat(skansts.size(),is(1));	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertTrue(skansts.size()>1);	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertThat(skansts.size(),is(2));	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertEquals(3,skansts.size());	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertTrue(skansts.size()==1);	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertFalse(skansts.isEmpty());	0
791	10	PeterisP_morphology	MorphologyTest#skansts	assertNotEquals(skansts.size(),0);	assertThat(skansts.size(),is(3));	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"finalORecordrecord=read(""STR""+getDatabaseName()+""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=getDBRecord(getDatabaseName()+""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=getDBRecord(getDatabaseName(),""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"finalORecordrecord=getDBRecord(getDatabaseName(),""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=getDatabase().getRecord(""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=createRecord(getDatabaseName(),""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	ORecordrecord=getDBRecord(getDatabaseName());	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ODatabaseRecordrecord=getDBRecord(getDatabaseName(),""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"finalORecordrecord=createRecord(getDatabaseName(),""STR"");"	0
792	10	orientechnologies_orientdb	HttpDocumentTest#updateFullNoVersion	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	"ORecordrecord=createRecord(getDatabaseName()+""STR"");"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getVoId());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getVoId());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getName());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNull(obj);	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getName());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getId());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	"assertEquals(""STR"",obj.getId());"	0
793	10	rockagen_commons-lib	ReflexUtilTest#testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialized());"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertThat(newSimpleLabel(""STR"").serialized(),is(""STR""));"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertThat(SimpleLabel.of(""STR"").serialized(),is(""STR""));"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"",""STR"").serialized());"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"SimpleLabellabel=newSimpleLabel(""STR"");"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"finalSimpleLabellabel=newSimpleLabel(""STR"");"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialize());"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertThat(newSimpleLabel(""STR"").serialized(),is(equalTo(""STR"")));"	0
794	10	nidi3_graphviz-java	SimpleLabelTest#ofObject	"assertEquals(""STR"",SimpleLabel.of(1).serialized());"	"assertEquals(""STR"",SimpleLabel.ofObject().serialized());"	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NALUnitType.fromValue(0));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NalUnitType.fromValue(0));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertThat(NALUnitType.fromValue(0),is(nullValue()));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NalUnitType.fromValue(-1));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertThat(NALUnitType.fromValue(-1),is(nullValue()));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NALUnitType.fromValue(-1));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertThat(NalUnitType.fromValue(0),is(nullValue()));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NalUnitType.fromValue(1));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NALUnitType.fromValue(0));	0
795	10	jcodec_jcodec	NalUnitTypeTest#testIdentifiesBadTypeCorrectly	assertEquals(NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);	assertNull(NalUnitType.fromValue(0));	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	assertFalse(conn.getTokenBased());	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	assertFalse(conn.getTokenBased());	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	assertFalse(conn.getTokenBased());	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	assertFalse(handler.getTokenBased());	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	conn.getTokenBased();	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	conn.close();	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	verify(protocol,times(1)).connect(conn);	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	verify(protocol,times(1)).connect(eq(conn),any(ContextConfiguration.class));	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	conn.authenticate();	0
796	10	orientechnologies_orientdb	OClientConnectionTest#testAlreadyAuthenticatedButNotOnSpecificConnection	assertTrue(conn.getTokenBased());	conn.connect();	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);		0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,2);	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);		0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	ifif	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	ifif	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	if	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	if	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	if	0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);		0
797	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveValue	assertEquals(keysToAdd,addedKeys);	if	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isNotNull();	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isNull();	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertThat(oAuth2AccessToken).isEqualTo(""STR"");"	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken,is(notNullValue()));	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken,notNullValue());	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).notNullValue();	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isEqualTo(OAuth2_TOKEN);	0
798	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertThat(oAuth2AccessToken).isEqualTo(OAUTH2_TOKEN);	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,notNullValue());	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection).isNotNull();	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(ReconnectBySysetmConnection.class));	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(ReconnectBySysetm.class));	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection).isInstanceOf(ReconnectBySysetmConnection.class);	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	"assertEquals(""STR"",connection.toString());"	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connectioninstanceofReconnectBySysetmConnection);	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(addr,connection.toString());	0
799	10	sofastack_sofa-bolt	ReconnectManagerTest#testReconnectionBySysetmSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertThat(connection,instanceOf(ReconnectBySysetmSetting.class));	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(2,result.size());	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(1,result.size());	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertThat(result).hasSize(1);	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(3,result.size());	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(2,result.size());	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(1,result.size());	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertThat(result).hasSize(2);	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertThat(result,hasItem(this.testAttributeList));	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(result.size()>0);	0
800	10	amlinv_stat-collection-utils	JMXMBeanConnectionTest#testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(result.size()==1);	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(null));"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),is(""STR""));"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"Strings=m.markdown(""STR"");"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR""+""STR"",m.markdown(""STR""));"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"assertThat(m.markdown(""STR""),equalTo(""STR""));"	0
801	10	myabc_markdownj	EdgeCases#testEmptyString	"assertEquals(""STR"",m.markdown(""STR""));"	"Stringmarkdown=m.markdown(""STR"");"	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertFalse(matcher.find());	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),is(true));	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(true));	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),is(false));	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertThat(matcher.find(),equalTo(false));	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	booleanfound=matcher.find();	0
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
802	10	basis-technology-corp_tcl-regex-java	RegressionTest#testStockSymbol	assertTrue(matcher.find());	assertEquals(false,matcher.find());	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),null));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<>(),null));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<String>()->{
},""STR""));"	0
803	10	redraiment_jactiverecord	SeqTest#testJoinDelimiterEmpty	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(newArrayList<String>()->{
},null));"	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected,actual);	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertNotEquals(expected,actual);	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertThat(actual,is(expected));	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	"assertEquals(expected,actual.get(""STR""));"	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
804	10	adlnet_jxapi	ActivityProfileTest#testGetProfile	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasEntry(""STR"",""STR""));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasSize(1));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasSize(1));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasEntry(""STR"",""STR""));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasSize(2));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasItem(newTextNode(""STR"")));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasSize(2));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),hasItem(attr(SHAPE,RECORD)));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR""),hasItem(attr(SHAPE,RECORD)));"	0
805	10	nidi3_graphviz-java	RecordsTest#of	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.of(""STR"",""STR"",""STR""));"	"assertThat(Records.of(""STR"",""STR""),deepEquals(attrs(SHAPE,RECORD),attrs(LABEL,""STR"")));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=markup.markdown(""STR"");"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",markup.markdown(""STR""));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(""STR"",markup.markdown(""STR""+""STR""));"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringmarkdown=m.markdown(""STR"");"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringtext=m.markdown(""STR"");"	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	LineConventionsconventions=newLineConventions(markup);	0
806	10	myabc_markdownj	LineConventions#testMacLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"Stringh=m.markdown(""STR"");"	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(true));	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(true));	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	"assertTrue(""STR"",v��rds.isRecognized());"	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(false));	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(false));	0
807	10	PeterisP_morphology	MorphologyTest#gunta_20120911	assertTrue(vārds.isRecognized());	"assertFalse(""STR"",v��rds.isRecognized());"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	finalIterable<Integer>iterable=Iterations.iterable(1,2);	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasItem(""STR""));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),is(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR""))));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),iterates(""STR"",""STR""));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasSize(2));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR"")),iterates(""STR"",""STR""));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"",""STR"")),iterates(""STR"",""STR"",""STR""));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),hasSize(3));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),iterates(""STR"",""STR"",""STR""));"	0
808	10	gvlasov_collections-utils	IterableToStreamTest#iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	"assertThat(StreamUtils.stream(Arrays.asList(""STR"",""STR"")),is(StreamUtils.stream(Arrays.asList(""STR"",""STR""))));"	0
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(42,invalidDataException.getCloseCode());	1
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(42,invalidDataException.getCloseCode());	1
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(42,invalidDataException.getCloseCode());	1
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertThat(invalidDataException.getCloseCode(),is(42));	0
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(42,invalidDataException.getCloseCode());	1
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	"assertEquals(""STR"",invalidDataException.getCloseCode());"	0
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(0,invalidDataException.getCloseCode());	0
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(123,invalidDataException.getCloseCode());	0
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertEquals(42,invalidDataException.getCloseCode());	1
809	10	TooTallNate_Java-WebSocket	InvalidDataExceptionTest#testConstructor	assertEquals(42,invalidDataException.getCloseCode());	assertNotNull(invalidDataException.getCloseCode());	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
810	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testIsDefined	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass,instanceOf(InnerClass.class));	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isNotNull();	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getName());"	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass.getSimpleName());"	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	"assertEquals(""STR"",helloClass);"	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass!=null);	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyInnerClass.class);	0
811	10	trung_InMemoryJavaCompiler	InMemoryJavaCompilerTest#compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertThat(helloClass).isEqualTo(MyTestClass.class);	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,instanceOf(XmlSchemaWithLoader.class));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory).isNotNull();	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,instanceOf(SchemaFactory.class));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,instanceOf(XmlSchemaFactory.class));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,instanceOf(XMLSchemaWithLoader.class));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,instanceOf(XMLSchemaFactory.class));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	"TestHelper.assertXMLEquals(""STR""+W3C_XML_SCHEMA_NS_URI+""STR"",factory);"	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	assertThat(factory,is(notNullValue()));	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR""+""STR"",factory);"	0
812	10	nidi3_raml-loader	XmlTest#xmlSchemaWithLoader	assertEquals(0,validate(factory).errors);	"TestHelper.assertXMLEquals(""STR""+""STR""+""STR""+""STR"",factory);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[0]);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR""),""STR"").toArray(newString[0]);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	1
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[1]);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	1
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR""),""STR"").toArray(newString[0]);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR"",""STR""),""STR"").toArray(newString[2]);"	0
813	10	redraiment_jactiverecord	SeqTest#testConstantMap	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	"String[]actuals2=Seq.map(Arrays.asList(""STR"",""STR""),""STR"").toArray(newString[1]);"	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,is(0));	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	"System.out.println(""STR""+modelConfidence);"	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,is(1));	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,is(5));	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertEquals(5,modelConfidence);	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertEquals(1,modelConfidence);	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,equalTo(0));	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,equalTo(1));	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertTrue(modelConfidence>0);	0
814	10	fluenda_ParCEFone	CEFParserTest#customExtensionsandMappedIPV4Test	assertEquals(0,modelConfidence);	assertThat(modelConfidence,equalTo(5));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+1,database.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount,OGlobalConfiguration.RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD.getValueAsInteger());	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+2,database.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	1
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount+1,OGlobalConfiguration.RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD.getValueAsInteger());	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(1,database.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(1,ridBag.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(2,database.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(recordsCount,ridBag.countClusterElements(database.getDefaultClusterId()));	0
815	10	orientechnologies_orientdb	ORidBagAtomicUpdateTest#testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(2,ridBag.countClusterElements(database.getDefaultClusterId()));	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	List<OResult>result=rs.stream().collect(Collectors.toList());	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	List<OResult>results=rs.stream().collect(Collectors.toList());	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	Stream<OResult>stream=rs.stream();	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	List<OResult>rows=rs.stream().collect(Collectors.toList());	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	List<OResult>result=rs.stream().collect(toList());	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	OResultresult=rs.stream().collect(Collectors.toList()).single();	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	List<OResult>results=rs.stream().collect(toList());	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	assertTrue(rs.stream().count()>0);	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	assertTrue(rs.stream().count()>0);	0
816	10	orientechnologies_orientdb	OGraphBatchInsertTest#testBatchInsertRemote	assertEquals(3,rs.stream().count());	OResultresult=rs.stream().collect(Collectors.toList()).next();	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	assertThat(embedded,is(notNullValue()));	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	assertThat(embedded.isPersistent(),is(true));	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	"assertEquals(""STR"",embedded.get(""STR"").toString());"	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	"assertEquals(""STR"",embedded.getName());"	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	"assertEquals(""STR"",embedded.get(""STR"").getName());"	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	assertThat(embedded.isPersistent(),equalTo(true));	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	assertEquals(1,embedded.size());	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	"assertEquals(""STR"",embedded.toString());"	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	assertThat(embedded,instanceOf(Date.class));	0
817	10	orientechnologies_orientdb	NestedInsertTest#testEmbeddedValueDate	assertNotNull(embedded);	"assertEquals(""STR"",embedded.get(""STR"").asString());"	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertTrue(protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertFalse(protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertTrue(protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertFalse(protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertTrue(protocol0.equals(protocol2));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertThat(protocol0.equals(protocol1),is(true));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertTrue(protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertEquals(false,protocol0.equals(protocol1));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertFalse(protocol0.equals(protocol2));	0
818	10	TooTallNate_Java-WebSocket	ProtocolTest#testEquals	assertTrue(!protocol0.equals(protocol1));	assertThat(protocol0.equals(protocol1),is(false));	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertNotNull(merged);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(source1,merged);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(source1,merged);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(1,merged.coverage[0]);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(1,merged.coverage[0]);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertNotNull(merged);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(1,merged.coverage[0]);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertNotNull(merged);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	assertEquals(1,merged.coverage[2]);	0
819	10	trautonen_coveralls-maven-plugin	SourceTest#testMerge	assertFalse(source1==merged);	"assertEquals(""STR"",merged.toString());"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	assertNotNull(simulatorPath);	1
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertTrue(simulatorPath.contains(""STR""));"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertEquals(""STR"",simulatorPath);"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertThat(simulatorPath,equalTo(""STR""));"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertThat(simulatorPath).isEqualTo(""STR"");"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertEquals(""STR"",simulatorPath);"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertTrue(simulatorPath.contains(""STR""));"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertThat(simulatorPath,is(""STR""));"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	"assertTrue(simulatorPath.contains(""STR""));"	0
820	10	hazelcast_hazelcast-simulator	WizardUtilsTest#testGetSimulatorPath	assertNotNull(simulatorPath);	assertTrue(StringUtils.isNotEmpty(simulatorPath));	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"record1.field(""STR"",""STR"");"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"record.field(""STR"",""STR"");"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"assertThat(record1.fieldType(""STR""),is(OType.EMBEDDEDMAP));"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"assertThat(record1.fieldType(""STR""),is(OType.LINKMAP));"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"assertNull(record1.fieldType(""STR""));"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	database.save(record1);	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"assertThat(record1.fieldType(""STR""),is(nullValue()));"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"assertThat(record1.fieldType(""STR""),is(OType.STRING));"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"document1.field(""STR"",""STR"");"	0
821	10	orientechnologies_orientdb	TestSerializationCompatibilityRecord#testDataNotMatchSchema	"assertEquals(record1.fieldType(""STR""),OType.LINKMAP);"	"record1.field(""STR"",OType.EMBEDDEDMAP);"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
822	10	arnohaase_a-foundation	AJsonSerHelperTest#testString	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result.substring(0,1));"	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(1,tokens.size());	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(2,tokens.size());	1
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	"assertThat(tokens,hasItem(newWord(""STR"")));"	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(1,tokens.size());	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(3,tokens.size());	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(2,tokens.size());	1
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertEquals(0,tokens.size());	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertTrue(tokens.size()==1);	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertTrue(tokens.size()==2);	0
823	10	PeterisP_morphology	TokenizeTest#Laura10Aug	assertEquals(2,tokens.size());	assertNotNull(tokens);	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(0,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(2,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(3,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertEquals(1,a.estimateSize());	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	"System.out.println(""STR""+a.estimateSize());"	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	"System.out.println(""STR""+computeSize);"	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
824	10	jcodec_jcodec	SeekHeadFactoryTest#testSeekHeadSize	assertEquals(a.estimateSize(),computeSize);	"System.out.println(""STR"");"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23d));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_34));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(3.14d));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.23));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RURENG));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(0.5d));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(1.5d));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(RURENG_2_34));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_1_23));"	0
825	10	javadev_moneytostr-russian	MoneyToStrTest#checkRURENG	"assertEquals(""STR"",moneyToStrRURENG.convert(V_300D));"	"assertEquals(""STR"",moneyToStrRURENG.convert(GBP_2_33));"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom().toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom().toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom(null).toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom(null).toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom(Simple.class).toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom(Simple.class).toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAllFrom(newObject[]{1}).toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAll().toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.toString());"	0
826	10	redraiment_jactiverecord	TSqlBuilderTest#testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(""STR"",sql.selectAll().toString());"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(""STR""));"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),is(equalTo(""STR"")));"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",factory.getTargetDescription());"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(factory.getTargetDescription(),equalTo(""STR""));"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	Stringresult=factory.getTargetDescription();	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",this.factory.getTargetDescription());"	1
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(""STR""));"	0
827	10	amlinv_stat-collection-utils	JMXRemoteUrlConnectionFactoryTest#testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertThat(this.factory.getTargetDescription(),is(equalTo(""STR"")));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),is(nullValue()));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertNull(oClass.getProperty(""STR""));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"OPropertyprop=oClass.getProperty(""STR"");"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),is(notNullValue()));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"oClass.createProperty(""STR"",OType.LINKLIST,(OClass)null,true);"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(null,oClass.getProperty(""STR""));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"oClass.createProperty(""STR"",OType.LINKLIST,(OClass)null,false);"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertEquals(null,oClass.getProperty(""STR""));"	0
828	10	orientechnologies_orientdb	OClassImplTest#testCreateNoLinkedClass	"assertNotNull(oClass.getProperty(""STR""));"	"assertThat(oClass.getProperty(""STR""),nullValue());"	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0,ThreadLocalArriveTimeHolder.getAndClear(channel,null));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,0));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0,ThreadLocalArriveTimeHolder.getAndClear(channel,null));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,null));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0L,ThreadLocalArriveTimeHolder.getAndClear(channel,null));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,0));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0L,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	0
829	10	sofastack_sofa-bolt	ThreadLocalArriveTimeHolderTest#testRemoveNull	assertEquals(-1,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	assertEquals(0,ThreadLocalArriveTimeHolder.getAndClear(channel,Integer.valueOf(1)));	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(treeBucket.getLeftSibling(),123);	1
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(treeBucket.getLeftSibling(),123);	1
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(123L,treeBucket.getLeftSibling());	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(123L,treeBucket.getLeftSibling());	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(treeBucket.getLeftSibling(),123);	1
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertTrue(treeBucket.getLeftSibling()==123);	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertThat(treeBucket.getLeftSibling(),is(123L));	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(1,treeBucket.getLeftSibling());	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertEquals(0,treeBucket.getLeftSibling());	0
830	10	orientechnologies_orientdb	SBTreeLeafBucketTest#testSetLeftSibling	assertEquals(treeBucket.getLeftSibling(),123);	assertTrue(treeBucket.getLeftSibling()==123);	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertThat(results.hasNext(),is(true));	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertTrue(results.hasNext());	1
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertThat(results.hasNext(),equalTo(true));	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertThat(results.hasNext(),is(false));	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertFalse(results.hasNext());	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertThat(results.hasNext(),equalTo(false));	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertTrue(results.hasNext());	1
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertFalse(results.hasNext());	0
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	assertTrue(results.hasNext());	1
831	10	orientechnologies_orientdb	OCreateSequenceStatementExecutionTest#testIncrement	assertTrue(results.hasNext());	"assertThat(""STR"",results.hasNext(),is(true));"	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertEquals(expected,actual);	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertEquals(expected,actual);	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertThat(actual,is(expected));	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	"assertEquals(""STR""+expected,actual);"	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertEquals(actual,expected);	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
832	10	adlnet_jxapi	ActivityStateTest#testSetStateId	assertNotNull(actual);	assertEquals(expected,actual);	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertEquals(""STR"",actuals[0]);"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	1
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR"",""STR"",""STR""},actuals);"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	assertEquals(2,actuals.length);	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertEquals(Arrays.asList(""STR"",""STR"",""STR""),actuals);"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertTrue(Arrays.equals(newString[]{""STR"",""STR""},actuals));"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertEquals(Arrays.asList(""STR"",""STR""),actuals);"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	"assertArrayEquals(newString[]{""STR""},actuals);"	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	assertArrayEquals(newString[0],actuals);	0
833	10	redraiment_jactiverecord	SeqTest#testPartition	"assertArrayEquals(newString[]{""STR"",""STR""},actuals);"	assertEquals(1,actuals.length);	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertThat(result).isEqualTo(BUSYBOX);	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertThat(result,is(BUSYBOX));	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertThat(result,equalTo(BUSYBOX));	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	"assertThat(result).isEqualTo(""STR"");"	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	"assertThat(result,is(""STR""));"	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertEquals(BUSYBOX,result);	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertEquals(BUSYBOX,result);	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertThat(result,is(notNullValue()));	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	"assertThat(result).isEqualTo(BUSYBOX+""STR"");"	0
834	10	fabric8io_fabric8-maven-plugin	JibBuildServiceTest#getBaseImageNullImageConfigurationShouldReturnBusybox	"assertEquals(result,""STR"");"	assertThat(result,is(BUSYBOX.toString()));	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItems(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(1,result.size());	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,""STR"",""STR""))));"	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(1,result.size());	0
835	10	hazelcast_hazelcast-simulator	WorkerQueryTest#targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,5,""STR"",""STR""))));"	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	"expectedDockerfileLines.add(""STR"");"	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
836	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_uppercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,util.getDockerfileLines(dockerfileLines));	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode04CodeListMarshallersut=newGenericode04CodeListMarshaller();	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXlsSds=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaCodeList=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSds=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaYls=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().readValue(aXls,CodeListDocument.class);	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSheet=newClassPathResource(""STR"");"	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().fromResource(aXls);	0
837	10	phax_ph-genericode	ExcelSheetToCodeList04Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode04CodeListMarshaller().fromJson(aXls,CodeListDocument.class);	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>updatedRecords=manager.getNewRecords();	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>updateRecords=manager.getNewRecords();	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	Set<ORecord>updates=manager.getNewRecords();	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(emb));	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	set<ORecord>updatedRecords=manager.getNewRecords();	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(emb));	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
838	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbendedWithEmbeddedCollection	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==1);	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
839	10	arnohaase_a-foundation	AJsonSerHelperTest#testObject3	"assertEquals(""STR"",result);"	"assertEquals(""STR""+""STR"",result);"	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"doc.addAttribute(""STR"",""STR"");"	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList();	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	ORecordInternal.setDirty(doc);	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListlist=newTrackedList(doc);	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalList<String>list=newArrayList<String>();	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList();	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(""STR"");"	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	"finalTrackedListlist=newTrackedList(doc,""STR"");"	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackListlist=newTrackList();	0
840	10	orientechnologies_orientdb	TrackedListTest#testAddAllNotificationThree	assertFalse(doc.isDirty());	finalTrackedListtrackerList=newTrackedList(doc);	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR""+""STR""+""STR""+""STR"",sql.toString());"	0
841	10	redraiment_jactiverecord	TSqlBuilderTest#testHaving	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	1
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret);"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret,is(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret).isEqualTo(""STR"");"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertTrue(ret.contains(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertThat(ret,equalTo(""STR""));"	0
842	10	sofastack_sofa-bolt	ClassCustomSerializerTest#testInvokeContextCustomSerializer_FUTURE	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(""STR"",ret.trim());"	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	1
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_REQUEST,response.getStatus());	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	1
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.BAD_SIGNATURE));	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.NOT_FOUND,response.getStatus());	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.NOT_FOUND));	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(ResponseStatus.BAD_REQUEST));	0
843	10	Yubico_yubico-java-client	YubicoClientTest#testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertThat(response.getStatus(),is(Status.BAD_SIGNATURE));	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"assertTrue(comparator.isEqual(newBigDecimal(""STR""),newBigDecimal(""STR"")));"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	assertTrue(comparator.isEqual(DECIMAL_ZERO,DECIMAL_ZERO));	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"BigDecimalfirst=newBigDecimal(""STR"");"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"finalBigDecimalfirst=newBigDecimal(""STR"");"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"OBinaryFieldo1=newOBinaryField(""STR"",BigDecimal.ZERO);"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	OBinaryFieldo1=newOBinaryField();	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"OBinaryFieldo1=newOBinaryField(""STR"");"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	"OBinaryFieldo1=newOBinaryField(""STR"",DECIMAL);"	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	OBinaryComparator<BigDecimal>comparator=newBinaryComparator<BigDecimal>(newComparableComparator<BigDecimal>());	0
844	10	orientechnologies_orientdb	BinaryComparatorEqualsTest#testDecimal	assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));	OBinaryComparatorcomparator=newBinaryComparator();	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertEquals(expected,actual);	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertEquals(expected,actual);	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertThat(actual,is(expected));	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertEquals(expected,actual);	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertEquals(actual,expected);	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
845	10	adlnet_jxapi	AgentProfileTest#testSetProfileId	assertNotNull(actual);	"assertEquals(""STR""+expected,actual);"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getResponse().getHTTPHeader());"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),is(equalTo(""STR"")));"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),is(""STR""));"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getResponseHeaders().get(0).getHTTPHeader());"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",clientCookie.getHTTPHeader());"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Response<String>response=responseHandler.getResponse();	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertThat(responseHandler.getResponse().getHTTPHeader(),containsString(""STR""));"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Cookiecookie=responseHandler.getResponse();	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	"assertEquals(""STR"",responseHandler.getHTTPHeader());"	0
846	10	NanoHttpd_nanohttpd	CookieIntegrationTest#testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	Stringresponse=responseHandler.getResponse().getHTTPHeader();	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertTrue(writeCache.exists(""STR""));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertThat(writeCache.exists(""STR""),is(true));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertFalse(writeCache.exists(""STR""));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertThat(writeCache.exists(""STR""),equalTo(true));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertThat(writeCache.exists(""STR""),is(false));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"writeCache.put(""STR"",oClass);"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	"assertThat(writeCache.exists(""STR""),equalTo(false));"	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	writeCache.add(oClass);	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	writeCache.save(oClass);	0
847	10	orientechnologies_orientdb	ClassTest#testRename	"assertTrue(writeCache.exists(""STR""+OPaginatedCluster.DEF_EXTENSION));"	writeCache.insert(oClass);	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),is(""STR""));"	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),containsString(""STR""));"	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),equalTo(""STR""));"	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	assertEquals(1,exception.getMessage().length());	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	assertEquals(1,exception.getCause().getMessage().length());	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertThat(exception.getMessage(),is(equalTo(""STR"")));"	0
848	10	hazelcast_hazelcast-simulator	TestExceptionTest#testConstructor_withMessageFormat_multipleArguments	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.toString());"	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertNull(videoTrack);	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack,is(nullValue()));	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertNotNull(videoTrack);	1
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack,nullValue());	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack.getMeta(),is(notNullValue()));	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack,is(notNullValue()));	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertNull(videoTrack);	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack.getMeta(),is(nullValue()));	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack,notNullValue());	0
849	10	jcodec_jcodec	MP4MuxerTest#testAddEmptyTracks	assertNotNull(videoTrack);	assertThat(videoTrack).isNull();	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"System.setProperty(""STR"",""STR"");"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"Stringvalue=simulatorProperties.get(""STR"");"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(""STR""),is(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"Stringvalue=simulatorProperties.get(System.getProperty(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertEquals(""STR"",simulatorProperties.get(System.getProperty(""STR"")));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(System.getProperty(""STR"")),is(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(""STR""),equalTo(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(System.getProperty(""STR"")),equalTo(""STR""));"	0
850	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withSystemProperty	"assertEquals(File.pathSeparator,simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(""STR""),is(equalTo(""STR"")));"	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(expectedResult));	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedResult);	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedResult));	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertThat(normalizedUrl,is(equalTo(expectedResult)));	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
851	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testRemoveSomeOfManyQueryParams	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertEquals(1,collections.length);	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	"assertEquals(""STR"",collections[0]);"	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertEquals(2,collections.length);	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	"assertEquals(""STR"",collections[0]);"	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertThat(collections,is(notNullValue()));	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertEquals(1,collections.length);	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertNotNull(collections);	1
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertTrue(collections.length>0);	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertTrue(collections.length>0);	0
852	10	DigitalPebble_storm-crawler	CollectionTaggerTest#testCollectionTagger	assertNotNull(collections);	assertThat(collections).hasSize(1);	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertEquals(expected,actual);	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual,is(expected));	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertEquals(expected,actual);	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual,instanceOf(Group.class));	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual,is(group));	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual,equalTo(group));	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertEquals(group,actual);	0
853	10	adlnet_jxapi	ContextTest#testSetTeam	assertNotNull(actual);	assertThat(actual).isEqualTo(group);	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertEquals(expected,actual);	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertThat(actual,is(expected));	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertEquals(expected,actual);	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertThat(expected,actual,is(equalTo(expected)));	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertSame(expected,actual);	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertNotNull(actual);	1
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertNotEquals(expected,actual);	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
854	10	adlnet_jxapi	SubStatementTest#testGetResult	assertNotNull(actual);	assertThat(expected,actual,is(equalTo(result)));	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getOpcode());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getType());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(frame.getOpcode(),Opcode.PING);	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getOpCode());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.opcode());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFrame(frame,Opcode.PING);	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getProtocolCode());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getProtocolVersion());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getPendingOpcode());	0
855	10	TooTallNate_Java-WebSocket	PingFrameTest#testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PING,frame.getPingOpcode());	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(ImmutableSet.of(),Collectors.toImmutableSet());	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(1));	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),isEmpty());	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(ImmutableSet.of(),Collectors.toImmutableSet());	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(0));	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(1)));	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(""STR"")));"	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),is(ImmutableSet.of(""STR"",""STR"")));"	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertThat(Collectors.toImmutableSet(),hasItem(ImmutableSet.of(1)));	0
856	10	gvlasov_collections-utils	CollectorsTest#toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	"assertThat(Collectors.toImmutableSet(),iterates(ImmutableSet.of(""STR"",""STR"")));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertEquals(""STR"",property.getCustom(""STR""));"	1
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertEquals(""STR"",property.getCustom(""STR""));"	1
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertThat(property.getCustom(""STR""),is(equalTo(""STR"")));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertThat(property.getCustom(""STR""),equalTo(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertEquals(""STR"",oClass.getCustom(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertTrue(property.getCustom(""STR"").equals(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertThat(property.getCustom(""STR""),is(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertTrue(property.getCustom(""STR"").equals(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"assertEquals(oClass.getCustom(""STR""),property.getCustom(""STR""));"	0
857	10	orientechnologies_orientdb	AlterPropertyTest#testAlterCustomAttributeInProperty	"assertEquals(""STR"",property.getCustom(""STR""));"	"Stringvalue=property.getCustom(""STR"");"	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertEquals(expected,actual);	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertEquals(expected,actual);	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertEquals(expected,actual);	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertThat(actual,is(expected));	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertEquals(expected,actual);	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertThat(actual).isEqualTo(expected);	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
858	10	adlnet_jxapi	ContextTest#testGetLanguage	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertTrue(actual.length==expected.length);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertTrue(Arrays.equals(expected,actual));	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual[0]);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertThat(actual,is(expected));	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual);	0
859	10	adlnet_jxapi	PersonTest#testGetOpenid	assertNotNull(actual);	assertEquals(expected,actual[0]);	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),deepEquals(newAttributes<>(){{put(""STR"",""STR"");}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),deepEquals(newAttributes<>(){{add(""STR"",""STR"");}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),equalTo(newAttributes<>(){{put(""STR"",""STR"");}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),is(true));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),deepEquals(newAttributes<>(){{put(""STR"",1);put(""STR"",2);}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),deepEquals(newAttributes<>(){{add(""STR"",1);}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),equalTo(newAttributes<>(){{add(""STR"",1);}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),equalTo(newAttributes<ForGraphNode>(){{put(""STR"",""STR"");}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),equalTo(newAttributes<ForGraphNode>(){{put(""STR"",""STR"");put(""STR"",""STR"");}}));"	0
860	10	nidi3_graphviz-java	ColorTest#wedged	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.BLUE,Color.GREEN).wedged());"	"assertThat(color(""STR"").wedged(),deepEquals(newAttributes<>(){{put(""STR"",1);put(""STR"",0);}}));"	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertFalse(emptyProbe.isPartOfTotalThroughput());	1
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertThat(emptyProbe.isPartOfTotalThroughput(),is(false));	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertTrue(emptyProbe.isPartOfTotalThroughput());	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertThat(emptyProbe.isPartOfTotalThroughput(),equalTo(false));	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertFalse(emptyProbe.isPartOfTotalThroughput());	1
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertThat(emptyProbe.isPartOfTotalThroughput(),is(true));	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertTrue(emptyProbe.isPartOfTotalThroughput());	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertFalse(emptyProbe.isPartOfTotalThroughput());	1
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertEquals(false,emptyProbe.isPartOfTotalThroughput());	0
861	10	hazelcast_hazelcast-simulator	EmptyProbeTest#uselessTestToTriggerCoverageForThisClassWithoutFunctionality	assertFalse(emptyProbe.isPartOfTotalThroughput());	assertThat(emptyProbe.isPartOfTotalThroughput(),equalTo(true));	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	Shippable	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP=ShippablePOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOPPOP	0
862	10	trautonen_coveralls-maven-plugin	ShippableTest#testPullRequestFalse	assertNull(newShippable(env).getPullRequest());	Shippable	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanProcessorJava.normalize(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanTextProcessor.normalize(""STR""),is(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanProcessorJava.normalize(""STR""),is(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertThat(OpenKoreanTextProcessorJava.normalize(""STR""),is(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	1
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessor.normalize(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanProcessorJava.normalize(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	1
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",openKoreanTextProcessorJava.normalize(""STR""));"	0
863	10	open-korean-text_open-korean-text	OpenKoreanProcessorJavaTest#testNormalize	"assertEquals(""STR"",OpenKoreanTextProcessorJava.normalize(""STR""));"	"assertEquals(""STR"",openKoreanProcessorJava.normalize(""STR""));"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertThat(nameProperty.getName(),is(""STR""));"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertEquals(""STR"",nameProperty.getName());"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertEquals(""STR"",nameProperty.getName());"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertThat(nameProperty.getName(),equalTo(""STR""));"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertTrue(nameProperty.getName().contains(""STR""));"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertTrue(nameProperty.getName().equals(""STR""));"	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	Stringname=nameProperty.getName();	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(PROP_NAME));	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertThat(nameProperty.getName(),is(PROP_OFFICERS));	0
864	10	orientechnologies_orientdb	OCommandExecutorSQLCreatePropertyTest#testComplexCreateProperty	assertEquals(nameProperty.getName(),PROP_OFFICERS);	System.out.println(nameProperty.getName());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertEquals(1,result.size());	1
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertEquals(2,result.size());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	"assertThat(result,hasItem(""STR""));"	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertEquals(0,result.size());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertEquals(1,result.size());	1
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertThat(result).hasSize(1);	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.isEmpty());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.isEmpty());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.isEmpty());	0
865	10	OpenLiberty_ci.common	JavaCompilerOptionsTest#testDefaultOptions	assertEquals(1,result.size());	assertTrue(result.size()==1);	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(document.hasNext(),is(true));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertThat(document.hasNext(),equalTo(true));	0
866	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRid3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertEquals(1,execute.size());	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertEquals(2,execute.size());	1
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute).hasSize(1);	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute.size(),is(2));	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute).hasSize(2);	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute.size(),is(1));	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertEquals(3,execute.size());	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute.size(),equalTo(2));	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertThat(execute.size(),equalTo(1));	0
867	10	orientechnologies_orientdb	LuceneSpatialContainsTest#testContainsIndex	assertEquals(2,execute.size());	assertTrue(execute.size()>0);	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertThat(actual,is(expected));	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertTrue(expected==actual);	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
868	10	adlnet_jxapi	VerbTest#testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	assertThat(actual,instanceOf(Verb.class));	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	assertThat(actual,is(not(nullValue())));	0
869	10	adlnet_jxapi	VerbsTest#testScored	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
870	10	PeterisP_morphology	MorphologyTest#viszaļāk	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertTrue(actual.contains(""STR""));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertThat(actual,is(""STR""));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertTrue(actual.contains(""STR""));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertThat(actual,is(equalTo(""STR"")));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertThat(actual,equalTo(""STR""));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertThat(actual).isEqualTo(""STR"");"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertEquals(""STR"",actual);"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"assertFalse(actual.contains(""STR""));"	0
871	10	adlnet_jxapi	ActivityDefinitionTest#testToString	assertNotNull(actual);	"Stringexpected=""STR"";"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER);	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUHRUS.convert(-1.23d));"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,""STR"");"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,""STR"");"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR"",""STR""});"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(-1.23d));"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR""});"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"MoneytoStr=newMoneyToStr(Currency.USD,MoneyToStr.Language.UKR,MoneyToStr.Pennies.NUMBER,newString[]{""STR"",""STR"",""STR""});"	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertEquals(GBP_STR_US_MINUS,GBP_STR_US_MINUS);	0
872	10	javadev_moneytostr-russian	MoneyToStrTest#checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSUHRUS.convert(-1.23d));"	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress();	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,1);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,2);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,0);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(-1,0);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,null);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(1,3);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,10);	0
873	10	hazelcast_hazelcast-simulator	SimulatorAddressTest#testGetAgentIndex	assertEquals(5,workerAddress(5,2).getAgentIndex());	SimulatorAddressaddress=newSimulatorAddress(0,2);	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertThat(setCookieHeader).isEqualTo(""STR"");"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertEquals(""STR"",setCookieHeader);"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertThat(setCookieHeader,is(""STR""));"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertEquals(""STR"",setCookieHeader);"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertThat(setCookieHeader,containsString(""STR""));"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertTrue(setCookieHeader.contains(""STR""));"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertTrue(setCookieHeader.contains(""STR""));"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"System.out.println(""STR""+setCookieHeader);"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertTrue(setCookieHeader.equals(""STR""));"	0
874	10	NanoHttpd_nanohttpd	CookieHandlerTest#testUnloadQueue	"assertTrue(setCookieHeader.startsWith(""STR""));"	"assertTrue(setCookieHeader.startsWith(""STR""));"	1
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasEntry(""STR"",""STR""));"	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertEquals(""STR"",convertedEnv.get(""STR""));"	1
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),equalTo(""STR""));"	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),is(equalTo(""STR"")));"	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.containsKey(""STR""),is(true));"	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv.get(""STR""),is(""STR""));"	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(1);	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	assertThat(convertedEnv).hasSize(2);	0
875	10	cucumber-ltd_cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest#prefixless_env_var_takes_precendence	"assertEquals(""STR"",convertedEnv.get(""STR""));"	"assertThat(convertedEnv,hasItem(""STR""));"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,equalTo(createVerb(""STR"")));"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,is(equalTo(createVerb(""STR""))));"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,is(notNullValue()));	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertThat(actual,is(createVerb(""STR"")));"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertEquals(createVerb(""STR""),actual);"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertSame(createVerb(""STR""),actual);"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,equalTo(Verb.VOID));	0
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertNotNull(actual);	1
876	10	adlnet_jxapi	VerbsTest#testVoided	assertNotNull(actual);	assertThat(actual,is(equalTo(Verb.VOID)));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertTrue(r1.compareTo(r1)<0);	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertEquals(0,r1.compareTo(r1));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertEquals(-1,r1.compareTo(r1));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	"UriResourcer2=newUriResource(""STR"",null);"	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertTrue(r1.compareTo(r1)>0);	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertEquals(1,r1.compareTo(r1));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertTrue(r1.compareTo(r2)<0);	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertTrue(0<r1.compareTo(r1));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertEquals(0,r1.compareTo(null));	0
877	10	NanoHttpd_nanohttpd	TestNanolets#testUriResourceComparator	assertTrue(r1.compareTo(null)>=1);	assertFalse(r1.compareTo(r1)<0);	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertThat(result,is(true));	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertThat(result,equalTo(true));	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertThat(result).isTrue();	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertTrue(result);	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertTrue(result);	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertTrue(result);	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertTrue(result);	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	"assertThat(""STR"",result,is(true));"	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	"assertThat(""STR"",result,equalTo(true));"	0
878	10	fabric8io_fabric8-maven-plugin	ConfigsTest#getBooleanValueTest	assertEquals(false,result);	assertThat(result,is(equalTo(true)));	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertEquals(""STR"",SimpleLabel.of(""STR"").serialized());"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(SimpleLabel.of(""STR"").serialized(),is(""STR""));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertEquals(""STR"",newSimpleLabel(""STR"").serialized());"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(newSimpleLabel(""STR"").serialized(),is(""STR""));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(SimpleLabel.of(""STR"").serialized(),equalTo(""STR""));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(SimpleLabel.of(""STR"",""STR"").serialized(),is(""STR""));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(SimpleLabel.of(""STR"").serialized(),is(equalTo(""STR"")));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(of(""STR"").serialized(),is(""STR""));"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertThat(SimpleLabel.of(""STR"").serialized()).isEqualTo(""STR"");"	0
879	10	nidi3_graphviz-java	SimpleLabelTest#ofSimpleLabel	"assertEquals(""STR"",SimpleLabel.of(SimpleLabel.of(""STR"")).serialized());"	"assertEquals(""STR"",of(""STR"").serialized());"	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	assertArrayEquals(expected,EbmlUtil.muxEbmlLacing(frameSizes));	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]result=EbmlUtil.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	1
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]result=MkvBlock.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]laceSizes=EbmlUtil.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]data=EbmlUtil.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]laceSize=EbmlUtil.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]raw=EbmlUtil.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]laceSize=MkvBlock.muxEbmlLacing(frameSizes);	0
880	10	jcodec_jcodec	MkvBlockTest#testMuxEbml	assertArrayEquals(expected,MkvBlock.muxEbmlLacing(frameSizes));	byte[]laceSizes=MkvBlock.muxEbmlLacing(frameSizes);	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertNotNull(fields);	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertEquals(0,fields.size());	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertEquals(1,fields.size());	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertFalse(fields.isEmpty());	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertFalse(fields.isEmpty());	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertThat(fields,is(empty()));	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertThat(fields).hasSize(0);	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertThat(fields,empty());	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertThat(fields).isEmpty();	0
881	10	hazelcast_hazelcast-simulator	ReflectionUtilsTest#testGetFields_notFound	assertTrue(fields.isEmpty());	assertThat(fields,hasItem(Field.class));	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",one.getString(""STR""));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",two.getString(""STR""));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",one.getString(""STR""));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",two.getString(""STR""));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",root.getString(""STR""));"	1
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(root.getString(""STR""),two.getString(""STR""));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"",root.getString(""STR""));"	1
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertThat(one.getString(""STR""),is(equalTo(""STR"")));"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"one.set(""STR"",""STR"");"	0
882	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"Stringthree=two.getString(""STR"");"	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(notNullValue()));	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(result,is(equalTo(""STR"")));"	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(1)));	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(result,equalTo(""STR""));"	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,is(equalTo(2)));	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	"assertThat(result).isEqualTo(""STR"");"	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result);	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(2,result);	0
883	10	orientechnologies_orientdb	OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertThat(result,equalTo(1));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,is(3));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,is(2));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,is(1));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,greaterThan(0));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertEquals(3,ret.intValue());	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,is(4));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,equalTo(3));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret,is(5));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret.intValue(),is(3));	0
884	10	orientechnologies_orientdb	OCommandExecutorSQLTruncateTest#testTruncatePlain	assertEquals(ret.intValue(),1);	assertThat(ret).isEqualTo(3);	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=simulatorProperties.get(""STR"",""STR"");"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	1
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	1
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringresult=simulatorProperties.get(""STR"",""STR"");"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=this.simulatorProperties.get(""STR"",""STR"");"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),is(equalTo(""STR"")));"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),is(""STR""));"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertThat(simulatorProperties.get(""STR"",""STR""),equalTo(""STR""));"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"assertEquals(""STR"",this.simulatorProperties.get(""STR"",""STR""));"	0
885	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_withDefaultValue_defaultIsUsed	"assertEquals(""STR"",simulatorProperties.get(""STR"",""STR""));"	"Stringvalue=SimulatorProperties.get(""STR"",""STR"");"	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(2,amountPlusVat.intValue());	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(20));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(1,amountPlusVat.intValue());	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertEquals(3,amountPlusVat.intValue());	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(equalTo(300)));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(equalTo(20)));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(2));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,is(3));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,equalTo(20));	0
886	10	orientechnologies_orientdb	DocumentTest#testEvalInContext	assertEquals(amountPlusVat.longValue(),360l);	assertThat(amountPlusVat,equalTo(300));	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertThat(result,is(""STR""));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertThat(result,is(equalTo(""STR"")));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertThat(result,equalTo(""STR""));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertThat(result).isEqualTo(""STR"");"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertThat(result,containsString(""STR""));"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertEqualsJson(""STR"",result);"	0
887	10	arnohaase_a-foundation	AJsonSerHelperTest#testArray0	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"Stringencoded=Base64.encodeBytes(""STR"".getBytes());"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"Stringencoded=Base64.encodeBytes(""STR"".getBytes(UTF_8));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"Stringencoded=Base64.encodeBytes(""STR"".getBytes(StandardCharsets.UTF_8));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"assertEquals(""STR"",Base64.encodeBytes(""STR"".getBytes(UTF_8)));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"assertEquals(""STR"",Base64.encodeBytes(""STR"".getBytes()));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"assertEquals(""STR"",Base64.encodeBytes(""STR"".getBytes(StandardCharsets.UTF_8)));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"Stringencoded=base64.encodeBytes(""STR"".getBytes());"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"assertEquals(""STR"",base64.encodeBytes(""STR"".getBytes(UTF_8)));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"Stringencoded=base64.encodeBytes(""STR"".getBytes(UTF_8));"	0
888	10	TooTallNate_Java-WebSocket	Base64Test#testEncodeBytes	"assertEquals(""STR"",Base64.encodeBytes(newbyte[0]));"	"assertEquals(""STR"",base64.encodeBytes(""STR"".getBytes()));"	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause.getMessage(),exception.getMessage());	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(""STR"",exception.getMessage());"	1
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause,exception.getCause());	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertEquals(cause.getMessage(),exception.getMessage());	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertSame(cause,exception.getCause());	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	"assertEquals(cause.getMessage()+""STR"",exception.getMessage());"	0
889	10	hazelcast_hazelcast-simulator	ReflectionExceptionTest#testConstructor_withMessageAndCause	"assertEquals(""STR"",exception.getMessage());"	assertEquals(exception.getMessage(),cause.getMessage());	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	scriptExecutor.execute(scriptOperation,promise);	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(scriptOperation,promise);	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR"");}}));"	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR"");}}));"	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{}}));	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	verify(driver).execute(scriptOperation,promise);	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	"assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewException(""STR"");}}));"	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	"assertTrueEventually(newAssertTask(){@Overridepublicvoidrun(){thrownewException(""STR"");}}));"	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	verify(driver,times(1)).execute(eq(scriptOperation),eq(promise));	0
890	10	hazelcast_hazelcast-simulator	ScriptExecutorTest#bash	assertTrue(promise.getAnswer()instanceofString);	"assertFalseEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{thrownewRuntimeException(""STR"");}}));"	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event,is(notNullValue()));	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event,is(not(nullValue())));	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event).isNotNull();	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event,is(instanceOf(CEFStringEvent.class)));	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertNotNull(event);	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event,is(instanceOf(CEFString.class)));	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	assertThat(event,instanceOf(CEFString.class));	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	"assertEquals(""STR"",event.getName());"	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	"assertEquals(""STR"",event.toString());"	0
891	10	fluenda_ParCEFone	CEFParserTest#junkStringValidationTest	assertNull(event);	"assertEquals(""STR"",event.getCEfString());"	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(11,test.get(24));	1
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(11,test.get(24));	1
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(24,test.get(24));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(12,test.get(24));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(10,test.get(24));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertThat(test.get(24),is(11));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(0,test.get(24));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(1,test.get(24));	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertTrue(test.get(24)==11);	0
892	10	jcodec_jcodec	CollectionsTest#testIntIntMap	assertEquals(11,test.get(24));	assertEquals(11,test.get(23));	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(3,result.size());	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(2,result.size());	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(1,result.size());	1
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(3,result.size());	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(4,result.size());	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertEquals(2,result.size());	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertNotNull(result);	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertThat(result,hasItem(1));	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertThat(result.size(),is(4));	0
893	10	orientechnologies_orientdb	OMatchStatementExecutionTest#testTriangle4Arrows	assertEquals(1,result.size());	assertThat(result).hasSize(3);	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertThat(actual,is(expected));	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertEquals(actual,expected);	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
894	10	adlnet_jxapi	ActivityStateTest#testSetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertThat(result,equalTo(expectedResult));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertThat(result,is(expectedResult));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertThat(result,is(equalTo(expectedResult)));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(3,12));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertEquals(expectedResult.toString(),result);	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(2,12));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	expectedResult.add(newOCompositeKey(1,12));	0
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
895	10	orientechnologies_orientdb	OCompositeIndexDefinitionTest#testCreateCollectionValueSuccessfulTwo	assertEquals(result,expectedResult);	assertThat(result,instanceOf(Collection.class));	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(1,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(2,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(3,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	"assertThat(tokens,hasItem(newWord(""STR"")));"	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(1,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(0,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertEquals(2,tokens.size());	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertTrue(tokens.size()==2);	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertTrue(tokens.size()==1);	0
896	10	PeterisP_morphology	TokenizeTest#roberts_20171110	assertEquals(6,tokens.size());	assertTrue(tokens.size()==3);	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	finalFileLoaderloader=newFileLoader(resource);	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	FileLoaderloader=newFileLoader(resource);	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",0L),is(nullValue()));"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",0),is(nullValue()));"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",-1L),is(nullValue()));"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"finalFileLoaderloader=newFileLoader(resource,""STR"");"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",-1),is(nullValue()));"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",1L),is(nullValue()));"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"FileLoaderloader=newFileLoader(resource,""STR"");"	0
897	10	nidi3_raml-loader	LoaderTest#fileNotModified	"assertEquals(""STR"",resource.getProtocol());"	"assertThat(newFileLoader(resource).fetchResource(""STR"",1234L),is(nullValue()));"	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	JMXMBeanConnectionconnection=factory.create(mockConnector);	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	assertThat(factory.create(mockConnector),instanceOf(JMXMBeanConnection.class));	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	assertThat(factory.create(this.mockConnector),instanceOf(JMXMBeanConnection.class));	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	JMXMBeanConnectionconnection=factory.create(this.mockConnector);	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	JmxMBeanConnectionconnection=factory.create(mockConnector);	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	MBeanConnectionconnection=factory.create(mockConnector);	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	JMXMBeanConnectionjmxConnection=factory.create(mockConnector);	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	assertThat(factory.create(mockConnector),instanceOf(JmxMBeanConnection.class));	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	assertThat(factory.create(this.mockConnector),instanceOf(JmxMBeanConnection.class));	0
898	10	amlinv_stat-collection-utils	DefaultJmxMBeanConnectionFactoryTest#testCreate	assertTrue(factory.create(this.mockConnector)instanceofJMXMBeanConnection);	JMXMBeanConnectionconn=factory.create(mockConnector);	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertFalse(multiKey.equals(null));	1
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertTrue(multiKey.equals(null));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertFalse(multiKey.equals(null));	1
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertThat(multiKey.equals(null),is(false));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertThat(multiKey.equals(null),is(true));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertTrue(multiKey.equals(null));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertFalse(multiKey.equals(null));	1
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertFalse(multiKey.equals(newObject()));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertEquals(false,multiKey.equals(null));	0
899	10	orientechnologies_orientdb	OMultiKeyTest#testEqualsNull	assertFalse(multiKey.equals(null));	assertTrue(multiKey.equals(null));	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(expectedDockerfileLines);	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	"expectedDockerfileLines.add(""STR"");"	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	util.disableOpenJ9SCC(dockerfileLines);	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(1,expectedDockerfileLines.size());	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(expectedDockerfileLines);	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	"assertEquals(expectedDockerfileLines,Collections.singletonList(""STR""));"	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	util.enableOpenJ9SCC(dockerfileLines);	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),1);	0
900	10	OpenLiberty_ci.common	DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_negative	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.get(0),1);	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertThat(result,is(nullValue()));	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertThat(result).isNull();	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertEquals(0,result.size());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertThat(result,nullValue());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertEquals(0,result.length());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertEquals(0,result.size());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertNull(result);	1
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertEquals(0,result.intValue());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertEquals(0,result.length());	0
901	10	orientechnologies_orientdb	OSQLFunctionModeTest#testEmpty	assertNull(result);	assertThat(result,is(empty()));	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(7,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(4,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(1,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(5,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(3,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertThat(s.getEstimatedCost(),is(4));	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(2,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertEquals(6,s.getEstimatedCost());	0
902	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	PuzzleStateTest#estimated_cost_is_goal_distance_when_unsolved	assertEquals(p.getDistanceToGoal(),s.getEstimatedCost());	assertThat(s.getEstimatedCost(),equalTo(7));	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(1,results.size());	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(results.size(),2);	1
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(3,results.size());	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue(results.size()>0);	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(1,results.size());	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertThat(results.size(),is(1));	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue(results.size()>0);	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertEquals(results.size(),2);	1
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertThat(results.size(),is(2));	0
903	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testInvertedIndexedCondition	assertEquals(results.size(),2);	assertTrue(results.size()>1);	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(1,tokens.size());	1
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(2,tokens.size());	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(3,tokens.size());	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	"assertThat(tokens,hasItem(newWord(""STR"")));"	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(1,tokens.size());	1
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(2,tokens.size());	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertTrue(tokens.size()==2);	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertTrue(tokens.size()==1);	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertEquals(0,tokens.size());	0
904	10	PeterisP_morphology	TokenizeTest#vecadruka	assertEquals(1,tokens.size());	assertTrue(tokens.size()==3);	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(false));	0
905	10	PeterisP_morphology	MorphologyTest#pusotrs	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.setAppName(""STR"");"	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNull(execs.getAppName());	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertEquals(""STR"",execs.getAppName());"	1
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.run(newString[]{""STR"",""STR""});"	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.run(newString[]{""STR""});"	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.execute(newString[]{""STR"",""STR""});"	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.cliAppName(""STR"");"	0
906	10	vdmeer_execs	Test_ExecS#testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"execs.execute(newString[]{""STR""});"	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
907	10	orientechnologies_orientdb	OMatchStatementExecutionNewTest#testAggregate	assertTrue(result.hasNext());	assertEquals(true,result.hasNext());	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	addedKeys.put(42,2);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	addedKeys.put(42,1);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,2);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	addedKeys.put(1,2);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	addedKeys.put(42,0);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,0);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	removedKeys.put(1,2);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	removedKeys.put(42,1);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	addedKeys.put(42,3);	0
908	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddOnceRemoveTwice	assertEquals(keysToAdd,addedKeys);	removedKeys.put(0,2);	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(true));	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(true));	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertThat(result.hasNext(),equalTo(false));	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertThat(result.hasNext(),is(false));	0
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
909	10	orientechnologies_orientdb	OSelectStatementExecutionTest#testFetchFromSingleRidParam	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	1
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"Stringresult=InstallFeatureUtil.getNextProductVersion(""STR"");"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	1
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"StringproductVersion=InstallFeatureUtil.getNextProductVersion(""STR"");"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertThat(InstallFeatureUtil.getNextProductVersion(""STR""),is(""STR""));"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertThat(InstallFeatureUtil.getNextProductVersion(""STR""),equalTo(""STR""));"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"Stringversion=""STR"";"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"InstallFeatureUtil.getNextProductVersion(""STR"");"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(TEST_VERSION));"	0
910	10	OpenLiberty_ci.common	InstallFeatureUtilTest#testGetNextProductVersion	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""));"	"assertEquals(""STR"",InstallFeatureUtil.getNextProductVersion(""STR""+""STR""));"	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.hasNext(),is(true));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertTrue(it.hasNext());	1
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.next(),is(notNullValue()));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.hasNext(),equalTo(true));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertTrue(it.hasNext());	1
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.hasNext(),is(false));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	it.next();	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.next(),is(not(nullValue())));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertThat(it.hasNext(),equalTo(false));	0
911	10	orientechnologies_orientdb	SQLGraphBatchTest#testTraverseContext	assertTrue(it.hasNext());	assertEquals(1,it.hasNext());	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertThat(res.size(),is(1));	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertEquals(2,res.size());	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").doubleValue());"	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertThat(res.size(),is(2));	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").floatValue());"	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	"assertEquals(minDouble,res.get(0).getAttribute(""STR"").asDouble());"	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertThat(res).hasSize(1);	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertThat(res,hasSize(1));	0
912	10	orientechnologies_orientdb	OETLCSVExtractorTest#testDouble	assertFalse(res.isEmpty());	assertEquals(minDouble,res.size());	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertThat(CloudProviderUtils.isLocal(properties),is(true));	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertThat(CloudProviderUtils.isLocal(properties),is(false));	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	booleanresult=CloudProviderUtils.isLocal(properties);	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertTrue(CloudProviderUtils.isLocal(properties));	1
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	booleanisLocal=CloudProviderUtils.isLocal(properties);	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertFalse(CloudProviderUtils.isLocal(properties));	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertThat(CloudProviderUtils.isLocal(properties),equalTo(true));	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	booleanlocal=CloudProviderUtils.isLocal(properties);	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	assertThat(CloudProviderUtils.isLocal(properties),equalTo(false));	0
913	10	hazelcast_hazelcast-simulator	CloudProviderUtilsTest#testIsLocal_fromProperties_withLocal	assertTrue(CloudProviderUtils.isLocal(properties));	booleanisLocal=CloudProviderUtils.isLocal(properties);	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertTrue(StringUtils.isBlank(""STR""));"	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertFalse(StringUtils.isBlank(""STR""));"	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	assertTrue(StringUtils.isBlank(null));	1
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertThat(StringUtils.isBlank(""STR""),is(true));"	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	assertFalse(StringUtils.isBlank(null));	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertThat(StringUtils.isBlank(""STR""),is(false));"	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	assertThat(StringUtils.isBlank(null),is(true));	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertTrue(StringUtils.isBlank(""STR""));"	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	assertThat(StringUtils.isBlank(null),is(false));	0
914	10	sofastack_sofa-bolt	StringUtilsTest#testIsBlank	assertTrue(StringUtils.isBlank(null));	"assertEquals(false,StringUtils.isBlank(""STR""));"	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertThat(docToStore,is(notNullValue()));	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertThat(propertyIndex,is(notNullValue()));	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertThat(propertyIndex.reload(),is(true));	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	docToStore.reload();	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	result.reload();	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	verify(propertyIndex).reload();	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertEquals(result,propertyIndex);	1
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	"assertEquals(""STR"",result.toString());"	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertTrue(propertyIndex.reload());	0
915	10	orientechnologies_orientdb	OPropertyIndexDefinitionTest#testIndexReload	assertEquals(result,propertyIndex);	assertTrue(docToStore.exists());	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertEquals(""STR"",res);"	1
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertEquals(""STR"",res);"	1
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertTrue(res.contains(""STR""));"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertThat(res,is(""STR""));"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertThat(res).isEqualTo(""STR"");"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertTrue(res.contains(""STR""));"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertTrue(res.contains(""STR""));"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertThat(res,equalTo(""STR""));"	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	assertTrue(StringUtils.isNotEmpty(res));	0
916	10	sofastack_sofa-bolt	RemotingUtilTest#testParseSocketAddressToString_MuiltiFormatTest	"assertEquals(""STR"",res);"	"assertTrue(res.matches(""STR""));"	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(0,result.getClusterIdByName(clusterName));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.getClusterIdByName(clusterName));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(1));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),is(0));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(1));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(0,result.getClusterIdByName(clusterName));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(-1,result.getClusterIdByName(clusterName));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	assertThat(result.getClusterIdByName(clusterName),equalTo(0));	0
917	10	orientechnologies_orientdb	OCreateClusterStatementExecutionTest#testIfNotExists	assertTrue(db.getClusterIdByName(clusterName)>0);	intclusterId=result.getClusterIdByName(clusterName);	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"Rankrank=newRank(""STR"");"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),Matchers.hasItem(""STR"",""STR""));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),Matchers.hasItem(""STR"",""STR""));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	Rankrank=newRank();	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"assertThat(rank(""STR""),hasItem(newAttribute(""STR"",""STR""),newAttribute(""STR"",""STR"")));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),Attributes.hasItem(""STR"",""STR""));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"Rankrank=newRank(""STR"",""STR"");"	0
918	10	nidi3_graphviz-java	RankTest#sep	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Rank.sep(2)));"	"MatcherassertThat(newRank<>(""STR"",Arrays.asList(newAttribute<>(""STR"",""STR""),newAttribute<>(""STR"",""STR""))),hasItem(""STR"",""STR""));"	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(buf1,buf2);	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(buf1,buf2);	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(1,buf1.remaining());	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(1,buf1.remaining());	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(4,buf1.remaining());	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	reader.setBufferIncrement(2);	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(1,buf1.capacity());	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertTrue(buf1.hasRemaining());	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertNotNull(buf1);	0
919	10	jcodec_jcodec	SegmentReaderTest#testToNextMarkerPartialVar3	assertEquals(ByteBuffer.wrap(bytes,0,5),buf1);	assertEquals(1,buf1.capacity());	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertEquals(""STR"",VirtualProctor.getClassName());"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertEquals(""STR"",VirtualProctor.getClassName());"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertThat(VirtualProctor.getClassName(),is(equalTo(""STR"")));"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertThat(VirtualProctor.getClassName(),equalTo(""STR""));"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertThat(VirtualProctor.getClassName(),is(""STR""));"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertEquals(VirtualProctor.getClassName(),""STR"");"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"assertThat(VirtualProctor.getClassName()).isEqualTo(""STR"");"	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	assertNotNull(VirtualProctor.getClassName());	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	StringclassName=VirtualProctor.getClassName();	0
920	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	VirtualProctorTest#testSetClassName	"assertEquals(""STR"",VirtualProctor.internals.getClassName());"	"System.out.println(""STR""+VirtualProctor.getClassName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",newAppveyor(env).getName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",newAppveyor().getName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",newAppveyor(env).getName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(Appveyor.APPVEYOR_NAME,newAppveyor(env).getName());	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(APPVEYOR_NAME,newAppveyor(env).getName());	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(Appveyor.APPVEYOR_NAME,newAppveyor().getName());	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",newAppveyor().getName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertEquals(Appveyor.APPVEYOR_NAME,env.getAppveyor().getName());	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",env.getAppveyor().getName());"	0
921	10	trautonen_coveralls-maven-plugin	AppveyorTest#testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	Appveyorappveyor=newAppveyor(env);	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	"assertEquals(""STR"",markdownText);"	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertThat(markdownText,is(equalTo(htmlText)));	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertThat(markdownText,equalTo(htmlText));	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertEquals(testText,markdownText);	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	"assertTrue(markdownText.contains(""STR""));"	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertEquals(htmlText,markdownText);	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	"assertThat(markdownText,containsString(""STR""));"	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertThat(markdownText).isEqualTo(htmlText);	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	assertTrue(markdownText.contains(htmlText));	0
922	10	myabc_markdownj	MarkdownTestTester#runTest	assertEquals(test,htmlText.trim(),markdownText.trim());	"assertEquals(""STR""+test,markdownText);"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR"");"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""));"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=""STR"";"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""));"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringmarkdown=m.markdown(""STR"");"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Strings=m.markdown(""STR"");"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR"");"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"m.markdown(""STR"");"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"assertEquals(""STR"",m.markdown(""STR""+""STR""+""STR""));"	0
923	10	myabc_markdownj	HandleHtmlInlineTagsTest#testUpperCaseInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	"Stringh=m.markdown(""STR""+""STR""+""STR"");"	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,is(expectedURL));	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl).isEqualTo(expectedURL);	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedURL));	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertThat(normalizedUrl,equalTo(expectedURL));	0
924	10	DigitalPebble_storm-crawler	BasicURLNormalizerTest#testHostIDNtoASCII	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.matches(expectedURL));	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=""STR"".getBytes(StandardCharsets.US_ASCII);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]data=""STR"".getBytes(StandardCharsets.US_ASCII);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,2);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,1);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"assertEquals(""STR"",Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,2));"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"assertEquals(""STR"",Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,1));"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,4);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"assertEquals(""STR"",Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,4));"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,3);"	0
925	10	TooTallNate_Java-WebSocket	CharsetfunctionsTest#testStringAscii1	"assertEquals(""STR"",Charsetfunctions.stringAscii(newbyte[]{102,111,111,66,97,114},2,4));"	"byte[]bytes=Charsetfunctions.stringAscii(""STR"".getBytes(StandardCharsets.US_ASCII),0,5);"	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	1
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertNotNull(webSocketImpl);	1
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(WebSocketImpl.class));	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(CustomWebSocketAdapter.class));	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(webSocketAdapter,webSocketImpl);	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertEquals(webSocketAdapter,webSocketImpl);	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl).isNotNull();	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketAdapter,instanceOf(WebSocketImpl.class));	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,is(notNullValue()));	0
926	10	TooTallNate_Java-WebSocket	CustomSSLWebSocketServerFactoryTest#testCreateWebSocket	assertNotNull(webSocketImpl);	assertThat(webSocketImpl,instanceOf(CustomWebSocket.class));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertThat(binarySize,is(OShortSerializer.SHORT_SIZE));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE,binarySize);	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+binarySize,stringSerializer.getObjectSize(OBJECT));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+2,binarySize);	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertThat(binarySize,is(OShortSerializer.SHORT_SIZE+2));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertThat(binarySize,is(OShortSerializer.SHORT_SIZE+serializationOffset));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertThat(binarySize,equalTo(OShortSerializer.SHORT_SIZE));	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+1,binarySize);	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertTrue(binarySize>=OShortSerializer.SHORT_SIZE);	0
927	10	orientechnologies_orientdb	OUTFSerializerTest#testSerializeInByteBuffer	assertEquals(binarySize,stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+binarySize,serializationOffset);	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(Collections.singletonList(""STR"")));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(Collections.singletonList(""STR"")));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(Collections.singleton(""STR"")));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertThat(ACollectionHelper.asJavaUtilCollection(Arrays.asList(""STR"",""STR"")),hasItem(""STR""));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertThat(ACollectionHelper.asJavaUtilCollection(Collections.singletonList(""STR"")),hasItem(""STR""));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(newArrayList<String>()->{
}));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(newArrayList<>()));"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"List<String>list=Arrays.asList(""STR"",""STR"");"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"Collection<String>collection=Arrays.asList(""STR"",""STR"");"	0
928	10	arnohaase_a-foundation	ACollectionHelperTest#testAsJavaUtilCollection	assertEquals(true,ACollectionHelper.asJavaUtilCollection(newArrayList<>()).isEmpty());	"assertEquals(Arrays.asList(""STR"",""STR""),ACollectionHelper.asJavaUtilCollection(Arrays.asList(""STR"",""STR"")));"	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(1,actual.size());	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(2,actual.size());	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(3,actual.size());	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertThat(actual,hasItem(MBOX));	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.size()==2);	0
929	10	adlnet_jxapi	GroupTest#testSetMember	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	createClasses(db);	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(1,loader.countClass(""STR""));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(0,loader.countClass(""STR""));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	db.close();	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),is(1));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(0,loader.countClass(""STR""));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertThat(db.countClass(""STR""),is(1));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),is(2));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertThat(loader.countClass(""STR""),is(0));"	0
930	10	orientechnologies_orientdb	OETLEdgeTransformerTest#testErrorOnDuplicateVertex	"assertEquals(1,db.countClass(""STR""));"	"assertThat(db.countClass(""STR""),is(2));"	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertTrue(result);	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertThat(result,is(true));	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertTrue(result);	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertThat(result,equalTo(true));	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	"assertThat(""STR"",result,is(true));"	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	"assertThat(""STR"",result,equalTo(true));"	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertTrue(result);	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertTrue(result);	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertFalse(result);	0
931	10	DigitalPebble_storm-crawler	CookieConverterTest#testDomainsChecker4	assertEquals(false,result);	assertThat(result,equalTo(false));	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Language.USD));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Language.USD));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_20,Language.USD));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(1.23d,Language.USD));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Language.RUS));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,MoneyToStr.Language.RUS));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_34,Pennies.TEXT));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Pennies.TEXT));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_1_23,Language.RUS));"	0
932	10	javadev_moneytostr-russian	MoneyToStrTest#percentToStr	"assertEquals(""STR"",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));"	"assertEquals(""STR"",MoneyToStr.percentToStr(GBP_2_33,MoneyToStr.Language.RUS));"	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	1
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	"assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler(""STR"").getStatus());"	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler(null).getStatus());	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	"assertEquals(""STR"",newRouterNanoHTTPD.IndexHandler().getStatus());"	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	"assertEquals(IStatus.OK,newRouterNanoHTTPD.IndexHandler(""STR"").getStatus());"	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(IStatus.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	1
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	"assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler(""STR"").getStatus());"	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(Status.OK,newIndexHandler().getStatus());	0
933	10	NanoHttpd_nanohttpd	TestNanolets#testIndexHandlerGetStatus	assertEquals(Status.OK,newRouterNanoHTTPD.IndexHandler().getStatus());	assertEquals(Status.OK,createHandler().getStatus());	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updatedRecords=manager.getNewRecords();	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>newRecords=manager.getNewRecords();	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	1
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	1
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc1));	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updateRecords=manager.getNewRecords();	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc2));	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	Set<ORecord>updated=manager.getNewRecords();	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().size()==2);	0
934	10	orientechnologies_orientdb	ODirtyManagerTest#testEmbeddedCollection	assertEquals(1,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc1));	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertEquals(""STR"",simulatorProperties.getSshOptions());"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	StringsshOptions=simulatorProperties.getSshOptions();	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertThat(simulatorProperties.getSshOptions(),is(equalTo(""STR"")));"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertThat(simulatorProperties.getSshOptions(),is(""STR""));"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertEquals(""STR"",this.simulatorProperties.getSshOptions());"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertEquals(""STR"",simulatorProperties.getSshOptions());"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	StringsshOptions=this.simulatorProperties.getSshOptions();	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	"assertThat(simulatorProperties.getSshOptions(),equalTo(""STR""));"	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	finalStringsshOptions=simulatorProperties.getSshOptions();	0
935	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGetSshOptions	assertNotNull(simulatorProperties.getSshOptions());	finalStringsshOptions=this.simulatorProperties.getSshOptions();	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertThat(nextFetch.isPresent(),is(false));	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertFalse(nextFetch.isPresent());	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	Optional<Date>previousFetch=scheduler.schedule(Status.ERROR,metadata);	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	Optional<Date>nextFetch2=scheduler.schedule(Status.ERROR,metadata);	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertThat(nextFetch,is(Optional.empty()));	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertThat(nextFetch).isEmpty();	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	Optional<Date>expectedFetch=Optional.empty();	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertThat(nextFetch.get(),is(nullValue()));	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	assertThat(nextFetch.isPresent(),is(true));	0
936	10	DigitalPebble_storm-crawler	DefaultSchedulerTest#testSpecificNever	assertEquals(false,nextFetch.isPresent());	Optional<Date>previousFetch=scheduler.schedule(Status.FETCH_ERROR,metadata);	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertEquals(1,res.size());	1
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertEquals(2,res.size());	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertEquals(3,res.size());	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertThat(res.size(),is(1));	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertThat(res.size(),is(2));	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertTrue(res.size()>0);	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	"assertThat(res,hasItem(newORecord(""STR"")));"	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertTrue(res.size()==1);	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertEquals(4,res.size());	0
937	10	orientechnologies_orientdb	TestBinaryRecordsQuery#testSelectBinary	assertEquals(1,res.size());	assertEquals(0,res.size());	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertEquals(""STR"",util.getHostName());"	1
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertEquals(""STR"",util.getHostName());"	1
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertThat(util.getHostName(),is(""STR""));"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertThat(util.getHostName(),equalTo(""STR""));"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertTrue(util.getHostName().contains(""STR""));"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertTrue(util.getHostName().contains(""STR""));"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertThat(util.getHostName()).isEqualTo(""STR"");"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertTrue(util.getHostName().equals(""STR""));"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"System.out.println(""STR""+portPrefixIndex);"	0
938	10	OpenLiberty_ci.common	DevUtilHostnamePortTest#testParseHostnameHttpPortFromHttps	"assertEquals(""STR"",util.getHostName());"	"assertEquals(""STR"",util.getHostname());"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"assertThat(finder.clusterOf(node(""STR"")),equalTo(g));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(node(""STR"")),Matchers.hasSize(1));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(node(""STR"")),Matchers.hasItem(g));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(newElement(""STR"")),Matchers.hasItem(g));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(newElement(""STR"")),Matchers.hasSize(1));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(element(""STR"")),Matchers.hasSize(1));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"assertThat(finder.clusterOf(element(""STR"")),equalTo(g));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(node(""STR"")),Matchers.hasSize(2));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(node(""STR"")),Matchers.equalTo(g));"	0
939	10	nidi3_graphviz-java	GraphElementFinderTest#clusterOf	assertEquals(sub,finder.clusterOf(finder.findClusters().get(0)));	"MatcherassertThat(finder.clusterOf(element(""STR"")),Matchers.hasItem(g));"	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertEquals(expected,actual);	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertEquals(expected,actual);	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	"assertTrue(actual.containsKey(""STR""));"	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertNotEquals(expected,actual);	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertTrue(actual==expected);	0
940	10	adlnet_jxapi	InteractionComponentTest#testGetDescription	assertNotNull(actual);	assertTrue(actual.isEmpty());	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,totalStats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,totalStats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_2,totalStats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_2,totalStats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,a1w2Stats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,null,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,a1w2Stats,agentStats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	performanceStatsCollector.calculatePerformanceStats(TEST_CASE_ID_1,agentStats,a1w2Stats);	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	assertThat(agentStats.get(TEST_CASE_ID_1),is(a1w1Stats));	0
941	10	hazelcast_hazelcast-simulator	PerformanceStatsCollectorTest#testCalculatePerformanceStats	assertEquals(2,agentStats.size());	assertThat(agentStats).hasSize(1);	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertThat(binaryFrame.getPayloadData(),is(ByteBuffer.wrap(""STR"".getBytes())));"	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertTrue(binaryFrame.getPayloadData().hasRemaining());	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertEquals(0,binaryFrame.getPayloadData().remaining());	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertEquals(""STR"",binaryFrame.getPayloadData().toString());"	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertEquals(binaryFrame.getPayloadData(),defaultExtension.getPayloadData());	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(defaultExtension.getPayloadData());	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	assertNotNull(binaryFrame.getPayloadData());	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertEquals(""STR"".getBytes(),binaryFrame.getPayloadData().remaining());"	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertEquals(""STR"".getBytes(),binaryFrame.getPayloadData().array());"	0
942	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testDecodeFrame	"assertEquals(ByteBuffer.wrap(""STR"".getBytes()),binaryFrame.getPayloadData());"	"assertEquals(""STR"",binaryFrame.getPayloadData().toString());"	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertEquals(Integer.valueOf(3),result);	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(3)));	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertThat(result,equalTo(3));	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertThat(result,is(3));	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertNull(result);	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertThat(result,is(equalTo(Integer.valueOf(3))));	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertEquals(3,result);	0
943	10	orientechnologies_orientdb	OMathExpressionTest#testPriority4	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),is(90));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),is(180));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),equalTo(90));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),equalTo(180));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),is(-90));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	"System.out.println(""STR"");"	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),is(-180));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),equalTo(-90));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),equalTo(-180));	0
944	10	TeachingKidsProgramming_TeachingKidsProgramming.Source.Java	AngleCalculatorTest#testCalculateAngle	assertEquals(-90.0,newAngleCalculator(0,0,-1,0).getDegreesWith0North());	assertThat(newAngleCalculator().getDegreesWith0North(),is(0.0));	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"assertEquals(""STR"",newTravis(env).getJobId());"	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"assertEquals(""STR"",newTravis().getJobId());"	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	Travistravis=newTravis(env);	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"assertEquals(""STR"",newTravis(env).getJobId());"	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	finalTravistravis=newTravis(env);	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"System.out.println(""STR"");"	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"assertEquals(""STR"",newTravis().getJobId());"	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	Travistravis=newTravis();	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	finalTravistravis=newTravis();	0
945	10	trautonen_coveralls-maven-plugin	TravisTest#testGetJobId	"assertEquals(""STR"",newTravis(env()).getJobId());"	"assertEquals(""STR"",newTravis(null).getJobId());"	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXls2=newClassPathResource(""STR"");"	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallersut=newGenericode10CodeListMarshaller();	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallero=newGenericode10CodeListMarshaller();	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaXlsSds=newClassPathResource(""STR"");"	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalGenericode10CodeListMarshallers=newGenericode10CodeListMarshaller();	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().readValue(aXls,CodeListDocument.class);	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaSds=newClassPathResource(""STR"");"	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	"finalIReadableResourceaCodeList=newClassPathResource(""STR"");"	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().fromResource(aXls);	0
946	10	phax_ph-genericode	ExcelSheetToCodeList10Test#testReadExcel	assertTrue(aXls.exists());	finalCodeListDocumentaCodeList=newGenericode10CodeListMarshaller().fromXLSStream(aXls);	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,is(expected));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.matches(expected));	0
947	10	adlnet_jxapi	SubStatementTest#testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(1,linkSerializer.getObjectSize(serialized,0));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(size,linkSerializer.getObjectSize(serialized,0));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(2,linkSerializer.getObjectSize(serialized,0));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(1,serialized.length);	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(size+1,linkSerializer.getObjectSize(serialized,0));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(1,serializer.getObjectSize(serialized,0));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	1
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(1,linkSerializer.getObjectSize(serialized,size));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(1,linkSerializer.getObjectSize(serialized,2));	0
948	10	orientechnologies_orientdb	CompactedLinkSerializerTest#testSerializeOneByte	assertEquals(size,linkSerializer.getObjectSize(serialized,1));	assertEquals(2,linkSerializer.getObjectSize(serialized,1));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertNotNull(extractor);	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor,is(notNullValue()));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor,instanceOf(CachedExtractor.class));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertNotNull(extractor);	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor,is(instanceOf(CachedExtractor.class)));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor).isNotNull();	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertNotNull(extractor);	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor,instanceOf(BasicExtractor.class));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertThat(extractor,is(instanceOf(BasicExtractor.class)));	0
949	10	AlejandroRivera_embedded-rabbitmq	ExtractorFactoryTest#withoutCaching	assertTrue(extractor.getClass().equals(BasicExtractor.class));	assertNotNull(extractor);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	ODocumentdocument2=serializer.toStream(document,false);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	Documentdocument2=serializer.toStream(document,false);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	"extr.field(""STR"");"	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	ODocumentdocument2=serializer.toStream(document,true);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	"document.field(""STR"",1);"	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	"document.field(""STR"",0);"	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	Documentdocument2=serializer.toStream(document,true);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	ORecordrecord=newORecord();	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	ODocumentdocument2=serializer.toStream(extr,false);	0
950	10	orientechnologies_orientdb	ODocumentSchemalessBinarySerializationTest#testPartialCustom	"assertEquals(document.field(""STR""),extr.<Object>field(""STR""));"	"document.field(""STR"",2);"	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),is(true));	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(true));	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertThat(w.isRecognized(),equalTo(false));	0
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
951	10	PeterisP_morphology	MorphologyTest#zaļoksnējajā	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(""STR"");"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,is(""STR""));"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,is(equalTo(""STR"")));"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url,equalTo(""STR""));"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,""STR""));"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertTrue(url.contains(""STR""));"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualTo(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,""STR"")+""STR"");"	0
952	10	cucumber-ltd_cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest#builds_url_for_saas_by_default	"assertEquals(""STR"",url);"	"assertThat(url).isEqualToIgnoringCase(""STR"");"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"Stringvalue=simulatorProperties.get(""STR"");"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertEquals(""STR"",simulatorProperties.get(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(""STR""),is(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertEquals(""STR"",this.simulatorProperties.get(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertEquals(""STR"",simulatorProperties.get(SimulatorProperties.GROUP_NAME));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertNull(simulatorProperties.get(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(SimulatorProperties.GROUP_NAME),is(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertThat(simulatorProperties.get(""STR""),equalTo(""STR""));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertEquals(""STR"",this.simulatorProperties.get(SimulatorProperties.GROUP_NAME));"	0
953	10	hazelcast_hazelcast-simulator	SimulatorPropertiesTest#testGet_GROUP_NAME	"assertNotNull(simulatorProperties.get(""STR""));"	"assertNull(simulatorProperties.get(""STR""));"	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)1,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)2,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)0,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(compiler.getNfa(),(short)1,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	assertEquals(1,runtime.getcolor('a'));	1
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(compiler.getPlIN,(short)1,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).traceNewarc(Compiler.PLAIN,(short)1,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)3,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(compiler.PLAIN,(short)1,from,to);	0
954	10	basis-technology-corp_tcl-regex-java	ColorMapTest#testSubout	assertEquals(1,runtime.getcolor('a'));	inOrder.verify(nfa,times(1)).newarc(Compiler.PLAIN,(short)4,from,to);	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	Trien2=newTrie(Trie.n2_dz_initials());	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	Trien2=newTrie(Trie.n1_dz_initials());	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	"assertTrue(""STR"",loc��t��js.match(""STR""));"	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	Trien2=newTrie(Trie.n2_a_clock());	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	"assertTrue(n1.match(""STR""));"	1
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	n1.add(Trie.n2_a_clock());	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	"assertTrue(n1.match(""STR""));"	1
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	"n1.add(""STR"");"	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	Trien2=newTrie(Trie.n1_dz_automatons());	0
955	10	PeterisP_morphology	TokenizeTest#trie_automatons	"assertTrue(n1.match(""STR""));"	Trien2=newTrie(Trie.n2_a_initials());	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	assertTrue(DevUtil.getLongestCommonDir(src,configDirectory).exists());	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	assertEquals(serverDirectory,DevUtil.getLongestCommonDir(src,configDirectory));	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	"assertEquals(""STR"",DevUtil.getLongestCommonDir(src,configDirectory).getAbsolutePath());"	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	assertEquals(src,DevUtil.getLongestCommonDir(serverDirectory,configDirectory));	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	assertTrue(DevUtil.getLongestCommonDir(src,serverDirectory).exists());	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	assertNotNull(DevUtil.getLongestCommonDir(src,configDirectory));	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	"assertEquals(""STR"",DevUtil.getLongestCommonDir(src,configDirectory).toString());"	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	"assertEquals(""STR"",DevUtil.getLongestCommonDir(serverDirectory,configDirectory).getAbsolutePath());"	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	"assertEquals(""STR"",DevUtil.getLongestCommonDir(src,serverDirectory).getAbsolutePath());"	0
956	10	OpenLiberty_ci.common	DevUtilTest#testLongestCommonDir	"assertEquals(newFile(""STR""),DevUtil.getLongestCommonDir(newFile(""STR""),newFile(""STR"")));"	"assertEquals(""STR"",DevUtil.getLongestCommonDir(src,serverDirectory).toString());"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	1
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertFalse(config.isNull(""STR""));"	1
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertTrue(config.isNull(""STR""));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(true));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(false,config.isNull(""STR""));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),is(false));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(true));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertEquals(true,config.isNull(""STR""));"	0
957	10	cucumber-ltd_cucumber-pro-plugin-jvm	ConfigTest#set_value_is_not_null	"assertFalse(config.isNull(""STR""));"	"assertThat(config.isNull(""STR""),equalTo(false));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",AppNanolets.normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",AppNanolets.normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",NormalizationUtils.normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertThat(AppNanolets.normalizeUri(""STR""),is(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",Normalizers.normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",AppNanolets.normalizeUri(null));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"Stringuri=AppNanolets.normalizeUri(""STR"");"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",Normalizer.normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",normalizeUri(""STR""));"	0
958	10	NanoHttpd_nanohttpd	TestNanolets#normalize	assertNull(RouterNanoHTTPD.normalizeUri(null));	"assertEquals(""STR"",NormalizerUtils.normalizeUri(""STR""));"	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(1,small.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(smallArray.remaining(),bigArray.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(small.remaining(),big.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(2,small.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertTrue(small.remaining()==big.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(1,small.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(0,small.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(smallArray.remaining(),bigArray.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertEquals(4,small.remaining());	0
959	10	TooTallNate_Java-WebSocket	ByteBufferUtilsTest#testTransferByteBufferSmallToBig	assertArrayEquals(smallArray,small.array());	assertTrue(small.remaining()>big.remaining());	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertThat(actual,is(expected));	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	"assertEquals(expected.toString()+""STR"",actual.toString());"	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
960	10	adlnet_jxapi	AttachmentTest#testSetUsageType	assertNotNull(actual);	assertNotEquals(expected,actual);	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(1);	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts.args).hasSize(2);	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts,is(notNullValue()));	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertThat(opts.args,hasItem(""STR""));"	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.name);"	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).name);"	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThat(opts).hasSize(1);	0
961	10	nidi3_graphviz-java	GraphvizServerTest#cmdLineValue	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertEquals(""STR"",opts.args.get(0).value);"	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	"byte[]data=""STR"".getBytes(StandardCharsets.UTF_8);"	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	"byte[]data=""STR"".getBytes(CharsetUtil.UTF_8);"	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	"byte[]data=""STR"".getBytes(StandardCharsets.US_ASCII);"	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	"byte[]data=""STR"".getBytes();"	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	assertEquals(1,EbmlSint.ebmlSignedLength(-0x400000000L));	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	assertEquals(1,EbmlSint.ebmlSignedLength(-0x1000000000000L));	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	assertEquals(1,EbmlSint.ebmlSignedLength(0x1000000000000L));	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	assertEquals(1,EbmlSint.ebmlSignedLength(0xffffffffL));	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	assertEquals(1,EbmlSint.ebmlSignedLength(0x400000000L));	0
962	10	jcodec_jcodec	EbmlSintTest#testPacking	assertEquals(1,ebmlSignedLength(1));	"byte[]data=""STR"".getBytes(UTF_8);"	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(2,res.size());	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,res.size());	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(3,res.size());	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(2,res.size());	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertThat(res.size(),is(1));	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(res.size()>0);	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,res.size());	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(res.size()>1);	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(res.size()==1);	0
963	10	orientechnologies_orientdb	OChainIndexFetchTest#testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(res.size()==2);	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertEquals(2,result.size());	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,1,""STR"",""STR""))));"	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,2,""STR"",""STR""))));"	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,3,""STR"",""STR""))));"	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertEquals(1,result.size());	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertEquals(2,result.size());	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	"assertThat(result,hasItem(newWorkerData(newParameters(agent1,4,""STR"",""STR""))));"	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertEquals(1,result.size());	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertThat(result.size(),is(2));	0
964	10	hazelcast_hazelcast-simulator	WorkerQueryTest#maxCount	assertEquals(asList(list.get(0),list.get(1)),result);	assertEquals(3,result.size());	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertEquals(1,index.getSize());	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertEquals(2,index.getSize());	1
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertThat(index.getSize(),is(2));	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertThat(index.getSize(),is(1));	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertTrue(index.getSize()>0);	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertThat(index.getSize(),equalTo(2));	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertThat(index.getSize(),greaterThan(0));	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertEquals(3,index.getSize());	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertEquals(4,index.getSize());	0
965	10	orientechnologies_orientdb	LuceneSpatialMultiLineStringTest#testWithIndex	assertEquals(2,index.getSize());	assertEquals(0,index.getSize());	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertThat(actual,equalTo(expected));	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertNotEquals(expected,actual);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertThat(actual,is(expected));	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertTrue(actual==expected);	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
966	10	adlnet_jxapi	ActivityStateTest#testGetAgent	assertNotNull(actual);	assertTrue(actual==expected);	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	assertThat(probe,is(notNullValue()));	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,is(notNullValue()));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	assertNotNull(probe);	1
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,is(not(nullValue())));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).failureThreshold(3).successThreshold(1).url(""STR"").tcpPort(""STR"").build())));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).url(""STR"").tcpPort(""STR"").build())));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).failureThreshold(3).successThreshold(1).url(""STR"").build())));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).url(""STR"").tcpPort(""STR"").build()));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).successThreshold(3).url(""STR"").tcpPort(""STR"").build())));"	0
967	10	fabric8io_fabric8-maven-plugin	ProbeHandlerTest#getTCPProbeWithNonHTTPURLTest	assertNotNull(probe);	"assertThat(""STR"",probe,equalTo(newProbe.Builder().initialDelaySeconds(5).timeoutSeconds(5).build()));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23d));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(3.14d));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_2_34));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(2.5d));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_1_23));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.23));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(0.5d));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(1.5d));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(GBP_1_34));"	0
968	10	javadev_moneytostr-russian	MoneyToStrTest#checkUSDRUS	"assertEquals(""STR"",moneyToStrUSDRUS.convert(V_300D));"	"assertEquals(""STR"",moneyToStrUSDRUS.convert(-1.23d));"	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),is(""STR""));"	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),equalTo(""STR""));"	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertThat(defaultExtension.toString(),is(equalTo(""STR"")));"	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(DefaultExtension.class.getSimpleName(),defaultExtension.toString());	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(DefaultExtension.class.getSimpleName()+""STR"",defaultExtension.toString());"	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertEquals(DefaultExtension.class.getSimpleName(),defaultExtension.getClass().getSimpleName());	0
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	"assertEquals(""STR"",defaultExtension.toString());"	1
969	10	TooTallNate_Java-WebSocket	DefaultExtensionTest#testToString	"assertEquals(""STR"",defaultExtension.toString());"	assertThat(defaultExtension.toString(),equalTo(DefaultExtension.class.getSimpleName()));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),hasItem(1));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(ImmutableList.of(),Collectors.toImmutableList());	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(1));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),is(ImmutableList.of(3)));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),isEmpty());	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.toImmutableList(),is(ImmutableList.of(1)));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(3));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(0));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),hasItem(2));	0
970	10	gvlasov_collections-utils	CollectorsTest#toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertThat(Collectors.<Integer,?,ImmutableList<Integer>>toImmutableList(),is(ImmutableList.of(1)));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.hasNext(),is(true));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(1,2,3,4));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(2,3,4));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),contains(1,2,3,4));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),is(2));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator,contains(3,4));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertThat(iterator.next(),contains(2,3,4));	0
971	10	gvlasov_collections-utils	StreamIterableTest#containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	cl1.addCl2(newCl2(cl1));	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	Stringjson=ToJSON.toJSON(cl1);	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	1
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
972	10	jcodec_jcodec	ToJSONTest#testCycle	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	"assertEquals(""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR""+""STR"",ToJSON.toJSON(cl1));"	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	longidxUsagesAfter=indexUsages(qResult);	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertEquals(1,qResult.size());	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	longidxUsagesAfter=indexUsages(db);	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	intidxUsagesAfter=indexUsages(qResult);	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(1));	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertEquals(3,qResult.size());	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	"longidxUsagesAfter=indexUsages(qResult,""STR"");"	0
973	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testProjection2	assertEquals(qResult.size(),2);	assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(this.mockLogger,factory.getLog());	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertNull(this.factory.getLog());	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog(),is(this.mockLogger));	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog()).isEqualTo(this.mockLogger);	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(factory.getLog(),is(this.mockLogger));	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertThat(this.factory.getLog(),instanceOf(Logger.class));	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	this.factory.setLog(this.mockLogger);	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertNull(this.factory.getLog());	0
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(this.factory.getLog());	1
974	10	amlinv_stat-collection-utils	JMXJvmIdConnectionFactoryTest#testGetSetLog	assertNotNull(this.factory.getLog());	finalLoggerlog=this.factory.getLog();	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	finalMap<Object,Integer>expectedKeys=newHashMap<Object,Integer>();	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(multiValueChangeEventOne,addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Integer,Integer>(OMultiValueChangeEvent.OChangeType.ADD,0,null,55),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Object,Integer>(OMultiValueChangeEvent.OChangeType.ADD,0,null,55),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Integer,Integer>(OMultiValueChangeEvent.OChangeType.ADD,0,null,1),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Integer,Integer>(OMultiValueChangeEvent.OChangeType.REMOVE,0,null,55),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Object,Integer>(OMultiValueChangeEvent.OChangeType.ADD,0,null,1),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Object,Integer>(OMultiValueChangeEvent.OChangeType.REMOVE,0,null,55),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(newMultiValueChangeEvent<Integer,Integer>(OMultiValueChangeEvent.OChangeType.REMOVE,0,null,1),addedKeys,removedKeys);	0
975	10	orientechnologies_orientdb	OPropertyListIndexDefinitionTest#testProcessChangeEventAddRemoveInvValue	assertEquals(keysToAdd,addedKeys);	propertyIndex.processChangeEvent(multiValueChangeEventTwo,addedKeys,removedKeys);	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(null,""STR""));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertTrue(Wildcards.matches(""STR"",""STR""));"	1
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"MatcherassertThat(Wildcards.matches(""STR"",""STR""),is(true));"	0
976	10	trautonen_coveralls-maven-plugin	WildcardsTest#testMatchesAgainstStar	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertThat(Wildcards.matches(""STR"",""STR""),is(false));"	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	filter.decide(evt);	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	FilterReplyreply=filter.decide(evt);	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.NEUTRAL));	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertThat(filter.decide(evt),is(FilterReply.DENY));	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	finalFilterReplyreply=filter.decide(evt);	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	0
977	10	tradier_dropwizard-raven	DroppingRavenLoggingFilterTest#verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	FilterReplyresult=filter.decide(evt);	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertThat(ret).hasFieldOrPropertyWithValue(""STR"",""STR"");"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	assertNotNull(ret);	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	assertThat(ret).isNotNull();	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	assertThat(ret,is(notNullValue()));	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertEquals(""STR"",ret.getMetadata().getKind());"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertEquals(""STR"",ret.getMetadata().getName());"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertThat(ret,hasKind(""STR""));"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertThat(ret).hasKind(""STR"");"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertTrue(ret.containsKind(""STR""));"	0
978	10	fabric8io_fabric8-maven-plugin	KubernetesResourceUtilTest#containsKind	"assertEquals(""STR"",ret.getKind());"	"assertEquals(""STR"",ret.getKind());"	1
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	util.cleanUpServerEnv();	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes());"	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	serverEnvBak.delete();	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes(StandardCharsets.UTF_8));"	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"serverEnvBak=newFile(serverDirectory,""STR"");"	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	Files.delete(serverEnvBak.toPath());	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"Files.write(serverEnvBak.toPath(),""STR"".getBytes(StandardCharsets.US_ASCII));"	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	Files.delete(serverEnvBak.toPath(),StandardCopyOption.REPLACE_EXISTING);	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	"System.out.println(""STR""+serverEnv);"	0
979	10	OpenLiberty_ci.common	DevUtilTest#testCleanupServerEnvBak	assertTrue(serverEnv.exists());	serverEnvBak.deleteOnExit();	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(3);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(1);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(2);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(5);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(10);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>result=AThreadPool.primeFactors(3);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>result=AThreadPool.primeFactors(2);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>result=AThreadPool.primeFactors(1);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	finalSet<Integer>primeFactors=AThreadPool.primeFactors(4);	0
980	10	arnohaase_a-foundation	AThreadPoolTest#testPrimeFactors	assertEquals(newHashSet<Integer>(Arrays.asList()),AThreadPoolImpl.primeFactors(1));	Set<Integer>result=AThreadPool.primeFactors(3);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isEqualTo(mockedToken);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isSameAs(mockedToken);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessTokenProvider();	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	OAuth2AccessTokenresult=oAuth2FeignRequestInterceptor.acquireAccessToken();	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessTokenProvider(mockedToken);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	OAuth2AccessTokentoken=oAuth2FeignRequestInterceptor.acquireAccessToken();	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThat(oAuth2FeignRequestInterceptor.acquireAccessToken()).isInstanceOf(MockOAuth2AccessTokenProvider.class);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	"oAuth2FeignRequestInterceptor.configureAccessTokenProvider(""STR"");"	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessToken(mockedToken);	0
981	10	spring-cloud_spring-cloud-security	OAuth2FeignRequestInterceptorTests#configureAccessTokenProvider	assertEquals(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	oAuth2FeignRequestInterceptor.configureAccessToken(requestTemplate);	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertEquals(1,qResult.size());	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),is(1));	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	longidxUsagesAfter=indexUsages(qResult);	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),is(2));	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),is(idxUsagesBefore+1));	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertEquals(0,qResult.size());	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),greaterThan(idxUsagesBefore));	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	longidxUsagesAfter=indexUsages(db);	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),equalTo(idxUsagesBefore));	0
982	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testDoNotUseIndexWithOrNotIndexed	assertEquals(indexUsages(db),idxUsagesBefore);	assertThat(qResult.size(),is(idxUsagesBefore));	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertFalse(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertTrue(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertFalse(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertTrue(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertTrue(testRole.allow(ORule.ResourceGeneric.class,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertTrue(testRole.allow(ORule.ResourceGeneric.class,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertFalse(testRole.allow(ORule.ResourceGeneric.class,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertTrue(testRole.allow(ORule.ResourceGeneric.USER,""STR"",OSecurityRole.ALLOW_MODES.DENY_ALL_BUT));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertFalse(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.NONE));"	0
983	10	orientechnologies_orientdb	OGrantStatementExecutionTest#testSimple	"assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,""STR"",ORole.PERMISSION_EXECUTE));"	"assertFalse(testRole.allow(ORule.RESOURCE_GENERIC,""STR"",OSecurityRole.ALLOW_MODES.NONE));"	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertThat(vertices,hasItem(v1));	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	"graph.command(newOCommandSQL(""STR""+v2.getId())).execute();"	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	"graph.command(newOCommandSQL(""STR""+v1.getId())).execute();"	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertThat(vertices).hasSize(1);	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	"graph.command(newOCommandSQL(""STR"")).execute();"	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertTrue(vertices.iterator().hasNext());	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertThat(vertices).hasSize(2);	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertThat(vertices,hasItem(v2));	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertEquals(1,vertices.size());	0
984	10	orientechnologies_orientdb	GraphFunctionsTest#testOutV	assertEquals(vertices.iterator().next(),v1);	assertTrue(vertices.contains(v1));	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(HYPHEN_SEPARATOR,macAddress.toString());	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(HYPHEN_SEPARATOR+""STR"",macAddress.toString());"	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertEquals(""STR"",macAddress.toString());"	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	"assertThat(macAddress.toString(),is(""STR""));"	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(HYPHEN_SEPARATOR));	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(HYPHEN_SEPARATOR,macAddress.toString());	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(HYPHEN_SEPARATOR,macAddress.toString());	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),equalTo(HYPHEN_SEPARATOR));	0
985	10	fluenda_ParCEFone	MacAddressTest#testAddressHyphenSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),is(HYPHEN_SEPARATOR));	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(true));	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	"assertTrue(""STR"",v��rds.isRecognized());"	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(true));	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertTrue(v��rds.isRecognized());	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),equalTo(false));	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertFalse(v��rds.isRecognized());	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	assertThat(v��rds.isRecognized(),is(false));	0
986	10	PeterisP_morphology	MorphologyTest#cache	assertTrue(vārds.isRecognized());	"assertFalse(""STR"",v��rds.isRecognized());"	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaWithLoader.class));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaFactory.class));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory).isNotNull();	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchema.class));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchemaWithLoader.class)));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,instanceOf(JsonSchemaWithLoaderFactory.class));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchemaFactory.class)));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory).isInstanceOf(JsonSchemaWithLoader.class);	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(instanceOf(JsonSchema.class)));	0
987	10	nidi3_raml-loader	JsonSchemaTest#jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThat(factory,is(notNullValue()));	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",saved.field(""STR"").toString());"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(prop));"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",saved.field(""STR"").getValue());"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",classA.field(""STR"").toString());"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(classA,saved.field(""STR""));"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",saved.field(""STR"").asString());"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(classA));"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),is(equalTo(prop)));"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertEquals(""STR"",classA.field(""STR"").getValue());"	0
988	10	orientechnologies_orientdb	DefaultValueTest#testDefaultValueDate	"assertNotNull(saved.field(""STR""));"	"assertThat(saved.field(""STR""),equalTo(prop));"	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(true));	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),is(false));	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher,lookingAt());	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(true));	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher.lookingAt(),equalTo(false));	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	assertThat(matcher,is(true));	0
989	10	basis-technology-corp_tcl-regex-java	MatcherTest#lookingAt	assertTrue(matcher.lookingAt());	"assertThat(""STR"",matcher.lookingAt(),is(true));"	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(1,filtered.size());	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"",""STR"")));"	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertEquals(2,filtered.size());	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	"assertThat(filtered,hasItem(newTestNamed(""STR"")));"	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(1);	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(1));	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered).hasSize(2);	0
990	10	fabric8io_fabric8-maven-plugin	ProcessorConfigTest#incAndExc	"assertTrue(contains(filtered,""STR""));"	assertThat(filtered.size(),is(2));	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertNull(simpleKeyIndexDefinition.getClassName());	1
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertNull(simpleKeyIndexDefinition.getClassName());	1
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertThat(simpleKeyIndexDefinition.getClassName(),is(nullValue()));	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	StringclassName=simpleKeyIndexDefinition.getClassName();	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertEquals(null,simpleKeyIndexDefinition.getClassName());	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	"assertEquals(""STR"",simpleKeyIndexDefinition.getClassName());"	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertThat(simpleKeyIndexDefinition.getClassName(),nullValue());	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	"assertThat(simpleKeyIndexDefinition.getClassName(),is(""STR""));"	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	"assertThat(simpleKeyIndexDefinition.getClassName(),equalTo(""STR""));"	0
991	10	orientechnologies_orientdb	OSimpleKeyIndexDefinitionTest#testGetClassName	assertNull(simpleKeyIndexDefinition.getClassName());	assertEquals(null,simpleKeyIndexDefinition.getClassName());	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"env.put(""STR"",""STR"");"	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put(ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"env.put(""STR"",""STR""+CIEnvironment.detect(env).get(BIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSHBIPUSH"	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put(ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD,ILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOADILOAD	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
992	10	cucumber-ltd_cucumber-pro-plugin-jvm	CiEnvironmentTest#is_inactive_by_default	assertNull(CIEnvironment.detect(env));	env.put	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	floatresult=floatSerializer.deserializeFromByteBufferObject(buffer);	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	Floatresult=floatSerializer.deserializeFromByteBufferObject(buffer);	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT_ZERO,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(FLOAT,floatSerializer.deserializeFromByteBufferObject(buffer));	0
993	10	orientechnologies_orientdb	FloatSerializerTest#testNativeDirectMemoryCompatibility	assertEquals(floatSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertThat(floatSerializer.deserializeFromByteBufferObject(buffer),is(OBJECT));	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.verify(this.mockObjectQueryPreparer).prepareObjectQuery(this.polled001);	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001)).thenReturn(this.mockObjectQueryInfo001);	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001)).thenReturn(this.mockObjectQueryPreparer);	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerexpected=Mockito.mock(ObjectQueryPreparer.class);	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(this.mockObjectQueryPreparer,this.mockObjectQueryPreparer.getObjectQueryPreparer());	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerpreparer=this.mockObjectQueryPreparer();	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertSame(this.mockObjectQueryPreparer,this.mockObjectQueryPreparer.getObjectQueryPreparer());	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=this.mockObjectQueryPreparer();	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	Mockito.verify(this.mockObjectQueryPreparer).prepareSetObjectQuery(this.polled001);	0
994	10	amlinv_stat-collection-utils	BatchPollProcessorTest#testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	ObjectQueryPreparerobjectQueryPreparer=newMockObjectQueryPreparer();	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,provider.getDefaultClusterId());	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertEquals(""STR"",doc.getDefaultClusterId());"	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getDefaultClusterId(),provider.getDefaultClusterId());	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,graph.getDefaultClusterId());	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertEquals(""STR"",doc.getDefaultClusterId());"	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(1,provider.getDefaultClusterId());	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertTrue(provider.getDefaultClusterId()==doc.getVertexType(""STR"").getDefaultClusterId());"	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"assertEquals(""STR"",provider.getDefaultClusterId());"	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()==doc.getIdentity().getDefaultClusterId());	0
995	10	orientechnologies_orientdb	SQLMoveVertexCommandInTxTest#testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	"doc.addAttribute(""STR"",""STR"");"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"metadata.setValue(SiteMapParserBolt.isSitemapKey,""STR"");"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"assertEquals(""STR"",metadata.getValue(SiteMapParserBolt.isSitemapKey));"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	verify(bolt,times(1)).execute(any(Tuple.class));	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"verify(metadata).setValue(SiteMapParserBolt.isSitemapKey,""STR"");"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	verify(bolt).execute(any(Tuple.class));	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"metadata.setValue(HttpHeaders.CONTENT_TYPE,""STR"");"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"assertEquals(""STR"",metadata.getValueByField(SiteMapParserBolt.isSitemapKey));"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"assertEquals(""STR"",metadata.getValueByField(SiteMapParserBolt.isSitemapKey)[0]);"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"assertEquals(""STR"",metadata.getValue(SiteMapParserBolt.isSitemapKey)[0]);"	0
996	10	DigitalPebble_storm-crawler	SiteMapParserBoltTest#testSitemapParsing	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	"assertEquals(""STR"",metadata.getValue(SiteMapParserBolt.SitemapKey));"	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertEquals(1,qResult.size());	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertEquals(3,qResult.size());	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(2));	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	1
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertThat(qResult.size(),is(1));	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertThat(qResult.size(),equalTo(2));	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertThat(qResult.size(),equalTo(1));	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertTrue(qResult.size()==2);	0
997	10	orientechnologies_orientdb	OCommandExecutorSQLSelectTest#testMultipleParamsWithSameName	assertEquals(qResult.size(),2);	assertThat(qResult).hasSize(2);	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertEquals(""STR"",log);"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertThat(log,is(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertEquals(""STR"",log);"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertThat(log,containsString(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertTrue(log.contains(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertEquals(""STR""+TEST_ID+""STR"",log);"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertThat(log,equalTo(""STR""));"	0
998	10	hazelcast_hazelcast-simulator	FailureOperationTest#testGetLogMessage_whenWorkerAddressIsNull	assertNotNull(log);	"assertThat(log).isEqualTo(""STR"");"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",""STR""));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",Short.toString(Short.MIN_VALUE)));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(this,""STR"",""STR""));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertTrue(PropertyBindingSupport.bind0(testObject,""STR"",1L));"	0
999	10	hazelcast_hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest#bind_short	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(PropertyBindingSupport.bind0(testObject,""STR"",123));"	0
