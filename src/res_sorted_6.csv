TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(database);	0	1	57.244585037231445
	1	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(database.getCurrentSession());	0	1	57.244585037231445
	2	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertFalse(database.isClosed());	0	1	57.244585037231445
	3	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertFalse(database.exists());	0	1	57.244585037231445
	4	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNull(database.getClusterNameById(database.getDefaultClusterId()));	0	1	57.244585037231445
	5	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByKey);	0	1	57.244585037231445
	6	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByIntegerKey);	0	1	57.244585037231445
	7	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertNotNull(propertyIndexByValue);	0	1	57.244585037231445
	8	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertTrue(database.getClusters().size()>0);	0	1	57.244585037231445
	9	/	OPropertyMapIndexDefinitionTest	testEmptyIndexByKeyReload	assertEquals(result,propertyIndexByKey);	assertEquals(database.getStorage().getSize(),0);	0	1	57.244585037231445
22	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNotNull(result);	0	1	41.36081576347351
	1	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertEquals(0,result.size());	0	1	41.36081576347351
	2	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertTrue(!result.isEmpty());	0	1	41.36081576347351
	3	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertFalse(result.isEmpty());	0	1	41.36081576347351
	4	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertNull(result);	1	1	41.36081576347351
	5	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	assertSame(null,result);	0	1	41.36081576347351
	6	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	"assertNotSame(""STR"",null,result);"	0	1	41.36081576347351
	7	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	"assertSame(""STR"",result);"	0	1	41.36081576347351
	8	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	"assertNotSame(""STR"",""STR"",result);"	0	1	41.36081576347351
	9	/	OPropertyMapIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(result);	"assertNotEquals(""STR"",result);"	0	1	41.36081576347351
23	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotNull(configurator);	0	1	39.769834995269775
	1	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertFalse(configurator.isRegistered());	0	1	39.769834995269775
	2	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getLoader()instanceofOETLStubLoader);	0	1	39.769834995269775
	3	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getExtractor()instanceofOETLStubRandomExtractor);	0	1	39.769834995269775
	4	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	"assertEquals(""STR"",configurator.getLoader().getName());"	0	1	39.769834995269775
	5	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertEquals(0,configurator.getExtractors().size());	0	1	39.769834995269775
	6	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotNull(configurator.getPipeline());	0	1	39.769834995269775
	7	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertTrue(configurator.getPipeline().isEmpty());	0	1	39.769834995269775
	8	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	assertNotEquals(null,configurator.getName());	0	1	39.769834995269775
	9	/	OETLCSVExtractorTest	testCRLFDelimiter	assertFalse(res.isEmpty());	"assertEquals(1,""STR"");"	0	1	39.769834995269775
24	0	orientechnologies/orientdb	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertEquals(3,trackedMap.size());	0	1	66.44023704528809
	1	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(trackedMap.isDirty());	0	1	66.44023704528809
	2	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	"assertTrue(""STR"");"	0	1	66.44023704528809
	3	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertSame(doc,trackedMap.getDocument());	0	1	66.44023704528809
	4	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	"assertTrue(""STR"");"	0	1	66.44023704528809
	5	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertFalse(trackedMap.isEmpty());	0	1	66.44023704528809
	6	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	"assertEquals(""STR"",""STR"");"	0	1	66.44023704528809
	7	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertNull(trackedMap.pollLastEntry());	0	1	66.44023704528809
	8	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	"assertTrue(""STR"");"	0	1	66.44023704528809
	9	/	TrackedMapTest	testClearTwo	assertFalse(doc.isDirty());	assertNotSame(trackedMap.entrySet(),trackedMap.entrySet().iterator().next());	0	1	66.44023704528809
25	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertTrue(compositeKey.getKeys().get(0)instanceofInteger);	0	1	93.14971017837524
	1	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertEquals(2,compositeKey.getKeys().get(0));	0	1	93.14971017837524
	2	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertTrue(compositeKey.getKeys().get(1)instanceofString);	0	1	93.14971017837524
	3	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	"assertEquals(""STR"",compositeKey.getKeys().get(1).toString());"	0	1	93.14971017837524
	4	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertNotNull(compositeKey.getKeys());	0	1	93.14971017837524
	5	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertEquals(2,compositeKey.getKeys().size());	0	1	93.14971017837524
	6	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertFalse(compositeKey.getKeys().isEmpty());	0	1	93.14971017837524
	7	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertNotEquals(null,compositeKey.getKeys());	0	1	93.14971017837524
	8	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	assertSame(compositeKey.getKeys().get(0),2);	0	1	93.14971017837524
	9	/	OSimpleKeyIndexDefinitionTest	testCreateValueCompositeKeyListParam	assertEquals(result,compositeKey);	"assertSame(compositeKey.getKeys().get(1),""STR"");"	0	1	93.14971017837524
26	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0	1	58.049057960510254
	1	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1	1	58.049057960510254
	2	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(!qResult.hasNext());	0	1	58.049057960510254
	3	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getStats().getTotalRecords());	0	1	58.049057960510254
	4	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.getResult().size());	0	1	58.049057960510254
	5	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNull(qResult.getErrorMessage());	0	1	58.049057960510254
	6	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	"assertNotNull(""STR"");"	0	1	58.049057960510254
	7	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(null,qResult.getStats().getExecutionTimeMillis());	0	1	58.049057960510254
	8	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.getStats().getRecordElapsedTime());	0	1	58.049057960510254
	9	/	OMatchStatementExecutionNewTest	testCommonFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(2,qResult.getStats().getRecordFetches());	0	1	58.049057960510254
27	0	orientechnologies/orientdb	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertThat(execute,Matchers.hasSize(1));	0	1	37.476101875305176
	1	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertTrue(context.exists(name.getMethodName()));	0	1	37.476101875305176
	2	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotNull(test1);	0	1	37.476101875305176
	3	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertTrue(dbinstanceofODatabaseDocument);	0	1	37.476101875305176
	4	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertEquals(ODatabaseType.PLOCAL,type);	0	1	37.476101875305176
	5	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertFalse(db.isClosed());	0	1	37.476101875305176
	6	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotNull(db);	0	1	37.476101875305176
	7	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotEquals(0,execute.size());	0	1	37.476101875305176
	8	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	"assertEquals(""STR"",test1.getClassName());"	0	1	37.476101875305176
	9	/	LuceneSpatialGeometryCollectionTest	testGeoCollectionOutsideTx	assertEquals(execute.size(),1);	assertNotEquals(0,db.getClass().getDeclaredFields().length);	0	1	37.476101875305176
28	0	orientechnologies/orientdb	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.getTransaction().isActive()==false);	0	1	53.7408561706543
	1	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.getTransaction().isActive());	0	1	53.7408561706543
	2	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotEquals(true,db.getTransaction().isActive());	0	1	53.7408561706543
	3	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertTrue(db.isOpen());	0	1	53.7408561706543
	4	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertFalse(db.isClosed());	0	1	53.7408561706543
	5	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNull(db.getTransaction());	0	1	53.7408561706543
	6	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotNull(db);	0	1	53.7408561706543
	7	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertSame(db,db.getTransaction().getDatabase());	0	1	53.7408561706543
	8	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	assertNotSame(db,db.getTransaction().getDatabase());	0	1	53.7408561706543
	9	/	OCommitStatementExecutionTest	testBegin	assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());	"assertThrows(Exception.class,""STR"");"	0	1	53.7408561706543
29	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertTrue(results.size()>0);	0	1	38.53159689903259
	1	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertFalse(results.isEmpty());	0	1	38.53159689903259
	2	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertEquals(3,results.size());	0	1	38.53159689903259
	3	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotEquals(0,results.size());	0	1	38.53159689903259
	4	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNull(null);	0	1	38.53159689903259
	5	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotNull(results);	0	1	38.53159689903259
	6	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertSame(results,results);	0	1	38.53159689903259
	7	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertNotSame(results,null);	0	1	38.53159689903259
	8	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	assertArrayEquals(1,2});	0	1	38.53159689903259
	9	/	OCommandExecutorSQLSelectTest	testComparisonOfShorts	assertEquals(results.size(),2);	"assertEquals(1,""STR"");"	0	1	38.53159689903259
30	0	orientechnologies/orientdb	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	assertEquals(0,db.getMetadata().getSchema().countClasses());	0	1	81.36387610435486
	1	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertArrayEquals(""STR"",db.getMetadata().getSchema().getClassNames().toArray());"	0	1	81.36387610435486
	2	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertEquals(ODefaultType.INTEGER,""STR"");"	0	1	81.36387610435486
	3	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertNotEquals(ODefaultType.STRING,""STR"");"	0	1	81.36387610435486
	4	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertEquals(true,""STR"");"	0	1	81.36387610435486
	5	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertNotEquals(false,""STR"");"	0	1	81.36387610435486
	6	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertNotNull(""STR"");"	0	1	81.36387610435486
	7	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertNull(""STR"");"	0	1	81.36387610435486
	8	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertSame(""STR"",""STR"");"	0	1	81.36387610435486
	9	/	ODatabaseImportTest	exportImportOnlySchemaTest	"assertTrue(dbImp.getMetadata().getSchema().existsClass(""STR""));"	"assertNotSame(""STR"",""STR"");"	0	1	81.36387610435486
31	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	0	1	38.69481897354126
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	1	1	38.69481897354126
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	0	1	38.69481897354126
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(null,result);	0	1	38.69481897354126
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofNumber);	0	1	38.69481897354126
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(resultinstanceofString);	0	1	38.69481897354126
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D).intValue(),result.intValue());	0	1	38.69481897354126
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(-10.5D,result);	0	1	38.69481897354126
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(-10.5D),result);	0	1	38.69481897354126
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	0	1	38.69481897354126
32	0	orientechnologies/orientdb	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertNotNull(stm);	0	1	79.4524290561676
	1	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertTrue(stminstanceofOSelectStatement);	0	1	79.4524290561676
	2	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertNull(stm.getOrderBy());	0	1	79.4524290561676
	3	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertEquals(OCommandDistributedReplicateRequest.DISTRIBUTED_EXECUTION_MODE.RESPONSE.toString(),stm.getDistributedExecutionMode().toString());	0	1	79.4524290561676
	4	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertTrue(stm.isReadOperation());	0	1	79.4524290561676
	5	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertFalse(stm.isWriteOperation());	0	1	79.4524290561676
	6	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertFalse(stm.isIdempotent());	0	1	79.4524290561676
	7	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertNotNull(stm.getProjection());	0	1	79.4524290561676
	8	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertEquals(1,stm.getProjection().getItems().size());	0	1	79.4524290561676
	9	/	OSelectStatementTest	testTranslateLucene	"assertTrue(stm.whereClause.toString().contains(""STR""));"	assertTrue(stm.isCacheable());	0	1	79.4524290561676
33	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNotNull(result);	0	1	26.480586051940918
	1	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	26.480586051940918
	2	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0	1	26.480586051940918
	3	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	"assertEquals(""STR"",result.getPropertyNames()[0]);"	0	1	26.480586051940918
	4	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	"assertTrue(""STR"");"	0	1	26.480586051940918
	5	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	"assertFalse(""STR"");"	0	1	26.480586051940918
	6	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	"assertEquals(1,""STR"");"	0	1	26.480586051940918
	7	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	"assertNotEquals(2,""STR"");"	0	1	26.480586051940918
	8	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNotNull(db);	0	1	26.480586051940918
	9	/	OSelectStatementExecutionTest	testLet3	assertTrue(result.hasNext());	assertNull(db);	0	1	26.480586051940918
34	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotNull(result);	0	1	36.8846070766449
	1	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertTrue(hasNext());	0	1	36.8846070766449
	2	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertFalse(!hasNext());	0	1	36.8846070766449
	3	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotSame(db,newODatabaseDocumentTx());	0	1	36.8846070766449
	4	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertEquals(0,0);	0	1	36.8846070766449
	5	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotEquals(1,0);	0	1	36.8846070766449
	6	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertSame(db,db);	0	1	36.8846070766449
	7	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	assertNotSame(className,null);	0	1	36.8846070766449
	8	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	"assertThat(className,""STR"");"	0	1	36.8846070766449
	9	/	OSelectStatementExecutionTest	testIndexPrefixUsage	assertTrue(result.hasNext());	"assertThat(""STR"",""STR"");"	0	1	36.8846070766449
35	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getName(),PROP_NAME);	1	1	42.488099098205566
	1	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(null,nameProperty.getName());	0	1	42.488099098205566
	2	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertSame(String.class,nameProperty.getName().getClass());	0	1	42.488099098205566
	3	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(nameProperty.getName());	0	1	42.488099098205566
	4	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(5,nameProperty.getName().length());	0	1	42.488099098205566
	5	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.getName().length()>=3);	0	1	42.488099098205566
	6	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.getName()==null);	0	1	42.488099098205566
	7	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.getName().isEmpty());	0	1	42.488099098205566
	8	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertFalse(""STR"");"	0	1	42.488099098205566
	9	/	OCommandExecutorSQLCreatePropertyTest	testCreateReadOnlyFalseProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(!nameProperty.getName().isEmpty());	0	1	42.488099098205566
36	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(db);	0	1	57.341734886169434
	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	0	1	57.341734886169434
	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0	1	57.341734886169434
	3	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.exists());	0	1	57.341734886169434
	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(db.isClosed());	0	1	57.341734886169434
	5	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.existsProperty(PROP_ID));	0	1	57.341734886169434
	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass.getProperty(PROP_ID));	0	1	57.341734886169434
	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax());	0	1	57.341734886169434
	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,idProperty.getMin());	0	1	57.341734886169434
	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	0	1	57.341734886169434
37	0	orientechnologies/orientdb	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	0	1	31.23632001876831
	1	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertEquals(expectedValue,actualValue);	0	1	31.23632001876831
	2	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertNotEquals(expectedValue,actualValue);	0	1	31.23632001876831
	3	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertNotEquals(expectedValue,actualValue);	0	1	31.23632001876831
	4	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertArrayEquals(expectedArray,actualArray);	0	1	31.23632001876831
	5	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertArrayEquals(expectedArray,actualArray);	0	1	31.23632001876831
	6	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertThrows(expectedException.class,executable);	0	1	31.23632001876831
	7	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertThrows(expectedException.class,executable,message);	0	1	31.23632001876831
	8	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertTimeout(timeout,executable);	0	1	31.23632001876831
	9	/	OETLFieldTransformerTest	testRemove	assertEquals(1,getResult().size());	assertTimeoutPreemptively(timeout,executable);	0	1	31.23632001876831
38	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(0,compare(field1,field2));	0	1	66.60168194770813
	1	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(-1,compare(field1,field2));	0	1	66.60168194770813
	2	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(1,compare(field1,field2));	0	1	66.60168194770813
	3	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(-1,compare(field1,field2));	0	1	66.60168194770813
	4	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(1,compare(field1,field2));	0	1	66.60168194770813
	5	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)<0);	0	1	66.60168194770813
	6	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)>0);	0	1	66.60168194770813
	7	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(compare(field1,field2)==0);	0	1	66.60168194770813
	8	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(field1,field2)==0);	0	1	66.60168194770813
	9	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(0,compare(field1,field2));	0	1	66.60168194770813
39	0	PeterisP/morphology	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	92.0348768234253
	1	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0	1	92.0348768234253
	2	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(locītājs);	0	1	92.0348768234253
	3	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	92.0348768234253
	4	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(null,locītājs.defaultSettings());	0	1	92.0348768234253
	5	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(locītājs.isRecognized());	0	1	92.0348768234253
	6	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(0,locītājs.wordforms.size());	0	1	92.0348768234253
	7	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	"assertNotNull(""STR"");"	0	1	92.0348768234253
	8	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	"assertTrue(""STR"");"	0	1	92.0348768234253
	9	/	MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(locītājs.isRecognized(),false);	0	1	92.0348768234253
40	0	PeterisP/morphology	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	32.72591590881348
	1	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertFalse(!locītājs.isRecognized());	0	1	32.72591590881348
	2	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotNull(object);	0	1	32.72591590881348
	3	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotSame(expectedObject,actualObject);	0	1	32.72591590881348
	4	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertSame(expectedObject,actualObject);	0	1	32.72591590881348
	5	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNull(object);	0	1	32.72591590881348
	6	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertEquals(expectedValue,actualValue);	0	1	32.72591590881348
	7	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertNotEquals(expectedValue,actualValue);	0	1	32.72591590881348
	8	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertArrayEquals(expectedArray,resultArray);	0	1	32.72591590881348
	9	/	MorphologyTest	leksikoni	assertFalse(pokemons.isRecognized());	assertThat(value,Matchers.equalTo(expectedValue));	0	1	32.72591590881348
41	0	PeterisP/morphology	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertNotNull(tokens);	0	1	53.8889000415802
	1	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals(0,tokens.size());	0	1	53.8889000415802
	2	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertFalse(tokens.contains(null));	0	1	53.8889000415802
	3	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertEquals(3,tokens.size());	0	1	53.8889000415802
	4	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	"assertEquals(""STR"",tokens.get(0).getForm());"	0	1	53.8889000415802
	5	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	"assertEquals(""STR"",tokens.get(2).getForm());"	0	1	53.8889000415802
	6	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertNotSame(tokens.get(0),tokens.get(2));	0	1	53.8889000415802
	7	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	"assertTrue(""STR"");"	0	1	53.8889000415802
	8	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertFalse(tokens.get(1).getForm().isEmpty());	0	1	53.8889000415802
	9	/	TokenizeTest	Laura10Aug	assertEquals(2,tokens.size());	assertTrue(tokens.get(2).getStartsWithUpperCase());	0	1	53.8889000415802
42	0	hazelcast/hazelcast-simulator	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(methods);	0	1	34.334887742996216
	1	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0	1	34.334887742996216
	2	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertTrue(methods.iterator().hasNext());	0	1	34.334887742996216
	3	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertFalse(methods.isEmpty());	0	1	34.334887742996216
	4	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size());	0	1	34.334887742996216
	5	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertEquals(AnnotationTestClass.class,clazz);	0	1	34.334887742996216
	6	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertEquals(Prepare.class,annotationClazz);	0	1	34.334887742996216
	7	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertTrue(methods.contains(method));	0	1	34.334887742996216
	8	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertSame(methods.get(0),methods.get(0));	0	1	34.334887742996216
	9	/	AnnotationFilterTest	testLocalWarmupFilter	"assertEquals(""STR"",method.getName());"	assertArrayEquals(methods.toArray(),findAll().toArray());	0	1	34.334887742996216
43	0	hazelcast/hazelcast-simulator	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(3,result.size());	0	1	37.79995107650757
	1	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0	1	37.79995107650757
	2	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.contains(list.get(1)));	0	1	37.79995107650757
	3	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.contains(list.get(0)));	0	1	37.79995107650757
	4	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(WorkerData.class,result.get(0).getClass());	0	1	37.79995107650757
	5	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(list.get(1),result.get(2));	0	1	37.79995107650757
	6	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertArrayEquals(newWorkerData[]{list.get(1),list.get(3)});	0	1	37.79995107650757
	7	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertSame(list,input);	0	1	37.79995107650757
	8	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	0	1	37.79995107650757
	9	/	WorkerQueryTest	versionSpec	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(4,list.size());	0	1	37.79995107650757
44	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertTrue(isRunning());	0	1	29.277862310409546
	1	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertFalse(!isRunning());	0	1	29.277862310409546
	2	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertEquals(true,isRunning());	0	1	29.277862310409546
	3	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNull(userDir);	0	1	29.277862310409546
	4	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNotNull(userDir);	0	1	29.277862310409546
	5	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertThrows(NullPointerException.class,()->isRunning());	0	1	29.277862310409546
	6	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertNotEquals(123,testContainer);	0	1	29.277862310409546
	7	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertSame(null,userDir);	0	1	29.277862310409546
	8	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertFalse(isRunning()==false);	0	1	29.277862310409546
	9	/	TestContainer_BasicTest	testIsRunning	assertFalse(testContainer.isRunning());	assertTrue(isRunning()!=true);	0	1	29.277862310409546
45	0	hazelcast/hazelcast-simulator	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(driver);	0	1	61.02703809738159
	1	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertEquals(0,scriptExecutor.getExecutions().size());	0	1	61.02703809738159
	2	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(task);	0	1	61.02703809738159
	3	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	"assertEquals(""STR"",command);"	0	1	61.02703809738159
	4	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	"assertNotEquals(""STR"",command);"	0	1	61.02703809738159
	5	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	"assertTrue(""STR"");"	0	1	61.02703809738159
	6	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	"assertThrows(NoSuchElementException.class,""STR"");"	0	1	61.02703809738159
	7	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertTrue(Thread.currentThread().isAlive());	0	1	61.02703809738159
	8	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	"assertNotEquals(0,""STR"");"	0	1	61.02703809738159
	9	/	ScriptExecutorTest	bash	assertTrue(promise.getAnswer()instanceofString);	assertEquals(0,promise.getResults().size());	0	1	61.02703809738159
46	0	hazelcast/hazelcast-simulator	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertNotNull(agents);	0	1	86.2096688747406
	1	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertFalse(agents.isEmpty());	0	1	86.2096688747406
	2	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,agents.size());	0	1	86.2096688747406
	3	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,agentCount());	0	1	86.2096688747406
	4	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertTrue(agentCount()>0);	0	1	86.2096688747406
	5	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertEquals(2,registry.getAgents().size());	0	1	86.2096688747406
	6	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertTrue(registry.getAgents().get(0).isActive());	0	1	86.2096688747406
	7	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertFalse(registry.getAgents().get(1).isActive());	0	1	86.2096688747406
	8	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	assertNotEquals(3,agentCount());	0	1	86.2096688747406
	9	/	RegistryTest	testGetAgents	assertEquals(2,registry.agentCount());	"assertNotEquals(""STR"",registry.getAgents().get(1).getIpAddress());"	0	1	86.2096688747406
47	0	hazelcast/hazelcast-simulator	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertNull(getWorkerAddress());	0	1	40.63549494743347
	1	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertNotNull(getWorkerAddress().toString());	0	1	40.63549494743347
	2	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress()instanceofSimulatorAddress);	0	1	40.63549494743347
	3	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertEquals(SimulatorAddress.fromString(workerAddress),getWorkerAddress());	0	1	40.63549494743347
	4	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	"assertNotEquals(""STR"",getWorkerAddress());"	0	1	40.63549494743347
	5	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertSame(SimulatorAddress.fromString(workerAddress),getWorkerAddress());	0	1	40.63549494743347
	6	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertThat(getWorkerAddress().toString(),is(equalTo(SimulatorAddress.fromString(workerAddress).toString())));	0	1	40.63549494743347
	7	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress().toString()!=null&&!getWorkerAddress().toString().isEmpty());	0	1	40.63549494743347
	8	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress()!=null);	0	1	40.63549494743347
	9	/	FailureOperationTest	testGetWorkerAddress	assertEquals(workerAddress,operation.getWorkerAddress());	assertTrue(getWorkerAddress().getClass().getName().equals(SimulatorAddress.class.getName()));	0	1	40.63549494743347
48	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(bolt);	0	1	29.06377863883972
	1	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(TestUtil.getMockedTopologyContext());	0	1	29.06377863883972
	2	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(output);	0	1	29.06377863883972
	3	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotNull(metadata);	0	1	29.06377863883972
	4	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertTrue(parserConfig.containsValue(true));	0	1	29.06377863883972
	5	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertFalse(parserConfig.containsValue(false));	0	1	29.06377863883972
	6	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertFalse(parserConfig.isEmpty());	0	1	29.06377863883972
	7	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertNotEquals(null,parserConfig);	0	1	29.06377863883972
	8	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertEquals(0,output.size());	0	1	29.06377863883972
	9	/	SiteMapParserBoltTest	testSitemapParsingNoMT	assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());	assertTrue(metadata.md.isEmpty());	0	1	29.06377863883972
49	0	DigitalPebble/storm-crawler	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertNotNull(bolt);	0	1	56.89969182014465
	1	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertEquals(config.size(),1);	0	1	56.89969182014465
	2	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertNotNull(metadata);	0	1	56.89969182014465
	3	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertEquals(bolt.getClass(),DummyIndexer.class);	0	1	56.89969182014465
	4	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertEquals(md.get(key)[0],value);	0	1	56.89969182014465
	5	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertFalse(md.isEmpty());	0	1	56.89969182014465
	6	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertEquals(fields.size(),2);	0	1	56.89969182014465
	7	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	"assertNotEquals(config.get(AbstractIndexerBolt.urlFieldParamName),""STR"");"	0	1	56.89969182014465
	8	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertNotSame(md,md2);	0	1	56.89969182014465
	9	/	BasicIndexingTest	testMissingCanonicalParamConfiguration	"assertEquals(""STR"",""STR"",fields.get(""STR""));"	assertArrayEquals(md.get(key),md2.get(key));	0	1	56.89969182014465
50	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlFilter);	0	1	44.873152017593384
	1	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(testSourceUrl);	0	1	44.873152017593384
	2	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	1	44.873152017593384
	3	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(nonURI,normalizedUrl);	0	1	44.873152017593384
	4	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(sourceUrl.getHost(),testSourceUrl.getHost());	0	1	44.873152017593384
	5	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(sourceUrl.getPort(),testSourceUrl.getPort());	0	1	44.873152017593384
	6	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(sourceUrl.getProtocol(),testSourceUrl.getProtocol());	0	1	44.873152017593384
	7	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(sourceUrl.getPath(),testSourceUrl.getPath());	0	1	44.873152017593384
	8	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult.toUpperCase(),normalizedUrl.toUpperCase());	0	1	44.873152017593384
	9	/	BasicURLNormalizerTest	testInvalidURI	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult.toLowerCase(),normalizedUrl.toLowerCase());	0	1	44.873152017593384
51	0	rockagen/commons-lib	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('a',0));"	0	1	45.90832781791687
	1	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('a',5));"	0	1	45.90832781791687
	2	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('',1));"	0	1	45.90832781791687
	3	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('!',4));"	0	1	45.90832781791687
	4	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",FOCAL.repeatChar('1',3));"	0	1	45.90832781791687
	5	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",FOCAL.repeatChar('x',3));"	0	1	45.90832781791687
	6	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotSame(""STR"",FOCAL.repeatChar('a',3));"	0	1	45.90832781791687
	7	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",FOCAL.repeatChar('t',2));"	0	1	45.90832781791687
	8	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotEquals(""STR"",FOCAL.repeatChar('#',4));"	0	1	45.90832781791687
	9	/	CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertNotSame(""STR"",FOCAL.repeatChar('i',4));"	0	1	45.90832781791687
52	0	adlnet/jxapi	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	1	1	31.077573776245117
	1	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.getVerbName());"	0	1	31.077573776245117
	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsPastTense());	0	1	31.077573776245117
	3	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.getSynonyms().isEmpty());	0	1	31.077573776245117
	4	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals(0,actual.getSynonyms().size());	0	1	31.077573776245117
	5	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNull(actual.getObject());	0	1	31.077573776245117
	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsTransitive());	0	1	31.077573776245117
	7	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	0	1	31.077573776245117
	8	/	VerbsTest	testInitialized	assertNotNull(actual);	"assertEquals(""STR"",actual.getPresentTense());"	0	1	31.077573776245117
	9	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.getIsReflexive());	0	1	31.077573776245117
53	0	adlnet/jxapi	StatementTest	testStatement	assertNotNull(actual);	assertNotNull(statement);	0	1	32.15018701553345
	1	/	StatementTest	testStatement	assertNotNull(actual);	"assertEquals(""STR"",statement.getContext().getLanguage());"	0	1	32.15018701553345
	2	/	StatementTest	testStatement	assertNotNull(actual);	assertTrue(statement.getResult().getSuccess());	0	1	32.15018701553345
	3	/	StatementTest	testStatement	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	0	1	32.15018701553345
	4	/	StatementTest	testStatement	assertNotNull(actual);	"assertEquals(""STR"",statement.getAuthority().getMbox());"	0	1	32.15018701553345
	5	/	StatementTest	testStatement	assertNotNull(actual);	"assertEquals(""STR"",statement.getVersion());"	0	1	32.15018701553345
	6	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(ID,statement.getId());	0	1	32.15018701553345
	7	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(MBOX,statement.getAuthority().getMbox());	0	1	32.15018701553345
	8	/	StatementTest	testStatement	assertNotNull(actual);	"assertEquals(""STR"",statement.getVerb().getId());"	0	1	32.15018701553345
	9	/	StatementTest	testStatement	assertNotNull(actual);	assertEquals(TEST_IRI,statement.getObject().getId().substring(0,TEST_IRI.length()));	0	1	32.15018701553345
54	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(find());	0	1	38.0112509727478
	1	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(!find());	0	1	38.0112509727478
	2	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,find());	0	1	38.0112509727478
	3	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals(false,find());	0	1	38.0112509727478
	4	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	"assertEquals(""STR"",find());"	0	1	38.0112509727478
	5	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	"assertNotEquals(""STR"",find());"	0	1	38.0112509727478
	6	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertSame(find(),find());	0	1	38.0112509727478
	7	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(find(),null);	0	1	38.0112509727478
	8	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(find());	0	1	38.0112509727478
	9	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNull(null);	0	1	38.0112509727478
55	0	trautonen/coveralls-maven-plugin	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertNotNull(pullRequest);	0	1	33.03662180900574
	1	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertNotNull(pullRequest);	0	1	33.03662180900574
	2	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	"assertNotNull(""STR"");"	0	1	33.03662180900574
	3	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertNull(pullRequest);	0	1	33.03662180900574
	4	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertNull(pullRequest);	0	1	33.03662180900574
	5	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertTrue(pullRequest!=null);	0	1	33.03662180900574
	6	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	assertFalse(pullRequest==null);	0	1	33.03662180900574
	7	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	"assertEquals(""STR"",pullRequest);"	0	1	33.03662180900574
	8	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	"assertEquals(""STR"",pullRequest);"	0	1	33.03662180900574
	9	/	ShippableTest	testPullRequest	"assertEquals(""STR"",newShippable(env()).getPullRequest());"	"assertNotEquals(""STR"",pullRequest);"	0	1	33.03662180900574
56	0	trautonen/coveralls-maven-plugin	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertNotNull(dir);	0	1	47.71057391166687
	1	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertNotNull(sourceLoader);	0	1	47.71057391166687
	2	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertNotNull(sourceA);	0	1	47.71057391166687
	3	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertTrue(fileA.exists());	0	1	47.71057391166687
	4	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertTrue(fileB.exists());	0	1	47.71057391166687
	5	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	"assertEquals(""STR"",sourceA.getName());"	1	1	47.71057391166687
	6	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertNotNull(getName());	0	1	47.71057391166687
	7	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertTrue(getName().length()>0);	0	1	47.71057391166687
	8	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertEquals(name,getName());	0	1	47.71057391166687
	9	/	ScanSourceLoaderTest	testLoadSource	"assertEquals(""STR"",sourceA.getName());"	assertTrue(name.length()>0);	0	1	47.71057391166687
57	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertNotNull(services);	0	1	31.26424288749695
	1	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertNotSame(null,services);	0	1	31.26424288749695
	2	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(services!=null);	0	1	31.26424288749695
	3	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertSame(services,this.services);	0	1	31.26424288749695
	4	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertEquals(this.services,services);	0	1	31.26424288749695
	5	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(services.containsAll(Collections.emptyList()));	0	1	31.26424288749695
	6	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(services.containsAll(services));	0	1	31.26424288749695
	7	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(services.containsAll(newArrayList<>()));	0	1	31.26424288749695
	8	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertTrue(Arrays.equals(services.toArray(),this.services.toArray()));	0	1	31.26424288749695
	9	/	SpecExamplesSerializationTest	testKioskPattern	"assertSerializationEqualsSpec(service,""STR"");"	assertEquals(Collections.emptyList(),newArrayList<>(services));	0	1	31.26424288749695
58	0	dbmdz/iiif-apis	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertNotNull(propVal.getValues());	0	1	61.69394111633301
	1	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertNotEquals(null,propVal.getValues());	0	1	61.69394111633301
	2	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertTrue(propVal.getValues().containsKey(Locale.ENGLISH));	0	1	61.69394111633301
	3	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertFalse(propVal.getValues().isEmpty());	0	1	61.69394111633301
	4	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertEquals(Locale.ENGLISH,propVal.getValues().keySet().toArray()[0]);	0	1	61.69394111633301
	5	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"assertEquals(""STR"",propVal.getValues().get(Locale.ENGLISH).get(0));"	0	1	61.69394111633301
	6	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertEquals(2,propVal.getValues().values().iterator().next().size());	0	1	61.69394111633301
	7	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"assertTrue(""STR"");"	0	1	61.69394111633301
	8	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	"assertEquals(""STR"",propVal.getValues().keySet().toArray()[0]);"	0	1	61.69394111633301
	9	/	PropertyValueTest	multiValuedLanguage	"assertThat(json).isEqualTo(""STR"".replace(""STR"",""STR""));"	assertFalse(propVal.getValues().get(Locale.FRANCE)==null);	0	1	61.69394111633301
59	0	nidi3/graphviz-java	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertNotNull(pars.nodes());	0	1	36.084771156311035
	1	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertTrue(parsinstanceofMutableGraph);	0	1	36.084771156311035
	2	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertEquals(0,pars.messages.size());	0	1	36.084771156311035
	3	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertTrue(add(src1,src2).hasEdgeConnecting(src1,src2));	0	1	36.084771156311035
	4	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertEquals(0,pars.inDegree(s1));	0	1	36.084771156311035
	5	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertEquals(null,add().edges());	0	1	36.084771156311035
	6	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertFalse(add(src1).edges().isEmpty());	0	1	36.084771156311035
	7	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertEquals(expected,add(s1).inDegree(s2));	0	1	36.084771156311035
	8	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertArrayEquals(newLinkSource[]{},sources);	0	1	36.084771156311035
	9	/	ParserTest	emptyString	"assertParse(""STR"",mutGraph().add(mutNode(""STR""),mutNode(""STR"").add(""STR"",Label.of(""STR""))));"	assertSame(pars,pars);	0	1	36.084771156311035
60	0	nidi3/graphviz-java	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	assertNotNull(result);	0	1	46.158743143081665
	1	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	assertFalse(Graphviz.fromGraph(graph).render(SVG).toString().isEmpty());	0	1	46.158743143081665
	2	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"assertNotEquals(""STR"",Graphviz.fromGraph(graph).render(SVG).toString());"	0	1	46.158743143081665
	3	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	assertNotEquals(0,Graphviz.fromGraph(graph).render(SVG).toString().length());	0	1	46.158743143081665
	4	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	assertTrue(Graphviz.fromGraph(graph).render(SVGZ).toString().length()>0);	0	1	46.158743143081665
	5	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	assertEquals(32000,Graphviz.fromGraph(graph).totalMemory());	0	1	46.158743143081665
	6	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"assertTrue(""STR"");"	0	1	46.158743143081665
	7	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"assertTrue(""STR"");"	0	1	46.158743143081665
	8	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"assertFalse(""STR"");"	0	1	46.158743143081665
	9	/	GraphvizTest	withTotalMemory	"assertThat(result,is(""STR""+""STR""+uriPathOf(newFile(""STR""))+""STR""));"	"assertEquals(""STR"",Graphviz.fromGraph(graph).render(PNG).toString());"	0	1	46.158743143081665
61	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	0	1	41.37157392501831
	1	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts!=null);	0	1	41.37157392501831
	2	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotEquals(opts,null);	0	1	41.37157392501831
	3	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.opts.isEmpty());	0	1	41.37157392501831
	4	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertTrue(opts.args.isEmpty());	0	1	41.37157392501831
	5	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotSame(opts,GraphvizServer.CmdOptions.parse(newString[]{}));	0	1	41.37157392501831
	6	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotEquals(opts.args,opts.opts);	0	1	41.37157392501831
	7	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertThrows(IllegalArgumentException.class,""STR"");"	0	1	41.37157392501831
	8	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.opts.size());	0	1	41.37157392501831
	9	/	GraphvizServerTest	cmdLineArgs	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertThrows(IndexOutOfBoundsException.class,""STR"");"	0	1	41.37157392501831
62	0	nidi3/graphviz-java	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertThrows(IllegalArgumentException.class,""STR"");"	0	1	34.90039300918579
	1	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertThrows(IllegalArgumentException.class,""STR"");"	0	1	34.90039300918579
	2	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	34.90039300918579
	3	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	34.90039300918579
	4	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	34.90039300918579
	5	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	34.90039300918579
	6	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertNotEquals(null,""STR"");"	0	1	34.90039300918579
	7	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertTrue(""STR"");"	0	1	34.90039300918579
	8	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertFalse(""STR"");"	0	1	34.90039300918579
	9	/	ColorTest	rgbOk	"assertColor(attr(""STR"",""STR""),Color.rgb(""STR""));"	"assertTrue(""STR"");"	0	1	34.90039300918579
63	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertNotNull(deflateExtension);	0	1	41.862289905548096
	1	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertFalse(deflateExtension.isClientExtension());	0	1	41.862289905548096
	2	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertTrue(deflateExtension.isServerExtension());	0	1	41.862289905548096
	3	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertEquals(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getName());	0	1	41.862289905548096
	4	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertNotNull(deflateExtension.getParameters());	0	1	41.862289905548096
	5	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertEquals(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getExtensionDraft().getExtensionName());	0	1	41.862289905548096
	6	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertFalse(deflateExtension.getExtensionDraft().isPerMessageCompressExtension());	0	1	41.862289905548096
	7	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertTrue(deflateExtension.getExtensionDraft().isPerMessageDeflateExtension());	0	1	41.862289905548096
	8	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertNotSame(PerMessageDeflateExtension.EXTENSION_NAME,deflateExtension.getExtensionDraft().getExtensionName());	0	1	41.862289905548096
	9	/	PerMessageDeflateExtensionTest	testAcceptProvidedExtensionAsServer	"assertTrue(deflateExtension.acceptProvidedExtensionAsServer(""STR""));"	assertEquals(1,deflateExtension.getExtensionDraft().getExtensionDraftVersion());	0	1	41.862289905548096
64	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.markSupported());	0	1	55.6325900554657
	1	/	ProfileUtilTest	simple	assertNotNull(is);	"assertFalse(""STR"");"	0	1	55.6325900554657
	2	/	ProfileUtilTest	simple	assertNotNull(is);	"assertTrue(""STR"");"	0	1	55.6325900554657
	3	/	ProfileUtilTest	simple	assertNotNull(is);	assertFalse(includes.isEmpty());	0	1	55.6325900554657
	4	/	ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.available()>0);	0	1	55.6325900554657
	5	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1	1	55.6325900554657
	6	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(0,includes.size());	0	1	55.6325900554657
	7	/	ProfileUtilTest	simple	assertNotNull(is);	assertEquals(2,includes.size());	0	1	55.6325900554657
	8	/	ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(0,excludes.size());	0	1	55.6325900554657
	9	/	ProfileUtilTest	simple	assertNotNull(is);	assertEquals(2,excludes.size());	0	1	55.6325900554657
65	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	assertNotNull(baos);	0	1	35.825603723526
	1	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	assertNotNull(ser);	0	1	35.825603723526
	2	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	assertNotNull(result);	0	1	35.825603723526
	3	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	assertTrue(baos.size()>0);	0	1	35.825603723526
	4	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(""STR"");"	0	1	35.825603723526
	5	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertFalse(""STR"");"	0	1	35.825603723526
	6	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	1	35.825603723526
	7	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",result);"	0	1	35.825603723526
	8	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	assertArrayEquals(newbyte[]{91,116,114,117,101,93},baos.toByteArray());	0	1	35.825603723526
	9	/	AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",""STR"");"	0	1	35.825603723526
66	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertTrue(value<0);	0	1	31.736354112625122
	1	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertNotNull(result);	0	1	31.736354112625122
	2	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	1	31.736354112625122
	3	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertEquals(-1234567890L,value);	0	1	31.736354112625122
	4	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertNotEquals(0,numFracDigits);	0	1	31.736354112625122
	5	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	"assertArrayEquals(""STR"",fracPart.getBytes());"	0	1	31.736354112625122
	6	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertFalse(value>=0);	0	1	31.736354112625122
	7	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	assertNotEquals(0,intPart);	0	1	31.736354112625122
	8	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	1	31.736354112625122
	9	/	AJsonSerHelperTest	testNegativeNumber1	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",-1234567890L,value);"	0	1	31.736354112625122
67	0	NanoHttpd/nanohttpd	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer);	0	1	77.93554520606995
	1	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertNotNull(""STR"");"	0	1	77.93554520606995
	2	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0	1	77.93554520606995
	3	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()==1);	0	1	77.93554520606995
	4	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>1);	0	1	77.93554520606995
	5	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0	1	77.93554520606995
	6	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertEquals(100,""STR"");"	0	1	77.93554520606995
	7	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertEquals(1,""STR"");"	0	1	77.93554520606995
	8	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertEquals(0,""STR"");"	0	1	77.93554520606995
	9	/	TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	"assertTrue(""STR"");"	0	1	77.93554520606995
68	0	amlinv/stat-collection-utils	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(factory);	0	1	49.513171911239624
	1	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockVirtualMachine);	0	1	49.513171911239624
	2	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockAttacher);	0	1	49.513171911239624
	3	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxServiceUrlFactory);	0	1	49.513171911239624
	4	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxConnectorFactoryDelegate);	0	1	49.513171911239624
	5	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxMbeanConnectorFactory);	0	1	49.513171911239624
	6	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxServiceUrl);	0	1	49.513171911239624
	7	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxConnector);	0	1	49.513171911239624
	8	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockJmxMbeanConnection);	0	1	49.513171911239624
	9	/	JMXJvmIdConnectionFactoryTest	testCreateConnection	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(mockAgentProperties);	0	1	49.513171911239624
69	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotNull(attributeInjector);	0	1	36.13904905319214
	1	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertTrue(attributeInjectorinstanceofAttributeInjector);	0	1	36.13904905319214
	2	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertEquals(attributeInjector,poller.getAttributeInjector());	0	1	36.13904905319214
	3	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertSame(attributeInjector,poller.getAttributeInjector());	0	1	36.13904905319214
	4	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertArrayEquals(poller.getPolledObjects().toArray(),polledObjects.toArray());	0	1	36.13904905319214
	5	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotEquals(poller.getPolledObjects().size(),0);	0	1	36.13904905319214
	6	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotSame(mockBatchPollProcessor,poller.getBatchPollProcessor());	0	1	36.13904905319214
	7	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0	1	36.13904905319214
	8	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNotNull(poller.getTestHooks());	0	1	36.13904905319214
	9	/	JmxAttributePollerTest	testGetSetAttributeInjector	assertNotNull(this.poller.getAttributeInjector());	assertNull(poller.getTestHooks().getThreadExecutorService());	0	1	36.13904905319214
70	0	fizzed/jne	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotNull(file);	0	1	72.16982984542847
	1	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.exists());	0	1	72.16982984542847
	2	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	"assertEquals(""STR"",file.getName());"	0	1	72.16982984542847
	3	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertFalse(file.isDirectory());	0	1	72.16982984542847
	4	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotEquals(null,file);	0	1	72.16982984542847
	5	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	"assertNotEquals(""STR"",file.getAbsolutePath());"	0	1	72.16982984542847
	6	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.canRead());	0	1	72.16982984542847
	7	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertTrue(file.isFile());	0	1	72.16982984542847
	8	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	"assertEquals(""STR"",file.getName().trim());"	0	1	72.16982984542847
	9	/	JNETest	findFile	assertThat(file,is(not(nullValue())));	assertNotEquals(0,file.length());	0	1	72.16982984542847
