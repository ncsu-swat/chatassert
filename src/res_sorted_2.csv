TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a,b);	0	1	66.82965207099915
	1	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotEquals(a,null);	0	1	66.82965207099915
	2	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotNull(a);	0	1	66.82965207099915
	3	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.equals(a));	0	1	66.82965207099915
	4	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertFalse(a.equals(null));	0	1	66.82965207099915
	5	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertTrue(a.equals(b)&&b.equals(a)&&a.equals(a));	0	1	66.82965207099915
	6	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a.equals(b),b.equals(a));	0	1	66.82965207099915
	7	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertEquals(a.hashCode(),b.hashCode());	0	1	66.82965207099915
	8	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotNull(a.getState());	0	1	66.82965207099915
	9	/	PuzzleStateTest	equal_to_state_with_same_puzzle	assertTrue(a.equals(b));	assertNotEquals(b,null);	0	1	66.82965207099915
22	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved()&&p.getDistanceToGoal()==1);	0	1	32.55217504501343
	1	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved()||p.getDistanceToGoal()==0);	0	1	32.55217504501343
	2	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0	1	32.55217504501343
	3	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0	1	32.55217504501343
	4	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(0,p.getDistanceToGoal());	0	1	32.55217504501343
	5	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(p.getDistanceToGoal(),1);	0	1	32.55217504501343
	6	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(1,getSolution());	0	1	32.55217504501343
	7	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	0	1	32.55217504501343
	8	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotSame(p,null);	0	1	32.55217504501343
	9	/	PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(pinstanceofPuzzle);	0	1	32.55217504501343
23	0	nidi3/graphviz-java	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	1	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	2	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	3	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	4	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	5	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	6	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	7	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	8	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
	9	/	RecordsTest	rec	"assertEquals(""STR"",Records.rec(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	64.2999541759491
24	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertTrue(database.isOpen());	0	1	50.1827027797699
	1	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertNotNull(database);	0	1	50.1827027797699
	2	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertNotNull(id);	0	1	50.1827027797699
	3	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertNotNull(id.getIdentity().toString());	0	1	50.1827027797699
	4	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertEquals(1,result.getUpdateCount());	0	1	50.1827027797699
	5	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertNotNull(result);	0	1	50.1827027797699
	6	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertTrue(result.hasNext());	0	1	50.1827027797699
	7	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertTrue(result.close());	0	1	50.1827027797699
	8	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	assertTrue(database.getTransaction().isActive());	0	1	50.1827027797699
	9	/	RemoteTransactionSupportTest	testQueryUpdateUpdatedInTxTransaction	"assertEquals((long)result.next().getProperty(""STR""),1L);"	"assertEquals(OType.STRING,""STR"");"	0	1	50.1827027797699
25	0	orientechnologies/orientdb	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertNull(""STR"");"	0	1	47.817739963531494
	1	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertNotNull(""STR"");"	0	1	47.817739963531494
	2	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertNull(db.getMetadata().getIndexManager().getIndex(className));	0	1	47.817739963531494
	3	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,clazz.getClassIndex().getType());	0	1	47.817739963531494
	4	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertEquals(0,clazz.getIndexes().size());	0	1	47.817739963531494
	5	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertTrue(""STR"");"	0	1	47.817739963531494
	6	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertFalse(clazz.getIndexes().isEmpty());	0	1	47.817739963531494
	7	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertTrue(""STR"");"	0	1	47.817739963531494
	8	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	"assertFalse(""STR"");"	0	1	47.817739963531494
	9	/	OCreateIndexStatementExecutionTest	testIfNotExists	"assertNull(db.getMetadata().getIndexManager().getIndex(className+""STR""));"	assertEquals(OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX,clazz.getClassIndex().getType());	0	1	47.817739963531494
26	0	orientechnologies/orientdb	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	1	1	28.050606727600098
	1	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(3,cls.declaredProperties().size());	0	1	28.050606727600098
	2	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	0	1	28.050606727600098
	3	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(context.exists(name.getMethodName()));	0	1	28.050606727600098
	4	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(ODatabaseType.PLOCAL,type);	0	1	28.050606727600098
	5	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(8,db.get(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS));	0	1	28.050606727600098
	6	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(db.isClosed());	0	1	28.050606727600098
	7	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertTrue(""STR"");"	0	1	28.050606727600098
	8	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(context);	0	1	28.050606727600098
	9	/	LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	"assertEquals(path,""STR"");"	0	1	28.050606727600098
27	0	orientechnologies/orientdb	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(orientDB);	0	1	42.900030851364136
	1	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session);	0	1	42.900030851364136
	2	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(session.isOpen());	0	1	42.900030851364136
	3	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session.getMetadata().getSequenceLibrary());	0	1	42.900030851364136
	4	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,session.getMetadata().getSequenceLibrary().getSequenceNames().size());	0	1	42.900030851364136
	5	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,count);	0	1	42.900030851364136
	6	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertNotNull(session.getMetadata().getIndexManager());	0	1	42.900030851364136
	7	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertEquals(0,session.getMetadata().getIndexManager().getIndexes().size());	0	1	42.900030851364136
	8	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	assertTrue(session.getMetadata().getSchema().getClasses().isEmpty());	0	1	42.900030851364136
	9	/	ODatabaseMetadataUpdateListener	testSequenceUpdate	assertEquals(count,1);	"assertNull(""STR"");"	0	1	42.900030851364136
28	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertNotNull(propertyIndex);	0	1	85.70824217796326
	1	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertEquals(""STR"",propertyIndex.getPropertyName());"	0	1	85.70824217796326
	2	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertEquals(OType.INTEGER,propertyIndex.getType());	0	1	85.70824217796326
	3	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertNotEquals(""STR"",className);"	0	1	85.70824217796326
	4	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertTrue(propertyIndex.getPropertyName()instanceofString);	0	1	85.70824217796326
	5	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertFalse(propertyIndex.getType()instanceofString);	0	1	85.70824217796326
	6	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	assertSame(propertyIndex.getType(),OType.INTEGER);	0	1	85.70824217796326
	7	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertNotSame(""STR"",className);"	0	1	85.70824217796326
	8	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertTrue(""STR"");"	0	1	85.70824217796326
	9	/	OPropertyIndexDefinitionTest	testClassName	"assertEquals(""STR"",propertyIndex.getClassName());"	"assertArrayEquals(""STR"",OType.INTEGER.toString()});"	0	1	85.70824217796326
29	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(db);	0	1	29.689407110214233
	1	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(schema);	0	1	29.689407110214233
	2	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotNull(result);	0	1	29.689407110214233
	3	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(db.isActiveOnCurrentThread());	0	1	29.689407110214233
	4	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(db.isClosed());	0	1	29.689407110214233
	5	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(1,db.getMetadata().getSchema().getClasses().size());	0	1	29.689407110214233
	6	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(db.getLevel(),OStorage.LOWEST_SUPPORTED_PROTOCOL_VERSION);	0	1	29.689407110214233
	7	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertEquals(db.getName(),db.getStorage().getName());	0	1	29.689407110214233
	8	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertNotEquals(db.hashCode(),db.getMetadata().hashCode());	0	1	29.689407110214233
	9	/	OAlterClassStatementExecutionTest	testName1	assertNull(schema.getClass(className));	assertTrue(result.hasNext());	0	1	29.689407110214233
30	0	orientechnologies/orientdb	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.containsKey(multiKey));	0	1	85.2947928905487
	1	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNull(mapResult);	1	1	85.2947928905487
	2	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertEquals(1,multiKeyMap.size());	0	1	85.2947928905487
	3	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.containsValue(newObject()));	0	1	85.2947928905487
	4	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0	1	85.2947928905487
	5	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertTrue(multiKeyMap.keySet().contains(multiKey));	0	1	85.2947928905487
	6	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotNull(multiKeyMap);	0	1	85.2947928905487
	7	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0	1	85.2947928905487
	8	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotEquals(multiKey.hashCode(),anotherMultiKey.hashCode());	0	1	85.2947928905487
	9	/	OMultiKeyTest	testOneKeyNotInMap	assertNull(mapResult);	assertNotNull(multiKey);	0	1	85.2947928905487
31	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotNull(db);	0	1	25.28854775428772
	1	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertNotNull(result);	0	1	25.28854775428772
	2	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(resultinstanceofList<?>);	0	1	25.28854775428772
	3	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.size()>0);	0	1	25.28854775428772
	4	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0	1	25.28854775428772
	5	/	OMatchStatementExecutionTest	testTriangle2Arrows	assertEquals(1,result.size());	assertTrue(result.get(0)instanceofODocument);	0	1	25.28854775428772
32	0	orientechnologies/orientdb	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(db);	0	1	36.54691672325134
	1	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertEquals(""STR"",companyClass.getName());"	0	1	36.54691672325134
	2	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(companyClass.existsProperty(PROP_NAME));	0	1	36.54691672325134
	3	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.isReadonly());	0	1	36.54691672325134
	4	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(PROP_NAME,nameProperty.getFullName());	0	1	36.54691672325134
	5	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(getName(),equalTo(PROP_NAME));	0	1	36.54691672325134
	6	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(nameProperty.isMandatory());	0	1	36.54691672325134
	7	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertTrue(""STR"");"	0	1	36.54691672325134
	8	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	"assertFalse(""STR"");"	0	1	36.54691672325134
	9	/	OCreatePropertyStatementExecutionTest	testCreateReadOnlyProperty	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(nameProperty.isReadonly());	0	1	36.54691672325134
33	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertNotNull(db);	0	1	56.93120622634888
	1	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertTrue(db.exists());	0	1	56.93120622634888
	2	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0	1	56.93120622634888
	3	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1	1	56.93120622634888
	4	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	0	1	56.93120622634888
	5	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertThrows(NoSuchElementException.class,()->qResult.next());	0	1	56.93120622634888
	6	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(2,qResult.get(0).getPropertyNames().size());	0	1	56.93120622634888
	7	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0	1	56.93120622634888
	8	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertFalse(getProfilerInstance().isRecording());	0	1	56.93120622634888
	9	/	OMatchStatementExecutionNewTest	testReturnExpressionArrows	assertTrue(qResult.hasNext());	assertEquals(10,getProfilerInstance().getStatistics().size());	0	1	56.93120622634888
34	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1	1	45.66710305213928
	1	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0	1	45.66710305213928
	2	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotNull(qResult.getExecutionPlan());	0	1	45.66710305213928
	3	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNull(qResult.getExecutionPlan());	0	1	45.66710305213928
	4	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getExecutionPlan().getCost().getValue());	0	1	45.66710305213928
	5	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(0,qResult.getExecutionPlan().getCost().getValue());	0	1	45.66710305213928
	6	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotNull(qResult.getExecutionStats());	0	1	45.66710305213928
	7	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNull(qResult.getExecutionStats().getMetadata());	0	1	45.66710305213928
	8	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getExecutionStats().getTotalRecords());	0	1	45.66710305213928
	9	/	OMatchStatementExecutionNewTest	testPattens	assertTrue(qResult.hasNext());	assertEquals(0,qResult.getExecutionStats().getTotalRecords());	0	1	45.66710305213928
35	0	orientechnologies/orientdb	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	0	1	36.34656596183777
	1	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	0	1	36.34656596183777
	2	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertEquals(0,readAsLong(bytes));	0	1	36.34656596183777
	3	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)==0);	0	1	36.34656596183777
	4	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)>=0);	0	1	36.34656596183777
	5	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertTrue(readAsLong(bytes)>=0);	0	1	36.34656596183777
	6	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)<0);	0	1	36.34656596183777
	7	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)!=0);	0	1	36.34656596183777
	8	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertFalse(readAsLong(bytes)<=0);	0	1	36.34656596183777
	9	/	OVarIntSerializerTest	serializeZero	assertEquals(OVarIntSerializer.readAsLong(bytes),0l);	assertNotEquals(0L,readAsLong(bytes));	0	1	36.34656596183777
36	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	39.211570024490356
	1	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0	1	39.211570024490356
	2	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertEquals(""STR"",""STR"");"	0	1	39.211570024490356
	3	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertNotNull(""STR"");"	0	1	39.211570024490356
	4	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertNull(""STR"");"	0	1	39.211570024490356
	5	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertEquals(2,result.stream().count());	0	1	39.211570024490356
	6	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertNotEquals(""STR"",""STR"");"	0	1	39.211570024490356
	7	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertArrayEquals(""STR"",""STR"");"	0	1	39.211570024490356
	8	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	assertSame(params,newHashMap<>());	0	1	39.211570024490356
	9	/	OSelectStatementExecutionTest	testNamedParamsWithIndex	assertTrue(result.hasNext());	"assertNotSame(""STR"",result);"	0	1	39.211570024490356
37	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotNull(result);	0	1	40.06783390045166
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotSame(null,result);	0	1	40.06783390045166
	2	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(0.0F,result);	0	1	40.06783390045166
	3	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue(resultinstanceofFloat);	1	1	40.06783390045166
	4	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertEquals(10.5F,result);	0	1	40.06783390045166
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertFalse(resultinstanceofDouble);	0	1	40.06783390045166
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(0.0D,result);	0	1	40.06783390045166
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertTrue(resultinstanceofComparable);	0	1	40.06783390045166
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertNotEquals(-10.5F,result);	0	1	40.06783390045166
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveFloat	assertTrue(resultinstanceofFloat);	assertEquals(Float.valueOf(10.5F),result);	0	1	40.06783390045166
38	0	orientechnologies/orientdb	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertNotNull(response);	0	1	53.008944034576416
	1	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(responseinstanceofOBinaryResponse);	0	1	53.008944034576416
	2	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertEquals(response.getResponseCode(),200);	0	1	53.008944034576416
	3	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.hasError());	0	1	53.008944034576416
	4	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseTime()>0);	0	1	53.008944034576416
	5	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.getResponseText().isEmpty());	0	1	53.008944034576416
	6	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	"assertEquals(response.getResponseStatus(),""STR"");"	0	1	53.008944034576416
	7	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseText().length()>=4);	0	1	53.008944034576416
	8	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertTrue(response.getResponseTime()>=0);	0	1	53.008944034576416
	9	/	ORemotePushMessagesTest	testSubscribeResponse	assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);	assertFalse(response.isClosed());	0	1	53.008944034576416
39	0	hazelcast/hazelcast-simulator	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(4,result.size());	0	1	69.9057228565216
	1	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	0	1	69.9057228565216
	2	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.CLIENT,result.get(0).getParameters().getTargetType());	0	1	69.9057228565216
	3	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(select(input,false).size()>0);	0	1	69.9057228565216
	4	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(select(input,false).contains(result.get(0)));	0	1	69.9057228565216
	5	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.get(1).getParameters().getClient());	0	1	69.9057228565216
	6	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.get(2).getParameters().getMajorVersion());	0	1	69.9057228565216
	7	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.get(1).getParameters().getClient());	0	1	69.9057228565216
	8	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result.get(3).getAgentAddress());	0	1	69.9057228565216
	9	/	WorkerQueryTest	targetType_whenPreferClients	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(result.get(0),result.get(1));	0	1	69.9057228565216
40	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotNull(classInstance);	0	1	32.04545617103577
	1	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertThrows(IllegalArgumentException.class,()->invokeMethod(classInstance,null,args));	0	1	32.04545617103577
	2	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getParameterCount()==args.length);	0	1	32.04545617103577
	3	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getReturnType().equals(Integer.class));	0	1	32.04545617103577
	4	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNull(method.invoke(null));	0	1	32.04545617103577
	5	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertFalse(method.isVarArgs());	0	1	32.04545617103577
	6	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertTrue(method.getExceptionTypes().length==1);	0	1	32.04545617103577
	7	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertEquals(3,args.length);	0	1	32.04545617103577
	8	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertNotEquals(classInstance.getClass(),method.getDeclaringClass());	0	1	32.04545617103577
	9	/	ReflectionUtilsTest	testInvokeMethod	assertFalse(InvokeMethodTest.hasBeenInvoked);	assertSame(classInstance,method.invoke(classInstance,args));	0	1	32.04545617103577
41	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNull(field);	0	1	76.49251198768616
	1	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertNotNull(field);	1	1	76.49251198768616
	2	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(field!=null);	0	1	76.49251198768616
	3	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertFalse(field==null);	0	1	76.49251198768616
	4	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	"assertEquals(field,""STR"");"	0	1	76.49251198768616
	5	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	"assertNotSame(field,""STR"");"	0	1	76.49251198768616
	6	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	"assertSame(field,""STR"");"	0	1	76.49251198768616
	7	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	"assertNull(""STR"");"	0	1	76.49251198768616
	8	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	"assertNotNull(""STR"");"	0	1	76.49251198768616
	9	/	ReflectionUtilsTest	testGetField_primitive	assertNotNull(field);	assertTrue(GetFieldTest.class.getDeclaredFields().length>0);	0	1	76.49251198768616
42	0	hazelcast/hazelcast-simulator	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getCause()instanceofRuntimeException);	0	1	34.60236716270447
	1	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0	1	34.60236716270447
	2	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1	1	34.60236716270447
	3	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exceptioninstanceofException);	0	1	34.60236716270447
	4	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(ReflectionException.class,exception.getClass());	0	1	34.60236716270447
	5	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	"assertEquals(""STR"",exception.getClass().getSimpleName());"	0	1	34.60236716270447
	6	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(Throwable.class,exception.getCause().getClass().getSuperclass());	0	1	34.60236716270447
	7	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	"assertEquals(""STR"",exception.getCause().getClass().getName());"	0	1	34.60236716270447
	8	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exceptioninstanceofRuntimeException);	0	1	34.60236716270447
	9	/	ReflectionExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getStackTrace()[0].isNativeMethod());	0	1	34.60236716270447
43	0	hazelcast/hazelcast-simulator	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotNull(throttlingLogger);	0	1	60.623234033584595
	1	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertSame(loggerMock,throttlingLogger.getLogger());	0	1	60.623234033584595
	2	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertEquals(rateMs,throttlingLogger.getMaximumRateMs());	0	1	60.623234033584595
	3	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertEquals(1,throttlingLogger.getRateLimiter().getRate());	0	1	60.623234033584595
	4	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertTrue(true);	0	1	60.623234033584595
	5	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertFalse(false);	0	1	60.623234033584595
	6	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotNull(ThrottlingLogger.newLogger(loggerMock,rateMs));	0	1	60.623234033584595
	7	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotEquals(null,throttlingLogger);	0	1	60.623234033584595
	8	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertSame(throttlingLogger,throttlingLogger);	0	1	60.623234033584595
	9	/	ThrottlingLoggerTest	testThrottling	assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);	assertNotSame(ThrottlingLogger.newLogger(loggerMock,rateMs),throttlingLogger);	0	1	60.623234033584595
44	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertNotNull(file);	1	1	28.45780611038208
	1	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.canRead());	0	1	28.45780611038208
	2	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	"assertEquals(file.getAbsolutePath(),""STR"");"	0	1	28.45780611038208
	3	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	"assertEquals(file.getName(),""STR"");"	0	1	28.45780611038208
	4	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.isFile());	0	1	28.45780611038208
	5	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.getParentFile().equals(parent));	0	1	28.45780611038208
	6	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertTrue(file.canExecute());	0	1	28.45780611038208
	7	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertFalse(file.isHidden());	0	1	28.45780611038208
	8	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.compareTo(parent),14);	0	1	28.45780611038208
	9	/	WizardUtilsTest	testGetFileFromUrl_fromJar	assertNotNull(file);	assertEquals(file.length(),4392);	0	1	28.45780611038208
45	0	hazelcast/hazelcast-simulator	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(expectedFile.exists());	0	1	30.309902906417847
	1	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getAbsolutePath(),actualFile.getAbsolutePath());	0	1	30.309902906417847
	2	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(actualFile.isFile());	0	1	30.309902906417847
	3	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getParentFile(),actualFile.getParentFile());	0	1	30.309902906417847
	4	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	"assertEquals(""STR"",actualFile.getName());"	0	1	30.309902906417847
	5	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertEquals(expectedFile.getParent(),actualFile.getParent());	0	1	30.309902906417847
	6	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(expectedFile.isDirectory());	0	1	30.309902906417847
	7	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertFalse(actualFile.isDirectory());	0	1	30.309902906417847
	8	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertTrue(actualFile.exists());	0	1	30.309902906417847
	9	/	WizardUtilsTest	testGetProfileFile_withZshrc	assertEquals(expectedFile.getPath(),actualFile.getPath());	assertNotNull(actualFile);	0	1	30.309902906417847
46	0	hazelcast/hazelcast-simulator	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertNotNull(joined);	0	1	24.26516103744507
	1	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertNotEquals(null,joined);	0	1	24.26516103744507
	2	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertFalse(joined.isEmpty());	0	1	24.26516103744507
	3	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertNotSame(joined,""STR"");"	0	1	24.26516103744507
	4	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertNotEquals(""STR"",joined);"	0	1	24.26516103744507
	5	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertTrue(joined.contains(DEFAULT_DELIMITER));	0	1	24.26516103744507
	6	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertEquals(DEFAULT_DELIMITER,""STR"");"	0	1	24.26516103744507
	7	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertEquals(DEFAULT_DELIMITER,""STR"");"	0	1	24.26516103744507
	8	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	"assertEquals(joined.trim(),""STR"");"	0	1	24.26516103744507
	9	/	FormatUtilsTest	testJoinEmptyString	"assertEquals(""STR"",joined);"	assertNotSame(Collections.EMPTY_LIST,collection);	0	1	24.26516103744507
47	0	hazelcast/hazelcast-simulator	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(properties);	1	1	32.4947669506073
	1	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotNull(inputStream);	0	1	32.4947669506073
	2	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertThrows(NullPointerException.class,()->GitInfo.loadGitProperties(null));	0	1	32.4947669506073
	3	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertNotNull(""STR"");"	0	1	32.4947669506073
	4	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	assertNotSame(properties,newProperties());	0	1	32.4947669506073
	5	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertThrows(FileNotFoundException.class,""STR"");"	0	1	32.4947669506073
	6	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertThrows(IOException.class,""STR"");"	0	1	32.4947669506073
	7	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertNotSame(inputStream,""STR"");"	0	1	32.4947669506073
	8	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertEquals(""STR"",""STR"");"	0	1	32.4947669506073
	9	/	GitInfoTest	testLoadProperties_notExists	assertNotNull(properties);	"assertEquals(""STR"",""STR"");"	0	1	32.4947669506073
48	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(env);	0	1	56.08736276626587
	1	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",""STR"");"	0	1	56.08736276626587
	2	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",""STR"");"	0	1	56.08736276626587
	3	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",""STR"");"	0	1	56.08736276626587
	4	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertNotNull(getCiName());	0	1	56.08736276626587
	5	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(!getCiName().isEmpty());	0	1	56.08736276626587
	6	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",getCiName());"	0	1	56.08736276626587
	7	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",getCiName());"	0	1	56.08736276626587
	8	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertTrue(condition);	0	1	56.08736276626587
	9	/	CiEnvironmentTest	recognises_tfs	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertFalse(condition);	0	1	56.08736276626587
49	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(expected,""STR"");"	0	1	43.91115093231201
	1	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	2	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	3	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	4	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	5	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	6	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	7	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	8	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
	9	/	ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertTrue(""STR"");"	0	1	43.91115093231201
50	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	assertNotNull(url);	0	1	74.7300009727478
	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertEquals(""STR"",url);"	1	1	74.7300009727478
	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertNotEquals(""STR"",url);"	0	1	74.7300009727478
	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertTrue(""STR"");"	0	1	74.7300009727478
	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertFalse(""STR"");"	0	1	74.7300009727478
	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	assertNotEquals(null,url);	0	1	74.7300009727478
	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	assertEquals(url.toUpperCase(),url.toUpperCase());	0	1	74.7300009727478
	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertEquals(1,""STR"");"	0	1	74.7300009727478
	8	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	assertNull(null);	0	1	74.7300009727478
	9	/	CucumberProResultsUrlBuilderTest	builds_url_for_appliance_when_env_var_is_set	"assertEquals(""STR"",url);"	"assertArrayEquals(""STR"",url.toCharArray());"	0	1	74.7300009727478
51	0	dbmdz/iiif-apis	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertNotNull(manifest);	0	1	53.6570839881897
	1	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertNotNull(mapper);	0	1	53.6570839881897
	2	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertNull(getLogoUri());	0	1	53.6570839881897
	3	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertNotNull(logos);	0	1	53.6570839881897
	4	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertThrows(Exception.class,()->{thrownewException(});	0	1	53.6570839881897
	5	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertSame(expected,actual);	0	1	53.6570839881897
	6	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertNotSame(expectedObject,actualObject);	0	1	53.6570839881897
	7	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertEquals(expectedResults,actualResults);	0	1	53.6570839881897
	8	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertFalse(logoString.isEmpty());	0	1	53.6570839881897
	9	/	ParsingTest	testManifestWithStringLogo	"assertThat(manifest.getLogoUri().toString()).isEqualTo(""STR"");"	assertTrue(expectedNumber>actualNumber);	0	1	53.6570839881897
52	0	dbmdz/iiif-apis	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertNotNull(err);	0	1	78.1746518611908
	1	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	"assertEquals(""STR"",err.getDescription());"	0	1	78.1746518611908
	2	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertNotEquals(null,err.getDescription());	0	1	78.1746518611908
	3	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	"assertTrue(""STR"");"	0	1	78.1746518611908
	4	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	"assertThrows(InvalidCredentials.class,""STR"");"	0	1	78.1746518611908
	5	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	"assertSame(err.getDescription(),""STR"");"	0	1	78.1746518611908
	6	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertNotSame(null,err.getDescription());	0	1	78.1746518611908
	7	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertArrayEquals(2},newint[]{1);	0	1	78.1746518611908
	8	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertTrue(true);	0	1	78.1746518611908
	9	/	SpecExamplesSerializationTest	testErrorCondition	"assertSerializationEqualsSpec(err,""STR"");"	assertFalse(false);	0	1	78.1746518611908
53	0	NanoHttpd/nanohttpd	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotNull(contentEncoding);	0	1	34.34291481971741
	1	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNull(contentEncoding.getValue());	0	1	34.34291481971741
	2	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotEquals(null,contentEncoding);	0	1	34.34291481971741
	3	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotSame(null,contentEncoding);	0	1	34.34291481971741
	4	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNull(contentEncoding);	0	1	34.34291481971741
	5	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertEquals(Status.OK.getRequestStatus(),response.getStatusLine().getStatusCode());	0	1	34.34291481971741
	6	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertEquals(200,response.getStatusLine().getStatusCode());	0	1	34.34291481971741
	7	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertNotEquals(404,response.getStatusLine().getStatusCode());	0	1	34.34291481971741
	8	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertTrue(response.getEntity().getContentLength()>0);	0	1	34.34291481971741
	9	/	GZipIntegrationTest	noGzipWithoutAcceptEncoding	assertThat(contentEncoding,is(nullValue()));	assertFalse(response.getEntity().getContentLength()==0);	0	1	34.34291481971741
54	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1	1	25.527841091156006
	1	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(!macAddress.isMulticast());	0	1	25.527841091156006
	2	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedBooleanValue,macAddress.isMulticast());	0	1	25.527841091156006
	3	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress);	0	1	25.527841091156006
	4	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.getAddress());	0	1	25.527841091156006
	5	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertArrayEquals(expectedByteArray,macAddress.getAddress());	0	1	25.527841091156006
	6	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedByteValue,macAddress.getAddress()[0]);	0	1	25.527841091156006
	7	/	MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(expectedIntValue,macAddress.getAddressLength());	0	1	25.527841091156006
55	0	AlejandroRivera/embedded-rabbitmq	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotNull(port);	0	1	46.02875804901123
	1	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertTrue(port>=0);	0	1	46.02875804901123
	2	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertTrue(port<=65535);	0	1	46.02875804901123
	3	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertFalse(port<0);	0	1	46.02875804901123
	4	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertFalse(port>65535);	0	1	46.02875804901123
	5	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertEquals(port,port);	0	1	46.02875804901123
	6	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertSame(port,port);	0	1	46.02875804901123
	7	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,0);	0	1	46.02875804901123
	8	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,1);	0	1	46.02875804901123
	9	/	RandomPortSupplierTest	testRandomPortIsReturned	assertThat(port,not(equalTo(0)));	assertNotEquals(port,80);	0	1	46.02875804901123
56	0	AlejandroRivera/embedded-rabbitmq	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertEquals(""STR"",plugin.getName());"	0	1	41.56701683998108
	1	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	assertNotNull(plugin);	0	1	41.56701683998108
	2	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	assertEquals(3.5,plugin.getVersion());	0	1	41.56701683998108
	3	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	assertTrue(plugin.getName()!=null&&!plugin.getName().isEmpty());	0	1	41.56701683998108
	4	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertEquals(""STR"",plugin.getName().substring(0,6));"	0	1	41.56701683998108
	5	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	assertEquals(17,output.length());	0	1	41.56701683998108
	6	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertTrue(""STR"");"	0	1	41.56701683998108
	7	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertFalse(""STR"");"	0	1	41.56701683998108
	8	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertTrue(""STR"");"	0	1	41.56701683998108
	9	/	PluginTest	testExplicitlyEnabledPluginLine	"assertThat(plugin.getName(),equalTo(""STR""));"	"assertEquals(""STR"",output.trim());"	0	1	41.56701683998108
57	0	PeterisP/morphology	MorphologyTest	celties	assertTrue(w.isRecognized());	assertFalse(wordforms.isEmpty());	0	1	53.02735686302185
	1	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(!wordforms.isEmpty());	0	1	53.02735686302185
	2	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getWordForms(w).containsAll(w.getWordForms()));	0	1	53.02735686302185
	3	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getAllLemmas(w).size()>=1);	0	1	53.02735686302185
	4	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertEquals(0,locītājs.getWordForms(w).size());	0	1	53.02735686302185
	5	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.dictionaryContains(w.getLemma()));	0	1	53.02735686302185
	6	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNull(w.getLemma());	0	1	53.02735686302185
	7	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	53.02735686302185
	8	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertTrue(locītājs.getWord(w.toString())!=null);	0	1	53.02735686302185
	9	/	MorphologyTest	celties	assertTrue(w.isRecognized());	assertNotNull(locītājs.getAnalyzer());	0	1	53.02735686302185
58	0	PeterisP/morphology	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertNotNull(locītājs);	0	1	57.033499002456665
	1	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertTrue(locītājs.enableGuessing);	0	1	57.033499002456665
	2	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertTrue(locītājs.enableVocative);	0	1	57.033499002456665
	3	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertEquals(0,locītājs.getCacheSize());	0	1	57.033499002456665
	4	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertTrue(locītājs.enableAllGuesses);	0	1	57.033499002456665
	5	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertFalse(locītājs.isCustomInflexionsLoaded());	0	1	57.033499002456665
	6	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertNotNull(locītājs.getInflexionTypes());	0	1	57.033499002456665
	7	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertSame(locītājs.getRootSet(),locītājs.getRootSet());	0	1	57.033499002456665
	8	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	assertEquals(0,locītājs.getDefaultFlags());	0	1	57.033499002456665
	9	/	MorphologyTest	ģenerēšanaNezināmiem	"assertTrue(""STR"".matches(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	57.033499002456665
59	0	PeterisP/morphology	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	81.40069389343262
	1	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertFalse(locītājs.getWords().isEmpty());	0	1	81.40069389343262
	2	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertEquals(0,locītājs.getWordCount());	0	1	81.40069389343262
	3	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotEquals(null,locītājs.getWordCount());	0	1	81.40069389343262
	4	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotSame(locītājs,newAnalyzer(false));	0	1	81.40069389343262
	5	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertThrows(NullPointerException.class,()->{locītājs.getPronunciations(null});	0	1	81.40069389343262
	6	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.areSentencesSupported());	0	1	81.40069389343262
	7	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.hasFeatures());	0	1	81.40069389343262
	8	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertTrue(locītājs.areWordformsSupported());	0	1	81.40069389343262
	9	/	MorphologyTest	turpms2	assertTrue(Turpmākajā.isRecognized());	assertNotNull(locītājs.getController());	0	1	81.40069389343262
60	0	TooTallNate/Java-WebSocket	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1	1	35.65368390083313
	1	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(curframe.isTextPayload());	0	1	35.65368390083313
	2	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.getTransfereMasked());	0	1	35.65368390083313
	3	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(curframe.isValid());	0	1	35.65368390083313
	4	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNull(curframe.getExtensionData());	0	1	35.65368390083313
	5	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0	1	35.65368390083313
	6	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0	1	35.65368390083313
	7	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(curframe,createdFrame.get(0));	0	1	35.65368390083313
	8	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0).isFin());	0	1	35.65368390083313
	9	/	Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(text.length(),createdFrame.get(0).getPayloadData().length());	0	1	35.65368390083313
61	0	TooTallNate/Java-WebSocket	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertTrue(webSocket.isOpen());	0	1	82.83434414863586
	1	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertFalse(server.isOpen());	0	1	82.83434414863586
	2	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertEquals(true,webSocket.isOpen());	0	1	82.83434414863586
	3	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotEquals(false,server.isOpen());	0	1	82.83434414863586
	4	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertTrue(webSocket.isOpen()&&server.isOpen());	0	1	82.83434414863586
	5	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNull(server);	0	1	82.83434414863586
	6	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotNull(webSocket);	0	1	82.83434414863586
	7	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotNull(server.getSocketAddress());	0	1	82.83434414863586
	8	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertNotSame(webSocket,server);	0	1	82.83434414863586
	9	/	Issue609Test	testIssue	"assertTrue(""STR"",webSocket.isOpen());"	assertEquals(-1,Integer.compare(server.getPort(),8080));	0	1	82.83434414863586
62	0	TooTallNate/Java-WebSocket	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotNull(incompleteException);	0	1	71.4714708328247
	1	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertEquals(42,incompleteException.getErrorCode());	0	1	71.4714708328247
	2	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertTrue(incompleteExceptioninstanceofIncompleteException);	0	1	71.4714708328247
	3	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotEquals(0,incompleteException.getErrorCode());	0	1	71.4714708328247
	4	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	"assertNotNull(""STR"");"	0	1	71.4714708328247
	5	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertFalse(incompleteException.getMessage().isEmpty());	0	1	71.4714708328247
	6	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertEquals(0,incompleteException.compareTo(newIncompleteException(incompleteException.getErrorCode())));	0	1	71.4714708328247
	7	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertTrue(-1<incompleteException.getErrorCode()&&incompleteException.getErrorCode()<1);	0	1	71.4714708328247
	8	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertNotEquals(0,incompleteException.hashCode());	0	1	71.4714708328247
	9	/	IncompleteExceptionTest	testConstructor	"assertEquals(""STR"",42,incompleteException.getPreferredSize());"	assertEquals(incompleteException.hashCode(),incompleteException.hashCode());	0	1	71.4714708328247
63	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(true);	0	1	50.30102014541626
	1	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(preparer);	0	1	50.30102014541626
	2	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(mockParameterReplacer,mockParameterReplacer);	0	1	50.30102014541626
	3	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNull(result);	0	1	50.30102014541626
	4	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0	1	50.30102014541626
	5	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	"assertEquals(""STR"",""STR"");"	0	1	50.30102014541626
	6	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(42,42);	0	1	50.30102014541626
	7	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(42.0,42.0);	0	1	50.30102014541626
	8	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(testTarget002,testTarget002);	0	1	50.30102014541626
	9	/	ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(testTarget001,testTarget002);	0	1	50.30102014541626
64	0	adlnet/jxapi	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(expected,actual);	0	1	31.792993783950806
	1	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(choices,activityDefinition.getScale());	0	1	31.792993783950806
	2	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotEquals(source,activityDefinition.getTarget());	0	1	31.792993783950806
	3	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(extensions,activityDefinition.getExtensions());	0	1	31.792993783950806
	4	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNotNull(activityDefinition.getMoreInfo());	0	1	31.792993783950806
	5	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertNull(activityDefinition.getDescription());	0	1	31.792993783950806
	6	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	"assertArrayEquals(""STR"",activityDefinition.getCorrectResponsesPattern().toArray());"	0	1	31.792993783950806
	7	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertEquals(1,activityDefinition.getChoices().size());	0	1	31.792993783950806
	8	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	assertIterableEquals(source,activityDefinition.getSource());	0	1	31.792993783950806
	9	/	ActivityDefinitionTest	testGetType	assertNotNull(actual);	"assertEquals(44,""STR"");"	0	1	31.792993783950806
65	0	basis-technology-corp/tcl-regex-java	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	assertNotNull(exp);	0	1	25.10333013534546
	1	/	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	"assertTrue(""STR"");"	0	1	25.10333013534546
	2	/	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	"assertFalse(""STR"");"	0	1	25.10333013534546
	3	/	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	assertEquals(2,exp.getFlags().size());	0	1	25.10333013534546
	4	/	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	assertEquals(PatternFlags.ADVANCED,exp.getFlags().get(0));	0	1	25.10333013534546
	5	/	RangeTest	testUpper	"assertThat(""STR"",matches(exp));"	assertEquals(PatternFlags.EXPANDED,exp.getFlags().get(1));	0	1	25.10333013534546
66	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1	1	75.87468218803406
	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0	1	75.87468218803406
	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	0	1	75.87468218803406
	3	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertTrue(""STR"");"	0	1	75.87468218803406
	4	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertFalse(""STR"");"	0	1	75.87468218803406
	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0	1	75.87468218803406
	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNull(null);	0	1	75.87468218803406
	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertThrows(Exception.class,()->matcher.lookingAt());	0	1	75.87468218803406
	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(pattern,matcher.pattern());	0	1	75.87468218803406
	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(matcher,matcher);	0	1	75.87468218803406
67	0	trautonen/coveralls-maven-plugin	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertNotNull(getBuildNumber());	0	1	32.71838593482971
	1	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertTrue(getBuildNumber().length()>0);	0	1	32.71838593482971
	2	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertFalse(getBuildNumber().isEmpty());	0	1	32.71838593482971
	3	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",getBuildNumber());"	0	1	32.71838593482971
	4	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertSame(""STR"",getBuildNumber());"	0	1	32.71838593482971
	5	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertNotSame(""STR"",getBuildNumber());"	0	1	32.71838593482971
	6	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	assertNull(getBuildNumber());	0	1	32.71838593482971
	7	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertArrayEquals(""STR"",newString[]{getBuildNumber()});"	0	1	32.71838593482971
	8	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertEquals(""STR"",""STR"");"	0	1	32.71838593482971
	9	/	CircleTest	testGetBuildNumber	"assertEquals(""STR"",newCircle(env()).getBuildNumber());"	"assertTrue(""STR"");"	0	1	32.71838593482971
68	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(""STR"");"	0	1	38.675063133239746
	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(""STR"");"	0	1	38.675063133239746
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(""STR"");"	0	1	38.675063133239746
	3	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(""STR"");"	0	1	38.675063133239746
	4	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(""STR"");"	0	1	38.675063133239746
	5	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(""STR"");"	0	1	38.675063133239746
	6	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertTrue(""STR"");"	0	1	38.675063133239746
	7	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertFalse(""STR"");"	0	1	38.675063133239746
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertThrows(IllegalArgumentException.class,()->isValidOTPFormat(null));	0	1	38.675063133239746
	9	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	"assertNotNull(""STR"");"	0	1	38.675063133239746
69	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	0	1	37.08835816383362
	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	0	1	37.08835816383362
	2	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofJsonSchemaFactory);	0	1	37.08835816383362
	3	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(JsonSchemaFactory.class,factory.getClass());	0	1	37.08835816383362
	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(factory,null);	0	1	37.08835816383362
	5	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(factory,LoaderUriDownloader.createJsonSchemaFactory(loader));	0	1	37.08835816383362
	6	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(factory.isError());	0	1	37.08835816383362
	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(0,factory.getMaximumRecursiveDepth());	0	1	37.08835816383362
	8	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertArrayEquals(null,null);	0	1	37.08835816383362
	9	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertThrows(IllegalArgumentException.class,()->createJsonSchemaFactory(null));	0	1	37.08835816383362
