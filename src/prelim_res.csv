TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	7.41	0
	1	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	6.59	0
	3	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	6.52	1
	4	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(actual.isEmpty());	5.89	0
	5	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	6.47	0
	6	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(condition`isaplausiblecondition);	6.36	0
	11	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	14.34	0
	12	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	6.89	0
	16	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,activityDefinition.getType());	25.24	0
	17	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,activityDefinition.getType());	12.87	0
1	0	adlnet/jxapi	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	20.19	0
	1	/	VerbsTest	testVoided	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	12.92	0
	2	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	7.1	1
	3	/	VerbsTest	testVoided	assertNotNull(actual);	assertFalse("STR".equals(actual.getId()));	21.99	0
	5	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	13.41	1
	6	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotSame(null,actual);	6.34	0
	10	/	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	5.95	0
	11	/	VerbsTest	testVoided	assertNotNull(actual);	assertEquals(actual.getLabel()`isaplausible"voided",actual.getLabel());	6.79	0
	12	/	VerbsTest	testVoided	assertNotNull(actual);	assertEquals("STR",actual.getId());	18.82	0
	13	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	6.26	0
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	5.67	0
	1	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(actual.contains(expected));	6.15	0
	2	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(actual);	6.12	1
	3	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(condition`);	9.89	0
	4	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	6.88	0
	5	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	7.33	0
	6	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	6.6	0
	7	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	12.05	0
	9	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual)`.Thisexpected,actual);	8.38	0
	10	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(condition`isaplausiblecondition);	6.41	0
0	0	orientechnologies/orientdb	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	93.64	1
	2	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(newOIntentMassiveInsert(),db.getActiveIntent());	160.61	0
	3	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()!=null);	221.64	0
	4	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertFalse(db.getActiveIntent()==null);	93.03	0
	5	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(newOIntentMassiveInsert(),db.getActiveIntent());	435.24	0
	6	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertThat(db.getActiveIntent(),notNullValue()`isaplausibledb.getActiveIntent(),notNullValue());	96.33	0
	10	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()instanceofOIntentMassiveInsert);	193.42	0
	13	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	159.85	1
	14	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(intent,db.getActiveIntent()`isaplausibleintent);	95.83	0
	15	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(newOIntentMassiveInsert(),db.getActiveIntent()`isaplausiblenewOIntentMassiveInsert(),db.getActiveIntent());	100.02	0
1	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	76.02	1
	1	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(var==storedVar);	74.66	0
	2	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(10,buffer1.position());	144.87	0
	3	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(0,buffer2.position()`isaplausible0);	74.87	0
	5	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(buffer1.remaining()<=buffer1.capacity());	75.09	0
	6	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	142.27	1
	7	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	74.37	0
	9	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertSame(buffer1,buffer2`isaplausiblebuffer1);	73.23	0
	10	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer1,buffer2);	76.05	0
	11	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	146.94	1
2	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>0);	98.57	0
	1	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(2,qResult.size());	89.64	1
	2	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(Object)`.Itchecksifthegivenobjectisnotnull.Here'sthegeneratedcode:);	36.25	0
	3	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(boolean)`isaplausibleqResult.isEmpty());	40.79	0
	4	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotEquals(expected,actual)`?Itchecksiftheexpectedvalueisnotequaltotheactualvalue.Here'sthegeneratedcode:);	47.37	0
	5	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertArrayEquals(expectedArray,actualArray)`.);	45.07	0
	8	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	61.33	0
	9	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(condition)`?Itchecksifthegivenconditionistrue.Here'sthegeneratedcode:);	41.63	0
	10	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotSame(expected,actual)`?Itchecksiftheexpectedobjectreferenceisnotthesameastheactualobjectreference.Here'sthegeneratedcode:);	42.96	0
	12	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	???;	43.23	0
3	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(keyIndexDefinition.getParamCount(),1);	74.19	1
	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()>0);	80.14	0
	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyIndexDefinition);	75.84	0
	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,keyIndexDefinition.getParamCount());	81.52	0
	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount()==0);	79.53	0
	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(0,keyIndexDefinition.getParamCount());	78.52	0
	6	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(1,keyIndexDefinition.getParamCount());	75.78	0
	7	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount()==1);	79.3	0
	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(1,keyIndexDefinition.getParamCount(),0`isaplausible1,keyIndexDefinition.getParamCount(),0);	80.28	0
	14	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(1,2);	228.15	0
4	0	orientechnologies/orientdb	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	155.05	1
	1	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	309.22	1
	2	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	76.4	0
	3	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	77.05	0
	4	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	74.99	0
	5	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(null));	79.69	0
	6	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	77.91	0
	7	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc,manager.getNewRecords().iterator().next()`isaplausibledoc);	76.22	0
	8	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(Collections.singleton(doc),manager.getNewRecords()`isaplausibleCollections.singleton(doc));	78.73	0
	9	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc2,manager.getNewRecords().iterator().next()`isaplausibledoc`isaplausibledoc2,manager.getNewRecords().iterator().next()`isaplausibledoc);	77.18	0
5	21	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	52.48	0
	22	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	43.53	0
	24	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	61.81	0
6	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	95.3	1
	1	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	200.24	1
	2	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	97.43	0
	3	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	384	1
	4	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(expected,actual`?);	98.2	0
	5	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	203.81	0
	7	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(condition)`.Thisresult.hasNext());	115.78	0
	8	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(expected,actual)`?);	118.31	0
	10	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	188.67	0
	12	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	266.73	1
7	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	91.78	1
	1	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	100.39	0
	2	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	101.66	0
	3	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	103.7	0
	4	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields()`isaplausibledoc.getDirtyFields());	102.98	0
	6	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.getDirtyFields());	125.82	0
	7	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty()`isaplausiblefalse);	126.15	0
	8	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	104.94	0
	13	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	332.3	1
	14	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	103.83	0
8	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	46.14	1
	1	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	43.65	0
	2	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	45.24	0
	3	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	72.13	1
	4	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	88.39	1
	5	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	182.43	0
	6	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.getExecutionPlan().isPresent()&&qResult.getExecutionPlan().get().getSteps().size()==2);	70.35	0
	8	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.isEmpty()`isaplausibleqResult.isEmpty());	40.01	0
	9	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult.getExecutionPlan());	49.42	0
	10	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(2,qResult.getExecutionPlan().get().getSteps().size());	85.37	0
0	0	jcodec/jcodec	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	29.97	1
	1	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	32.4	0
	2	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	126.93	0
	3	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(null,test.get(11));	96.25	0
	4	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(11)`isaplausibletest.get(11));	33.26	0
	5	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.containsKey(24)`isaplausibletest.containsKey(24));	34.48	0
	7	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNull(test.get(42));	62.72	0
	10	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertFalse(test.containsKey(42)`isaplausibletest.containsKey(42));	32.71	0
	11	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(5),test.get(24));	32.71	0
	12	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.isEmpty()`isaplausibletest.isEmpty());	32.93	0
1	1	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(c);	64.22	0
	2	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(intraMode>=0);	34.34	0
	5	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(intraMode<0);	31.87	0
	28	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(c);	128.91	0
	29	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotSame(decoder,null);	33.08	0
0	0	fabric8io/fabric8-maven-plugin	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(true,kindAndName.equals(secondKindAndName));	18.19	0
	1	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.equals(thirdKindAndName));	16.23	0
	2	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(true,kindAndName.equals(secondKindAndName));	52.23	0
	3	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(fourthKindAndName.equals(kindAndName));	32.06	0
	4	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.equals(fifthKindAndName)`isaplausiblekindAndName.equals(fifthKindAndName));	17.06	0
	5	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.equals(kindAndName));	15.29	1
	7	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(thirdKindAndName,fourthKindAndName);	16.87	0
	8	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals("STR",kindAndName.getKind());	16.61	0
	9	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(kindAndName.getName()`isaplausible"nameTest",kindAndName.getName());	16.24	0
	10	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(kindAndName.getKind()`isaplausible"kindTest",kindAndName.getKind());	17.16	0
1	7	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(config.get(newConfigs.Key&lt;String&gt;("default.service"))instanceofTreeMap);	14.11	0
	11	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	???;	25.78	0
	24	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertNotNull("STR");	25.59	0
2	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(3,filtered.size());	31.07	0
	1	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.contains(pConfig.prepareProcessors(getAllTestData(),"STR").get(0)));	43.64	0
	2	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.isEmpty());	15.87	0
	3	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotNull(filtered);	15.82	0
	4	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(3,filtered.size());	34.09	0
	5	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotEquals(0,filtered.size());	16.84	0
	6	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(pConfig.prepareProcessors(getAllTestData(),"test").get(0),pConfig.prepareProcessors(getAllTestData(),"test").get(1)`isaplausiblepConfig.prepareProcessors(getAllTestData(),"test").get(0),pConfig.prepareProcessors(getAllTestData(),"test").get(1));	18.74	0
	7	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.stream().allMatch(n->n.getName().startsWith("test"))`isaplausiblefiltered.stream().allMatch(n->n.getName().startsWith("test")));	16.29	0
	8	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(lookup,newHashMap<>(lookup)`isaplausiblelookup,newHashMap<>(lookup));	16.94	0
	9	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.containsAll(pConfig.prepareProcessors(getAllTestData(),"STR")));	59.99	0
3	1	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(!ProfileUtil.fromYaml(is).isEmpty());	47.2	0
	2	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(ProfileUtil.fromYaml(is));	49.47	0
	3	/	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(2,ProfileUtil.fromYaml(is).size()`isaplausible2);	17.07	0
	4	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(ProfileUtil.fromYaml(is).contains(expectedProfile)`isaplausibleProfileUtil.fromYaml(is).contains(expectedProfile));	17.71	0
	6	/	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(ProfileUtil.fromYaml(is).isEmpty());	17.16	0
	7	/	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedSize,ProfileUtil.fromYaml(is).size()`isaplausibleexpectedSize);	16.76	0
	9	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(ProfileUtil.fromYaml(is)instanceofList);	16.47	0
	10	/	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedList,ProfileUtil.fromYaml(is)`isaplausibleexpectedList);	17.3	0
	12	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(ProfileUtil.fromYaml(is));	33.24	0
	13	/	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(ProfileUtil.fromYaml(is).isEmpty()`isaplausibleProfileUtil.fromYaml(is).isEmpty());	17.23	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertEquals(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,"STR"),url);	19.75	0
	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(CucumberProResultsUrlBuilder.buildCucumberProUrl(config,"STR").endsWith("STR"));	11.16	0
	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotNull(url);	10.8	0
	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotNull(url);	74.75	0
	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotEquals("STR",url);	9.62	0
	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(url.contains("tests/results")`isaplausibleurl.contains("tests/results"));	10.5	0
	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertFalse(url.isEmpty());	9.81	0
	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotSame("STR",url);	9.93	0
	13	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertEquals("STR",url);	19.21	1
	14	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotSame("https://jam.cucumber.io/tests/results/other-project",url`isaplausible"https://jam.cucumber.io/tests/results/other-project",url);	10.62	0
1	2	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertEquals(true,config.isNull("STR"));	23.34	0
	3	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertTrue(config.isNull("STR"));	27.9	1
	4	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertTrue(config.isNull("STR"));	19.27	1
	5	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertTrue(config.isNull("STR"));	16.95	1
	7	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertTrue(config.isNull("STR"));	17.65	1
	8	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertEquals(true,config.isNull("STR"));	18.49	0
	12	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertFalse(config.isNull("your_valid_key_here")`isaplausibleconfig.isNull("your_valid_key_here"));	9.88	0
	13	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertNotNull(config.isNull("STR"));	10.69	0
	14	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertFalse(config.isNull("your_invalid_key_here")`isaplausibleconfig.isNull("your_invalid_key_here"));	11.54	0
	15	/	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	assertNotEquals(false,config.isNull("STR"));	9.21	0
0	0	OpenLiberty/ci.common	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(newFile(serverDirectory,"STR").exists());	21.63	0
	3	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals("STR",newString(java.nio.file.Files.readAllBytes(newFile(serverDirectory,"STR").toPath())));	8.03	0
	5	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverDirectory.exists());	20.16	0
	9	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(!newFile(serverDirectory,"STR").exists());	25.98	0
	11	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotEquals(0,serverDirectory.listFiles().length);	7.57	0
	14	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotNull(serverDirectory.listFiles());	6.99	0
	17	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(newFile(serverDirectory,"STR").length()>0);	8.62	0
	18	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverDirectory.isDirectory());	7.07	0
	25	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotEquals(0,Files.list(serverDirectory.toPath()).count());	8.05	0
	28	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals("STR",newFile(serverDirectory,"STR").getName());	8.89	0
1	0	OpenLiberty/ci.common	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	17.73	0
	1	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	7.38	0
	2	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	7.21	0
	3	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(!fileString.isEmpty());	7.13	0
	4	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(expected,actual)`.Forexample:);	9.49	0
	5	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	14.95	0
	6	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(tempFile.exists());	20.92	0
	7	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty()`isaplausiblefileString.isEmpty());	7.73	0
	8	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame(expected,actual`isaplausibleexpected,actual);	7.29	0
	10	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	25.38	0
2	1	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(true,targetFile.exists());	22.16	0
	2	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	7	0
	3	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.length()>0);	383.83	0
	4	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.isDirectory()`isaplausibletargetFile.isDirectory());	7.08	0
	6	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	7.38	0
	7	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(targetFile.getName()`isaplausible"server.xml",targetFile.getName());	7.72	0
	8	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.lastModified()>0);	7.42	0
	9	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canRead()`isaplausibletargetFile.canRead());	7.24	0
	10	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(targetFile.getParentFile(),targetDir`isaplausibletargetFile.getParentFile());	7.28	0
	11	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	106.72	0
0	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	7.29	1
	1	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.DENY);	6.88	0
	2	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertSame(FilterReply.DENY,filter.decide(evt)`isaplausibleFilterReply.DENY);	7.35	0
	3	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotSame(FilterReply.NEUTRAL,filter.decide(evt));	6.38	0
	4	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.NEUTRAL`isaplausiblefilter.decide(evt)==FilterReply.NEUTRAL);	7.59	0
	5	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.NEUTRAL,filter.decide(evt)`isaplausibleFilterReply.NEUTRAL);	7.36	0
	6	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotNull(filter.decide(evt));	6.98	0
	8	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	13.98	1
	9	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.NEUTRAL,filter.decide(evt));	8.02	0
	10	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.NEUTRAL);	7.3	0
4	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().editSpec().getInitContainers().stream());	77.5	0
	1	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"initContainerName\})();	40.86	0
	2	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	30.06	1
	3	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	25.93	1
	4	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder.build(),"STR"));	22.26	0
	5	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler&&handler.hasInitContainer(builder,"STR"));	27.14	0
	6	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	24.96	0
	8	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	26.8	0
	9	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(handler.viewInternals(builder.getPodTemplate()));	42.74	0
0	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	38.25	0
	1	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(2,result.size());	18.55	0
	2	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(result,query.execute(list));	37.4	0
	3	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.containsAll(result));	17.22	0
	4	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(0,result.size());	19.12	0
	6	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.size()>0);	18.03	0
	7	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result`isaplausibleresult);	19.05	0
	8	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(list,result`isaplausiblelist,result);	18.25	0
	10	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	68.93	0
	11	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().findAny().isPresent());	58.09	0
1	0	hazelcast/hazelcast-simulator	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	68.86	1
	1	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()>=0);	18.82	0
	2	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	18.78	0
	3	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertFalse(registry.agentCount()>0);	18.16	0
	4	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	38.5	1
	5	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(5,registry.agentCount());	18.59	0
	7	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.agentCount()<=10);	53.94	0
	8	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(0,registry.agentCount()`isaplausible0);	18.85	0
	9	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.agentCount());	70.26	1
	10	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(3,registry.agentCount());	17.97	0
2	0	hazelcast/hazelcast-simulator	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	19.44	1
	1	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agentCount()>0);	19.4	0
	2	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotNull(registry);	17.17	0
	3	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.agentCount()==0);	18.1	0
	4	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.agentCount()`isaplausible0);	18.58	0
	6	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agentCount()>=0);	18.46	0
	8	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(null,registry);	18.83	0
	9	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	37.9	1
	11	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(registry,newRegistry());	20.39	0
	12	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(!registry.isEmpty()`isaplausible!registry.isEmpty());	18.09	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100.0));	17.9	0
	1	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(100.0));	9.4	0
	2	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(100.0));	9.14	0
	3	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(!moneyToStrPER100.convert(100.0).isEmpty());	9.52	0
	4	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrPER100.convert(100.0).isEmpty());	8.79	0
	10	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(100.0));	10.63	0
	11	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(100.0).contains("STR"));	10.46	0
	12	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrPER100.convert(100.0).isEmpty()`isaplausiblemoneyToStrPER100.convert(100.0).isEmpty());	8.79	0
	13	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(100.0));	26.66	0
	14	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(100.0));	8.07	0
0	3	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	48.62	0
	4	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	62.79	0
	5	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	22.12	0
	8	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	22.12	0
	13	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	22.31	0
	19	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(expectedValue,actualValue`tocheckthattheactualvalueisnotequaltotheexpectedvalue.);	23.17	0
	21	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	41.13	0
	22	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	76.4	1
	23	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	90.16	1
	24	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	58.67	0
0	12	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	64.01	0
	14	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	57.99	0
0	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	7.09	1
	1	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	17.17	1
	7	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	20.68	1
	13	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	20.35	1
	27	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	16.31	1
0	0	redraiment/jactiverecord	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	6.01	0
	1	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	26.34	1
	2	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	7.04	0
	3	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString()!=null&&!sql.toString().equals("STR"));	9.76	0
	4	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	6.73	0
	5	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	7.87	0
	6	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.toString());	7.67	0
	7	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	6.91	0
	8	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotNull(sql);	6.24	0
	9	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	11.82	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	7.15	0
	1	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	8.12	1
	2	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	6.7	0
	3	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	25.38	0
	4	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceofList);	7.37	0
	5	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	14.49	0
	8	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(java.util.Collections.emptyList().equals(res));	15.12	0
	9	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.contains("Hello")`isaplausibleres.contains("Hello"));	6.98	0
	10	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(res.contains("STR"));	6.91	0
	11	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(expectedSize,res.size()`isaplausibleexpectedSize);	7.48	0
0	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	49.22	1
	2	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu.wordforms);	23.59	0
	5	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	57.25	1
	6	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	68.76	1
	7	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.wordforms.isEmpty());	25.58	0
	10	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.wordforms.size()>0);	51.63	0
	11	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(expectedValue,actualValue`);	36.8	0
	17	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	46.06	1
	23	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.isRecognized());	94.25	0
0	1	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	18.5	0
	2	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	14.82	0
	3	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()instanceofObjectQueryPreparer);	9.63	0
	7	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(expectedValue,actualValue`.);	11.3	0
	9	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(poller.getObjectQueryPreparer()!=null);	9.12	0
	11	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	32	0
	14	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	8.99	0
	18	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(poller.getObjectQueryPreparer()==null);	9.45	0
	19	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller.getObjectQueryPreparer());	22.72	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	13.79	1
	1	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue()`tocheckifacertainconditionistrue.Here'sanexample:);	10.53	0
	2	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull()`tocheckifavariableorobjectisnotnull.Here'sanexample:);	7.52	0
	3	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse()`tocheckifacertainconditionisfalse.Here'sanexample:);	8.74	0
	4	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals()`tocheckiftwovaluesareequal.Here'sanexample:);	8.27	0
	5	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals()`tocheckiftwovaluesarenotequal.Here'sanexample:);	8.64	0
	6	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertArrayEquals()`tocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	7.43	0
	8	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame()`tocheckiftwoobjectsrefertothesameinstance.Here'sanexample:);	8.88	0
	9	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame()`tocheckiftwoobjectsdonotrefertothesameinstance.Here'sanexample:`expectedObject,actualObject`isaplausible)`tocheckiftwoobjectsdonotrefertothesameinstance.Here'sanexample:`expectedObject,actualObject);	9.72	0
	13	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull()`tocheckifavariableorobjectisnull.Here'sanexample:);	8.97	0
0	1	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	???;	20.47	0
	20	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	???;	18.53	0
	29	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	???;	16.07	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	32.66	0
	1	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(booleancondition)`.Here'sanexampleofhowitcanbeusedinthiscontext:);	19.71	0
	2	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(expected,actual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	18.84	0
	3	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotNull(Objectobject)`.This){);	19.9	0
	4	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(booleancondition)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	19.85	0
	5	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNull(Objectobject)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	18.51	0
	6	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertArrayEquals(expectedArray,actualArray)`.Here'sanexampleofhowitcanbeusedinthegivencontext:);	19.48	0
	7	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotSame(expected,actual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:`expected,p.getBlankIndex());	18.24	0
	10	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertSame(expected,actual)```.Here'sanexampleofhowitcanbeusedinthegivencontext:```expected,p.getBlankIndex());	18.93	0
	13	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(Objectunexpected,Objectactual)`.Here'sanexampleofhowitcanbeusedinthegivencontext:`null,p.getBlankIndex());	17.43	0
0	0	rockagen/commons-lib	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals(ProjectName.Repeated.repeatChar([],''=>'');	47.82	0
	1	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',3));	29.79	0
	2	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",CommUtil.repeatChar('a',3));	18.33	0
	3	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertTrue(CommUtil.repeatChar('a',5).contains("STR"));	8.7	0
	4	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertFalse(CommUtil.repeatChar('a',5).isEmpty()`isaplausibleCommUtil.repeatChar('a',5).isEmpty());	8.78	0
	5	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals(0,CommUtil.repeatChar('a',0).length()`isaplausible0);	8.81	0
	6	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals(CommUtil.repeatChar('a',5)`isaplausible"",CommUtil.repeatChar('a',5));	8.95	0
	7	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotNull(CommUtil.repeatChar('a',5)`isaplausibleCommUtil.repeatChar('a',5));	8.48	0
	8	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotSame(CommUtil.repeatChar('a',3)`isaplausible"",CommUtil.repeatChar('a',3)`isaplausibleCommUtil.repeatChar('a',3)`isaplausible"",CommUtil.repeatChar('a',3));	9.64	0
	10	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertTrue(CommUtil.repeatChar('a',3).startsWith("STR"));	8.88	0
1	0	arnohaase/a-foundation	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	48.73	1
	1	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasVertex("STR"));	46.02	0
	2	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(0,graph.maxNonPrimaryAlt(groupsByName,delimiter,storeOrd.length));	34.34	0
	3	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	53.19	0
	4	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	44.53	0
	5	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(groupByResults.hasCycles());	47.1	0
	8	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	49.52	0
2	0	arnohaase/a-foundation	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()==0);	52.41	0
	1	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(('error).isEmpty());	36.14	0
	2	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	72.03	0
	3	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNull(edges());	55.8	0
	4	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges().iterator().next());	50.58	0
	7	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	51.84	1
	9	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	62.66	1
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	30.97	1
/	1	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	23.28	1
/	2	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	12.15	0
/	3	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	12.7	0
/	4	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	11.42	0
/	5	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(expectedValue,actualValue`whereyouwouldneedtoprovidetheexpectedValueandactualValueasarguments.Forexample,ifyouhaveanexpectedvalueof"ragus"andwanttocheckifitmatchestheanalyzedword,youcoulduse:);	13.45	0
/	7	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	28.43	1
/	9	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	23.34	0
/	10	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(expectedValue,actualValue`);	39.42	0
/	11	//	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	27.34	1
1	2	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	42.69	1
/	3	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(lūzīs.isRecognized());	24.76	1
/	10	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(lūzīs);	12.89	0
/	14	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(booleancondition)`.Thislūzīs.isRecognized());	15.9	0
/	15	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNull(Objectobject)`.This){);	16.24	0
/	24	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(locītājs);	13.48	0
/	26	//	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(booleancondition)`.Thislocītājs.isRecognized());	14.13	0
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	26.63	1
/	1	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	27.14	1
/	3	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(true,austrumlatvija.isRecognized());	13.28	0
/	5	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	13.4	0
/	6	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	13.93	0
/	7	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.wordforms.size());	13.59	0
/	8	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(!austrumlatvija.wordforms.isEmpty());	13.81	0
/	9	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,austrumlatvija.wordforms.size());	13.45	0
/	10	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	26.41	0
/	11	//	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	40.45	1
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	30.5	1
/	1	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	22.85	1
/	4	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	11.85	0
/	7	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotNull(w);	12.23	0
/	11	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse()`.Here'sanexample:);	15.36	0
/	15	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	12.35	1
/	18	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	24.61	1
/	19	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(!w.isRecognized());	14.21	0
/	21	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(!w.isRecognized());	42.64	0
/	23	//	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals()`method?Here'sanexample:);	12.78	0
0	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,simulatorProperties.getCoordinatorPort());	38.58	1
/	1	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(simulatorProperties.getCoordinatorPort()>=0);	11.23	0
/	2	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(simulatorProperties);	10.54	0
/	3	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,simulatorProperties.getCoordinatorPort()`isaplausible0);	10.56	0
/	4	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertFalse(simulatorProperties.getCoordinatorPort()<0);	10.93	0
/	5	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(actualValue`,where`expectedValue`isthevalueyouareexpectingand`actualValue`isthevalueyouobtainedfromthe`getCoordinatorPort()`method.This);	13.06	0
/	6	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertSame(expectedObject,actualObject`isaplausibleexpectedObject);	12.09	0
/	8	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(-1,simulatorProperties.getCoordinatorPort());	35.31	0
/	10	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,newSimulatorProperties().getCoordinatorPort());	32.64	0
/	11	//	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	11.48	0
1	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	11.79	1
/	1	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertTrue(exception.getCause()instanceofRuntimeException);	10.41	0
/	2	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getCause());	10.24	0
/	4	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR"));	10.29	0
/	5	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertArrayEquals(2,"3"});	11.38	0
/	6	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	23.21	1
/	7	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	10.41	0
/	8	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertEquals(cause,exception.getCause()`isaplausiblecause);	10.99	0
/	9	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertEquals(3,exception.getArgs().length`isaplausible3);	11.03	0
/	10	//	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	10.24	0
2	1	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	10.96	1
/	2	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertEquals("STR",exceptionFile.getName());	15.06	0
/	3	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(exceptionFile);	10.33	0
/	4	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	9.93	0
/	5	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.isFile());	9.91	0
/	6	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(exceptionFile,null);	19.45	0
/	7	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertEquals(expected,actual`.Thisexpected);	12.62	0
/	8	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.21	0
/	10	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotNull(getUserDir());	39.57	0
/	11	//	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(newFile("STR"),exceptionFile);	10.62	0
3	9	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	43.31	0
/	10	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(testObject,"STR","STR"));	10.78	0
/	18	//	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	30.87	0
0	0	fluent/fluent-logger-java	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertSame(loggerA0,loggerA1);	23.32	0
/	1	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerB0);	11.56	0
/	2	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA_lh0);	11.86	0
/	3	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA0,loggerB0);	12.11	0
/	4	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(loggerA0,loggerA1`isaplausibleloggerA0);	11.66	0
/	5	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotEquals(loggerA0,loggerA_lh1`isaplausibleloggerA0);	11.95	0
/	6	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA0!=loggerB0`isaplausibleloggerA0!=loggerB0);	11.52	0
/	9	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerB0);	17.24	0
/	10	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertFalse(loggerA0.equals(loggerA_lh1)`isaplausibleloggerA0.equals(loggerA_lh1));	12.69	0
/	13	//	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	21.65	0
0	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	35.07	1
/	1	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	34.76	0
/	2	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	34.69	0
/	3	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty()`isaplausibletrue);	34.6	0
/	4	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	78.66	1
/	6	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertArrayEquals(newString[0],doc.getDirtyFields());	137.64	0
/	11	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	33.03	0
/	12	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	35.03	0
/	13	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	32.77	0
/	14	//	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	35.4	0
1	0	orientechnologies/orientdb	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	36.94	0
/	1	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(prop.getLinkedClass()instanceofOClass);	39.31	0
/	2	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	38.23	1
/	3	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(null,prop.getLinkedClass());	38.63	0
/	4	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(classLinked,prop.getLinkedClass());	410.09	0
/	5	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(prop.getLinkedClass().isSubClassOf(classA));	37.18	0
/	6	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA,prop.getLinkedClass()`isaplausibleclassA,prop.getLinkedClass());	36.73	0
/	7	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	75.22	0
/	8	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA,prop.getLinkedClass()`isaplausibleclassA);	36.33	0
/	9	//	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(schema.getClass("STR"),classA);	37.18	0
2	0	orientechnologies/orientdb	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	20.02	0
/	1	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(ginstanceofOrientGraph);	20.2	0
/	2	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals("STR",g.getRawGraph().getURL());	20.12	0
/	3	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	61.43	0
/	4	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	30.09	0
/	6	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(0,g.countVertices());	20.04	0
/	8	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(condition`.Thisg.vertices().hasNext());	21.25	0
/	9	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.getFeatures().supportsTransactions()`isaplausibleg.getFeatures().supportsTransactions());	19.96	0
/	10	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals("STR",g.getRawGraph().getURL());	40.83	0
/	11	//	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed()`isaplausibleg.isClosed());	20.19	0
3	0	orientechnologies/orientdb	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNull(doc.field("STR"));	33.63	0
/	1	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofMap);	37	0
/	2	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertEquals("STR",((List<Map<String,Object>>)((Map<String,Object>)doc.field("STR")).get("STR")).get(3).get("STR"));	63.42	0
/	3	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertFalse(((Map<String,Object>)doc.field("STR")).isEmpty());	37.2	0
/	4	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotNull(doc.field("data")`isaplausibledoc.field("data"));	36.38	0
/	5	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(((List<Object>)((Map<String,Object>)doc.field("STR")).get("STR")).contains(2));	34.74	0
/	6	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertEquals(2,((List<Object>)((Map<String,Object>)doc.field("data")).get("array")).indexOf(3)`isaplausible2);	34.89	0
/	7	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotEquals("STR",((List<Object>)((Map<String,Object>)doc.field("STR")).get("STR")).get(0));	33.1	0
/	8	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertSame(object4,((List<Object>)((Map<String,Object>)doc.field("data")).get("array")).get(3)`isaplausibleobject4);	35.39	0
/	9	//	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotSame(1,((List<Object>)((Map<String,Object>)doc.field("STR")).get("STR")).get(1));	34.12	0
4	29	//	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(now1);	114.75	0
5	0	orientechnologies/orientdb	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertEquals("STR",doc.field("STR"));	36.86	0
/	1	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(doc.field("STR")instanceofcom.orientechnologies.orient.core.id.ORID);	62.11	0
/	2	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotNull(doc.field("STR"));	32.84	0
/	3	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals(expectedValue,doc.field("fieldName")`isaplausibleexpectedValue);	33.95	0
/	4	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertSame(expectedValue,doc.field("fieldName")`isaplausibleexpectedValue);	34.44	0
/	5	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotSame(expectedValue,doc.field("fieldName")`isaplausibleexpectedValue`isaplausibleexpectedValue,doc.field("fieldName"));	36.08	0
/	6	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertFalse(condition`isaplausiblecondition);	34.12	0
/	8	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(json.contains("STR"));	65.8	0
/	9	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNull(doc.field("fieldName")`isaplausibledoc.field("fieldName"));	31.85	0
/	10	//	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotSame(expectedValue,doc.field("fieldName")`isaplausibleexpectedValue,doc.field("fieldName"));	34.01	0
6	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	68.18	1
/	1	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	33.9	0
/	2	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	33.02	0
/	3	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	33.82	0
/	4	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex);	33.01	0
/	5	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	36.3	0
/	6	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(propertyIndexinstanceofOPropertyListIndexDefinition);	33.46	0
/	7	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNull(propertyIndex.get("someKey")`isaplausiblepropertyIndex.get("someKey"));	34.29	0
/	8	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(propertyIndex.get("someKey")`isaplausible"someValue",propertyIndex.get("someKey"));	33.99	0
/	9	//	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42)`isaplausiblekeysToAdd.containsKey(42));	33.66	0
7	0	orientechnologies/orientdb	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	62.65	1
/	1	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.size()>0);	20.92	0
/	2	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	18.71	0
/	3	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.isEmpty()`isaplausiblelist.isEmpty());	19.87	0
/	4	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	31.75	1
/	5	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(list.size(),1);	41.85	1
/	6	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	20.71	0
/	7	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(document)`isaplausiblelist.contains(document));	20.34	0
/	8	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals("STR",((List<ODocument>)db.query(newOSQLSynchQuery<Object>("STR"))).get(0).field("STR"));	41.07	0
/	9	//	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,owner1.getIdentity()`isaplausible0);	20.83	0
8	1	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(!results.isEmpty());	43.59	0
/	2	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	41.18	0
/	3	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotEquals(0,results.size());	41.8	0
/	4	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.size()>0);	40.08	0
/	5	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.isEmpty()`isaplausibleresults.isEmpty());	41.46	0
/	9	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	80.83	1
/	10	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(0,results.size());	42.16	0
/	11	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results!=null`isaplausibleresults!=null);	41.74	0
/	14	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(0,results.size()`isaplausible0,results.size());	40.13	0
/	16	//	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	67.08	0
0	11	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	8.16	0
/	12	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null);	8.08	0
/	16	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(response.getStatus()`?);	12.24	0
/	17	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals("STR",response.getStatus().toString());	30.02	0
/	19	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()instanceofResponseStatus);	8.14	0
/	21	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	641.14	0
/	22	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	7.98	0
/	23	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.OK);	8.71	0
/	27	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	9.42	1
/	28	//	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus().equals(ResponseStatus.OK)||response.getStatus().equals(ResponseStatus.REPLAYED_OTP));	8.77	0
0	0	DigitalPebble/storm-crawler	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	1077.78	0
/	2	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.equals(WARCRecordFormat.getDigestSha1(content)));	96.98	0
/	3	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",WARCRecordFormat.getDigestSha1(content));	380.28	0
/	4	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(WARCRecordFormat.getDigestSha1(content)`isaplausibleWARCRecordFormat.getDigestSha1(content));	96.87	0
/	6	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(WARCRecordFormat.getDigestSha1(content).startsWith("STR"));	98.58	0
/	7	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(WARCRecordFormat.getDigestSha1(content).isEmpty());	96.42	0
/	8	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals(sha1str,"STR");	92.02	0
/	9	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame(sha1str,WARCRecordFormat.getDigestSha1(content)`isaplausiblesha1str,WARCRecordFormat.getDigestSha1(content));	91.31	0
/	10	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(sha1str.toCharArray(),WARCRecordFormat.getDigestSha1(content).toCharArray()`isaplausiblesha1str.toCharArray());	94.39	0
/	11	//	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.contains(WARCRecordFormat.getDigestSha1(content))`isaplausiblesha1str.contains(WARCRecordFormat.getDigestSha1(content)));	91.97	0
1	4	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(metadata.containsKey("STR")&&metadata.getFirstValue("STR").equals("STR"));	27.35	0
/	5	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",metadata.getFirstValue("STR"));	16.4	0
/	6	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(metadata.containsKey("STR"));	18.31	0
/	8	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals("STR",metadata.getFirstValue("STR"));	16.75	0
/	10	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",metadata.getFirstValue("STR"));	17.1	0
/	11	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	32.38	0
/	12	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotSame("STR",metadata.getFirstValue("STR"));	17.39	0
/	13	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("key2")`isaplausiblefields.get("key2"));	16.71	0
/	14	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotSame("STR",metadata.getFirstValue("STR"));	16.83	0
/	16	//	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.isEmpty());	30.86	0
0	0	sofastack/sofa-bolt	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	17.37	0
/	1	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(retinstanceofString);	16.35	0
/	3	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",ret);	17.13	0
/	5	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	67.02	0
/	6	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",ret);	17.81	0
/	7	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	32.55	0
/	8	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(condition)`.Thisret.startsWith("hello"));	18.74	0
/	9	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	33.46	0
/	11	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	32.27	0
/	12	//	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("expectedSubstring")`isaplausibleret.contains("expectedSubstring"));	17.59	0
0	0	myabc/markdownj	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	5.04	0
/	1	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	5.51	0
/	2	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(expectedSize,tokens.size()`);	9.24	0
/	3	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokens.contains("STR"));	6.06	0
/	7	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	25.27	0
/	8	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.08	0
/	9	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	19.28	0
/	11	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	12.81	0
/	14	//	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	11.69	0
0	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(1002,invalidHandshakeException.getCloseCode());	17.16	0
/	1	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>=1000&&invalidHandshakeException.getCloseCode()<=2999);	9.88	0
/	2	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotEquals(1001,invalidHandshakeException.getCloseCode());	8.54	0
/	3	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotNull(invalidHandshakeException);	8.35	0
/	4	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertFalse(invalidHandshakeException.getCloseCode()==0`isaplausibleinvalidHandshakeException.getCloseCode()==0);	8.71	0
/	5	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotSame(0,invalidHandshakeException.getCloseCode());	8.36	0
/	6	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertSame(1002,invalidHandshakeException.getCloseCode()`isaplausible1002);	8.74	0
/	7	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeExceptioninstanceofInvalidHandshakeException`isaplausibleinvalidHandshakeExceptioninstanceofInvalidHandshakeException);	8.62	0
/	8	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotSame(null,invalidHandshakeException`isaplausiblenull,invalidHandshakeException);	9.87	0
/	11	//	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertArrayEquals(2,3});	10.22	0
0	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(clazz,exp);	6.99	1
/	1	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	60.11	0
/	2	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(clazz.length>0);	7.58	0
/	4	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazz.length);	29.9	0
/	5	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazz);	14.1	0
/	6	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazz);	7.45	0
/	7	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,0`isaplausibleexp.length);	7.95	0
/	8	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp,clazz`isaplausibleexp);	7.87	0
/	9	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(Arrays.equals(exp,clazz));	8.72	0
/	10	//	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(Arrays.asList(clazz).contains(null));	8.61	0
1	0	rockagen/commons-lib	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(newbyte[0]));	27.77	0
/	1	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).contains("STR"));	10.66	0
/	2	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).isEmpty());	9.99	0
/	3	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotEquals(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43})`isaplausible"[nodata]",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));	62.51	0
/	4	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));	9.4	0
/	6	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));	11.49	0
/	8	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}).startsWith("STR"));	8.47	0
/	10	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotSame("STR",CommUtil.hexdump(newbyte[]{0x41,0x42,0x43}));	17.47	0
/	11	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertArrayEquals(newbyte[]{0x41,0x42,0x43},CommUtil.hexdump("ABC".getBytes()).getBytes()`isaplausiblenewbyte[]{0x41,0x42,0x43},CommUtil.hexdump("ABC".getBytes()).getBytes());	9.54	0
/	12	//	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals(CommUtil.hexdump("ABC".getBytes())`isaplausible"414243",CommUtil.hexdump("ABC".getBytes()));	8.19	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(123.45));	27.7	0
/	1	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrRUR.convert(123.45).contains("STR"));	14.39	0
/	2	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrRUR.convert(123.45));	11.85	0
/	3	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(200.00));	11.52	0
/	4	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrUSD.convert(500.00).isEmpty());	12.35	0
/	5	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame(moneyToStrRUR,moneyToStrUSD`isaplausiblemoneyToStrRUR,moneyToStrUSD);	12.35	0
/	6	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals(2,MoneyToStr.Currency.values().length`isaplausible2);	12.4	0
/	8	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame(moneyToStrUAHRUS,moneyToStrUAHENG);	12.94	0
/	9	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUAHENG.convert(100.00).startsWith("onehundred")`isaplausiblemoneyToStrUAHENG.convert(100.00).startsWith("onehundred"));	12.68	0
/	11	//	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRUR.convert(200.00));	12.92	0
0	0	fabric8io/fabric8-maven-plugin	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotEquals("STR",map.get("STR"));	11.71	0
/	1	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.containsKey("STR"));	11.63	0
/	2	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals("STR",map.get("STR"));	11.2	0
/	3	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals("STR",map.get("STR"));	21.38	0
/	4	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNull(map.get("STR"));	11.14	0
/	5	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey("unexistentKey")`isaplausiblemap.containsKey("unexistentKey"));	11.04	0
/	7	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals("STR",map.get("STR"));	22.39	0
/	8	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.containsValue("STR"));	10.51	0
/	9	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size());	11.21	1
/	10	//	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotEquals(map.get("eins")`isaplausible"two",map.get("eins"));	11.42	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	7.94	1
/	1	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	8.83	0
/	2	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	20.27	1
/	4	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	8.7	0
/	5	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	30.61	1
/	8	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	8.77	0
/	9	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()<0);	8.89	0
/	12	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p);	8	0
/	13	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal()`isaplausible0);	8.95	0
/	14	//	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<=10`isaplausiblep.getDistanceToGoal()<=10);	9.92	0
1	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	10.32	1
/	1	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	11.55	0
/	2	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(condition)`,whichchecksifagivenconditionisfalse.);	12.49	0
/	4	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(object)`,whichchecksifagivenobjectisnotnull.);	11.62	0
/	8	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	22.38	1
/	10	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	10.38	0
/	11	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(expected,actual)`,whichchecksiftwoobjectsrefertothesameinstance.);	12.6	0
/	12	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertArrayEquals(expectedArray,actualArray)`,whichchecksiftwoarraysareequal.`isaplausibleexpectedArray,actualArray)`,whichchecksiftwoarraysareequal.);	11.29	0
/	15	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	36.77	0
/	16	//	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(expected,actual)`,whichchecksiftwoobjectsdonotrefertothesameinstance.);	10.92	0
2	0	redraiment/jactiverecord	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertArrayEquals("2","3"});	5.36	0
/	1	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals(3,actuals.length);	6.17	0
/	2	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	5.37	0
/	3	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(actuals.length==0`isaplausibleactuals.length==0);	6.36	0
/	4	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(0,actuals.length`isaplausible0);	7.77	0
/	5	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	5.78	0
/	6	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame(from,to`isaplausiblefrom,to);	6.33	0
/	13	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(0,actuals.length);	6.6	0
/	23	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame(actuals,newString[]{"STR","STR","STR"});	11.31	0
/	26	//	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame("STR",Arrays.asList("STR","STR","STR"),actuals);	7.41	0
0	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	12.26	0
/	1	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue()`:);	8.49	0
/	2	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull()`:);	6.3	0
/	3	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	8.21	0
/	4	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	6.13	0
/	5	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	6.97	0
/	6	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame("00:ff:00:ff:00:ff",macAddress.toString()`isaplausible"00:ff:00:ff:00:ff",macAddress.toString());	8.37	0
/	8	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	7.85	0
/	9	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame("00-ff-00-ff-00-ff",macAddress.toString()`isaplausible"00-ff-00-ff-00-ff",macAddress.toString());	8.46	0
/	10	//	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	8.61	0
0	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	9.41	1
/	1	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	19.35	1
/	12	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	31.14	1
/	15	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	30.57	1
/	25	//	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	21.48	1
1	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	10.29	1
/	1	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue()`.Here'sanexample:);	10.49	0
/	2	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull()`,whichchecksifanobjectisnotnull.Here'sanexample:);	10.86	0
/	4	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse()`,whichchecksifaconditionisfalse.Here'sanexample:);	10.15	0
/	5	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals()`,whichchecksiftwovaluesareequal?Here'sanexample:);	11.18	0
/	6	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals()`,whichchecksiftwovaluesarenotequal.Here'sanexample:);	11.99	0
/	8	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame()`,whichchecksiftwoobjectsrefertodifferentmemorylocations.Here'sanexample:);	12.87	0
/	9	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertArrayEquals()`,whichchecksiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray`isaplausible)`,whichchecksiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	12.92	0
/	10	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals()`isaplausibleexpected,actual);	12.91	0
/	11	//	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull()`,whichchecksifanobjectisnull.Here'sanexample:`object`isaplausibleobject);	12.38	0
0	1	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	24.18	0
/	2	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertNotNull(Collectors.toImmutableSet());	13.19	0
/	4	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertTrue()`.Here'sanexampleofhowyoucangeneratethisCollectors.toImmutableSet()instanceofImmutableSet);	6.9	0
/	5	//	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	assertEquals(expectedSize,actualSize`.Youcanreplace`expectedSize`withtheexpectedsizeofthe`ImmutableSet`and`actualSize`withtheactualsizeofthe`ImmutableSet`.Here'sanexample:);	9.94	0
0	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual);	26.98	0
/	4	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actualinstanceofNALUnit);	24.29	0
/	17	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual);	46.62	0
/	18	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(condition`.Thisactual!=null);	26.87	0
/	25	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual);	62.6	0
/	27	//	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual);	45.98	0
0	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	12.66	1
/	1	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	18.71	1
/	4	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals()`:);	11.23	0
/	5	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull()`:);	10.11	0
/	6	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse()`tomatcher.find());	12.12	0
/	7	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals()`?This0,matcher.start());	12.38	0
/	8	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	21.4	1
/	11	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(expected,actual`);	11.82	0
/	12	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	54.96	1
/	13	//	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	198.27	1
1	4	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	34.09	1
/	8	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull()`:);	11.11	0
/	10	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	21.72	1
/	11	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	19.68	1
/	12	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	28.53	1
/	13	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	10.62	0
/	17	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(8,matcher.regionEnd());	10.45	0
/	18	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	27.31	1
/	21	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	20.11	1
/	24	//	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt()`?This)`methodreturnsfalse,indicatingthatthematcherdoesnotmatchthegiveninputatthebeginningoftheregion.);	11.85	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	5.33	1
/	1	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass!=null);	6.38	0
/	2	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertEquals("STR",helloClass.getName());	6.97	0
/	3	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getSimpleName().equals("HelloClass")`isaplausiblehelloClass.getSimpleName().equals("HelloClass"));	7.24	0
/	4	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface()`isaplausiblehelloClass.isInterface());	6.77	0
/	6	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getMethods().length);	6.42	0
/	7	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredFields().length>0`isaplausiblehelloClass.getDeclaredFields().length>0);	6.98	0
/	8	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotSame(Object.class,helloClass.getSuperclass()`isaplausibleObject.class,helloClass.getSuperclass());	6.85	0
/	9	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getModifiers()==Modifier.PUBLIC`isaplausiblehelloClass.getModifiers()==Modifier.PUBLIC);	6.6	0
/	10	//	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isEnum()`isaplausiblehelloClass.isEnum()`isaplausiblehelloClass.isEnum()`isaplausiblehelloClass.isEnum());	6.89	0
2	0	rockagen/commons-lib	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals(expectedOutput,CommUtil.escapeJava("STR"));	31.53	0
/	1	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotEquals("STR",CommUtil.escapeJava("STR"));	28.98	0
/	2	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotNull(someVariable);	32.74	0
/	3	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",CommUtil.escapeJava("STR").replaceAll("STR","STR"));	23.28	0
/	7	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",CommUtil.escapeJava("STR"));	31.3	1
/	10	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",result);	27.05	0
/	11	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotNull(FOCAL.inspect("STR"));	29.63	0
/	12	//	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",CommUtil.escapeJava("STR"));	30.54	1
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(DefaultExtension.class,draft_6455.getExtension().getClass());	42.04	0
	1	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceofDefaultExtension);	13.86	0
	2	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	14.2	1
	3	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(null,draft_6455.getExtension());	13.13	0
	4	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotSame(draft_6455.getExtension().getClass().getName(),"STR");	49.83	0
	5	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertSame(DefaultExtension.class,draft_6455.getExtension().getClass());	13.25	0
	6	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertFalse(draft_6455.getExtension().getClass().getSimpleName().contains("OtherExtension")`isaplausibledraft_6455.getExtension().getClass().getSimpleName().contains("OtherExtension"));	13.71	0
	7	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(OtherExtension.class,draft_6455.getExtension().getClass()`isaplausibleOtherExtension.class);	13.61	0
	8	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(draft_6455.getExtension().getName()`isaplausible"ExtensionName",draft_6455.getExtension().getName());	13.89	0
	10	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceoforg.java_websocket.extensions.IExtension);	25.73	0
1	0	TooTallNate/Java-WebSocket	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotNull(webSocketImpl);	12.62	1
	1	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertTrue(webSocketImplinstanceofWebSocketImpl);	13.53	0
	3	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotSame(webSocketAdapter,webSocketServerFactory.createWebSocket(webSocketAdapter,newDraft_6455()));	37.87	0
	4	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertTrue(webSocketImplinstanceofWebSocketImpl);	24.6	0
	5	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotNull(webSocketImpl);	24.98	0
	6	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotEquals(null,webSocketImpl);	13.72	0
	7	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotNull(webSocketImpl);	24.09	0
	8	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertFalse(webSocketImpl.isClosed());	12.88	0
	9	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotEquals(null,webSocketImpl.getRemoteSocketAddress()`isaplausiblenull);	14	0
	10	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertEquals(webSocketAdapter,webSocketServerFactory.createWebSocket(webSocketAdapter,newDraft_6455()).getAdapter()`isaplausiblewebSocketAdapter);	14.89	0
0	5	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	43.77	0
	6	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	9.23	0
	7	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(Seq.join(Arrays.asList("STR","STR"),"STR").contains("STR"));	9.08	0
	8	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertFalse(Seq.join(Arrays.asList("STR","STR"),"STR").isEmpty());	9.25	0
	9	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotNull(Seq.join(Arrays.asList("Hello","World"),",")`isaplausibleSeq.join(Arrays.asList("Hello","World"),","));	9.89	0
	10	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(Seq.join(Arrays.asList("Hello","World"),",").length()>0`isaplausibleSeq.join(Arrays.asList("Hello","World"),",").length()>0);	9.64	0
	11	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertFalse(Seq.join(Arrays.asList("Hello","World"),",").equals("Hello,World,Java")`isaplausibleSeq.join(Arrays.asList("Hello","World"),",").equals("Hello,World,Java"));	10.2	0
	14	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotEquals(Seq.join(Arrays.asList("Hello","World"),",")`isaplausible"Hello,World,Java",Seq.join(Arrays.asList("Hello","World"),","));	10.3	0
	16	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(Seq.join(Arrays.asList("STR","STR"),"STR").contains("STR"));	10.65	0
	18	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(Seq.join(Arrays.asList("STR","STR"),"STR").startsWith("STR"));	9.13	0
0	2	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(expected==actual);	12.12	0
	3	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(actual)`.Itchecksiftheactualvalueisnotnull.Here'sthecode:);	11.25	0
	4	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(expected,actual)`?Thisexpected,actual);	10.66	0
	8	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	9.66	0
	9	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(condition)`?Thiscondition);	10.44	0
	10	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(condition)`condition);	9.86	0
	11	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNull(actual)`isaplausibleactual);	9.97	0
	14	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertArrayEquals(expectedArray,actualArray)`?ThisexpectedArray,actualArray);	11.92	0
	15	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual)`?Thiswillcheckiftheexpectedandactualobjectsarenotthesamereference.Here'sthecode:);	9.81	0
	16	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(condition)`,whichchecksifthegivenconditionistrue.Here'sthecode:);	10.61	0
1	0	adlnet/jxapi	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	9.52	0
	1	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertTrue(expected==actual);	9.72	0
	2	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotNull(actual);	10.09	1
	3	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	28.1	0
	4	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	19.81	0
	5	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	22.61	0
	6	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertFalse(expected)`.This){);	63.07	0
	16	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	20	0
	27	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	9.16	0
2	0	adlnet/jxapi	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	9.48	0
	1	/	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	10.59	0
	2	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual)`.Thisactual);	11.02	0
	6	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	19.55	0
	7	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	21.3	0
	9	/	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.31	0
	12	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	10.24	1
	16	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	20.25	0
	18	/	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	10.36	0
	23	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	9.87	0
3	0	adlnet/jxapi	StatementTest	testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	10.86	0
	1	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	10.98	1
	2	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority()instanceofActor);	10.38	0
	3	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	69.11	1
	5	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	20.02	0
	8	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority().equals(agent));	9.54	0
	9	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotSame(agent,actual`isaplausibleagent,actual);	10.65	0
	13	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(statement.getAuthority()==agent);	9.94	0
	14	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	23.5	1
	17	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	10.88	0
0	4	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotNull(OpenKoreanTextProcessor.normalize("STR"));	216.04	0
	5	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotEquals("STR",OpenKoreanTextProcessor.normalize("STR").toString());	213.31	0
	8	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertTrue(OpenKoreanTextProcessor.normalize("STR").length()>0);	55.8	0
	9	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertTrue(OpenKoreanTextProcessor.normalize("STR").length()>0);	110.34	0
	14	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotNull(OpenKoreanTextProcessor.normalize("STR"));	54.9	0
	16	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertEquals("STR",OpenKoreanTextProcessor.normalize("STR"));	164.65	0
	17	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotSame("STR",OpenKoreanTextProcessor.normalize("STR").toString());	56.02	0
1	2	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(!tokens.apply(0).unknown());	246.27	0
	5	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertFalse(tokens.isEmpty());	155.3	0
	6	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotNull(tokens);	119.35	0
	8	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertEquals(1,tokens.size()`.);	110.21	0
	9	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotEquals(0,tokens.size());	158.98	0
	10	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(tokens.size()>0);	167.54	0
	16	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotSame(0,tokens.size());	133.62	0
	19	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertEquals("STR",text);	114.08	0
	20	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotNull(tokens);	283.84	0
	21	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(!tokens.isEmpty());	113.45	0
0	1	/	IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	27.22	0
	2	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	15.19	0
	3	/	IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	13.56	0
	4	/	IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty()`isaplausibleschemas.isEmpty());	13.52	0
	5	/	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	14.57	0
	6	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(!schemas.isEmpty()`isaplausible!schemas.isEmpty());	13.94	0
	8	/	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(null,schemas);	14.15	0
	10	/	IssuesTest	testIssue23	assertTrue(true);	assertSame(expected,actual)`?ThisexpectedSchemas,schemas);	14.97	0
	11	/	IssuesTest	testIssue23	assertTrue(true);	assertNotSame(expected,actual)`?ThisexpectedSchemas,schemas`isaplausibleexpected,actual)`?ThisexpectedSchemas,schemas);	14.43	0
	12	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(Arrays.asList(schemas.toArray()).contains(expectedSchema)`isaplausibleArrays.asList(schemas.toArray()).contains(expectedSchema));	14.2	0
1	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	12.5	1
	2	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	13.67	0
	3	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	12.92	0
	4	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	14.18	0
	5	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	14.23	0
	6	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().allMatch(schema->schemainstanceofXsdSchema));	13.52	0
	7	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(XsdSchema.class,schemas.get(0).getClass()`isaplausibleXsdSchema.class);	13.91	0
	8	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.stream().anyMatch(schema->schemainstanceofXsdElement)`isaplausibleschemas.stream().anyMatch(schema->schemainstanceofXsdElement));	14.96	0
	10	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	26.67	0
	17	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser.getResultXsdSchemas());	64.7	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	13.13	1
	1	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	12.93	0
	4	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	11.93	0
	5	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	13.22	0
	6	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	24.52	0
	10	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(condition)`whichchecksifthegivenconditionisfalse.);	14	0
	11	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	26.32	1
	12	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b`isaplausiblea);	12.84	0
	13	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	36.49	1
	16	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	25.25	1
0	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	28.03	0
	1	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()instanceofBaseTest);	16.41	0
	2	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(BaseTest.class,testContainer.getTestInstance().getClass());	394.77	0
	3	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(null,testContainer.getTestInstance());	16.25	0
	4	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance()`isaplausibletest);	16.99	0
	5	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestInstance()==null);	16.52	0
	6	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(anotherTest,testContainer.getTestInstance()`isaplausibleanotherTest,testContainer.getTestInstance());	17.21	0
	7	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()!=null`isaplausibletestContainer.getTestInstance()!=null);	16.77	0
	8	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(test,anotherTest`isaplausibletest,anotherTest);	16.35	0
	10	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance().equals(test));	17.07	0
1	2	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestCase().toString().contains("STR"));	16.66	0
	3	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData.getTestCase()`?);	17.46	0
	4	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertSame(expectedObject,actualObject`.ThistestSuite);	19.17	0
	6	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertFalse(booleancondition)`.);	17.47	0
	7	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(expected,actual)`isaplausible"Test1",testData.getTestCaseName());	16.49	0
	8	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(condition)`testData.getTestCaseName().equals("Test2"));	16.54	0
	12	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(null,testData);	43.98	0
	13	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	16.62	0
	15	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(condition)`?Here'sanexampleusage:);	16.91	0
	19	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestIndex()>0);	61.64	0
2	0	hazelcast/hazelcast-simulator	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertTrue(CloudProviderUtils.isLocal("STR"));	31.98	0
	1	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertEquals(true,CloudProviderUtils.isLocal("STR"));	16.63	0
	2	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertFalse(CloudProviderUtils.isLocal("STR"));	16.45	0
	3	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertEquals(false,CloudProviderUtils.isLocal("STR"));	31.12	0
	4	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotEquals(true,CloudProviderUtils.isLocal("STR"));	16.34	0
	5	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotEquals(false,CloudProviderUtils.isLocal("aliyun")`isaplausiblefalse);	16.2	0
	6	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertFalse(CloudProviderUtils.isLocal("STR"));	29.92	0
	9	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertEquals(false,CloudProviderUtils.isLocal("STR"));	158.14	0
	10	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotEquals(true,CloudProviderUtils.isLocal("cloud")`isaplausibletrue);	16.34	0
	11	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertTrue(CloudProviderUtils.isLocal("cloud")`isaplausibleCloudProviderUtils.isLocal("cloud"));	16.16	0
3	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull("STR");	16.55	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	15.38	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(newObject(),"STR","STR"));	15.23	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	32.03	0
	23	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(true);	48.46	0
4	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	17.01	0
	10	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	62.47	0
	16	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	15.6	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(newObject(),"STR","STR"));	16.21	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	30.03	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"invalidProperty","invalidValue")`isaplausiblebind0(null,"invalidProperty","invalidValue"));	16.47	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(true);	43.54	0
0	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	47.39	1
	1	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.size()<=3);	47.93	0
	2	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.isEmpty());	48.79	0
	3	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	47.44	0
	4	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotEquals(0,qResult.size());	47.68	0
	8	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	83	1
	9	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	85.54	1
	10	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	84.09	1
	11	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	83.73	1
	19	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	121.84	0
1	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	48.87	0
	1	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	47.54	0
	2	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	118.51	0
	4	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	93.19	1
	5	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size()`isaplausible0);	48.18	0
	6	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	84.1	0
	7	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(qResult.size()>0);	89.87	0
	8	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(expectedSize,qResult.size()`isaplausibleexpectedSize);	47.49	0
	10	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(!qResult.isEmpty());	83.13	0
	12	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size());	47.3	0
2	0	orientechnologies/orientdb	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	43.2	0
	1	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",property.getName());	42.65	0
	2	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.getType()==OType.STRING);	42.38	0
	3	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isMandatory());	42.35	0
	4	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertEquals(0,property.getCollate().compareToIgnoreCase("default")`isaplausible0);	43.97	0
	5	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed());	42.56	0
	6	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isReadOnly()`isaplausibleproperty.isReadOnly());	42.84	0
	7	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.isNotNull()`isaplausibleproperty.isNotNull());	42.67	0
	8	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed()`isaplausibleproperty.isIndexed()`isaplausibleproperty.isIndexed());	43.37	0
	9	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertEquals(OType.STRING,property.getType());	43.09	0
3	2	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.field("STR"));	167.5	0
	3	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(doc.field("STR")instanceofHashSet);	79.63	0
	4	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc.field("STR"));	38.07	0
	5	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,lst.size());	39.26	0
	6	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotEquals(0,set.size());	38.49	0
	7	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(doc.field("STR").equals("STR"));	39.56	0
	9	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(expected,actual)`.Here'sanexample:);	45.74	0
	10	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotEquals(expected,actual)`.Here'sanexample:`5,result);	40.15	0
	11	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(condition`isaplausiblecondition);	39.02	0
	12	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertFalse(condition)`isaplausiblelst.isEmpty());	39.43	0
4	14	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotEquals("STR","STR");	98.36	0
	16	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertTrue(condition)`?This5>2);	32	0
	17	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertThat(actualValue,is(equalTo(expectedValue))`?);	29.47	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	39.41	1
	1	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	77.77	1
	2	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	77.79	1
	5	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	150.83	1
	10	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	74.42	1
	22	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	149.67	1
7	1	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Double.parseDouble(res.get(0).field("STR").toString())==-1.0);	22.98	0
	4	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(Double.parseDouble(res.get(0).field("STR").toString())!=-1.0);	22.54	0
	5	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	22.08	0
	6	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Math.abs(Double.parseDouble(res.get(0).field("STR").toString())-(-1.0))<0.00001);	24.84	0
	11	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotEquals(Double.parseDouble(res.get(0).field("id").toString()),-1.0,0.00001`isaplausibleDouble.parseDouble(res.get(0).field("id").toString()),-1.0,0.00001);	22.94	0
	14	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Math.abs(Double.parseDouble(res.get(0).field("STR").toString())+1.0)<0.0001);	22.88	0
	17	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(Double.parseDouble(res.get(0).field("STR").toString())>-1.0);	21.39	0
	20	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotSame(-1.0,Double.parseDouble(res.get(0).field("STR").toString()));	22.63	0
	21	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Double.compare(Double.parseDouble(res.get(0).field("STR").toString()),-1.0)==0);	22.77	0
	22	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotEquals(-1.0,Double.parseDouble(res.get(0).field("id").toString()),0.0001`isaplausible-1.0,Double.parseDouble(res.get(0).field("id").toString()),0.0001);	23.39	0
8	0	orientechnologies/orientdb	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(0,res.size());	41.89	0
	1	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNull()`.Here'showyoucangeneratetheres);	42.26	0
	2	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	42.33	0
	3	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	41.97	1
	4	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(!res.isEmpty()`isaplausible!res.isEmpty());	42.27	0
	5	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotEquals(0,res.size()`isaplausible0);	43.2	0
	6	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(condition)`.Thisres.contains(doc));	42.9	0
	7	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(condition)`isaplausibleres.contains(doc));	42.06	0
	8	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(expectedValue,actualValue)`isaplausible"some",res.get(0).field("name"));	44.7	0
	9	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotEquals(unexpectedValue,actualValue)`isaplausible"wrongValue",res.get(0).field("name")`isaplausibleunexpectedValue,actualValue)`isaplausible"wrongValue",res.get(0).field("name"));	43.5	0
0	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(this.jolokiaConnection.getLog());	13.73	1
	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(mockLogger,jolokiaConnection.getLog());	11.86	0
	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(this.jolokiaConnection.getLog()instanceofLogger);	11.16	0
	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(this.jolokiaConnection.getLog(),mockLogger);	23.31	0
	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.88	0
	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog()!=null);	11.28	0
	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.61	0
	10	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(jolokiaConnection.getLog()==null);	11.9	0
	11	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(mockLogger,jolokiaConnection.getLog()`isaplausiblemockLogger);	11.67	0
	19	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection.getLog());	23.09	0
1	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	19.13	1
	6	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	363.49	1
	9	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue()`.Here'sanexample:);	10.14	0
	13	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	40.21	1
	14	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(condition`?Here'sanexample:);	9.9	0
	19	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	199.46	1
	20	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	34.1	1
	23	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	28.18	1
	25	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(expected,actual)`expectedValue,actualValue);	11.08	0
	26	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(expression)`?Here'sanexample:);	12.62	0
0	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	74.1	0
	1	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue()`from`org.junit.Assert`.Here'sanexample:);	20.27	0
	2	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	53.61	1
	3	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull()`from`org.junit.Assert`.Here'sanexample:);	18.92	0
	4	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse()`from`org.junit.Assert`.Here'sanexample:`condition);	18.46	0
	5	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals()`?Here'sanexample:);	19.59	0
	6	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNull()`from`org.junit.Assert`.Here'sanexample:`condition`isaplausible)`from`org.junit.Assert`.Here'sanexample:`condition);	20.81	0
	7	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotSame()`from`org.junit.Assert`.Here'sanexample:`expected,actual`isaplausible)`from`org.junit.Assert`.Here'sanexample:`expected,actual);	20.27	0
	10	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue()`:);	20.11	0
	11	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals()`:`isaplausible)`:);	18.83	0
1	0	sofastack/sofa-bolt	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	54.43	1
	1	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	38.32	0
	2	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	36.81	1
	7	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,client1.isConnectionMonitorSwitchOn());	17.86	0
	8	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	17.81	0
	13	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(condition)`.Thisclient1.isConnectionMonitorSwitchOff());	20.07	0
	14	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNull(client2`isaplausibleclient2);	18.12	0
	15	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(false,client1.isConnectionMonitorSwitchOn()`isaplausiblefalse);	22.07	0
	16	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertSame(client1,client2`isaplausibleclient1);	18.74	0
	18	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	18.61	0
0	0	trautonen/coveralls-maven-plugin	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getProtocol()+"STR"+proxy.getHost()+"STR"+proxy.getPort());	31.11	0
	1	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy);	16.49	0
	2	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertTrue(proxy.getPort()!=0);	16.58	0
	3	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getProtocol());	17.67	0
	4	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotEquals("STR",proxy.getProtocol());	32.16	0
	5	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertFalse(proxy.getHost().isEmpty());	16.9	0
	6	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame(null,proxy);	16.95	0
	7	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertTrue(proxyinstanceofProxy`isaplausibleproxyinstanceofProxy);	17.01	0
	8	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame(newProxy(),proxy`isaplausiblenewProxy(),proxy);	17.56	0
	9	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotEquals(proxy.getProtocol()+"://"+proxy.getHost()+":"+proxy.getPort()`isaplausible"https://localhost:8080",proxy.getProtocol()+"://"+proxy.getHost()+":"+proxy.getPort());	19.19	0
0	21	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	92.98	0
	27	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(0,0)>0);	69.75	0
0	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(1,profiles.size());	20.47	1
	1	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(profiles.isEmpty());	18.27	0
	3	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	51.53	0
	4	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotEquals(0,profiles.size());	19.7	0
	5	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(!profiles.isEmpty()`isaplausible!profiles.isEmpty());	18.49	0
	6	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.size()>=expectedSize`isaplausibleprofiles.size()>=expectedSize);	18.48	0
	12	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotSame(0,profiles.size());	18.86	0
	13	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertSame(expectedProfile,profiles.get(0)`isaplausibleexpectedProfile);	18.83	0
	16	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(condition)`.Thisprofiles.contains(expectedProfile));	20.04	0
	19	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	???;	38.17	0
1	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	65.06	1
	1	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	51.06	1
	5	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	12.23	0
	8	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	31.08	0
	11	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	63.05	1
	12	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	24.17	1
	13	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	34.2	0
	17	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	77.62	1
	23	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	11.71	0
	24	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	36.84	1
2	0	fabric8io/fabric8-maven-plugin	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	18.62	1
	1	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	37.43	0
	2	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	19.98	0
	4	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,service.newerTag(oldTag,latestTag));	58.6	0
	5	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	66.93	1
	7	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	56.7	0
	8	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(service.newerTag(oldTag,latestTag)==latestTag);	39.18	0
	9	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	23.96	0
	10	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)<0||tag1Date.compareTo(tag2Date)==0||tag2Date.compareTo(tag1Date)>0`isaplausibletag1Date.compareTo(tag2Date)<0||tag1Date.compareTo(tag2Date)==0||tag2Date.compareTo(tag1Date)>0);	23.05	0
	11	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag`isaplausibleoldTag);	19.63	0
0	3	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotNull(StringHelper.bytesToHexString(newbyte[1]));	74.57	0
	4	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertTrue(StringHelper.bytesToHexString(newbyte[1]).length()>0);	18	0
	7	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).isEmpty());	19.06	0
	8	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotSame("expectedOutputValue",FOCAL(newbyte[]{0x01,0x02,0x03})`isaplausible"expectedOutputValue",FOCAL(newbyte[]{0x01,0x02,0x03}));	19.55	0
	9	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(StringHelper.bytesToHexString(null)`isaplausibleStringHelper.bytesToHexString(null));	17	0
	10	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotSame("STR",StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}));	19.49	0
	11	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertArrayEquals(newbyte[]{0x01,0x02,0x03},FOCAL(newbyte[]{0x01,0x02,0x03}).getBytes()`isaplausiblenewbyte[]{0x01,0x02,0x03},FOCAL(newbyte[]{0x01,0x02,0x03}).getBytes());	19.6	0
	12	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotEquals("STR",StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}));	20.31	0
	13	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertTrue(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).equals("010203")`isaplausibleStringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).equals("010203"));	18.06	0
	17	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(StringHelper.bytesToHexString(newbyte[]{0x01,0x02,0x03}).isEmpty());	17.17	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals("STR",this.httpclient.getCookieStore().getCookies().get(0).getName());	20.72	0
	1	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(!this.httpclient.getCookieStore().getCookies().isEmpty());	15.45	0
	2	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(this.httpclient.getCookieStore().getCookies());	15.82	0
	3	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals(1,cookies.getCookies().size());	16.15	1
	4	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(this.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getName().equals("STR")));	16.18	0
	5	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertFalse(this.httpclient.getCookieStore().getCookies().isEmpty());	15.68	0
	6	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotEquals(0,this.httpclient.getCookieStore().getCookies().size()`isaplausible0);	16.11	0
	7	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertSame(this.httpclient.getCookieStore(),this.httpclient.getCookieStore());	15.02	0
	8	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotSame(this.testServer,this.httpclient`isaplausiblethis.testServer,this.httpclient);	15.41	0
	9	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(this.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getValue().equals("value"))`isaplausiblethis.httpclient.getCookieStore().getCookies().stream().anyMatch(cookie->cookie.getValue().equals("value")));	16.81	0
0	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	10.76	1
	1	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	11.84	0
	2	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	12.96	0
	3	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY`isaplausiblefilter.decide(evt)==FilterReply.DENY);	12.6	0
	4	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt)`isaplausiblefilter.decide(evt));	11.35	0
	5	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt)`isaplausibleFilterReply.DENY,filter.decide(evt));	13.52	0
	6	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	17.7	0
	7	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	11.98	0
	8	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)!=FilterReply.NEUTRAL`isaplausiblefilter.decide(evt)!=FilterReply.NEUTRAL);	12.54	0
	9	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNull(filter.decide(evt)`isaplausiblefilter.decide(evt)`isaplausiblefilter.decide(evt)`isaplausiblefilter.decide(evt));	13.08	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	31.99	1
	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.equals(expectedResult));	18.03	0
	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	18.23	0
	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	18.72	0
	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(condition)`,where`condition`isabooleanexpression.ThisnormalizedUrl.isEmpty());	19.1	0
	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	18.09	0
	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	124.27	0
	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(condition`where`condition`isabooleanexpression?Forexample);	18.78	0
	13	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	52.11	0
	15	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	53.45	0
0	3	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrUSDRUS.convert(null));	23.07	0
	4	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrUSDRUS.convert((Double)null));	31.19	0
	5	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertTrue()`tocheckiftheresultof`convert()`isnotnull?);	11.29	0
	6	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertFalse()`.Thiscanbeusedtocheckifacertainconditionisfalse.Here'sanexample:);	11.54	0
	7	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertEquals()`.Thiscanbeusedtocheckiftwovaluesareequal.Here'sanexample:);	12.71	0
	9	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotEquals()`.Thiscanbeusedtocheckiftwovaluesarenotequal.Here'sanexample:);	11.13	0
	10	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertTrue()`.Thiscanbeusedtocheckifacertainconditionistrue.Here'sanexample:`condition);	9.91	0
	12	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertThat()`.ThiscanbeusedformoreflexibleactualValue,matcher);	12.93	0
	14	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertArrayEquals()`.Thiscanbeusedtocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray`isaplausible)`.Thiscanbeusedtocheckiftwoarraysareequal.Here'sanexample:`expectedArray,actualArray);	13.15	0
	17	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotSame()`.Thiscanbeusedtocheckiftwoobjectsarenotthesameinstance.Here'sanexample:`expectedObject,actualObject`isaplausible)`.Thiscanbeusedtocheckiftwoobjectsarenotthesameinstance.Here'sanexample:`expectedObject,actualObject);	12.11	0
0	0	myabc/markdownj	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg,HTMLDecoder.decode(encoded));	39.59	1
	1	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(billg.equals(HTMLDecoder.decode(encoded)));	9.17	0
	2	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotNull(HTMLDecoder.decode(encoded));	8.28	0
	3	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotEquals(HTMLDecoder.decode(encoded)`isaplausible"",HTMLDecoder.decode(encoded));	8.26	0
	4	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertFalse(billg.equals(HTMLDecoder.decode(encoded))`isaplausiblebillg.equals(HTMLDecoder.decode(encoded)));	8.79	0
	5	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotSame(billg,HTMLDecoder.decode(encoded)`isaplausiblebillg,HTMLDecoder.decode(encoded));	8.5	0
	6	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertArrayEquals(billg.toCharArray(),HTMLDecoder.decode(encoded).toCharArray());	8.55	0
	8	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(billg.contains(HTMLDecoder.decode(encoded)));	8.73	0
	10	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals(billg.length(),HTMLDecoder.decode(encoded).length());	8.91	0
	11	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertSame(billg.getClass(),HTMLDecoder.decode(encoded).getClass()`isaplausiblebillg.getClass());	9.04	0
0	0	gvlasov/collections-utils	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.containsKey("STR"));	26.16	1
	1	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertFalse(map.containsKey("STR"));	9.7	0
	2	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertEquals(3,map.size());	18.26	0
	3	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotNull(map.get("STR"));	9.1	0
	4	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNull(map.get("missing")`isaplausiblemap.get("missing"));	9.75	0
	5	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.containsValue(7));	9.15	0
	6	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertFalse(map.containsValue(10)`isaplausiblemap.containsValue(10));	10.28	0
	7	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotEquals(4,map.size());	9.73	0
	8	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.keySet().containsAll(Arrays.asList("Hello","goodbye","hey"))`isaplausiblemap.keySet().containsAll(Arrays.asList("Hello","goodbye","hey")));	10.77	0
	11	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.containsKey("STR"));	18.38	1
0	0	PeterisP/morphology	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	95.6	0
	1	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	14.74	0
	2	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	15.07	0
	16	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	27.42	0
	20	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas.get(0));	14.63	0
	21	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	42.68	0
	26	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	16.11	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertFalse(config.isNull("STR"));	11.66	1
	1	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertFalse(config.isNull("STR"));	24	1
	2	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertTrue(config.isNull("STR"));	13.39	0
	5	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertTrue(config.isNull("STR"));	23.8	0
	6	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertFalse(config.contains("unexpected_key")`isaplausibleconfig.contains("unexpected_key"));	12.56	0
	7	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertEquals(config.get("expected_key")`isaplausible"expected_value",config.get("expected_key"));	12.49	0
	8	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals(config.get("unexpected_key")`isaplausibleconfig.get("unexpected_key")`isaplausible"unexpected_value",config.get("unexpected_key"));	13.56	0
	9	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotNull(config.get("key")`isaplausibleconfig.get("key"));	12.59	0
	10	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertEquals(expectedList,actualList`isaplausibleexpectedList);	12.48	0
	11	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals(unexpectedValue,actualValue`isaplausibleunexpectedValue);	12.46	0
5	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertArrayEquals("b","c"});	40.17	0
	1	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(Arrays.asList(fields).contains("STR"));	39.59	0
	2	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	39.01	0
	3	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields);	39.91	1
	4	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotEquals(0,fields.length`isaplausible0);	39.34	0
	5	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length>0`isaplausiblefields.length>0);	39.18	0
	6	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertArrayEquals(newString[]{"a","b","c"},fields`isaplausiblenewString[]{"a","b","c"},fields);	40.01	0
	8	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length<=10);	49.14	0
	9	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotSame(document,fields);	39.34	0
	10	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertFalse(Arrays.asList(fields).isEmpty()`isaplausibleArrays.asList(fields).isEmpty());	39.24	0
0	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertFalse(headers.containsKey("STR"));	57.08	0
	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertTrue(headers.containsKey("STR"));	7.22	1
	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(1,headers.size());	5.72	0
	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotNull(headers);	5.89	0
	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(0,headers.size());	6.48	0
	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.isEmpty());	8.76	0
	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotSame(headers,requestTemplate.headers()`isaplausibleheaders,requestTemplate.headers());	6.59	0
	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(headers,requestTemplate.headers());	7.38	0
	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertSame(headers,requestTemplate.headers()`isaplausibleheaders);	6.56	0
	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNull(headers.get("header")`isaplausibleheaders.get("header"));	6.37	0
0	5	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	???;	49.43	0
	10	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertThrows(java.lang.NoSuchMethodException.class,()->cm.getClass().getDeclaredMethod("STR",byte.class));	34.21	0
	15	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm);	29.33	0
0	0	orientechnologies/orientdb	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343l,OVarIntSerializer.readAsLong(bytes));	38.74	1
	1	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)==20432343);	40.12	0
	2	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0,OVarIntSerializer.readAsLong(bytes));	38.74	0
	3	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	38.62	0
	4	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(null,OVarIntSerializer.readAsLong(bytes));	38.79	0
	5	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)==0`isaplausibleOVarIntSerializer.readAsLong(bytes)==0);	39.4	0
	6	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0`isaplausibleOVarIntSerializer.readAsLong(bytes)!=0);	38.63	0
	7	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0,OVarIntSerializer.readAsLong(bytes));	40.16	0
	8	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)>0`isaplausibleOVarIntSerializer.readAsLong(bytes)>0);	39.17	0
	9	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0`isaplausibleOVarIntSerializer.readAsLong(bytes)<0);	40.75	0
1	0	orientechnologies/orientdb	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	37.63	1
	1	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()==0);	39.57	0
	2	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()>0);	90.32	0
	3	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(1,treeBucket.size()`isaplausible1);	39.04	0
	4	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket);	38.75	0
	5	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(null,treeBucket`isaplausiblenull,treeBucket);	39.08	0
	6	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertSame(treeBucket,treeBucket);	41.71	0
	7	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	38.09	0
	9	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	116.67	1
	10	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	116.23	1
2	0	orientechnologies/orientdb	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	27.69	1
	1	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(server.existsDatabase("STR"));	26.4	0
	2	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	45.76	1
	3	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertEquals(true,server.existsDatabase("STR"));	27.78	0
	5	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	49.44	1
	10	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertNotNull(server);	26.84	0
	11	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	45.48	1
	12	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertNotEquals(false,server.existsDatabase("STR"));	360.08	0
	14	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertNotNull(server.existsDatabase("STR"));	26.42	0
	16	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertEquals(1,server.listDatabases().size());	26.56	0
3	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotNull(res);	20.58	0
	1	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>=0);	53.66	0
	2	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	55.1	0
	3	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(1,res.size());	59.29	0
	4	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	42.55	1
	5	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotEquals(0,res.size()`isaplausible0);	21.45	0
	6	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.contains(expectedResult)`isaplausibleres.contains(expectedResult));	22.5	0
	9	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.stream().allMatch(doc->doc.field("STR")instanceofFloat));	42.26	0
	10	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty()`isaplausibleres.isEmpty());	21.92	0
	11	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0`isaplausibleres.size()>0);	21.7	0
4	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	114.55	0
	1	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	38.8	1
	2	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(!compositeKey.equals(anotherCompositeKey));	38.58	0
	3	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	41.62	0
	4	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()!=anotherCompositeKey.hashCode());	39.98	0
	6	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	38.97	0
	7	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode()`isaplausiblecompositeKey.hashCode());	39.42	0
	8	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey.hashCode(),anotherCompositeKey.hashCode());	38.89	0
	9	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey`isaplausiblecompositeKey);	37.94	0
	10	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNull(anotherCompositeKey`isaplausibleanotherCompositeKey`isaplausibleanotherCompositeKey`isaplausibleanotherCompositeKey);	38.6	0
5	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	111.76	1
	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	79.02	1
	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue()`method:);	39.89	0
	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull()`:);	38.43	0
	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(expectedResult.contains(newOCompositeKey(12,1,"STR")));	40.48	0
	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals()`methodtonull,result);	39.17	0
	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),2);	77.46	0
	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	39.45	0
	10	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	77.87	1
	11	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(expectedResult.contains(newOCompositeKey(12,2,"STR")));	40.5	0
6	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property);	42.94	0
	1	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals("STR",property.getName());	43.47	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.isString()`.So);	42.53	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getType().equals(OType.STRING));	78.08	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.isMandatory());	42.51	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals(OType.STRING,property.getType());	42.22	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertSame(companyClass,property.getOwnerClass()`isaplausiblecompanyClass);	44.29	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.isIndexed());	42.2	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.isIndexed()`isaplausibleproperty.isIndexed());	42.93	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotEquals("STR",property.getName());	42.7	0
7	0	orientechnologies/orientdb	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	44.64	0
	2	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(timeLine.getMultiValueChangeEvents().isEmpty());	82.39	0
	3	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()>0);	44.64	0
	4	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().size()>=1);	155.71	0
	5	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,timeLine.getMultiValueChangeEvents().size());	42.98	0
	6	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(0,timeLine.getMultiValueChangeEvents().size());	42.77	0
	7	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(!timeLine.getMultiValueChangeEvents().isEmpty());	43.32	0
	10	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(expected,actual)`.Thisexpected,actual);	44.4	0
	11	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertSame(expected,actual)`.Thisexpected,actual`isaplausibleexpected,actual)`.Thisexpected,actual);	42.72	0
	15	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().contains(event)`isaplausibletimeLine.getMultiValueChangeEvents().contains(event));	42.83	0
0	0	PeterisP/morphology	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	13.62	1
	1	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	15.58	0
	2	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	31.74	1
	3	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	15.17	0
	10	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	36.5	1
	13	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(w);	14.41	0
	14	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	37.65	1
	21	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(locītājs);	14.91	0
	24	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	53.3	1
	27	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	43.75	1
1	5	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(viņš.isRecognized());	48	1
	6	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(viņš.isRecognized());	42.51	1
	28	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotNull(viņš);	29.41	0
	29	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expected,actual`?);	17.45	0
0	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(Arrays.asList("STR","STR","STR","STR","STR"),flattened);	18.18	0
	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(flattened.containsAll(Arrays.asList("STR","STR","STR","STR","STR")));	16.87	0
	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	16.38	0
	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(0,flattened.size()`isaplausible0);	16.67	0
	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(set.containsAll(ACollectionHelper.flatten(Collections.singleton(set))));	49.72	0
	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(set.isEmpty()`isaplausibleset.isEmpty());	16.63	0
	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened`isaplausibleflattened);	16.26	0
	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened`.Thisset.size(),flattened.size());	19.36	0
	10	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR"},flattened.toArray());	20.44	0
	11	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened`isaplausibleset,flattened);	17.51	0
1	9	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	???;	40.69	0
	10	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotNull()`result);	17.76	0
	13	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR","STR","STR"));	120.75	0
	14	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR","STR","STR").length()>0);	18.07	0
	15	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotSame("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR","STR","STR"));	17.46	0
	16	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertTrue()`withacustomcondition?Here'sanexample:);	18.1	0
0	0	OpenLiberty/ci.common	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	162.05	0
	1	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	21.42	0
	7	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(sourceFile);	10.17	0
	8	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(srcDir.exists());	10.27	0
	9	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(targetDir.isDirectory());	10.09	0
	11	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals("STR",sourceFile.getName());	10.12	0
	12	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals("STR",sourceFile.getName());	9.53	0
	14	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	21.83	0
	15	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(targetDir,srcDir);	10.81	0
	16	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(srcDir.getParent(),targetDir.getParent());	21.54	0
1	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(newFile(targetDir,"STR").exists());	23.29	0
	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(newFile(targetDir,"STR"));	10.96	0
	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(newFile(targetDir,"STR").exists());	31.26	0
	14	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	???;	19.97	0
	17	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(newFile(targetDir,"STR").isDirectory());	10.63	0
	19	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(targetDir.isDirectory());	11.79	0
	21	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	38.97	1
	22	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(targetDir.isFile());	11.43	0
	26	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals("STR",tempClass.getName());	10.07	0
	27	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(0,targetDir.listFiles().length);	20.11	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals("STR",result);	11.42	1
	1	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertTrue(result.contains("STR"));	15.83	0
	2	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotEquals(result`isaplausible"FizzBuzz",result);	13.09	0
	3	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotNull(result);	63.17	0
	4	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertFalse(result.contains("Buzz")`isaplausibleresult.contains("Buzz"));	13.02	0
	5	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotSame("STR",result);	12.69	0
	6	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertTrue(result.equals("STR")||result.equals("STR")||result.equals("STR")||result.matches("STR"));	13.4	0
	7	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	12.21	0
	8	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals("STR",result);	25.66	1
	9	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals(FizzBuzzTDD.convert(15)`isaplausible"FizzBuzz",FizzBuzzTDD.convert(15));	12.69	0
0	0	amlinv/stat-collection-utils	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertEquals(newJMXServiceURL("STR"),result);	10.54	0
	1	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(resultinstanceofJMXServiceURL);	9.63	0
	2	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	9.75	1
	3	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	19.28	1
	6	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	23.67	1
	7	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(result.toString().startsWith("STR"));	27.14	0
	8	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotEquals(result.toString()`isaplausible"different-url",result.toString());	9.81	0
	9	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotSame(result,null);	10.19	0
	10	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertEquals(result.toString()`isaplausible"service:jmx:rmi://127.0.0.1:1099/jndi/rmi://127.0.0.1:1099/jmxrmi",result.toString());	12.12	0
	11	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertFalse(result.toString().isEmpty()`isaplausibleresult.toString().isEmpty());	9.44	0
1	1	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	24.49	1
	2	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getJmxServiceUrlFactory());	10.5	0
	3	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	11.36	0
	7	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory);	11.89	0
	9	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(DefaultJmxServiceUrlFactory.class,factory.getJmxServiceUrlFactory().getClass());	11.71	0
	10	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(null,factory.getJmxServiceUrlFactory()`isaplausiblenull);	10.7	0
	11	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(this.factory.getJmxServiceUrlFactory()==null);	10.86	0
	12	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,factory.getJmxServiceUrlFactory());	19.44	0
	13	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(factory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory`isaplausiblefactory.getJmxServiceUrlFactory()instanceofJMXServiceUrlFactory);	10.96	0
	14	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(factory.getJmxServiceUrlFactory()`isaplausiblefactory.getJmxServiceUrlFactory());	10.03	0
0	0	myabc/markdownj	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown(null));	6.91	0
	1	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null));	16.58	1
	2	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").startsWith("STR"));	9.46	0
	3	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertFalse(m.markdown("STR").isEmpty());	7.29	0
	4	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	8.2	0
	5	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	8.07	0
	6	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotSame(m.markdown("Hello,World"),m.markdown("Hello,World")`isaplausiblem.markdown("Hello,World"),m.markdown("Hello,World"));	8.64	0
	7	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null).trim());	34.15	0
	8	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(m.markdown("Hello,World")`isaplausible"",m.markdown("Hello,World"));	8.34	0
	9	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("Hello,World").endsWith("</p>")`isaplausiblem.markdown("Hello,World").endsWith("</p>"));	8.93	0
0	1	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().startsWith("STR"));	13.06	0
	2	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotNull(deflateExtension.getProvidedExtensionAsServer());	12.64	0
	3	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotEquals("STR",deflateExtension.getProvidedExtensionAsServer());	12.65	0
	4	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertFalse(deflateExtension.getProvidedExtensionAsServer().isEmpty());	12.02	0
	5	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotSame("STR",deflateExtension.getProvidedExtensionAsServer());	12.92	0
	6	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotEquals(null,deflateExtension.getProvidedExtensionAsServer()`isaplausiblenull);	347.21	0
	7	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(!deflateExtension.getProvidedExtensionAsServer().isEmpty()`isaplausible!deflateExtension.getProvidedExtensionAsServer().isEmpty());	12.83	0
	8	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotSame("",deflateExtension.getProvidedExtensionAsServer()`isaplausible"",deflateExtension.getProvidedExtensionAsServer());	13.15	0
	12	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().contains("STR"));	13.71	0
	13	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertFalse(deflateExtension.getProvidedExtensionAsServer().contains("STR"));	12.78	0
1	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	11.66	1
	1	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	25.34	0
	2	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	38.12	1
	3	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension1.hashCode());	12.85	0
	4	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode()`isaplausibledefaultExtension0.hashCode());	13.35	0
	5	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0`isaplausibledefaultExtension0);	13.55	0
	6	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0,defaultExtension1`isaplausibledefaultExtension0);	12.92	0
	10	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension1));	13.55	0
	11	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.equals(defaultExtension1)`isaplausibledefaultExtension0.equals(defaultExtension1));	13.1	0
	13	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode()`isaplausibledefaultExtension0.hashCode());	13.75	0
0	1	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c.yModeProbs);	101.86	0
	4	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.getYModeProbs().length>0);	24.33	0
	5	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(condition`?Youcanreplace`<AssertPlaceHolder>`with`c.getYModeProbs().length==0);	24.94	0
	6	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,c.getYModeProbs().length`tocheckthatthe`c.getYModeProbs()`arrayhasanon-zerolength.);	29.14	0
	7	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.getYModeProbs()[0][0]>=0);	24.04	0
	8	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(null,c.getYModeProbs());	24.23	0
	9	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertArrayEquals(Y_MODE_PROBS,c.getYModeProbs()`isaplausibleY_MODE_PROBS);	25.01	0
	10	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c)`isaplausiblec);	24.16	0
	11	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(null,c.yModeProbs)`isaplausiblenull,c.yModeProbs);	24.08	0
	14	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(c.yModeProbs,Y_MODE_PROBS);	24.31	0
0	1	/	VerbsTest	testRegistered	assertNotNull(actual);	assertEquals("STR",actual.getId().toString());	27.43	0
	2	/	VerbsTest	testRegistered	assertNotNull(actual);	assertTrue(actual.getId().toString().contains("STR"));	10.58	0
	3	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual.getId());	11.12	0
	4	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual);	21.68	1
	5	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual.getId());	17.56	0
	6	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(actual.getId().toString()`isaplausible"empty",actual.getId().toString());	10.75	0
	7	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(null,actual.getId()`isaplausiblenull);	9.87	0
	8	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame(null,actual.getId()`isaplausiblenull`isaplausiblenull,actual.getId()`isaplausiblenull);	10.26	0
	9	/	VerbsTest	testRegistered	assertNotNull(actual);	assertFalse(actual.getId().isEmpty()`isaplausibleactual.getId().isEmpty());	9.85	0
	11	/	VerbsTest	testRegistered	assertNotNull(actual);	assertTrue(actual.getId().toString().endsWith("STR"));	35.61	0
1	0	adlnet/jxapi	VerbsTest	testImported	assertNotNull(actual);	assertEquals("STR",actual.toString());	18.7	0
	1	/	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	9.79	0
	2	/	VerbsTest	testImported	assertNotNull(actual);	assertNotNull(actual);	10.06	1
	3	/	VerbsTest	testImported	assertNotNull(actual);	assertNotEquals(actual.toString()`isaplausible"notimported",actual.toString());	10.18	0
	4	/	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.toString().equals("notimported")`isaplausibleactual.toString().equals("notimported"));	9.9	0
	5	/	VerbsTest	testImported	assertNotNull(actual);	assertNotSame("STR",actual.toString());	9.37	0
	7	/	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	9.82	0
	8	/	VerbsTest	testImported	assertNotNull(actual);	assertNotSame(Verbs.imported(),actual);	10.53	0
	9	/	VerbsTest	testImported	assertNotNull(actual);	assertNotEquals(Verbs.notImported(),actual`isaplausibleVerbs.notImported());	10.37	0
	10	/	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.equals(Verbs.notImported())`isaplausibleactual.equals(Verbs.notImported()));	10.06	0
2	1	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	47.93	1
	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	19.91	1
	3	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	9.61	0
	4	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.getId());	79.24	0
	5	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.toString());	21.84	0
	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(actual,Verbs.initialized()`isaplausibleactual);	10.04	0
	7	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals(actual.getName()`isaplausible"initialized",actual.getName());	9.58	0
	8	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	22.39	1
	11	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotSame(Verbs.initialized(),actual);	10.21	0
	12	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.getName().contains("init")`isaplausibleactual.getName().contains("init"));	9.77	0
3	1	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(!statement.getId().equals(actual.getId()));	10.1	0
	2	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(actual.getId());	10.5	0
	10	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(this.statement.getContext().getLanguage());	21.45	0
	13	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(Long.parseLong(statement.getStored())<=System.currentTimeMillis());	19.59	0
	14	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getTimestamp().equals(statement.getStored()));	9.54	0
	15	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getAttachments());	33.92	0
	16	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	10.6	0
	17	/	StatementTest	testToString	assertNotNull(actual);	assertEquals("STR",statement.getContext().getLanguage());	27.25	0
	18	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getVersion().equals("1.0")`isaplausiblestatement.getVersion().equals("1.0"));	10.01	0
	20	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getActor());	8.67	0
4	0	adlnet/jxapi	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	8.75	0
	1	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertTrue()`:);	10.38	0
	2	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals()`withacustommessage:);	11	0
	3	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNull()`?Here'showitcanbeusedinthetestcase:);	11.86	0
	4	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotEquals()`?Thisexpected,actual);	11.34	0
	5	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotNull(activity.getObjectType());	10.8	0
	6	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	18.02	0
	9	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertFalse()`?Thiscondition);	10.75	0
	10	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertArrayEquals()`.This){);	12.46	0
	11	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotSame()`.Thisexpected,actual`isaplausible)`.Thisexpected,actual);	11.02	0
0	5	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(0.0));	18.86	0
	6	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(123.45));	20.63	0
	7	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(100.0).startsWith("STR"));	11.01	0
	8	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame("STR",moneyToStrUAHRUS.convert(100.0));	11.23	0
	10	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(123.45).contains("STR"));	32.68	0
	13	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(0.0).isEmpty());	11.5	0
	14	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(0.0));	9.79	0
	15	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(10.0).length()>0);	9.69	0
	16	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals(null,moneyToStrUAHRUS.convert(10.0)`isaplausiblenull);	10.11	0
	19	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS.convert(100.0),moneyToStrRURRUS.convert(100.0));	11.9	0
1	0	javadev/moneytostr-russian	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotNull(moneyToStrPER100);	8.99	0
	2	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotEquals("STR",moneyToStrUSD.toString());	9.85	0
	3	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertTrue(moneyToStrUAHENGinstanceofMoneyToStr);	9.02	0
	4	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertTrue(moneyToStrRURRUSinstanceofMoneyToStr);	18.27	0
	5	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertTrue(moneyToStrUSDENGinstanceofMoneyToStr);	19.11	0
	6	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotSame(moneyToStrUAH,moneyToStrRUR);	9.61	0
	7	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertFalse(moneyToStrUSDENG.equals(moneyToStrPER1000));	9.95	0
	8	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotSame(moneyToStrUAHRUS,moneyToStrUSDENG`isaplausiblemoneyToStrUAHRUS,moneyToStrUSDENG);	10.07	0
	9	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotNull(moneyToStrCustom`isaplausiblemoneyToStrCustom);	9.52	0
	10	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotEquals(3,moneyToStrUAHENG.hashCode()`isaplausible3);	9.99	0
0	0	1337joe/cubesensors-for-java	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	9.12	1
	1	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	9.07	0
	2	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(actual`.This){);	9.17	0
	3	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,actual);	14.23	0
	6	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(condition`);	9.25	0
	8	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	7.9	0
	10	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual)`.);	10.32	0
	11	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertSame(expected,actual`isaplausibleexpected);	7.9	0
	15	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	19.36	1
1	0	1337joe/cubesensors-for-java	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	7.58	1
	1	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	8.17	0
	2	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual`.This){);	10.01	0
	4	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual)`to){);	9.9	0
	5	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	14.41	1
	6	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	16.23	1
	7	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(condition)`.Thisactual>expected);	9.17	0
	8	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(condition`);	9.65	0
	9	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals("STR",actual);	28.57	0
	10	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(actual`isaplausibleactual);	7.62	0
0	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	15.43	0
	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value%2==0);	61.14	0
	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	15.18	0
	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	31.93	0
	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<100);	32.39	0
	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(expectedValue,actualValue`);	17.45	0
	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(100,value);	31.37	0
	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertFalse(value>100);	15.74	0
	10	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(expectedList,actualList`isaplausibleexpectedList);	16.39	0
	11	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotSame(expectedObject,actualObject`isaplausibleexpectedObject,actualObject);	15.76	0
1	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	16.83	0
	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(newObject(),"STR","STR"));	16.07	0
	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	16.6	0
	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	45.96	0
	11	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	60.04	0
	12	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	31.63	0
	13	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(null,"propertyName","value")`isaplausiblebind0(null,"propertyName","value"));	16.14	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	15.87	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	30.63	0
	24	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	46.04	0
2	28	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	60.26	0
0	0	jribble/Java-Websockify	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	11.08	0
	2	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(response);	7.55	0
	3	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	7.78	0
	5	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(XML.getBytes(),resp.getBytes());	8.14	0
	7	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	7.42	0
	8	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	58.14	0
	10	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.startsWith("STR"));	7.76	0
	11	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(XML,resp);	7.92	0
	12	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML.length(),resp.length());	8.11	0
	13	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(XML,resp);	15.79	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	208.66	0
	1	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.nonEmpty());	124.87	0
	3	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	147.96	0
	5	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	167.92	0
	9	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.exists(token->token.text().equals("STR")&&token.pos().toString().equals("STR")));	297.22	0
	15	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens.head());	104.74	0
	17	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.exists(token->token.text().equals("STR")));	157.39	0
	19	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(expectedSize,tokens.size()`isaplausibleexpectedSize);	183.04	0
	22	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>0);	191.41	0
	23	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>=expectedSize`isaplausibletokens.size()>=expectedSize);	179.16	0
0	5	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	???;	11.89	0
	8	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	21.14	0
	10	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertFalse(false);	8.44	0
	12	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull("STR");	17.26	0
	19	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(Collectors.toImmutableList());	31.79	0
	26	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	8.55	0
0	0	fluenda/ParCEFone	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	18.13	1
	1	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1)instanceofCommonEvent);	9.42	0
	2	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	16.87	1
	6	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertFalse(parser.parse(sample1)==null);	8.39	0
	7	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedValue,actualValue`isaplausibleexpectedValue);	8.72	0
	8	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotEquals(expectedValue,actualValue`isaplausibleexpectedValue);	8.81	0
	9	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(condition`isaplausiblecondition);	8.55	0
	11	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotSame(expectedValue,actualValue`.);	9.41	0
	13	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	17.22	1
	16	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	17.2	1
0	9	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env.get("STR"));	43.55	0
	10	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("STR"));	11.65	0
	11	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",env.get("STR"));	12.3	0
	12	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals(env.get("STR"),"STR");	48.22	0
	13	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("STR")&&env.get("STR").equals("STR"));	12.83	0
	14	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",env.get("STR"));	12.37	0
	15	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env.get("GIT_BRANCH")`isaplausibleenv.get("GIT_BRANCH"));	12.08	0
	16	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.containsKey("GIT_TAG_NAME")`isaplausibleenv.containsKey("GIT_TAG_NAME"));	12.02	0
	17	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNull(env.get("SOME_KEY")`isaplausibleenv.get("SOME_KEY"));	12.6	0
	19	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",env.get("STR"));	12.41	0
0	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	7.52	1
	1	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.isMemberClass());	15.76	0
	2	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.isLocalClass());	15.04	0
	3	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.isAssignableFrom(Object.class)`isaplausiblehelloClass.isAssignableFrom(Object.class));	7.86	0
	4	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals("STR",helloClass.getDeclaredMethod("STR").invoke(helloClass.getDeclaredConstructor().newInstance()));	8.31	0
	5	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.getName().contains("HelloClass")`isaplausiblehelloClass.getName().contains("HelloClass"));	7.98	0
	6	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotEquals(helloClass.getDeclaredMethod("hello").invoke(helloClass.getDeclaredConstructor().newInstance())`isaplausible"hello",helloClass.getDeclaredMethod("hello").invoke(helloClass.getDeclaredConstructor().newInstance()));	8.36	0
	7	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(Arrays.asList(helloClass.getDeclaredMethods()).stream().anyMatch(method->method.getName().equals("hello"))`isaplausibleArrays.asList(helloClass.getDeclaredMethods()).stream().anyMatch(method->method.getName().equals("hello")));	8.65	0
	8	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredConstructors().length);	7.89	0
	9	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(Modifier.isPrivate(helloClass.getDeclaredField("inner").getModifiers())`isaplausibleModifier.isPrivate(helloClass.getDeclaredField("inner").getModifiers()));	8.44	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull("STR");	49.34	0
	4	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(this.httpclient.getCookieStore().getCookies().contains(clientCookie));	26.38	0
	6	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals("STR",this.httpclient.getCookieStore().getCookies().get(0).getName());	29.04	0
	7	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(this.httpclient.getCookieStore().getCookies().size()>0);	14.66	0
	8	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals("STR",this.httpclient.getCookieStore().getCookies().get(0).getValue());	60.46	0
	9	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals(1,this.httpclient.getCookieStore().getCookies().size());	30.22	0
	10	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertFalse(this.httpclient.getCookieStore().getCookies().isEmpty());	14.99	0
	12	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull(this.httpclient.getCookieStore().getCookies().get(0));	62.57	0
	14	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotSame("STR",this.httpclient.getCookieStore().getCookies().get(0).getValue());	15.86	0
	15	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull(this.httpclient.getCookieStore().getCookies());	31.62	0
1	1	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(result);	57.93	0
	2	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	45.13	1
	3	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(actualResult);	148.48	0
	5	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	52.51	1
	7	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	56.23	0
	9	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	45.43	1
	15	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher);	22.75	0
	23	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(pattern.matcher("STR").find());	52.17	0
	25	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	34.79	1
2	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotNull(result);	58.75	0
	1	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals(expectedResult,result);	66.17	0
	2	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals(expected,actual);	63.68	0
	4	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals(expectedValue,actualValue);	57.89	0
	9	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.contains(PATTERNS[9].format(-1.23)));	65.83	0
	22	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotNull(first);	58.21	0
	23	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals(first,result);	50.69	0
	24	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.contains("STR"));	63.06	0
	25	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotEquals(first,result);	100.73	0
	28	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals("STR",result);	62	1
0	10	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(isGeneratedConfigFile(sourceFile,targetDir,srcDir));	97.67	0
	13	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(result);	44.29	0
0	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	42.73	1
	10	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals(expectedExtensionIdentifier,deflateExtension.getProvidedExtensionAsServer());	61.42	0
	11	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	38.38	1
4	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	44.51	0
	1	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.TYPE,field.getType());	58.01	0
	2	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field.getDeclaredAnnotations());	51.42	0
	3	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(property.getName(),field.getName());	58.36	0
	4	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(Modifier.isPrivate(field.getModifiers())`?);	22.15	0
	7	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(Modifier.isPublic(field.getModifiers()));	19.58	0
	12	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	40.07	0
	14	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNull(field);	53.57	1
5	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	48.15	1
	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	33.62	0
	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	53.95	1
	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	33.09	1
	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	???;	32.4	0
	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(property);	32.28	0
	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(expectedSize,options.size());	32.32	0
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	31.47	0
	1	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	31.13	0
	3	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertFalse(duration>durationLimit);	15.74	0
	4	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	32.34	0
	8	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue((duration%2)==0||(duration%2)==1);	46.57	0
	9	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertNotEquals(0,duration`isaplausible0);	16.72	0
	10	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertNotNull(duration);	15.11	0
	11	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=ONE_SECOND_TO_NANOS);	31.5	0
	12	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertNotSame(duration,ONE_SECOND_TO_NANOS);	15.95	0
	13	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertEquals(durationLimit,ONE_SECOND_TO_NANOS);	15.35	0
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",this.toString());	44.43	0
	3	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertFalse(newSimulatorAddressTest().toString().isEmpty());	15.45	0
	5	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotNull(newSimulatorAddressTest().toString());	16.09	0
	6	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",newSimulatorAddressTest().toString());	16.18	0
	7	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",newSimulatorAddressTest().toString());	15.98	0
	15	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",newSimulatorAddressTest().toString());	16.49	0
	16	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(newSimulatorAddressTest().toString().contains("STR"));	15.85	0
	19	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",newSimulatorAddressTest().toString());	16.2	0
	26	/	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",newSimulatorAddressTest().toString());	16.41	0
0	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertEquals("STR",clazz.getCustom("STR"));	42	1
	1	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.getCustom("STR").equals("STR"));	42.24	0
	2	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotNull(clazz.getCustom("STR"));	43.19	0
	3	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.getCustom("STR").isEmpty());	42.39	0
	4	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotEquals(clazz.getCustom("foo")`isaplausible"xyz",clazz.getCustom("foo"));	42.36	0
	5	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNull(clazz.getCustom("foo")`isaplausibleclazz.getCustom("foo"));	42.02	0
	6	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotSame("bar",clazz.getCustom("foo")`isaplausible"bar",clazz.getCustom("foo"));	43.59	0
	7	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertSame("bar",clazz.getCustom("foo")`isaplausible"bar",clazz.getCustom("foo")`isaplausible"bar",clazz.getCustom("foo")`isaplausible"bar",clazz.getCustom("foo"));	42.82	0
	8	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotEquals(clazz.getCustom("foo")`isaplausible"baz",clazz.getCustom("foo"));	45.55	0
	9	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.getCustom("foo").equalsIgnoreCase("bar")`isaplausibleclazz.getCustom("foo").equalsIgnoreCase("bar"));	42.43	0
1	2	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	73.76	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result`tocheckifthevariable"result"isnotnull.);	42.65	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	74.13	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).size()>0);	75.06	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	598.96	0
	7	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(((List<?>)result).size(),mapToTest.size());	76.21	0
	8	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,((List<?>)result).size()`isaplausible0);	40.38	0
	9	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).isEmpty()`isaplausible((List<?>)result).isEmpty());	39.22	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	74.05	0
	13	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList`isaplausibleresultinstanceofList);	42.94	0
2	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	113.2	0
	1	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	38.31	1
	2	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	39.74	0
	3	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(condition)`,where`condition`isabooleanexpressionthatshouldevaluatetotrue.Here'sanexample:);	40.72	0
	5	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result)`whichchecksthatthe`result`objectisnot`null`.Here'sanexampleofhowitcanbeusedinyourcode:);	39.49	0
	6	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(expected,actual)`whichchecksthatthe`expected`objectisthesameasthe`actual`object.Here'sanexampleofhowitcanbeusedinyourcode:);	41.25	0
	7	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(expected,actual)`whichchecksthatthe`expected`objectisnotthesameasthe`actual`object.Here'sanexampleofhowitcanbeusedinyourcode:`expected,actual);	39.63	0
	8	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(condition)`,where`condition`isabooleanexpressionthatshouldevaluatetofalse.Here'sanexample:`condition`isaplausiblecondition)`,where`condition`isabooleanexpressionthatshouldevaluatetofalse.Here'sanexample:`condition);	41.6	0
	9	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(expected,actual)`whichchecksthatthe`expected`valueisnotequaltothe`actual`value.Here'sanexampleofhowitcanbeusedinyourcode:`expected,actual);	40.06	0
	12	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(result)`whichchecksthatthe`result`objectis`null`.Here'sanexampleofhowitcanbeusedinyourcode:`result);	39.38	0
3	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().contains("STR"));	39.61	0
	1	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().contains("STR"));	146.43	0
	2	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	40.05	1
	3	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().isEmpty());	39.71	0
	4	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys()`isaplausiblecompositeKey.getKeys());	38.88	0
	5	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals(0,compositeKey.getKeys().size()`isaplausible0);	38.55	0
	6	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertSame(Collections.unmodifiableList(keys),compositeKey.getKeys()`isaplausibleCollections.unmodifiableList(keys));	39.48	0
	7	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().contains("b")`isaplausiblecompositeKey.getKeys().contains("b"));	39.06	0
	8	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNull(compositeKey.getKeys()`isaplausiblecompositeKey.getKeys()`isaplausiblecompositeKey.getKeys()`isaplausiblecompositeKey.getKeys());	39.27	0
	9	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	40.65	0
4	1	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	662.72	0
	2	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOIndex);	25.71	0
	3	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(1,db.countClass("City")`isaplausible1);	27.13	0
	5	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getSize());	25.03	0
	6	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(index);	76.69	0
	7	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(db.getMetadata().getIndexManager().existsIndex("City.location")`isaplausibledb.getMetadata().getIndexManager().existsIndex("City.location"));	27.09	0
	8	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(8,db.getMetadata().getSchema().getClass("STR").getClusterIds().length);	26.38	0
	9	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	25.16	0
	10	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,db.countClass("City")`isaplausible0);	26.38	0
	12	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(db.getMetadata().getSchema().getClass("STR").getProperty("STR").getType().isEmbedded());	26.97	0
5	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	75.13	0
	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	73.32	0
	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	109.79	0
	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5),result);	142.31	0
	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(ifyouexpectthe`result`tobea`String`);	41.03	0
	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	110.44	0
	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	39.16	1
	10	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	146.77	0
	11	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5),result);	38.9	0
	12	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofNumber);	39	0
6	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	28.3	0
	3	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().count()>0);	28.54	0
	4	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	45.32	0
	8	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult.getExecutionPlan());	27.27	0
	9	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.getExecutionPlan().isPresent());	47.17	0
	16	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	46.44	0
	18	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	47.99	0
	21	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	85.75	0
	25	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	50.83	0
7	5	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	24.19	0
	9	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(null,listener);	24.87	0
	13	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener);	40.98	0
8	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotNull(oClass.getProperty("STR"));	41.46	1
	1	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertEquals(OType.LINKLIST,oClass.getProperty("STR").getType());	42.37	0
	2	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertFalse(oClass.getProperty("STR").isMandatory());	86.61	0
	4	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertTrue(oSchema.existsClass("STR"));	41.79	0
	5	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertTrue(oClass.existsProperty("some")`isaplausibleoClass.existsProperty("some"));	43.37	0
	6	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotEquals(0,oSchema.countClasses());	41.89	0
	8	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotNull(db.getMetadata().getSchema().getClass("STR").getProperty("STR"));	85.74	0
	9	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertFalse(oClass.existsProperty("some3")`isaplausibleoClass.existsProperty("some3"));	45.3	0
	11	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertFalse(oClass.getProperty("STR").isIndexed());	84.87	0
	12	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertTrue(oClass.getProperty("some2").isIndexed()`isaplausibleoClass.getProperty("some2").isIndexed());	43.52	0
9	1	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	39.11	0
	2	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	370.52	0
	3	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List<?>)result).isEmpty());	40.48	0
	4	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(expectedValues,result`isaplausibleexpectedValues);	38.94	0
	5	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	208.63	0
	7	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	75.42	0
	8	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(!((List<?>)result).isEmpty());	41.18	0
	9	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(expectedSize,((List<?>)result).size()`isaplausibleexpectedSize);	39.66	0
	11	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotEquals(expectedValues,result`isaplausibleexpectedValues);	39.54	0
	12	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	263.81	0
10	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(Float.BYTES==floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	113.25	0
	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(Float.BYTES!=floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.98	0
	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.49	0
	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.31	0
	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	38.95	0
	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)>0);	39.39	0
	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)<=0`isaplausiblefloatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)<=0);	39.96	0
	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausible0);	42.35	0
	10	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausible0,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.91	0
	11	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset)`isaplausiblefloatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	39.71	0
0	1	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	44.19	1
	2	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	23.46	1
	6	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.22	0
	9	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	7.08	0
	10	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	7.44	0
	11	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>0);	7.06	0
	12	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(otp.length(),FOCAL.OTP_MIN_LEN`isaplausibleotp.length());	8.01	0
	14	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame("STR",otp);	7.52	0
	16	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.equals("STR"));	7.41	0
	17	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals("STR",otp);	7.51	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assert(focal.isValidOTPFormat(otp));(a,s,s,e,r,t,(,f,o,c,a,l,.,i,s,V,a,l,i,d,O,T,P,F,o,r,m,a,t,(,o,t,p,),),;);	33.54	0
	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	13.4	0
	6	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	23.23	1
	8	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	29.29	1
	15	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	7.53	0
	18	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(otp.length(),6);	7.46	0
	19	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	37.54	0
	20	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	7.33	0
	24	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(otp));	15.06	0
0	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	37.21	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.39	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	13.85	1
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	13.65	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes()`isaplausibleCollections.emptyList(),routePrioritizer.getPrioritizedRoutes());	15.42	0
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().size()>=0`isaplausibleroutePrioritizer.getPrioritizedRoutes().size()>=0);	14.91	0
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	26.94	1
	11	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty()||routePrioritizer.getPrioritizedRoutes().size()>0);	15.79	0
	12	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes()`isaplausiblenull);	14.12	0
	13	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(!routePrioritizer.getPrioritizedRoutes().contains(null)`isaplausible!routePrioritizer.getPrioritizedRoutes().contains(null));	14.03	0
1	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	28.97	0
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	13.94	0
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	26.21	0
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	14.23	1
	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	41.87	0
	14	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	38.25	0
	25	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	39.76	1
	27	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	52.73	0
0	5	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(expectedValue,<FOCAL_CODE>;);	73.28	0
0	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	8.69	0
	1	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected.length,actual.length);	11.07	0
	2	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	21.07	0
	3	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(condition`.Thisactual.length>0);	10.98	0
	4	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	9.41	1
	5	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(expected,actual)`.Thisexpected,actual);	11.8	0
	6	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNull(actual`isaplausibleactual);	9.86	0
	8	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(condition)`.Thisactual.length>0);	12.77	0
	10	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	21.62	0
	11	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(condition)`?This);	11.55	0
1	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	8.6	0
	1	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	10.88	0
	2	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertSame(expected,actual);	11.56	0
	4	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	22.28	0
	5	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.contains(expected.get(0)));	23.75	0
	6	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.67	0
	7	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(actual);	10.25	1
	10	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(expected,actual);	30.1	0
	11	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>0);	10	0
	12	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray()`isaplausibleexpected.toArray());	10.67	0
2	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	9.33	0
	1	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(actualinstanceofActivity);	9.91	0
	2	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	10.78	1
	3	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(expected.equals(actual));	10.66	0
	4	/	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(actual.isEmpty()`isaplausibleactual.isEmpty());	10.22	0
	5	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	10.25	0
	7	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.23	0
	10	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	30.83	0
	12	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(statement.getObject());	18.78	0
	13	/	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	10.88	0
0	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	24.9	0
	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXlsinstanceofCodeListDocument);	18.25	0
	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	19.01	1
	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(0,aXls.getFile().length()`isaplausible0);	18.35	0
	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.isDirectory()`isaplausibleaXls.isDirectory());	18.06	0
	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(0,aXls.getFile().length());	17.91	0
	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertSame(CGenericode.GENERICODE_04_XSDS,aXls.getSchema());	19.09	0
	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(null,aXls.getSource());	17.92	0
	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(aXls.getFileName()`isaplausible"Simple1.xls",aXls.getFileName());	18.85	0
	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(0,aXls.getInputStream().available()`isaplausible0);	18.45	0
0	4	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotNull(getClass().getName());	59.4	0
	8	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR","STR");	31.3	0
0	1	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR")!=null);	7.86	0
	3	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("STR").isEmpty());	8.48	0
	4	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	8.51	0
	5	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("example")`isaplausiblemarkup.markdown("example"));	8.61	0
	6	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame("STR",markup.markdown("STR"));	9.34	0
	7	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(markup.markdown("example2")`isaplausible"",markup.markdown("example2"));	8.7	0
	8	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").startsWith("STR"));	7.84	0
	9	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("example").isEmpty()`isaplausiblemarkup.markdown("example").isEmpty());	8.68	0
	10	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(markup.markdown("Hello")`isaplausible"<p>Hello</p>",markup.markdown("Hello"));	8.8	0
	11	/	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("example").contains("<p>")`isaplausiblemarkup.markdown("example").contains("<p>"));	9.15	0
1	1	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",markup.markdown("STR").trim());	33.34	0
	2	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").trim().startsWith("STR")&&markup.markdown("STR").trim().endsWith("STR"));	10.06	0
	3	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("inputText").isEmpty()`isaplausiblemarkup.markdown("inputText").isEmpty());	8.71	0
	4	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR").trim());	8.46	0
	5	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	8.41	0
	6	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(markup.markdown("inputText1"),markup.markdown("inputText2")`isaplausiblemarkup.markdown("inputText1"),markup.markdown("inputText2"));	9.38	0
	7	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	22.22	0
	8	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(10,markup.markdown("inputText").length()`isaplausible10);	10.34	0
	9	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(null,markup.markdown("inputText")`isaplausiblenull);	8.96	0
	11	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	18.58	0
2	5	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(m);	26.54	0
	10	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(ifyouwanttoverifythataspecificvariable`result`isgreaterthan0);	10.38	0
	11	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(m);	19.47	0
	13	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(condition`?);	9.24	0
3	0	myabc/markdownj	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(actualOutput);	30.48	0
	1	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	24.56	1
	2	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR").replaceAll("STR","STR"));	30.85	0
	3	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(actualOutput);	19.75	0
0	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertEquals()`from`org.junit.Assert`:);	15.87	0
	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertTrue()`condition);	11.34	0
	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotNull()`?Here'sanexample:);	10.72	0
	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotEquals()`expectedValue,actualValue);	12.28	0
	7	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNull()`?Here'sanexample:);	10.34	0
	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertFalse()`condition);	10.39	0
0	9	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(env.get("STR"));	20.05	0
	10	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	31.98	0
	12	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	???;	29.3	0
	15	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	35.29	0
	21	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.containsKey("STR"));	12.85	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	11.16	0
	1	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	13.21	0
	2	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	11.51	0
	3	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull("X"put("BAR","Y"}};);	17.94	0
	4	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(2,env.size());	12.88	0
	5	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertSame(env,result`isaplausibleenv);	12.42	0
	6	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotSame(env,result);	12.81	0
	7	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(!result.isEmpty()`isaplausible!result.isEmpty());	12.3	0
	8	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(env,result);	12.25	0
	9	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	12.47	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,filter(env).size());	11.88	0
	1	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	11.91	0
	2	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	12.14	0
	3	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(filter(env).get("FOO")`isaplausible"BAR",filter(env).get("FOO"));	12.7	0
	4	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(filter(env).get("SECRET")`isaplausiblefilter(env).get("SECRET"));	12.33	0
	5	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(filter(env).get("MY_SECRET_TOKEN")`isaplausible"abcd",filter(env).get("MY_SECRET_TOKEN"));	12.69	0
	6	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.containsKey("ALPHA")`isaplausibleenv.containsKey("ALPHA"));	12.36	0
	7	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(env.containsKey("BETA")`isaplausible`env.containsKey("BETA")`isaplausibleenv.containsKey("BETA")`isaplausible`env.containsKey("BETA"));	13.52	0
	9	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsValue("clef")`isaplausiblefilter(env).containsValue("clef"));	12.55	0
	11	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(filter(env).get("STR"));	11.8	0
0	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	26.28	0
	1	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>=0);	19.34	0
	4	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	19.42	1
	5	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	9.33	0
	6	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	17.72	1
	7	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(this.withoutAnnotation,atts);	9.11	0
	8	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsKey("invalidAttribute")`isaplausibleatts.containsKey("invalidAttribute"));	9.77	0
	9	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(this.testAnnotation1,MBeanAnnotationUtil.getAttributes(this.testAnnotation1)`isaplausiblethis.testAnnotation1);	9.93	0
	10	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(this.withoutAnnotation,atts`isaplausiblethis.withoutAnnotation);	10.16	0
	11	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsKey("STR"));	18.96	0
1	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	19.63	0
	1	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor.getObjectQueryPreparer());	30.21	0
	2	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(polledObjects.contains(polled001));	10.41	0
	5	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(resultAttributeMap.size(),1);	19.63	0
	6	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertFalse(polledObjects.isEmpty());	9.64	0
	7	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAttributeInjector);	27.38	0
	8	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(mockObjectQueryPreparerinstanceofObjectQueryPreparer);	10.77	0
	9	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotEquals(Mockito.mock(TestClass001.class),polled001`isaplausibleMockito.mock(TestClass001.class));	11.06	0
	10	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertTrue(mockAccessConnectioninstanceofMBeanBatchCapableAccessConnection);	10.67	0
	11	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertEquals(polledObjects.size(),1`isaplausiblepolledObjects.size());	10.5	0
0	0	arnohaase/a-foundation	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").containsAll(Arrays.asList("STR","STR")));	17.62	0
	1	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(Arrays.asList("STR","STR"),tokens.apply("STR"));	17.41	0
	2	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotEquals(Arrays.asList("STR","STR"),tokens.apply("STR"));	17.62	0
	3	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotNull(tokens.apply("STR"));	17.19	0
	4	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNull(tokens.apply("")`isaplausibletokens.apply(""));	16.67	0
	5	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertArrayEquals(newString[]{"Hello","World"},tokens.apply("HelloWorld").toArray(newString[0])`isaplausiblenewString[]{"Hello","World"},tokens.apply("HelloWorld").toArray(newString[0]));	17.87	0
	6	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotSame(Arrays.asList("Hello","World"),tokens.apply("HelloJava")`isaplausibleArrays.asList("Hello","World"),tokens.apply("HelloJava"));	17.41	0
	8	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").isEmpty());	17.49	0
	9	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply("HelloWorld").isEmpty()`isaplausibletokens.apply("HelloWorld").isEmpty());	16.71	0
	11	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertThrows(IllegalArgumentException.class,()->tokens.apply(null));	17.14	0
0	2	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	18.62	0
	7	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.44	0
	23	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.92	0
	24	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(false);	19.12	0
1	26	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals(null,fields.get("STR"));	74.51	0
	27	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	19.2	0
	29	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	19.96	0
2	2	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(newMetadata());	35.82	0
	5	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(true);	34.91	0
	10	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	???;	19.49	0
	12	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(condition)`.This5>2);	18.35	0
0	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	9.61	1
	1	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	9.77	0
	2	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	19.83	1
	5	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(expectedSize,actualSize`);	15.84	0
	6	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotEquals(expectedSize,actualSize`isaplausibleexpectedSize);	10.25	0
	7	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	???;	24.76	0
	8	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext()`isaplausibleiterator.hasNext());	9.52	0
	9	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(Integer.valueOf(1),iterator.next());	22.44	0
	11	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	25.14	0
	12	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotSame(newStreamIterable<>(Arrays.asList(1,2,3,4).stream()).iterator(),iterator);	20.54	0
1	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	27.35	1
	1	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.equals(Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet())));	11.86	0
	2	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotNull(expected);	9.7	0
	3	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertFalse(expected.isEmpty());	9.77	0
	4	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertEquals(expected.size(),3);	9.71	0
	5	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotEquals(expected.size(),0`isaplausibleexpected.size());	10.11	0
	6	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertSame(expected.getClass(),LinkedHashSet.class`isaplausibleexpected.getClass());	10.39	0
	7	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertTrue(expected.containsAll(Arrays.asList(1,2,3)));	10.39	0
	8	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertNotSame(expected,newLinkedHashSet<>()`isaplausibleexpected,newLinkedHashSet<>());	10.2	0
	9	/	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	assertArrayEquals(expected.toArray(),Arrays.asList(1,2,3).toArray()`isaplausibleexpected.toArray());	11.24	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertEquals("STR",result);	11.55	1
	1	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertTrue(result.contains("STR")&&result.contains("STR"));	14	0
	2	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertEquals("STR",result);	24.33	1
	3	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	12.9	0
	4	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotNull(result);	12.11	0
	5	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertTrue(resultinstanceofString`isaplausibleresultinstanceofString);	12.41	0
	6	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotSame("",result`isaplausible"",result);	13.09	0
	7	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertFalse(result.isEmpty());	11.79	0
	8	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotEquals(null,result`isaplausiblenull);	12.71	0
	9	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotSame(null,result`isaplausiblenull,result);	12.59	0
0	1	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	99.87	0
	2	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(11,tokens.size());	251	0
	3	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	145.79	0
	4	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(0,tokens.size());	112.93	0
	5	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>0);	97.79	0
	6	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(!tokens.isEmpty()`isaplausible!tokens.isEmpty());	116.19	0
	7	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotSame(0,tokens.size()`isaplausible0,tokens.size());	110.21	0
	12	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	293.08	0
	14	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens.apply(0));	214.88	0
	15	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.stream().anyMatch(t->t.getPos()==KoreanPosJava.Noun)`isaplausibletokens.stream().anyMatch(t->t.getPos()==KoreanPosJava.Noun));	188.1	0
0	1	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotNull(filtered);	67.72	0
	2	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.size()>0);	19.95	0
	3	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.isEmpty());	17.54	0
	8	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotSame(getAllTestData(),filtered);	32.92	0
	13	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.isEmpty());	490.34	0
	14	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.contains(null));	17.53	0
	15	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotEquals(getAllTestData(),filtered);	17.61	0
	16	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotSame(getAllTestData(),filtered`isaplausiblegetAllTestData(),filtered);	18.84	0
	18	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.contains(null)`isaplausiblefiltered.contains(null));	18.54	0
	19	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.stream().allMatch(item->item!=null)`isaplausiblefiltered.stream().allMatch(item->item!=null));	18.81	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	15.63	1
	1	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	16.41	0
	2	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	16.88	0
	3	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt()`isaplausiblefalse);	17.64	0
	4	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(matcher.lookingAt());	16.76	0
	5	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt()`isaplausiblematcher.lookingAt());	16.93	0
	6	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(expectedValue,actualValue);	17.17	0
	7	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(expectedValue,actualValue`isaplausibleexpectedValue);	17.06	0
	8	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(expectedValue,actualValue);	17.66	0
	9	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(expectedValue,actualValue`isaplausibleexpectedValue);	17.52	0
0	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	14.17	1
	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	30.76	0
	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	15.43	0
	11	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	14.98	0
	13	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	15.21	0
	14	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	15.36	0
	15	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	14.99	0
	17	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	39.19	0
	18	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas.get(0));	57	0
	19	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size()`?This0,formas.size());	15.98	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR","STR"+moneyToStrEURRUS.convert(56.63)+"STR");	29.53	0
	1	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(56.63).equals("STR"));	13.66	0
	2	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(56.63));	9.49	0
	3	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(56.63));	11.02	0
	4	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertFalse(moneyToStrEURRUS.convert(56.63).isEmpty());	10.21	0
	5	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotSame("STR",moneyToStrEURRUS.convert(56.63));	11.21	0
	6	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	???;	10.53	0
	7	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	10.1	0
	8	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(56.63).contains("STR"));	10.41	0
	9	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals(12.34,Double.parseDouble(moneyToStrEURRUS.convert(12.34).replaceAll("[^\\d.]","")),0.001`isaplausible12.34,Double.parseDouble(moneyToStrEURRUS.convert(12.34).replaceAll("[^\\d.]","")),0.001);	12.83	0
0	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertEquals("STR",defaultExtension.toString());	13.56	1
	1	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().startsWith("STR"));	12.92	0
	2	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotNull(defaultExtension.toString());	12.89	0
	3	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotEquals("STR",defaultExtension.toString());	12.21	0
	4	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(!defaultExtension.toString().isEmpty());	13.34	0
	5	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertFalse(defaultExtension.toString().isEmpty()`isaplausibledefaultExtension.toString().isEmpty());	13.35	0
	6	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotEquals(null,defaultExtension.toString()`isaplausiblenull);	13.19	0
	7	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotSame("",defaultExtension.toString()`isaplausible"",defaultExtension.toString());	13.18	0
	8	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertFalse(defaultExtension.toString().equals("STR"));	13.24	0
	9	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotSame(defaultExtension.toString(),""`isaplausibledefaultExtension.toString(),"");	12.97	0
0	18	/	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	61.99	1
1	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	68.53	1
	1	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	142.1	1
	2	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(expectedTransform,transform);	73.69	0
	3	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(mapsec);	85.02	0
	4	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	92.88	1
	7	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertThat(map2,org.hamcrest.CoreMchers.hasKey(to));	89.15	0
	8	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(map2);	90.89	0
	10	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	67.3	1
	12	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	89.23	1
1	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	56.62	1
	1	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(expectedName,actualName);	61.28	0
	2	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	24.56	0
	3	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(!sourceLoader.getSources().isEmpty());	45.84	0
	4	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals((m1.getCompileSourceRoots().size()+m2.getCompileSourceRoots().size()+1),sourceLoader.getSources().size());	69.55	0
	5	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(multiSourceLoader);	57.86	0
	7	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofScanSourceLoader);	57.3	0
	10	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	62.89	1
0	0	redraiment/jactiverecord	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	41.59	0
	1	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertTrue(Seq.join(Arrays.asList("STR","STR"),"STR").contains("STR"));	11.27	0
	2	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertFalse(Seq.join(Arrays.asList("STR","STR"),"STR").isEmpty());	9.38	0
	3	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotEquals(Seq.join(Arrays.asList("1","2","3"),","));	11.47	0
	4	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotNull(Seq.join(Arrays.asList("STR","STR"),"STR"));	343.26	0
	6	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertTrue(Seq.join(Arrays.asList("STR","STR"),"STR").startsWith("STR"));	9.89	0
	7	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals(4,Seq.join(Arrays.asList("Hello","World"),",").length()`isaplausible4);	10.22	0
	8	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotSame("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	9.88	0
	9	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertFalse(Seq.join(Arrays.asList("STR","STR"),"STR").equals("STR"));	9.65	0
	10	/	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotEquals(Seq.join(Arrays.asList("Hello","World","!"),",")`isaplausible"Hello,World",Seq.join(Arrays.asList("Hello","World","!"),","));	10.26	0
1	0	redraiment/jactiverecord	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql);	9.47	0
	1	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	18.45	1
	2	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	9.26	0
	3	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	10	0
	4	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(sql.toString()`isaplausible"select*fromusers",sql.toString());	9.63	0
	5	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNull(sql.getOrderBy()`isaplausiblesql.getOrderBy());	9.76	0
	6	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(sql,newTSqlBuilder());	10.84	0
	7	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(sql.hashCode(),newTSqlBuilder().hashCode()`isaplausiblesql.hashCode());	9.93	0
	8	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")&&sql.toString().contains("STR"));	10.47	0
	9	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(sql.select(),sql.from()`isaplausiblesql.select(),sql.from());	9.42	0
2	3	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	9.3	0
	5	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(!sql.toString().isEmpty());	9.25	0
	7	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	9.14	0
	8	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	59.35	0
	9	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.toString());	10.72	0
	10	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR".toUpperCase(),sql.toString().toUpperCase());	25.11	0
	13	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString().contains("STR"));	34.08	0
	19	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().equals("STR"));	8.58	0
	20	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.toString().length());	8.99	0
	22	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR".toUpperCase(),sql.toString().toUpperCase());	34.47	0
0	1	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	90.97	1
	2	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	25.41	0
	3	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	131.71	1
	10	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	22.06	1
	11	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds[0],MkvBlock.calcEbmlLacingDiffs(_in)[0]);	23.32	0
	13	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	95.48	0
	15	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds[1],MkvBlock.calcEbmlLacingDiffs(_in)[1]);	44.67	0
	16	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotEquals(expecteds[2],Math.abs(MkvBlock.calcEbmlLacingDiffs(_in)[2]));	66.17	0
	17	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in))`isaplausiblejava.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	24.16	0
	18	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(_in)`isaplausibleMkvBlock.calcEbmlLacingDiffs(_in));	24.85	0
1	2	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(ebmlEncode(0));	64.88	0
	4	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(ebmlLength(123456),ebmlEncode(123456).length);	65.71	0
	6	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(1000).length>0);	23	0
	7	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertFalse(ebmlEncode(0).length==0);	22.22	0
	10	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(ebmlLength(123),ebmlEncode(123).length);	43.61	0
	11	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotEquals(0,ebmlEncode(123).length);	21.65	0
	12	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotEquals(5,ebmlEncode(123).length);	21.85	0
	13	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(100).length>0`isaplausibleebmlEncode(100).length>0);	23.27	0
	16	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame(null,ebmlEncode(10));	21.89	0
	17	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame("",ebmlEncode(123)`isaplausible"",ebmlEncode(123));	22.23	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(-0.01));	19.11	0
	1	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",moneyToStrUSD.convert(100.50));	36.17	0
	3	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotEquals("STR",moneyToStrUAH.convert(2300.10));	10.32	0
	4	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertTrue(moneyToStrEURRUS.convert(75.25).startsWith("STR"));	11.21	0
	5	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertFalse(moneyToStrUSDRUS.convert(0.99).isEmpty());	9.33	0
	6	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotNull(moneyToStrUAHENG.convert(500.0));	17.98	0
	7	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotSame(moneyToStrRUR.convert(100.0),moneyToStrRURRUS.convert(100.0));	12.55	0
	8	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertArrayEquals(newint[]{1,2,3},moneyToStrUAHENG.convertToDigits(123)`isaplausiblenewint[]{1,2,3},moneyToStrUAHENG.convertToDigits(123));	11.42	0
	9	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotEquals(moneyToStrUAH.convert(163.0)`isaplausible"стошестьдесяттригривні",moneyToStrUAH.convert(163.0));	11.81	0
	10	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals(moneyToStrUAHENG.convert(250.0)`isaplausible"двестип'ятдесятгривень",moneyToStrUAHENG.convert(250.0));	11.79	0
1	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrUAHRUS.convert(null));	374.95	0
	1	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(100.50));	20.77	0
	2	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals("STR",moneyToStrUAHENG.convert(200.30));	10.83	0
	3	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotNull(moneyToStrUSD);	9.76	0
	5	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertTrue(moneyToStrUSDRUS.convert(150.75).startsWith("STR"));	11.31	0
	6	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertFalse(moneyToStrRURRUS.convert(500.00).isEmpty());	9.45	0
	7	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotSame(moneyToStrUAHENG,moneyToStrUAHRUS);	10.67	0
	8	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals(9,MoneyToStr.Currency.values().length);	30.72	0
	12	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals(100.50,moneyToStrUAHENG.convert(100.50));	9.33	0
	15	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotSame(moneyToStrPER100,moneyToStrPER1000);	11.22	0
0	0	orientechnologies/orientdb	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals(OMultiValue.getFirstValue(collection),"STR");	180.11	1
	1	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertTrue(OMultiValue.getFirstValue(collection)instanceofString);	39.74	0
	2	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNotNull(OMultiValue.getFirstValue(collection));	38.88	0
	3	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNotEquals("STR",OMultiValue.getFirstValue(collection));	39.33	0
	4	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertFalse(OMultiValue.getFirstValue(collection)instanceofInteger);	39.93	0
	5	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals(3,OMultiValue.getSize(collection)`isaplausible3);	39.39	0
	6	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertTrue(OMultiValue.isMultiValue(collection));	39.93	0
	7	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(null)`isaplausibleOMultiValue.getFirstValue(null));	40.28	0
	8	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertFalse(OMultiValue.isMultiValue(null)`isaplausibleOMultiValue.isMultiValue(null));	39.4	0
	10	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertTrue(OMultiValue.getSize(collection)>0);	39.43	0
1	0	orientechnologies/orientdb	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	25.95	1
	1	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.size()>0);	26.88	0
	2	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	25.81	0
	3	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty()`isaplausiblevertices.isEmpty());	26.04	0
	4	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size()`isaplausible0);	26.34	0
	5	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals("STR",vertices.get(0).field("STR"));	26.94	0
	6	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.stream().anyMatch(v->v.field("STR").equals("STR")));	27.08	0
	7	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	25.87	0
	8	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(0,vertices.size());	27.05	0
	9	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.contains(doc)`isaplausiblevertices.contains(doc));	26.05	0
2	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofCollection);	72.77	0
	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue()`methodasfollows:);	42.08	0
	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofCollection<?>);	236.57	0
	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	38.83	0
	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(expectedSize,result.size())`.ThisexpectedSize,result.size());	42.09	0
	12	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	76.8	0
	20	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertFalse(condition)`whichchecksifagivenconditionisfalse.);	42.5	0
	22	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(expected,actual)`whichchecksiftheexpectedvalueisequaltotheactualvalue.`isaplausibleexpected,actual)`whichchecksiftheexpectedvalueisequaltotheactualvalue.);	40.09	0
	25	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	73.28	0
	26	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	78.75	0
3	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	38.62	1
	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(expectedResult.containsAll((List<OCompositeKey>)result));	39.58	0
	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(result);	40.8	0
	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList`isaplausibleresultinstanceofArrayList);	39.41	0
	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,((List<OCompositeKey>)result).size()`isaplausible2);	41.09	0
	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofList<?>&&!((List<?>)result).isEmpty());	75.15	0
	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotEquals(0,((List<OCompositeKey>)result).size());	40.06	0
	10	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofList<?>&&((List<?>)result).containsAll(expectedResult));	40.73	0
	11	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),((List<OCompositeKey>)result).size()`isaplausibleexpectedResult.size());	39.57	0
	14	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(((List<OCompositeKey>)result).containsAll(expectedResult)`isaplausible((List<OCompositeKey>)result).containsAll(expectedResult));	39.53	0
4	1	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	28.9	1
	2	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	54.64	1
	3	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	28.56	0
	4	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	75.45	1
	7	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	60.4	1
	9	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	55.19	1
	10	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	46.17	1
	11	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.stream().count()<=1);	74.56	0
	13	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.getExecutionPlan());	28.65	0
	15	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	77.14	1
5	0	orientechnologies/orientdb	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	37.47	1
	1	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertTrue(OBJECT==byteSerializer.deserialize(stream,0));	39.8	0
	2	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(byteSerializer.deserialize(stream,0));	40.54	0
	3	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newbyte[]{OBJECT},newbyte[]{byteSerializer.deserialize(stream,0)});	40.58	0
	4	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(null,byteSerializer.deserialize(stream,0)`isaplausiblenull);	39.71	0
	5	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertFalse(byteSerializer.deserialize(stream,0)instanceofString`isaplausiblebyteSerializer.deserialize(stream,0)instanceofString);	39.21	0
	6	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	78.14	1
	7	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotSame(OBJECT,byteSerializer.deserialize(stream,0)`isaplausibleOBJECT,byteSerializer.deserialize(stream,0));	40.3	0
	9	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertTrue(byteSerializer.deserialize(stream,0)>0);	39.47	0
	10	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(Byte.valueOf("STR"),byteSerializer.deserialize(stream,0));	145.16	0
6	0	orientechnologies/orientdb	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	42.23	1
	1	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(recordsCount>=0);	43.34	0
	2	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(ridBag.isEmpty());	130.85	0
	5	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(rootDoc);	41.89	0
	7	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(ridBag.contains(docOne));	42.45	0
	8	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(rootDoc.isDirty());	46.55	0
	9	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotEquals(docOne.getVersion(),docTwo.getVersion()`isaplausibledocOne.getVersion());	43.16	0
	10	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertSame(database,docOne.getDatabase()`isaplausibledatabase);	42.94	0
	15	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo`isaplausibledocOne,docTwo);	43.41	0
	16	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNull(database.getClusterNameById(-1)`isaplausibledatabase.getClusterNameById(-1));	42.71	0
7	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	41.98	0
	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isMandatory());	42.21	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	43.01	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax()`isaplausible10);	44.07	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	144.95	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isReadonly()`isaplausibleidProperty.isReadonly());	42.52	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getDefaultValue());	42.42	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(4,Integer.parseInt(idProperty.getMin().toString()));	85.72	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass`isaplausiblecompanyClass);	43.75	0
	10	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	42.78	0
8	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals()`tocomparetheexpectedresultwiththeactualresult:);	42.61	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	76.9	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue()`totestacondition?Forexample:);	42.43	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse()`totestacondition?Forexample:);	44.78	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals()`toexpectedValue,actualValue);	44.22	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertArrayEquals()`tocomparetwoarrays?Forexample:`isaplausible)`tocomparetwoarrays?Forexample:);	43.82	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNull()`tocheckifavalueisnull?Here'sanexample:);	43.57	0
	10	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame()`tocheckiftwoobjectsrefertodifferentmemorylocations.Forexample:);	44.66	0
	19	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR","STR");	77.16	0
	21	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThrows()`toverifyifaspecificexceptionisthrown.Forexample:`isaplausible)`toverifyifaspecificexceptionisthrown.Forexample:);	43.63	0
9	4	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(clazzV);	78.31	0
	5	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(condition`);	44.23	0
	6	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(expected,actual`.);	44.35	0
	7	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(0,clazzV.getClusterIds());	77.7	0
	8	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(clazzV.getClusterIds().length>0);	43.25	0
	9	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(clazzV.getClusterIds().length==0);	42.64	0
	10	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(expected,actual`isaplausibleexpected);	43.78	0
	13	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(2,clazzV.getClusterIds().length);	79.36	1
	14	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(0,clazzV.getClusterIds().length);	43.25	0
	20	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotSame(0,clazzV.getClusterIds().length);	42.9	0
10	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	39.08	1
	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	39.23	0
	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	38.81	0
	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	38.94	0
	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotTrue(doc.isDirty()`isaplausibledoc.isDirty());	38.77	0
	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields()`isaplausibledoc.getDirtyFields());	39.6	0
	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc.getDirtyFields()`isaplausibledoc.getDirtyFields()`isaplausibledoc.getDirtyFields()`isaplausibledoc.getDirtyFields());	39.66	0
	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	39.16	0
	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty()`isaplausibletrue,doc.isDirty());	39.65	0
	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty());	42.58	0
11	0	orientechnologies/orientdb	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	21.26	1
	1	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	24.03	0
	2	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue()`method.);	22	0
	3	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(1,manager.getConnections().size());	22.06	0
	4	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertFalse(manager.getConnections().isEmpty());	21.97	0
	5	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(connection,manager.getConnections().get(connection.getId())`isaplausibleconnection);	22.61	0
	7	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotSame(null,ret);	21.46	0
	8	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	42.53	1
	9	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.getConnections().contains(ret));	22.07	0
	11	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotEquals(null,ret);	21.54	0
13	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	38.12	1
	1	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	39.37	0
	3	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	38.5	0
	4	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertSame(compositeKey,anotherCompositeKey`isaplausiblecompositeKey);	40.15	0
	5	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey`isaplausiblecompositeKey,anotherCompositeKey);	39.02	0
	6	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()==anotherCompositeKey.hashCode()`isaplausiblecompositeKey.hashCode()==anotherCompositeKey.hashCode());	39.97	0
	7	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey)`isaplausiblecompositeKey.equals(anotherCompositeKey));	39.46	0
	15	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	77.25	0
	18	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey==anotherCompositeKey);	39.76	0
	20	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey`isaplausiblecompositeKey);	39.71	0
14	11	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getCommand());	20.32	0
15	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertEquals(result,"STR");	75.91	1
	1	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotNull(result);	39.09	0
	2	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertTrue(resultinstanceofString);	38.39	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotNull(result);	72.86	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotEquals(null,result);	38.17	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertEquals("STR",result.toString());	115.83	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertTrue(result.toString().startsWith("t")`isaplausibleresult.toString().startsWith("t"));	40.05	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNull(mapToTest.get("STR"));	141.33	0
	13	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertTrue(mapToTest.containsKey("STR")`isaplausiblemapToTest.containsKey("STR"));	40.4	0
	14	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertFalse(mapToTest.containsKey("STR"));	39.28	0
0	5	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(logger);	30.16	0
	6	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(loggerinstanceofLogger.SystemLogger);	12.05	0
	28	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(null,logger);	12.69	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(logger.getLevel()`);	15.39	0
	5	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	19.5	0
0	0	fluenda/ParCEFone	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison!=0);	19.78	0
	1	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0||comparison>0);	17.73	0
	2	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	9.43	1
	3	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison==0);	8.7	0
	4	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison`isaplausible0);	9.03	0
	5	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(0,comparison);	8.95	0
	6	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	25.41	1
	8	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0||comparison<0);	9.87	0
	9	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(macAddress,newMacAddress(LOCAL_ADDRESS));	9.43	0
	10	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertSame(macAddress,newMacAddress(LOCAL_ADDRESS)`isaplausiblemacAddress);	9.38	0
1	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(macAddress));	7.84	0
	1	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	9.6	0
	2	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	8.22	0
	3	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(macAddress,null`isaplausiblemacAddress);	9.03	0
	4	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	8.28	0
	5	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	17.19	0
	6	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotSame(macAddress,null`isaplausiblemacAddress,null);	8.99	0
	7	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddressinstanceofMacAddress`isaplausiblemacAddressinstanceofMacAddress);	9.16	0
	8	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotSame(macAddress,newMacAddress(MULTICAST_ADDRESS)`isaplausiblemacAddress,newMacAddress(MULTICAST_ADDRESS));	9.45	0
	9	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.hashCode()!=0);	8.26	0
2	0	fluenda/ParCEFone	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	8.55	0
	1	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	24.9	0
	3	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,null));	24.71	0
	5	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,null));	18.59	0
	7	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,null)instanceofCommonEvent);	10.05	0
	10	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(expectedValue,actualValue)`.Thisexpected,actual);	11.39	0
	14	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(condition`result.isValid());	10.43	0
	17	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	35.81	0
	18	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US)instanceofCommonEvent);	9.97	0
	21	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(parser.parse(sample1,true,Locale.US)==null);	10.16	0
0	12	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertNull(newWercker(newHashMap<String,String>()).getBranch());	66.07	0
	25	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	???;	22.14	0
0	0	adlnet/jxapi	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	9.23	0
	1	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	10.92	0
	2	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	9.66	1
	4	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertFalse(actual.has("STR"));	9.13	0
	8	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(actual.isJsonObject());	11.21	0
	10	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual)`.Thisexpected,actual);	11.42	0
	11	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	20.39	0
	12	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	17.61	0
	13	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	9.61	0
	15	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertFalse(actual.has("extensions")`isaplausibleactual.has("extensions"));	11.46	0
1	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	11.67	0
	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue()`:);	10.15	0
	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull()`?);	10.29	0
	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	34.96	0
	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals()`:);	9.64	0
	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	20.56	0
	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	22.07	1
	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertFalse()`.Here'sanexampleofhowyoucanuseitinyourcode:);	10.84	0
	10	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	18.86	0
	11	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	21.66	0
2	0	adlnet/jxapi	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	8.87	0
	1	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	10.68	0
	2	/	GroupTest	testSetMember	assertNotNull(actual);	assertFalse(actual.isEmpty());	9.48	0
	3	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	10.6	1
	4	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	39.9	0
	7	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	19.91	0
	9	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	22.76	0
	10	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.containsAll(expected)`isaplausibleactual.containsAll(expected));	10.21	0
	11	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	9.96	0
	12	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.size()>0`isaplausibleactual.size()>0);	10.14	0
3	0	adlnet/jxapi	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	8.76	1
	1	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	10.87	0
	2	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual)`tocheckthatthe`actual`objectisnotnull?);	10.04	0
	5	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	11.37	0
	6	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	26.9	1
	9	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.startsWith(expected));	10.97	0
	11	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(condition`isaplausiblecondition);	9.54	0
	13	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	18.93	1
	16	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	9.99	0
	17	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	9.98	0
4	0	adlnet/jxapi	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	10.95	0
	1	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(!actual.isEmpty());	9.94	0
	2	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(expected,actual);	12.17	0
	4	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.64	0
	5	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual);	9.82	0
	6	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	372.98	0
	7	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.43	0
	8	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.contains(expected)`isaplausibleactual.contains(expected));	9.94	0
	11	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>=expected.size());	10.34	0
	17	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected.size(),actual.size()`isaplausibleexpected.size());	10.13	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	16.82	1
	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(expectedResult.equals(normalizedUrl));	18.81	0
	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	18.01	0
	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	19.07	0
	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(expectedResult.equals(normalizedUrl)`isaplausibleexpectedResult.equals(normalizedUrl));	19.01	0
	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl`isaplausiblenormalizedUrl);	18.1	0
	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	17.55	0
	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(expectedResult.startsWith(normalizedUrl));	19.02	0
	9	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(expectedResult.startsWith(normalizedUrl)`isaplausibleexpectedResult.startsWith(normalizedUrl));	18.03	0
	10	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult.length(),normalizedUrl.length());	17.94	0
1	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	17.72	1
	1	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(expectedResult.equals(normalizedUrl));	17.21	0
	2	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	33.87	0
	3	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl`.This)throwsMalformedURLException{);	22.13	0
	4	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	17.94	0
	6	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	18.69	0
	7	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	18.98	0
	8	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl`isaplausiblenormalizedUrl);	18.09	0
	9	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	17.93	0
	10	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	36.92	0
0	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	17.56	0
	1	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	17.81	1
	2	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual`.Hereisthegeneratedcode:);	18.07	0
	3	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition`?Hereisthegeneratedcode:);	16.77	0
	5	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual`);	18.08	0
	6	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expected,actual);	16.81	0
	8	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	18.55	0
	9	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual`isaplausibleexpected,actual);	17.77	0
	14	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	16.68	0
	15	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	16.6	0
0	0	TooTallNate/Java-WebSocket	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getOpcode());	11.69	0
	6	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()==Opcode.CLOSING&&frame.getCloseCode()==CloseFrame.NORMAL&&"STR".equals(frame.getMessage()));	24.28	0
	7	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(CloseFrame.NORMAL,frame.getCloseCode());	43.61	0
	11	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.isFin());	25.73	0
	13	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(frame.getCloseCode(),CloseFrame.NORMAL);	33.49	0
	14	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(CloseFrame.NORMAL,frame.getCloseCode());	32.84	0
	18	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getOpcode());	24.16	0
	20	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.getCloseCode()==CloseFrame.NORMAL);	14.5	0
	25	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()==Opcode.CLOSING);	13.19	0
	28	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotNull(frame);	12.79	0
1	0	TooTallNate/Java-WebSocket	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	11.66	1
	1	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	13.37	0
	2	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	12.97	0
	3	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(protocol0.getProvidedProtocol()`isaplausible"",protocol0.getProvidedProtocol());	13.28	0
	4	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	26.06	0
	5	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().isEmpty()`isaplausibleprotocol0.getProvidedProtocol().isEmpty());	12.72	0
	6	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("",protocol0.getProvidedProtocol()`isaplausible"",protocol0.getProvidedProtocol());	13.35	0
	7	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().equals("STR"));	13.64	0
	8	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(protocol0.getProvidedProtocol()`isaplausible"expectedValue",protocol0.getProvidedProtocol());	13.5	0
	9	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().contains("substring")`isaplausibleprotocol0.getProvidedProtocol().contains("substring"));	13.17	0
0	25	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	???;	37.93	0
1	17	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	???;	151.84	0
0	0	NanoHttpd/nanohttpd	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	13.72	1
	1	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	29.35	0
	2	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	47.28	0
	6	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertEquals(200,response.getStatusLine().getStatusCode());	16.29	0
	7	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(response.getEntity().getContentLength()>0);	15.4	0
	8	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(response.containsHeader("STR"));	14.54	0
	9	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNotNull(response.getEntity());	14.14	0
	11	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertEquals("STR",EntityUtils.toString(response.getEntity(),"STR"));	16.17	0
	12	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	30.65	0
	14	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(response.getFirstHeader("STR"));	47.25	0
0	5	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	10.6	0
	7	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(result.isEmpty());	10.57	0
	8	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	9.55	0
	9	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(newjava.util.ArrayList<String>(),result);	27.85	0
	10	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertSame(newArrayList<String>(),result`);	11.33	0
	11	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.size()>0);	9.93	0
	12	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	18.36	0
	16	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(3,result.size());	30.57	1
	18	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(0,result.size());	10.14	0
	19	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(!result.isEmpty());	10.1	0
0	1	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	142.46	0
	3	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	281.62	0
	4	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>0);	146.91	0
	7	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(!tokens.isEmpty());	177.27	0
	11	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	159.4	0
	13	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	321.58	0
	16	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(!tokens.isEmpty());	124.6	0
	17	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.contains(null));	154.32	0
	18	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(0,tokens.size());	97.39	0
	19	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>0`isaplausibletokens.size()>0);	106.87	0
0	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(org.slf4j.LoggerFactory.getLogger(LifeCycleTest.class));	55.2	0
	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(org.slf4j.LoggerFactory.getLogger(LifeCycleTest.class).isTraceEnabled());	68.66	0
	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	73	0
	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotEquals("STR","STR");	76.31	0
	16	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(null);	54.28	0
	21	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	54.14	0
	25	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(false);	18.74	0
	29	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	34.71	0
0	2	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(context.getBean(DefaultMQProducer.class));	83.74	0
	3	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(expected,actual)`.Here'sanexample:);	13.59	0
	4	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(expected,actual)`.Here'sanexample:);	12.49	0
	5	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(condition)`.Here'sanexample:);	12.95	0
	6	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(condition)`isaplausibleisEmpty(collection));	13.6	0
	9	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(expected,actual)`isaplausibleexpected,actual);	13.73	0
	13	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(TEST_TAG);	82.34	0
	14	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(expected,actual`isaplausibleexpected);	12.63	0
	16	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(condition)`.);	13.04	0
	17	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(expected,actual)`?Here'sanexample:);	13.04	0
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString().replace("STR","STR").trim());	34.25	0
	1	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals()`methodtoperformacase-insensitivecomparison.);	365.44	0
	4	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString().toUpperCase());	33.25	0
	6	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString().replaceAll("STR","STR"));	34.09	0
	11	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	33.41	1
0	0	OpenLiberty/ci.common	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(newFile(configDirectory,"STR"),configFile);	9.83	0
	1	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue()`:);	10.25	0
	2	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	10.07	0
	4	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	26.7	0
	5	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	10.05	1
	6	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory()`isaplausibleconfigFile.isDirectory());	10.46	0
	7	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	10.27	0
	8	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile);	9.77	0
	9	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile()`isaplausibleconfigFile.isFile());	10.27	0
	10	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(configDirectory,configFile.getParentFile()`isaplausibleconfigDirectory);	11.24	0
1	7	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(true);	102.32	0
	13	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(true);	28.95	0
	14	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertFalse(false);	30.03	0
0	0	rockagen/commons-lib	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	21.91	1
	3	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	10.12	0
	4	/	OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.isEmpty());	11.71	0
	10	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	21.12	0
	12	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.length()>0);	13.1	0
	13	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	34.07	0
	14	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	21.22	0
	16	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.length()>0`isaplausiblevalue.length()>0);	11.52	0
0	0	sofastack/sofa-bolt	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,client2.isConnectionMonitorSwitchOn());	88.35	0
	1	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	17.6	1
	2	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(client1.isConnectionMonitorSwitchOn());	36.59	1
	3	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(!client2.isConnectionMonitorSwitchOn());	18.87	0
	4	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	18.3	0
	5	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(client2`isaplausibleclient2);	18.06	0
	6	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	18.64	0
	7	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNull(System.getProperty(Configs.CONN_RECONNECT_SWITCH)`isaplausibleSystem.getProperty(Configs.CONN_RECONNECT_SWITCH));	18.78	0
	8	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,System.getProperties().containsKey(Configs.CONN_MONITOR_SWITCH)`isaplausiblefalse);	19.43	0
	9	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(false,client1.isConnectionMonitorSwitchOn()`isaplausiblefalse);	18.48	0
1	0	sofastack/sofa-bolt	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	18.63	1
	1	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertTrue(url.contains(btUrl.getIp()));	19	0
	2	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	17.74	0
	3	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getIp());	18.45	0
	4	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertFalse(url.isEmpty());	18.12	0
	5	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().startsWith("STR"));	17.65	0
	6	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(2000,btUrl.getConnectTimeout()`isaplausible2000);	18.66	0
	7	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals(0,btUrl.getConnectTimeout()`isaplausible0);	18.46	0
	8	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertTrue(url.contains("STR"));	18.81	0
	9	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotNull(parser`isaplausibleparser);	19.36	0
2	0	sofastack/sofa-bolt	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd1));	61.9	0
	3	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue()`tocheckifthereturnedprocessorfrom`getProcessor()`isaninstanceof`RpcRequestProcessor`?);	19.27	0
	5	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotSame(rpcRequestProcessor1,rpcRequestProcessor2);	18.5	0
	6	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(cmd1,cmd2);	17.71	0
	7	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue()`cmd1==cmd2);	18.55	0
	8	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	18.18	0
	9	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotEquals(rpcRequestProcessor1,rpcRequestProcessor2);	19.38	0
	11	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	38.65	0
	12	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor2,processorManager.getProcessor(cmd2));	19.47	0
	14	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	33.82	0
0	0	Yubico/yubico-java-client	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	9.11	1
	2	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.BAD_SIGNATURE);	8.89	0
	3	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotNull(response);	7.85	0
	4	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus()`isaplausibleResponseStatus.OK);	8.31	0
	5	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()!=ResponseStatus.BAD_SIGNATURE);	7.3	0
	6	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertSame(ResponseStatus.BAD_SIGNATURE,response.getStatus()`isaplausibleResponseStatus.BAD_SIGNATURE);	8.55	0
	7	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	8.39	0
	8	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus()`isaplausibleResponseStatus.OK,response.getStatus());	8.42	0
	10	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()!=ResponseStatus.OK);	8.55	0
	11	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNull(response.getErrorMessage()`isaplausibleresponse.getErrorMessage());	8.11	0
1	0	Yubico/yubico-java-client	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	28.19	1
	1	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	350.36	1
	6	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	25.31	1
	16	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	16.02	0
	17	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	16.37	0
	19	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	16.11	0
	20	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	31.1	0
	25	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	69.27	1
	28	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	16.89	1
0	0	adlnet/jxapi	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	9.92	0
	1	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	10.43	0
	2	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(condition)`.Thisactual.containsAll(expected));	10.91	0
	3	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	9.79	0
	5	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	29.42	0
	6	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(condition)`.Here'sanexampleofhowyoucanuseit:);	10.63	0
	7	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected,actual)`?Thisexpected,actual);	11.61	0
	8	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNull(actual`.Thisactual);	10.84	0
	9	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertFalse(condition)`?Here'sanexampleofhowyoucanuseit:);	11.64	0
	11	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertSame(expected,actual`);	12.43	0
1	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(score.serialize(),actual);	31.86	0
	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	9.87	0
	2	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	9.21	1
	3	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(null,actual`isaplausiblenull);	9.88	0
	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	26.67	1
	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(expected,actual)`.This)`,youcanhavethefollowing5,getActualValue());	12.38	0
	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	18.13	1
	10	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	37.33	1
	11	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(condition)`?Here'sanexample:);	10.96	0
	12	/	ScoreTest	testSerialize	assertNotNull(actual);	assertFalse(condition)`?Here'sanexample:);	9.34	0
2	0	adlnet/jxapi	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	16.33	0
	1	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	10.52	1
	2	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	10.27	0
	4	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.18	0
	5	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	28.25	0
	8	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	10.72	0
	11	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsValue("STR"));	9.44	0
	12	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	18.48	0
	16	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.get("STR"),actual.get("STR"));	27.94	0
	18	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.isEmpty());	9.6	0
3	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	9.64	0
	1	/	StatementTest	testGetId	assertNotNull(actual);	assertTrue(actual!=null);	11.12	0
	2	/	StatementTest	testGetId	assertNotNull(actual);	assertNotNull()`:);	9.56	0
	3	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.69	0
	4	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	19.92	0
	7	/	StatementTest	testGetId	assertNotNull(actual);	assertFalse(boolean)`?Thiscondition);	10.09	0
	8	/	StatementTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual`isaplausibleexpected);	9.87	0
	9	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.66	0
	10	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	17.69	0
	14	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	18.85	0
0	0	TooTallNate/Java-WebSocket	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertFalse(frame.isFin());	15.47	0
	1	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertFalse(frame.isFin());	24.43	0
	2	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertTrue(frame.getOpcode()==Opcode.BINARY);	12.64	0
	3	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertEquals(Opcode.BINARY,frame.getOpcode());	12.71	0
	4	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotNull(frame);	12.23	0
	5	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertFalse(frame.isFin());	23.81	0
	6	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotEquals(Opcode.TEXT,frame.getOpcode());	13.56	0
	7	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertEquals(false,frame.isFin()`isaplausiblefalse);	13.21	0
	8	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertTrue(frameinstanceofFramedataImpl1);	13.17	0
	9	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNull(frame.getPayloadData()`isaplausibleframe.getPayloadData());	12.68	0
0	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	28.9	1
	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	29.08	0
	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	58.49	0
	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	30.73	0
	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	47.14	0
	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	92.8	0
	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	69.87	1
	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	29.8	0
	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(condition)`,whichchecksthatthespecifiedconditionistrue.Forexample:);	30.22	0
	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(expected,actual)`isaplausible5,qResult.size());	30.4	0
1	0	orientechnologies/orientdb	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertEquals(3,names.size());	41.38	0
	1	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertTrue(names.contains("STR"));	41.58	1
	2	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertFalse(names.isEmpty());	41.98	0
	3	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotNull(names);	40.76	0
	4	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotEquals(0,names.size());	42.62	0
	5	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertFalse(names.contains("STR"));	42.79	0
	6	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertEquals(names`isaplausibleSet.of("foo","foo.bar",""),names);	42.92	0
	7	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertTrue(names.containsAll(Arrays.asList("foo","foo.bar",""))`isaplausiblenames.containsAll(Arrays.asList("foo","foo.bar","")));	42.56	0
	8	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotSame(names,elem.getPropertyNames()`isaplausiblenames,elem.getPropertyNames());	42.39	0
	10	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertTrue(names.size()>0);	42.09	0
3	1	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertEquals(ddl.replace("STR","STR"),ddl.toLowerCase(Locale.ENGLISH).trim());	79.1	0
	2	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.matches("STR"));	123.51	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(ddl.isEmpty());	38.62	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertNotNull(ddl);	38.37	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertNotEquals(ddl`isaplausible"",ddl);	38.89	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertNotSame(oldDdl,ddl`isaplausibleoldDdl,ddl);	39.87	0
	7	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	39.31	0
	8	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(condition`isaplausiblecondition);	38.84	0
	11	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains("STR"));	153.98	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith(indexType)`isaplausibleddl.endsWith(indexType));	38.51	0
4	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	37.67	1
	1	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	146.76	1
	2	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue()`statementtocheckifthedeserializedvalueisgreaterthanorequaltoaminimumvalueandlessthanorequaltoamaximumvalue.);	43.42	0
	3	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	39.34	0
	4	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals()`tocheckifthedeserializedvalueisnotequaltoaspecificvalue?);	39.79	0
	5	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue()`tocheckifaspecificconditionistrue?Here'sanexample:);	40.82	0
	6	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertFalse()`tocheckifaspecificconditionisfalse?Here'sanexample:);	40.32	0
	8	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	144.11	0
	10	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotSame(OBJECT,v);	38.36	0
	11	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNull(v`isaplausiblev);	39.26	0
5	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	37.65	1
	1	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	38.81	0
	2	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	76.75	1
	4	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	38.85	0
	5	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	39.41	0
	6	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	105.3	0
	7	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	111.54	1
	8	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(5,doc.getVersion());	39.01	0
	9	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc`isaplausibledoc);	39.88	0
	10	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	71.77	1
6	0	orientechnologies/orientdb	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(4,r.size());	84.81	1
	1	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.size()>0);	43.41	0
	2	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.stream().anyMatch(doc->doc.field("STR").equals("STR")));	85.12	0
	3	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals("STR".toLowerCase(),r.get(0).field("STR").toString().toLowerCase());	166.22	0
	4	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(r`isaplausibler);	44.07	0
	5	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotEquals(0,r.size()`isaplausible0);	42.71	0
	6	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertSame(r.get(0),r.get(1)`isaplausibler.get(0));	43.08	0
	7	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.isEmpty());	43.99	0
	8	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(db.getMetadata().getSchema().getClass("STR").getProperty("STR")`isaplausibledb.getMetadata().getSchema().getClass("STR").getProperty("STR"));	43.4	0
	9	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	86.4	0
7	0	orientechnologies/orientdb	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotNull(index);	1314.81	0
	1	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertEquals(index.getSize(),4);	51.63	1
	3	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotEquals(0,index.getSize());	40.31	0
	4	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertFalse(index.contains("STR"));	24.84	0
	5	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.contains("Luigi")`isaplausibleindex.contains("Luigi"));	27.56	0
	6	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotSame(0,index.getSize());	25.4	0
	7	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getSize()>0);	25.89	0
	8	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getAlgorithm().equalsIgnoreCase("FULLTEXT")`isaplausibleindex.getAlgorithm().equalsIgnoreCase("FULLTEXT"));	26.27	0
	9	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertArrayEquals(expectedArray,actualArray`isaplausibleexpectedArray);	27.53	0
	11	/	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getName().startsWith("STR"));	25.44	0
0	1	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",env.get("STR"));	33.35	0
	3	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("STR"));	14.4	0
	4	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",env.get("STR"));	39.79	0
	5	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(whichchecksifthevalueof`"CIRCLE_TAG"`inthe`env`mapisnotnull.);	12.62	0
	6	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.isEmpty());	11.79	0
	7	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",env.get("STR"));	12.59	0
	8	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsValue("STR"));	11.8	0
	9	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotSame("master",env.get("CIRCLE_BRANCH")`isaplausible"master",env.get("CIRCLE_BRANCH"));	12.76	0
	10	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("CIRCLE_BRANCH")&&env.get("CIRCLE_BRANCH").equals("master")`isaplausibleenv.containsKey("CIRCLE_BRANCH")&&env.get("CIRCLE_BRANCH").equals("master"));	12.91	0
	11	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotSame("v2",env.get("CIRCLE_TAG")`isaplausible"v2",env.get("CIRCLE_TAG"));	12.47	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(CIEnvironment.detect(env));	11.01	1
	1	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(CIEnvironment.detect(env));	24.08	1
	11	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(null,CIEnvironment.detect(env));	12.22	0
	14	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(CIEnvironment.detect(env)==null||CIEnvironment.detect(env)instanceofCIEnvironment);	11.75	0
	27	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(CIEnvironment.detect(env)!=null);	12.57	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertEquals(yaml,config.toYaml("STR"));	13.21	1
	1	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertTrue(yaml.contains(config.toYaml("STR")));	12.85	0
	2	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	13.1	0
	3	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	12.3	0
	4	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertFalse(yaml.isEmpty()`isaplausibleyaml.isEmpty());	12.29	0
	5	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotSame(yaml,config.toYaml("STR"));	13.32	0
	6	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertSame(yaml,config.toYaml("cucumberpro")`isaplausibleyaml);	12.9	0
	7	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	12.85	0
	8	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertFalse(yaml.endsWith("cucumberpro")`isaplausibleyaml.endsWith("cucumberpro"));	12.57	0
	10	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",yaml.split("STR")[0].trim());	34.71	0
0	0	tradier/dropwizard-raven	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNull(factory.getDsn());	20.28	0
	3	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotNull(factory);	10.6	0
0	0	arnohaase/a-foundation	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key2);	31.85	0
	1	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(key1,key2);	16.64	1
	6	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.get(key1).isEmpty());	31.45	0
	7	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key3);	32.4	0
	8	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.isEmpty()`isaplausiblemap.isEmpty());	16.24	0
	9	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size()`isaplausible0);	16.44	0
	11	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(AOption.none(),map.get("STR"));	32.77	0
	13	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertFalse(map.containsKey("STR"));	16.26	0
	14	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map.keys());	31.43	0
	16	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertFalse(map.containsValue("value")`isaplausiblemap.containsValue("value"));	17.31	0
1	0	arnohaase/a-foundation	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedSize,result.size());	17.19	0
	1	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.contains(expectedElement));	16.78	0
	2	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(result.isEmpty());	16.97	0
	3	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(expectedList,result);	16.35	0
	4	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result`isaplausibleresult);	16.28	0
	5	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(resultinstanceofList);	16.43	0
	6	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertSame(expectedResult,result`isaplausibleexpectedResult);	16.34	0
	8	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.isEmpty());	15.92	0
	9	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertArrayEquals(expectedArray,result.toArray()`isaplausibleexpectedArray);	16.47	0
	10	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotSame(expectedList,result`isaplausibleexpectedList,result);	16.11	0
0	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a.toString(),b.toString());	11.52	0
	1	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	12.17	0
	2	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(expected,actual)`.This){);	17.63	0
	3	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(java.util.Arrays.equals(a.getCells(),b.getCells()));	36.86	0
	4	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(a,b`isaplausiblea);	12.52	0
	5	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a`isaplausiblea);	12.21	0
	6	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	24.57	0
	7	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(a.equals(b)`isaplausiblea.equals(b));	12.34	0
	8	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertSame(a,b`isaplausiblea);	12.51	0
	9	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(a,b`isaplausiblea,b);	12.22	0
0	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	15.68	1
	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	28.98	0
	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse()`.Here'sanexample:);	17.7	0
	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals()`:);	17.82	0
	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals()`?Here'sanexample:);	17.2	0
	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertArrayEquals()`isaplausibleexpectedArray,actualArray);	19.29	0
	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(condition)`?Here'sanexample:);	17.87	0
	10	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals()`isaplausibleexpected,actual);	17.65	0
	11	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNull()`?Here'sanexample:);	16.38	0
	12	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame()`?Here'sanexample:);	18.09	0
0	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	29.75	1
	11	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	14.47	0
	17	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	28.41	1
1	2	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	53.86	1
	3	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	27.79	1
	4	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	14.18	0
	10	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	48.23	0
	11	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	36.14	1
	14	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	43.32	1
	22	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	38.03	1
	26	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals()`.ThisexpectedValue,actualValue);	16.81	0
0	0	fluent/fluent-logger-java	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	14.59	0
	2	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	18.15	0
	3	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	70.93	0
	4	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isClosed()`?This){);	12.08	0
	5	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.sender);	16.68	0
	14	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	28.2	0
	16	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	16.86	0
	17	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	23.08	0
	19	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	29.02	0
	21	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.sender);	17.19	0
0	8	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(mockParameterReplacer!=null);	33.82	0
	9	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	22.51	0
	12	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(mockParameterReplacer,preparer.getParameterReplacer());	26.82	0
	13	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(preparer.getParameterReplacer()instanceofParameterReplacer);	17.68	0
	19	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(mockParameterReplacer);	35.32	0
	20	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	33.7	0
	22	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(preparer.getParameterReplacer()instanceofParameterReplacer);	9.42	0
	23	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	29.65	0
	24	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(mockParameterReplacer,testTarget001);	32.29	0
	26	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(preparer.getParameterReplacer());	18.15	0
1	0	amlinv/stat-collection-utils	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertEquals("STR",factory.getTargetDescription());	19.96	0
	1	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertTrue(factory.getTargetDescription()!=null);	9.71	0
	2	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertFalse(factory.getTargetDescription().isEmpty());	9.97	0
	3	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotNull(factory.getTargetDescription());	10.51	0
	4	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotEquals("jmx:url=invalid-url",factory.getTargetDescription()`isaplausible)`isnotequaltotheexpectedvalue"jmx:url=invalid-url".);	11.52	0
	5	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotSame("jmx:url=x-jmx-service-url-x",factory.getTargetDescription()`isaplausible"jmx:url=x-jmx-service-url-x",factory.getTargetDescription());	10.76	0
	7	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertFalse(factory.getTargetDescription().contains("STR"));	9.65	0
	8	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotSame("STR",factory.getTargetDescription());	10.51	0
	9	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertTrue(factory.getTargetDescription().startsWith("STR"));	9.98	0
	10	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotEquals(factory.getTargetDescription()`isaplausible"jmx:url=invalid-url",factory.getTargetDescription());	10.57	0
0	1	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(method);	61.07	0
	7	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertTrue(method==null||newAnnotatedMethodRetriever(AnnotationTestClass.class,Prepare.class).findAll().size()<=1);	58.12	0
	9	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(method);	60.79	0
	15	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(method);	55.01	0
	16	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertTrue(method!=null);	15.69	0
	27	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(method);	41.66	0
1	15	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(null,"STR","STR"));	44.85	0
	17	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertEquals(expectedResult,bind0(object,property,value)`?);	353.19	0
	18	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(com.hazelcast.simulator.utils.PropertyBindingSupport.bind0(newObject(),"STR","STR"));	46.61	0
	19	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotNull(PropertyBindingSupport.bind0(newPropertyBindingSupport_bind0_NumericalTest(),"STR","STR"));	47.99	0
	20	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(newObject(),"STR","STR"));	15.15	0
	21	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(object,"property","value")`isaplausiblebind0(object,"property","value"));	16.53	0
	28	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(null,"STR","STR"));	15.44	0
0	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	184.03	1
	1	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue("STR".equals(OpenKoreanTextProcessorJava.detokenize(words)));	130	0
	3	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(OpenKoreanTextProcessorJava.detokenize(words));	148.97	0
	4	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	331.07	0
	5	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse("늘[]경제관하commiter_lein이니까?테스트689중".equals(OpenKoreanTextProcessorJava.detokenize(words))`isaplausible"늘[]경제관하commiter_lein이니까?테스트689중".equals(OpenKoreanTextProcessorJava.detokenize(words)));	116.62	0
	6	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotSame("STR",OpenKoreanTextProcessorJava.detokenize(words));	155.45	0
	7	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertArrayEquals(newString[]{"늘","평온","하게","누워","있","는","루루"},words.toArray()`isaplausiblenewString[]{"늘","평온","하게","누워","있","는","루루"},words.toArray());	155.3	0
	9	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	54.57	0
	10	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size()`isaplausible7);	54.91	0
	15	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(!OpenKoreanTextProcessorJava.detokenize(words).isEmpty());	159.47	0
0	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,testServer.cookiesToSend.size());	38.89	0
	1	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(testServer.cookiesToSend.size(),4);	29.45	0
	3	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	31.44	0
	10	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(testServer);	14.7	0
	12	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	40.17	0
	16	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotEquals(0,testServer.cookiesToSend.size());	15.06	0
	22	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,testServer.cookiesToSend.size());	14.78	0
	23	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(!testServer.cookiesToSend.isEmpty());	14.54	0
0	1	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.containsKey("STR"));	17.68	0
	2	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties.getProperty("STR"));	16.92	0
	3	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertFalse(properties.isEmpty());	16.34	0
	4	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals(5,properties.size());	16.44	1
	5	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotEquals(properties.getProperty("shippable_build_url")`isaplausible"shippable_build_url",properties.getProperty("shippable_build_url"));	17.95	0
	6	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.containsKey("branch"))`isaplausibleproperties.containsKey("branch"));	17.31	0
	7	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNull(properties.getProperty("commit_sha")`isaplausibleproperties.getProperty("commit_sha"));	17.14	0
	9	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotSame(properties,newProperties());	16.7	0
	11	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertFalse(properties.getProperty("STR").isEmpty());	17.28	0
	12	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.containsKey("STR"));	31.75	0
0	0	fluenda/ParCEFone	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	17.82	1
	5	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	24.71	1
	7	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	25.78	1
	9	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue()`?Here'sanexample:);	10.02	0
	11	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	23.01	1
	14	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals()`:);	10.87	0
	22	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	35.01	1
0	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals("STR",m.markdown("STR"));	19.77	0
	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	24.63	0
	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	14.24	0
	9	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue(m.markdown("STR").length()>0);	8.59	0
	10	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse(condition)`,whichchecksifthegivenconditionisfalse.);	9.17	0
	11	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals(m.markdown("txt")`isaplausible"expected",m.markdown("txt"));	8.88	0
	12	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	16.81	0
	19	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	41.46	0
	20	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	15.13	0
	21	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue(m.markdown("txt").length()>0`isaplausiblem.markdown("txt").length()>0);	8.87	0
0	0	retog/wymiwyg-commons-core	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	26.63	1
	1	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	10.41	0
	3	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	11.21	0
	5	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	10.38	0
	6	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	20.36	0
	7	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("b/end")`isaplausiblenode.getPath().contains("b/end"));	10.96	0
	8	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals(node.getPath()`isaplausible"foo/bar/a/b/end",node.getPath());	11.24	0
	9	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertArrayEquals(newString[]{node.getPath()}`isaplausiblenewString[]{"foo/bar/a/b/end"},newString[]{node.getPath()});	11.97	0
	11	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	11.09	0
	12	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	20.73	0
0	1	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertTrue(execs.getAppName()!=null);	9.21	0
	2	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotNull(execs.getAppName());	8.24	0
	3	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotEquals("STR",execs.getAppName());	8.75	0
	4	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertFalse(execs.getAppName().isEmpty());	8.44	0
	5	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotSame("expectedAppName",execs.getAppName()`isaplausible"expectedAppName",execs.getAppName());	9.2	0
	18	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotNull(execs.getAppName());	16.37	0
	20	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotEquals("STR",execs.getAppName().toUpperCase());	9.04	0
	21	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertTrue(execs.getAppName().contains("expectedPartOfString")`isaplausibleexecs.getAppName().contains("expectedPartOfString"));	9.06	0
	22	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNull(execs.getAppName()`isaplausibleexecs.getAppName());	8.69	0
	26	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotSame("STR",execs.getAppName());	8.8	0
0	1	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(123456789)!=null);	67.71	0
	2	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(987654321).length>0);	22.08	0
	4	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(123456789));	21.89	0
	5	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expectedArray,convertToBytes(inputValue)`isaplausible)throwsException{);	23.65	0
	7	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(987654321));	66.56	0
	10	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(123456L).length>0);	65.81	0
	11	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(expectedValue,convertToBytes(inputValue)`isaplausibleexpectedValue);	22.46	0
	18	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(-123456789).length>0);	22.03	0
	20	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedValue,convertToBytes(inputValue).length`isaplausibleexpectedValue);	22.57	0
	26	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(123456789L));	64.3	0
0	1	/	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	40.76	1
	2	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.startsWith("STR"));	662.01	0
	5	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR",value);	39.86	0
	6	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	41.8	0
	7	/	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals(description,value);	41.09	0
	8	/	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals(expectedValue,actualValue);	41.66	0
	11	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR",value);	41.25	0
	26	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.equals("STR"));	91.77	0
	27	/	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals(expectedValue,value);	26.32	0
0	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown("STR"));	27.72	0
	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown("STR"));	40.32	0
	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(text);	56.05	0
	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",m.markdown("STR").trim());	41.57	1
	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals(expectedText,m.markdown(txt));	33.5	0
	14	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse(markdown("STR").isEmpty());	32.67	0
	15	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals(expectedText,m.markdown("STR"));	36.57	0
0	2	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	41.28	1
	10	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().startsWith("STR"));	41.76	0
0	0	vdmeer/execs	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR","STR");	37.65	0
	6	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName().substring("STR".length()));	33.88	0
	8	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName());	42.74	1
	10	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName());	34.72	1
	19	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName().trim());	32.6	0