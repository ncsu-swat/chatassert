TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Incorr	BuildErr	RunErr	TestFailure
1	0	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotNull(sql.toString());	0	0	1	0	0
1	1	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertNotEquals("""", sql.toString());"	0	0	1	0	0
1	2	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertTrue(sql.toString().contains(""SELECT * FROM""));"	0	0	1	0	0
1	3	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertEquals(0, sql.toString().indexOf(""SELECT * FROM""));"	0	0	1	0	0
1	4	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNotSame(new TSqlBuilder(), sql);	0	1	0	0	0
1	5	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertFalse(sql.toString().isEmpty());	0	0	1	0	0
1	6	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertArrayEquals(new int[]{1, 2, 3}, new int[]{1, 2, 3});	0	1	0	0	0
1	7	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertSame(sql, sql);	0	1	0	0	0
1	8	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	"assertTrue(sql.toString().startsWith(""SEL""));"	0	0	1	0	0
1	9	redraiment/jactiverecord	TSqlBuilderTest	testSelectAllFrom	"assertEquals(""STR"",sql.select().from(""STR"").toString());"	assertNull(new TSqlBuilder().toString());	0	0	1	0	0
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotNull(sql.select(""some_column"").from(""some_table""));"	0	0	1	0	0
2	1	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotNull(sql.select(""some_column"").from(""some_table"").toSql());"	0	0	1	0	0
2	2	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertTrue(sql.select(""some_column"").from(""some_table"").toSql().contains(""SELECT some_column FROM some_table""));"	0	0	1	0	0
2	4	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertArrayEquals(expectedArray, actualArray);	0	0	1	0	0
2	5	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertFalse(sql.select(""some_column"").from(""some_table"").toSql().isEmpty());"	0	0	1	0	0
2	6	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	assertNotSame(expectedObject, actualObject);	0	0	1	0	0
2	7	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertThrows(expectedException, new Executable() {
            public void execute() throws Throwable {
                sql.select(null).from(""some_table"").toSql();"	0	1	0	0	0
2	8	redraiment/jactiverecord	TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNull(sql.select(""some_column"").from(""some_table"").toSql());"	0	0	1	0	0
