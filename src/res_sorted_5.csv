TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	Yubico/yubico-java-client	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertEquals(""STR"",resultPublicId);"	0	1	67.7372829914093
	1	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertNotEquals(""STR"",resultPublicId);"	0	1	67.7372829914093
	2	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0	1	67.7372829914093
	3	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(!resultPublicId.isEmpty());	0	1	67.7372829914093
	4	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(11,resultPublicId.toCharArray().length);	0	1	67.7372829914093
	5	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertTrue(""STR"");"	0	1	67.7372829914093
	6	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertEquals(""STR"",resultPublicId.substring(0,9));"	0	1	67.7372829914093
	7	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertTrue(""STR"");"	0	1	67.7372829914093
	8	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1	1	67.7372829914093
	9	/	YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertNotSame(""STR"",resultPublicId);"	0	1	67.7372829914093
22	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertTrue(result);	0	1	35.52045798301697
	1	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertFalse(result);	0	1	35.52045798301697
	2	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotNull(propertyIndexByKey);	0	1	35.52045798301697
	3	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNull(propertyIndexByValue);	0	1	35.52045798301697
	4	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertSame(propertyIndexByIntegerKey,propertyIndexByKey);	0	1	35.52045798301697
	5	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotSame(propertyIndexByKey,propertyIndexByValue);	0	1	35.52045798301697
	6	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertEquals(OMultiValueChangeEvent.OChangeType.UPDATE,changeEvent.getChangeType());	0	1	35.52045798301697
	7	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNotNull(multiValueChangeEvent);	0	1	35.52045798301697
	8	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertNull(changeEvent.getKey());	0	1	35.52045798301697
	9	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventUpdateKey	assertTrue(keysToAdd.isEmpty());	assertFalse(keysToAdd.isEmpty());	0	1	35.52045798301697
23	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	0	1	38.078490257263184
	1	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.getRecord());	0	1	38.078490257263184
	2	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.getAsDocument());	0	1	38.078490257263184
	3	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotEquals(null,serializer.toStream(newODocument(),true));	0	1	38.078490257263184
	4	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertNotEquals(null,serializer.fromStream(newbyte[]{},null,null));	0	1	38.078490257263184
	5	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	"assertArrayEquals(""STR"",""STR"");"	0	1	38.078490257263184
	6	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertFalse(extr.isDirty());	0	1	38.078490257263184
	7	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertFalse(extr.isDirty());	0	1	38.078490257263184
	8	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertTrue(extr.isEmbedded());	0	1	38.078490257263184
	9	/	ODocumentSchemalessBinarySerializationTest	testArrayOfArray	assertEquals(extr.fields(),document.fields());	assertTrue(serializerinstanceofORecordSerializer);	0	1	38.078490257263184
24	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertNotNull(result);	0	1	45.86978602409363
	1	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1	1	45.86978602409363
	2	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0	1	45.86978602409363
	3	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	"assertSame(result,""STR"");"	0	1	45.86978602409363
	4	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0	1	45.86978602409363
	5	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	"assertArrayEquals(""STR"",""STR"");"	0	1	45.86978602409363
	6	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	"assertEquals(""STR"",""STR"");"	0	1	45.86978602409363
	7	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertNull(result.getExecutionPlan());	0	1	45.86978602409363
	8	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	assertThrows(NullPointerException.class,()->db.query(null));	0	1	45.86978602409363
	9	/	OSelectStatementExecutionTest	testNewRid	assertTrue(result.hasNext());	"assertThrows(OCommandSQLParsingException.class,""STR"");"	0	1	45.86978602409363
25	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertNotNull(qResult);	0	1	22.00604486465454
	1	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertEquals(26,qResult.size());	0	1	22.00604486465454
	2	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	0	1	22.00604486465454
	3	/	OCommandExecutorSQLSelectTest	testProjection2	assertEquals(qResult.size(),2);	assertSame(ODocument.class,qResult.get(0).getClass());	0	1	22.00604486465454
26	0	orientechnologies/orientdb	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotNull(rs);	0	1	89.7666380405426
	1	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertEquals(0,rs.getMetaData().getColumnCount());	0	1	89.7666380405426
	2	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertFalse(rs.next());	0	1	89.7666380405426
	3	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	"assertNull(""STR"");"	0	1	89.7666380405426
	4	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotEquals(0,rs.getFetchSize());	0	1	89.7666380405426
	5	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertEquals(0,rs.getRow());	0	1	89.7666380405426
	6	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertTrue(ds.getConnection().isValid(0));	0	1	89.7666380405426
	7	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotNull(ds.getConnection());	0	1	89.7666380405426
	8	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertNotEquals(0,ds.getLoginTimeout());	0	1	89.7666380405426
	9	/	OrientJdbcResultSetTest	shouldReturnEmptyResultSet	assertThat(rs.next()).isFalse();	assertTrue(ds.isWrapperFor(OrientDataSource.class));	0	1	89.7666380405426
27	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertNotNull(result);	0	1	58.39079308509827
	1	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(resultinstanceofOCompositeKey);	0	1	58.39079308509827
	2	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertEquals(2,((OCompositeKey)result).getKeys().size());	0	1	58.39079308509827
	3	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertFalse(((OCompositeKey)result).getKeys().isEmpty());	0	1	58.39079308509827
	4	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(((OCompositeKey)result).getKeys().get(0)instanceofInteger);	0	1	58.39079308509827
	5	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(((OCompositeKey)result).getKeys().get(1)instanceofString);	0	1	58.39079308509827
	6	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"assertArrayEquals(newObject[]{12,""STR"");"	0	1	58.39079308509827
	7	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(((OCompositeKey)result).getComparator()instanceofODefaultComparator);	0	1	58.39079308509827
	8	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertNotEquals(12,((OCompositeKey)result).hashCode());	0	1	58.39079308509827
	9	/	OCompositeIndexDefinitionTest	testCreateValueSuccessful	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertEquals(OCompositeKey.class,((OCompositeKey)result).getClass());	0	1	58.39079308509827
28	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertNotNull(compositeIndex);	0	1	62.15559697151184
	1	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertEquals(2,compositeIndex.getFields().size());	0	1	62.15559697151184
	2	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertFalse(compositeIndex.isNull());	0	1	62.15559697151184
	3	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertEquals(2,compositeIndex.getDefinition().getFields().size());	0	1	62.15559697151184
	4	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(compositeIndex.getDefinition().getFields().getClass().isArray());	0	1	62.15559697151184
	5	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"assertEquals(""STR"",compositeIndex.getFields().get(0));"	0	1	62.15559697151184
	6	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertTrue(compositeIndex.getFields().equals(compositeIndex.getFields()));	0	1	62.15559697151184
	7	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertNotEquals(compositeIndex.hashCode(),compositeIndex.clone().hashCode());	0	1	62.15559697151184
	8	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	assertNotEquals(0,compositeIndex.getFields().size());	0	1	62.15559697151184
	9	/	OCompositeIndexDefinitionTest	testCreateValueDefinitionsMoreThanParams	"assertEquals(result,newOCompositeKey(Arrays.asList(12,""STR"")));"	"assertArrayEquals(""STR"",compositeIndex.getFields().toArray());"	0	1	62.15559697151184
29	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(compositeIndex);	0	1	53.553367137908936
	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	0	1	53.553367137908936
	2	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(result.isEmpty());	0	1	53.553367137908936
	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),result.size());	0	1	53.553367137908936
	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(3,result.size());	0	1	53.553367137908936
	5	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(0),result.get(0).getKeys().get(0));	0	1	53.553367137908936
	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(1),result.get(0).getKeys().get(1));	0	1	53.553367137908936
	7	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0).getKeys().get(2),result.get(0).getKeys().get(2));	0	1	53.553367137908936
	8	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(1).getKeys().get(0),result.get(1).getKeys().get(0));	0	1	53.553367137908936
	9	/	OCompositeIndexDefinitionTest	testDocumentToIndexRidBagValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(1).getKeys().get(1),result.get(1).getKeys().get(1));	0	1	53.553367137908936
30	0	orientechnologies/orientdb	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.isEmbedded());	0	1	31.810429096221924
	1	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	0	1	31.810429096221924
	2	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0	1	31.810429096221924
	3	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	"assertSame(doc1,""STR"");"	0	1	31.810429096221924
	4	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	"assertNull(""STR"");"	0	1	31.810429096221924
	5	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc1.isEmbedded());	0	1	31.810429096221924
	6	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	"assertSame(doc2,""STR"");"	0	1	31.810429096221924
	7	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertEquals(0,manager.getCreatedRecords().size());	0	1	31.810429096221924
	8	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertSame(doc1,manager.getRecord(doc1));	0	1	31.810429096221924
	9	/	ODirtyManagerTest	testEmbeddedDocument	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.isDirty(doc));	0	1	31.810429096221924
31	0	orientechnologies/orientdb	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(-1,compositeKey.compareTo(anotherCompositeKey));	0	1	93.51924896240234
	1	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(1,anotherCompositeKey.compareTo(compositeKey));	0	1	93.51924896240234
	2	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertEquals(0,compositeKey.compareTo(compositeKey));	0	1	93.51924896240234
	3	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertFalse(compositeKey.equals(null));	0	1	93.51924896240234
	4	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(compositeKey.equals(compositeKey));	0	1	93.51924896240234
	5	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertFalse(compositeKey.equals(anotherCompositeKey));	0	1	93.51924896240234
	6	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(anotherCompositeKey.equals(anotherCompositeKey));	0	1	93.51924896240234
	7	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertTrue(anotherCompositeKey.equals(compositeKey));	0	1	93.51924896240234
	8	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertNotNull(compositeKey);	0	1	93.51924896240234
	9	/	OCompositeKeyTest	testCompareToPartiallySecondCase	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	assertNotNull(anotherCompositeKey);	0	1	93.51924896240234
32	0	orientechnologies/orientdb	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertNotNull(context);	0	1	77.30211687088013
	1	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertEquals(""STR"",type.name());"	0	1	77.30211687088013
	2	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertFalse(""STR"");"	0	1	77.30211687088013
	3	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertTrue(context.exists(name.getMethodName()));	0	1	77.30211687088013
	4	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertSame(db,""STR"");"	0	1	77.30211687088013
	5	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertFalse(execute.isEmpty());	0	1	77.30211687088013
	6	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	assertEquals(3,execute.size());	0	1	77.30211687088013
	7	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertNotEquals(0,""STR"");"	0	1	77.30211687088013
	8	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertFalse(""STR"");"	0	1	77.30211687088013
	9	/	LuceneSpatialDistanceSphereTest	testWithinIndex	assertEquals(2,execute.size());	"assertTrue(""STR"");"	0	1	77.30211687088013
33	0	orientechnologies/orientdb	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(nameProperty);	0	1	55.95959496498108
	1	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(nameProperty.getName(),PROP_NAME);	1	1	55.95959496498108
	2	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(actual,equalTo(expected));	0	1	55.95959496498108
	3	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertThat(actual,closeTo(expected,delta));	0	1	55.95959496498108
	4	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertEquals(expected,actual);	0	1	55.95959496498108
	5	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertTrue(db.exists());	0	1	55.95959496498108
	6	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertNotNull(clazz);	0	1	55.95959496498108
	7	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	"assertEquals(""STR"",clazz.getName());"	0	1	55.95959496498108
	8	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	assertFalse(clazz.isAbstract());	0	1	55.95959496498108
	9	/	OCreatePropertyStatementExecutionTest	testIfNotExists	assertEquals(nameProperty.getName(),PROP_NAME);	"assertThat(actual,""STR"");"	0	1	55.95959496498108
34	0	orientechnologies/orientdb	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(123.456,focal.deserializeFromByteBufferObject(buffer));	0	1	39.36443901062012
	1	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotNull(buffer);	0	1	39.36443901062012
	2	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertEquals(8,stream.length);	0	1	39.36443901062012
	3	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(OBJECT.equals(OBJECT));	0	1	39.36443901062012
	4	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertFalse(OBJECT.equals(null));	0	1	39.36443901062012
	5	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertArrayEquals(stream,streamCopy);	0	1	39.36443901062012
	6	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(buffer.isDirect());	0	1	39.36443901062012
	7	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertTrue(doubleSerializerinstanceofODoubleSerializer);	0	1	39.36443901062012
	8	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertNotEquals(0,Double.compare(focal.deserializeFromByteBufferObject(buffer),0.0));	0	1	39.36443901062012
	9	/	DoubleSerializerTest	testNativeDirectMemoryCompatibility	assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);	assertThrows(BufferOverflowException.class,()->buffer.putInt(42));	0	1	39.36443901062012
35	0	orientechnologies/orientdb	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertNotNull(dbPool);	0	1	32.34981107711792
	1	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertNotNull(db);	0	1	32.34981107711792
	2	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	"assertEquals(""STR"",dbName);"	0	1	32.34981107711792
	3	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(db.getName().equals(dbName));	0	1	32.34981107711792
	4	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	0	1	32.34981107711792
	5	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	0	1	32.34981107711792
	6	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.getAvailableInstances()>=1);	0	1	32.34981107711792
	7	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.acquire()instanceofODatabaseDocumentTx);	0	1	32.34981107711792
	8	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertTrue(dbPool.isAutoCreate());	0	1	32.34981107711792
	9	/	LuceneSpatialDropTest	testDeleteLuceneIndex1	assertEquals(insertcount,result.size());	assertFalse(db.isClosed());	0	1	32.34981107711792
36	0	orientechnologies/orientdb	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1	1	89.31050610542297
	1	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(db);	0	1	89.31050610542297
	2	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertTrue(context.exists(name.getMethodName()));	0	1	89.31050610542297
	3	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertFalse(db.isClosed());	0	1	89.31050610542297
	4	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0	1	89.31050610542297
	5	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertEquals(8,db.getClusters());	0	1	89.31050610542297
	6	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(query);	0	1	89.31050610542297
	7	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(params);	0	1	89.31050610542297
	8	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertNotNull(db.getMetadata());	0	1	89.31050610542297
	9	/	LuceneMiscTest	testUnderscoreField	assertEquals(results.size(),1);	assertTrue(db.exists(name.getMethodName()));	0	1	89.31050610542297
37	0	adlnet/jxapi	AboutTest	testSetVersion	assertNotNull(version);	assertNotNull(version);	1	1	65.77685189247131
	1	/	AboutTest	testSetVersion	assertNotNull(version);	assertEquals(version.size(),1);	0	1	65.77685189247131
	2	/	AboutTest	testSetVersion	assertNotNull(version);	assertArrayEquals(versionInput.toArray(),about.getVersion().toArray());	0	1	65.77685189247131
	3	/	AboutTest	testSetVersion	assertNotNull(version);	"assertNotEquals(version.get(0),""STR"");"	0	1	65.77685189247131
	4	/	AboutTest	testSetVersion	assertNotNull(version);	"assertThrows(UnsupportedOperationException.class,""STR"");"	0	1	65.77685189247131
	5	/	AboutTest	testSetVersion	assertNotNull(version);	assertEquals(versionInput,version);	0	1	65.77685189247131
	6	/	AboutTest	testSetVersion	assertNotNull(version);	"assertTrue(""STR"");"	0	1	65.77685189247131
	7	/	AboutTest	testSetVersion	assertNotNull(version);	"assertFalse(""STR"");"	0	1	65.77685189247131
	8	/	AboutTest	testSetVersion	assertNotNull(version);	assertNull(about.getVersion().get(1));	0	1	65.77685189247131
	9	/	AboutTest	testSetVersion	assertNotNull(version);	"assertTrue(""STR"");"	0	1	65.77685189247131
38	0	adlnet/jxapi	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected,actual);	0	1	72.68423199653625
	1	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotNull(actual);	1	1	72.68423199653625
	2	/	ContextTest	testGetRevision	assertNotNull(actual);	assertTrue(expected.contains(actual));	0	1	72.68423199653625
	3	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotEquals(expected,actual);	0	1	72.68423199653625
	4	/	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected.toUpperCase(),actual.toUpperCase());	0	1	72.68423199653625
	5	/	ContextTest	testGetRevision	assertNotNull(actual);	assertEquals(expected.charAt(0),actual.charAt(0));	0	1	72.68423199653625
	6	/	ContextTest	testGetRevision	assertNotNull(actual);	assertFalse(expected.equals(actual));	0	1	72.68423199653625
	7	/	ContextTest	testGetRevision	assertNotNull(actual);	assertTrue(expected.startsWith(actual.substring(0,1)));	0	1	72.68423199653625
	8	/	ContextTest	testGetRevision	assertNotNull(actual);	assertFalse(actual.endsWith(expected.substring(0,1)));	0	1	72.68423199653625
	9	/	ContextTest	testGetRevision	assertNotNull(actual);	assertNotSame(expected.toCharArray().length,actual.toCharArray().length);	0	1	72.68423199653625
39	0	adlnet/jxapi	VerbsTest	testAnswered	assertNotNull(actual);	"assertEquals(""STR"",actual.getVerb());"	0	1	62.07177400588989
	1	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1	1	62.07177400588989
	2	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals(null,actual);	0	1	62.07177400588989
	3	/	VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0	1	62.07177400588989
	4	/	VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.isNegated());	0	1	62.07177400588989
	5	/	VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(7,actual.getLength());	0	1	62.07177400588989
	6	/	VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),actual);	0	1	62.07177400588989
	7	/	VerbsTest	testAnswered	assertNotNull(actual);	assertSame(actual,Verbs.answered());	0	1	62.07177400588989
	8	/	VerbsTest	testAnswered	assertNotNull(actual);	"assertEquals(""STR"",actual.toString());"	0	1	62.07177400588989
	9	/	VerbsTest	testAnswered	assertNotNull(actual);	"assertNotEquals(""STR"",actual.getVerb());"	0	1	62.07177400588989
40	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0	1	18.52558183670044
41	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(SCALED,score.getScaled());	0	1	40.81666398048401
	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(RAW,score.getRaw());	0	1	40.81666398048401
	2	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MIN,score.getMin());	0	1	40.81666398048401
	3	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MAX,score.getMax());	0	1	40.81666398048401
	4	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(SCALED,score.getRaw());	0	1	40.81666398048401
	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(MAX,score.getMin());	0	1	40.81666398048401
	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertFalse(SCALED<RAW);	0	1	40.81666398048401
	7	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(MAX>MIN);	0	1	40.81666398048401
	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1	1	40.81666398048401
	9	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0	1	40.81666398048401
42	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0	1	49.29285216331482
	1	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0	1	49.29285216331482
	2	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0	1	49.29285216331482
	3	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1	1	49.29285216331482
	4	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0	1	49.29285216331482
	5	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	0	1	49.29285216331482
	6	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(Object.class,schemas.get(0).getClass());	0	1	49.29285216331482
	7	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertArrayEquals(newXsdSchema[]{schemas.get(0)},schemas.toArray());	0	1	49.29285216331482
	8	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser);	0	1	49.29285216331482
	9	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(Stream.class,getResultXsdSchemas().getClass());	0	1	49.29285216331482
43	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	0	1	53.14764404296875
	1	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.isEmpty());	0	1	53.14764404296875
	2	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotEquals(0,result.size());	0	1	53.14764404296875
	3	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(4,result.size());	0	1	53.14764404296875
	4	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(workerData->workerData.getAddress().equals(agent1)));	0	1	53.14764404296875
	5	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(workerData->workerData.getAddress().equals(agent2)));	0	1	53.14764404296875
	6	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertSame(list.get(2),result.get(0));	0	1	53.14764404296875
	7	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotSame(list.get(1),result.get(0));	0	1	53.14764404296875
	8	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(list.get(0).getAddress().toString(),result.get(0).getAddress().toString());	0	1	53.14764404296875
	9	/	WorkerQueryTest	workerAddresses	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(list.get(2).getAddress().toString(),result.get(1).getAddress().toString());	0	1	53.14764404296875
44	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(testContainer);	0	1	45.55966806411743
	1	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(currentPhase.get());	0	1	45.55966806411743
	2	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertEquals(TestPhase.SETUP,testPhase);	0	1	45.55966806411743
	3	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotNull(userDir```);	0	1	45.55966806411743
	4	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertFalse(taskPerPhaseMap.isEmpty());	0	1	45.55966806411743
	5	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertNotEquals(currentPhase.get()```,```taskPerPhaseMap.get(TestPhase.SETUP));	0	1	45.55966806411743
	6	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertTrue(currentPhase.compareAndSet(null,TestPhase.SETUP)```and```currentPhase.compareAndSet(null,TestPhase.RUN));	0	1	45.55966806411743
	7	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertThrows(NullPointerException.class,()->taskPerPhaseMap.get(null)```,```ExceptionReporter.getInstance(),null```,```userDir,null```,```ExceptionReporter.getExceptions().isEmpty());	0	1	45.55966806411743
	8	/	TestContainer_BasicTest	testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass	assertTrue(test.childRunCalled);	assertTrue(```testPhase);	0	1	45.55966806411743
45	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(userDir);	0	1	70.25544714927673
	1	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testInstance);	0	1	70.25544714927673
	2	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstanceinstanceofSuccessTest);	0	1	70.25544714927673
	3	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstance.hashCode()>0);	0	1	70.25544714927673
	4	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstance.equals(testInstance));	0	1	70.25544714927673
	5	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testInstance.equals(null));	0	1	70.25544714927673
	6	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	"assertEquals(""STR"",test.getClass().getSimpleName());"	0	1	70.25544714927673
	7	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	"assertEquals(""STR"",testContainer.getTestCase().getName());"	0	1	70.25544714927673
	8	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNull(testContext.getException());	0	1	70.25544714927673
	9	/	TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.isValid());	0	1	70.25544714927673
46	0	hazelcast/hazelcast-simulator	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	"assertEquals(""STR"",actual);"	0	1	56.91342782974243
	1	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	"assertNotEquals(""STR"",actual);"	0	1	56.91342782974243
	2	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	"assertTrue(""STR"");"	0	1	56.91342782974243
	3	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertFalse(actual.isEmpty());	0	1	56.91342782974243
	4	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertNull(humanReadableByteCount(-1,false));	0	1	56.91342782974243
	5	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertNotNull(actual);	0	1	56.91342782974243
	6	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertSame(actual,humanReadableByteCount(Integer.MAX_VALUE,true));	0	1	56.91342782974243
	7	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertNotSame(humanReadableByteCount(1024,true),humanReadableByteCount(2048,true));	0	1	56.91342782974243
	8	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	"assertArrayEquals(""STR"",newString[]{humanReadableByteCount(1,true)});"	0	1	56.91342782974243
	9	/	FormatUtilsTest	testHumanReadableByteCount_GigaByte_NoSI	"assertEqualsStringFormat(""STR"",""STR"",actual);"	assertThrows(IllegalArgumentException.class,()->humanReadableByteCount(-1,false));	0	1	56.91342782974243
47	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotNull(workerAddress(1,3));	0	1	49.078059673309326
	1	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotNull(workerAddress(2,3));	0	1	49.078059673309326
	2	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertTrue(workerAddress(4,5)instanceofSimulatorAddress);	0	1	49.078059673309326
	3	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(workerAddress(6,7).getNodeType(),WORKER);	0	1	49.078059673309326
	4	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(4,workerAddress(2,4).getWorkerIndex());	0	1	49.078059673309326
	5	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	"assertEquals(""STR"",workerAddress(1,2).toString());"	0	1	49.078059673309326
	6	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertEquals(1,workerAddress(1,2).getAgentIndex());	0	1	49.078059673309326
	7	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(8,9).getAgentIndex(),workerAddress(10,11).getWorkerIndex());	0	1	49.078059673309326
	8	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(2,1),workerAddress(1,2));	0	1	49.078059673309326
	9	/	SimulatorAddressTest	testFromString_Worker	assertToAndFromStringEquals(workerAddress(3,7));	assertNotEquals(workerAddress(10,5),workerAddress(5,10));	0	1	49.078059673309326
48	0	hazelcast/hazelcast-simulator	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotNull(test);	0	1	37.74181795120239
	1	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertTrue(!result.isEmpty());	0	1	37.74181795120239
	2	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertEquals(3,result.size());	0	1	37.74181795120239
	3	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertSame(testSuite,test.getTestSuite());	0	1	37.74181795120239
	4	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotEquals(null,test);	0	1	37.74181795120239
	5	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertFalse(result.contains(null));	0	1	37.74181795120239
	6	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotSame(tests,result);	0	1	37.74181795120239
	7	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertArrayEquals(newTestData[]{test},result.toArray());	0	1	37.74181795120239
	8	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertThrows(NullPointerException.class,()->registry.addTests(null));	0	1	37.74181795120239
	9	/	RegistryTest	testAddTests	assertEquals(3,tests.size());	assertNotEquals(test.getId(),test.getTestCase().getId());	0	1	37.74181795120239
49	0	hazelcast/hazelcast-simulator	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,workerCount());	0	1	41.34276294708252
	1	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(0,workerCount());	0	1	41.34276294708252
	2	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workerCount()>=0);	0	1	41.34276294708252
	3	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(workers.isEmpty());	0	1	41.34276294708252
	4	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotNull(workers);	0	1	41.34276294708252
	5	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	"assertNotSame(""STR"",workers,expectedWorkers);"	0	1	41.34276294708252
	6	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertSame(workers,actualWorkers);	0	1	41.34276294708252
	7	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workers.stream().allMatch(Worker::isActive));	0	1	41.34276294708252
	8	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(workers.stream().anyMatch(worker->worker.getStatus()==WorkerStatus.FREE));	0	1	41.34276294708252
	9	/	RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(3,workers.stream().filter(worker->worker.getAgentId()!=null).count());	0	1	41.34276294708252
50	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertTrue(returnValue);	0	1	37.43392896652222
	1	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertFalse(returnValue);	0	1	37.43392896652222
	2	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertNotNull(object);	0	1	37.43392896652222
	3	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	"assertEquals(""STR"",actualString);"	0	1	37.43392896652222
	4	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	"assertThrows(BindException.class,""STR"");"	0	1	37.43392896652222
	5	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertSame(someObject,object);	0	1	37.43392896652222
	6	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertEquals(String.class,value.getClass());	0	1	37.43392896652222
	7	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertNotEquals(Integer.class,value.getClass());	0	1	37.43392896652222
	8	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertArrayEquals(expectedArray,actualArray);	0	1	37.43392896652222
	9	/	PropertyBindingSupport_Test	bind_withPath	"assertEquals(""STR"",someObject.otherObject.stringField);"	assertNotEquals(expectedObject,actualObject);	0	1	37.43392896652222
51	0	hazelcast/hazelcast-simulator	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	assertFalse(version==null);	0	1	47.74475717544556
	1	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertTrue(""STR"");"	0	1	47.74475717544556
	2	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(""STR"");"	0	1	47.74475717544556
	3	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertFalse(""STR"");"	0	1	47.74475717544556
	4	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	assertNull(getVersion());	0	1	47.74475717544556
	5	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	assertNotNull(getVersion());	0	1	47.74475717544556
	6	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertNotSame(false,""STR"");"	0	1	47.74475717544556
	7	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertNotSame(true,""STR"");"	0	1	47.74475717544556
	8	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	assertArrayEquals(newObject[]{getVersion()},getVersion());	0	1	47.74475717544556
	9	/	BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	"assertFalse(isMinVersion(""STR"",null));"	"assertNotEquals(false,""STR"");"	0	1	47.74475717544556
52	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNotNull(options);	1	1	83.96222496032715
	1	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertTrue(options.hasOptions());	0	1	83.96222496032715
	2	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertFalse(options.hasArguments());	0	1	83.96222496032715
	3	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertEquals(1,options.specs().size());	0	1	83.96222496032715
	4	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertEquals(0,options.nonOptionArguments().size());	0	1	83.96222496032715
	5	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertThrows(ExitException.class,()->someMethodThatCallsSystemExit());	0	1	83.96222496032715
	6	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNull(initOptionsWithHelp(null,null));	0	1	83.96222496032715
	7	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	"assertArrayEquals(""STR"",args);"	0	1	83.96222496032715
	8	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertSame(parser,options.options().get(0).parent());	0	1	83.96222496032715
	9	/	CliUtilsTest	testInitOptionsWithHelp_optionalArgument	assertNotNull(options);	assertNotEquals(0,options.asMap().size());	0	1	83.96222496032715
53	0	jcodec/jcodec	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNotNull(<FOCAL>(0));	0	1	62.22216606140137
	1	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNull(<FOCAL>(-1));	0	1	62.22216606140137
	2	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNotNull(<FOCAL>(3));	0	1	62.22216606140137
	3	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNull(<FOCAL>(-10));	0	1	62.22216606140137
	4	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNotNull(<FOCAL>(2));	0	1	62.22216606140137
	5	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertEquals(NALUnitType.IDR,<FOCAL>(5));	0	1	62.22216606140137
	6	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertEquals(NALUnitType.SPS,<FOCAL>(7));	0	1	62.22216606140137
	7	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertEquals(NALUnitType.PREFIX,<FOCAL>(1));	0	1	62.22216606140137
	8	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNotEquals(15,<FOCAL>(15));	0	1	62.22216606140137
	9	/	NalUnitTypeTest	testIdentifiesBadTypeCorrectly	"assertEquals(""STR"",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);"	assertNotEquals(NALUnitType.PREFIX,<FOCAL>(20));	0	1	62.22216606140137
54	0	jcodec/jcodec	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)0));	0	1	81.952565908432
	1	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)-128));	0	1	81.952565908432
	2	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(0,FOCAL.leadingZeroCountInByte((byte)128));	0	1	81.952565908432
	3	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertNull(FOCAL.leadingZeroCountInByte(null));	0	1	81.952565908432
	4	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertNotNull(FOCAL.leadingZeroCountInByte((byte)1));	0	1	81.952565908432
	5	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(1,FOCAL.leadingZeroCountInByte((byte)128));	0	1	81.952565908432
	6	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(1,FOCAL.leadingZeroCountInByte((byte)64));	0	1	81.952565908432
	7	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(2,FOCAL.leadingZeroCountInByte((byte)64));	0	1	81.952565908432
	8	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(6,FOCAL.leadingZeroCountInByte((byte)2));	0	1	81.952565908432
	9	/	BooleanCodingTest	testLeadingZero	assertEquals(7,leadingZeroCountInByte((byte)1));	assertEquals(6,FOCAL.leadingZeroCountInByte((byte)2));	0	1	81.952565908432
55	0	myabc/markdownj	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertNull(m.markdown(null));	0	1	26.254608869552612
	1	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertThrows(NullPointerException.class,()->m.markdown(null));	0	1	26.254608869552612
	2	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertNotNull(text);	0	1	26.254608869552612
	3	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",m.markdown(input));"	0	1	26.254608869552612
	4	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",text.substring(start,end));"	0	1	26.254608869552612
	5	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",text.getWhitespaceCharacters());"	0	1	26.254608869552612
	6	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertEquals(""STR"",txt);"	0	1	26.254608869552612
	7	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertTrue(boolean);	0	1	26.254608869552612
	8	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertFalse(boolean);	0	1	26.254608869552612
	9	/	EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	"assertNotEquals(""STR"",actual);"	0	1	26.254608869552612
56	0	arnohaase/a-foundation	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertNotNull(result);	0	1	54.91884994506836
	1	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertArrayEquals(newbyte[]{91,34,97,34,44,110,117,108,108,93},baos.toByteArray());	0	1	54.91884994506836
	2	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1	1	54.91884994506836
	3	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertEquals(1,1);	0	1	54.91884994506836
	4	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertTrue(true);	0	1	54.91884994506836
	5	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertFalse(false);	0	1	54.91884994506836
	6	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertSame(out,state.peek());	0	1	54.91884994506836
	7	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	"assertNotEquals(""STR"",""STR"");"	0	1	54.91884994506836
	8	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertEquals(0.0,0.0);	0	1	54.91884994506836
	9	/	AJsonSerHelperTest	testNullStringInArray	"assertEquals(""STR"",result);"	assertTrue(Double.isNaN(Double.NaN));	0	1	54.91884994506836
57	0	arnohaase/a-foundation	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertTrue(true);	0	1	29.38055992126465
	1	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertFalse(false);	0	1	29.38055992126465
	2	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertEquals(expected,actual);	0	1	29.38055992126465
	3	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertArrayEquals(expectedArray,resultArray);	0	1	29.38055992126465
	4	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNull(null);	0	1	29.38055992126465
	5	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNotNull(object);	0	1	29.38055992126465
	6	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertNotSame(notExpected,actual);	0	1	29.38055992126465
	7	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertArrayEquals(expectedArray,actualArray);	0	1	29.38055992126465
	8	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertSame(expected,actual);	0	1	29.38055992126465
	9	/	SerializableTest	testHashSetSerializable	assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));	assertEquals(expected,actual);	0	1	29.38055992126465
58	0	dbmdz/iiif-apis	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertEquals(authPattern,getAuthPattern());	0	1	31.060137033462524
	1	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertNotNull(authPattern);	0	1	31.060137033462524
	2	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertTrue(authPatterninstanceofAuthPattern);	0	1	31.060137033462524
	3	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertFalse(authPattern==null);	0	1	31.060137033462524
	4	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"assertEquals(""STR"",getAuthPattern().getName());"	0	1	31.060137033462524
	5	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"assertTrue(""STR"");"	0	1	31.060137033462524
	6	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertFalse(getAuthPattern().getName().isEmpty());	0	1	31.060137033462524
	7	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"assertEquals(""STR"",""STR"");"	0	1	31.060137033462524
	8	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	"assertNotNull(""STR"");"	0	1	31.060137033462524
	9	/	SpecExamplesDeserializationTest	testCookieServiceWithExternalPattern	assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);	assertTrue(authPattern.getLength()>=0);	0	1	31.060137033462524
59	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(1,opts.opts.keySet().size());	0	1	62.02418613433838
	1	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(2,args.length);	0	1	62.02418613433838
	2	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	0	1	62.02418613433838
	3	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertFalse(opts.opts.isEmpty());	0	1	62.02418613433838
	4	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,options.args.size());	0	1	62.02418613433838
	5	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(opts);	0	1	62.02418613433838
	6	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertNotNull(options);	0	1	62.02418613433838
	7	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertEquals(0,opts.args.size());	0	1	62.02418613433838
	8	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	"assertThrows(IllegalArgumentException.class,""STR"");"	0	1	62.02418613433838
	9	/	GraphvizServerTest	cmdLineValueSeparated	"assertEquals(map(""STR"",""STR""),opts.opts);"	assertThrows(NullPointerException.class,()->{GraphvizServer.CmdOptions.parse(null)});	0	1	62.02418613433838
60	0	nidi3/graphviz-java	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertNull(""STR"");"	0	1	54.26756501197815
	1	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertFalse(""STR"");"	0	1	54.26756501197815
	2	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertTrue(""STR"");"	0	1	54.26756501197815
	3	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertEquals(""STR"",""STR"");"	0	1	54.26756501197815
	4	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertNotEquals(""STR"",""STR"");"	0	1	54.26756501197815
	5	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertNotNull(""STR"");"	0	1	54.26756501197815
	6	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertThrows(NullPointerException.class,""STR"");"	0	1	54.26756501197815
	7	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertTrue(""STR"");"	0	1	54.26756501197815
	8	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertFalse(""STR"");"	0	1	54.26756501197815
	9	/	AttributeValidatorTest	wrongScope	"assertMessage(ERROR,""STR"",""STR"",validate(attr(""STR"",5),NODE));"	"assertNotEquals(""STR"",""STR"");"	0	1	54.26756501197815
61	0	nidi3/graphviz-java	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertNotNull(Graph.with());	0	1	44.03113865852356
	1	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertNotEquals(Graph.with(),null);	0	1	44.03113865852356
	2	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertTrue(Graph.with()instanceofGraph);	0	1	44.03113865852356
	3	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertTrue(Graph.with().isEmpty());	0	1	44.03113865852356
	4	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertEquals(0,Graph.with().size());	0	1	44.03113865852356
	5	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	"assertEquals(""STR"",Graph.with().getClass().getSimpleName());"	0	1	44.03113865852356
	6	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertEquals(0,Graph.with().getNodes().size());	0	1	44.03113865852356
	7	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertTrue(Graph.with().getLinks().isEmpty());	0	1	44.03113865852356
	8	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertNotNull(Graph.with().getNodes());	0	1	44.03113865852356
	9	/	SerializerTest	privateAttribute	"assertSerialize(graph().graphAttr().with(""STR"",""STR"").with(node(""STR"").with(""STR"",""STR"")),""STR"");"	assertNotNull(Graph.with().getLinks());	0	1	44.03113865852356
62	0	fabric8io/fabric8-maven-plugin	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertNotNull(fakePlugin);	0	1	62.78592586517334
	1	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertTrue(fakePlugininstanceofPlugin);	0	1	62.78592586517334
	2	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertNotNull(config);	0	1	62.78592586517334
	3	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertTrue(configinstanceofMap);	0	1	62.78592586517334
	4	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertEquals(2,config.size());	0	1	62.78592586517334
	5	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertFalse(config.isEmpty());	0	1	62.78592586517334
	6	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	assertNotEquals(3,config.size());	0	1	62.78592586517334
	7	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"assertArrayEquals(""STR"",config.keySet().toArray());"	0	1	62.78592586517334
	8	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"assertEquals(""STR"",config.keySet().iterator().next());"	0	1	62.78592586517334
	9	/	MavenConfigurationExtractorTest	should_parse_simple_types	"assertThat(config).containsEntry(""STR"",""STR"").containsEntry(""STR"",""STR"");"	"assertEquals(""STR"",config.keySet().toArray()[1]);"	0	1	62.78592586517334
63	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1	1	52.60220789909363
	1	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0	1	52.60220789909363
	2	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0	1	52.60220789909363
	3	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(result.get(0),null);	0	1	52.60220789909363
	4	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(lookup);	0	1	52.60220789909363
	5	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(ret);	0	1	52.60220789909363
	6	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,ret.size());	0	1	52.60220789909363
	7	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(result.get(1),null);	0	1	52.60220789909363
	8	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!(result.get(0)instanceofString));	0	1	52.60220789909363
	9	/	ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!(result.get(1)instanceofInteger));	0	1	52.60220789909363
64	0	PeterisP/morphology	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertNotNull(sentences);	0	1	71.20126223564148
	1	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0	1	71.20126223564148
	2	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1	1	71.20126223564148
	3	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0	1	71.20126223564148
	4	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().size()>0);	0	1	71.20126223564148
	5	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.getFirst().size());	0	1	71.20126223564148
	6	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	"assertEquals(""STR"",sentences.getFirst().get(0).getForm());"	0	1	71.20126223564148
	7	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().get(0).getLexeme().isPartOfSpeech(PartOfSpeech.VERB));	0	1	71.20126223564148
	8	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	assertEquals(1,sentences.getFirst().get(0).getLexeme().getPrimaryPos().getId());	0	1	71.20126223564148
	9	/	TokenizeTest	sentences_isolated_quotes	assertEquals(1,sentences.size());	"assertEquals(""STR"",sentences.getFirst().get(0).getLexeme().getMorphCode());"	0	1	71.20126223564148
65	0	PeterisP/morphology	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotNull(tokens);	0	1	56.6934027671814
	1	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertNotEquals(null,tokens.get(0));	0	1	56.6934027671814
	2	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertFalse(tokens.isEmpty());	0	1	56.6934027671814
	3	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertTrue(tokens.size()>0);	0	1	56.6934027671814
	4	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertEquals(""STR"",tokens.get(0).getWord());"	0	1	56.6934027671814
	5	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertTrue(tokens.get(0)instanceofWord);	0	1	56.6934027671814
	6	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertArrayEquals(""STR"",tokens.toArray());"	0	1	56.6934027671814
	7	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertEquals(""STR"",tokens.getFirst());"	0	1	56.6934027671814
	8	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	"assertArrayEquals(""STR"",tokens.toArray(newWord[tokens.size()]));"	0	1	56.6934027671814
	9	/	TokenizeTest	year_numerals	assertEquals(2,tokens.size());	assertSame(tokens.get(0),tokens.getFirst());	0	1	56.6934027671814
66	0	NanoHttpd/nanohttpd	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	assertThrows(NullPointerException.class,()->getMimeTypeForFile(null));	0	1	49.60920810699463
	1	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	49.60920810699463
	2	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotEquals(null,""STR"");"	0	1	49.60920810699463
	3	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertTrue(""STR"");"	0	1	49.60920810699463
	4	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertFalse(""STR"");"	0	1	49.60920810699463
	5	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	49.60920810699463
	6	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotNull(""STR"");"	0	1	49.60920810699463
	7	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotSame(""STR"",""STR"");"	0	1	49.60920810699463
	8	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	49.60920810699463
	9	/	MimeTest	testOverwritenMimeType	"assertEquals(""STR"",NanoHTTPD.getMimeTypeForFile(""STR""));"	"assertSame(""STR"",""STR"");"	0	1	49.60920810699463
67	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0	1	43.71711301803589
	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0	1	43.71711301803589
	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	"assertNotEquals(""STR"",routePrioritizer.getPrioritizedRoutes());"	0	1	43.71711301803589
	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(Collections.emptySet(),routePrioritizer.getPrioritizedRoutes());	0	1	43.71711301803589
	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0	1	43.71711301803589
	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(Collections.EMPTY_LIST));	0	1	43.71711301803589
	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1	1	43.71711301803589
	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.EMPTY_LIST,routePrioritizer.getPrioritizedRoutes());	0	1	43.71711301803589
	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),newArrayList<>(routePrioritizer.getPrioritizedRoutes()));	0	1	43.71711301803589
	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(newObject[]{},routePrioritizer.getPrioritizedRoutes().toArray());	0	1	43.71711301803589
68	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotNull(a);	0	1	93.78137803077698
	1	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotNull(b);	0	1	93.78137803077698
	2	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(ainstanceofPuzzle);	0	1	93.78137803077698
	3	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertTrue(binstanceofPuzzle);	0	1	93.78137803077698
	4	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a.toString(),b.toString());	0	1	93.78137803077698
	5	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertArrayEquals(newint[]{1,2,3,4,5,6,7,8,9},a.getCells());	0	1	93.78137803077698
	6	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals(9,a.getCells().length);	0	1	93.78137803077698
	7	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertEquals(9,a.getCell(0));	0	1	93.78137803077698
	8	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	"assertEquals(""STR"",a.toString());"	0	1	93.78137803077698
	9	/	PuzzleTest	different_cells_means_different_puzzle	assertNotEquals(a,b);	assertFalse(a.isSolved());	0	1	93.78137803077698
