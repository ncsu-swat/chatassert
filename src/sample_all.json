{
    "projects": [
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LuceneSpatialMiscFunctionsTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEnvelope",
                            "startLn": 91,
                            "endLn": 98,
                            "testMethod": "@Test\n public void testEnvelope ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     Assert.assertEquals(next.field(\"STR\"),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(next.field(\"STR\"),\"STR\");",
                            "oracleLn": 95,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testDistance",
                            "startLn": 457,
                            "endLn": 477,
                            "testMethod": "@Test\n public void testDistance ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);\n}",
                            "oracle": "assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);",
                            "oracleLn": 461,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testDisjoint",
                            "startLn": 479,
                            "endLn": 491,
                            "testMethod": "@Test\n public void testDisjoint ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     Assert.assertEquals(next.field(\"STR\"),true);\n}",
                            "oracle": "Assert.assertEquals(next.field(\"STR\"),true);",
                            "oracleLn": 483,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testWktPolygon",
                            "startLn": 493,
                            "endLn": 502,
                            "testMethod": "@Test\n public void testWktPolygon ( ) throws ParseException {\n     Shape shape = OShapeFactory . INSTANCE . fromObject ( \"STR\" ) ; \n     Assert.assertEquals(shapeinstanceofJtsGeometry,true);\n}",
                            "oracle": "Assert.assertEquals(shapeinstanceofJtsGeometry,true);",
                            "oracleLn": 496,
                            "focalFile": "lucene/src/main/java/com/orientechnologies/spatial/shape/OShapeFactory.java",
                            "focalName": "fromObject",
                            "focalStartLn": 84,
                            "focalEndLn": 109,
                            "focalMethod": "@Override\n public Shape fromObject ( Object obj ) { \n if ( obj instanceof String ) { \n try { \n return fromText ( ( String ) obj ) ; \n } catch ( ParseException e ) { \n e . printStackTrace ( ) ; \n } } if ( obj instanceof ODocument ) { \n return fromDoc ( ( ODocument ) obj ) ; \n } if ( obj instanceof OResult ) { \n OElement oElement = ( ( OResult ) obj ) . toElement ( ) ; \n return fromDoc ( ( ODocument ) oElement ) ; \n } if ( obj instanceof Map ) { \n Map map = ( Map ) ( ( Map ) obj ) . get ( \"STR\" ) ; \n if ( map == null ) { \n map = ( Map ) obj ; \n } return fromMapGeoJson ( map ) ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "BinaryComparatorEqualsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BinaryComparatorEqualsTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testDatetime",
                            "startLn": 49,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testDatetime ( ) throws ParseException {\n     testEquals ( OType . DATETIME , 10l ) ; \n     final SimpleDateFormat format = new SimpleDateFormat ( OStorageConfiguration . DEFAULT_DATETIME_FORMAT ) ; \n     String now1 = format . format ( new Date ( ) ) ; \n     Date now = format . parse ( now1 ) ; \n     Assert.assertTrue(comparator.isEqual(field(OType.DATETIME,now),field(OType.STRING,format.format(now))));\n}",
                            "oracle": "Assert.assertTrue(comparator.isEqual(field(OType.DATETIME,now),field(OType.STRING,format.format(now))));",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "isEqual",
                            "focalStartLn": 40,
                            "focalEndLn": 40,
                            "focalMethod": " boolean isEqual ( OBinaryField iFirstValue , OBinaryField iSecondValue ) ; \n"
                        },
                        {
                            "testName": "testBinary",
                            "startLn": 65,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testBinary ( ) throws ParseException {\n     final byte [ ] b1 = new byte [ ] { \n 0 , 1 , 2 , 3 } ; \n     final byte [ ] b2 = new byte [ ] { \n 0 , 1 , 2 , 4 } ; \n     final byte [ ] b3 = new byte [ ] { \n 1 , 1 , 2 , 4 } ; \n     Assert.assertTrue(comparator.isEqual(field(OType.BINARY,b1),field(OType.BINARY,b1)));\n}",
                            "oracle": "Assert.assertTrue(comparator.isEqual(field(OType.BINARY,b1),field(OType.BINARY,b1)));",
                            "oracleLn": 70,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "isEqual",
                            "focalStartLn": 40,
                            "focalEndLn": 40,
                            "focalMethod": " boolean isEqual ( OBinaryField iFirstValue , OBinaryField iSecondValue ) ; \n"
                        },
                        {
                            "testName": "testLinks",
                            "startLn": 76,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testLinks ( ) throws ParseException {\n     Assert.assertTrue(comparator.isEqual(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2))));\n}",
                            "oracle": "Assert.assertTrue(comparator.isEqual(field(OType.LINK,newORecordId(1,2)),field(OType.LINK,newORecordId(1,2))));",
                            "oracleLn": 78,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "isEqual",
                            "focalStartLn": 40,
                            "focalEndLn": 40,
                            "focalMethod": " boolean isEqual ( OBinaryField iFirstValue , OBinaryField iSecondValue ) ; \n"
                        },
                        {
                            "testName": "testDecimal",
                            "startLn": 134,
                            "endLn": 139,
                            "testMethod": "@Test\n public void testDecimal ( ) {\n     Assert.assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));\n}",
                            "oracle": "Assert.assertTrue(comparator.isEqual(field(OType.DECIMAL,newBigDecimal(10)),field(OType.DECIMAL,newBigDecimal(10))));",
                            "oracleLn": 136,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "isEqual",
                            "focalStartLn": 40,
                            "focalEndLn": 40,
                            "focalMethod": " boolean isEqual ( OBinaryField iFirstValue , OBinaryField iSecondValue ) ; \n"
                        },
                        {
                            "testName": "testBoolean",
                            "startLn": 141,
                            "endLn": 151,
                            "testMethod": "@Test\n public void testBoolean ( ) {\n     Assert.assertTrue(comparator.isEqual(field(OType.BOOLEAN,true),field(OType.BOOLEAN,true)));\n}",
                            "oracle": "Assert.assertTrue(comparator.isEqual(field(OType.BOOLEAN,true),field(OType.BOOLEAN,true)));",
                            "oracleLn": 143,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "isEqual",
                            "focalStartLn": 40,
                            "focalEndLn": 40,
                            "focalMethod": " boolean isEqual ( OBinaryField iFirstValue , OBinaryField iSecondValue ) ; \n"
                        },
                        {
                            "testName": "testBinaryFieldCopy",
                            "startLn": 153,
                            "endLn": 159,
                            "testMethod": "@Test\n public void testBinaryFieldCopy ( ) {\n     final OBinaryField f = field ( OType . BYTE , 10 , new OCaseInsensitiveCollate ( ) ) . copy ( ) ; \n     Assert.assertEquals(f.type,OType.BYTE);\n}",
                            "oracle": "Assert.assertEquals(f.type,OType.BYTE);",
                            "oracleLn": 156,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryField.java",
                            "focalName": "copy",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public OBinaryField copy ( ) { \n return new OBinaryField ( name , type , bytes . copy ( ) , collate ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CommandSerializationUTF8Test",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/CommandSerializationUTF8Test.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRightSerializationEncoding",
                            "startLn": 11,
                            "endLn": 23,
                            "testMethod": "@Test\n public void testRightSerializationEncoding ( ) {\n     OSQLQuery < ? > query = new OSQLSynchQuery < Object > ( \"STR\" ) ; \n     Assert.assertEquals(query.toStream().length,66);\n}",
                            "oracle": "Assert.assertEquals(query.toStream().length,66);",
                            "oracleLn": 14,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/query/OSQLQuery.java",
                            "focalName": "toStream",
                            "focalStartLn": 120,
                            "focalEndLn": 122,
                            "focalMethod": " public byte [ ] toStream ( ) throws OSerializationException { \n return queryToStream ( ) . toByteArray ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OJsonWithCustom",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OJsonWithCustom.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCustomField",
                            "startLn": 20,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testCustomField ( ) {\n     boolean old = OGlobalConfiguration . DB_CUSTOM_SUPPORT . getValueAsBoolean ( ) ; \n     OGlobalConfiguration . DB_CUSTOM_SUPPORT . setValue ( true ) ; \n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , String . class , OType . CUSTOM ) ; \n     String json = doc . toJSON ( ) ; \n     System . out . println ( json ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . fromJSON ( json ) ; \n     assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));\n}",
                            "oracle": "assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));",
                            "oracleLn": 30,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testCustomFieldDisabled",
                            "startLn": 37,
                            "endLn": 50,
                            "testMethod": "@ Test ( expected = ODatabaseException . class ) public void testCustomFieldDisabled ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , String . class , OType . CUSTOM ) ; \n     String json = doc . toJSON ( ) ; \n     System . out . println ( json ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . fromJSON ( json ) ; \n     assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));\n}",
                            "oracle": "assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OChainIndexFetchTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OChainIndexFetchTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OChainIndexFetchTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFetchChaninedIndex",
                            "startLn": 29,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testFetchChaninedIndex ( ) {\n     OClass baseClass = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     OProperty propr = baseClass . createProperty ( \"STR\" , OType . LINK ) ; \n     OClass linkedClass = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     OProperty id = linkedClass . createProperty ( \"STR\" , OType . STRING ) ; \n     id . createIndex ( INDEX_TYPE . UNIQUE ) ; \n     propr . setLinkedClass ( linkedClass ) ; \n     propr . createIndex ( INDEX_TYPE . NOTUNIQUE ) ; \n     ODocument doc = new ODocument ( linkedClass ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc ) ; \n     ODocument doc1 = new ODocument ( baseClass ) ; \n     doc1 . field ( \"STR\" , doc ) ; \n     db . save ( doc1 ) ; \n     List < ODocument > res = db . query ( new OSQLSynchQuery ( \"STR\" ) ) ; \n     assertEquals(0,res.size());\n}",
                            "oracle": "assertEquals(0,res.size());",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "NestedInsertTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/NestedInsertTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 17,
                        "endLn": 21,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + NestedInsertTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmbeddedValueDate",
                            "startLn": 28,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testEmbeddedValueDate ( ) {\n     OSchema schm = db . getMetadata ( ) . getSchema ( ) ; \n     schm . createClass ( \"STR\" ) ; \n     final ODocument res = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final ODocument embedded = res . field ( \"STR\" ) ; \n     Assert.assertNotNull(embedded);\n}",
                            "oracle": "Assert.assertNotNull(embedded);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testLinkedNested",
                            "startLn": 46,
                            "endLn": 62,
                            "testMethod": "@Test\n public void testLinkedNested ( ) {\n     OSchema schm = db . getMetadata ( ) . getSchema ( ) ; \n     OClass cl = schm . createClass ( \"STR\" ) ; \n     OClass linked = schm . createClass ( \"STR\" ) ; \n     cl . createProperty ( \"STR\" , OType . LINK , linked ) ; \n     final ODocument res = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final ODocument ln = res . field ( \"STR\" ) ; \n     Assert.assertNotNull(ln);\n}",
                            "oracle": "Assert.assertNotNull(ln);",
                            "oracleLn": 54,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORecordSerializerBinaryTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/ORecordSerializerBinaryTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testGetTypedPropertyOfTypeAny",
                            "startLn": 70,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testGetTypedPropertyOfTypeAny ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     Integer setValue = 15 ; \n     doc . setProperty ( \"STR\" , setValue ) ; \n     db . save ( doc ) ; \n     byte [ ] serializedDoc = serializer . toStream ( doc , false ) ; \n     Integer value = serializer . deserializeFieldFromRoot ( serializedDoc , \"STR\" ) ; \n     Assert.assertEquals(setValue,value);\n}",
                            "oracle": "Assert.assertEquals(setValue,value);",
                            "oracleLn": 78,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromRoot",
                            "focalStartLn": 207,
                            "focalEndLn": 210,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromRoot ( byte [ ] record , String iFieldName ) { \n return deserializeField ( record , 0 , iFieldName , false , - 1 ) ; \n } "
                        },
                        {
                            "testName": "testGetTypedFiledSimple",
                            "startLn": 81,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testGetTypedFiledSimple ( ) {\n     ODocument doc = new ODocument ( ) ; \n     Integer setValue = 16 ; \n     doc . setProperty ( \"STR\" , setValue ) ; \n     byte [ ] serializedDoc = serializer . toStream ( doc , false ) ; \n     Integer value = serializer . deserializeFieldFromRoot ( serializedDoc , \"STR\" ) ; \n     Assert.assertEquals(setValue,value);\n}",
                            "oracle": "Assert.assertEquals(setValue,value);",
                            "oracleLn": 88,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromRoot",
                            "focalStartLn": 207,
                            "focalEndLn": 210,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromRoot ( byte [ ] record , String iFieldName ) { \n return deserializeField ( record , 0 , iFieldName , false , - 1 ) ; \n } "
                        },
                        {
                            "testName": "testGetFieldNamesFromEmbedded",
                            "startLn": 112,
                            "endLn": 133,
                            "testMethod": "@Test\n public void testGetFieldNamesFromEmbedded ( ) {\n     ODocument root = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( \"STR\" ) ; \n     Integer setValue = 17 ; \n     embedded . setProperty ( \"STR\" , setValue ) ; \n     embedded . setProperty ( \"STR\" , \"STR\" ) ; \n     root . field ( \"STR\" , embedded ) ; \n     root . setClassName ( \"STR\" ) ; \n     db . save ( root ) ; \n     byte [ ] rootBytes = serializer . toStream ( root , false ) ; \n     OResultBinary embeddedBytesViaGet = serializer . deserializeFieldFromRoot ( rootBytes , \"STR\" ) ; \n     Set < String > fieldNames = embeddedBytesViaGet . getPropertyNames ( ) ; \n     Assert.assertTrue(fieldNames.contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(fieldNames.contains(\"STR\"));",
                            "oracleLn": 125,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OResultBinary.java",
                            "focalName": "getPropertyNames",
                            "focalStartLn": 99,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n public Set < String > getPropertyNames ( ) { \n String [ ] fields = ORecordSerializerBinary . INSTANCE . getFieldNamesEmbedded ( new ODocument ( ) , bytes , offset , serializerVersion ) ; \n return new HashSet < > ( Arrays . asList ( fields ) ) ; \n } "
                        },
                        {
                            "testName": "testGetTypedFieldFromEmbedded",
                            "startLn": 170,
                            "endLn": 189,
                            "testMethod": "@Test\n public void testGetTypedFieldFromEmbedded ( ) {\n     ODocument root = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( \"STR\" ) ; \n     Integer setValue = 17 ; \n     embedded . setProperty ( \"STR\" , setValue ) ; \n     root . field ( \"STR\" , embedded ) ; \n     root . setClassName ( \"STR\" ) ; \n     db . save ( root ) ; \n     byte [ ] rootBytes = serializer . toStream ( root , false ) ; \n     OResultBinary embeddedBytesViaGet = serializer . deserializeFieldFromRoot ( rootBytes , \"STR\" ) ; \n     Integer testValue = serializer . deserializeFieldFromEmbedded ( embeddedBytesViaGet . getBytes ( ) , embeddedBytesViaGet . getOffset ( ) , \"STR\" , rootBytes [ 0 ] ) ; \n     Assert.assertEquals(setValue,testValue);\n}",
                            "oracle": "Assert.assertEquals(setValue,testValue);",
                            "oracleLn": 182,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromEmbedded",
                            "focalStartLn": 212,
                            "focalEndLn": 215,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromEmbedded ( byte [ ] record , int offset , String iFieldName , int serializerVersion ) { \n return deserializeField ( record , offset , iFieldName , true , serializerVersion ) ; \n } "
                        },
                        {
                            "testName": "testGetTypedEmbeddedFromEmbedded",
                            "startLn": 191,
                            "endLn": 214,
                            "testMethod": "@Test\n public void testGetTypedEmbeddedFromEmbedded ( ) {\n     ODocument root = new ODocument ( \"STR\" ) ; \n     ODocument embedded = new ODocument ( \"STR\" ) ; \n     ODocument embeddedLevel2 = new ODocument ( \"STR\" ) ; \n     Integer setValue = 17 ; \n     embeddedLevel2 . setProperty ( \"STR\" , setValue ) ; \n     embedded . setProperty ( \"STR\" , embeddedLevel2 ) ; \n     root . field ( \"STR\" , embedded ) ; \n     db . save ( root ) ; \n     byte [ ] rootBytes = serializer . toStream ( root , false ) ; \n     OResultBinary embeddedBytesViaGet = serializer . deserializeFieldFromRoot ( rootBytes , \"STR\" ) ; \n     OResultBinary embeddedLKevel2BytesViaGet = serializer . deserializeFieldFromEmbedded ( embeddedBytesViaGet . getBytes ( ) , embeddedBytesViaGet . getOffset ( ) , \"STR\" , rootBytes [ 0 ] ) ; \n     Integer testValue = serializer . deserializeFieldFromEmbedded ( embeddedLKevel2BytesViaGet . getBytes ( ) , embeddedLKevel2BytesViaGet . getOffset ( ) , \"STR\" , rootBytes [ 0 ] ) ; \n     Assert.assertEquals(setValue,testValue);\n}",
                            "oracle": "Assert.assertEquals(setValue,testValue);",
                            "oracleLn": 205,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromEmbedded",
                            "focalStartLn": 212,
                            "focalEndLn": 215,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromEmbedded ( byte [ ] record , int offset , String iFieldName , int serializerVersion ) { \n return deserializeField ( record , offset , iFieldName , true , serializerVersion ) ; \n } "
                        },
                        {
                            "testName": "testGetFieldFromEmbeddedList",
                            "startLn": 216,
                            "endLn": 243,
                            "testMethod": "@Test\n public void testGetFieldFromEmbeddedList ( ) {\n     ODocument root = new ODocument ( ) ; \n     ODocument embeddedListElement = new ODocument ( ) ; \n     Integer setValue = 19 ; \n     Integer setValue2 = 21 ; \n     embeddedListElement . field ( \"STR\" , setValue ) ; \n     byte [ ] rawElementBytes = serializer . toStream ( embeddedListElement , false ) ; \n     List embeddedList = new ArrayList ( ) ; \n     embeddedList . add ( embeddedListElement ) ; \n     embeddedList . add ( setValue2 ) ; \n     root . field ( \"STR\" , embeddedList , OType . EMBEDDEDLIST ) ; \n     byte [ ] rootBytes = serializer . toStream ( root , false ) ; \n     List < Object > embeddedListFieldValue = serializer . deserializeFieldFromRoot ( rootBytes , \"STR\" ) ; \n     OResultBinary embeddedListElementBytes = ( OResultBinary ) embeddedListFieldValue . get ( 0 ) ; \n     Integer deserializedValue = serializer . deserializeFieldFromEmbedded ( embeddedListElementBytes . getBytes ( ) , embeddedListElementBytes . getOffset ( ) , \"STR\" , rootBytes [ 0 ] ) ; \n     Assert.assertEquals(setValue,deserializedValue);\n}",
                            "oracle": "Assert.assertEquals(setValue,deserializedValue);",
                            "oracleLn": 232,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromEmbedded",
                            "focalStartLn": 212,
                            "focalEndLn": 215,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromEmbedded ( byte [ ] record , int offset , String iFieldName , int serializerVersion ) { \n return deserializeField ( record , offset , iFieldName , true , serializerVersion ) ; \n } "
                        },
                        {
                            "testName": "testGetFieldFromEmbeddedMap",
                            "startLn": 245,
                            "endLn": 268,
                            "testMethod": "@Test\n public void testGetFieldFromEmbeddedMap ( ) {\n     ODocument root = new ODocument ( ) ; \n     Integer setValue = 23 ; \n     Integer setValue2 = 27 ; \n     Map < String , Object > map = new HashMap < > ( ) ; \n     ODocument embeddedListElement = new ODocument ( ) ; \n     embeddedListElement . field ( \"STR\" , setValue ) ; \n     map . put ( \"STR\" , embeddedListElement ) ; \n     map . put ( \"STR\" , setValue2 ) ; \n     root . field ( \"STR\" , map , OType . EMBEDDEDMAP ) ; \n     byte [ ] rootBytes = serializer . toStream ( root , false ) ; \n     Map deserializedMap = serializer . deserializeFieldFromRoot ( rootBytes , \"STR\" ) ; \n     OResultBinary firstValDeserialized = ( OResultBinary ) deserializedMap . get ( \"STR\" ) ; \n     Integer deserializedValue = serializer . deserializeFieldFromEmbedded ( firstValDeserialized . getBytes ( ) , firstValDeserialized . getOffset ( ) , \"STR\" , rootBytes [ 0 ] ) ; \n     Assert.assertEquals(setValue,deserializedValue);\n}",
                            "oracle": "Assert.assertEquals(setValue,deserializedValue);",
                            "oracleLn": 260,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java",
                            "focalName": "deserializeFieldFromEmbedded",
                            "focalStartLn": 212,
                            "focalEndLn": 215,
                            "focalMethod": "@Override\n public < RET > RET deserializeFieldFromEmbedded ( byte [ ] record , int offset , String iFieldName , int serializerVersion ) { \n return deserializeField ( record , offset , iFieldName , true , serializerVersion ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "DateBinaryComparatorTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/DateBinaryComparatorTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "initDatabase",
                        "startLn": 29,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void initDatabase ( ) { \n db = new ODatabaseDocumentTx ( dbUrl ) ; \n if ( ! db . exists ( ) ) { \n db . create ( ) ; \n } openDatabase ( ) ; \n initSchema ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDateJavaClassPreparedStatement",
                            "startLn": 58,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testDateJavaClassPreparedStatement ( ) throws ParseException {\n     String str = \"STR\" ; \n     OSQLSynchQuery query = new OSQLSynchQuery ( str ) ; \n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , new SimpleDateFormat ( dateFormat ) . parse ( dateValue ) ) ; \n     List < ? > result = db . query ( query , params ) ; \n     assertTrue(result.size()==1);\n}",
                            "oracle": "assertTrue(result.size()==1);",
                            "oracleLn": 65,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreateLinkTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateLinkTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 37,
                        "endLn": 41,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBasic",
                            "startLn": 51,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testBasic ( ) throws Exception {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(result.size(),2);\n}",
                            "oracle": "Assert.assertEquals(result.size(),2);",
                            "oracleLn": 61,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testInverse",
                            "startLn": 76,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testInverse ( ) throws Exception {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(result.size(),2);\n}",
                            "oracle": "Assert.assertEquals(result.size(),2);",
                            "oracleLn": 87,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OResultSerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/result/binary/OResultSerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 23,
                        "endLn": 26,
                        "setupMethod": "@Before\n public void before ( ) { \n serializer = new OResultSerializerNetwork ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleEmbeddedDoc",
                            "startLn": 220,
                            "endLn": 236,
                            "testMethod": "@Test\n public void testSimpleEmbeddedDoc ( ) {\n     OResultInternal document = new OResultInternal ( ) ; \n     OResultInternal embedded = new OResultInternal ( ) ; \n     embedded . setProperty ( \"STR\" , \"STR\" ) ; \n     embedded . setProperty ( \"STR\" , \"STR\" ) ; \n     document . setProperty ( \"STR\" , embedded ) ; \n     OResult extr = serializeDeserialize ( document ) ; \n     assertEquals(document.getPropertyNames(),extr.getPropertyNames());\n}",
                            "oracle": "assertEquals(document.getPropertyNames(),extr.getPropertyNames());",
                            "oracleLn": 228,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getPropertyNames",
                            "focalStartLn": 67,
                            "focalEndLn": 67,
                            "focalMethod": " Set < String > getPropertyNames ( ) ; \n"
                        },
                        {
                            "testName": "testMapOfEmbeddedDocument",
                            "startLn": 238,
                            "endLn": 259,
                            "testMethod": "@Test\n public void testMapOfEmbeddedDocument ( ) {\n     OResultInternal document = new OResultInternal ( ) ; \n     OResultInternal embeddedInMap = new OResultInternal ( ) ; \n     embeddedInMap . setProperty ( \"STR\" , \"STR\" ) ; \n     embeddedInMap . setProperty ( \"STR\" , \"STR\" ) ; \n     Map < String , OResult > map = new HashMap < String , OResult > ( ) ; \n     map . put ( \"STR\" , embeddedInMap ) ; \n     document . setProperty ( \"STR\" , map ) ; \n     OResult extr = serializeDeserialize ( document ) ; \n     Map < String , OResult > mapS = extr . getProperty ( \"STR\" ) ; \n     assertEquals(1,mapS.size());\n}",
                            "oracle": "assertEquals(1,mapS.size());",
                            "oracleLn": 249,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLDropPropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLDropPropertyTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 36,
                        "endLn": 41,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIfExists",
                            "startLn": 73,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testIfExists ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass testIfExistsClass = schema . createClass ( \"STR\" ) ; \n     testIfExistsClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Assert.assertTrue(schema.getClass(\"STR\").existsProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(schema.getClass(\"STR\").existsProperty(\"STR\"));",
                            "oracleLn": 78,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "existsProperty",
                            "focalStartLn": 149,
                            "focalEndLn": 149,
                            "focalMethod": " boolean existsProperty ( String iPropertyName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OClassImplTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void setUp ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OClassImplTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n } else db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetAbstractClusterNotChanged",
                            "startLn": 46,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testSetAbstractClusterNotChanged ( ) throws Exception {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     final int oldClusterId = oClass . getDefaultClusterId ( ) ; \n     oClass . setAbstract ( false ) ; \n     assertEquals(oClass.getDefaultClusterId(),oldClusterId);\n}",
                            "oracle": "assertEquals(oClass.getDefaultClusterId(),oldClusterId);",
                            "oracleLn": 52,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getDefaultClusterId",
                            "focalStartLn": 153,
                            "focalEndLn": 153,
                            "focalMethod": " int getDefaultClusterId ( ) ; \n"
                        },
                        {
                            "testName": "testSetAbstractShouldCreateNewClusters",
                            "startLn": 63,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testSetAbstractShouldCreateNewClusters ( ) throws Exception {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createAbstractClass ( \"STR\" ) ; \n     oClass . setAbstract ( false ) ; \n     assertFalse(oClass.getDefaultClusterId()==-1);\n}",
                            "oracle": "assertFalse(oClass.getDefaultClusterId()==-1);",
                            "oracleLn": 68,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getDefaultClusterId",
                            "focalStartLn": 153,
                            "focalEndLn": 153,
                            "focalMethod": " int getDefaultClusterId ( ) ; \n"
                        },
                        {
                            "testName": "testCreateNoLinkedClass",
                            "startLn": 75,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testCreateNoLinkedClass ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null , true ) ; \n     assertNotNull(oClass.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(oClass.getProperty(\"STR\"));",
                            "oracleLn": 81,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getProperty",
                            "focalStartLn": 113,
                            "focalEndLn": 113,
                            "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n"
                        },
                        {
                            "testName": "testCreatePropertyIdKeep",
                            "startLn": 260,
                            "endLn": 269,
                            "testMethod": "@Test\n public void testCreatePropertyIdKeep ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Integer id = prop . getId ( ) ; \n     oClass . dropProperty ( \"STR\" ) ; \n     prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     assertEquals(id,prop.getId());\n}",
                            "oracle": "assertEquals(id,prop.getId());",
                            "oracleLn": 268,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 271,
                            "focalEndLn": 271,
                            "focalMethod": " public Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testRenameProperty",
                            "startLn": 271,
                            "endLn": 279,
                            "testMethod": "@Test\n public void testRenameProperty ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Integer id = prop . getId ( ) ; \n     prop . setName ( \"STR\" ) ; \n     assertNotEquals(id,prop.getId());\n}",
                            "oracle": "assertNotEquals(id,prop.getId());",
                            "oracleLn": 278,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 271,
                            "focalEndLn": 271,
                            "focalMethod": " public Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testChangeTypeProperty",
                            "startLn": 281,
                            "endLn": 289,
                            "testMethod": "@Test\n public void testChangeTypeProperty ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . SHORT ) ; \n     Integer id = prop . getId ( ) ; \n     prop . setType ( OType . INTEGER ) ; \n     assertNotEquals(id,prop.getId());\n}",
                            "oracle": "assertNotEquals(id,prop.getId());",
                            "oracleLn": 288,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 271,
                            "focalEndLn": 271,
                            "focalMethod": " public Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testRenameBackProperty",
                            "startLn": 291,
                            "endLn": 301,
                            "testMethod": "@Test\n public void testRenameBackProperty ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Integer id = prop . getId ( ) ; \n     prop . setName ( \"STR\" ) ; \n     assertNotEquals(id,prop.getId());\n}",
                            "oracle": "assertNotEquals(id,prop.getId());",
                            "oracleLn": 298,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 271,
                            "focalEndLn": 271,
                            "focalMethod": " public Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testFindById",
                            "startLn": 311,
                            "endLn": 321,
                            "testMethod": "@Test\n public void testFindById ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     OGlobalProperty global = oSchema . getGlobalPropertyById ( prop . getId ( ) ) ; \n     assertEquals(prop.getId(),global.getId());\n}",
                            "oracle": "assertEquals(prop.getId(),global.getId());",
                            "oracleLn": 317,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OGlobalProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 25,
                            "focalEndLn": 25,
                            "focalMethod": " Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testFindByIdDrop",
                            "startLn": 323,
                            "endLn": 335,
                            "testMethod": "@Test\n public void testFindByIdDrop ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     OProperty prop = oClass . createProperty ( \"STR\" , OType . STRING ) ; \n     Integer id = prop . getId ( ) ; \n     oClass . dropProperty ( \"STR\" ) ; \n     OGlobalProperty global = oSchema . getGlobalPropertyById ( id ) ; \n     assertEquals(id,global.getId());\n}",
                            "oracle": "assertEquals(id,global.getId());",
                            "oracleLn": 331,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OGlobalProperty.java",
                            "focalName": "getId",
                            "focalStartLn": 25,
                            "focalEndLn": 25,
                            "focalMethod": " Integer getId ( ) ; \n"
                        },
                        {
                            "testName": "testTypeAny",
                            "startLn": 500,
                            "endLn": 515,
                            "testMethod": "@Test\n public void testTypeAny ( ) {\n     String className = \"STR\" ; \n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( className ) ; \n     ODocument record = db . newInstance ( className ) ; \n     record . field ( \"STR\" , \"STR\" ) ; \n     record . save ( ) ; \n     oClass . createProperty ( \"STR\" , OType . ANY ) ; \n     List < ? > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(result.size(),1);\n}",
                            "oracle": "assertEquals(result.size(),1);",
                            "oracleLn": 510,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testAlterCustomAttributeInClass",
                            "startLn": 517,
                            "endLn": 527,
                            "testMethod": "@Test\n public void testAlterCustomAttributeInClass ( ) {\n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = schema . createClass ( \"STR\" ) ; \n     oClass . setCustom ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",oClass.getCustom(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",oClass.getCustom(\"STR\"));",
                            "oracleLn": 522,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getCustom",
                            "focalStartLn": 437,
                            "focalEndLn": 437,
                            "focalMethod": " String getCustom ( String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreateClassTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateClassTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "init",
                        "startLn": 39,
                        "endLn": 51,
                        "setupMethod": "@BeforeClass\n public static void init ( ) throws Exception { \n db = new ODatabaseDocumentTx ( \"STR\" + OCommandExecutorSQLCreateClassTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n db . drop ( ) ; \n } db . create ( ) ; \n final OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n schema . createClass ( \"STR\" , schema . getClass ( \"STR\" ) ) ; \n } @Before\n public void setUp ( ) throws Exception { \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateWithSuperclasses",
                            "startLn": 65,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testCreateWithSuperclasses ( ) throws Exception {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass userVertex = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     Assert.assertNotNull(userVertex);\n}",
                            "oracle": "Assert.assertNotNull(userVertex);",
                            "oracleLn": 69,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLScriptTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLScriptTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 28,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . activateOnCurrentThread ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQuery",
                            "startLn": 42,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testQuery ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertEquals(qResult.size(),3);\n}",
                            "oracle": "Assert.assertEquals(qResult.size(),3);",
                            "oracleLn": 50,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testTx",
                            "startLn": 54,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testTx ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     ODocument qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 62,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testReturnExpanded",
                            "startLn": 66,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testReturnExpanded ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     String qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 72,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testSleep",
                            "startLn": 89,
                            "endLn": 98,
                            "testMethod": "@Test\n public void testSleep ( ) throws Exception {\n     long begin = System . currentTimeMillis ( ) ; \n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertTrue(System.currentTimeMillis()-begin>=500);\n}",
                            "oracle": "Assert.assertTrue(System.currentTimeMillis()-begin>=500);",
                            "oracleLn": 95,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testReturnObject",
                            "startLn": 124,
                            "endLn": 135,
                            "testMethod": "@Test\n public void testReturnObject ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     Collection < Object > result = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 129,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testIncrementAndLet",
                            "startLn": 137,
                            "endLn": 148,
                            "testMethod": "@Test\n public void testIncrementAndLet ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     assertThat(qResult.get(0).<Long>field(\"STR\")).isEqualTo(4L);\n}",
                            "oracle": "assertThat(qResult.get(0).<Long>field(\"STR\")).isEqualTo(4L);",
                            "oracleLn": 145,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testIf1",
                            "startLn": 164,
                            "endLn": 177,
                            "testMethod": "@Test\n public void testIf1 ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 173,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testIf2",
                            "startLn": 179,
                            "endLn": 192,
                            "testMethod": "@Test\n public void testIf2 ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 188,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testIf3",
                            "startLn": 194,
                            "endLn": 201,
                            "testMethod": "@Test\n public void testIf3 ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 199,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testNestedIf2",
                            "startLn": 203,
                            "endLn": 219,
                            "testMethod": "@Test\n public void testNestedIf2 ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 215,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testNestedIf3",
                            "startLn": 221,
                            "endLn": 237,
                            "testMethod": "@Test\n public void testNestedIf3 ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 233,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testIfRealQuery",
                            "startLn": 239,
                            "endLn": 252,
                            "testMethod": "@Test\n public void testIfRealQuery ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 248,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testIfMultipleStatements",
                            "startLn": 254,
                            "endLn": 268,
                            "testMethod": "@Test\n public void testIfMultipleStatements ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Object qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 264,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testScriptSubContext",
                            "startLn": 270,
                            "endLn": 283,
                            "testMethod": "@Test\n public void testScriptSubContext ( ) throws Exception {\n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     Iterable qResult = db . command ( new OCommandScript ( \"STR\" , script . toString ( ) ) ) . execute ( ) ; \n     Assert.assertNotNull(qResult);\n}",
                            "oracle": "Assert.assertNotNull(qResult);",
                            "oracleLn": 276,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testQuotedRegex",
                            "startLn": 299,
                            "endLn": 311,
                            "testMethod": "@Test\n public void testQuotedRegex ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     String batch = \"STR\" ; \n     db . command ( new OCommandScript ( batch . toString ( ) ) ) . execute ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(result.size(),1);\n}",
                            "oracle": "Assert.assertEquals(result.size(),1);",
                            "oracleLn": 305,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testParameters1",
                            "startLn": 313,
                            "endLn": 332,
                            "testMethod": "@Test\n public void testParameters1 ( ) {\n     String className = \"STR\" ; \n     db . createVertexClass ( className ) ; \n     String script = \"STR\" + \"STR\" + className + \"STR\" + \"STR\" + className + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     HashMap < String , Object > map = new HashMap < > ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     OResultSet rs = db . execute ( \"STR\" , script , map ) ; \n     rs . close ( ) ; \n     rs = db . query ( \"STR\" + className + \"STR\" , \"STR\" ) ; \n     Assert.assertTrue(rs.hasNext());\n}",
                            "oracle": "Assert.assertTrue(rs.hasNext());",
                            "oracleLn": 324,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testPositionalParameters",
                            "startLn": 334,
                            "endLn": 349,
                            "testMethod": "@Test\n public void testPositionalParameters ( ) {\n     String className = \"STR\" ; \n     db . createVertexClass ( className ) ; \n     String script = \"STR\" + \"STR\" + className + \"STR\" + \"STR\" + className + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     OResultSet rs = db . execute ( \"STR\" , script , \"STR\" , \"STR\" ) ; \n     rs . close ( ) ; \n     rs = db . query ( \"STR\" + className + \"STR\" , \"STR\" ) ; \n     Assert.assertTrue(rs.hasNext());\n}",
                            "oracle": "Assert.assertTrue(rs.hasNext());",
                            "oracleLn": 342,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODocumentFieldConversionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentFieldConversionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 23,
                        "endLn": 67,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + this . getClass ( ) . getSimpleName ( ) ) ; \n db . create ( ) ; \n clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n clazz . createProperty ( \"STR\" , OType . INTEGER ) ; \n clazz . createProperty ( \"STR\" , OType . STRING ) ; \n clazz . createProperty ( \"STR\" , OType . BOOLEAN ) ; \n clazz . createProperty ( \"STR\" , OType . LONG ) ; \n clazz . createProperty ( \"STR\" , OType . FLOAT ) ; \n clazz . createProperty ( \"STR\" , OType . DOUBLE ) ; \n clazz . createProperty ( \"STR\" , OType . DECIMAL ) ; \n clazz . createProperty ( \"STR\" , OType . DATE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . BYTE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . INTEGER ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . LONG ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . STRING ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . FLOAT ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . DOUBLE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . DECIMAL ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . BOOLEAN ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . DATE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . BYTE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . INTEGER ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . LONG ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . STRING ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . FLOAT ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . DOUBLE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . DECIMAL ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . BOOLEAN ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDSET , OType . DATE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . BYTE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . INTEGER ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . LONG ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . STRING ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . FLOAT ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . DOUBLE ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . DECIMAL ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . BOOLEAN ) ; \n clazz . createProperty ( \"STR\" , OType . EMBEDDEDMAP , OType . DATE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testConversionAlsoWithWrongType",
                            "startLn": 356,
                            "endLn": 386,
                            "testMethod": "@Test\n public void testConversionAlsoWithWrongType ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . set ( db ) ; \n     ODocument doc = new ODocument ( clazz ) ; \n     doc . field ( \"STR\" , 2 , OType . INTEGER ) ; \n     assertTrue(doc.field(\"STR\")instanceofFloat);\n}",
                            "oracle": "assertTrue(doc.field(\"STR\")instanceofFloat);",
                            "oracleLn": 361,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessSerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessSerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n serializer = new ORecordSerializerSchemaAware2CSV ( ) ; \n defaultSerializer = ODatabaseDocumentTx . getDefaultSerializer ( ) ; \n ODatabaseDocumentTx . setDefaultSerializer ( serializer ) ; \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleEmbeddedDoc",
                            "startLn": 218,
                            "endLn": 234,
                            "testMethod": "@Test\n public void testSimpleEmbeddedDoc ( ) {\n     ODocument document = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , embedded ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(document.fields(),extr.fields());\n}",
                            "oracle": "assertEquals(document.fields(),extr.fields());",
                            "oracleLn": 227,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        },
                        {
                            "testName": "testMapOfEmbeddedDocument",
                            "startLn": 236,
                            "endLn": 257,
                            "testMethod": "@Test\n public void testMapOfEmbeddedDocument ( ) {\n     ODocument document = new ODocument ( ) ; \n     ODocument embeddedInMap = new ODocument ( ) ; \n     embeddedInMap . field ( \"STR\" , \"STR\" ) ; \n     embeddedInMap . field ( \"STR\" , \"STR\" ) ; \n     Map < String , ODocument > map = new HashMap < String , ODocument > ( ) ; \n     map . put ( \"STR\" , embeddedInMap ) ; \n     document . field ( \"STR\" , map , OType . EMBEDDEDMAP ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     Map < String , ODocument > mapS = extr . field ( \"STR\" ) ; \n     assertEquals(1,mapS.size());\n}",
                            "oracle": "assertEquals(1,mapS.size());",
                            "oracleLn": 248,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestNullLinkInCollection",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/TestNullLinkInCollection.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 29,
                        "endLn": 34,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + TestNullLinkInCollection . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLinkListRemovedRecord",
                            "startLn": 41,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testLinkListRemovedRecord ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     List < ORecordId > docs = new ArrayList < ORecordId > ( ) ; \n     docs . add ( new ORecordId ( 10 , 20 ) ) ; \n     doc . field ( \"STR\" , docs , OType . LINKLIST ) ; \n     db . save ( doc ) ; \n     List < ODocument > res = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertNull(((List)res.get(0).field(\"STR\")).get(0));\n}",
                            "oracle": "assertNull(((List)res.get(0).field(\"STR\")).get(0));",
                            "oracleLn": 49,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testLinkSetRemovedRecord",
                            "startLn": 53,
                            "endLn": 62,
                            "testMethod": "@Test\n public void testLinkSetRemovedRecord ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     Set < ORecordId > docs = new HashSet < ORecordId > ( ) ; \n     docs . add ( new ORecordId ( 10 , 20 ) ) ; \n     doc . field ( \"STR\" , docs , OType . LINKSET ) ; \n     db . save ( doc ) ; \n     List < ODocument > res = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertNull(((Set)res.get(0).field(\"STR\")).iterator().next());\n}",
                            "oracle": "assertNull(((Set)res.get(0).field(\"STR\")).iterator().next());",
                            "oracleLn": 61,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "CheckClassTypeStepTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClassTypeStepTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) { \n factory = new OrientDB ( PATH , OrientDBConfig . defaultConfig ( ) ) ; \n factory . create ( DB_NAME , ODatabaseType . MEMORY ) ; \n database = factory . open ( DB_NAME , USER , PASSWORD ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCheckSubclasses",
                            "startLn": 14,
                            "endLn": 25,
                            "testMethod": "@Test\n public void shouldCheckSubclasses ( ) {\n     OBasicCommandContext context = new OBasicCommandContext ( ) ; \n     context . setDatabase ( database ) ; \n     OClass parentClass = createClassInstance ( ) ; \n     OClass childClass = createChildClassInstance ( parentClass ) ; \n     CheckClassTypeStep step = new CheckClassTypeStep ( childClass . getName ( ) , parentClass . getName ( ) , context , false ) ; \n     OResultSet result = step . syncPull ( context , 20 ) ; \n     Assert.assertEquals(0,result.stream().count());\n}",
                            "oracle": "Assert.assertEquals(0,result.stream().count());",
                            "oracleLn": 22,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "stream",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } "
                        },
                        {
                            "testName": "shouldCheckOneType",
                            "startLn": 27,
                            "endLn": 37,
                            "testMethod": "@Test\n public void shouldCheckOneType ( ) {\n     OBasicCommandContext context = new OBasicCommandContext ( ) ; \n     context . setDatabase ( database ) ; \n     String className = createClassInstance ( ) . getName ( ) ; \n     CheckClassTypeStep step = new CheckClassTypeStep ( className , className , context , false ) ; \n     OResultSet result = step . syncPull ( context , 20 ) ; \n     Assert.assertEquals(0,result.stream().count());\n}",
                            "oracle": "Assert.assertEquals(0,result.stream().count());",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "stream",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CheckClusterTypeStepTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClusterTypeStepTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) { \n factory = new OrientDB ( PATH , OrientDBConfig . defaultConfig ( ) ) ; \n factory . create ( DB_NAME , ODatabaseType . MEMORY ) ; \n database = factory . open ( DB_NAME , USER , PASSWORD ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCheckClusterType",
                            "startLn": 17,
                            "endLn": 27,
                            "testMethod": "@Test\n public void shouldCheckClusterType ( ) {\n     OClass clazz = createClassInstance ( ) . addCluster ( CLASS_CLUSTER_NAME ) ; \n     OBasicCommandContext context = new OBasicCommandContext ( ) ; \n     context . setDatabase ( database ) ; \n     CheckClusterTypeStep step = new CheckClusterTypeStep ( CLASS_CLUSTER_NAME , clazz . getName ( ) , context , false ) ; \n     OResultSet result = step . syncPull ( context , 20 ) ; \n     Assert.assertEquals(0,result.stream().count());\n}",
                            "oracle": "Assert.assertEquals(0,result.stream().count());",
                            "oracleLn": 24,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "stream",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessBinarySerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createSerializer",
                        "startLn": 67,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void createSerializer ( ) { \n if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) ) serializer = new ORecordSerializerNetwork ( ) ; \n else if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) + 1 ) serializer = new ORecordSerializerNetworkV37 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleEmbeddedDoc",
                            "startLn": 456,
                            "endLn": 472,
                            "testMethod": "@Test\n public void testSimpleEmbeddedDoc ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     ODocument embedded = new ODocument ( ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     embedded . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , embedded , OType . EMBEDDED ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(document.fields(),extr.fields());\n}",
                            "oracle": "assertEquals(document.fields(),extr.fields());",
                            "oracleLn": 466,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        },
                        {
                            "testName": "testlistOfList",
                            "startLn": 535,
                            "endLn": 551,
                            "testMethod": "@Test\n public void testlistOfList ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     List < List < String > > list = new ArrayList < List < String > > ( ) ; \n     List < String > ls = new ArrayList < String > ( ) ; \n     ls . add ( \"STR\" ) ; \n     ls . add ( \"STR\" ) ; \n     list . add ( ls ) ; \n     document . field ( \"STR\" , list ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 547,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        },
                        {
                            "testName": "testArrayOfArray",
                            "startLn": 553,
                            "endLn": 573,
                            "testMethod": "@Test\n public void testArrayOfArray ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     String [ ] [ ] array = new String [ 1 ] [ ] ; \n     String [ ] ls = new String [ 2 ] ; \n     ls [ 0 ] = \"STR\" ; \n     ls [ 1 ] = \"STR\" ; \n     array [ 0 ] = ls ; \n     document . field ( \"STR\" , array ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 565,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        },
                        {
                            "testName": "testEmbeddedListOfEmbeddedMap",
                            "startLn": 575,
                            "endLn": 594,
                            "testMethod": "@Test\n public void testEmbeddedListOfEmbeddedMap ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     List < Map < String , String > > coll = new ArrayList < Map < String , String > > ( ) ; \n     Map < String , String > map = new HashMap < String , String > ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     Map < String , String > map2 = new HashMap < String , String > ( ) ; \n     map2 . put ( \"STR\" , \"STR\" ) ; \n     map2 . put ( \"STR\" , \"STR\" ) ; \n     coll . add ( map ) ; \n     coll . add ( map2 ) ; \n     document . field ( \"STR\" , coll ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 591,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        },
                        {
                            "testName": "testDocumentWithCostum",
                            "startLn": 655,
                            "endLn": 670,
                            "testMethod": "@Test\n public void testDocumentWithCostum ( ) {\n     boolean old = OGlobalConfiguration . DB_CUSTOM_SUPPORT . getValueAsBoolean ( ) ; \n     OGlobalConfiguration . DB_CUSTOM_SUPPORT . setValue ( true ) ; \n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , new Custom ( ) ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.getClassName(),document.getClassName());\n}",
                            "oracle": "assertEquals(extr.getClassName(),document.getClassName());",
                            "oracleLn": 665,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "getClassName",
                            "focalStartLn": 2371,
                            "focalEndLn": 2376,
                            "focalMethod": " public String getClassName ( ) { \n if ( _className == null ) fetchClassName ( ) ; \n return _className ; \n } "
                        },
                        {
                            "testName": "testDocumentWithCostumDocument",
                            "startLn": 672,
                            "endLn": 684,
                            "testMethod": "@Test\n public void testDocumentWithCostumDocument ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , new CustomDocument ( ) ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.getClassName(),document.getClassName());\n}",
                            "oracle": "assertEquals(extr.getClassName(),document.getClassName());",
                            "oracleLn": 680,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "getClassName",
                            "focalStartLn": 2371,
                            "focalEndLn": 2376,
                            "focalMethod": " public String getClassName ( ) { \n if ( _className == null ) fetchClassName ( ) ; \n return _className ; \n } "
                        },
                        {
                            "testName": "testSerializableValue",
                            "startLn": 836,
                            "endLn": 853,
                            "testMethod": "@Test\n public void testSerializableValue ( ) {\n     boolean old = OGlobalConfiguration . DB_CUSTOM_SUPPORT . getValueAsBoolean ( ) ; \n     OGlobalConfiguration . DB_CUSTOM_SUPPORT . setValue ( true ) ; \n     ODocument document = new ODocument ( ) ; \n     SimpleSerializableClass ser = new SimpleSerializableClass ( ) ; \n     ser . name = \"STR\" ; \n     document . field ( \"STR\" , ser ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertNotNull(extr.field(\"STR\"));\n}",
                            "oracle": "assertNotNull(extr.field(\"STR\"));",
                            "oracleLn": 846,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testFieldNames",
                            "startLn": 855,
                            "endLn": 869,
                            "testMethod": "@Test\n public void testFieldNames ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . fields ( \"STR\" , 1 , \"STR\" , 2 , \"STR\" , 3 ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     final String [ ] fields = extr . fieldNames ( ) ; \n     assertNotNull(fields);\n}",
                            "oracle": "assertNotNull(fields);",
                            "oracleLn": 862,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fieldNames",
                            "focalStartLn": 1105,
                            "focalEndLn": 1126,
                            "focalMethod": " public String [ ] fieldNames ( ) { \n checkForLoading ( ) ; \n if ( _status == ORecordElement . STATUS . LOADED && _source != null && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) && ! ODatabaseRecordThreadLocal . instance ( ) . get ( ) . isClosed ( ) ) { \n final String [ ] fieldNames = _recordFormat . getFieldNamesRoot ( this , _source ) ; \n if ( fieldNames != null ) return fieldNames ; \n } checkForFields ( ) ; \n if ( _fields == null || _fields . size ( ) == 0 ) return EMPTY_STRINGS ; \n final List < String > names = new ArrayList < > ( _fields . size ( ) ) ; \n for ( Entry < String , ODocumentEntry > entry : _fields . entrySet ( ) ) { \n if ( entry . getValue ( ) . exist ( ) ) names . add ( entry . getKey ( ) ) ; \n } return names . toArray ( new String [ names . size ( ) ] ) ; \n } "
                        },
                        {
                            "testName": "testFieldNamesRaw",
                            "startLn": 871,
                            "endLn": 883,
                            "testMethod": "@Test\n public void testFieldNamesRaw ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . fields ( \"STR\" , 1 , \"STR\" , 2 , \"STR\" , 3 ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     final String [ ] fields = serializer . getFieldNamesRoot ( document , res ) ; \n     assertNotNull(fields);\n}",
                            "oracle": "assertNotNull(fields);",
                            "oracleLn": 877,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/ORecordSerializer.java",
                            "focalName": "getFieldNamesRoot",
                            "focalStartLn": 37,
                            "focalEndLn": 37,
                            "focalMethod": " String [ ] getFieldNamesRoot ( ODocument reference , byte [ ] iSource ) ; \n"
                        },
                        {
                            "testName": "testPartial",
                            "startLn": 885,
                            "endLn": 901,
                            "testMethod": "@Test\n public void testPartial ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , 20 ) ; \n     document . field ( \"STR\" , ( short ) 20 ) ; \n     document . field ( \"STR\" , ( long ) 20 ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n \"STR\" , \"STR\" } ) ; \n     assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));\n}",
                            "oracle": "assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));",
                            "oracleLn": 894,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testWithRemove",
                            "startLn": 903,
                            "endLn": 920,
                            "testMethod": "@Test\n public void testWithRemove ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , 20 ) ; \n     document . field ( \"STR\" , ( short ) 20 ) ; \n     document . field ( \"STR\" , ( long ) 20 ) ; \n     document . removeField ( \"STR\" ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));\n}",
                            "oracle": "assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));",
                            "oracleLn": 913,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testPartialCustom",
                            "startLn": 922,
                            "endLn": 942,
                            "testMethod": "@Test\n public void testPartialCustom ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     document . field ( \"STR\" , 20 ) ; \n     document . field ( \"STR\" , ( short ) 20 ) ; \n     document . field ( \"STR\" , ( long ) 20 ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = new ODocument ( res ) ; \n     ORecordInternal . setRecordSerializer ( extr , serializer ) ; \n     assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));\n}",
                            "oracle": "assertEquals(document.field(\"STR\"),extr.<Object>field(\"STR\"));",
                            "oracleLn": 932,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testListOfMapsWithNull",
                            "startLn": 965,
                            "endLn": 987,
                            "testMethod": "@Test\n public void testListOfMapsWithNull ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     List lista = new ArrayList < > ( ) ; \n     Map mappa = new LinkedHashMap < > ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     mappa . put ( \"STR\" , null ) ; \n     lista . add ( mappa ) ; \n     mappa = new HashMap ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     lista . add ( mappa ) ; \n     document . setProperty ( \"STR\" , lista ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 980,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testBasicCreateProperty",
                            "startLn": 49,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testBasicCreateProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 57,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testBasicUnsafeCreateProperty",
                            "startLn": 71,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testBasicUnsafeCreateProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 79,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreatePropertyWithLinkedClass",
                            "startLn": 93,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testCreatePropertyWithLinkedClass ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_DIVISION ) ; \n     assertEquals(nameProperty.getName(),PROP_DIVISION);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_DIVISION);",
                            "oracleLn": 102,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreatePropertyWithEmbeddedType",
                            "startLn": 117,
                            "endLn": 138,
                            "testMethod": "@Test\n public void testCreatePropertyWithEmbeddedType ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 125,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateMandatoryProperty",
                            "startLn": 140,
                            "endLn": 159,
                            "testMethod": "@Test\n public void testCreateMandatoryProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 148,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateNotNullProperty",
                            "startLn": 161,
                            "endLn": 180,
                            "testMethod": "@Test\n public void testCreateNotNullProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 169,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateReadOnlyProperty",
                            "startLn": 182,
                            "endLn": 201,
                            "testMethod": "@Test\n public void testCreateReadOnlyProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 190,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateReadOnlyFalseProperty",
                            "startLn": 203,
                            "endLn": 220,
                            "testMethod": "@Test\n public void testCreateReadOnlyFalseProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 211,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateMandatoryPropertyWithEmbeddedType",
                            "startLn": 222,
                            "endLn": 243,
                            "testMethod": "@Test\n public void testCreateMandatoryPropertyWithEmbeddedType ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 230,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateUnsafePropertyWithEmbeddedType",
                            "startLn": 245,
                            "endLn": 263,
                            "testMethod": "@Test\n public void testCreateUnsafePropertyWithEmbeddedType ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 253,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testComplexCreateProperty",
                            "startLn": 265,
                            "endLn": 287,
                            "testMethod": "@Test\n public void testComplexCreateProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 273,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 289,
                            "endLn": 313,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 297,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testDefaultAndMinMaxUnsafeProperty",
                            "startLn": 315,
                            "endLn": 339,
                            "testMethod": "@Test\n public void testDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 323,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testExtraSpaces",
                            "startLn": 341,
                            "endLn": 361,
                            "testMethod": "@Test\n public void testExtraSpaces ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 349,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testNonStrict",
                            "startLn": 363,
                            "endLn": 391,
                            "testMethod": "@Test\n public void testNonStrict ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . getStorage ( ) . setProperty ( OStatement . CUSTOM_STRICT_SQL , \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 372,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testMandatoryAsLinkedName",
                            "startLn": 432,
                            "endLn": 453,
                            "testMethod": "@Test\n public void testMandatoryAsLinkedName ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OClass mandatoryClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 442,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 455,
                            "endLn": 476,
                            "testMethod": "@Test\n public void testIfNotExists ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty property = companyClass . getProperty ( \"STR\" ) ; \n     assertEquals(property.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(property.getName(),PROP_NAME);",
                            "oracleLn": 463,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLUpdateTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLUpdateTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testSingleQuoteInNamedParameter",
                            "startLn": 304,
                            "endLn": 328,
                            "testMethod": "@Test\n public void testSingleQuoteInNamedParameter ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final ODocument test = new ODocument ( \"STR\" ) ; \n     test . field ( \"STR\" , \"STR\" ) ; \n     db . save ( test ) ; \n     ODocument queried = ( ODocument ) db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) . get ( 0 ) ; \n     assertEquals(queried.field(\"STR\"),\"STR\");\n}",
                            "oracle": "assertEquals(queried.field(\"STR\"),\"STR\");",
                            "oracleLn": 313,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testQuotedStringInNamedParameter",
                            "startLn": 330,
                            "endLn": 354,
                            "testMethod": "@Test\n public void testQuotedStringInNamedParameter ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final ODocument test = new ODocument ( \"STR\" ) ; \n     test . field ( \"STR\" , \"STR\" ) ; \n     db . save ( test ) ; \n     ODocument queried = ( ODocument ) db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) . get ( 0 ) ; \n     assertEquals(queried.field(\"STR\"),\"STR\");\n}",
                            "oracle": "assertEquals(queried.field(\"STR\"),\"STR\");",
                            "oracleLn": 339,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testQuotesInJson",
                            "startLn": 356,
                            "endLn": 369,
                            "testMethod": "@Test\n public void testQuotesInJson ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument queried = ( ODocument ) db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) . get ( 0 ) ; \n     assertEquals(queried.field(\"STR\"),\"STR\");\n}",
                            "oracle": "assertEquals(queried.field(\"STR\"),\"STR\");",
                            "oracleLn": 363,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testDottedTargetInScript",
                            "startLn": 371,
                            "endLn": 392,
                            "testMethod": "@Test\n public void testDottedTargetInScript ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     StringBuilder script = new StringBuilder ( ) ; \n     script . append ( \"STR\" ) ; \n     script . append ( \"STR\" ) ; \n     db . command ( new OCommandScript ( script . toString ( ) ) ) . execute ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertNotNull(result);\n}",
                            "oracle": "assertNotNull(result);",
                            "oracleLn": 384,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CountFromIndexStepTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CountFromIndexStepTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "precondition",
                        "startLn": 44,
                        "endLn": 57,
                        "setupMethod": "@BeforeClass\n public static void precondition ( ) { \n OClass clazz = createClassInstance ( ) ; \n clazz . createProperty ( PROPERTY_NAME , OType . STRING ) ; \n String className = clazz . getName ( ) ; \n indexName = className + \"STR\" + PROPERTY_NAME ; \n clazz . createIndex ( indexName , OClass . INDEX_TYPE . NOTUNIQUE , PROPERTY_NAME ) ; \n for ( int i = 0 ; \n i < 20 ; \n i ++ ) { \n ODocument document = new ODocument ( className ) ; \n document . field ( PROPERTY_NAME , PROPERTY_VALUE ) ; \n document . save ( ) ; \n } } @BeforeClass\n public static void setUp ( ) { \n factory = new OrientDB ( PATH , OrientDBConfig . defaultConfig ( ) ) ; \n factory . create ( DB_NAME , ODatabaseType . MEMORY ) ; \n database = factory . open ( DB_NAME , USER , PASSWORD ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCountRecordsOfIndex",
                            "startLn": 59,
                            "endLn": 75,
                            "testMethod": "@Test\n public void shouldCountRecordsOfIndex ( ) {\n     OIndexName name = new OIndexName ( - 1 ) ; \n     name . setValue ( indexName ) ; \n     OIndexIdentifier identifier = new OIndexIdentifier ( - 1 ) ; \n     identifier . setIndexName ( name ) ; \n     identifier . setIndexNameString ( name . getValue ( ) ) ; \n     identifier . setType ( identifierType ) ; \n     OBasicCommandContext context = new OBasicCommandContext ( ) ; \n     context . setDatabase ( database ) ; \n     CountFromIndexStep step = new CountFromIndexStep ( identifier , ALIAS , context , false ) ; \n     OResultSet result = step . syncPull ( context , 20 ) ; \n     Assert.assertEquals(20,(long)result.next().getProperty(ALIAS));\n}",
                            "oracle": "Assert.assertEquals(20,(long)result.next().getProperty(ALIAS));",
                            "oracleLn": 71,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OAlterSequenceStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterSequenceStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetIncrement",
                            "startLn": 29,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testSetIncrement ( ) {\n     String sequenceName = \"STR\" ; \n     db . getMetadata ( ) . getSequenceLibrary ( ) . createSequence ( sequenceName , OSequence . SEQUENCE_TYPE . ORDERED , new OSequence . CreateParams ( ) ) ; \n     OResultSet result = db . command ( \"STR\" + sequenceName + \"STR\" ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "command",
                            "focalStartLn": 900,
                            "focalEndLn": 902,
                            "focalMethod": " default OResultSet command ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OBeginStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OBeginStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommitStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCommitStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OAlterDatabaseStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterDatabaseStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetProperty",
                            "startLn": 29,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testSetProperty ( ) {\n     Object previousValue = db . get ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS ) ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     Object currentValue = db . get ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "get",
                            "focalStartLn": 425,
                            "focalEndLn": 425,
                            "focalMethod": " Object get ( ATTRIBUTES iAttribute ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OAlterPropertyStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterPropertyStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 21,
                        "endLn": 24,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetProperty",
                            "startLn": 30,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testSetProperty ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     OProperty prop = clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     prop . setMax ( \"STR\" ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     printExecutionPlan ( null , result ) ; \n     Object currentValue = prop . getMax ( ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 39,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getMax",
                            "focalStartLn": 121,
                            "focalEndLn": 121,
                            "focalMethod": " public String getMax ( ) ; \n"
                        },
                        {
                            "testName": "testSetCustom",
                            "startLn": 50,
                            "endLn": 68,
                            "testMethod": "@Test\n public void testSetCustom ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     OProperty prop = clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     prop . setCustom ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     printExecutionPlan ( null , result ) ; \n     Object currentValue = prop . getCustom ( \"STR\" ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 59,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getCustom",
                            "focalStartLn": 257,
                            "focalEndLn": 257,
                            "focalMethod": " public String getCustom ( final String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OConsoleStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OConsoleStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 17,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testError",
                            "startLn": 28,
                            "endLn": 37,
                            "testMethod": "@Test\n public void testError ( ) {\n     OResultSet result = db . command ( \"STR\" ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "command",
                            "focalStartLn": 900,
                            "focalEndLn": 902,
                            "focalMethod": " default OResultSet command ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        },
                        {
                            "testName": "testLog",
                            "startLn": 39,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testLog ( ) {\n     OResultSet result = db . command ( \"STR\" ) ; \n     Assert.assertNotNull(result);\n}",
                            "oracle": "Assert.assertNotNull(result);",
                            "oracleLn": 42,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "command",
                            "focalStartLn": 900,
                            "focalEndLn": 902,
                            "focalMethod": " default OResultSet command ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCreateFunctionStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateFunctionStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 16,
                        "endLn": 19,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 25,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + name + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 27,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testAbstract",
                            "startLn": 37,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testAbstract ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 43,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testCluster",
                            "startLn": 47,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testCluster ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 53,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testClusters",
                            "startLn": 58,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testClusters ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 70,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testIfNotExists ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 76,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateClusterStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClusterStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 29,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String clusterName = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + clusterName ) ; \n     Assert.assertTrue(db.getClusterIdByName(clusterName)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName)>0);",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        },
                        {
                            "testName": "testWithNumber",
                            "startLn": 51,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testWithNumber ( ) {\n     String clusterName = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + clusterName + \"STR\" ) ; \n     Assert.assertTrue(db.getClusterIdByName(clusterName)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName)>0);",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        },
                        {
                            "testName": "testBlob",
                            "startLn": 66,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testBlob ( ) {\n     String clusterName = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + clusterName ) ; \n     Assert.assertTrue(db.getClusterIdByName(clusterName)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName)>0);",
                            "oracleLn": 70,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 76,
                            "endLn": 93,
                            "testMethod": "@Test\n public void testIfNotExists ( ) {\n     String clusterName = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + clusterName + \"STR\" ) ; \n     Assert.assertTrue(db.getClusterIdByName(clusterName)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName)>0);",
                            "oracleLn": 80,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateIndexStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateIndexStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 28,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));\n}",
                            "oracle": "Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 46,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testIfNotExists ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));\n}",
                            "oracle": "Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));",
                            "oracleLn": 51,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateLinkStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateLinkStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBasic",
                            "startLn": 27,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testBasic ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 37,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateUserStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateUserStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 27,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     result . close ( ) ; \n     result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateSequenceStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateSequenceStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimple",
                            "startLn": 27,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testSimple ( ) {\n     db . command ( \"STR\" ) ; \n     OResultSet results = db . query ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIncrement",
                            "startLn": 52,
                            "endLn": 75,
                            "testMethod": "@Test\n public void testIncrement ( ) {\n     db . command ( \"STR\" ) ; \n     OResultSet results = db . query ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 56,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testStart",
                            "startLn": 77,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testStart ( ) {\n     db . command ( \"STR\" ) ; \n     OResultSet results = db . query ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 81,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testStartIncrement",
                            "startLn": 103,
                            "endLn": 127,
                            "testMethod": "@Test\n public void testStartIncrement ( ) {\n     db . command ( \"STR\" ) ; \n     OResultSet results = db . query ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 107,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCreateSequenceIfNotExists",
                            "startLn": 129,
                            "endLn": 137,
                            "testMethod": "@Test\n public void testCreateSequenceIfNotExists ( ) {\n     db . command ( \"STR\" ) . close ( ) ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     Assert.assertFalse(result.hasNext());\n}",
                            "oracle": "Assert.assertFalse(result.hasNext());",
                            "oracleLn": 133,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OAlterClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testName1",
                            "startLn": 30,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testName1 ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     Assert.assertNull(schema.getClass(className));\n}",
                            "oracle": "Assert.assertNull(schema.getClass(className));",
                            "oracleLn": 37,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testShortName",
                            "startLn": 65,
                            "endLn": 75,
                            "testMethod": "@Test\n public void testShortName ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals(className+\"STR\",clazz.getShortName());\n}",
                            "oracle": "Assert.assertEquals(className+\"STR\",clazz.getShortName());",
                            "oracleLn": 73,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getShortName",
                            "focalStartLn": 269,
                            "focalEndLn": 269,
                            "focalMethod": " String getShortName ( ) ; \n"
                        },
                        {
                            "testName": "testSuperclass",
                            "startLn": 128,
                            "endLn": 139,
                            "testMethod": "@Test\n public void testSuperclass ( ) {\n     String className = \"STR\" ; \n     String superclassName = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OClass superclass = schema . createClass ( superclassName ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" + superclassName ) ; \n     schema . reload ( ) ; \n     Assert.assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));\n}",
                            "oracle": "Assert.assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));",
                            "oracleLn": 137,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getSuperClasses",
                            "focalStartLn": 87,
                            "focalEndLn": 87,
                            "focalMethod": " List < OClass > getSuperClasses ( ) ; \n"
                        },
                        {
                            "testName": "testSuperclasses",
                            "startLn": 141,
                            "endLn": 155,
                            "testMethod": "@Test\n public void testSuperclasses ( ) {\n     String className = \"STR\" ; \n     String superclassName = \"STR\" ; \n     String superclassName2 = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OClass superclass = schema . createClass ( superclassName ) ; \n     OClass superclass2 = schema . createClass ( superclassName2 ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" + superclassName + \"STR\" + superclassName2 ) ; \n     schema . reload ( ) ; \n     Assert.assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));\n}",
                            "oracle": "Assert.assertTrue(schema.getClass(className).getSuperClasses().contains(superclass));",
                            "oracleLn": 152,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getSuperClasses",
                            "focalStartLn": 87,
                            "focalEndLn": 87,
                            "focalMethod": " List < OClass > getSuperClasses ( ) ; \n"
                        },
                        {
                            "testName": "testOversize",
                            "startLn": 157,
                            "endLn": 167,
                            "testMethod": "@Test\n public void testOversize ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals((Object)10.0f,clazz.getOverSize());\n}",
                            "oracle": "Assert.assertEquals((Object)10.0f,clazz.getOverSize());",
                            "oracleLn": 165,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getOverSize",
                            "focalStartLn": 214,
                            "focalEndLn": 214,
                            "focalMethod": " float getOverSize ( ) ; \n"
                        },
                        {
                            "testName": "testStrictmode",
                            "startLn": 169,
                            "endLn": 179,
                            "testMethod": "@Test\n public void testStrictmode ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertTrue(clazz.isStrictMode());\n}",
                            "oracle": "Assert.assertTrue(clazz.isStrictMode());",
                            "oracleLn": 177,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "isStrictMode",
                            "focalStartLn": 73,
                            "focalEndLn": 73,
                            "focalMethod": " boolean isStrictMode ( ) ; \n"
                        },
                        {
                            "testName": "testCustom",
                            "startLn": 181,
                            "endLn": 191,
                            "testMethod": "@Test\n public void testCustom ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));",
                            "oracleLn": 189,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getCustom",
                            "focalStartLn": 437,
                            "focalEndLn": 437,
                            "focalMethod": " String getCustom ( String iName ) ; \n"
                        },
                        {
                            "testName": "testCustom2",
                            "startLn": 193,
                            "endLn": 203,
                            "testMethod": "@Test\n public void testCustom2 ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" , \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));",
                            "oracleLn": 201,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getCustom",
                            "focalStartLn": 437,
                            "focalEndLn": 437,
                            "focalMethod": " String getCustom ( String iName ) ; \n"
                        },
                        {
                            "testName": "testAbstract",
                            "startLn": 205,
                            "endLn": 215,
                            "testMethod": "@Test\n public void testAbstract ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertTrue(clazz.isAbstract());\n}",
                            "oracle": "Assert.assertTrue(clazz.isAbstract());",
                            "oracleLn": 213,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "isAbstract",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " boolean isAbstract ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n OClass v = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n if ( v == null ) { \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 32,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     schema . reload ( ) ; \n     Assert.assertNotNull(schema.getClass(className));\n}",
                            "oracle": "Assert.assertNotNull(schema.getClass(className));",
                            "oracleLn": 38,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        },
                        {
                            "testName": "testIfExists",
                            "startLn": 77,
                            "endLn": 98,
                            "testMethod": "@Test\n public void testIfExists ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     schema . reload ( ) ; \n     Assert.assertNotNull(schema.getClass(className));\n}",
                            "oracle": "Assert.assertNotNull(schema.getClass(className));",
                            "oracleLn": 83,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropClusterStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClusterStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 17,
                        "endLn": 24,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n OClass v = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n if ( v == null ) { \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 30,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String cluster = \"STR\" ; \n     ( ( ODatabaseDocumentTx ) db ) . getStorage ( ) . addCluster ( cluster ) ; \n     Assert.assertTrue(db.getClusterIdByName(cluster)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(cluster)>0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        },
                        {
                            "testName": "testDropClusterIfExists",
                            "startLn": 46,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testDropClusterIfExists ( ) {\n     String cluster = \"STR\" ; \n     ( ( ODatabaseDocumentTx ) db ) . getStorage ( ) . addCluster ( cluster ) ; \n     Assert.assertTrue(db.getClusterIdByName(cluster)>0);\n}",
                            "oracle": "Assert.assertTrue(db.getClusterIdByName(cluster)>0);",
                            "oracleLn": 50,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "getClusterIdByName",
                            "focalStartLn": 250,
                            "focalEndLn": 250,
                            "focalMethod": " int getClusterIdByName ( String iClusterName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropIndexStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropIndexStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 21,
                        "endLn": 25,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 32,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     OIndex < ? > index = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n     String indexName = index . getName ( ) ; \n     Assert.assertNotNull(((OIndexManager)db.getMetadata().getIndexManager().reload()).getIndex(indexName));\n}",
                            "oracle": "Assert.assertNotNull(((OIndexManager)db.getMetadata().getIndexManager().reload()).getIndex(indexName));",
                            "oracleLn": 36,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        },
                        {
                            "testName": "testAll",
                            "startLn": 50,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testAll ( ) {\n     OIndex < ? > index = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n     String indexName = index . getName ( ) ; \n     Assert.assertNotNull(db.getMetadata().getIndexManager().reload().getIndex(indexName));\n}",
                            "oracle": "Assert.assertNotNull(db.getMetadata().getIndexManager().reload().getIndex(indexName));",
                            "oracleLn": 54,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropPropertyStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropPropertyStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 29,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String className = \"STR\" ; \n     String propertyName = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) . createProperty ( propertyName , OType . STRING ) ; \n     schema . reload ( ) ; \n     Assert.assertNotNull(schema.getClass(className).getProperty(propertyName));\n}",
                            "oracle": "Assert.assertNotNull(schema.getClass(className).getProperty(propertyName));",
                            "oracleLn": 36,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getProperty",
                            "focalStartLn": 113,
                            "focalEndLn": 113,
                            "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropUserStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropUserStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 29,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     result . close ( ) ; \n     result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 35,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OExplainStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OExplainStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testExplainSelectNoTarget",
                            "startLn": 28,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testExplainSelectNoTarget ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODropSequenceStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropSequenceStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 30,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     db . getMetadata ( ) . getSequenceLibrary ( ) . createSequence ( name , OSequence . SEQUENCE_TYPE . CACHED , new OSequence . CreateParams ( ) ) ; \n     Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));\n}",
                            "oracle": "Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java",
                            "focalName": "getSequence",
                            "focalStartLn": 38,
                            "focalEndLn": 38,
                            "focalMethod": " OSequence getSequence ( String iName ) ; \n"
                        },
                        {
                            "testName": "testNonExistingWithIfExists",
                            "startLn": 61,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testNonExistingWithIfExists ( ) {\n     String name = \"STR\" ; \n     OSequenceLibrary lib = db . getMetadata ( ) . getSequenceLibrary ( ) ; \n     Assert.assertNull(lib.getSequence(name));\n}",
                            "oracle": "Assert.assertNull(lib.getSequence(name));",
                            "oracleLn": 65,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java",
                            "focalName": "getSequence",
                            "focalStartLn": 38,
                            "focalEndLn": 38,
                            "focalMethod": " OSequence getSequence ( String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreatePropertyStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBasicCreateProperty",
                            "startLn": 41,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testBasicCreateProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 47,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testBasicUnsafeCreateProperty",
                            "startLn": 56,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testBasicUnsafeCreateProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 62,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreatePropertyWithLinkedClass",
                            "startLn": 71,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testCreatePropertyWithLinkedClass ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_DIVISION ) ; \n     assertEquals(nameProperty.getName(),PROP_DIVISION);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_DIVISION);",
                            "oracleLn": 78,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreatePropertyWithEmbeddedType",
                            "startLn": 88,
                            "endLn": 102,
                            "testMethod": "@Test\n public void testCreatePropertyWithEmbeddedType ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 94,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateMandatoryProperty",
                            "startLn": 104,
                            "endLn": 116,
                            "testMethod": "@Test\n public void testCreateMandatoryProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 110,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateNotNullProperty",
                            "startLn": 118,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testCreateNotNullProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 124,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateReadOnlyProperty",
                            "startLn": 132,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testCreateReadOnlyProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 138,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateReadOnlyFalseProperty",
                            "startLn": 146,
                            "endLn": 156,
                            "testMethod": "@Test\n public void testCreateReadOnlyFalseProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 152,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateMandatoryPropertyWithEmbeddedType",
                            "startLn": 158,
                            "endLn": 173,
                            "testMethod": "@Test\n public void testCreateMandatoryPropertyWithEmbeddedType ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 164,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateUnsafePropertyWithEmbeddedType",
                            "startLn": 175,
                            "endLn": 186,
                            "testMethod": "@Test\n public void testCreateUnsafePropertyWithEmbeddedType ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 181,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testComplexCreateProperty",
                            "startLn": 188,
                            "endLn": 203,
                            "testMethod": "@Test\n public void testComplexCreateProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_OFFICERS ) ; \n     assertEquals(nameProperty.getName(),PROP_OFFICERS);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_OFFICERS);",
                            "oracleLn": 194,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 205,
                            "endLn": 223,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 211,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testDefaultAndMinMaxUnsafeProperty",
                            "startLn": 225,
                            "endLn": 242,
                            "testMethod": "@Test\n public void testDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 231,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testExtraSpaces",
                            "startLn": 244,
                            "endLn": 257,
                            "testMethod": "@Test\n public void testExtraSpaces ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 250,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testMandatoryAsLinkedName",
                            "startLn": 269,
                            "endLn": 283,
                            "testMethod": "@Test\n public void testMandatoryAsLinkedName ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OClass mandatoryClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 277,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 285,
                            "endLn": 305,
                            "testMethod": "@Test\n public void testIfNotExists ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = clazz . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 291,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OIfStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OIfStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPositive",
                            "startLn": 27,
                            "endLn": 34,
                            "testMethod": "@Test\n public void testPositive ( ) {\n     OResultSet results = db . command ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 30,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNegative",
                            "startLn": 36,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testNegative ( ) {\n     OResultSet results = db . command ( \"STR\" ) ; \n     Assert.assertFalse(results.hasNext());\n}",
                            "oracle": "Assert.assertFalse(results.hasNext());",
                            "oracleLn": 39,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIfReturn",
                            "startLn": 42,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testIfReturn ( ) {\n     OResultSet results = db . command ( \"STR\" ) ; \n     Assert.assertTrue(results.hasNext());\n}",
                            "oracle": "Assert.assertTrue(results.hasNext());",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OInsertStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OInsertStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLinkMapWithSubqueries",
                            "startLn": 406,
                            "endLn": 427,
                            "testMethod": "@Test\n public void testLinkMapWithSubqueries ( ) {\n     String className = \"STR\" ; \n     String itemclassName = \"STR\" ; \n     db . command ( \"STR\" + className ) ; \n     db . command ( \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + itemclassName + \"STR\" ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName + \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     OResult item = result . next ( ) ; \n     Map theMap = item . getProperty ( \"STR\" ) ; \n     Assert.assertEquals(1,theMap.size());\n}",
                            "oracle": "Assert.assertEquals(1,theMap.size());",
                            "oracleLn": 418,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testQuotedCharactersInJson",
                            "startLn": 429,
                            "endLn": 445,
                            "testMethod": "@Test\n public void testQuotedCharactersInJson ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) ; \n     db . command ( \"STR\" + className + \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     OResult item = result . next ( ) ; \n     String memo = item . getProperty ( \"STR\" ) ; \n     Assert.assertEquals(\"STR\",memo);\n}",
                            "oracle": "Assert.assertEquals(\"STR\",memo);",
                            "oracleLn": 437,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OGrantStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OGrantStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimple",
                            "startLn": 28,
                            "endLn": 34,
                            "testMethod": "@Test\n public void testSimple ( ) {\n     ORole testRole = db . getMetadata ( ) . getSecurity ( ) . createRole ( \"STR\" , OSecurityRole . ALLOW_MODES . DENY_ALL_BUT ) ; \n     Assert.assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,\"STR\",ORole.PERMISSION_EXECUTE));\n}",
                            "oracle": "Assert.assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,\"STR\",ORole.PERMISSION_EXECUTE));",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/security/ORole.java",
                            "focalName": "allow",
                            "focalStartLn": 183,
                            "focalEndLn": 196,
                            "focalMethod": " public boolean allow ( final ORule . ResourceGeneric resourceGeneric , String resourceSpecific , final int iCRUDOperation ) { \n final ORule rule = rules . get ( resourceGeneric ) ; \n if ( rule != null ) { \n final Boolean allowed = rule . isAllowed ( resourceSpecific , iCRUDOperation ) ; \n if ( allowed != null ) return allowed ; \n } if ( parentRole != null ) return parentRole . allow ( resourceGeneric , resourceSpecific , iCRUDOperation ) ; \n return mode == ALLOW_MODES . ALLOW_ALL_BUT ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORevokeStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ORevokeStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimple",
                            "startLn": 28,
                            "endLn": 37,
                            "testMethod": "@Test\n public void testSimple ( ) {\n     ORole testRole = db . getMetadata ( ) . getSecurity ( ) . createRole ( \"STR\" , OSecurityRole . ALLOW_MODES . DENY_ALL_BUT ) ; \n     Assert.assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,\"STR\",ORole.PERMISSION_EXECUTE));\n}",
                            "oracle": "Assert.assertFalse(testRole.allow(ORule.ResourceGeneric.SERVER,\"STR\",ORole.PERMISSION_EXECUTE));",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/security/ORole.java",
                            "focalName": "allow",
                            "focalStartLn": 183,
                            "focalEndLn": 196,
                            "focalMethod": " public boolean allow ( final ORule . ResourceGeneric resourceGeneric , String resourceSpecific , final int iCRUDOperation ) { \n final ORule rule = rules . get ( resourceGeneric ) ; \n if ( rule != null ) { \n final Boolean allowed = rule . isAllowed ( resourceSpecific , iCRUDOperation ) ; \n if ( allowed != null ) return allowed ; \n } if ( parentRole != null ) return parentRole . allow ( resourceGeneric , resourceSpecific , iCRUDOperation ) ; \n return mode == ALLOW_MODES . ALLOW_ALL_BUT ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUseIndexWithOrderBy2",
                            "startLn": 329,
                            "endLn": 336,
                            "testMethod": "@Test\n public void testUseIndexWithOrderBy2 ( ) throws Exception {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 333,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testUseIndexWithOr",
                            "startLn": 338,
                            "endLn": 346,
                            "testMethod": "@Test\n public void testUseIndexWithOr ( ) throws Exception {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 342,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testDoNotUseIndexWithOrNotIndexed",
                            "startLn": 348,
                            "endLn": 356,
                            "testMethod": "@Test\n public void testDoNotUseIndexWithOrNotIndexed ( ) throws Exception {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(indexUsages(db),idxUsagesBefore);\n}",
                            "oracle": "assertEquals(indexUsages(db),idxUsagesBefore);",
                            "oracleLn": 352,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testCompositeIndex",
                            "startLn": 358,
                            "endLn": 366,
                            "testMethod": "@Test\n public void testCompositeIndex ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 362,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testProjection",
                            "startLn": 368,
                            "endLn": 376,
                            "testMethod": "@Test\n public void testProjection ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 372,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testProjection2",
                            "startLn": 378,
                            "endLn": 386,
                            "testMethod": "@Test\n public void testProjection2 ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testCompositeIndex2",
                            "startLn": 388,
                            "endLn": 397,
                            "testMethod": "@Test\n public void testCompositeIndex2 ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 392,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOperatorPriority",
                            "startLn": 399,
                            "endLn": 434,
                            "testMethod": "@Test\n public void testOperatorPriority ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult2 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult3 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult4 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult5 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult6 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult7 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult8 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),qResult2.size());\n}",
                            "oracle": "assertEquals(qResult.size(),qResult2.size());",
                            "oracleLn": 409,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOperatorPriority2",
                            "startLn": 436,
                            "endLn": 463,
                            "testMethod": "@Test\n public void testOperatorPriority2 ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult2 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult3 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult4 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult5 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),qResult2.size());\n}",
                            "oracle": "assertEquals(qResult.size(),qResult2.size());",
                            "oracleLn": 443,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOperatorPriority3",
                            "startLn": 465,
                            "endLn": 492,
                            "testMethod": "@Test\n public void testOperatorPriority3 ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult2 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult3 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult4 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult5 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),qResult2.size());\n}",
                            "oracle": "assertEquals(qResult.size(),qResult2.size());",
                            "oracleLn": 472,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testExpandOnEmbedded",
                            "startLn": 494,
                            "endLn": 500,
                            "testMethod": "@Test\n public void testExpandOnEmbedded ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 497,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testFlattenOnEmbedded",
                            "startLn": 502,
                            "endLn": 508,
                            "testMethod": "@Test\n public void testFlattenOnEmbedded ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 505,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimit",
                            "startLn": 510,
                            "endLn": 514,
                            "testMethod": "@Test\n public void testLimit ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),3);\n}",
                            "oracle": "assertEquals(qResult.size(),3);",
                            "oracleLn": 513,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimitWithMetadataQuery",
                            "startLn": 516,
                            "endLn": 520,
                            "testMethod": "@Test\n public void testLimitWithMetadataQuery ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),3);\n}",
                            "oracle": "assertEquals(qResult.size(),3);",
                            "oracleLn": 519,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOrderByWithMetadataQuery",
                            "startLn": 522,
                            "endLn": 526,
                            "testMethod": "@Test\n public void testOrderByWithMetadataQuery ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertTrue(qResult.size()>0);\n}",
                            "oracle": "assertTrue(qResult.size()>0);",
                            "oracleLn": 525,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimitWithUnnamedParam",
                            "startLn": 528,
                            "endLn": 532,
                            "testMethod": "@Test\n public void testLimitWithUnnamedParam ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( 3 ) ; \n     assertEquals(qResult.size(),3);\n}",
                            "oracle": "assertEquals(qResult.size(),3);",
                            "oracleLn": 531,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimitWithNamedParam",
                            "startLn": 534,
                            "endLn": 540,
                            "testMethod": "@Test\n public void testLimitWithNamedParam ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , 2 ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 539,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimitWithNamedParam2",
                            "startLn": 542,
                            "endLn": 549,
                            "testMethod": "@Test\n public void testLimitWithNamedParam2 ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , 2 ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 547,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testParamsInLetSubquery",
                            "startLn": 551,
                            "endLn": 559,
                            "testMethod": "@Test\n public void testParamsInLetSubquery ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 556,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testBooleanParams",
                            "startLn": 561,
                            "endLn": 567,
                            "testMethod": "@Test\n public void testBooleanParams ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( \"STR\" , true ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 564,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testFromInSquareBrackets",
                            "startLn": 569,
                            "endLn": 574,
                            "testMethod": "@Test\n public void testFromInSquareBrackets ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 572,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testNewline",
                            "startLn": 576,
                            "endLn": 580,
                            "testMethod": "@Test\n public void testNewline ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),5);\n}",
                            "oracle": "assertEquals(qResult.size(),5);",
                            "oracleLn": 579,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testMultipleClusters",
                            "startLn": 699,
                            "endLn": 709,
                            "testMethod": "@Test\n public void testMultipleClusters ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),1);\n}",
                            "oracle": "assertEquals(qResult.size(),1);",
                            "oracleLn": 702,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testMatches",
                            "startLn": 711,
                            "endLn": 716,
                            "testMethod": "@Test\n public void testMatches ( ) {\n     List < ? > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertEquals(result.size(),1);\n}",
                            "oracle": "assertEquals(result.size(),1);",
                            "oracleLn": 714,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testStarPosition",
                            "startLn": 718,
                            "endLn": 735,
                            "testMethod": "@Test\n public void testStarPosition ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertEquals(result.size(),1);\n}",
                            "oracle": "assertEquals(result.size(),1);",
                            "oracleLn": 721,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testQuotedClassName",
                            "startLn": 737,
                            "endLn": 743,
                            "testMethod": "@Test\n public void testQuotedClassName ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),0);\n}",
                            "oracle": "assertEquals(qResult.size(),0);",
                            "oracleLn": 740,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testMultipleParamsWithSameName",
                            "startLn": 766,
                            "endLn": 784,
                            "testMethod": "@Test\n public void testMultipleParamsWithSameName ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 771,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testBasicQueryOrdered",
                            "startLn": 787,
                            "endLn": 792,
                            "testMethod": "@Test\n public void testBasicQueryOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(26,results.size());\n}",
                            "oracle": "assertEquals(26,results.size());",
                            "oracleLn": 791,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testSkipZeroOrdered",
                            "startLn": 794,
                            "endLn": 799,
                            "testMethod": "@Test\n public void testSkipZeroOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(26,results.size());\n}",
                            "oracle": "assertEquals(26,results.size());",
                            "oracleLn": 798,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testSkipOrdered",
                            "startLn": 801,
                            "endLn": 806,
                            "testMethod": "@Test\n public void testSkipOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(19,results.size());\n}",
                            "oracle": "assertEquals(19,results.size());",
                            "oracleLn": 805,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testLimitOrdered",
                            "startLn": 808,
                            "endLn": 813,
                            "testMethod": "@Test\n public void testLimitOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(9,results.size());\n}",
                            "oracle": "assertEquals(9,results.size());",
                            "oracleLn": 812,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testLimitMinusOneOrdered",
                            "startLn": 815,
                            "endLn": 820,
                            "testMethod": "@Test\n public void testLimitMinusOneOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(26,results.size());\n}",
                            "oracle": "assertEquals(26,results.size());",
                            "oracleLn": 819,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testSkipAndLimitOrdered",
                            "startLn": 822,
                            "endLn": 827,
                            "testMethod": "@Test\n public void testSkipAndLimitOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(9,results.size());\n}",
                            "oracle": "assertEquals(9,results.size());",
                            "oracleLn": 826,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testSkipAndLimitMinusOneOrdered",
                            "startLn": 829,
                            "endLn": 834,
                            "testMethod": "@Test\n public void testSkipAndLimitMinusOneOrdered ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(19,results.size());\n}",
                            "oracle": "assertEquals(19,results.size());",
                            "oracleLn": 833,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testLetAsListAsString",
                            "startLn": 836,
                            "endLn": 844,
                            "testMethod": "@Test\n public void testLetAsListAsString ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(1,results.size());\n}",
                            "oracle": "assertEquals(1,results.size());",
                            "oracleLn": 840,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testAggregations",
                            "startLn": 846,
                            "endLn": 866,
                            "testMethod": "@Test\n public void testAggregations ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(1,results.size());\n}",
                            "oracle": "assertEquals(1,results.size());",
                            "oracleLn": 850,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testExpandSkipLimit",
                            "startLn": 903,
                            "endLn": 914,
                            "testMethod": "@Test\n public void testExpandSkipLimit ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < OIdentifiable > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 907,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testBacktick",
                            "startLn": 916,
                            "endLn": 925,
                            "testMethod": "@Test\n public void testBacktick ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 920,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testOrderByEmbeddedParams",
                            "startLn": 927,
                            "endLn": 937,
                            "testMethod": "@Test\n public void testOrderByEmbeddedParams ( ) {\n     Map < String , Object > parameters = new HashMap < String , Object > ( ) ; \n     parameters . put ( \"STR\" , \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( parameters ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 932,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testOrderByEmbeddedParams2",
                            "startLn": 939,
                            "endLn": 949,
                            "testMethod": "@Test\n public void testOrderByEmbeddedParams2 ( ) {\n     Map < String , Object > parameters = new HashMap < String , Object > ( ) ; \n     parameters . put ( \"STR\" , \"STR\" ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( parameters ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 944,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testDatesListContainsString",
                            "startLn": 995,
                            "endLn": 1002,
                            "testMethod": "@Test\n public void testDatesListContainsString ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 999,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testParamWithMatches",
                            "startLn": 1004,
                            "endLn": 1012,
                            "testMethod": "@Test\n public void testParamWithMatches ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql , params ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1010,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testParamWithMatchesQuoteRegex",
                            "startLn": 1014,
                            "endLn": 1025,
                            "testMethod": "@Test\n public void testParamWithMatchesQuoteRegex ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql , params ) ; \n     assertEquals(results.size(),0);\n}",
                            "oracle": "assertEquals(results.size(),0);",
                            "oracleLn": 1020,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testMatchesWithQuotes",
                            "startLn": 1027,
                            "endLn": 1034,
                            "testMethod": "@Test\n public void testMatchesWithQuotes ( ) {\n     String pattern = Pattern . quote ( \"STR\" ) + \"STR\" ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql , pattern ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1032,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testMatchesWithQuotes2",
                            "startLn": 1036,
                            "endLn": 1043,
                            "testMethod": "@Test\n public void testMatchesWithQuotes2 ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1040,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testMatchesWithQuotes3",
                            "startLn": 1045,
                            "endLn": 1052,
                            "testMethod": "@Test\n public void testMatchesWithQuotes3 ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1049,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testParamWithMatchesAndNot",
                            "startLn": 1054,
                            "endLn": 1067,
                            "testMethod": "@Test\n public void testParamWithMatchesAndNot ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql , params ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1061,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDistinctLimit",
                            "startLn": 1069,
                            "endLn": 1087,
                            "testMethod": "@Test\n public void testDistinctLimit ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1073,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testSelectFromClusterNumber",
                            "startLn": 1089,
                            "endLn": 1096,
                            "testMethod": "@Test\n public void testSelectFromClusterNumber ( ) {\n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     int clusterId = clazz . getClusterIds ( ) [ 0 ] ; \n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" + clusterId + \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1095,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testMaxLongNumber",
                            "startLn": 1133,
                            "endLn": 1143,
                            "testMethod": "@Test\n public void testMaxLongNumber ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),3);\n}",
                            "oracle": "assertEquals(results.size(),3);",
                            "oracleLn": 1137,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testFilterAndOrderBy",
                            "startLn": 1145,
                            "endLn": 1167,
                            "testMethod": "@Test\n public void testFilterAndOrderBy ( ) {\n     OSQLSynchQuery sql = new OSQLSynchQuery ( \"STR\" ) ; \n     List < ODocument > results = db . query ( sql ) ; \n     assertEquals(results.size(),3);\n}",
                            "oracle": "assertEquals(results.size(),3);",
                            "oracleLn": 1149,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testCollateOnCollections",
                            "startLn": 1210,
                            "endLn": 1230,
                            "testMethod": "@Test\n public void testCollateOnCollections ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1219,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testCountUniqueIndex",
                            "startLn": 1232,
                            "endLn": 1246,
                            "testMethod": "@Test\n public void testCountUniqueIndex ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1238,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testEvalLong",
                            "startLn": 1248,
                            "endLn": 1257,
                            "testMethod": "@Test\n public void testEvalLong ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1251,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testCollateOnLinked",
                            "startLn": 1259,
                            "endLn": 1265,
                            "testMethod": "@Test\n public void testCollateOnLinked ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1262,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testParamConcat",
                            "startLn": 1267,
                            "endLn": 1272,
                            "testMethod": "@Test\n public void testParamConcat ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) , \"STR\" ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1270,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testCompositeIndexWithoutNullValues",
                            "startLn": 1274,
                            "endLn": 1308,
                            "testMethod": "@Test\n public void testCompositeIndexWithoutNullValues ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) , \"STR\" ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1283,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDateFormat",
                            "startLn": 1310,
                            "endLn": 1316,
                            "testMethod": "@Test\n public void testDateFormat ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1313,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testConcatenateNamedParams",
                            "startLn": 1318,
                            "endLn": 1327,
                            "testMethod": "@Test\n public void testConcatenateNamedParams ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) , \"STR\" ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1321,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testMethodsOnStrings",
                            "startLn": 1329,
                            "endLn": 1336,
                            "testMethod": "@Test\n public void testMethodsOnStrings ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1332,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDifferenceOfInlineCollections",
                            "startLn": 1338,
                            "endLn": 1347,
                            "testMethod": "@Test\n public void testDifferenceOfInlineCollections ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1341,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testFoo",
                            "startLn": 1349,
                            "endLn": 1360,
                            "testMethod": "@Test\n public void testFoo ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1356,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDateComparison",
                            "startLn": 1362,
                            "endLn": 1378,
                            "testMethod": "@Test\n public void testDateComparison ( ) {\n     byte [ ] array = new byte [ ] { \n 1 , 4 , 5 , 74 , 3 , 45 , 6 , 127 , - 120 , 2 } ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1369,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDoubleExponentNotation",
                            "startLn": 1452,
                            "endLn": 1459,
                            "testMethod": "@Test\n public void testDoubleExponentNotation ( ) {\n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1455,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testConvertDouble",
                            "startLn": 1462,
                            "endLn": 1471,
                            "testMethod": "@Test\n public void testConvertDouble ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1467,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testFilterListsOfMaps",
                            "startLn": 1474,
                            "endLn": 1488,
                            "testMethod": "@Test\n public void testFilterListsOfMaps ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1482,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testComparisonOfShorts",
                            "startLn": 1490,
                            "endLn": 1506,
                            "testMethod": "@Test\n public void testComparisonOfShorts ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1499,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testEnumAsParams",
                            "startLn": 1508,
                            "endLn": 1526,
                            "testMethod": "@Test\n public void testEnumAsParams ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( OType . STRING ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( OType . ANY ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( OType . BYTE ) ; \n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     List enums = new ArrayList ( ) ; \n     enums . add ( OType . STRING ) ; \n     enums . add ( OType . BYTE ) ; \n     params . put ( \"STR\" , enums ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) , params ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1521,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testEmbeddedMapOfMapsContainsValue",
                            "startLn": 1528,
                            "endLn": 1545,
                            "testMethod": "@Test\n public void testEmbeddedMapOfMapsContainsValue ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1537,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testInvertedIndexedCondition",
                            "startLn": 1547,
                            "endLn": 1574,
                            "testMethod": "@Test\n public void testInvertedIndexedCondition ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1555,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testIsDefinedOnNull",
                            "startLn": 1576,
                            "endLn": 1593,
                            "testMethod": "@Test\n public void testIsDefinedOnNull ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1584,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORollbackStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ORollbackStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSleepStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSleepStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBasic",
                            "startLn": 27,
                            "endLn": 37,
                            "testMethod": "@Test\n public void testBasic ( ) {\n     long begin = System . currentTimeMillis ( ) ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     Assert.assertTrue(System.currentTimeMillis()-begin>=1000);\n}",
                            "oracle": "Assert.assertTrue(System.currentTimeMillis()-begin>=1000);",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "command",
                            "focalStartLn": 900,
                            "focalEndLn": 902,
                            "focalMethod": " default OResultSet command ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleLimit",
                            "startLn": 270,
                            "endLn": 277,
                            "testMethod": "@Test\n public void testSimpleLimit ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 273,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriends",
                            "startLn": 317,
                            "endLn": 328,
                            "testMethod": "@Test\n public void testCommonFriends ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 321,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriendsPatterns",
                            "startLn": 330,
                            "endLn": 341,
                            "testMethod": "@Test\n public void testCommonFriendsPatterns ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 334,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testPattens",
                            "startLn": 343,
                            "endLn": 354,
                            "testMethod": "@Test\n public void testPattens ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 347,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testPaths",
                            "startLn": 356,
                            "endLn": 366,
                            "testMethod": "@Test\n public void testPaths ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 360,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testElements",
                            "startLn": 368,
                            "endLn": 378,
                            "testMethod": "@Test\n public void testElements ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 372,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriendsMatches",
                            "startLn": 399,
                            "endLn": 410,
                            "testMethod": "@Test\n public void testCommonFriendsMatches ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 403,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriendsArrows",
                            "startLn": 412,
                            "endLn": 423,
                            "testMethod": "@Test\n public void testCommonFriendsArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 416,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriendsArrowsPatterns",
                            "startLn": 425,
                            "endLn": 436,
                            "testMethod": "@Test\n public void testCommonFriendsArrowsPatterns ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 429,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriends2",
                            "startLn": 438,
                            "endLn": 449,
                            "testMethod": "@Test\n public void testCommonFriends2 ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 441,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommonFriends2Arrows",
                            "startLn": 451,
                            "endLn": 462,
                            "testMethod": "@Test\n public void testCommonFriends2Arrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 454,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnMethod",
                            "startLn": 464,
                            "endLn": 473,
                            "testMethod": "@Test\n public void testReturnMethod ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 467,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnMethodArrows",
                            "startLn": 475,
                            "endLn": 484,
                            "testMethod": "@Test\n public void testReturnMethodArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 478,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnExpression",
                            "startLn": 486,
                            "endLn": 496,
                            "testMethod": "@Test\n public void testReturnExpression ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 489,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnExpressionArrows",
                            "startLn": 498,
                            "endLn": 508,
                            "testMethod": "@Test\n public void testReturnExpressionArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 501,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnDefaultAlias",
                            "startLn": 510,
                            "endLn": 520,
                            "testMethod": "@Test\n public void testReturnDefaultAlias ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 513,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testReturnDefaultAliasArrows",
                            "startLn": 522,
                            "endLn": 532,
                            "testMethod": "@Test\n public void testReturnDefaultAliasArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 525,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFriendsOfFriends",
                            "startLn": 534,
                            "endLn": 545,
                            "testMethod": "@Test\n public void testFriendsOfFriends ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 538,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFriendsOfFriendsArrows",
                            "startLn": 547,
                            "endLn": 557,
                            "testMethod": "@Test\n public void testFriendsOfFriendsArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 550,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFriendsWithName",
                            "startLn": 584,
                            "endLn": 593,
                            "testMethod": "@Test\n public void testFriendsWithName ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 587,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFriendsWithNameArrows",
                            "startLn": 595,
                            "endLn": 603,
                            "testMethod": "@Test\n public void testFriendsWithNameArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 598,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testWhile",
                            "startLn": 605,
                            "endLn": 638,
                            "testMethod": "@Test\n public void testWhile ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(3,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(3,size(qResult));",
                            "oracleLn": 608,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        },
                        {
                            "testName": "testWhileArrows",
                            "startLn": 649,
                            "endLn": 670,
                            "testMethod": "@Test\n public void testWhileArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(3,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(3,size(qResult));",
                            "oracleLn": 652,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        },
                        {
                            "testName": "testMaxDepth",
                            "startLn": 672,
                            "endLn": 693,
                            "testMethod": "@Test\n public void testMaxDepth ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(2,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(2,size(qResult));",
                            "oracleLn": 675,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        },
                        {
                            "testName": "testMaxDepthArrow",
                            "startLn": 695,
                            "endLn": 716,
                            "testMethod": "@Test\n public void testMaxDepthArrow ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(2,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(2,size(qResult));",
                            "oracleLn": 698,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        },
                        {
                            "testName": "testManager",
                            "startLn": 718,
                            "endLn": 731,
                            "testMethod": "@Test\n public void testManager ( ) {\n     Assert.assertEquals(\"STR\",getManager(\"STR\").field(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",getManager(\"STR\").field(\"STR\"));",
                            "oracleLn": 720,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testManager2",
                            "startLn": 774,
                            "endLn": 788,
                            "testMethod": "@Test\n public void testManager2 ( ) {\n     Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));",
                            "oracleLn": 776,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testTriangle1",
                            "startLn": 1006,
                            "endLn": 1025,
                            "testMethod": "@Test\n public void testTriangle1 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1018,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle1Arrows",
                            "startLn": 1027,
                            "endLn": 1040,
                            "testMethod": "@Test\n public void testTriangle1Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1035,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle2Old",
                            "startLn": 1042,
                            "endLn": 1064,
                            "testMethod": "@Test\n public void testTriangle2Old ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1054,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle2",
                            "startLn": 1066,
                            "endLn": 1088,
                            "testMethod": "@Test\n public void testTriangle2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1077,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle2Arrows",
                            "startLn": 1090,
                            "endLn": 1112,
                            "testMethod": "@Test\n public void testTriangle2Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1101,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle3",
                            "startLn": 1114,
                            "endLn": 1130,
                            "testMethod": "@Test\n public void testTriangle3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1125,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle4",
                            "startLn": 1132,
                            "endLn": 1148,
                            "testMethod": "@Test\n public void testTriangle4 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1143,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle4Arrows",
                            "startLn": 1150,
                            "endLn": 1166,
                            "testMethod": "@Test\n public void testTriangle4Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1161,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangleWithEdges4",
                            "startLn": 1168,
                            "endLn": 1185,
                            "testMethod": "@Test\n public void testTriangleWithEdges4 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1180,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCartesianProductLimit",
                            "startLn": 1229,
                            "endLn": 1245,
                            "testMethod": "@Test\n public void testCartesianProductLimit ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1237,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArrayNumber",
                            "startLn": 1247,
                            "endLn": 1263,
                            "testMethod": "@Test\n public void testArrayNumber ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1254,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArraySingleSelectors2",
                            "startLn": 1265,
                            "endLn": 1281,
                            "testMethod": "@Test\n public void testArraySingleSelectors2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1272,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArrayRangeSelectors1",
                            "startLn": 1283,
                            "endLn": 1300,
                            "testMethod": "@Test\n public void testArrayRangeSelectors1 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1290,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArrayRange2",
                            "startLn": 1302,
                            "endLn": 1319,
                            "testMethod": "@Test\n public void testArrayRange2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1309,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArrayRange3",
                            "startLn": 1321,
                            "endLn": 1338,
                            "testMethod": "@Test\n public void testArrayRange3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1328,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testConditionInSquareBrackets",
                            "startLn": 1340,
                            "endLn": 1359,
                            "testMethod": "@Test\n public void testConditionInSquareBrackets ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1347,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIndexedEdge",
                            "startLn": 1361,
                            "endLn": 1375,
                            "testMethod": "@Test\n public void testIndexedEdge ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1370,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIndexedEdgeArrows",
                            "startLn": 1377,
                            "endLn": 1390,
                            "testMethod": "@Test\n public void testIndexedEdgeArrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1385,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testJson",
                            "startLn": 1392,
                            "endLn": 1408,
                            "testMethod": "@Test\n public void testJson ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1399,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testJson2",
                            "startLn": 1410,
                            "endLn": 1425,
                            "testMethod": "@Test\n public void testJson2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1417,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testJson3",
                            "startLn": 1427,
                            "endLn": 1443,
                            "testMethod": "@Test\n public void testJson3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1434,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testUnique",
                            "startLn": 1445,
                            "endLn": 1473,
                            "testMethod": "@Test\n public void testUnique ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1453,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testOptional3",
                            "startLn": 1603,
                            "endLn": 1616,
                            "testMethod": "@Test\n public void testOptional3 ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 1607,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testOrderByAsc",
                            "startLn": 1618,
                            "endLn": 1639,
                            "testMethod": "@Test\n public void testOrderByAsc ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1627,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testOrderByDesc",
                            "startLn": 1641,
                            "endLn": 1663,
                            "testMethod": "@Test\n public void testOrderByDesc ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1650,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNestedProjections",
                            "startLn": 1665,
                            "endLn": 1682,
                            "testMethod": "@Test\n public void testNestedProjections ( ) {\n     String clazz = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" + clazz + \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1672,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testAggregate",
                            "startLn": 1684,
                            "endLn": 1711,
                            "testMethod": "@Test\n public void testAggregate ( ) {\n     String clazz = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" + clazz + \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1696,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testSkip",
                            "startLn": 1785,
                            "endLn": 1810,
                            "testMethod": "@Test\n public void testSkip ( ) {\n     String clazz = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + clazz + \"STR\" ) ) . execute ( ) ; \n     String query = \"STR\" + clazz + \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1795,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNegativePattern2",
                            "startLn": 1998,
                            "endLn": 2027,
                            "testMethod": "@Test\n public void testNegativePattern2 ( ) {\n     String clazz = \"STR\" ; \n     db . command ( \"STR\" + clazz + \"STR\" ) . close ( ) ; \n     OVertex v1 = db . newVertex ( clazz ) ; \n     v1 . setProperty ( \"STR\" , \"STR\" ) ; \n     v1 . save ( ) ; \n     OVertex v2 = db . newVertex ( clazz ) ; \n     v2 . setProperty ( \"STR\" , \"STR\" ) ; \n     v2 . save ( ) ; \n     OVertex v3 = db . newVertex ( clazz ) ; \n     v3 . setProperty ( \"STR\" , \"STR\" ) ; \n     v3 . save ( ) ; \n     v1 . addEdge ( v2 ) . save ( ) ; \n     v2 . addEdge ( v3 ) . save ( ) ; \n     v1 . addEdge ( v3 ) . save ( ) ; \n     String query = \"STR\" + clazz + \"STR\" ; \n     query += \"STR\" ; \n     query += \"STR\" ; \n     OResultSet result = db . query ( query ) ; \n     Assert.assertFalse(result.hasNext());\n}",
                            "oracle": "Assert.assertFalse(result.hasNext());",
                            "oracleLn": 2018,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLTruncateTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLTruncateTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" + OCommandExecutorSQLTruncateTest . class . getSimpleName ( ) ) ; \n database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTruncatePlain",
                            "startLn": 29,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testTruncatePlain ( ) {\n     OClass vcl = database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" , vcl ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     database . save ( doc ) ; \n     doc = new ODocument ( \"STR\" ) ; \n     database . save ( doc ) ; \n     Number ret = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(ret.intValue(),1);\n}",
                            "oracle": "assertEquals(ret.intValue(),1);",
                            "oracleLn": 38,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testTruncatePolimorphic",
                            "startLn": 44,
                            "endLn": 57,
                            "testMethod": "@Test\n public void testTruncatePolimorphic ( ) {\n     OClass vcl = database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" , vcl ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     database . save ( doc ) ; \n     doc = new ODocument ( \"STR\" ) ; \n     database . save ( doc ) ; \n     Number ret = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(ret.intValue(),2);\n}",
                            "oracle": "assertEquals(ret.intValue(),2);",
                            "oracleLn": 53,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OScriptExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 21,
                        "endLn": 25,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTwoInserts",
                            "startLn": 32,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testTwoInserts ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     db . execute ( \"STR\" , \"STR\" + className + \"STR\" + className + \"STR\" ) ; \n     OResultSet rs = db . query ( \"STR\" + className ) ; \n     Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));",
                            "oracleLn": 38,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testIf",
                            "startLn": 41,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testIf ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet rs = db . query ( \"STR\" + className ) ; \n     Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));",
                            "oracleLn": 57,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testReturnInIf",
                            "startLn": 60,
                            "endLn": 75,
                            "testMethod": "@Test\n public void testReturnInIf ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet rs = db . query ( \"STR\" + className ) ; \n     Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals((Object)2L,rs.next().getProperty(\"STR\"));",
                            "oracleLn": 74,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testReturnInIf2",
                            "startLn": 77,
                            "endLn": 94,
                            "testMethod": "@Test\n public void testReturnInIf2 ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     OResult item = result . next ( ) ; \n     Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));",
                            "oracleLn": 90,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testReturnInIf3",
                            "startLn": 96,
                            "endLn": 113,
                            "testMethod": "@Test\n public void testReturnInIf3 ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     OResult item = result . next ( ) ; \n     Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));",
                            "oracleLn": 109,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testLazyExecutionPlanning",
                            "startLn": 115,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testLazyExecutionPlanning ( ) {\n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     OResultSet result = db . execute ( \"STR\" , script ) ; \n     OResult item = result . next ( ) ; \n     Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",item.getProperty(\"STR\"));",
                            "oracleLn": 126,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testCommitRetry",
                            "startLn": 132,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testCommitRetry ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 147,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommitRetryWithFailureAndContinue",
                            "startLn": 175,
                            "endLn": 196,
                            "testMethod": "@Test\n public void testCommitRetryWithFailureAndContinue ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 189,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testCommitRetryWithFailureScriptAndContinue",
                            "startLn": 198,
                            "endLn": 220,
                            "testMethod": "@Test\n public void testCommitRetryWithFailureScriptAndContinue ( ) {\n     String className = \"STR\" ; \n     db . createClass ( className ) ; \n     String script = \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" ; \n     script += \"STR\" + className + \"STR\" ; \n     script += \"STR\" ; \n     db . execute ( \"STR\" , script ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 213,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OTruncateClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OTruncateClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" ) ; \n database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTruncateVertexClassSubclassesWithIndex",
                            "startLn": 132,
                            "endLn": 159,
                            "testMethod": "@Test\n public void testTruncateVertexClassSubclassesWithIndex ( ) {\n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     database . command ( \"STR\" ) ; \n     OResultSet result = database . query ( \"STR\" ) ; \n     Assert.assertEquals(toList(result).size(),2);\n}",
                            "oracle": "Assert.assertEquals(toList(result).size(),2);",
                            "oracleLn": 141,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 863,
                            "focalEndLn": 865,
                            "focalMethod": " default OResultSet query ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OUpdateEdgeStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OUpdateEdgeStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 31,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" ) ; \n database . create ( ) ; \n OSchema schema = database . getMetadata ( ) . getSchema ( ) ; \n if ( schema . getClass ( \"STR\" ) == null ) { \n schema . createClass ( \"STR\" ) ; \n } if ( schema . getClass ( \"STR\" ) == null ) { \n schema . createClass ( \"STR\" ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdateEdgeOfTypeE",
                            "startLn": 97,
                            "endLn": 120,
                            "testMethod": "@Test\n public void testUpdateEdgeOfTypeE ( ) {\n     ODocument v1 = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument v2 = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument v3 = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OResultSet edges = database . command ( \"STR\" + v1 . getIdentity ( ) + \"STR\" + v2 . getIdentity ( ) ) ; \n     OResult edge = edges . next ( ) ; \n     database . command ( \"STR\" + edge . getElement ( ) . get ( ) . getIdentity ( ) + \"STR\" + v3 . getIdentity ( ) ) ; \n     Iterable < ODocument > result = database . command ( new OSQLSynchQuery < ODocument > ( \"STR\" + v1 . getIdentity ( ) ) ) . execute ( ) ; \n     Assert.assertEquals(result.iterator().next().getIdentity(),v3.getIdentity());\n}",
                            "oracle": "Assert.assertEquals(result.iterator().next().getIdentity(),v3.getIdentity());",
                            "oracleLn": 106,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "getIdentity",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public ORID getIdentity ( ) { \n return _recordId ; \n } "
                        }
                    ]
                },
                {
                    "className": "OFilterOptimizerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/filter/OFilterOptimizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testOptimizeFullOptimization",
                            "startLn": 12,
                            "endLn": 24,
                            "testMethod": "@Test\n public void testOptimizeFullOptimization ( ) throws Exception {\n     final OSQLFilter filter = OSQLEngine . getInstance ( ) . parseCondition ( \"STR\" , null , \"STR\" ) ; \n     final OSQLFilterCondition condition = filter . getRootCondition ( ) ; \n     final OIndexSearchResult searchResult = new OIndexSearchResult ( condition . getOperator ( ) , ( ( OSQLFilterItemField ) condition . getLeft ( ) ) . getFieldChain ( ) , 3 ) ; \n     optimizer . optimize ( filter , searchResult ) ; \n     Assert.assertNull(filter.getRootCondition());\n}",
                            "oracle": "Assert.assertNull(filter.getRootCondition());",
                            "oracleLn": 18,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/filter/OSQLFilter.java",
                            "focalName": "getRootCondition",
                            "focalStartLn": 108,
                            "focalEndLn": 110,
                            "focalMethod": " public OSQLFilterCondition getRootCondition ( ) { \n return rootCondition ; \n } "
                        },
                        {
                            "testName": "testOptimizePartialOptimization",
                            "startLn": 53,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testOptimizePartialOptimization ( ) throws Exception {\n     final OSQLFilter filter = OSQLEngine . getInstance ( ) . parseCondition ( \"STR\" , null , \"STR\" ) ; \n     final OSQLFilterCondition condition = filter . getRootCondition ( ) ; \n     final OIndexSearchResult searchResult = new OIndexSearchResult ( ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getOperator ( ) , ( ( OSQLFilterItemField ) ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getLeft ( ) ) . getFieldChain ( ) , 3 ) ; \n     optimizer . optimize ( filter , searchResult ) ; \n     Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");",
                            "oracleLn": 59,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/filter/OSQLFilterCondition.java",
                            "focalName": "toString",
                            "focalStartLn": 224,
                            "focalEndLn": 245,
                            "focalMethod": "@Override\n public String toString ( ) { \n StringBuilder buffer = new StringBuilder ( 128 ) ; \n buffer . append ( '(' ) ; \n buffer . append ( left ) ; \n if ( operator != null ) { \n buffer . append ( ' ' ) ; \n buffer . append ( operator ) ; \n buffer . append ( ' ' ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( right ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( ')' ) ; \n } return buffer . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testOptimizePartialOptimizationMethod",
                            "startLn": 67,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testOptimizePartialOptimizationMethod ( ) throws Exception {\n     final OSQLFilter filter = OSQLEngine . getInstance ( ) . parseCondition ( \"STR\" , null , \"STR\" ) ; \n     final OSQLFilterCondition condition = filter . getRootCondition ( ) ; \n     final OIndexSearchResult searchResult = new OIndexSearchResult ( ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getOperator ( ) , ( ( OSQLFilterItemField ) ( ( OSQLFilterCondition ) condition . getLeft ( ) ) . getLeft ( ) ) . getFieldChain ( ) , 3 ) ; \n     optimizer . optimize ( filter , searchResult ) ; \n     Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(filter.getRootCondition().toString(),\"STR\");",
                            "oracleLn": 73,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/filter/OSQLFilterCondition.java",
                            "focalName": "toString",
                            "focalStartLn": 224,
                            "focalEndLn": 245,
                            "focalMethod": "@Override\n public String toString ( ) { \n StringBuilder buffer = new StringBuilder ( 128 ) ; \n buffer . append ( '(' ) ; \n buffer . append ( left ) ; \n if ( operator != null ) { \n buffer . append ( ' ' ) ; \n buffer . append ( operator ) ; \n buffer . append ( ' ' ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( right ) ; \n if ( right instanceof String ) { \n buffer . append ( '\\'' ) ; \n } buffer . append ( ')' ) ; \n } return buffer . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionAbsoluteValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 26,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionAbsoluteValue ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 31,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = function . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNull",
                            "startLn": 37,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testNull ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n null } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 41,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveInteger",
                            "startLn": 44,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testPositiveInteger ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 10 } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "assertTrue(resultinstanceofInteger);",
                            "oracleLn": 48,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeInteger",
                            "startLn": 52,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testNegativeInteger ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n - 10 } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "assertTrue(resultinstanceofInteger);",
                            "oracleLn": 56,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveLong",
                            "startLn": 60,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testPositiveLong ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 10L } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofLong);\n}",
                            "oracle": "assertTrue(resultinstanceofLong);",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeLong",
                            "startLn": 68,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testNegativeLong ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n - 10L } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofLong);\n}",
                            "oracle": "assertTrue(resultinstanceofLong);",
                            "oracleLn": 72,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveShort",
                            "startLn": 76,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testPositiveShort ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n ( short ) 10 } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofShort);\n}",
                            "oracle": "assertTrue(resultinstanceofShort);",
                            "oracleLn": 80,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeShort",
                            "startLn": 84,
                            "endLn": 90,
                            "testMethod": "@Test\n public void testNegativeShort ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n ( short ) - 10 } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofShort);\n}",
                            "oracle": "assertTrue(resultinstanceofShort);",
                            "oracleLn": 88,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveDouble",
                            "startLn": 92,
                            "endLn": 98,
                            "testMethod": "@Test\n public void testPositiveDouble ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 10.5D } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofDouble);\n}",
                            "oracle": "assertTrue(resultinstanceofDouble);",
                            "oracleLn": 96,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeDouble",
                            "startLn": 100,
                            "endLn": 106,
                            "testMethod": "@Test\n public void testNegativeDouble ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n - 10.5D } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofDouble);\n}",
                            "oracle": "assertTrue(resultinstanceofDouble);",
                            "oracleLn": 104,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveFloat",
                            "startLn": 108,
                            "endLn": 114,
                            "testMethod": "@Test\n public void testPositiveFloat ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 10.5F } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofFloat);\n}",
                            "oracle": "assertTrue(resultinstanceofFloat);",
                            "oracleLn": 112,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeFloat",
                            "startLn": 116,
                            "endLn": 122,
                            "testMethod": "@Test\n public void testNegativeFloat ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n - 10.5F } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofFloat);\n}",
                            "oracle": "assertTrue(resultinstanceofFloat);",
                            "oracleLn": 120,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveBigDecimal",
                            "startLn": 124,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testPositiveBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 128,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeBigDecimal",
                            "startLn": 132,
                            "endLn": 138,
                            "testMethod": "@Test\n public void testNegativeBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( - 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 136,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveBigInteger",
                            "startLn": 140,
                            "endLn": 146,
                            "testMethod": "@Test\n public void testPositiveBigInteger ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigInteger ( \"STR\" ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigInteger);\n}",
                            "oracle": "assertTrue(resultinstanceofBigInteger);",
                            "oracleLn": 144,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testNegativeBigInteger",
                            "startLn": 148,
                            "endLn": 154,
                            "testMethod": "@Test\n public void testNegativeBigInteger ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigInteger ( \"STR\" ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigInteger);\n}",
                            "oracle": "assertTrue(resultinstanceofBigInteger);",
                            "oracleLn": 152,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testFromQuery",
                            "startLn": 161,
                            "endLn": 170,
                            "testMethod": "@Test\n public void testFromQuery ( ) {\n     ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     ODocument r = result . get ( 0 ) ; \n     assertEquals(result.size(),1);\n}",
                            "oracle": "assertEquals(result.size(),1);",
                            "oracleLn": 167,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCustomSQLFunctionsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/sql/OCustomSQLFunctionsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 24,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OCustomSQLFunctionsTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRandom",
                            "startLn": 31,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testRandom ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Double)result.get(0).field(\"STR\")>0);\n}",
                            "oracle": "assertTrue((Double)result.get(0).field(\"STR\")>0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testLog10",
                            "startLn": 37,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testLog10 ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertEquals((Double)result.get(0).field(\"STR\"),4.0,0.0001);\n}",
                            "oracle": "assertEquals((Double)result.get(0).field(\"STR\"),4.0,0.0001);",
                            "oracleLn": 40,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testAbsInt",
                            "startLn": 43,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testAbsInt ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Integer)result.get(0).field(\"STR\")==5);\n}",
                            "oracle": "assertTrue((Integer)result.get(0).field(\"STR\")==5);",
                            "oracleLn": 46,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testAbsDouble",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testAbsDouble ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Double)result.get(0).field(\"STR\")==5.0);\n}",
                            "oracle": "assertTrue((Double)result.get(0).field(\"STR\")==5.0);",
                            "oracleLn": 52,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testAbsFloat",
                            "startLn": 55,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testAbsFloat ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Float)result.get(0).field(\"STR\")==5.0);\n}",
                            "oracle": "assertTrue((Float)result.get(0).field(\"STR\")==5.0);",
                            "oracleLn": 58,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OFunctionSqlTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/sql/OFunctionSqlTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "functionSqlWithParameters",
                            "startLn": 18,
                            "endLn": 46,
                            "testMethod": "@Test\n public void functionSqlWithParameters ( ) {\n     ODatabaseDocument db = new ODatabaseDocumentTx ( \"STR\" ) ; \n     db . create ( ) ; \n     ODocument doc1 = new ODocument ( \"STR\" ) ; \n     doc1 . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc1 ) ; \n     doc1 . reset ( ) ; \n     doc1 . setClassName ( \"STR\" ) ; \n     doc1 . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc1 ) ; \n     OFunction function = new OFunction ( ) ; \n     function . setName ( \"STR\" ) ; \n     function . setCode ( \"STR\" ) ; \n     function . setParameters ( new ArrayList < String > ( ) { \n { \n add ( \"STR\" ) ; \n } } ) ; \n     function . save ( ) ; \n     Object result = function . executeInContext ( new OBasicCommandContext ( ) , \"STR\" ) ; \n     Assert.assertEquals(((OLegacyResultSet)result).size(),1);\n}",
                            "oracle": "Assert.assertEquals(((OLegacyResultSet)result).size(),1);",
                            "oracleLn": 35,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/function/OFunction.java",
                            "focalName": "executeInContext",
                            "focalStartLn": 139,
                            "focalEndLn": 168,
                            "focalMethod": "@Deprecated\n public Object executeInContext ( final OCommandContext iContext , final Object ... iArgs ) { \n final List < String > params = getParameters ( ) ; \n Map < Object , Object > args = null ; \n if ( iArgs . length > 0 ) { \n args = new LinkedHashMap < Object , Object > ( ) ; \n for ( int i = 0 ; \n i < iArgs . length ; \n ++ i ) { \n final Object argValue = iArgs [ i ] ; \n if ( params != null && i < params . size ( ) ) args . put ( params . get ( i ) , argValue ) ; \n else args . put ( \"STR\" + i , argValue ) ; \n } } if ( callback != null ) { \n return callback . call ( args ) ; \n } final OCommandExecutorFunction command = new OCommandExecutorFunction ( ) ; \n command . parse ( new OCommandFunction ( getName ( ) ) ) ; \n return command . executeInContext ( iContext , args ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionDecimalTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionDecimalTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionDecimal ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 25,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = function . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 28,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionDecimal.java",
                            "focalName": "getResult",
                            "focalStartLn": 87,
                            "focalEndLn": 90,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testFromInteger",
                            "startLn": 31,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testFromInteger ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 12 } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertEquals(result,newBigDecimal(12));\n}",
                            "oracle": "assertEquals(result,newBigDecimal(12));",
                            "oracleLn": 35,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionDecimal.java",
                            "focalName": "getResult",
                            "focalStartLn": 87,
                            "focalEndLn": 90,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testFromLong",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testFromLong ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 1287623847384l } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertEquals(result,newBigDecimal(1287623847384l));\n}",
                            "oracle": "assertEquals(result,newBigDecimal(1287623847384l));",
                            "oracleLn": 42,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionDecimal.java",
                            "focalName": "getResult",
                            "focalStartLn": 87,
                            "focalEndLn": 90,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testFromString",
                            "startLn": 45,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testFromString ( ) {\n     String initial = \"STR\" ; \n     function . execute ( null , null , null , new Object [ ] { \n initial } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertEquals(result,newBigDecimal(initial));\n}",
                            "oracle": "assertEquals(result,newBigDecimal(initial));",
                            "oracleLn": 50,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionDecimal.java",
                            "focalName": "getResult",
                            "focalStartLn": 87,
                            "focalEndLn": 90,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionUUIDTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionUUIDTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 37,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setup ( ) { \n uuid = new OSQLFunctionUUID ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 42,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = uuid . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/misc/OSQLFunctionUUID.java",
                            "focalName": "getResult",
                            "focalStartLn": 57,
                            "focalEndLn": 60,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return null ; \n } "
                        },
                        {
                            "testName": "testResult",
                            "startLn": 48,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testResult ( ) {\n     String result = ( String ) uuid . execute ( null , null , null , null , null ) ; \n     assertNotNull(result);\n}",
                            "oracle": "assertNotNull(result);",
                            "oracleLn": 51,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/misc/OSQLFunctionUUID.java",
                            "focalName": "execute",
                            "focalStartLn": 44,
                            "focalEndLn": 47,
                            "focalMethod": " public Object execute ( Object iThis , final OIdentifiable iCurrentRecord , final Object iCurrentResult , final Object [ ] iParams , OCommandContext iContext ) { \n return UUID . randomUUID ( ) . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionModeTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionModeTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 15,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void setup ( ) { \n mode = new OSQLFunctionMode ( ) { \n @Override\n protected boolean returnDistributedResult ( ) { \n return false ; \n } } ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 25,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = mode . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 28,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionMode.java",
                            "focalName": "getResult",
                            "focalStartLn": 65,
                            "focalEndLn": 72,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n if ( returnDistributedResult ( ) ) { \n return seen ; \n } else { \n return maxElems . isEmpty ( ) ? null : maxElems ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionPercentileTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionPercentileTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 15,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n percentile = new OSQLFunctionPercentile ( ) { \n @Override\n protected boolean returnDistributedResult ( ) { \n return false ; \n } } ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 25,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = percentile . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 28,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionPercentile.java",
                            "focalName": "getResult",
                            "focalStartLn": 77,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n if ( returnDistributedResult ( ) ) { \n return values ; \n } else { \n return this . evaluate ( this . values ) ; \n } } "
                        },
                        {
                            "testName": "testSingleValueLower",
                            "startLn": 31,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testSingleValueLower ( ) {\n     percentile . execute ( null , null , null , new Object [ ] { \n 10 , .25 } , null ) ; \n     assertEquals(10,percentile.getResult());\n}",
                            "oracle": "assertEquals(10,percentile.getResult());",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionPercentile.java",
                            "focalName": "getResult",
                            "focalStartLn": 77,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n if ( returnDistributedResult ( ) ) { \n return values ; \n } else { \n return this . evaluate ( this . values ) ; \n } } "
                        },
                        {
                            "testName": "testSingleValueUpper",
                            "startLn": 37,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testSingleValueUpper ( ) {\n     percentile . execute ( null , null , null , new Object [ ] { \n 10 , .75 } , null ) ; \n     assertEquals(10,percentile.getResult());\n}",
                            "oracle": "assertEquals(10,percentile.getResult());",
                            "oracleLn": 40,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionPercentile.java",
                            "focalName": "getResult",
                            "focalStartLn": 77,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n if ( returnDistributedResult ( ) ) { \n return values ; \n } else { \n return this . evaluate ( this . values ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OUpdateStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OUpdateStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 33,
                        "endLn": 66,
                        "setupMethod": "@Before\n public void before ( ) { \n orientDB = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( name . getMethodName ( ) , ODatabaseType . MEMORY ) ; \n db = orientDB . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n className = name . getMethodName ( ) ; \n OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n for ( int i = 0 ; \n i < 10 ; \n i ++ ) { \n ODocument doc = db . newInstance ( className ) ; \n doc . setProperty ( \"STR\" , \"STR\" + i ) ; \n doc . setProperty ( \"STR\" , \"STR\" + i ) ; \n doc . setProperty ( \"STR\" , 4L ) ; \n List < String > tagsList = new ArrayList < > ( ) ; \n tagsList . add ( \"STR\" ) ; \n tagsList . add ( \"STR\" ) ; \n tagsList . add ( \"STR\" ) ; \n doc . setProperty ( \"STR\" , tagsList ) ; \n Map < String , String > tagsMap = new HashMap < > ( ) ; \n tagsMap . put ( \"STR\" , \"STR\" ) ; \n tagsMap . put ( \"STR\" , \"STR\" ) ; \n tagsMap . put ( \"STR\" , \"STR\" ) ; \n doc . setProperty ( \"STR\" , tagsMap ) ; \n doc . save ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpsertAndReturn",
                            "startLn": 465,
                            "endLn": 477,
                            "testMethod": "@Test\n public void testUpsertAndReturn ( ) {\n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 468,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionVarianceTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionVarianceTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 18,
                        "endLn": 26,
                        "setupMethod": "@Before\n public void setup ( ) { \n variance = new OSQLFunctionVariance ( ) { \n @Override\n protected boolean returnDistributedResult ( ) { \n return false ; \n } } ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmpty",
                            "startLn": 28,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     Object result = variance . getResult ( ) ; \n     assertNull(result);\n}",
                            "oracle": "assertNull(result);",
                            "oracleLn": 31,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/stat/OSQLFunctionVariance.java",
                            "focalName": "getResult",
                            "focalStartLn": 90,
                            "focalEndLn": 101,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n if ( returnDistributedResult ( ) ) { \n final Map < String , Object > doc = new HashMap < String , Object > ( ) ; \n doc . put ( \"STR\" , n ) ; \n doc . put ( \"STR\" , mean ) ; \n doc . put ( \"STR\" , this . evaluate ( ) ) ; \n return doc ; \n } else { \n return this . evaluate ( ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OSQLMethodKeysTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeysTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 16,
                        "endLn": 19,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLMethodKeys ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithOResult",
                            "startLn": 21,
                            "endLn": 30,
                            "testMethod": "@Test\n public void testWithOResult ( ) {\n     OResultInternal resultInternal = new OResultInternal ( ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     Object result = function . execute ( null , null , null , resultInternal , null ) ; \n     assertEquals(newLinkedHashSet(Arrays.asList(\"STR\",\"STR\")),result);\n}",
                            "oracle": "assertEquals(newLinkedHashSet(Arrays.asList(\"STR\",\"STR\")),result);",
                            "oracleLn": 27,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeys.java",
                            "focalName": "execute",
                            "focalStartLn": 42,
                            "focalEndLn": 62,
                            "focalMethod": "@Override\n public Object execute ( Object iThis , OIdentifiable iCurrentRecord , OCommandContext iContext , Object ioResult , Object [ ] iParams ) { \n if ( ioResult instanceof Map ) { \n return ( ( Map < ? , ? > ) ioResult ) . keySet ( ) ; \n } if ( ioResult instanceof ODocument ) { \n return Arrays . asList ( ( ( ODocument ) ioResult ) . fieldNames ( ) ) ; \n } if ( ioResult instanceof OResult ) { \n OResult res = ( OResult ) ioResult ; \n return res . getPropertyNames ( ) ; \n } if ( ioResult instanceof Collection ) { \n List result = new ArrayList ( ) ; \n for ( Object o : ( Collection ) ioResult ) { \n result . addAll ( ( Collection ) execute ( iThis , iCurrentRecord , iContext , o , iParams ) ) ; \n } return result ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSQLMethodValuesTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodValuesTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 15,
                        "endLn": 18,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLMethodValues ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithOResult",
                            "startLn": 20,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testWithOResult ( ) {\n     OResultInternal resultInternal = new OResultInternal ( ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     resultInternal . setProperty ( \"STR\" , \"STR\" ) ; \n     Object result = function . execute ( null , null , null , resultInternal , null ) ; \n     assertEquals(Arrays.asList(\"STR\",\"STR\"),result);\n}",
                            "oracle": "assertEquals(Arrays.asList(\"STR\",\"STR\"),result);",
                            "oracleLn": 26,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodValues.java",
                            "focalName": "execute",
                            "focalStartLn": 43,
                            "focalEndLn": 63,
                            "focalMethod": "@Override\n public Object execute ( Object iThis , OIdentifiable iCurrentRecord , OCommandContext iContext , Object ioResult , Object [ ] iParams ) { \n if ( ioResult instanceof Map ) { \n return ( ( Map < ? , ? > ) ioResult ) . values ( ) ; \n } if ( ioResult instanceof ODocument ) { \n return Arrays . asList ( ( ( ODocument ) ioResult ) . fieldValues ( ) ) ; \n } if ( ioResult instanceof OResult ) { \n OResult res = ( OResult ) ioResult ; \n return res . getPropertyNames ( ) . stream ( ) . map ( field -> res . getProperty ( field ) ) . collect ( Collectors . toList ( ) ) ; \n } if ( ioResult instanceof Collection ) { \n List result = new ArrayList ( ) ; \n for ( Object o : ( Collection ) ioResult ) { \n result . addAll ( ( Collection ) execute ( iThis , iCurrentRecord , iContext , o , iParams ) ) ; \n } return result ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreateFunctionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateFunctionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateFunction",
                            "startLn": 33,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testCreateFunction ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OLegacyResultSet < ODocument > result = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(result.size(),1);\n}",
                            "oracle": "Assert.assertEquals(result.size(),1);",
                            "oracleLn": 37,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OIdentifierTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OIdentifierTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testBackTickQuoted",
                            "startLn": 11,
                            "endLn": 18,
                            "testMethod": "@Test\n public void testBackTickQuoted ( ) {\n     OIdentifier identifier = new OIdentifier ( \"STR\" ) ; \n     Assert.assertEquals(identifier.getStringValue(),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(identifier.getStringValue(),\"STR\");",
                            "oracleLn": 14,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OIdentifier.java",
                            "focalName": "getStringValue",
                            "focalStartLn": 83,
                            "focalEndLn": 91,
                            "focalMethod": " public String getStringValue ( ) { \n if ( value == null ) { \n return null ; \n } if ( value . contains ( \"STR\" ) ) { \n return value . replaceAll ( \"STR\" , \"STR\" ) ; \n } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OProjectionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OProjectionTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testIsExpand",
                            "startLn": 34,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testIsExpand ( ) throws ParseException {\n     OrientSql parser = getParserFor ( \"STR\" ) ; \n     OSelectStatement stm = ( OSelectStatement ) parser . parse ( ) ; \n     Assert.assertTrue(stm.getProjection().isExpand());\n}",
                            "oracle": "Assert.assertTrue(stm.getProjection().isExpand());",
                            "oracleLn": 38,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OProjection.java",
                            "focalName": "isExpand",
                            "focalStartLn": 136,
                            "focalEndLn": 138,
                            "focalMethod": " public boolean isExpand ( ) { \n return items != null && items . size ( ) == 1 && items . get ( 0 ) . isExpand ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OStatementCacheTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OStatementCacheTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInIsNotAReservedWord",
                            "startLn": 9,
                            "endLn": 27,
                            "testMethod": "@Test\n public void testInIsNotAReservedWord ( ) {\n     OStatementCache cache = new OStatementCache ( 2 ) ; \n     cache . get ( \"STR\" ) ; \n     cache . get ( \"STR\" ) ; \n     cache . get ( \"STR\" ) ; \n     Assert.assertTrue(cache.contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(cache.contains(\"STR\"));",
                            "oracleLn": 15,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OStatementCache.java",
                            "focalName": "contains",
                            "focalStartLn": 43,
                            "focalEndLn": 51,
                            "focalMethod": " public boolean contains ( String statement ) { \n if ( OGlobalConfiguration . STATEMENT_CACHE_SIZE . getValueAsInteger ( ) == 0 ) { \n return false ; \n } synchronized ( map ) { \n return map . containsKey ( statement ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OMathExpressionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OMathExpressionTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testPriority",
                            "startLn": 67,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testPriority ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 10 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . PLUS ) ; \n     exp . childExpressions . add ( integer ( 5 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . STAR ) ; \n     exp . childExpressions . add ( integer ( 8 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . PLUS ) ; \n     exp . childExpressions . add ( integer ( 2 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . LSHIFT ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . PLUS ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 82,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        },
                        {
                            "testName": "testPriority3",
                            "startLn": 114,
                            "endLn": 126,
                            "testMethod": "@Test\n public void testPriority3 ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 3 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . RSHIFT ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . LSHIFT ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 123,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        },
                        {
                            "testName": "testPriority4",
                            "startLn": 128,
                            "endLn": 140,
                            "testMethod": "@Test\n public void testPriority4 ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 3 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . LSHIFT ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . RSHIFT ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 137,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        },
                        {
                            "testName": "testAnd",
                            "startLn": 142,
                            "endLn": 152,
                            "testMethod": "@Test\n public void testAnd ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 5 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . BIT_AND ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 149,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        },
                        {
                            "testName": "testAnd2",
                            "startLn": 154,
                            "endLn": 164,
                            "testMethod": "@Test\n public void testAnd2 ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 5 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . BIT_AND ) ; \n     exp . childExpressions . add ( integer ( 4 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 161,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        },
                        {
                            "testName": "testOr",
                            "startLn": 166,
                            "endLn": 176,
                            "testMethod": "@Test\n public void testOr ( ) {\n     OMathExpression exp = new OMathExpression ( - 1 ) ; \n     exp . childExpressions . add ( integer ( 4 ) ) ; \n     exp . operators . add ( OMathExpression . Operator . BIT_OR ) ; \n     exp . childExpressions . add ( integer ( 1 ) ) ; \n     Object result = exp . execute ( ( OResult ) null , null ) ; \n     Assert.assertTrue(resultinstanceofInteger);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofInteger);",
                            "oracleLn": 173,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java",
                            "focalName": "execute",
                            "focalStartLn": 607,
                            "focalEndLn": 622,
                            "focalMethod": " public Object execute ( OResult iCurrentRecord , OCommandContext ctx ) { \n if ( childExpressions . size ( ) == 0 ) { \n return null ; \n } if ( childExpressions . size ( ) == 1 ) { \n return childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n } if ( childExpressions . size ( ) == 2 ) { \n Object leftValue = childExpressions . get ( 0 ) . execute ( iCurrentRecord , ctx ) ; \n Object rightValue = childExpressions . get ( 1 ) . execute ( iCurrentRecord , ctx ) ; \n return operators . get ( 0 ) . apply ( leftValue , rightValue ) ; \n } return calculateWithOpPriority ( iCurrentRecord , ctx ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestSelectDetectType",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/select/TestSelectDetectType.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 20,
                        "endLn": 24,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + TestBinaryRecordsQuery . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFloatDetection",
                            "startLn": 26,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testFloatDetection ( ) {\n     List < ODocument > res = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     System . out . println ( res . get ( 0 ) ) ; \n     assertEquals(res.get(0).field(\"STR\"),\"STR\");\n}",
                            "oracle": "assertEquals(res.get(0).field(\"STR\"),\"STR\");",
                            "oracleLn": 30,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestNullFieldQuery",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/select/TestNullFieldQuery.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" + TestNullFieldQuery . class . getSimpleName ( ) ) ; \n database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryNullValue",
                            "startLn": 35,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testQueryNullValue ( ) {\n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , ( Object ) null ) ; \n     database . save ( doc ) ; \n     List < ODocument > res = database . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue(res.isEmpty());\n}",
                            "oracle": "assertTrue(res.isEmpty());",
                            "oracleLn": 42,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testQueryNullValueSchemaFull",
                            "startLn": 46,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testQueryNullValueSchemaFull ( ) {\n     OClass clazz = database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     clazz . createProperty ( \"STR\" , OType . ANY ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , ( Object ) null ) ; \n     database . save ( doc ) ; \n     List < ODocument > res = database . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue(res.isEmpty());\n}",
                            "oracle": "assertTrue(res.isEmpty());",
                            "oracleLn": 54,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TestBinaryRecordsQuery",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/select/TestBinaryRecordsQuery.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 26,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" ) ; \n database . create ( ) ; \n database . addBlobCluster ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSelectBinary",
                            "startLn": 38,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testSelectBinary ( ) {\n     database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     List < ORecord > res = database . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertEquals(1,res.size());\n}",
                            "oracle": "assertEquals(1,res.size());",
                            "oracleLn": 42,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testSelectRidBinary",
                            "startLn": 47,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testSelectRidBinary ( ) {\n     ORecord rec = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     List < ORecord > res = database . query ( new OSQLSynchQuery < Object > ( \"STR\" ) ) ; \n     assertEquals(1,res.size());\n}",
                            "oracle": "assertEquals(1,res.size());",
                            "oracleLn": 51,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testDeleteBinary",
                            "startLn": 55,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testDeleteBinary ( ) {\n     ORecord rec = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     Integer res = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     database . getLocalCache ( ) . clear ( ) ; \n     assertEquals(1,res.intValue());\n}",
                            "oracle": "assertEquals(1,res.intValue());",
                            "oracleLn": 60,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/cache/OLocalRecordCache.java",
                            "focalName": "clear",
                            "focalStartLn": 105,
                            "focalEndLn": 108,
                            "focalMethod": "@Override\n public void clear ( ) { \n super . clear ( ) ; \n } "
                        },
                        {
                            "testName": "testSelectDeleteBinary",
                            "startLn": 66,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testSelectDeleteBinary ( ) {\n     ORecord rec = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , rec ) ; \n     database . save ( doc ) ; \n     Integer res = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     database . getLocalCache ( ) . clear ( ) ; \n     assertEquals(1,res.intValue());\n}",
                            "oracle": "assertEquals(1,res.intValue());",
                            "oracleLn": 75,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/cache/OLocalRecordCache.java",
                            "focalName": "clear",
                            "focalStartLn": 105,
                            "focalEndLn": 108,
                            "focalMethod": "@Override\n public void clear ( ) { \n super . clear ( ) ; \n } "
                        },
                        {
                            "testName": "testDeleteFromSelectBinary",
                            "startLn": 83,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testDeleteFromSelectBinary ( ) {\n     ORecord rec = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     ORecord rec1 = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , rec ) ; \n     database . save ( doc ) ; \n     ODocument doc1 = new ODocument ( \"STR\" ) ; \n     doc1 . field ( \"STR\" , rec1 ) ; \n     database . save ( doc1 ) ; \n     Integer res = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     database . getLocalCache ( ) . clear ( ) ; \n     assertEquals(2,res.intValue());\n}",
                            "oracle": "assertEquals(2,res.intValue());",
                            "oracleLn": 96,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/cache/OLocalRecordCache.java",
                            "focalName": "clear",
                            "focalStartLn": 105,
                            "focalEndLn": 108,
                            "focalMethod": "@Override\n public void clear ( ) { \n super . clear ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OSelectStatementTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testParserSimpleSelect1",
                            "startLn": 60,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testParserSimpleSelect1 ( ) {\n     SimpleNode stm = checkRightSyntax ( \"STR\" ) ; \n     assertTrue(stminstanceofOSelectStatement);\n}",
                            "oracle": "assertTrue(stminstanceofOSelectStatement);",
                            "oracleLn": 63,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OSelectStatement.java",
                            "focalName": "getWhereClause",
                            "focalStartLn": 76,
                            "focalEndLn": 78,
                            "focalMethod": " public OWhereClause getWhereClause ( ) { \n return whereClause ; \n } "
                        },
                        {
                            "testName": "testParserSimpleSelect2",
                            "startLn": 71,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testParserSimpleSelect2 ( ) {\n     SimpleNode stm = checkRightSyntax ( \"STR\" ) ; \n     assertTrue(stminstanceofOSelectStatement);\n}",
                            "oracle": "assertTrue(stminstanceofOSelectStatement);",
                            "oracleLn": 74,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OSelectStatement.java",
                            "focalName": "getWhereClause",
                            "focalStartLn": 76,
                            "focalEndLn": 78,
                            "focalMethod": " public OWhereClause getWhereClause ( ) { \n return whereClause ; \n } "
                        },
                        {
                            "testName": "testFlatten",
                            "startLn": 618,
                            "endLn": 627,
                            "testMethod": "@Test\n public void testFlatten ( ) {\n     OSelectStatement stm = ( OSelectStatement ) checkRightSyntax ( \"STR\" ) ; \n     List < OAndBlock > flattended = stm . whereClause . flatten ( ) ; \n     assertTrue(((OBinaryCondition)flattended.get(0).subBlocks.get(0)).left.isBaseIdentifier());\n}",
                            "oracle": "assertTrue(((OBinaryCondition)flattended.get(0).subBlocks.get(0)).left.isBaseIdentifier());",
                            "oracleLn": 622,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OExpression.java",
                            "focalName": "isBaseIdentifier",
                            "focalStartLn": 144,
                            "focalEndLn": 153,
                            "focalMethod": " public boolean isBaseIdentifier ( ) { \n if ( mathExpression != null ) { \n return mathExpression . isBaseIdentifier ( ) ; \n } if ( value instanceof OMathExpression ) { \n return ( ( OMathExpression ) value ) . isBaseIdentifier ( ) ; \n } return false ; \n } "
                        },
                        {
                            "testName": "testTranslateLucene",
                            "startLn": 739,
                            "endLn": 745,
                            "testMethod": "@Test\n public void testTranslateLucene ( ) {\n     OSelectStatement stm = ( OSelectStatement ) checkRightSyntax ( \"STR\" ) ; \n     stm . whereClause . getBaseExpression ( ) . translateLuceneOperator ( ) ; \n     Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));",
                            "oracleLn": 743,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/SimpleNode.java",
                            "focalName": "toString",
                            "focalStartLn": 115,
                            "focalEndLn": 119,
                            "focalMethod": " public String toString ( ) { \n StringBuilder result = new StringBuilder ( ) ; \n toString ( null , result ) ; \n return result . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OWALPageV2ChangesPortionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageV2ChangesPortionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void before ( ) { \n Orient . instance ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSingleLongValueInStartChunk",
                            "startLn": 25,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testSingleLongValueInStartChunk ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . putLong ( 64 , 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setLongValue ( pointer , 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getLongValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getLongValue(pointer,64),42);",
                            "oracleLn": 32,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getLongValue",
                            "focalStartLn": 80,
                            "focalEndLn": 87,
                            "focalMethod": "@Override\n public long getLongValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ OLongSerializer . LONG_SIZE ] ; \n readData ( pointer , offset , data ) ; \n return OLongSerializer . INSTANCE . deserializeNative ( data , 0 ) ; \n } "
                        },
                        {
                            "testName": "testSingleLongValuesInMiddleOfChunk",
                            "startLn": 40,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testSingleLongValuesInMiddleOfChunk ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . putLong ( 60 , 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setLongValue ( pointer , 42 , 60 ) ; \n     Assert.assertEquals(changesCollector.getLongValue(pointer,60),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getLongValue(pointer,60),42);",
                            "oracleLn": 47,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getLongValue",
                            "focalStartLn": 80,
                            "focalEndLn": 87,
                            "focalMethod": "@Override\n public long getLongValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ OLongSerializer . LONG_SIZE ] ; \n readData ( pointer , offset , data ) ; \n return OLongSerializer . INSTANCE . deserializeNative ( data , 0 ) ; \n } "
                        },
                        {
                            "testName": "testSingleIntValue",
                            "startLn": 54,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testSingleIntValue ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . putLong ( 64 , 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setIntValue ( pointer , 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getIntValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getIntValue(pointer,64),42);",
                            "oracleLn": 61,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getIntValue",
                            "focalStartLn": 89,
                            "focalEndLn": 96,
                            "focalMethod": "@Override\n public int getIntValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ OIntegerSerializer . INT_SIZE ] ; \n readData ( pointer , offset , data ) ; \n return OIntegerSerializer . INSTANCE . deserializeNative ( data , 0 ) ; \n } "
                        },
                        {
                            "testName": "testSingleShortValue",
                            "startLn": 68,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testSingleShortValue ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . putShort ( 64 , ( short ) 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setShortValue ( pointer , ( short ) 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getShortValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getShortValue(pointer,64),42);",
                            "oracleLn": 75,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getShortValue",
                            "focalStartLn": 98,
                            "focalEndLn": 105,
                            "focalMethod": "@Override\n public short getShortValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ OShortSerializer . SHORT_SIZE ] ; \n readData ( pointer , offset , data ) ; \n return OShortSerializer . INSTANCE . deserializeNative ( data , 0 ) ; \n } "
                        },
                        {
                            "testName": "testSingleByteValue",
                            "startLn": 83,
                            "endLn": 95,
                            "testMethod": "@Test\n public void testSingleByteValue ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . put ( 64 , ( byte ) 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setByteValue ( pointer , ( byte ) 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);",
                            "oracleLn": 90,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getByteValue",
                            "focalStartLn": 107,
                            "focalEndLn": 114,
                            "focalMethod": "@Override\n public byte getByteValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ 1 ] ; \n readData ( pointer , offset , data ) ; \n return data [ 0 ] ; \n } "
                        },
                        {
                            "testName": "testEmptyChanges",
                            "startLn": 277,
                            "endLn": 288,
                            "testMethod": "@Test\n public void testEmptyChanges ( ) {\n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     int size = changesCollector . serializedSize ( ) ; \n     byte [ ] bytes = new byte [ size ] ; \n     changesCollector . toStream ( 0 , bytes ) ; \n     OWALPageChangesPortion changesCollectorRestored = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollectorRestored . fromStream ( 0 , bytes ) ; \n     Assert.assertEquals(size,changesCollectorRestored.serializedSize());\n}",
                            "oracle": "Assert.assertEquals(size,changesCollectorRestored.serializedSize());",
                            "oracleLn": 285,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "serializedSize",
                            "focalStartLn": 141,
                            "focalEndLn": 164,
                            "focalMethod": "@Override\n public int serializedSize ( ) { \n int offset ; \n if ( pageChunks == null ) { \n offset = OShortSerializer . SHORT_SIZE ; \n } else { \n offset = OShortSerializer . SHORT_SIZE ; \n for ( byte [ ] [ ] pageChunk : pageChunks ) { \n if ( pageChunk != null ) { \n for ( int j = 0 ; \n j < PORTION_SIZE ; \n j ++ ) { \n if ( pageChunk [ j ] != null ) { \n offset += OByteSerializer . BYTE_SIZE ; \n offset += OByteSerializer . BYTE_SIZE ; \n offset += 2 * CHUNK_SIZE ; \n } } } } } return offset ; \n } "
                        },
                        {
                            "testName": "testReadNoChanges",
                            "startLn": 290,
                            "endLn": 301,
                            "testMethod": "@Test\n public void testReadNoChanges ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     data [ 0 ] = 1 ; \n     data [ 1 ] = 2 ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     byte [ ] bytes = changesCollector . getBinaryValue ( pointer , 0 , 2 ) ; \n     Assert.assertEquals(bytes[0],1);\n}",
                            "oracle": "Assert.assertEquals(bytes[0],1);",
                            "oracleLn": 298,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getBinaryValue",
                            "focalStartLn": 116,
                            "focalEndLn": 122,
                            "focalMethod": "@Override\n public byte [ ] getBinaryValue ( ByteBuffer pointer , int offset , int len ) { \n byte [ ] data = new byte [ len ] ; \n readData ( pointer , offset , data ) ; \n return data ; \n } "
                        }
                    ]
                },
                {
                    "className": "ReadWriteDiskCacheTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/cache/local/twoq/ReadWriteDiskCacheTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 63,
                        "endLn": 78,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n OGlobalConfiguration . STORAGE_EXCLUSIVE_FILE_ACCESS . setValue ( Boolean . FALSE ) ; \n String buildDirectory = System . getProperty ( \"STR\" ) ; \n if ( buildDirectory == null ) { \n buildDirectory = \"STR\" ; \n } storageName = \"STR\" ; \n storagePath = Paths . get ( buildDirectory ) . resolve ( \"STR\" ) ; \n fileName = \"STR\" ; \n OWALRecordsFactory . INSTANCE . registerNewRecord ( ( byte ) 128 , TestRecord . class ) ; \n } @Before\n public void beforeMethod ( ) throws Exception { \n closeBufferAndDeleteFile ( ) ; \n initBuffer ( ) ; \n Random random = new Random ( ) ; \n seed = ( byte ) ( random . nextInt ( ) & 0xFF ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCacheShouldCreateFileIfItIsNotExisted",
                            "startLn": 502,
                            "endLn": 511,
                            "testMethod": "@Test\n public void testCacheShouldCreateFileIfItIsNotExisted ( ) throws Exception {\n     final long fileId = readBuffer . addFile ( fileName , writeBuffer ) ; \n     final String nativeFileName = writeBuffer . nativeFileNameById ( fileId ) ; \n     assertnativeFileName!=null;\n}",
                            "oracle": "assertnativeFileName!=null;",
                            "oracleLn": 506,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/cache/local/OWOWCache.java",
                            "focalName": "nativeFileNameById",
                            "focalStartLn": 1693,
                            "focalEndLn": 1701,
                            "focalMethod": "@Override\n public String nativeFileNameById ( final long fileId ) { \n final OFileClassic fileClassic = files . get ( fileId ) ; \n if ( fileClassic != null ) { \n return fileClassic . getName ( ) ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "ConcurrentLRUListConcurrentTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/cache/ConcurrentLRUListConcurrentTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 31,
                        "endLn": 34,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n list = new ConcurrentLRUList ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testConcurrentAdd",
                            "startLn": 36,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testConcurrentAdd ( ) throws Exception {\n     ConcurrentTestHelper . test ( THREAD_COUNT , new AdderFactory ( ) ) ; \n     int expectedSize = AMOUNT_OF_OPERATIONS * THREAD_COUNT ; \n     assertListConsistency(expectedSize);\n}",
                            "oracle": "assertListConsistency(expectedSize);",
                            "oracleLn": 40,
                            "focalFile": "test-commons/src/main/java/com/orientechnologies/orient/test/ConcurrentTestHelper.java",
                            "focalName": "test",
                            "focalStartLn": 28,
                            "focalEndLn": 31,
                            "focalMethod": " public static < T > Collection < T > test ( int threadCount , TestFactory < T > factory ) { \n final List < Callable < T > > callables = prepareWorkers ( threadCount , factory ) ; \n return go ( callables ) ; \n } "
                        },
                        {
                            "testName": "testAddRemoveSameEntries",
                            "startLn": 57,
                            "endLn": 62,
                            "testMethod": "@Test\n public void testAddRemoveSameEntries ( ) throws Exception {\n     ConcurrentTestHelper . < Integer > build ( ) . add ( THREAD_COUNT , new AddSameFactory ( ) ) . add ( THREAD_COUNT , new RemoveLRUFactory ( ) ) . go ( ) ; \n     assertListConsistency();\n}",
                            "oracle": "assertListConsistency();",
                            "oracleLn": 60,
                            "focalFile": "test-commons/src/main/java/com/orientechnologies/orient/test/TestBuilder.java",
                            "focalName": "go",
                            "focalStartLn": 36,
                            "focalEndLn": 38,
                            "focalMethod": " public Collection < T > go ( ) { \n return ConcurrentTestHelper . go ( workers ) ; \n } "
                        },
                        {
                            "testName": "testAllOperationsRandomEntries",
                            "startLn": 64,
                            "endLn": 70,
                            "testMethod": "@Test\n public void testAllOperationsRandomEntries ( ) throws Exception {\n     ConcurrentTestHelper . < Integer > build ( ) . add ( THREAD_COUNT , new RandomAdderFactory ( ) ) . add ( THREAD_COUNT , new RandomRemoveFactory ( ) ) . add ( THREAD_COUNT , new RemoveLRUFactory ( ) ) . go ( ) ; \n     assertListConsistency();\n}",
                            "oracle": "assertListConsistency();",
                            "oracleLn": 67,
                            "focalFile": "test-commons/src/main/java/com/orientechnologies/orient/test/TestBuilder.java",
                            "focalName": "go",
                            "focalStartLn": 36,
                            "focalEndLn": 38,
                            "focalMethod": " public Collection < T > go ( ) { \n return ConcurrentTestHelper . go ( workers ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ONullBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testEmptyBucket",
                            "startLn": 18,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testEmptyBucket ( ) {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     Assert.assertNull(bucket.getValue());\n}",
                            "oracle": "Assert.assertNull(bucket.getValue());",
                            "oracleLn": 27,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucket.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 78,
                            "focalMethod": " public OSBTreeValue < V > getValue ( ) { \n if ( getByteValue ( NEXT_FREE_POSITION ) == 0 ) return null ; \n final boolean isLink = getByteValue ( NEXT_FREE_POSITION + 1 ) == 0 ; \n if ( isLink ) return new OSBTreeValue < V > ( true , getLongValue ( NEXT_FREE_POSITION + 2 ) , null ) ; \n return new OSBTreeValue < V > ( false , - 1 , deserializeFromDirectMemory ( valueSerializer , NEXT_FREE_POSITION + 2 ) ) ; \n } "
                        },
                        {
                            "testName": "testAddGetValue",
                            "startLn": 37,
                            "endLn": 57,
                            "testMethod": "@Test\n public void testAddGetValue ( ) throws IOException {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     bucket . setValue ( new OSBTreeValue < > ( false , - 1 , \"STR\" ) ) ; \n     OSBTreeValue < String > treeValue = bucket . getValue ( ) ; \n     Assert.assertEquals(treeValue.getValue(),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(treeValue.getValue(),\"STR\");",
                            "oracleLn": 48,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeValue.java",
                            "focalName": "getValue",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public V getValue ( ) { \n return value ; \n } "
                        },
                        {
                            "testName": "testAddRemoveValue",
                            "startLn": 59,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testAddRemoveValue ( ) throws IOException {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     bucket . setValue ( new OSBTreeValue < > ( false , - 1 , \"STR\" ) ) ; \n     bucket . removeValue ( ) ; \n     OSBTreeValue < String > treeValue = bucket . getValue ( ) ; \n     Assert.assertNull(treeValue);\n}",
                            "oracle": "Assert.assertNull(treeValue);",
                            "oracleLn": 71,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucket.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 78,
                            "focalMethod": " public OSBTreeValue < V > getValue ( ) { \n if ( getByteValue ( NEXT_FREE_POSITION ) == 0 ) return null ; \n final boolean isLink = getByteValue ( NEXT_FREE_POSITION + 1 ) == 0 ; \n if ( isLink ) return new OSBTreeValue < V > ( true , getLongValue ( NEXT_FREE_POSITION + 2 ) , null ) ; \n return new OSBTreeValue < V > ( false , - 1 , deserializeFromDirectMemory ( valueSerializer , NEXT_FREE_POSITION + 2 ) ) ; \n } "
                        },
                        {
                            "testName": "testAddRemoveAddValue",
                            "startLn": 83,
                            "endLn": 110,
                            "testMethod": "@Test\n public void testAddRemoveAddValue ( ) throws IOException {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     bucket . setValue ( new OSBTreeValue < > ( false , - 1 , \"STR\" ) ) ; \n     bucket . removeValue ( ) ; \n     OSBTreeValue < String > treeValue = bucket . getValue ( ) ; \n     Assert.assertNull(treeValue);\n}",
                            "oracle": "Assert.assertNull(treeValue);",
                            "oracleLn": 95,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucket.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 78,
                            "focalMethod": " public OSBTreeValue < V > getValue ( ) { \n if ( getByteValue ( NEXT_FREE_POSITION ) == 0 ) return null ; \n final boolean isLink = getByteValue ( NEXT_FREE_POSITION + 1 ) == 0 ; \n if ( isLink ) return new OSBTreeValue < V > ( true , getLongValue ( NEXT_FREE_POSITION + 2 ) , null ) ; \n return new OSBTreeValue < V > ( false , - 1 , deserializeFromDirectMemory ( valueSerializer , NEXT_FREE_POSITION + 2 ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SBTreeValuePageTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/SBTreeValuePageTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testFreeListPointer",
                            "startLn": 69,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testFreeListPointer ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeValuePage valuePage = new OSBTreeValuePage ( cacheEntry , true ) ; \n     valuePage . setNextFreeListPage ( 124 ) ; \n     Assert.assertEquals(valuePage.getNextFreeListPage(),124);\n}",
                            "oracle": "Assert.assertEquals(valuePage.getNextFreeListPage(),124);",
                            "oracleLn": 79,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeValuePage.java",
                            "focalName": "getNextFreeListPage",
                            "focalStartLn": 106,
                            "focalEndLn": 108,
                            "focalMethod": " public long getNextFreeListPage ( ) { \n return getLongValue ( FREE_LIST_NEXT_PAGE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SBTreeNonLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/SBTreeNonLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 24,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     final OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     final OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OSBTreeBucket < Long , OIdentifiable > treeBucket = new OSBTreeBucket < Long , OIdentifiable > ( cacheEntry , false , OLongSerializer . INSTANCE , null , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeBucket.java",
                            "focalName": "size",
                            "focalStartLn": 201,
                            "focalEndLn": 203,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( SIZE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SBTreeLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/SBTreeLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 49,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBucket < Long , OIdentifiable > treeBucket = new OSBTreeBucket < > ( cacheEntry , true , OLongSerializer . INSTANCE , null , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeBucket.java",
                            "focalName": "size",
                            "focalStartLn": 201,
                            "focalEndLn": 203,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( SIZE_OFFSET ) ; \n } "
                        },
                        {
                            "testName": "testSetLeftSibling",
                            "startLn": 327,
                            "endLn": 345,
                            "testMethod": "@Test\n public void testSetLeftSibling ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBucket < Long , OIdentifiable > treeBucket = new OSBTreeBucket < > ( cacheEntry , true , OLongSerializer . INSTANCE , null , OLinkSerializer . INSTANCE , null ) ; \n     treeBucket . setLeftSibling ( 123 ) ; \n     Assert.assertEquals(treeBucket.getLeftSibling(),123);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.getLeftSibling(),123);",
                            "oracleLn": 337,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeBucket.java",
                            "focalName": "getLeftSibling",
                            "focalStartLn": 570,
                            "focalEndLn": 572,
                            "focalMethod": " public long getLeftSibling ( ) { \n return getLongValue ( LEFT_SIBLING_OFFSET ) ; \n } "
                        },
                        {
                            "testName": "testSetRightSibling",
                            "startLn": 347,
                            "endLn": 365,
                            "testMethod": "@Test\n public void testSetRightSibling ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBucket < Long , OIdentifiable > treeBucket = new OSBTreeBucket < > ( cacheEntry , true , OLongSerializer . INSTANCE , null , OLinkSerializer . INSTANCE , null ) ; \n     treeBucket . setRightSibling ( 123 ) ; \n     Assert.assertEquals(treeBucket.getRightSibling(),123);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.getRightSibling(),123);",
                            "oracleLn": 357,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/OSBTreeBucket.java",
                            "focalName": "getRightSibling",
                            "focalStartLn": 578,
                            "focalEndLn": 580,
                            "focalMethod": " public long getRightSibling ( ) { \n return getLongValue ( RIGHT_SIBLING_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "WOWCacheTestIT",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/cache/WOWCacheTestIT.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 55,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n OGlobalConfiguration . STORAGE_EXCLUSIVE_FILE_ACCESS . setValue ( Boolean . FALSE ) ; \n OGlobalConfiguration . FILE_LOCK . setValue ( Boolean . FALSE ) ; \n String buildDirectory = System . getProperty ( \"STR\" , \"STR\" ) ; \n fileName = \"STR\" ; \n storageName = \"STR\" ; \n storagePath = Paths . get ( buildDirectory ) . resolve ( storageName ) ; \n OWALRecordsFactory . INSTANCE . registerNewRecord ( ( byte ) 128 , TestRecord . class ) ; \n } @Before\n public void beforeMethod ( ) throws Exception { \n deleteCacheAndDeleteFile ( ) ; \n initBuffer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFileRestore",
                            "startLn": 279,
                            "endLn": 303,
                            "testMethod": "@Test\n public void testFileRestore ( ) throws IOException {\n     final long nonDelFileId = wowCache . addFile ( fileName ) ; \n     final long fileId = wowCache . addFile ( \"STR\" ) ; \n     final String removedNativeFileName = wowCache . nativeFileNameById ( fileId ) ; \n     wowCache . deleteFile ( fileId ) ; \n     assertremovedNativeFileName!=null;\n}",
                            "oracle": "assertremovedNativeFileName!=null;",
                            "oracleLn": 285,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/cache/local/OWOWCache.java",
                            "focalName": "deleteFile",
                            "focalStartLn": 1287,
                            "focalEndLn": 1308,
                            "focalMethod": "@Override\n public void deleteFile ( final long fileId ) throws IOException { \n final int intId = extractFileId ( fileId ) ; \n filesLock . acquireWriteLock ( ) ; \n try { \n final String fileName = doDeleteFile ( intId ) ; \n if ( fileName != null ) { \n final String name = idNameMap . get ( intId ) ; \n idNameMap . remove ( intId ) ; \n nameIdMap . put ( name , - intId ) ; \n idNameMap . put ( - intId , name ) ; \n writeNameIdEntry ( new NameFileIdEntry ( name , - intId , fileName ) , true ) ; \n } } finally { \n filesLock . releaseWriteLock ( ) ; \n } } "
                        },
                        {
                            "testName": "testFileRestoreAfterClose",
                            "startLn": 305,
                            "endLn": 335,
                            "testMethod": "@Test\n public void testFileRestoreAfterClose ( ) throws Exception {\n     final long nonDelFileId = wowCache . addFile ( fileName ) ; \n     final long fileId = wowCache . addFile ( \"STR\" ) ; \n     final String removedNativeFileName = wowCache . nativeFileNameById ( fileId ) ; \n     wowCache . deleteFile ( fileId ) ; \n     assertremovedNativeFileName!=null;\n}",
                            "oracle": "assertremovedNativeFileName!=null;",
                            "oracleLn": 311,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/cache/local/OWOWCache.java",
                            "focalName": "deleteFile",
                            "focalStartLn": 1287,
                            "focalEndLn": 1308,
                            "focalMethod": "@Override\n public void deleteFile ( final long fileId ) throws IOException { \n final int intId = extractFileId ( fileId ) ; \n filesLock . acquireWriteLock ( ) ; \n try { \n final String fileName = doDeleteFile ( intId ) ; \n if ( fileName != null ) { \n final String name = idNameMap . get ( intId ) ; \n idNameMap . remove ( intId ) ; \n nameIdMap . put ( name , - intId ) ; \n idNameMap . put ( - intId , name ) ; \n writeNameIdEntry ( new NameFileIdEntry ( name , - intId , fileName ) , true ) ; \n } } finally { \n filesLock . releaseWriteLock ( ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OSBTreeBonsaiNonLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiNonLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , false , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "size",
                            "focalStartLn": 260,
                            "focalEndLn": 262,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( offset + SIZE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSBTreeBonsaiLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , true , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "size",
                            "focalStartLn": 260,
                            "focalEndLn": 262,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( offset + SIZE_OFFSET ) ; \n } "
                        },
                        {
                            "testName": "testSetLeftSibling",
                            "startLn": 325,
                            "endLn": 344,
                            "testMethod": "@Test\n public void testSetLeftSibling ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , true , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     final OBonsaiBucketPointer p = new OBonsaiBucketPointer ( 123 , 8192 * 2 ) ; \n     treeBucket . setLeftSibling ( p ) ; \n     Assert.assertEquals(treeBucket.getLeftSibling(),p);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.getLeftSibling(),p);",
                            "oracleLn": 336,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "getLeftSibling",
                            "focalStartLn": 491,
                            "focalEndLn": 493,
                            "focalMethod": " public OBonsaiBucketPointer getLeftSibling ( ) { \n return getBucketPointer ( offset + LEFT_SIBLING_OFFSET ) ; \n } "
                        },
                        {
                            "testName": "testSetRightSibling",
                            "startLn": 346,
                            "endLn": 365,
                            "testMethod": "@Test\n public void testSetRightSibling ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , true , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     final OBonsaiBucketPointer p = new OBonsaiBucketPointer ( 123 , 8192 * 2 ) ; \n     treeBucket . setRightSibling ( p ) ; \n     Assert.assertEquals(treeBucket.getRightSibling(),p);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.getRightSibling(),p);",
                            "oracleLn": 357,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "getRightSibling",
                            "focalStartLn": 499,
                            "focalEndLn": 501,
                            "focalMethod": " public OBonsaiBucketPointer getRightSibling ( ) { \n return getBucketPointer ( offset + RIGHT_SIBLING_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "DuplicateDictionaryIndexChangesTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateDictionaryIndexChangesTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 37,
                        "endLn": 40,
                        "setupMethod": "@BeforeClass\n public static void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + DuplicateDictionaryIndexChangesTxTest . class . getSimpleName ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n if ( ! db . isClosed ( ) ) db . drop ( ) ; \n db . create ( ) ; \n final OClass class_ = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n index = class_ . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . DICTIONARY_HASH_INDEX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDuplicateNullsOnCreate",
                            "startLn": 56,
                            "endLn": 75,
                            "testMethod": "@Test\n public void testDuplicateNullsOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . save ( ) ; \n     person1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person2,index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(person2,index.get(\"STR\"));",
                            "oracleLn": 65,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateNullsOnUpdate",
                            "startLn": 77,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testDuplicateNullsOnUpdate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , ( Object ) null ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , ( Object ) null ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , ( Object ) null ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person3,index.get(null));\n}",
                            "oracle": "Assert.assertEquals(person3,index.get(null));",
                            "oracleLn": 84,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnCreate",
                            "startLn": 107,
                            "endLn": 128,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertNull(index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertNull(index.get(\"STR\"));",
                            "oracleLn": 117,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnUpdate",
                            "startLn": 130,
                            "endLn": 163,
                            "testMethod": "@Test\n public void testDuplicateValuesOnUpdate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person1,index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(person1,index.get(\"STR\"));",
                            "oracleLn": 137,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnCreateDelete",
                            "startLn": 165,
                            "endLn": 187,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreateDelete ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . delete ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . delete ( ) ; \n     person4 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person4 . delete ( ) ; \n     db . commit ( ) ; \n     Assert.assertNull(index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertNull(index.get(\"STR\"));",
                            "oracleLn": 178,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        }
                    ]
                },
                {
                    "className": "DuplicateNonUniqueIndexChangesTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateNonUniqueIndexChangesTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 42,
                        "endLn": 45,
                        "setupMethod": "@BeforeClass\n public static void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + DuplicateNonUniqueIndexChangesTxTest . class . getSimpleName ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n if ( ! db . isClosed ( ) ) db . drop ( ) ; \n db . create ( ) ; \n final OClass class_ = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n index = class_ . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE_HASH_INDEX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDuplicateNullsOnCreate",
                            "startLn": 61,
                            "endLn": 78,
                            "testMethod": "@Test\n public void testDuplicateNullsOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . save ( ) ; \n     person3 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     assertRids(null,person1,person2);\n}",
                            "oracle": "assertRids(null,person1,person2);",
                            "oracleLn": 69,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "commit",
                            "focalStartLn": 726,
                            "focalEndLn": 731,
                            "focalMethod": "@Override\n public ODatabase < ORecord > commit ( ) throws OTransactionException { \n checkOpenness ( ) ; \n internal . commit ( ) ; \n return this ; \n } "
                        },
                        {
                            "testName": "testDuplicateValuesOnCreate",
                            "startLn": 119,
                            "endLn": 139,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     assertRids(\"STR\",person1);\n}",
                            "oracle": "assertRids(\"STR\",person1);",
                            "oracleLn": 129,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "commit",
                            "focalStartLn": 726,
                            "focalEndLn": 731,
                            "focalMethod": "@Override\n public ODatabase < ORecord > commit ( ) throws OTransactionException { \n checkOpenness ( ) ; \n internal . commit ( ) ; \n return this ; \n } "
                        },
                        {
                            "testName": "testDuplicateValuesOnCreateDelete",
                            "startLn": 176,
                            "endLn": 198,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreateDelete ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . delete ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . delete ( ) ; \n     person4 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     assertRids(\"STR\");\n}",
                            "oracle": "assertRids(\"STR\");",
                            "oracleLn": 188,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "commit",
                            "focalStartLn": 726,
                            "focalEndLn": 731,
                            "focalMethod": "@Override\n public ODatabase < ORecord > commit ( ) throws OTransactionException { \n checkOpenness ( ) ; \n internal . commit ( ) ; \n return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "DuplicateUniqueIndexChangesTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateUniqueIndexChangesTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@BeforeClass\n public static void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + DuplicateUniqueIndexChangesTxTest . class . getSimpleName ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n if ( ! db . isClosed ( ) ) db . drop ( ) ; \n db . create ( ) ; \n final OClass class_ = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n index = class_ . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . UNIQUE_HASH_INDEX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDuplicateNullsOnCreate",
                            "startLn": 57,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testDuplicateNullsOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . save ( ) ; \n     person1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertNull(index.get(null));\n}",
                            "oracle": "Assert.assertNull(index.get(null));",
                            "oracleLn": 67,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnCreate",
                            "startLn": 121,
                            "endLn": 143,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertNull(index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertNull(index.get(\"STR\"));",
                            "oracleLn": 131,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnUpdate",
                            "startLn": 145,
                            "endLn": 178,
                            "testMethod": "@Test\n public void testDuplicateValuesOnUpdate ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person1,index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(person1,index.get(\"STR\"));",
                            "oracleLn": 152,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateValuesOnCreateDelete",
                            "startLn": 180,
                            "endLn": 200,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreateDelete ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . delete ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . delete ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person2,index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(person2,index.get(\"STR\"));",
                            "oracleLn": 191,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        },
                        {
                            "testName": "testDuplicateUpdateThrows",
                            "startLn": 259,
                            "endLn": 286,
                            "testMethod": "@ Test ( expected = ORecordDuplicatedException . class ) public void testDuplicateUpdateThrows ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     Assert.assertEquals(person1,index.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(person1,index.get(\"STR\"));",
                            "oracleLn": 267,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "get",
                            "focalStartLn": 66,
                            "focalEndLn": 66,
                            "focalMethod": " T get ( Object iKey ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TransactionChangesDetectionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/TransactionChangesDetectionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 22,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n factory = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n factory . create ( TransactionChangesDetectionTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = factory . open ( TransactionChangesDetectionTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTransactionChangeTracking",
                            "startLn": 37,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testTransactionChangeTracking ( ) {\n     database . begin ( ) ; \n     OTransactionOptimistic currentTx = ( OTransactionOptimistic ) database . getTransaction ( ) ; \n     database . save ( new ODocument ( \"STR\" ) ) ; \n     currentTx . resetChangesTracking ( ) ; \n     database . save ( new ODocument ( \"STR\" ) ) ; \n     assertTrue(currentTx.isChanged());\n}",
                            "oracle": "assertTrue(currentTx.isChanged());",
                            "oracleLn": 44,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/tx/OTransactionOptimistic.java",
                            "focalName": "isChanged",
                            "focalStartLn": 567,
                            "focalEndLn": 569,
                            "focalMethod": " public boolean isChanged ( ) { \n return changed ; \n } "
                        }
                    ]
                },
                {
                    "className": "NonDurableTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/NonDurableTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 45,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void before ( ) { \n String buildDirectory = System . getProperty ( \"STR\" ) ; \n if ( buildDirectory == null ) buildDirectory = \"STR\" ; \n db = new ODatabaseDocumentTx ( \"STR\" + buildDirectory + File . separator + NonDurableTxTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n db . drop ( ) ; \n } db . create ( ) ; \n final OAbstractPaginatedStorage storage = ( OAbstractPaginatedStorage ) db . getStorage ( ) ; \n atomicOperationsManager = storage . getAtomicOperationsManager ( ) ; \n wal = storage . getWALInstance ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testChangesStored",
                            "startLn": 70,
                            "endLn": 84,
                            "testMethod": "@Test\n public void testChangesStored ( ) {\n     db . begin ( ) ; \n     db . getTransaction ( ) . setUsingLog ( false ) ; \n     final ODocument doc1 = db . newInstance ( ) . field ( \"STR\" , \"STR\" ) . save ( db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     db . commit ( ) ; \n     doc1 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . close ( ) ; \n     db . open ( \"STR\" , \"STR\" ) ; \n     final ODocument doc2 = db . load ( doc1 . getIdentity ( ) ) ; \n     Assert.assertEquals(\"STR\",doc2.field(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",doc2.field(\"STR\"));",
                            "oracleLn": 80,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testWalNotGrowingWhileWalDisabledInTx",
                            "startLn": 109,
                            "endLn": 125,
                            "testMethod": "@Test\n public void testWalNotGrowingWhileWalDisabledInTx ( ) throws Exception {\n     db . newInstance ( ) . field ( \"STR\" , \"STR\" ) . save ( db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     wal . flush ( ) ; \n     final OLogSequenceNumber startLsn = wal . getFlushedLsn ( ) ; \n     db . begin ( ) ; \n     db . getTransaction ( ) . setUsingLog ( false ) ; \n     db . newInstance ( ) . field ( \"STR\" , \"STR\" ) . save ( db . getClusterNameById ( db . getDefaultClusterId ( ) ) ) ; \n     db . commit ( ) ; \n     wal . flush ( ) ; \n     final OLogSequenceNumber endLsn = wal . getFlushedLsn ( ) ; \n     Assert.assertEquals(startLsn,endLsn);\n}",
                            "oracle": "Assert.assertEquals(startLsn,endLsn);",
                            "oracleLn": 120,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java",
                            "focalName": "getFlushedLsn",
                            "focalStartLn": 77,
                            "focalEndLn": 77,
                            "focalMethod": " OLogSequenceNumber getFlushedLsn ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "IndexChangesQueryTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/IndexChangesQueryTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 32,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void before ( ) { \n orientDB = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( \"STR\" , ODatabaseType . MEMORY ) ; \n database = orientDB . open ( \"STR\" , \"STR\" , \"STR\" ) ; \n database . getMetadata ( ) . getIndexManager ( ) . createIndex ( \"STR\" , \"STR\" , new OSimpleKeyIndexDefinition ( OType . INTEGER ) , null , null , null ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMultiplePut",
                            "startLn": 57,
                            "endLn": 80,
                            "testMethod": "@Test\n public void testMultiplePut ( ) {\n     database . begin ( ) ; \n     final OIndex < ? > index = database . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     Assert.assertTrue(indexinstanceofOIndexTxAwareMultiValue);\n}",
                            "oracle": "Assert.assertTrue(indexinstanceofOIndexTxAwareMultiValue);",
                            "oracleLn": 61,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TransactionRidAllocationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/TransactionRidAllocationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 34,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void before ( ) { \n orientDB = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( \"STR\" , ODatabaseType . MEMORY ) ; \n db = ( ODatabaseDocumentInternal ) orientDB . open ( \"STR\" , \"STR\" , \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAllocation",
                            "startLn": 41,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testAllocation ( ) {\n     db . begin ( ) ; \n     OVertex v = db . newVertex ( \"STR\" ) ; \n     db . save ( v ) ; \n     ( ( OAbstractPaginatedStorage ) db . getStorage ( ) ) . preallocateRids ( ( OTransactionInternal ) db . getTransaction ( ) ) ; \n     ORID generated = v . getIdentity ( ) ; \n     assertTrue(generated.isValid());\n}",
                            "oracle": "assertTrue(generated.isValid());",
                            "oracleLn": 48,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/id/ORID.java",
                            "focalName": "isValid",
                            "focalStartLn": 50,
                            "focalEndLn": 50,
                            "focalMethod": " boolean isValid ( ) ; \n"
                        },
                        {
                            "testName": "testAllocationCommit",
                            "startLn": 56,
                            "endLn": 70,
                            "testMethod": "@Test\n public void testAllocationCommit ( ) {\n     db . begin ( ) ; \n     OVertex v = db . newVertex ( \"STR\" ) ; \n     db . save ( v ) ; \n     ( ( OAbstractPaginatedStorage ) db . getStorage ( ) ) . preallocateRids ( ( OTransactionInternal ) db . getTransaction ( ) ) ; \n     ORID generated = v . getIdentity ( ) ; \n     ( ( OAbstractPaginatedStorage ) db . getStorage ( ) ) . commitPreAllocated ( ( OTransactionInternal ) db . getTransaction ( ) ) ; \n     ODatabaseDocument db1 = orientDB . open ( \"STR\" , \"STR\" , \"STR\" ) ; \n     assertNotNull(db1.load(generated));\n}",
                            "oracle": "assertNotNull(db1.load(generated));",
                            "oracleLn": 65,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "load",
                            "focalStartLn": 653,
                            "focalEndLn": 653,
                            "focalMethod": " < RET extends T > RET load ( ORID recordId ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ORidBagAtomicUpdateTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/ridbag/sbtree/ORidBagAtomicUpdateTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n database . declareIntent ( new OIntentMassiveInsert ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n topThreshold = OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . getValueAsInteger ( ) ; \n bottomThreshold = OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . getValueAsInteger ( ) ; \n OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . setValue ( - 1 ) ; \n OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . setValue ( - 1 ) ; \n } @Before\n public void beforeClass ( ) { \n final String dbName = this . getClass ( ) . getSimpleName ( ) ; \n final String storageType = getStorageType ( ) ; \n final String buildDirectory = System . getProperty ( \"STR\" , \"STR\" ) ; \n database = new ODatabaseDocumentTx ( storageType + \"STR\" + buildDirectory + \"STR\" + dbName ) ; \n if ( database . exists ( ) ) { \n database . open ( \"STR\" , \"STR\" ) ; \n database . drop ( ) ; \n } database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAddTwoNewDocuments",
                            "startLn": 39,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testAddTwoNewDocuments ( ) {\n     database . begin ( ) ; \n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . commit ( ) ; \n     database . begin ( ) ; \n     ODocument docOne = new ODocument ( ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     ridBag . add ( docOne ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . rollback ( ) ; \n     rootDoc = database . load ( rootDoc . getIdentity ( ) ) ; \n     ridBag = rootDoc . field ( \"STR\" ) ; \n     Assert.assertEquals(ridBag.size(),0);\n}",
                            "oracle": "Assert.assertEquals(ridBag.size(),0);",
                            "oracleLn": 56,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/ridbag/ORidBag.java",
                            "focalName": "size",
                            "focalStartLn": 200,
                            "focalEndLn": 203,
                            "focalMethod": "@Override\n public int size ( ) { \n return delegate . size ( ) ; \n } "
                        },
                        {
                            "testName": "testAddingDocsDontUpdateVersion",
                            "startLn": 161,
                            "endLn": 188,
                            "testMethod": "@Test\n public void testAddingDocsDontUpdateVersion ( ) {\n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     ODocument docOne = new ODocument ( ) ; \n     ridBag . add ( docOne ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     final int version = rootDoc . getVersion ( ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     Assert.assertEquals(ridBag.size(),2);\n}",
                            "oracle": "Assert.assertEquals(ridBag.size(),2);",
                            "oracleLn": 173,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/ridbag/ORidBag.java",
                            "focalName": "size",
                            "focalStartLn": 200,
                            "focalEndLn": 203,
                            "focalMethod": "@Override\n public int size ( ) { \n return delegate . size ( ) ; \n } "
                        },
                        {
                            "testName": "testAddingDocsDontUpdateVersionInTx",
                            "startLn": 190,
                            "endLn": 222,
                            "testMethod": "@Test\n public void testAddingDocsDontUpdateVersionInTx ( ) {\n     database . begin ( ) ; \n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     ODocument docOne = new ODocument ( ) ; \n     ridBag . add ( docOne ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . commit ( ) ; \n     final int version = rootDoc . getVersion ( ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . commit ( ) ; \n     Assert.assertEquals(ridBag.size(),2);\n}",
                            "oracle": "Assert.assertEquals(ridBag.size(),2);",
                            "oracleLn": 205,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/ridbag/ORidBag.java",
                            "focalName": "size",
                            "focalStartLn": 200,
                            "focalEndLn": 203,
                            "focalMethod": "@Override\n public int size ( ) { \n return delegate . size ( ) ; \n } "
                        },
                        {
                            "testName": "testAddTwoSavedDocuments",
                            "startLn": 291,
                            "endLn": 315,
                            "testMethod": "@Test\n public void testAddTwoSavedDocuments ( ) {\n     long recordsCount = database . countClusterElements ( database . getDefaultClusterId ( ) ) ; \n     database . begin ( ) ; \n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     ODocument docOne = new ODocument ( ) ; \n     docOne . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     docTwo . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ridBag . add ( docOne ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . rollback ( ) ; \n     Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);\n}",
                            "oracle": "Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);",
                            "oracleLn": 306,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "countClusterElements",
                            "focalStartLn": 1165,
                            "focalEndLn": 1169,
                            "focalMethod": "@Override\n public long countClusterElements ( int iCurrentClusterId ) { \n checkOpenness ( ) ; \n return internal . countClusterElements ( iCurrentClusterId ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSelectNoTarget",
                            "startLn": 61,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testSelectNoTarget ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testSelectNoTargetSkip",
                            "startLn": 75,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testSelectNoTargetSkip ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertFalse(result.hasNext());\n}",
                            "oracle": "Assert.assertFalse(result.hasNext());",
                            "oracleLn": 78,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testSelectNoTargetSkipZero",
                            "startLn": 84,
                            "endLn": 96,
                            "testMethod": "@Test\n public void testSelectNoTargetSkipZero ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 87,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testSelectNoTargetLimit0",
                            "startLn": 98,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testSelectNoTargetLimit0 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertFalse(result.hasNext());\n}",
                            "oracle": "Assert.assertFalse(result.hasNext());",
                            "oracleLn": 101,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testSelectNoTargetLimit1",
                            "startLn": 107,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testSelectNoTargetLimit1 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 110,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testQueryMetadataIndexManager2",
                            "startLn": 955,
                            "endLn": 961,
                            "testMethod": "@Test\n public void testQueryMetadataIndexManager2 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 959,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNonExistingRids",
                            "startLn": 963,
                            "endLn": 969,
                            "testMethod": "@Test\n public void testNonExistingRids ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertFalse(result.hasNext());\n}",
                            "oracle": "Assert.assertFalse(result.hasNext());",
                            "oracleLn": 967,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFetchFromSingleRid",
                            "startLn": 971,
                            "endLn": 979,
                            "testMethod": "@Test\n public void testFetchFromSingleRid ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 975,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFetchFromSingleRid2",
                            "startLn": 981,
                            "endLn": 989,
                            "testMethod": "@Test\n public void testFetchFromSingleRid2 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 985,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFetchFromSingleRidParam",
                            "startLn": 991,
                            "endLn": 999,
                            "testMethod": "@Test\n public void testFetchFromSingleRidParam ( ) {\n     OResultSet result = db . query ( \"STR\" , new ORecordId ( 0 , 1 ) ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 995,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFetchFromSingleRid3",
                            "startLn": 1001,
                            "endLn": 1014,
                            "testMethod": "@Test\n public void testFetchFromSingleRid3 ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . save ( db . getClusterNameById ( 0 ) ) ; \n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1007,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFetchFromSingleRid4",
                            "startLn": 1016,
                            "endLn": 1029,
                            "testMethod": "@Test\n public void testFetchFromSingleRid4 ( ) {\n     ODocument document = new ODocument ( ) ; \n     document . save ( db . getClusterNameById ( 0 ) ) ; \n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1022,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet1",
                            "startLn": 2021,
                            "endLn": 2031,
                            "testMethod": "@Test\n public void testLet1 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2024,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet1Long",
                            "startLn": 2033,
                            "endLn": 2043,
                            "testMethod": "@Test\n public void testLet1Long ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2036,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet2",
                            "startLn": 2045,
                            "endLn": 2059,
                            "testMethod": "@Test\n public void testLet2 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2049,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet3",
                            "startLn": 2061,
                            "endLn": 2071,
                            "testMethod": "@Test\n public void testLet3 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2065,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNewRid",
                            "startLn": 3219,
                            "endLn": 3231,
                            "testMethod": "@Test\n public void testNewRid ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3222,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testFromIndexWithoutNullValues",
                            "startLn": 3350,
                            "endLn": 3371,
                            "testMethod": "@Test\n public void testFromIndexWithoutNullValues ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     OElement elem1 = db . newElement ( className ) ; \n     elem1 . setProperty ( \"STR\" , \"STR\" ) ; \n     elem1 . save ( ) ; \n     OElement elem2 = db . newElement ( className ) ; \n     elem2 . setProperty ( \"STR\" , null ) ; \n     elem2 . save ( ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3363,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIndexPrefixUsage",
                            "startLn": 3373,
                            "endLn": 3388,
                            "testMethod": "@Test\n public void testIndexPrefixUsage ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNamedParams",
                            "startLn": 3390,
                            "endLn": 3405,
                            "testMethod": "@Test\n public void testNamedParams ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" , params ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3400,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNamedParamsWithIndex",
                            "startLn": 3407,
                            "endLn": 3423,
                            "testMethod": "@Test\n public void testNamedParamsWithIndex ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" , params ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3418,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIsDefined",
                            "startLn": 3425,
                            "endLn": 3439,
                            "testMethod": "@Test\n public void testIsDefined ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" , params ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3434,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                }
            ]
        }
    ]
}