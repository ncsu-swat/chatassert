{
    "projects": [
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CharacterProtectorTest",
                    "classPath": "core/src/test/java/org/markdownj/test/CharacterProtectorTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createCharacterProtector",
                        "startLn": 17,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void createCharacterProtector ( ) { \n characterProtector = new CharacterProtector ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAllEncodedTokens",
                            "startLn": 28,
                            "endLn": 37,
                            "testMethod": "@Test\n public void testGetAllEncodedTokens ( ) {\n     Collection tokens = characterProtector . getAllEncodedTokens ( ) ; \n     assertEquals(0,tokens.size());\n}",
                            "oracle": "assertEquals(0,tokens.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/CharacterProtector.java",
                            "focalName": "getAllEncodedTokens",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public Collection < String > getAllEncodedTokens ( ) { \n return Collections . unmodifiableSet ( unprotectMap . keySet ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InvalidHandshakeExceptionTest",
                    "classPath": "src/test/java/org/java_websocket/exceptions/InvalidHandshakeExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructor",
                            "startLn": 38,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testConstructor ( ) {\n     InvalidHandshakeException invalidHandshakeException = new InvalidHandshakeException ( ) ; \n     assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());\n}",
                            "oracle": "assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/exceptions/InvalidDataException.java",
                            "focalName": "getCloseCode",
                            "focalStartLn": 91,
                            "focalEndLn": 93,
                            "focalMethod": " public int getCloseCode ( ) { \n return closecode ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CookieTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/CookieTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCookieWithExpiresString",
                            "startLn": 69,
                            "endLn": 78,
                            "testMethod": "@Test\n public void testCookieWithExpiresString ( ) {\n     Random random = new Random ( ) ; \n     int randomExpirationTime = random . nextInt ( 100 ) ; \n     String expiresString = Cookie . getHTTPTime ( randomExpirationTime ) ; \n     Cookie cookie = new Cookie ( \"STR\" , \"STR\" , expiresString ) ; \n     assertTrue(\"STR\",cookie.getHTTPHeader().contains(expiresString));\n}",
                            "oracle": "assertTrue(\"STR\",cookie.getHTTPHeader().contains(expiresString));",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "getHTTPHeader",
                            "focalStartLn": 74,
                            "focalEndLn": 77,
                            "focalMethod": " public String getHTTPHeader ( ) { \n String fmt = \"STR\" ; \n return String . format ( fmt , this . n , this . v , this . e ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ReflexUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/ReflexUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIntefaceGenericTypeClass",
                            "startLn": 110,
                            "endLn": 116,
                            "testMethod": "@Test\n public void testIntefaceGenericTypeClass ( ) {\n     Class < ? > [ ] clazz = ReflexUtil . getInterfacesGenricClasses ( TestInClass . class ) ; \n     Class [ ] exp = { \n String . class , Long . class , Integer . class } ; \n     Assert.assertArrayEquals(clazz,exp);\n}",
                            "oracle": "Assert.assertArrayEquals(clazz,exp);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ReflexUtil.java",
                            "focalName": "getInterfacesGenricClasses",
                            "focalStartLn": 386,
                            "focalEndLn": 395,
                            "focalMethod": " public static Class < ? > [ ] getInterfacesGenricClasses ( final Class < ? > clazz ) { \n Type [ ] types = getInterfacesGenricTypes ( clazz ) ; \n Class < ? > [ ] clazzs = new Class < ? > [ types . length ] ; \n for ( int i = 0 ; \n i < types . length ; \n i ++ ) { \n clazzs [ i ] = ( Class < ? > ) types [ i ] ; \n } return clazzs ; \n } "
                        }
                    ]
                },
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testBitValue",
                            "startLn": 109,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testBitValue ( ) {\n     String bs = \"STR\" ; \n     BitSet b = CommUtil . bitSet ( bs . getBytes ( ) ) ; \n     Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.hexdump(CommUtil.bitValue(b)));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "hexdump",
                            "focalStartLn": 1178,
                            "focalEndLn": 1195,
                            "focalMethod": " public static String hexdump ( final byte [ ] bytes ) { \n if ( bytes == null || bytes . length < 1 ) return \"STR\" ; \n int length = bytes . length ; \n int temp ; \n char [ ] hex = new char [ length * 2 ] ; \n for ( int i = 0 ; \n i < length ; \n i ++ ) { \n temp = bytes [ i ] & 0xFF ; \n hex [ i * 2 ] = HEXARRAY [ temp > > > 4 ] ; \n hex [ i * 2 + 1 ] = HEXARRAY [ temp & 0x0F ] ; \n } return new String ( hex ) ; \n } "
                        },
                        {
                            "testName": "testEscape",
                            "startLn": 36,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testEscape ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.escapeJava(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.escapeJava(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "escapeJava",
                            "focalStartLn": 738,
                            "focalEndLn": 743,
                            "focalMethod": " public static String escapeJava ( String str ) { \n if ( isBlank ( str ) ) { \n return str ; \n } return StringEscapeUtils . escapeJava ( str ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkRURUKR",
                            "startLn": 280,
                            "endLn": 293,
                            "testMethod": "@Test\n public void checkRURUKR ( ) {\n     assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrRUR.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MapUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testPutIfAbsent",
                            "startLn": 40,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testPutIfAbsent ( ) {\n     Map < String , String > map = createMap ( \"STR\" , \"STR\" ) ; \n     MapUtil . putIfAbsent ( map , \"STR\" , \"STR\" ) ; \n     assertEquals(1,map.size());\n}",
                            "oracle": "assertEquals(1,map.size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java",
                            "focalName": "putIfAbsent",
                            "focalStartLn": 30,
                            "focalEndLn": 34,
                            "focalMethod": " public static void putIfAbsent ( Map < String , String > map , String name , String value ) { \n if ( map != null && ! map . containsKey ( name ) ) { \n map . put ( name , value ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "distance_to_solution_is_zero_when_solved",
                            "startLn": 160,
                            "endLn": 165,
                            "testMethod": "@Test\n public void distance_to_solution_is_zero_when_solved ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     assertEquals(0,p.getDistanceToGoal());\n}",
                            "oracle": "assertEquals(0,p.getDistanceToGoal());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "getDistanceToGoal",
                            "focalStartLn": 108,
                            "focalEndLn": 116,
                            "focalMethod": " public int getDistanceToGoal ( ) { \n int distance = 0 ; \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n distance += getDistance ( i , cells [ i ] ) ; \n } return distance ; \n } "
                        }
                    ]
                },
                {
                    "className": "MultiTurtlePanelTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddTurtle",
                            "startLn": 53,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testAddTurtle ( ) throws Exception {\n     JUnitUtils . assumeNotHeadless ( ) ; \n     MultiTurtleWindow panel = new MultiTurtleWindow ( ) ; \n     panel . addTurtle ( new Turtle ( ) ) ; \n     assertEquals(1,panel.getTurtleCount());\n}",
                            "oracle": "assertEquals(1,panel.getTurtleCount());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/teachingextensions/WindowUtils/MultiTurtleWindow.java",
                            "focalName": "getTurtleCount",
                            "focalStartLn": 63,
                            "focalEndLn": 66,
                            "focalMethod": " public int getTurtleCount ( ) { \n return this . turtles . size ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SeqTest",
                    "classPath": "src/test/java/me/zzp/util/SeqTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAssignAt",
                            "startLn": 75,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testAssignAt ( ) {\n     int [ ] a = new int [ 5 ] ; \n     Seq . assignAt ( a , Seq . array ( 0 , 2 , 3 ) , 1 , 3 , 4 ) ; \n     Seq . assignAt ( a , Seq . array ( - 1 , - 4 ) , 5 , 2 ) ; \n     Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);\n}",
                            "oracle": "Assert.assertArrayEquals(newint[]{1,2,3,4,5},a);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "assignAt",
                            "focalStartLn": 206,
                            "focalEndLn": 221,
                            "focalMethod": " public static int [ ] assignAt ( int [ ] a , Integer [ ] indexes , int ... values ) { \n if ( indexes . length != values . length ) { \n throw new IllegalArgumentException ( String . format ( \"STR\" , indexes . length , values . length ) ) ; \n } for ( int i = 0 ; \n i < indexes . length ; \n i ++ ) { \n int index = indexes [ i ] ; \n if ( 0 <= index && index < a . length ) { \n a [ index ] = values [ i ] ; \n } else if ( - a . length <= index && index < 0 ) { \n a [ a . length + index ] = values [ i ] ; \n } else { \n throw new ArrayIndexOutOfBoundsException ( index ) ; \n } } return a ; \n } "
                        },
                        {
                            "testName": "testJoinListNull",
                            "startLn": 19,
                            "endLn": 22,
                            "testMethod": "@Test\n public void testJoinListNull ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",Seq.join(null,\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "join",
                            "focalStartLn": 83,
                            "focalEndLn": 102,
                            "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testConstantMap",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testConstantMap ( ) {\n     String [ ] actuals = Seq . map ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) , \"STR\" ) . toArray ( new String [ 0 ] ) ; \n     Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);\n}",
                            "oracle": "Assert.assertArrayEquals(newString[]{\"STR\",\"STR\",\"STR\"},actuals);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "map",
                            "focalStartLn": 256,
                            "focalEndLn": 262,
                            "focalMethod": " public static List < String > map ( Collection < ? > from , String format ) { \n List < String > to = new ArrayList < > ( from . size ( ) ) ; \n for ( Object e : from ) { \n to . add ( String . format ( format , e ) ) ; \n } return to ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MacAddressTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddressPeriodSeparator",
                            "startLn": 73,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testAddressPeriodSeparator ( ) {\n     final MacAddress macAddress = new MacAddress ( PERIOD_SEPARATOR ) ; \n     assertEquals(NORMALIZED_ADDRESS,macAddress.toString());\n}",
                            "oracle": "assertEquals(NORMALIZED_ADDRESS,macAddress.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "toString",
                            "focalStartLn": 93,
                            "focalEndLn": 104,
                            "focalMethod": "@Override\n public String toString ( ) { \n final StringBuilder builder = new StringBuilder ( ) ; \n for ( int i = 0 ; \n i < address . length ; \n i ++ ) { \n if ( i != 0 ) { \n builder . append ( STANDARD_SEPARATOR ) ; \n } builder . append ( String . format ( \"STR\" , address [ i ] ) ) ; \n } return builder . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TimestampParserTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testParseNull",
                            "startLn": 72,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testParseNull ( ) throws Exception {\n     Date parsed = new TimestampParser ( null ) . parse ( null ) ; \n     assertNull(parsed);\n}",
                            "oracle": "assertNull(parsed);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/TimestampParser.java",
                            "focalName": "parse",
                            "focalStartLn": 59,
                            "focalEndLn": 68,
                            "focalMethod": " public Date parse ( final String timestamp ) throws ProcessingException { \n if ( StringUtils . isBlank ( timestamp ) ) { \n return null ; \n } try { \n return parser . parse ( timestamp ) ; \n } catch ( Exception ex ) { \n throw new ProcessingException ( \"STR\" + timestamp + \"STR\" , ex ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ValidationExceptionTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/validation/ValidationExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExceptionWithMessage",
                            "startLn": 47,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testExceptionWithMessage ( ) {\n     ValidationException exception = new ValidationException ( MESSAGE ) ; \n     assertEquals(MESSAGE,exception.getMessage());\n}",
                            "oracle": "assertEquals(MESSAGE,exception.getMessage());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/validation/ValidationException.java",
                            "focalName": "ValidationException",
                            "focalStartLn": 35,
                            "focalEndLn": 37,
                            "focalMethod": " public ValidationException ( final String s ) { \n super ( s ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "gvlasov",
            "repoName": "collections-utils",
            "subRepos": [],
            "commitSHA": "82f20efc8e53ea876896b779e35ed33633ec2e23",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CollectorsTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/CollectorsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "toImmutableSet",
                            "startLn": 11,
                            "endLn": 18,
                            "testMethod": "@Test\n public void toImmutableSet ( ) {\n     Assert.assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));\n}",
                            "oracle": "Assert.assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/Collectors.java",
                            "focalName": "toImmutableSet",
                            "focalStartLn": 11,
                            "focalEndLn": 13,
                            "focalMethod": " public static < T > Collector < T , ? , ImmutableSet < T > > toImmutableSet ( ) { \n return new ImmutableSetCollector < > ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "NalUnitTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCanWriteNalUnitFromValidNal",
                            "startLn": 24,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testCanWriteNalUnitFromValidNal ( ) {\n     byte [ ] data = new byte [ ] { \n ( byte ) 0x7C , ( byte ) 0x81 } ; \n     final NALUnit actual = NALUnit . read ( ByteBuffer . wrap ( data ) ) ; \n     assertEquals(\"STR\",3,actual.nal_ref_idc);\n}",
                            "oracle": "assertEquals(\"STR\",3,actual.nal_ref_idc);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnit.java",
                            "focalName": "read",
                            "focalStartLn": 23,
                            "focalEndLn": 30,
                            "focalMethod": " public static NALUnit read ( ByteBuffer _in ) { \n int nalu = _in . get ( ) & 0xff ; \n int nal_ref_idc = ( nalu > > 5 ) & 0x3 ; \n int nb = nalu & 0x1f ; \n NALUnitType type = NALUnitType . fromValue ( nb ) ; \n return new NALUnit ( type , nal_ref_idc ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ToJSONTest",
                    "classPath": "src/test/java/org/jcodec/common/tools/ToJSONTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCycle",
                            "startLn": 40,
                            "endLn": 53,
                            "testMethod": "@ Test ( timeout = 1000 ) public void testCycle ( ) {\n     Cl1 cl1 = new Cl1 ( ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     cl1 . addCl2 ( new Cl2 ( cl1 ) ) ; \n     Assert.assertEquals(\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\",ToJSON.toJSON(cl1));\n}",
                            "oracle": "Assert.assertEquals(\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\"+\"STR\",ToJSON.toJSON(cl1));",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/org/jcodec/common/tools/ToJSON.java",
                            "focalName": "toJSON",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " public static String toJSON ( Object obj ) { \n StringBuilder builder = new StringBuilder ( ) ; \n IntArrayList stack = IntArrayList . createIntArrayList ( ) ; \n toJSONSub ( obj , stack , builder ) ; \n return builder . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RegressionTest",
                    "classPath": "src/test/java/com/basistech/tclre/RegressionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testStockSymbol",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testStockSymbol ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}",
                            "oracle": "assertTrue(matcher.find());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "find",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": " boolean find ( ) ; \n"
                        },
                        {
                            "testName": "cannotFindSimpleDate",
                            "startLn": 82,
                            "endLn": 93,
                            "testMethod": "@Test\n public void cannotFindSimpleDate ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     matcher . reset ( new String ( \"STR\" . toCharArray ( ) , 0 , \"STR\" . length ( ) ) ) ; \n     matcher . region ( 0 , 8 ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trung",
            "repoName": "InMemoryJavaCompiler",
            "subRepos": [],
            "commitSHA": "d84c404975dc308ee5a418c5af8a6629c5e6c995",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InMemoryJavaCompilerTest",
                    "classPath": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "compile_WhenTypical",
                            "startLn": 19,
                            "endLn": 31,
                            "testMethod": "@Test\n public void compile_WhenTypical ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     Assert.assertNotNull(helloClass);\n}",
                            "oracle": "Assert.assertNotNull(helloClass);",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}