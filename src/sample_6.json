{
    "projects": [
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetTarget",
                            "startLn": 356,
                            "endLn": 370,
                            "testMethod": "@Test\n public void testSetTarget ( ) {\n     ArrayList < InteractionComponent > expected = new ArrayList < InteractionComponent > ( ) ; \n     InteractionComponent e = new InteractionComponent ( ) ; \n     String id = \"STR\" ; \n     e . setId ( id ) ; \n     HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n     desc . put ( \"STR\" , \"STR\" ) ; \n     e . setDescription ( desc ) ; \n     expected . add ( e ) ; \n     activityDefinition . setTarget ( expected ) ; \n     ArrayList < InteractionComponent > actual = activityDefinition . getTarget ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getTarget",
                            "focalStartLn": 184,
                            "focalEndLn": 186,
                            "focalMethod": " public ArrayList < InteractionComponent > getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRemoveDupeQueryParams",
                            "startLn": 117,
                            "endLn": 125,
                            "testMethod": "@Test\n public void testRemoveDupeQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testLowerCasing",
                            "startLn": 265,
                            "endLn": 281,
                            "testMethod": "@Test\n public void testLowerCasing ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( false , false ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String inputURL = \"STR\" ; \n     String expectedResult = inputURL . toLowerCase ( ) ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "phax",
            "repoName": "ph-genericode",
            "subRepos": [],
            "commitSHA": "5e28716fa68c642a6dec8011346229a00a6721e4",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExcelSheetToCodeList10Test",
                    "classPath": "src/test/java/com/helger/genericode/excel/ExcelSheetToCodeList10Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadExcel",
                            "startLn": 44,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testReadExcel ( ) throws URISyntaxException {\n     final IReadableResource aXls = new ClassPathResource ( \"STR\" ) ; \n     assertTrue(aXls.exists());\n}",
                            "oracle": "assertTrue(aXls.exists());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/helger/genericode/Genericode10CodeListMarshaller.java",
                            "focalName": "Genericode10CodeListMarshaller",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": " public Genericode10CodeListMarshaller ( ) { \n super ( CodeListDocument . class , CGenericode . GENERICODE_10_XSDS , o -> new ObjectFactory ( ) . createCodeList ( o ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CloseFrameTest",
                    "classPath": "src/test/java/org/java_websocket/framing/CloseFrameTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExtends",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testExtends ( ) {\n     CloseFrame frame = new CloseFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofControlFrame);\n}",
                            "oracle": "assertEquals(\"STR\",true,frameinstanceofControlFrame);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/framing/CloseFrame.java",
                            "focalName": "CloseFrame",
                            "focalStartLn": 168,
                            "focalEndLn": 172,
                            "focalMethod": " public CloseFrame ( ) { \n super ( Opcode . CLOSING ) ; \n setReason ( \"STR\" ) ; \n setCode ( CloseFrame . NORMAL ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProtocolTest",
                    "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProvidedProtocol",
                            "startLn": 66,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testGetProvidedProtocol ( ) throws Exception {\n     Protocol protocol0 = new Protocol ( \"STR\" ) ; \n     assertEquals(\"STR\",protocol0.getProvidedProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",protocol0.getProvidedProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/protocols/Protocol.java",
                            "focalName": "getProvidedProtocol",
                            "focalStartLn": 72,
                            "focalEndLn": 75,
                            "focalMethod": "@Override\n public String getProvidedProtocol ( ) { \n return this . providedProtocol ; \n } "
                        }
                    ]
                },
                {
                    "className": "HeadersTest",
                    "classPath": "src/test/java/org/java_websocket/client/HeadersTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "test_Add_RemoveHeaders",
                            "startLn": 72,
                            "endLn": 103,
                            "testMethod": "@Test\n public void test_Add_RemoveHeaders ( ) throws URISyntaxException {\n     Map < String , String > httpHeaders = null ; \n     WebSocketClient client = new WebSocketClient ( new URI ( \"STR\" ) , httpHeaders ) { \n @Override\n public void onOpen ( ServerHandshake handshakedata ) { \n } @Override\n public void onMessage ( String message ) { \n } @Override\n public void onClose ( int code , String reason , boolean remote ) { \n } @Override\n public void onError ( Exception ex ) { \n } } ; \n     client . addHeader ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",client.removeHeader(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",client.removeHeader(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/java_websocket/client/WebSocketClient.java",
                            "focalName": "removeHeader",
                            "focalStartLn": 284,
                            "focalEndLn": 289,
                            "focalMethod": " public String removeHeader ( String key ) { \n if ( headers == null ) { \n return null ; \n } return headers . remove ( key ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "gvlasov",
            "repoName": "collections-utils",
            "subRepos": [],
            "commitSHA": "82f20efc8e53ea876896b779e35ed33633ec2e23",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "IterableToStreamTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "iterableToStream",
                            "startLn": 9,
                            "endLn": 17,
                            "testMethod": "@Test\n public void iterableToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 10,
                            "focalEndLn": 18,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterable < T > iterable ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterable . iterator ( ) , Spliterator . ORDERED ) , false ) ; \n } "
                        },
                        {
                            "testName": "iteratorToStream",
                            "startLn": 19,
                            "endLn": 27,
                            "testMethod": "@Test\n public void iteratorToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 19,
                            "focalEndLn": 27,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterator < T > iterator ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator , Spliterator . ORDERED ) , false ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GZipIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "contentShouldNotBeGzippedIfContentLengthIsAddedManually",
                            "startLn": 152,
                            "endLn": 163,
                            "testMethod": "@Test\n public void contentShouldNotBeGzippedIfContentLengthIsAddedManually ( ) throws IOException {\n     testServer . response = Response . newFixedLengthResponse ( \"STR\" ) ; \n     testServer . response . addHeader ( \"STR\" , \"STR\" + ( \"STR\" . getBytes ( \"STR\" ) . length ) ) ; \n     HttpGet request = new HttpGet ( \"STR\" ) ; \n     request . addHeader ( \"STR\" , \"STR\" ) ; \n     HttpResponse response = httpclient . execute ( request ) ; \n     Header contentEncoding = response . getFirstHeader ( \"STR\" ) ; \n     assertNull(\"STR\",contentEncoding);\n}",
                            "oracle": "assertNull(\"STR\",contentEncoding);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "addHeader",
                            "focalStartLn": 175,
                            "focalEndLn": 177,
                            "focalMethod": " public void addHeader ( String name , String value ) { \n this . header . put ( name , value ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JavaCompilerOptionsTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSource",
                            "startLn": 55,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testSource ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     jco . setSource ( \"STR\" ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(3,result.size());\n}",
                            "oracle": "assertEquals(3,result.size());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java",
                            "focalName": "getOptions",
                            "focalStartLn": 51,
                            "focalEndLn": 60,
                            "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddNounsToDictionary",
                            "startLn": 70,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testAddNounsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "addNounsToDictionary",
                            "focalStartLn": 66,
                            "focalEndLn": 68,
                            "focalMethod": " public static void addNounsToDictionary ( List < String > words ) { \n OpenKoreanTextProcessor . addNounsToDictionary ( JavaConverters . asScalaBufferConverter ( words ) . asScala ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LifeCycleTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/LifeCycleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAvailabilityCheck",
                            "startLn": 33,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testAvailabilityCheck ( ) {\n     Assert.assertTrue(testFunctionAvailable(false));\n}",
                            "oracle": "Assert.assertTrue(testFunctionAvailable(false));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "shutdown",
                            "focalStartLn": 99,
                            "focalEndLn": 118,
                            "focalMethod": "@Override\n public void shutdown ( ) { \n super . shutdown ( ) ; \n this . connectionManager . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n this . taskScanner . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n if ( reconnectManager != null ) { \n reconnectManager . shutdown ( ) ; \n } if ( connectionMonitor != null ) { \n connectionMonitor . shutdown ( ) ; \n } for ( UserProcessor < ? > userProcessor : userProcessors . values ( ) ) { \n if ( userProcessor . isStarted ( ) ) { \n userProcessor . shutdown ( ) ; \n } } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rhwayfun",
            "repoName": "spring-boot-rocketmq-starter",
            "subRepos": [],
            "commitSHA": "642a6745434e3f7ea2e6bca42d3b8f450590441c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RocketMqAutoConfigurationTest",
                    "classPath": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "defaultRocketMqProducer",
                            "startLn": 40,
                            "endLn": 54,
                            "testMethod": "@Test\n public void defaultRocketMqProducer ( ) {\n     load ( \"STR\" + TEST_NAME_SERVER , \"STR\" + TEST_PRODUCER_GROUP ) ; \n     Assert.assertTrue(this.context.containsBean(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(this.context.containsBean(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/github/rhwayfun/springboot/rocketmq/starter/common/DefaultRocketMqProducer.java",
                            "focalName": "getProducer",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " public DefaultMQProducer getProducer ( ) { \n return producer ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}