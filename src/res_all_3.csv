TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	adlnet/jxapi	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	22.85475730895996	0	1	1	0	0
	1	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(activity);	35.325201988220215	0	1	1	0	0
	2	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(actual);	21.198627710342407	1	0	1	0	0
	3	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	42.67148208618164	0	1	1	0	0
	4	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	24.926499843597412	0	1	1	0	0
	5	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	32.7631938457489	0	1	1	0	0
	6	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(actual);	29.889679670333862	1	0	1	0	0
	7	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(actual);	25.27488422393799	1	0	1	0	0
	8	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	33.92422604560852	0	1	1	0	0
	9	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(actual);	32.95172715187073	1	0	1	0	0
	10	/	ActivityTest	testGetId	assertNotNull(actual);	"assertEquals(""STR"",activity.getId());"	20.701622009277344	0	1	1	0	0
	11	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	18.02148985862732	0	1	1	0	0
	13	/	ActivityTest	testGetId	assertNotNull(actual);	"assertTrue(""STR"");"	30.050445079803467	0	1	1	0	0
	14	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(activity);	30.558198928833008	0	1	1	0	0
	15	/	ActivityTest	testGetId	assertNotNull(actual);	"assertNotNull(""STR"");"	37.31611895561218	0	1	1	0	0
	16	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	29.039762258529663	0	1	1	0	0
	18	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(condition);	18.02175998687744	0	1	1	0	0
	19	/	ActivityTest	testGetId	assertNotNull(actual);	assertNotNull(activity);	31.350808143615723	0	1	1	0	0
	20	/	ActivityTest	testGetId	assertNotNull(actual);	"assertEquals(""STR"",activity.getId());"	26.607932806015015	0	1	1	0	0
	21	/	ActivityTest	testGetId	assertNotNull(actual);	"assertEquals(""STR"",""STR"");"	21.282938957214355	0	1	1	0	0
	22	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	66.39051604270935	0	1	1	0	0
	23	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,activity.getId());	26.95545220375061	0	1	1	0	0
	24	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,activity.getId());	28.939985036849976	0	1	1	0	0
	25	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(activity.getId()!=null&&!activity.getId().trim().isEmpty());	22.99431085586548	0	1	1	0	0
	26	/	ActivityTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	50.009105920791626	0	1	1	0	0
	27	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(condition));	17.630744695663452	0	1	1	0	0
	28	/	ActivityTest	testGetId	assertNotNull(actual);	assertTrue(SqlUtilities.AppFieldTable(FifthEntityGenderConstraints.oracleVersSignFlightDbResult,);	49.24284911155701	0	1	1	0	0
1	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	25.201797246932983	0	1	1	0	0
	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId()));	27.560019969940186	0	1	1	0	0
	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	21.68201971054077	0	1	1	0	0
	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue()`statement.Nevertheless,tomodifythestatementasperyourrequirement,youmayrequiretoclarifytheintentofthetest.WhatspecificAssertion(s));	23.854918003082275	0	1	1	0	0
	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(statementRef.getId()!=null);	22.643719911575317	0	1	1	0	0
	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	50.0601749420166	0	1	1	0	0
	6	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals()`withString:);	43.31265091896057	0	1	1	0	0
	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	21.14943814277649	0	1	1	0	0
	8	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(null,statementRef.getId());	24.62743592262268	0	1	1	0	0
	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(expectedId,statementRef.getId());	21.607074737548828	0	1	1	0	0
	10	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertions(&perhapsgreatergranularity/loggingofcode-logic-branch));	34.919037103652954	0	1	1	0	0
	11	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	24.88361120223999	0	1	1	0	0
	12	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	32.05351519584656	0	1	1	0	0
	13	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertThat(statementRef.getId(),anyOf(CoreMatchers.containsString(id)));	39.7656409740448	0	1	1	0	0
	14	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,geStatementClientne());	40.14874887466431	0	1	1	0	0
	15	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(expectedString,actualString);	24.244922161102295	0	1	1	0	0
	16	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId()/**AssumeprivateIDisset*/);	30.144524097442627	0	1	1	0	0
	17	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	26.629303216934204	0	1	1	0	0
	18	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	24.627803087234497	0	1	1	0	0
	19	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	26.108123064041138	0	1	1	0	0
	20	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	23.956228971481323	0	1	1	0	0
	21	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	46.24956178665161	0	1	1	0	0
	22	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getId()));	24.330931901931763	0	1	1	0	0
	23	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	"assertTrue(""STR"");"	31.12852668762207	0	1	1	0	0
	24	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(YOURCLASS'SMETHODIMPLEMENTATION.calledBool.Equals(expected_expect_fail))'.Exampleabo25fff.`supervisorPayRemain.nextBarLoan(10100)==500000);	34.89432883262634	0	1	1	0	0
	25	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(statementRefinstanceofStatementReference);	25.78511381149292	0	1	1	0	0
	26	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	40.37777376174927	0	1	1	0	0
	27	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId().trim());	16.268558025360107	0	1	1	0	0
	28	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	20.024625062942505	0	1	1	0	0
	29	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	82.40225100517273	1	0	1	0	0
2	0	adlnet/jxapi	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	25.55193591117859	1	0	1	0	0
	1	/	AccountTest	testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	30.329547882080078	0	1	1	0	0
	2	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account!=null&&accountinstanceofAccount);	32.22460389137268	0	1	1	0	0
	3	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getHomepage());	24.793739080429077	0	1	1	0	0
	4	/	AccountTest	testAccount	assertNotNull(account);	assertEquals(null,account.getName());	30.50724506378174	0	1	1	0	0
	5	/	AccountTest	testAccount	assertNotNull(account);	assertEquals(expectedHomepage,account.getHomepage());	24.603047132492065	0	1	1	0	0
	6	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getName());	32.126829862594604	0	1	1	0	0
	7	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	24.825801849365234	1	0	1	0	0
	8	/	AccountTest	testAccount	assertNotNull(account);	assertEquals()`method:);	32.668673038482666	0	1	1	0	0
	9	/	AccountTest	testAccount	assertNotNull(account);	assertThat(account,org.hamcrest.CoreMatchers.instanceOf(Account.class));	357.2052960395813	0	1	1	0	0
	10	/	AccountTest	testAccount	assertNotNull(account);	assertNull(account.getCountry());	27.399495840072632	0	1	1	0	0
	11	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	84.40190720558167	1	0	1	0	0
	12	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getName());	24.329220056533813	0	1	1	0	0
	13	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account.getName()==null||account.getName().isEmpty());	20.078449964523315	0	1	1	0	0
	14	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(EqualsBuilder.reflectionEquals(account,newGson().fromJson(newGson().toJson(account),Account.class)));	28.064125061035156	0	1	1	0	0
	15	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	202.53462290763855	1	0	1	0	0
	16	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account.getName()!=null&&!account.getName().isEmpty());	30.94887089729309	0	1	1	0	0
	17	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getName());	21.939098119735718	0	1	1	0	0
	18	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account.equals(newAccount()));	19.944090843200684	0	1	1	0	0
	19	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	25.952094078063965	1	0	1	0	0
	20	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account.getName().equals(expectedName));	28.421363830566406	0	1	1	0	0
	21	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getHomepage());	28.571090936660767	0	1	1	0	0
	22	/	AccountTest	testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	23.434072971343994	0	1	1	0	0
	23	/	AccountTest	testAccount	assertNotNull(account);	assertEquals(expectedName,account.getName());	20.284466981887817	0	1	1	0	0
	24	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	27.070730924606323	1	0	1	0	0
	25	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account);	24.755990982055664	1	0	1	0	0
	26	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(account.equals(newAccount()));	81.5359890460968	0	1	1	0	0
	27	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getName());	28.836472988128662	0	1	1	0	0
	28	/	AccountTest	testAccount	assertNotNull(account);	assertTrue(accountinstanceofAccount);	23.462822914123535	0	1	1	0	0
	29	/	AccountTest	testAccount	assertNotNull(account);	assertNotNull(account.getName());	24.02787208557129	0	1	1	0	0
3	0	adlnet/jxapi	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	"assertEquals(expected.getJSONArray(EMAIL_MBOX_PROPERTY),""STR"");"	23.078489065170288	0	1	1	0	0
	1	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	30.208096027374268	1	0	1	0	0
	2	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals()`asbelow:);	38.74992895126343	0	1	1	0	0
	3	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	31.053161144256592	1	0	1	0	0
	4	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	"assertBoolean(){);"	31.33599090576172	0	1	1	0	0
	5	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	25.401357173919678	1	0	1	0	0
	6	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	40.87233209609985	1	0	1	0	0
	7	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(newString[]{MBOX[0]},person.getMbox());	27.571168184280396	0	1	1	0	0
	8	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actualArray);	39.31815004348755	0	1	1	0	0
	9	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(person.getMbox());	27.802582025527954	0	1	1	0	0
	10	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	26.866108894348145	1	0	1	0	0
	11	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	24.547789096832275	1	0	1	0	0
	12	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(actual);	27.572373151779175	0	1	1	0	0
	13	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(actual);	43.742786169052124	0	1	1	0	0
	14	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	28.570415258407593	1	0	1	0	0
	15	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(querySetter);	51.462785720825195	0	1	1	0	0
	16	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	29.673829317092896	1	0	1	0	0
	17	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	28.50152015686035	1	0	1	0	0
	18	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertTrue(Arrays.equals(expected,person.getMbox()));	29.646223783493042	0	1	1	0	0
	19	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(MBOX,person.getMbox());	28.680785179138184	0	1	1	0	0
	20	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(expected,actual);	20.658435821533203	1	0	1	0	0
	21	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals()`statement,sincethereisnoreferenceto`javax.xml.bind`packageprovidedintheoriginalcodethatyousharedearlier,Ibelieveitshouldworkifyourmentionedthatboththe`MBOX`and`actual`arraysbeequaltoeachotherbyinsteadusing`MBOX,actual));	25.30526614189148	0	1	1	0	0
	22	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(MBOX,person.getMbox());	22.02590298652649	0	1	1	0	0
	23	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertThat(person.getMbox(),equalTo(expected));	362.5301151275635	0	1	1	0	0
	24	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals```(expected,actual,expected.toList+mismatchPackageAdda(setupwith(requireLibImports(MBOX[javaxboundextrasfollowsetTypeImports]])));	44.85344409942627	0	1	1	0	0
	25	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertNotNull(person.getMbox());	26.064539194107056	0	1	1	0	0
	26	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertSame(MBOX,person.getMbox());	26.67074489593506	0	1	1	0	0
	27	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertArrayEquals(MBOX,person.getMbox());	19.114707231521606	0	1	1	0	0
	28	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertThat(actual,is(expected));	21.540974140167236	0	1	1	0	0
	29	/	PersonTest	testGetMbox	assertArrayEquals(expected,actual);	assertThat(Arrays.toString(person.getMbox()),Arrays.equals(MBOX,person.getMbox()),is(true));	20.683479070663452	0	1	1	0	0
0	0	amlinv/stat-collection-utils	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(mockLogger);	3.2731740474700928	0	1	1	0	0
	1	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockLogger,jolokiaConnection.getLogger());	5.506360769271851	0	1	1	0	0
	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	"assertEquals(""STR"",att1);"	2.863266944885254	0	1	1	0	0
	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(mockJ4pReadResponse1.getObjectNames().size()==1);	3.4122560024261475	0	1	1	0	0
	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	"assertFalse(""STR"");"	4.464040994644165	0	1	1	0	0
	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockJ4pClient,jolokiaConnection.getClient());	5.366586923599243	0	1	1	0	0
	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(value1,value2);	3.644045114517212	0	1	1	0	0
	7	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(mockJ4pReadResponse1.getValue(att4).contains(value3));	4.626706838607788	0	1	1	0	0
	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(mockJ4pSearchResponse.getObjectNameList().size()>0);	3.792369842529297	0	1	1	0	0
	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(mockJ4pReadResponse1.getValue(att1).isEmpty()));	4.444995164871216	0	1	1	0	0
1	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(this.testAttributeList,result);	3.1271796226501465	0	1	1	0	0
	1	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(this.testAttributeList.containsAll(result));	5.005066871643066	0	1	1	0	0
	2	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotNull(result);	3.477733850479126	0	1	1	0	0
	3	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertFalse(result.isEmpty());	54.94411897659302	0	1	1	0	0
	4	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(result.size()<=this.testAttributeList.size());	6.001105070114136	0	1	1	0	0
	5	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(this.testAttributeList.containsAll(result)&&result.containsAll(this.testAttributeList));	4.34567403793335	0	1	1	0	0
	6	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertArrayEquals(this.testAttributeList.toArray(),result.toArray());	4.764627933502197	0	1	1	0	0
	7	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertEquals(this.testAttributeList.size(),result.size());	3.5783169269561768	0	1	1	0	0
	8	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertNotEquals(this.testAttributeList,result);	4.405110120773315	0	1	1	0	0
	9	/	JMXMBeanConnectionTest	testGetAttributes	assertSame(this.testAttributeList,result);	assertTrue(result.stream().allMatch(attr->this.testAttributeList.stream().anyMatch(testAttr->testAttr.getName().equals(attr.getName()))));	4.790679931640625	0	1	1	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,result.size());	11.297250032424927	0	1	1	0	0
	1	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,result.size()`:);	13.354447841644287	0	1	1	0	0
	2	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(""STR"");"	11.534669160842896	0	1	1	0	0
	3	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(""STR"");"	11.34329867362976	0	1	1	0	0
	4	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(""STR"");"	10.677373886108398	0	1	1	0	0
	5	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertEquals(""STR"",""STR"");"	12.190414667129517	0	1	1	0	0
	6	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(""STR"");"	11.36489486694336	0	1	1	0	0
	7	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertNull(""STR"");"	13.905986070632935	0	1	1	0	0
	9	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(0,result.size());	11.185593128204346	0	1	1	0	0
	10	/	EnvFilterTest	filters_and_sorts_keys	assertEquals(expectedEnv,envFilter.filter(env));	"assertTrue(""STR"");"	11.2225022315979	0	1	1	0	0
0	0	nidi3/graphviz-java	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertEquals(""STR"",""STR"");"	25.082540035247803	0	1	1	0	0
	1	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertTrue(""STR"");"	24.84928297996521	0	1	1	0	0
	2	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotSame(expected,options);	22.75602698326111	0	1	1	0	0
	3	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertNotNull(""STR"");"	23.39808177947998	0	1	1	0	0
	4	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertFalse(options.images());	21.666462898254395	0	1	1	0	0
	5	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertEquals(expected.totalMemory(),options.totalMemory()`isanotherplausibleexpected.totalMemory());	24.14258313179016	0	1	1	0	0
	6	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertTrue(""STR"");"	23.044913053512573	0	1	1	0	0
	7	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertNotSame(""STR"",""STR"");"	23.66741681098938	0	1	1	0	0
	8	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	"assertTrue(""STR"");"	24.189047813415527	0	1	1	0	0
	9	/	OptionsTest	fromJsonNoImage	assertEquals(expected,options);	assertNotEquals(expected.yInvert(),options.yInvert());	23.661890983581543	0	1	1	0	0
