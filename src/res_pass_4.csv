TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(1, keyIndexDefinition.getParamCount());	39.54112672805786	0	1	0	0	0
	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount() > 0);	41.17504596710205	0	1	0	0	0
	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyIndexDefinition);	37.74953293800354	0	1	0	0	0
	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0, keyIndexDefinition.getParamCount());	35.066173791885376	0	1	0	0	0
	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount() == 0);	35.90425491333008	0	1	0	0	0
	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(null, keyIndexDefinition);	38.18947672843933	0	1	0	0	0
	8	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition instanceof OSimpleKeyIndexDefinition);	45.61625003814697	0	1	0	0	0
	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(2, keyIndexDefinition.getParamCount());	40.488080978393555	0	1	0	0	0
	15	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(keyIndexDefinition.getParamCount() >= 1);	33.28660607337952	0	1	0	0	0
	18	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(keyIndexDefinition.getParamCount() == 0);	37.288328886032104	0	1	0	0	0
	4	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(buffer);	43.203263998031616	0	1	0	0	0
	7	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.remaining() == size);	85.81291317939758	0	1	0	0	0
	10	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size, buffer.limit() - buffer.position());	35.77502799034119	0	1	0	0	0
	11	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertFalse(buffer.isReadOnly());	34.921730756759644	0	1	0	0	0
	14	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(linkSerializer.deserializeFromByteBufferObject(buffer).equals(rid));	38.50431990623474	0	1	0	0	0
	16	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size, linkSerializer.getObjectSize(linkSerializer.deserializeFromByteBufferObject(buffer)));	38.02045178413391	0	1	0	0	0
	17	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(IllegalArgumentException.class, () -> {);	77.05837106704712	0	1	0	0	0
	20	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertThrows(IllegalStateException.class, () -> {);	35.634344816207886	0	1	0	0	0
	28	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size + 1, buffer.limit());	75.49296402931213	0	1	0	0	0
	29	/	CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer.deserializeFromByteBufferObject(buffer));	33.899824142456055	0	1	0	0	0
	2	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(mapResult != null);	36.75169396400452	0	1	0	0	0
	3	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotSame(null, mapResult);	33.11961507797241	0	1	0	0	0
	4	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotNull(mapResult);	32.78666019439697	1	0	0	0	0
	8	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertFalse(mapResult == null);	32.427337884902954	0	1	0	0	0
	10	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertSame(null, null);	33.38229489326477	0	1	0	0	0
	13	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertNotEquals(null, mapResult);	33.13658404350281	0	1	0	0	0
	14	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertEquals(null, null);	33.021260023117065	0	1	0	0	0
	15	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.equals(anotherMultiKey));	33.21166801452637	0	1	0	0	0
	16	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertFalse(multiKey == anotherMultiKey);	32.9333918094635	0	1	0	0	0
	17	/	OMultiKeyTest	testTwoKeyMap	assertNotNull(mapResult);	assertEquals(1, multiKeyMap.size());	32.85558295249939	0	1	0	0	0
	6	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertFalse(file.isDirectory());	10.19311785697937	0	1	0	0	0
	12	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(file);	9.588459968566895	0	1	0	0	0
	14	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertFalse(file.isDirectory());	9.849049806594849	0	1	0	0	0
	18	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(file.isFile());	9.778267860412598	0	1	0	0	0
	20	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertFalse(file.isDirectory());	9.356868743896484	0	1	0	0	0
	21	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertNotNull(file.getName());	9.580552816390991	0	1	0	0	0
	22	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(job!=null);	48.299707889556885	0	1	0	0	0
	25	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(file.exists());	9.906458139419556	0	1	0	0	0
	27	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(folder.getRoot().canWrite());	10.085483074188232	0	1	0	0	0
	28	/	JsonWriterTest	testGetCoverallsFile	assertSame(file,newJsonWriter(job,file).getCoverallsFile());	assertTrue(Arrays.asList(file.getParentFile().listFiles()).contains(file));	11.716965913772583	0	1	0	0	0
0	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertEquals(""STR"", two.getString(""STR""));"	18.149494171142578	0	0	1	0	0
	2	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertNotNull(two.getString(""STR""));"	13.97152829170227	0	0	1	0	0
	5	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertNotEquals(""STR"", two.getString(""STR""));"	11.647532939910889	0	0	1	0	0
	11	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertNotSame(""STR"", two.getString(""STR""));"	10.899304389953613	0	0	1	0	0
	12	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertTrue(two.getString(""STR"").startsWith(""STR""));"	11.06811809539795	0	0	1	0	0
	13	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertFalse(two.getString(""STR"").isEmpty());"	10.975601196289062	0	0	1	0	0
	14	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertSame(""STR"", two.getString(""STR""));"	11.115662097930908	0	0	1	0	0
	15	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertTrue(two.getString(""STR"").contains(""STR""));"	11.229887962341309	0	0	1	0	0
	17	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertNull(two.getString(""STR""));"	10.659281730651855	0	0	1	0	0
	20	/	ConfigTest	gets_deep_value	"assertEquals(""STR"",root.getString(""STR""));"	"assertFalse(two.getString(""STR"").endsWith(""STR""));"	10.931138038635254	0	0	1	0	0
1	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	9.144628047943115	0	1	0	0	0
	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas != null && !formas.isEmpty());	26.38542914390564	0	1	0	0	0
	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertSame(formas.getClass(), ArrayList.class);	9.977943658828735	0	1	0	0	0
	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0, formas.size());	60.55644512176514	0	1	0	0	0
	7	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas == null);	9.721659898757935	0	1	0	0	0
	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	9.673852920532227	0	1	0	0	0
	12	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size() > 0);	9.763967037200928	0	1	0	0	0
	21	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0, formas.size());	9.656238794326782	0	1	0	0	0
	23	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	9.727514028549194	0	1	0	0	0
	26	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	9.628394842147827	0	1	0	0	0
	6	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum);	12.872132062911987	0	1	0	0	0
	7	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(null, stum);	9.786640882492065	0	1	0	0	0
	13	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(null, stum);	9.724923133850098	0	1	0	0	0
	16	/	MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(locītājs);	9.591945886611938	0	1	0	0	0
0	0	redraiment/jactiverecord	TSqlBuilderTest	testDelete	"assertEquals(""STR"",sql.delete().from(""STR"").toString());"		6.041108846664429	0	0	1	0	0
0	0	AlejandroRivera/embedded-rabbitmq	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertNotNull(processExecutor);	12.42191481590271	0	0	1	0	0
	8	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertThrows(expectedException.class, () -> { // some code });	12.864324808120728	0	0	1	0	0
	9	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertTrue(true);	21.433450937271118	0	0	1	0	0
	10	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertFalse(false` as it is equivalent to `true);	13.691225051879883	0	0	1	0	0
	26	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertNotNull(osCaptor.getValue());	31.26559805870056	0	0	1	0	0
	28	/	RabbitMqCommandTest	errorLoggingLevelDefaultsToWarn	assertThat(os,instanceOf(Slf4jWarnOutputStream.class));	assertThrows(RabbitMqCommandException.class, new Executable() {);	22.13833999633789	0	0	1	0	0
0	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(mockAttributeInjector, processor.getAttributeInjector());	7.221962928771973	0	0	1	0	0
	1	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	5.1369469165802	0	0	1	0	0
	2	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector() instanceof AttributeInjector);	3.6200380325317383	0	0	1	0	0
	3	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(mockAttributeInjector, processor.getAttributeInjector());	3.398862838745117	0	0	1	0	0
	4	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(mockObjectQueryPreparer, processor.getAttributeInjector());	4.2227208614349365	0	0	1	0	0
	5	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertFalse(processor.getAttributeInjector() == null);	3.5096399784088135	0	0	1	0	0
	6	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotEquals(mockObjectQueryPreparer, processor.getAttributeInjector());	3.7741568088531494	0	0	1	0	0
	7	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	"assertArrayEquals(new HashSet<>(Arrays.asList(""STR"",""STR"")).toArray(), attributeNames001.toArray());"	4.414237022399902	0	0	1	0	0
	8	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(mockObjectQueryInfo001.getTarget(), polled001);	3.7224128246307373	0	0	1	0	0
	9	/	BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(mockObjectQueryInfo001.getObjectName(), objectName001);	3.7193338871002197	0	0	1	0	0
1	0	amlinv/stat-collection-utils	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertEquals(testQueryResult, result);	3.6880178451538086	0	0	1	0	0
	1	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotNull(result);	3.9815011024475098	0	0	1	0	0
	2	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertTrue(result.contains(objectName));	3.2359488010406494	0	0	1	0	0
	3	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertFalse(result.isEmpty());	2.9919040203094482	0	0	1	0	0
	4	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotEquals(null, result);	3.228898048400879	0	0	1	0	0
	5	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertSame(this.mockMBeanServerConnection, this.connection.getMBeanServerConnection());	4.01906681060791	0	0	1	0	0
	6	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotSame(this.mockJmxConnector, this.connection.getJmxConnector());	4.208298921585083	0	0	1	0	0
	7	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	"assertArrayEquals(new String[]{""STR""}, this.mockMBeanServerConnection.getAttributes(this.objectName, new String[]{""STR""}).getAttributeNames());"	4.849895238876343	0	0	1	0	0
	8	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	assertNotEquals(0, result.size());	3.4101650714874268	0	0	1	0	0
	9	/	JMXMBeanConnectionTest	testQueryNames	assertSame(this.testQueryResult,result);	"assertThrows(IOException.class, () -> {this.connection.queryNames(new ObjectName(""invalidPattern""), null});"	4.400619029998779	0	0	1	0	0
0	0	ExpediaGroup/beeju	BeejuCoreTest	initialisedDbNameAndHiveConfConstructor	"assertThat(dbNameAndHiveConfCore.databaseName(),is(""STR""));"		10.087877035140991	0	0	1	0	0
0	0	mikolajmitura/java-properties-to-json	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObject instanceof AbstractJsonType);	18.862081050872803	0	0	1	0	0
	1	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertEquals(expectedJsonValue, jsonObject.toString());	19.333763122558594	0	0	1	0	0
	2	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotNull(jsonObject);	17.355641841888428	0	0	1	0	0
	3	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertFalse(jsonObject.isEmpty());	16.959272861480713	0	0	1	0	0
	4	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotEquals(notExpectedJsonValue, jsonObject.toString());	17.734097003936768	0	0	1	0	0
	5	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertSame(expectedObject, jsonObject);	17.193650245666504	0	0	1	0	0
	6	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotSame(notExpectedObject, jsonObject);	17.504223108291626	0	0	1	0	0
	7	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertTrue(jsonObject.equals(jsonObject)  // This is equivalent to jsonObject);	18.440171003341675	0	0	1	0	0
	9	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	assertNotEquals(notExpectedObject, jsonObject);	17.53676700592041	0	0	1	0	0
	10	/	LocalDateToJsonTypeConverterTest	convertLocalDateToJsonObject	assertThat(jsonObject).isNotNull();	"assertNull(jsonObject.get(""non-existing-key""));"	18.07754921913147	0	0	1	0	0
0	0	basis-technology-corp/tcl-regex-java	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		14.006605863571167	0	1	0	0	0
	2	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		15.891454935073853	0	1	0	0	0
	3	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		16.429550886154175	0	1	0	0	0
	6	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		13.204508781433105	0	1	0	0	0
	7	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		15.344353199005127	0	1	0	0	0
	8	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		12.955074071884155	0	1	0	0	0
	9	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"		13.3058180809021	0	1	0	0	0
	12	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotEquals(exp, HsrePattern.compile(""STR"", PatternFlags.ADVANCED));"	15.479934930801392	0	1	0	0	0
	13	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertThat(HsrePattern.compile(""STR"", PatternFlags.ADVANCED), is(not(equalTo(exp))));"	15.708879709243774	0	1	0	0	0
	14	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotSame(exp, HsrePattern.compile(""STR"", PatternFlags.ADVANCED));"	10.926119804382324	0	1	0	0	0
	17	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertFalse(exp.matcher(""STR"").matches());"	10.012381076812744	0	1	0	0	0
	18	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotSame(exp.matcher(""STR""), HsrePattern.compile(""STR"", PatternFlags.ADVANCED).matcher(""STR""));"	12.479598999023438	0	1	0	0	0
	23	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotSame(exp.hashCode(), HsrePattern.compile(""STR"", PatternFlags.ADVANCED).hashCode());"	11.267586946487427	0	1	0	0	0
	26	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertNotNull(HsrePattern.compile(""STR"", PatternFlags.ADVANCED));"	10.66901183128357	0	1	0	0	0
	28	/	SimpleTest	testNullQuant	"assertThat(""STR"",matches(exp));"	"assertSame(exp.getClass(), HsrePattern.compile(""STR"", PatternFlags.ADVANCED).getClass());"	11.047451257705688	0	1	0	0	0
	3	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"		16.793212890625	0	1	0	0	0
	27	/	TextExtractorTest	testMainContent	"assertEquals(""STR"",text);"		16.947356939315796	0	1	0	0	0
