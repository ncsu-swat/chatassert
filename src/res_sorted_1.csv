TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Correct	Sorted	Time
0	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	0	1	26.032963752746582
0	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.keySet().containsAll(multiValueChangeEvent.getValues()));	0	1	26.032963752746582
0	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1	1	26.032963752746582
0	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.keySet().containsAll(multiValueChangeEvent.getOldValues()));	0	1	26.032963752746582
0	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	0	1	26.032963752746582
0	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(41));	0	1	26.032963752746582
0	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,removedKeys.size());	0	1	26.032963752746582
0	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.containsKey(42));	0	1	26.032963752746582
0	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.containsKey(null));	0	1	26.032963752746582
0	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(null));	0	1	26.032963752746582
1	0	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(lock);	0	1	25.495441198349
1	1	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.isLocked(null));	0	1	25.495441198349
1	2	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(1,manager.getLockCount());	0	1	25.495441198349
1	3	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.tryAcquireExclusiveLock(null,10L,TimeUnit.MILLISECONDS));	0	1	25.495441198349
1	4	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.releaseLock(null));	0	1	25.495441198349
1	5	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0,manager.getLockCount());	0	1	25.495441198349
1	6	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0,wrapper(lock).getLockCount());	0	1	25.495441198349
1	7	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	"assertNotSame(lock,""STR"");"	0	1	25.495441198349
1	8	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(2,wrapper(lock).getLockCount());	1	1	25.495441198349
1	9	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNull(manager.acquireSharedLock(null));	0	1	25.495441198349
2	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(26,qResult.size());	0	1	26.61609387397766
2	1	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult2);	0	1	26.61609387397766
2	2	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult3);	0	1	26.61609387397766
2	3	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(26,qResult4.size());	0	1	26.61609387397766
2	4	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(22,qResult5.size());	0	1	26.61609387397766
2	5	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(!qResult.isEmpty());	0	1	26.61609387397766
2	6	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(!qResult2.isEmpty());	0	1	26.61609387397766
2	7	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertTrue(!qResult3.isEmpty());	0	1	26.61609387397766
2	8	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertFalse(qResult4.isEmpty());	0	1	26.61609387397766
2	9	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertFalse(qResult5.isEmpty());	0	1	26.61609387397766
3	0	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(configurator);	0	1	26.001677989959717
3	1	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(proc);	0	1	26.001677989959717
3	2	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(proc.getLoader());	0	1	26.001677989959717
3	3	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertNotNull(""STR"");"	0	1	26.001677989959717
3	4	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(db);	0	1	26.001677989959717
3	5	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(db.getMetadata());	0	1	26.001677989959717
3	6	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertThat(res.size()).isEqualTo(1);	1	1	26.001677989959717
3	7	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotEquals(0,res.size());	0	1	26.001677989959717
3	8	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertNotSame(""STR"",res.get(0),res.get(1));"	0	1	26.001677989959717
3	9	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	"assertNotEquals(""STR"",name.getMethodName());"	0	1	26.001677989959717
4	0	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(g);	0	1	27.535317182540894
4	1	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(ginstanceofOrientBaseGraph);	0	1	27.535317182540894
4	2	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(g.isClosed());	0	1	27.535317182540894
4	3	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	"assertEquals(""STR"",g.getRawGraph().getURL());"	0	1	27.535317182540894
4	4	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotEquals(null,g.getRawGraph().getUnderlying());	0	1	27.535317182540894
4	5	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getRawGraph().isInMemory());	0	1	27.535317182540894
4	6	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getRawGraph().exists());	0	1	27.535317182540894
4	7	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(g.getRawGraph().getClasses().isEmpty());	0	1	27.535317182540894
4	8	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(10,g.getRawGraph().getClusters());	0	1	27.535317182540894
4	9	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(10,g.getRawGraph().getMetadata().getSchema().getClasses().size());	0	1	27.535317182540894
5	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1	1	24.669410705566406
5	1	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0	1	24.669410705566406
5	2	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertEquals(""STR"");"	0	1	24.669410705566406
5	3	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertEquals(""STR"",""STR"");"	0	1	24.669410705566406
5	4	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0	1	24.669410705566406
5	5	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(configurator);	0	1	24.669410705566406
5	6	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc);	0	1	24.669410705566406
5	7	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc.getContext());	0	1	24.669410705566406
5	8	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc.getConfig());	0	1	24.669410705566406
5	9	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc.getStats());	0	1	24.669410705566406
6	0	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,db.getMetadata().getSchema().getClasses().size());	0	1	38.29209017753601
6	1	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(db.exists(doc.getIdentity()));	0	1	38.29209017753601
6	2	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertTrue(db.checkRecord(doc1.getIdentity()));	0	1	38.29209017753601
6	3	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(""STR"",doc.getSchemaClass().getName());"	0	1	38.29209017753601
6	4	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(doc,db.load(doc));	0	1	38.29209017753601
6	5	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(db);	0	1	38.29209017753601
6	6	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(db.isClosed());	0	1	38.29209017753601
6	7	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(1,res.size());	0	1	38.29209017753601
6	8	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertFalse(doc.isDirty());	0	1	38.29209017753601
6	9	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotEquals(0,doc.getVersion());	0	1	38.29209017753601
7	0	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	1	1	43.40687704086304
7	1	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(true);	0	1	43.40687704086304
7	2	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertFalse(false);	0	1	43.40687704086304
7	3	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	"assertEquals(""STR"",""STR"");"	0	1	43.40687704086304
7	4	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotEquals(5,10);	0	1	43.40687704086304
7	5	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNull(null);	0	1	43.40687704086304
7	6	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(newObject());	0	1	43.40687704086304
7	7	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertSame(expectedObject,actualObject);	0	1	43.40687704086304
7	8	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotSame(expectedObject,actualObject);	0	1	43.40687704086304
7	9	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertArrayEquals(expectedArray,actualArray);	0	1	43.40687704086304
8	0	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(execute.size()>0);	0	1	24.064021110534668
8	1	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(execute.size(),1);	1	1	24.064021110534668
8	2	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(condition&&otherCondition);	0	1	24.064021110534668
8	3	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotNull(object);	0	1	24.064021110534668
8	4	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotNull(context);	0	1	24.064021110534668
8	5	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(Arrays.equals(expectedArray,actualArray));	0	1	24.064021110534668
8	6	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(8,db.getClusters());	0	1	24.064021110534668
8	7	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(5>2);	0	1	24.064021110534668
8	8	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertNotEquals(""STR"",""STR"");"	0	1	24.064021110534668
8	9	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	0	1	24.064021110534668
9	0	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(context);	0	1	56.230485916137695
9	1	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(db);	0	1	56.230485916137695
9	2	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue(context.exists(name.getMethodName()));	0	1	56.230485916137695
9	3	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(ODatabaseType.PLOCAL,type);	0	1	56.230485916137695
9	4	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertEquals(""STR"",db.getName());"	0	1	56.230485916137695
9	5	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotEquals(null,db.getMetadata());	0	1	56.230485916137695
9	6	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(context.listDatabases());	0	1	56.230485916137695
9	7	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertFalse(context.isRemote(name.getMethodName()));	0	1	56.230485916137695
9	8	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertEquals(""STR"",context.getStorageType(name.getMethodName()));"	0	1	56.230485916137695
9	9	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertTrue(context.listDatabases().contains(name.getMethodName()));	0	1	56.230485916137695
10	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer);	0	1	33.97250270843506
10	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	0	1	33.97250270843506
10	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	0	1	33.97250270843506
10	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	0	1	33.97250270843506
10	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	0	1	33.97250270843506
10	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OWALChangesTree.class,walChanges.getClass());	0	1	33.97250270843506
10	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(serializationOffset,walChanges.getBinaryValueOffset());	0	1	33.97250270843506
10	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(data.length,walChanges.getBinaryValueLen());	0	1	33.97250270843506
10	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(newbyte[FIELD_SIZE],data);	0	1	33.97250270843506
10	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	0	1	33.97250270843506
11	0	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	0	1	58.36150503158569
11	1	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(null));	0	1	58.36150503158569
11	2	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(""STR"");"	0	1	58.36150503158569
11	3	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(multiKey.hashCode(),multiKey.hashCode());	0	1	58.36150503158569
11	4	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(""STR"");"	0	1	58.36150503158569
11	5	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList(null))));	0	1	58.36150503158569
11	6	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertEquals(multiKey.hashCode(),""STR"");"	0	1	58.36150503158569
11	7	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertNotEquals(multiKey.hashCode(),null);	0	1	58.36150503158569
11	8	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertNotEquals(multiKey.hashCode(),""STR"");"	0	1	58.36150503158569
11	9	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(""STR"");"	0	1	58.36150503158569
12	0	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l);	0	1	28.511942148208618
12	1	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l2);	0	1	28.511942148208618
12	2	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l3);	0	1	28.511942148208618
12	3	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(AList.nil(),AList.nil());	0	1	28.511942148208618
12	4	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.length(),3);	0	1	28.511942148208618
12	5	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l2));	0	1	28.511942148208618
12	6	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l3));	0	1	28.511942148208618
12	7	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(""STR"",""STR"");"	0	1	28.511942148208618
12	8	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(""STR"",""STR"");"	0	1	28.511942148208618
12	9	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(""STR"",""STR"");"	0	1	28.511942148208618
13	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNull(flatMap(null,(AFunction1<Object,Iterable<Object>,RuntimeException>)l->Arrays.asList(newObject())));	0	1	40.955349922180176
13	1	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNull(flatMap(Collections.emptyList(),null));	0	1	40.955349922180176
13	2	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(flatMap(Collections.emptyList(),(AFunction1<Object,Iterable<Object>,RuntimeException>)l->null));	0	1	40.955349922180176
13	3	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(flatMap(Collections.emptyList(),(AFunction1<Object,Iterable<Object>,RuntimeException>)l->Arrays.asList(newObject()))instanceofCollection);	0	1	40.955349922180176
13	4	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(0,flatMap(Collections.emptyList(),(AFunction1<Object,Iterable<Object>,RuntimeException>)l->Arrays.asList(newObject())).size());	0	1	40.955349922180176
13	5	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	1	1	40.955349922180176
13	6	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(1,""STR"");"	0	1	40.955349922180176
13	7	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertNotEquals(0,""STR"");"	0	1	40.955349922180176
13	8	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertNotEquals(2,""STR"");"	0	1	40.955349922180176
13	9	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(2,""STR"");"	0	1	40.955349922180176
14	0	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(createColl(),create().flatMap(uppercaseFirst));	1	1	54.878093957901
14	1	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(result.contains(expectedValue));	0	1	54.878093957901
14	2	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(result.isEmpty());	0	1	54.878093957901
14	3	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(expectedSize,result.size());	0	1	54.878093957901
14	4	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(result.stream().allMatch(x-><AssertPlaceHolder>));	0	1	54.878093957901
14	5	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(result.stream().allMatch(x-><AssertPlaceHolder>));	0	1	54.878093957901
14	6	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(result.stream().anyMatch(x-><AssertPlaceHolder>));	0	1	54.878093957901
14	7	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(result.stream().anyMatch(x-><AssertPlaceHolder>));	0	1	54.878093957901
14	8	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(expectedValue,result.get(0));	0	1	54.878093957901
14	9	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(expectedValue,result.get(0));	0	1	54.878093957901
15	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1	1	77.01302599906921
15	1	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertThrows(IOException.class,()->makeSSLSocketFactory(null,passphrase));	0	1	77.01302599906921
15	2	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(makeSSLSocketFactory(keystore,keyManagerFactory)instanceofSSLServerSocketFactory);	0	1	77.01302599906921
15	3	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertArrayEquals(""STR"",makeSSLSocketFactory(keystore,keyManagerFactory).getDefaultCipherSuites());"	0	1	77.01302599906921
15	4	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertEquals(-1,makeSSLSocketFactory(keystore,keyManagerFactory).getNeedClientAuth());	0	1	77.01302599906921
15	5	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(makeSSLSocketFactory(keystore,keyManagerFactory).getWantClientAuth());	0	1	77.01302599906921
15	6	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(keyManagerFactory.getAlgorithms().length>0);	0	1	77.01302599906921
15	7	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(keyManagerFactory.getKeyManagers().length>0);	0	1	77.01302599906921
15	8	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertTrue(makeSSLSocketFactory(keystore,keyManagerFactory).getEnabledCipherSuites().length>0);	0	1	77.01302599906921
15	9	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotEquals(makeSSLSocketFactory(keystore,keyManagerFactory).toString(),keystore.toString());	0	1	77.01302599906921
16	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	0	1	37.51550483703613
16	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(false);	0	1	37.51550483703613
16	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(null);	0	1	37.51550483703613
16	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(newObject());	0	1	37.51550483703613
16	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertSame(""STR"",""STR"");"	0	1	37.51550483703613
16	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotSame(newObject(),newObject());	0	1	37.51550483703613
16	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(1+1==2);	0	1	37.51550483703613
16	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(1+1!=2);	0	1	37.51550483703613
16	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertEquals(5,5);	0	1	37.51550483703613
16	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotEquals(5,10);	0	1	37.51550483703613
17	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,count(null));	0	1	30.299089193344116
17	1	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,getAConn().idleTimeMills());	0	1	30.299089193344116
17	2	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,getAConn().lastWriteTimestampMills());	0	1	30.299089193344116
17	3	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,""STR"");"	0	1	30.299089193344116
17	4	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(1,getAConn().getPoolKey().length());	0	1	30.299089193344116
17	5	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count(poolKey));	1	1	30.299089193344116
17	6	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(getAConn());	0	1	30.299089193344116
17	7	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotNull(""STR"");"	0	1	30.299089193344116
17	8	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(this.cm.getPools());	0	1	30.299089193344116
17	9	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.contains(getAConn()));	0	1	30.299089193344116
18	0	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	70.29622888565063
18	1	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertNotNull(""STR"");"	0	1	70.29622888565063
18	2	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(""STR"",""STR"");"	0	1	70.29622888565063
18	3	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertTrue(""STR"");"	0	1	70.29622888565063
18	4	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(""STR"");"	0	1	70.29622888565063
18	5	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertNotEquals(""STR"",""STR"");"	0	1	70.29622888565063
18	6	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertSame(""STR"",""STR"");"	0	1	70.29622888565063
18	7	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertNull(""STR"");"	0	1	70.29622888565063
18	8	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(0,""STR"");"	0	1	70.29622888565063
18	9	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertFalse(""STR"");"	0	1	70.29622888565063
19	0	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotNull(head);	0	1	49.964120626449585
19	1	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(headinstanceofEndLabel);	0	1	49.964120626449585
19	2	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(""STR"",head.getLabel().toString());"	0	1	49.964120626449585
19	3	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(1d,head.getX());	0	1	49.964120626449585
19	4	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(2d,head.getY());	0	1	49.964120626449585
19	5	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertFalse(head.isVisible());	0	1	49.964120626449585
19	6	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertEquals(""STR"",attrs(head));"	0	1	49.964120626449585
19	7	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertArrayEquals(2d},head.getPosition());	0	1	49.964120626449585
19	8	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertSame(attrs(),attrs(attrs()));	0	1	49.964120626449585
19	9	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(attrs()instanceofAttributes);	0	1	49.964120626449585
20	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0);	0	1	50.41669225692749
20	1	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1	1	50.41669225692749
20	2	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(""STR"");"	0	1	50.41669225692749
20	3	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""STR"",protocol0.getProvidedProtocol());"	0	1	50.41669225692749
20	4	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEqualsIgnoreCase(""STR"",""STR"");"	0	1	50.41669225692749
20	5	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""STR"",protocol0.getProvidedProtocol());"	0	1	50.41669225692749
20	6	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1	1	50.41669225692749
20	7	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertEquals(0,protocol0.methodReturningZero());	0	1	50.41669225692749
20	8	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertThat(protocol0.getProvidedProtocol(),instanceOf(String.class));	0	1	50.41669225692749
20	9	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertThat(Arrays.asList(1,2,3),hasItem(2));	0	1	50.41669225692749
21	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover()));	0	1	35.53219509124756
21	1	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse(!deflateExtension.isServerNoContextTakeover()));	0	1	35.53219509124756
21	2	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension));	0	1	35.53219509124756
21	3	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(null,deflateExtension));	0	1	35.53219509124756
21	4	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(true,deflateExtension.isServerNoContextTakeover()));	0	1	35.53219509124756
21	5	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertSame(deflateExtension,deflateExtension));	0	1	35.53219509124756
21	6	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertArrayEquals(newboolean[]{true},newboolean[]{deflateExtension.isServerNoContextTakeover()}));	0	1	35.53219509124756
21	7	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(String.valueOf(deflateExtension.isServerNoContextTakeover()),String.valueOf(deflateExtension.isServerNoContextTakeover())));	0	1	35.53219509124756
21	8	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover()==deflateExtension.isServerNoContextTakeover()));	0	1	35.53219509124756
21	9	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false,deflateExtension.isServerNoContextTakeover()));	0	1	35.53219509124756
22	0	trautonen/coveralls-maven-plugin	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focal.getName());"	0	1	62.77700996398926
22	1	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotNull(focal.getName());	0	1	62.77700996398926
22	2	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertNotEquals(""STR"",focal.getName());"	0	1	62.77700996398926
22	3	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertSame(""STR"",focal.getName());"	0	1	62.77700996398926
22	4	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",newAppveyor(env()).getName());"	1	1	62.77700996398926
22	5	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertNotEquals(null,focal.getName());	0	1	62.77700996398926
22	6	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEqualsIgnoreCase(""STR"",focal.getName());"	0	1	62.77700996398926
22	7	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focal.getName().toLowerCase());"	0	1	62.77700996398926
22	8	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	"assertEquals(""STR"",focal.getName().toUpperCase());"	0	1	62.77700996398926
22	9	/	AppveyorTest	testGetName	"assertEquals(""STR"",newAppveyor(env()).getName());"	assertArrayEquals(newchar[]{'A','P','P','V','E','Y','O','R','_','N','A','M','E'},focal.getName().toCharArray());	0	1	62.77700996398926
23	0	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(locītājs);	0	1	37.25807499885559
23	1	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(locītājs.isDefaultSettings());	0	1	37.25807499885559
23	2	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(0,locītājs.getCacheSize());	0	1	37.25807499885559
23	3	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(locītājs.isCacheEnabled());	0	1	37.25807499885559
23	4	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(laivas_iršana);	0	1	37.25807499885559
23	5	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(laivas_iršana.isEmpty());	0	1	37.25807499885559
23	6	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(null,pagaatne);	0	1	37.25807499885559
23	7	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(AttributeNames.v_Verb,pagaatne.getAttributeValue(AttributeNames.i_PartOfSpeech));	0	1	37.25807499885559
23	8	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(AttributeNames.v_Iisteniibas,pagaatne.getAttributeValue(AttributeNames.i_Izteiksme));	0	1	37.25807499885559
23	9	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(AttributeNames.v_Pagaatne,pagaatne.getAttributeValue(AttributeNames.i_Laiks));	0	1	37.25807499885559
24	0	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs);	0	1	33.680129051208496
24	1	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.getDefaultSettings());	0	1	33.680129051208496
24	2	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.hasAttribute(AttributeNames.v_Prefix));	0	1	33.680129051208496
24	3	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNull(locītājs.getAttribute(AttributeNames.v_Numbers));	0	1	33.680129051208496
24	4	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.clearCache());	0	1	33.680129051208496
24	5	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.hasAttribute(AttributeNames.v_Singular));	0	1	33.680129051208496
24	6	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(locītājs.getSettings().getAttributes(),locītājs.getDefaultSettings().getAttributes());	0	1	33.680129051208496
24	7	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājs.getCacheSize()>=0);	0	1	33.680129051208496
24	8	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.hasAttribute(AttributeNames.v_Plural));	0	1	33.680129051208496
24	9	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNull(locītājs.getAttribute(AttributeNames.v_Adverb));	0	1	33.680129051208496
25	0	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(WordType.VERB,vārds.getWordType());	0	1	28.15673589706421
25	1	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1	1	28.15673589706421
25	2	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.isRecognized());	0	1	28.15673589706421
25	3	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.enableGuessing);	0	1	28.15673589706421
25	4	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessAdjectives);	0	1	28.15673589706421
25	5	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessVerbs);	0	1	28.15673589706421
25	6	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessParticiples);	0	1	28.15673589706421
25	7	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotEquals(null,vārds);	0	1	28.15673589706421
25	8	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0	1	28.15673589706421
25	9	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	"assertNotEquals(""STR"",vārds.getRoot());"	0	1	28.15673589706421
26	0	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	0	1	26.234352111816406
26	1	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(md.isEmpty());	0	1	26.234352111816406
26	2	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	0	1	26.234352111816406
26	3	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertSame(HashMap.class,md.getClass());	0	1	26.234352111816406
26	4	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(md,newHashMap<>(md));	0	1	26.234352111816406
26	5	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(md.hashCode(),md.clone().hashCode());	0	1	26.234352111816406
26	6	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(md,md.clone());	0	1	26.234352111816406
26	7	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(md.toString(),md.clone().toString());	0	1	26.234352111816406
26	8	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(newHashMap<>().isEmpty());	0	1	26.234352111816406
26	9	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(md,newHashMap<>());	0	1	26.234352111816406
27	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlFilter));	0	1	44.130435943603516
27	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(testSourceUrl));	0	1	44.130435943603516
27	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(testUrl));	0	1	44.130435943603516
27	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(expectedResult));	0	1	44.130435943603516
27	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl));	0	1	44.130435943603516
27	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl));	0	1	44.130435943603516
27	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(urlFilterinstanceofURLFilter));	0	1	44.130435943603516
27	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testSourceUrl,normalizedUrl));	0	1	44.130435943603516
27	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(testUrl.length(),normalizedUrl.length()));	0	1	44.130435943603516
27	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertEquals(""STR"",testUrl.getRef()));"	0	1	44.130435943603516
