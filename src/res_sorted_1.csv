TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Corr	Sorted	Time
21	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex);	0	1	49.04949617385864
	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	"assertEquals(""STR"",propertyIndex.getPropertyName());"	0	1	49.04949617385864
	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertSame(OType.INTEGER,propertyIndex.getValueType());	0	1	49.04949617385864
	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertNotNull(multiValueChangeEvent);	0	1	49.04949617385864
	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(OMultiValueChangeEvent.OChangeType.UPDATE,multiValueChangeEvent.getChangeType());	0	1	49.04949617385864
	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(0,multiValueChangeEvent.getKey());	0	1	49.04949617385864
	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	"assertEquals(""STR"",multiValueChangeEvent.getOldValue());"	0	1	49.04949617385864
	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	"assertEquals(""STR"",multiValueChangeEvent.getValue());"	0	1	49.04949617385864
	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	0	1	49.04949617385864
	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventUpdateConvertValues	assertEquals(keysToAdd,addedKeys);	assertEquals(1,removedKeys.size());	0	1	49.04949617385864
22	0	orientechnologies/orientdb	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(0,manager.getLockCount());	0	1	45.556809186935425
	1	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertNotNull(lock);	0	1	45.556809186935425
	2	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.isLocked(null));	0	1	45.556809186935425
	3	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(lock.isHeldByCurrentThread());	0	1	45.556809186935425
	4	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.releaseExclusiveLock(null));	0	1	45.556809186935425
	5	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertEquals(1,manager.getLockCount());	0	1	45.556809186935425
	6	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.acquireSharedLock(null));	0	1	45.556809186935425
	7	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertTrue(manager.releaseExclusiveLock(null));	0	1	45.556809186935425
	8	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(lock.isHeldByCurrentThread());	0	1	45.556809186935425
	9	/	OneEntryPerKeyLockManagerNullKeysTest	testNullKeyExclusive	assertEquals(2,wrapper(lock).getLockCount());	assertFalse(manager.isLocked(null));	0	1	45.556809186935425
23	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult);	0	1	52.28281497955322
	1	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(26,qResult.size());	0	1	52.28281497955322
	2	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult2);	0	1	52.28281497955322
	3	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult2);	0	1	52.28281497955322
	4	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult3);	0	1	52.28281497955322
	5	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult3);	0	1	52.28281497955322
	6	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult4);	0	1	52.28281497955322
	7	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult4);	0	1	52.28281497955322
	8	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertNotNull(qResult5);	0	1	52.28281497955322
	9	/	OCommandExecutorSQLSelectTest	testOperatorPriority3	assertEquals(qResult.size(),qResult2.size());	assertEquals(qResult,qResult5);	0	1	52.28281497955322
24	0	orientechnologies/orientdb	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertNotNull(configurator);	0	1	41.18555402755737
	1	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.containsLoader(OETLStubLoader.class));	0	1	41.18555402755737
	2	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.containsExtractor(OETLStubRandomExtractor.class));	0	1	41.18555402755737
	3	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(configurator.getFactories().size()>0);	0	1	41.18555402755737
	4	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(configurator.containsExtractor(OETLStubLoader.class));	0	1	41.18555402755737
	5	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertFalse(configurator.containsLoader(OETLStubRandomExtractor.class));	0	1	41.18555402755737
	6	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(2,configurator.getFactories().size());	0	1	41.18555402755737
	7	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertEquals(1,res.size());	0	1	41.18555402755737
	8	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(db.exists());	0	1	41.18555402755737
	9	/	OETLOrientDBLoaderTest	shouldSaveDocuments	assertThat(res.size()).isEqualTo(1);	assertTrue(db.isActiveOnCurrentThread());	0	1	41.18555402755737
25	0	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(g);	0	1	72.27275919914246
	1	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0,g.getRawGraph().getEdgeCount());	0	1	72.27275919914246
	2	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getRawGraph().isClosed());	0	1	72.27275919914246
	3	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(g.getVertices().isEmpty());	0	1	72.27275919914246
	4	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(0,factory.countOpenInstances());	0	1	72.27275919914246
	5	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertEquals(1,factory.countCreatedInstances());	0	1	72.27275919914246
	6	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.isKeepInMemoryReferences());	0	1	72.27275919914246
	7	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.isAutoStartTx());	0	1	72.27275919914246
	8	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().isRunning());	0	1	72.27275919914246
	9	/	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getPool().isStarted());	0	1	72.27275919914246
26	0	orientechnologies/orientdb	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0	1	45.455374002456665
	1	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0	1	45.455374002456665
	2	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1	1	45.455374002456665
	3	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0	1	45.455374002456665
	4	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0)instanceofODocument);	0	1	45.455374002456665
	5	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,res.get(0));	0	1	45.455374002456665
	6	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	"assertNotEquals(""STR"",res.get(0).toString());"	0	1	45.455374002456665
	7	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,factory.getExtractors());	0	1	45.455374002456665
	8	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(null,configurator.getObject());	0	1	45.455374002456665
	9	/	OETLCSVExtractorTest	testCustomNullValueInCell	assertFalse(res.isEmpty());	assertTrue(configuratorinstanceofOETLProcessorConfigurator);	0	1	45.455374002456665
27	0	orientechnologies/orientdb	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertNotNull(db);	0	1	82.42868208885193
	1	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	assertEquals(2,db.getMetadata().getSchema().getClasses().size());	0	1	82.42868208885193
	2	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertTrue(""STR"");"	0	1	82.42868208885193
	3	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(""STR"",""STR"");"	0	1	82.42868208885193
	4	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertTrue(""STR"");"	0	1	82.42868208885193
	5	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertTrue(""STR"");"	0	1	82.42868208885193
	6	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertTrue(""STR"");"	0	1	82.42868208885193
	7	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(1,""STR"");"	0	1	82.42868208885193
	8	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertNotNull(""STR"");"	0	1	82.42868208885193
	9	/	OChainIndexFetchTest	testFetchChaninedIndex	assertEquals(0,res.size());	"assertEquals(1,""STR"");"	0	1	82.42868208885193
28	0	orientechnologies/orientdb	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(parent);	0	1	51.89173769950867
	1	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertNotNull(settings);	0	1	51.89173769950867
	2	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertTrue(settings.getAttribute(ATTRIBUTES.VALIDATION));	0	1	51.89173769950867
	3	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertFalse(parent.getAttribute(ATTRIBUTES.VALIDATION));	0	1	51.89173769950867
	4	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(20,parent.getValue(OGlobalConfiguration.DB_POOL_MAX));	0	1	51.89173769950867
	5	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,parent.getAttribute(ATTRIBUTES.CUSTOM));	0	1	51.89173769950867
	6	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,settings.getAttribute(ATTRIBUTES.CUSTOM));	0	1	51.89173769950867
	7	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,parent.getAttribute(ATTRIBUTES.VALIDATION));	0	1	51.89173769950867
	8	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertEquals(null,settings.getAttribute(ATTRIBUTES.VALIDATION));	0	1	51.89173769950867
	9	/	OrientDBConfigTest	testParentConfig	assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);	assertFalse(settings.isEmpty());	0	1	51.89173769950867
29	0	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertEquals(2,execute.size());	0	1	89.423024892807
	1	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	0	1	89.423024892807
	2	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertTrue(""STR"");"	0	1	89.423024892807
	3	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertFalse(execute.isEmpty());	0	1	89.423024892807
	4	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotNull(execute);	0	1	89.423024892807
	5	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotEquals(0,execute.size());	0	1	89.423024892807
	6	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertSame(List.class,execute.getClass());	0	1	89.423024892807
	7	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	"assertFalse(""STR"");"	0	1	89.423024892807
	8	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertTrue(execute.size()>0);	0	1	89.423024892807
	9	/	LuceneSpatialIntersectsTest	testIntersectsIndex	assertEquals(execute.size(),1);	assertNotEquals(1,execute.size());	0	1	89.423024892807
30	0	orientechnologies/orientdb	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertEquals(m2,m1);	1	1	51.57522797584534
	1	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(collection);	0	1	51.57522797584534
	2	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotNull(builder);	0	1	51.57522797584534
	3	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertEquals(""STR"",collection.getGeometryType());"	0	1	51.57522797584534
	4	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	0	1	51.57522797584534
	5	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	0	1	51.57522797584534
	6	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	assertNotEquals(m1,m2);	0	1	51.57522797584534
	7	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	0	1	51.57522797584534
	8	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	0	1	51.57522797584534
	9	/	LuceneSpatialIOTest	testGeometryCollection	assertEquals(m2,m1);	"assertTrue(""STR"");"	0	1	51.57522797584534
31	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer);	0	1	48.73473119735718
	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	0	1	48.73473119735718
	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	0	1	48.73473119735718
	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	0	1	48.73473119735718
	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	0	1	48.73473119735718
	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset).limit()>0);	0	1	48.73473119735718
	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.getBinaryValue(buffer,serializationOffset).capacity()>=FIELD_SIZE);	0	1	48.73473119735718
	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,0));	0	1	48.73473119735718
	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.equals(floatSerializer));	0	1	48.73473119735718
	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(floatSerializer,newOFloatSerializer());	0	1	48.73473119735718
32	0	orientechnologies/orientdb	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertTrue(multiKey.equals(multiKey));	0	1	71.35720109939575
	1	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(null));	0	1	71.35720109939575
	2	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertFalse(multiKey.equals(newOMultiKey(Collections.emptyList())));	0	1	71.35720109939575
	3	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertEquals(multiKey,multiKey);	0	1	71.35720109939575
	4	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertNotEquals(multiKey,""STR"");"	0	1	71.35720109939575
	5	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertTrue(""STR"");"	0	1	71.35720109939575
	6	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertEquals(multiKey,""STR"");"	0	1	71.35720109939575
	7	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	"assertFalse(""STR"");"	0	1	71.35720109939575
	8	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertNotEquals(multiKey,newOMultiKey(Collections.emptyList()));	0	1	71.35720109939575
	9	/	OMultiKeyTest	testEqualsDifferentClass	"assertFalse(multiKey.equals(""STR""));"	assertNotEquals(multiKey,null);	0	1	71.35720109939575
33	0	arnohaase/a-foundation	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l);	0	1	42.48797798156738
	1	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l2);	0	1	42.48797798156738
	2	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l3);	0	1	42.48797798156738
	3	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.length(),3);	0	1	42.48797798156738
	4	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(l.head(),""STR"");"	0	1	42.48797798156738
	5	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l.reverse().reverse()));	0	1	42.48797798156738
	6	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l2.equals(l));	0	1	42.48797798156738
	7	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l3.reverse().equals(l.reverse()));	0	1	42.48797798156738
	8	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(create(l2.toList()).equals(l2));	0	1	42.48797798156738
	9	/	AListTest	testFromJavaUtil	assertEquals(l,l2);	"assertEquals(l.tail().tail().head(),""STR"");"	0	1	42.48797798156738
34	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertEquals(expectedSize,flatMapResult.size());	0	1	64.096608877182
	1	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(flatMapResult);	0	1	64.096608877182
	2	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertTrue(flatMapResult.containsAll(expectedResult));	0	1	64.096608877182
	3	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertFalse(flatMapResult.isEmpty());	0	1	64.096608877182
	4	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotEquals(expectedResult,flatMapResult);	0	1	64.096608877182
	5	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(tokens);	0	1	64.096608877182
	6	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertTrue(""STR"");"	0	1	64.096608877182
	7	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(3,""STR"");"	0	1	64.096608877182
	8	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	"assertEquals(""STR"",""STR"");"	0	1	64.096608877182
	9	/	ACollectionHelperTest	testFlatMapTokens	assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));	assertNotNull(coll);	0	1	64.096608877182
35	0	arnohaase/a-foundation	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotNull(uppercaseFirst);	0	1	42.387430906295776
	1	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(uppercaseFirst.apply(null).isDefined());	0	1	42.387430906295776
	2	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertEquals(2,2);	0	1	42.387430906295776
	3	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertTrue(true);	0	1	42.387430906295776
	4	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertFalse(false);	0	1	42.387430906295776
	5	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	assertNotEquals(1,2);	0	1	42.387430906295776
	6	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertNotEquals(""STR"",""STR"");"	0	1	42.387430906295776
	7	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertEquals(""STR"",""STR"");"	0	1	42.387430906295776
	8	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertNotEquals(""STR"",""STR"");"	0	1	42.387430906295776
	9	/	AsArrayCopyTest	testFlatMapOption	assertEquals(createColl(),create().flatMap(uppercaseFirst));	"assertTrue(""STR"");"	0	1	42.387430906295776
36	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1	1	42.027140855789185
	1	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(resourceAsStreaminstanceofOutputStream);	0	1	42.027140855789185
	2	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(""STR"");"	0	1	42.027140855789185
	3	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(makeSSLSocketFactory(keyAndTrustStoreClasspathPath,passphrase));	0	1	42.027140855789185
	4	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(keyManagerFactory.getKeyManagers().length==0);	0	1	42.027140855789185
	5	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertFalse(""STR"");"	0	1	42.027140855789185
	6	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(""STR"");"	0	1	42.027140855789185
	7	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(""STR"");"	0	1	42.027140855789185
	8	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertFalse(keyStorePath.isEmpty());	0	1	42.027140855789185
	9	/	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertEquals(""STR"",keystore.getType());"	0	1	42.027140855789185
37	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.connectionManager);	0	1	60.5528359413147
	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.taskScanner);	0	1	60.5528359413147
	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.reconnectManager);	0	1	60.5528359413147
	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.connectionMonitor);	0	1	60.5528359413147
	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(this.userProcessors);	0	1	60.5528359413147
	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(this.connectionManager.isShutdown());	0	1	60.5528359413147
	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(this.taskScanner.isShutdown());	0	1	60.5528359413147
	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(this.reconnectManager.isStarted());	0	1	60.5528359413147
	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(this.connectionMonitor.isStarted());	0	1	60.5528359413147
	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertNotNull(""STR"");"	0	1	60.5528359413147
38	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(2,""STR"");"	0	1	38.49917674064636
	1	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,focalInstance.count(null));	0	1	38.49917674064636
	2	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertEquals(0,""STR"");"	0	1	38.49917674064636
	3	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotEquals(-1,""STR"");"	0	1	38.49917674064636
	4	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotEquals(1,""STR"");"	0	1	38.49917674064636
	5	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotEquals(0,""STR"");"	0	1	38.49917674064636
	6	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotEquals(4,""STR"");"	0	1	38.49917674064636
	7	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotEquals(5,""STR"");"	0	1	38.49917674064636
	8	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNotNull(""STR"");"	0	1	38.49917674064636
	9	/	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	"assertNull(""STR"");"	0	1	38.49917674064636
39	0	nidi3/graphviz-java	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotNull(<FOCAL>);	0	1	45.97416067123413
	1	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotEquals(null,<FOCAL>);	0	1	45.97416067123413
	2	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertTrue(<FOCAL>!=null);	0	1	45.97416067123413
	3	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertEquals(<FOCAL>,<FOCAL>);	0	1	45.97416067123413
	4	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertFalse(<FOCAL>==null);	0	1	45.97416067123413
	5	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertTrue(<FOCAL>instanceofAttributes);	0	1	45.97416067123413
	6	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertTrue(<SETUP>instanceofObject);	0	1	45.97416067123413
	7	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	"assertEquals(""STR"",<FOCAL>.getLabel());"	0	1	45.97416067123413
	8	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertTrue(<FOCAL>.getKind().equals(M_RECORD));	0	1	45.97416067123413
	9	/	RecordsTest	mlabel	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Records.mLabel(""STR""));"	assertNotEquals(0,<FOCAL>.hashCode());	0	1	45.97416067123413
40	0	nidi3/graphviz-java	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotNull(head);	0	1	85.70840883255005
	1	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(1d,head.getX());	0	1	85.70840883255005
	2	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertEquals(2d,head.getY());	0	1	85.70840883255005
	3	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotEquals(null,head);	0	1	85.70840883255005
	4	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertTrue(""STR"");"	0	1	85.70840883255005
	5	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertFalse(""STR"");"	0	1	85.70840883255005
	6	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertTrue(headinstanceofEndLabel);	0	1	85.70840883255005
	7	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotEquals(0,head.hashCode());	0	1	85.70840883255005
	8	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	assertNotSame(null,head);	0	1	85.70840883255005
	9	/	EndLabelTest	attrHead	"assertEquals(attrs(attr(""STR"",head),attr(""STR"",1d),attr(""STR"",2d)),attrs(head));"	"assertNotSame(head,""STR"");"	0	1	85.70840883255005
41	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0);	0	1	47.64342284202576
	1	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0instanceofProtocol);	0	1	47.64342284202576
	2	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNull(protocol0.getClass().getSuperclass());	0	1	47.64342284202576
	3	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertFalse(protocol0.getProvidedProtocol().isEmpty());	0	1	47.64342284202576
	4	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.toString().contains(protocol0.getProvidedProtocol()));	0	1	47.64342284202576
	5	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertSame(protocol0,protocol0);	0	1	47.64342284202576
	6	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.equals(newProtocol(protocol0.getProvidedProtocol())));	0	1	47.64342284202576
	7	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	1	1	47.64342284202576
	8	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotEquals(null,protocol0.getProvidedProtocol());	0	1	47.64342284202576
	9	/	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(protocol0.getProvidedProtocol(),""STR"");"	0	1	47.64342284202576
42	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	1	1	97.47410702705383
	1	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertFalse(!deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	2	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(true,deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	3	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false,deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	4	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	5	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotSame(false,deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	6	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNull(!deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	7	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertSame(true,deflateExtension.isServerNoContextTakeover());	0	1	97.47410702705383
	8	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertThat(deflateExtension.isServerNoContextTakeover(),equalTo(true));	0	1	97.47410702705383
	9	/	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertThat(!deflateExtension.isServerNoContextTakeover(),is(false));	0	1	97.47410702705383
43	0	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(!wordformList.isEmpty());	0	1	60.43955206871033
	1	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(expectedCount,wordformList.size());	0	1	60.43955206871033
	2	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	"assertIterableEquals(""STR"",expectedList,actualList);"	0	1	60.43955206871033
	3	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(attributeValues.containsAttribute(attribute));	0	1	60.43955206871033
	4	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(!attributeValues.containsAttribute(attribute));	0	1	60.43955206871033
	5	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(expectedValue,attributeValues.getAttributeValue(attribute));	0	1	60.43955206871033
	6	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(expectedLength,stringValue.length());	0	1	60.43955206871033
	7	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertEquals(expectedValue1,actualValue1);	0	1	60.43955206871033
	8	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(expectedValue2,actualValue2);	0	1	60.43955206871033
	9	/	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNull(variable);	0	1	60.43955206871033
44	0	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs);	0	1	55.69635725021362
	1	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(locītājsinstanceofAnalyzer);	0	1	55.69635725021362
	2	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(0,locītājs.getCacheSize());	0	1	55.69635725021362
	3	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(0,locītājs.getCacheHitCount());	0	1	55.69635725021362
	4	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(0,locītājs.getCacheMissCount());	0	1	55.69635725021362
	5	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertFalse(locītājs.isCacheEnabled());	0	1	55.69635725021362
	6	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs.getDefaultLanguageCode());	0	1	55.69635725021362
	7	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs.getAttributeValuesMap());	0	1	55.69635725021362
	8	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotEquals(null,locītājs.getLoadedDictionarySize());	0	1	55.69635725021362
	9	/	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertEquals(0,locītājs.getCacheEvictionCount());	0	1	55.69635725021362
45	0	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	0	1	50.270708084106445
	1	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	50.270708084106445
	2	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0	1	50.270708084106445
	3	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1	1	50.270708084106445
	4	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(vārds.isRecognized());	0	1	50.270708084106445
	5	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableGuessing);	0	1	50.270708084106445
	6	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertFalse(locītājs.guessVerbs);	0	1	50.270708084106445
	7	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	0	1	50.270708084106445
	8	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0	1	50.270708084106445
	9	/	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0	1	50.270708084106445
46	0	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0	1	73.46336483955383
	1	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.size());	0	1	73.46336483955383
	2	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	"assertNull(""STR"");"	0	1	73.46336483955383
	3	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.isEmpty());	0	1	73.46336483955383
	4	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(null,metadata);	0	1	73.46336483955383
	5	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	"assertNull(""STR"");"	0	1	73.46336483955383
	6	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.equals(null));	0	1	73.46336483955383
	7	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(md.equals(newHashMap<String,String[]>()));	0	1	73.46336483955383
	8	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.equals(metadata));	0	1	73.46336483955383
	9	/	StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(md.toString(),metadata.toString());	0	1	73.46336483955383
47	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),expectedResult);	0	1	85.17097282409668
	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(urlFilter.filter(testSourceUrl,newMetadata(),testUrl).equals(expectedResult));	0	1	85.17097282409668
	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlFilter.filter(testSourceUrl,newMetadata(),testUrl));	0	1	85.17097282409668
	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(urlFilter.filter(testSourceUrl,newMetadata(),testUrl).isEmpty());	0	1	85.17097282409668
	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),normalizedUrl);	0	1	85.17097282409668
	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),testUrl);	0	1	85.17097282409668
	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertNotEquals(urlFilter.filter(testSourceUrl,newMetadata(),testUrl),""STR"");"	0	1	85.17097282409668
	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter).equals(expectedResult));	0	1	85.17097282409668
	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	0	1	85.17097282409668
	9	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter).isEmpty());	0	1	85.17097282409668
48	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	0	1	42.592185258865356
	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	0	1	42.592185258865356
	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl);	0	1	42.592185258865356
	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(testSourceUrl);	0	1	42.592185258865356
	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(sourceUrl);	0	1	42.592185258865356
	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(sourceMetadata);	0	1	42.592185258865356
	6	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlToFilter);	0	1	42.592185258865356
	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	0	1	42.592185258865356
	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(urlToFilter,urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	0	1	42.592185258865356
	9	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,urlFilter.filter(sourceUrl,sourceMetadata,urlToFilter));	0	1	42.592185258865356
