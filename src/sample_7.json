{
    "projects": [
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TxNonUniqueIndexWithCollationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/TxNonUniqueIndexWithCollationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 41,
                        "endLn": 52,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) . createProperty ( \"STR\" , OType . STRING ) . setCollate ( \"STR\" ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIn",
                            "startLn": 90,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testIn ( ) {\n     db . begin ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final OLegacyResultSet < ODocument > r = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(4,r.size());\n}",
                            "oracle": "assertEquals(4,r.size());",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OLuceneManualIndexTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/tests/OLuceneManualIndexTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 41,
                        "endLn": 49,
                        "setupMethod": "@Before\n public void init ( ) { \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n } @Before\n public void setupDatabase ( ) { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n setupDatabase ( config ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCreateManualIndexWithJavaApi",
                            "startLn": 51,
                            "endLn": 76,
                            "testMethod": "@Test\n public void shouldCreateManualIndexWithJavaApi ( ) throws Exception {\n     ODocument meta = new ODocument ( ) . field ( \"STR\" , StandardAnalyzer . class . getName ( ) ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . createIndex ( \"STR\" , OClass . INDEX_TYPE . FULLTEXT . toString ( ) , new OSimpleKeyIndexDefinition ( OType . STRING , OType . STRING ) , null , null , meta , OLuceneIndexFactory . LUCENE_ALGORITHM ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     Assert.assertEquals(index.getSize(),4);\n}",
                            "oracle": "Assert.assertEquals(index.getSize(),4);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "getSize",
                            "focalStartLn": 115,
                            "focalEndLn": 115,
                            "focalMethod": " long getSize ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CiEnvironmentTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/CiEnvironmentTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "recognises_circle",
                            "startLn": 31,
                            "endLn": 43,
                            "testMethod": "@Test\n public void recognises_circle ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        },
                        {
                            "testName": "is_inactive_by_default",
                            "startLn": 12,
                            "endLn": 16,
                            "testMethod": "@Test\n public void is_inactive_by_default ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     assertNull(CIEnvironment.detect(env));\n}",
                            "oracle": "assertNull(CIEnvironment.detect(env));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "detect",
                            "focalStartLn": 21,
                            "focalEndLn": 30,
                            "focalMethod": " public static CIEnvironment detect ( Map < String , String > env ) { \n CIEnvironment ci ; \n if ( ( ci = detectBamboo ( env ) ) != null ) return ci ; \n if ( ( ci = detectCircle ( env ) ) != null ) return ci ; \n if ( ( ci = detectJenkins ( env ) ) != null ) return ci ; \n if ( ( ci = detectTfs ( env ) ) != null ) return ci ; \n if ( ( ci = detectTravis ( env ) ) != null ) return ci ; \n if ( ( ci = detectWercker ( env ) ) != null ) return ci ; \n return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "YamlConfigLoaderTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "merges",
                            "startLn": 29,
                            "endLn": 46,
                            "testMethod": "@Test\n public void merges ( ) {\n     Config config = new Config ( ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     String yaml = \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     assertEquals(yaml,config.toYaml(\"STR\"));\n}",
                            "oracle": "assertEquals(yaml,config.toYaml(\"STR\"));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "toYaml",
                            "focalStartLn": 100,
                            "focalEndLn": 108,
                            "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "tradier",
            "repoName": "dropwizard-raven",
            "subRepos": [],
            "commitSHA": "117c78b4879ba930d0187ae2874773646213d3d2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RavenAppenderFactoryTest",
                    "classPath": "src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "hasValidDefaults",
                            "startLn": 27,
                            "endLn": 38,
                            "testMethod": "@Test\n public void hasValidDefaults ( ) throws IOException , ConfigurationException {\n     final RavenAppenderFactory factory = new RavenAppenderFactory ( ) ; \n     assertNull(\"STR\",factory.getDsn());\n}",
                            "oracle": "assertNull(\"STR\",factory.getDsn());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java",
                            "focalName": "getDsn",
                            "focalStartLn": 50,
                            "focalEndLn": 52,
                            "focalMethod": " public String getDsn ( ) { \n return dsn ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AHashMapTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AHashMapTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testEqualityIdentity",
                            "startLn": 250,
                            "endLn": 279,
                            "testMethod": "@ SuppressWarnings ( \"STR\" ) @Test\n public void testEqualityIdentity ( ) {\n     AMap < String , String > map = AHashMap . empty ( AEquality . IDENTITY ) ; \n     final String key1 = new String ( \"STR\" ) ; \n     final String key2 = new String ( \"STR\" ) ; \n     final String key3 = new String ( \"STR\" ) ; \n     assertEquals(key1,key2);\n}",
                            "oracle": "assertEquals(key1,key2);",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AHashMap.java",
                            "focalName": "empty",
                            "focalStartLn": 41,
                            "focalEndLn": 47,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < K , V > AHashMap < K , V > empty ( AEquality equality ) { \n if ( equality == AEquality . EQUALS ) return ( AHashMap < K , V > ) emptyEquals ; \n if ( equality == AEquality . IDENTITY ) return ( AHashMap < K , V > ) emptyIdentity ; \n return new AHashMap < > ( equality ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFilter",
                            "startLn": 146,
                            "endLn": 158,
                            "testMethod": "@Test\n public void testFilter ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));\n}",
                            "oracle": "assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "filter",
                            "focalStartLn": 348,
                            "focalEndLn": 356,
                            "focalMethod": " public static < T , E extends Throwable > List < T > filter ( List < T > coll , APredicate < ? super T , E > pred ) throws E { \n final List < T > result = createEmptyListOfType ( coll , false ) ; \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n result . add ( o ) ; \n } } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "same_cells_means_same_puzzle",
                            "startLn": 106,
                            "endLn": 112,
                            "testMethod": "@Test\n public void same_cells_means_same_puzzle ( ) {\n     Puzzle a = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     Puzzle b = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     assertEquals(a,b);\n}",
                            "oracle": "assertEquals(a,b);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "Puzzle",
                            "focalStartLn": 15,
                            "focalEndLn": 18,
                            "focalMethod": " public Puzzle ( int [ ] cells ) { \n this . cells = cells ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MatcherTest",
                    "classPath": "src/test/java/apitests/MatcherTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "lookingAt",
                            "startLn": 95,
                            "endLn": 106,
                            "testMethod": "@Test\n public void lookingAt ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "j\u0101m\u0101k",
                            "startLn": 706,
                            "endLn": 717,
                            "testMethod": "@Test\n public void j\u0101m\u0101k ( ) {\n     Word j\u0101m\u0101k = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(j\u0101m\u0101k.isRecognized());\n}",
                            "oracle": "assertTrue(j\u0101m\u0101k.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "\u017eirafe",
                            "startLn": 2791,
                            "endLn": 2797,
                            "testMethod": "@Test\n public void \u017eirafe ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoaderTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/LoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "fileNok",
                            "startLn": 125,
                            "endLn": 130,
                            "testMethod": "@ Test ( expected = ResourceNotFoundException . class ) public void fileNok ( ) {\n     final URL resource = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( \"STR\" ) ; \n     assertEquals(\"STR\",resource.getProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",resource.getProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/FileLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 34,
                            "focalEndLn": 43,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n try { \n final File file = new File ( base , name ) ; \n return file . lastModified ( ) > ifModifiedSince ? new FileInputStream ( file ) : null ; \n } catch ( FileNotFoundException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluent",
            "repoName": "fluent-logger-java",
            "subRepos": [],
            "commitSHA": "2e5fdf2dbed59cc5af88442ceae6cbe72f321060",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestBugfixes",
                    "classPath": "src/test/java/org/fluentd/logger/TestBugfixes.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters",
                            "startLn": 12,
                            "endLn": 30,
                            "testMethod": "@Test\n public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters ( ) {\n     System . setProperty ( Config . FLUENT_SENDER_CLASS , \"STR\" ) ; \n     FluentLogger logger = FluentLogger . getLogger ( \"STR\" ) ; \n     logger . log ( \"STR\" , Collections . < String , Object > emptyMap ( ) ) ; \n     logger . close ( ) ; \n     assertEquals(null,logger.sender);\n}",
                            "oracle": "assertEquals(null,logger.sender);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/fluentd/logger/FluentLogger.java",
                            "focalName": "close",
                            "focalStartLn": 109,
                            "focalEndLn": 116,
                            "focalMethod": " public void close ( ) { \n if ( sender != null ) { \n sender . flush ( ) ; \n sender . close ( ) ; \n sender = null ; \n } factory . purgeLogger ( this ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ObjectQueryPreparerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 61,
                        "endLn": 71,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . preparer = new ObjectQueryPreparer ( ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . mockParameterReplacer = Mockito . mock ( ParameterReplacer . class ) ; \n this . testTarget001 = new TestClass001 ( ) ; \n this . testTarget002 = new TestClass002 ( ) ; \n this . testTarget003 = new TestClass003 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetParameterReplacer",
                            "startLn": 92,
                            "endLn": 99,
                            "testMethod": "@Test\n public void testGetSetParameterReplacer ( ) throws Exception {\n     assertNotNull(this.preparer.getParameterReplacer());\n}",
                            "oracle": "assertNotNull(this.preparer.getParameterReplacer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java",
                            "focalName": "getParameterReplacer",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public ParameterReplacer getParameterReplacer ( ) { \n return parameterReplacer ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXRemoteUrlConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 48,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMBeanConnectionFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMBeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . factory = new JMXRemoteUrlConnectionFactory ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMBeanConnectionFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMBeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTargetDescription",
                            "startLn": 145,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetTargetDescription ( ) throws Exception {\n     Mockito . when ( this . mockJmxServiceUrl . toString ( ) ) . thenReturn ( \"STR\" ) ; \n     assertEquals(\"STR\",this.factory.getTargetDescription());\n}",
                            "oracle": "assertEquals(\"STR\",this.factory.getTargetDescription());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java",
                            "focalName": "getTargetDescription",
                            "focalStartLn": 100,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n public String getTargetDescription ( ) { \n return \"STR\" + this . url ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AnnotatedMethodRetrieverTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAtMostOneVoidMethodSkipArgsCheck",
                            "startLn": 18,
                            "endLn": 24,
                            "testMethod": "@Test\n public void testGetAtMostOneVoidMethodSkipArgsCheck ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_bind0_NumericalTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_int_whitespace",
                            "startLn": 89,
                            "endLn": 93,
                            "testMethod": "@Test\n public void bind_int_whitespace ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testDetokenizer",
                            "startLn": 200,
                            "endLn": 208,
                            "testMethod": "@Test\n public void testDetokenizer ( ) {\n     List < String > words = Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "detokenize",
                            "focalStartLn": 182,
                            "focalEndLn": 184,
                            "focalMethod": " public static String detokenize ( List < String > tokens ) { \n return OpenKoreanTextProcessor . detokenize ( JavaConverters . asScalaBufferConverter ( tokens ) . asScala ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "AlejandroRivera",
            "repoName": "embedded-rabbitmq",
            "subRepos": [],
            "commitSHA": "79615bf3e8e738ba756ebb44e6bf456610de4520",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExtractorFactoryTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 14,
                        "endLn": 17,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n builder = new EmbeddedRabbitMqConfig . Builder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "withCaching",
                            "startLn": 27,
                            "endLn": 33,
                            "testMethod": "@Test\n public void withCaching ( ) throws Exception {\n     builder . useCachedDownload ( true ) ; \n     Extractor extractor = new ExtractorFactory ( builder . build ( ) ) . getNewInstance ( ) ; \n     assertTrue(extractor.getClass().equals(CachedExtractor.class));\n}",
                            "oracle": "assertTrue(extractor.getClass().equals(CachedExtractor.class));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactory.java",
                            "focalName": "getNewInstance",
                            "focalStartLn": 16,
                            "focalEndLn": 22,
                            "focalMethod": " public Extractor getNewInstance ( ) { \n Extractor extractor = new BasicExtractor ( config ) ; \n if ( config . shouldCachedDownload ( ) ) { \n extractor = new CachedExtractor ( extractor , config ) ; \n } return extractor ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CookieIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/CookieIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testMultipleCookieSentBackToClient",
                            "startLn": 102,
                            "endLn": 113,
                            "testMethod": "@Test\n public void testMultipleCookieSentBackToClient ( ) throws Exception {\n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     HttpGet httpget = new HttpGet ( \"STR\" ) ; \n     ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; \n     this . httpclient . execute ( httpget , responseHandler ) ; \n     assertEquals(4,this.httpclient.getCookieStore().getCookies().size());\n}",
                            "oracle": "assertEquals(4,this.httpclient.getCookieStore().getCookies().size());",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "Cookie",
                            "focalStartLn": 62,
                            "focalEndLn": 66,
                            "focalMethod": " public Cookie ( String name , String value , int numDays ) { \n this . n = name ; \n this . v = value ; \n this . e = getHTTPTime ( numDays ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetEnvironment",
                            "startLn": 92,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testGetEnvironment ( ) {\n     Properties properties = new Shippable ( env ( ) ) . getEnvironment ( ) ; \n     assertEquals(5,properties.size());\n}",
                            "oracle": "assertEquals(5,properties.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getEnvironment",
                            "focalStartLn": 85,
                            "focalEndLn": 94,
                            "focalMethod": "@Override\n public Properties getEnvironment ( ) { \n Properties environment = new Properties ( ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_NUMBER ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_ID ) ) ; \n addProperty ( environment , \"STR\" , getBuildUrl ( ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BRANCH ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_COMMIT ) ) ; \n return environment ; \n } "
                        }
                    ]
                },
                {
                    "className": "BambooTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/BambooTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newBamboo(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newBamboo(env()).getName());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Bamboo.java",
                            "focalName": "getName",
                            "focalStartLn": 52,
                            "focalEndLn": 55,
                            "focalMethod": "@Override\n public String getName ( ) { \n return BAMBOO_NAME ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "spring-cloud",
            "repoName": "spring-cloud-security",
            "subRepos": [
                "spring-cloud-security",
                "spring-cloud-starter-security",
                "spring-cloud-starter-oauth2"
            ],
            "commitSHA": "d5dac0e77e1d9ef17a75fd6b34dfc62685da50e7",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OAuth2FeignRequestInterceptorTests",
                    "classPath": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java",
                    "subRepo": "spring-cloud-security",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 51,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void setUp ( ) { \n oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new MockOAuth2ClientContext ( \"STR\" ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n requestTemplate = new RequestTemplate ( ) . method ( HttpMethod . GET ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "tryToAcquireToken",
                            "startLn": 69,
                            "endLn": 77,
                            "testMethod": "@ Test ( expected = OAuth2AccessDeniedException . class ) public void tryToAcquireToken ( ) {\n     oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new DefaultOAuth2ClientContext ( ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n     OAuth2AccessToken oAuth2AccessToken = oAuth2FeignRequestInterceptor . getToken ( ) ; \n     Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);\n}",
                            "oracle": "Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "getToken",
                            "focalStartLn": 128,
                            "focalEndLn": 149,
                            "focalMethod": " public OAuth2AccessToken getToken ( ) { \n OAuth2AccessToken accessToken = oAuth2ClientContext . getAccessToken ( ) ; \n if ( accessToken == null || accessToken . isExpired ( ) ) { \n try { \n accessToken = acquireAccessToken ( ) ; \n } catch ( UserRedirectRequiredException e ) { \n oAuth2ClientContext . setAccessToken ( null ) ; \n String stateKey = e . getStateKey ( ) ; \n if ( stateKey != null ) { \n Object stateToPreserve = e . getStateToPreserve ( ) ; \n if ( stateToPreserve == null ) { \n stateToPreserve = \"STR\" ; \n } oAuth2ClientContext . setPreservedState ( stateKey , stateToPreserve ) ; \n } throw e ; \n } } return accessToken ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "invalidMessageValidationTest",
                            "startLn": 293,
                            "endLn": 305,
                            "testMethod": "@Test\n public void invalidMessageValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "HandleHtmlInlineTagsTest",
                    "classPath": "core/src/test/java/org/markdownj/test/HandleHtmlInlineTagsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 11,
                        "endLn": 14,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInlineTagsWithMarkdown",
                            "startLn": 16,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testInlineTagsWithMarkdown ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\").trim());\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\").trim());",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "retog",
            "repoName": "wymiwyg-commons-core",
            "subRepos": [],
            "commitSHA": "5b5ba4fef4e810b8cea0ac08ce105fa402eaee3c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MultiPathNodeTest",
                    "classPath": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "commonPath",
                            "startLn": 35,
                            "endLn": 41,
                            "testMethod": "@Test\n public void commonPath ( ) {\n     MultiPathNode node = new MultiPathNode ( nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) ) ; \n     Assert.assertEquals(\"STR\",node.getPath());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",node.getPath());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/wymiwyg/commons/util/dirbrowser/MultiPathNode.java",
                            "focalName": "getPath",
                            "focalStartLn": 212,
                            "focalEndLn": 218,
                            "focalMethod": " public String getPath ( ) { \n String currentLongest = nodes [ 0 ] . getPath ( ) ; \n for ( int i = 1 ; \n i < nodes . length ; \n i ++ ) { \n currentLongest = getLongestCommonSuffix ( currentLongest , nodes [ i ] . getPath ( ) ) ; \n } return currentLongest ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "vdmeer",
            "repoName": "execs",
            "subRepos": [],
            "commitSHA": "ac73170bfd449de1f460248d56ece57ff3b0c761",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "Test_ExecS",
                    "classPath": "src/test/java/de/vandermeer/execs/Test_ExecS.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCliAppName",
                            "startLn": 31,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testCliAppName ( ) {\n     ExecS execs = new ExecS ( ) ; \n     assertEquals(\"STR\",execs.getAppName());\n}",
                            "oracle": "assertEquals(\"STR\",execs.getAppName());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/de/vandermeer/execs/ExecS.java",
                            "focalName": "getAppName",
                            "focalStartLn": 282,
                            "focalEndLn": 284,
                            "focalMethod": " public final String getAppName ( ) { \n return this . appName ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "EbmlSintTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testBytePacking",
                            "startLn": 41,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testBytePacking ( ) throws Exception {\n     Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java",
                            "focalName": "convertToBytes",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " public static byte [ ] convertToBytes ( long val ) { \n int num = ebmlSignedLength ( val ) ; \n val += signedComplement [ num ] ; \n return EbmlUtil . ebmlEncodeLen ( val , num ) ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}