{
    "projects": [
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ContentActivitiesTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 28,
                        "endLn": 47,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n category = new ArrayList < Activity > ( ) ; \n category . add ( new Activity ( ID ) ) ; \n grouping = new ArrayList < Activity > ( ) ; \n grouping . add ( new Activity ( ID ) ) ; \n other = new ArrayList < Activity > ( ) ; \n other . add ( new Activity ( ID ) ) ; \n parent = new ArrayList < Activity > ( ) ; \n parent . add ( new Activity ( ID ) ) ; \n contextActivities = new ContextActivities ( ) ; \n contextActivities . setCategory ( category ) ; \n contextActivities . setGrouping ( grouping ) ; \n contextActivities . setOther ( other ) ; \n contextActivities . setParent ( parent ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetGrouping",
                            "startLn": 79,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testGetGrouping ( ) {\n     ArrayList < Activity > expected = grouping ; \n     ArrayList < Activity > actual = contextActivities . getGrouping ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 83,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java",
                            "focalName": "getGrouping",
                            "focalStartLn": 20,
                            "focalEndLn": 22,
                            "focalMethod": " public ArrayList < Activity > getGrouping ( ) { \n return grouping ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScoreTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ScoreTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 23,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n score = new Score ( ) ; \n score . setMax ( MAX ) ; \n score . setMin ( MIN ) ; \n score . setRaw ( RAW ) ; \n score . setScaled ( SCALED ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetMax",
                            "startLn": 82,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testGetMax ( ) {\n     float expected = MAX ; \n     float actual = score . getMax ( ) ; \n     assertEquals(expected,actual,0);\n}",
                            "oracle": "assertEquals(expected,actual,0);",
                            "oracleLn": 86,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "getMax",
                            "focalStartLn": 30,
                            "focalEndLn": 32,
                            "focalMethod": " public float getMax ( ) { \n return max ; \n } "
                        },
                        {
                            "testName": "testSetRaw",
                            "startLn": 59,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testSetRaw ( ) {\n     float expected = 7 ; \n     score . setRaw ( expected ) ; \n     float actual = score . getRaw ( ) ; \n     assertEquals(expected,actual,0);\n}",
                            "oracle": "assertEquals(expected,actual,0);",
                            "oracleLn": 64,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "getRaw",
                            "focalStartLn": 18,
                            "focalEndLn": 20,
                            "focalMethod": " public float getRaw ( ) { \n return raw ; \n } "
                        },
                        {
                            "testName": "testSerialize",
                            "startLn": 97,
                            "endLn": 107,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     JsonElement actual = score . serialize ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 100,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "serialize",
                            "focalStartLn": 37,
                            "focalEndLn": 44,
                            "focalMethod": " public JsonElement serialize ( ) { \n JsonObject obj = new JsonObject ( ) ; \n obj . addProperty ( \"STR\" , this . scaled ) ; \n obj . addProperty ( \"STR\" , this . raw ) ; \n obj . addProperty ( \"STR\" , this . min ) ; \n obj . addProperty ( \"STR\" , this . max ) ; \n return obj ; \n } "
                        }
                    ]
                },
                {
                    "className": "PersonTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/PersonTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n person = new Person ( ) ; \n person . setName ( NAME ) ; \n person . setMbox ( MBOX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetName",
                            "startLn": 61,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testSetName ( ) {\n     String [ ] expected = { \n \"STR\" } ; \n     person . setName ( expected ) ; \n     String [ ] actual = person . getName ( ) ; \n     assertArrayEquals(expected,actual);\n}",
                            "oracle": "assertArrayEquals(expected,actual);",
                            "oracleLn": 66,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getName",
                            "focalStartLn": 22,
                            "focalEndLn": 24,
                            "focalMethod": " public String [ ] getName ( ) { \n return this . name ; \n } "
                        },
                        {
                            "testName": "testGetMbox",
                            "startLn": 69,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetMbox ( ) {\n     String [ ] expected = MBOX ; \n     String [ ] actual = person . getMbox ( ) ; \n     assertArrayEquals(expected,actual);\n}",
                            "oracle": "assertArrayEquals(expected,actual);",
                            "oracleLn": 73,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getMbox",
                            "focalStartLn": 30,
                            "focalEndLn": 32,
                            "focalMethod": " public String [ ] getMbox ( ) { \n return this . mbox ; \n } "
                        }
                    ]
                },
                {
                    "className": "AboutTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AboutTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n about = new About ( ) ; \n ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n String expected = \"STR\" ; \n versionInput . add ( expected ) ; \n about . setVersion ( versionInput ) ; \n JsonObject extension = new JsonObject ( ) ; \n extension . addProperty ( \"STR\" , \"STR\" ) ; \n about . setExtensions ( extension ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetVersion",
                            "startLn": 38,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testGetVersion ( ) {\n     String expected = \"STR\" ; \n     ArrayList < String > version = about . getVersion ( ) ; \n     assertNotNull(version);\n}",
                            "oracle": "assertNotNull(version);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java",
                            "focalName": "getVersion",
                            "focalStartLn": 14,
                            "focalEndLn": 16,
                            "focalMethod": " public ArrayList < String > getVersion ( ) { \n return version ; \n } "
                        },
                        {
                            "testName": "testSetVersion",
                            "startLn": 56,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testSetVersion ( ) {\n     ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n     String expected = \"STR\" ; \n     versionInput . add ( expected ) ; \n     about . setVersion ( versionInput ) ; \n     ArrayList < String > version = about . getVersion ( ) ; \n     assertNotNull(version);\n}",
                            "oracle": "assertNotNull(version);",
                            "oracleLn": 63,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java",
                            "focalName": "getVersion",
                            "focalStartLn": 14,
                            "focalEndLn": 16,
                            "focalMethod": " public ArrayList < String > getVersion ( ) { \n return version ; \n } "
                        }
                    ]
                },
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetType",
                            "startLn": 154,
                            "endLn": 160,
                            "testMethod": "@Test\n public void testGetType ( ) {\n     String expected = \"STR\" ; \n     String actual = activityDefinition . getType ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 158,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getType",
                            "focalStartLn": 119,
                            "focalEndLn": 121,
                            "focalMethod": " public String getType ( ) { \n return type ; \n } "
                        }
                    ]
                },
                {
                    "className": "ActivityTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String id = \"STR\" ; \n ActivityDefinition definition = new ActivityDefinition ( ) ; \n HashMap < String , String > name = new HashMap < String , String > ( ) ; \n name . put ( \"STR\" , \"STR\" ) ; \n definition . setName ( name ) ; \n activity = new Activity ( id , definition ) ; \n assertNotNull ( activity ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetId",
                            "startLn": 67,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = \"STR\" ; \n     String actual = activity . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 71,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Activity.java",
                            "focalName": "getId",
                            "focalStartLn": 27,
                            "focalEndLn": 29,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementReferenceTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 22,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n statementRef = new StatementReference ( ID ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStatementReferenceString",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testStatementReferenceString ( ) {\n     String id = UUID . randomUUID ( ) . toString ( ) ; \n     StatementReference statementRef = new StatementReference ( id ) ; \n     assertNotNull(statementRef);\n}",
                            "oracle": "assertNotNull(statementRef);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementReference.java",
                            "focalName": "StatementReference",
                            "focalStartLn": 13,
                            "focalEndLn": 15,
                            "focalMethod": " public StatementReference ( String id ) { \n this . id = id ; \n } "
                        }
                    ]
                },
                {
                    "className": "AccountTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AccountTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n account = new Account ( expectedName , expectedHomepage ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAccount",
                            "startLn": 32,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testAccount ( ) {\n     Account account = new Account ( ) ; \n     assertNotNull(account);\n}",
                            "oracle": "assertNotNull(account);",
                            "oracleLn": 35,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Account.java",
                            "focalName": "Account",
                            "focalStartLn": 9,
                            "focalEndLn": 9,
                            "focalMethod": " public Account ( ) { \n } "
                        }
                    ]
                },
                {
                    "className": "ContextTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContextTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetRevision",
                            "startLn": 126,
                            "endLn": 134,
                            "testMethod": "@Test\n public void testGetRevision ( ) {\n     String expected = UUID . randomUUID ( ) . toString ( ) ; \n     Context c = new Context ( ) ; \n     c . setRevision ( expected ) ; \n     String actual = c . getRevision ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 132,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Context.java",
                            "focalName": "getRevision",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public String getRevision ( ) { \n return revision ; \n } "
                        },
                        {
                            "testName": "testGetTeam",
                            "startLn": 100,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testGetTeam ( ) {\n     Agent expected = new Agent ( \"STR\" , \"STR\" ) ; \n     ArrayList < Agent > members = new ArrayList < Agent > ( ) ; \n     members . add ( expected ) ; \n     Group group = new Group ( members ) ; \n     Context c = new Context ( ) ; \n     c . setTeam ( group ) ; \n     Group actual = c . getTeam ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 109,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Context.java",
                            "focalName": "getTeam",
                            "focalStartLn": 43,
                            "focalEndLn": 45,
                            "focalMethod": " public Group getTeam ( ) { \n return team ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbsTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAnswered",
                            "startLn": 13,
                            "endLn": 18,
                            "testMethod": "@Test\n public void testAnswered ( ) {\n     Verb actual = Verbs . answered ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 16,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "answered",
                            "focalStartLn": 16,
                            "focalEndLn": 18,
                            "focalMethod": " public static Verb answered ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        },
                        {
                            "testName": "testInitialized",
                            "startLn": 83,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testInitialized ( ) {\n     Verb actual = Verbs . initialized ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 86,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "initialized",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public static Verb initialized ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetId",
                            "startLn": 217,
                            "endLn": 224,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = ID ; \n     statement . setId ( expected ) ; \n     String actual = statement . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 222,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getId",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        },
                        {
                            "testName": "testStatement",
                            "startLn": 77,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testStatement ( ) {\n     Statement actual = new Statement ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 80,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "Statement",
                            "focalStartLn": 23,
                            "focalEndLn": 23,
                            "focalMethod": " public Statement ( ) { \n } "
                        },
                        {
                            "testName": "testToString",
                            "startLn": 309,
                            "endLn": 320,
                            "testMethod": "@Test\n public void testToString ( ) {\n     String verb = \"STR\" ; \n     String activity = TEST_IRI + UUID . randomUUID ( ) . toString ( ) ; \n     Verb v = new Verb ( verb ) ; \n     Activity act = new Activity ( activity ) ; \n     Statement actual = new Statement ( agent , v , act ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 316,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "Statement",
                            "focalStartLn": 25,
                            "focalEndLn": 30,
                            "focalMethod": " public Statement ( Actor actor , Verb verb , IStatementObject object ) { \n this . id = UUID . randomUUID ( ) . toString ( ) ; \n this . actor = actor ; \n this . verb = verb ; \n this . object = object ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AnnotationFilterTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testLocalTeardownFilter",
                            "startLn": 18,
                            "endLn": 26,
                            "testMethod": "@Test\n public void testLocalTeardownFilter ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Teardown . class ) . withVoidReturnType ( ) . withFilter ( new TeardownFilter ( false ) ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 21,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        },
                        {
                            "testName": "testLocalWarmupFilter",
                            "startLn": 37,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testLocalWarmupFilter ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . withFilter ( new PrepareFilter ( false ) ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 40,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "MetronomeSupplierTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplierTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "withCustomMetronome",
                            "startLn": 73,
                            "endLn": 86,
                            "testMethod": "@Test\n public void withCustomMetronome ( ) {\n     PropertyBinding propertyBinding = new PropertyBinding ( new TestCase ( \"STR\" ) . setProperty ( \"STR\" , \"STR\" ) . setProperty ( \"STR\" , BusySpinningMetronome . class ) ) ; \n     MetronomeSupplier supplier = new MetronomeSupplier ( \"STR\" , propertyBinding , 1 ) ; \n     Metronome m = supplier . get ( ) ; \n     assertEquals(BusySpinningMetronome.class,m.getClass());\n}",
                            "oracle": "assertEquals(BusySpinningMetronome.class,m.getClass());",
                            "oracleLn": 78,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplier.java",
                            "focalName": "get",
                            "focalStartLn": 128,
                            "focalEndLn": 140,
                            "focalMethod": "@Override\n public Metronome get ( ) { \n if ( metronomeClass == EmptyMetronome . class ) { \n return EmptyMetronome . INSTANCE ; \n } try { \n Constructor < ? extends Metronome > constructor = metronomeClass . getConstructor ( Metronome . class ) ; \n return constructor . newInstance ( masterMetronome ) ; \n } catch ( Exception e ) { \n throw new RuntimeException ( e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "BuildInfoUtilsTest",
                    "classPath": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java",
                    "subRepo": "drivers/driver-hazelcast4plus",
                    "classTests": [
                        {
                            "testName": "testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull",
                            "startLn": 79,
                            "endLn": 83,
                            "testMethod": "@Test\n public void testGetHazelcastVersionFromJarOrNull_whenInvalidPath_thenReturnNull ( ) {\n     File file = new File ( \"STR\" ) . getAbsoluteFile ( ) ; \n     assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));\n}",
                            "oracle": "assertNull(getHazelcastVersionFromJarOrNull(file.getAbsolutePath()));",
                            "oracleLn": 82,
                            "focalFile": "drivers/driver-hazelcast4plus/src/main/java/com/hazelcast/simulator/utils/BuildInfoUtils.java",
                            "focalName": "getHazelcastVersionFromJarOrNull",
                            "focalStartLn": 65,
                            "focalEndLn": 78,
                            "focalMethod": " static String getHazelcastVersionFromJarOrNull ( String classPath ) { \n try { \n List < File > jarFiles = getFilesFromClassPath ( classPath ) ; \n for ( File jarFile : jarFiles ) { \n String version = getVersion ( jarFile ) ; \n if ( version != null ) { \n return version ; \n } } } catch ( UncheckedIOException ignored ) { \n ignore ( ignored ) ; \n } return null ; \n } "
                        },
                        {
                            "testName": "testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse",
                            "startLn": 37,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse ( ) {\n     assertFalse(isMinVersion(\"STR\",null));\n}",
                            "oracle": "assertFalse(isMinVersion(\"STR\",null));",
                            "oracleLn": 39,
                            "focalFile": "drivers/driver-hazelcast4plus/src/main/java/com/hazelcast/simulator/utils/BuildInfoUtils.java",
                            "focalName": "isMinVersion",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " static boolean isMinVersion ( String minVersion , String version ) { \n if ( version == null ) { \n return false ; \n } return VersionUtils . isMinVersion ( minVersion , getVersion ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "WorkerProcessFailureMonitorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/agent/workerprocess/WorkerProcessFailureMonitorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 64,
                        "endLn": 79,
                        "setupMethod": "@Before\n public void before ( ) { \n File simulatorHome = setupFakeEnvironment ( ) ; \n workersHome = new File ( simulatorHome , \"STR\" ) ; \n failureHandler = mock ( WorkerProcessFailureHandler . class ) ; \n Server server = mock ( Server . class ) ; \n workerProcessManager = new WorkerProcessManager ( server , SimulatorAddress . fromString ( \"STR\" ) , \"STR\" ) ; \n workerProcessFailureMonitor = new WorkerProcessFailureMonitor ( failureHandler , workerProcessManager , DEFAULT_LAST_SEEN_TIMEOUT_SECONDS , DEFAULT_CHECK_INTERVAL ) ; \n workerProcessFailureMonitor . start ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRun_shouldContinueAfterExceptionDuringDetection",
                            "startLn": 104,
                            "endLn": 122,
                            "testMethod": "@ Test ( timeout = DEFAULT_TIMEOUT ) public void testRun_shouldContinueAfterExceptionDuringDetection ( ) {\n     WorkerProcess workerProcess = addRunningWorkerProcess ( ) ; \n     Process process = workerProcess . getProcess ( ) ; \n     reset ( process ) ; \n     when ( process . exitValue ( ) ) . thenThrow ( new IllegalArgumentException ( \"STR\" ) ) ; \n     sleepMillis ( 5 * DEFAULT_SLEEP_TIME ) ; \n     ensureExistingFile ( workerProcess . getWorkerHome ( ) , \"STR\" ) ; \n     assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});\n}",
                            "oracle": "assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertFailureType(failureHandler,WORKER_OOME);}});",
                            "oracleLn": 112,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/FileUtils.java",
                            "focalName": "ensureExistingFile",
                            "focalStartLn": 237,
                            "focalEndLn": 239,
                            "focalMethod": " public static File ensureExistingFile ( File parent , String fileName ) { \n return ensureExistingFile ( new File ( parent , fileName ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "WizardUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/wizard/WizardUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 34,
                        "endLn": 38,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n parent = new File ( \"STR\" ) . getAbsoluteFile ( ) ; \n ensureExistingDirectory ( parent ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetFileFromUrl_fromJarFile",
                            "startLn": 140,
                            "endLn": 148,
                            "testMethod": "@Test\n public void testGetFileFromUrl_fromJarFile ( ) throws Exception {\n     URL url = new URL ( \"STR\" ) ; \n     File file = WizardUtils . getFileFromUrl ( url , \"STR\" ) ; \n     assertNotNull(file);\n}",
                            "oracle": "assertNotNull(file);",
                            "oracleLn": 144,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/wizard/WizardUtils.java",
                            "focalName": "getFileFromUrl",
                            "focalStartLn": 128,
                            "focalEndLn": 159,
                            "focalMethod": " static File getFileFromUrl ( URL url , String className ) { \n String extURL = url . toExternalForm ( ) ; \n if ( extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( 0 , extURL . lastIndexOf ( '/' ) ) ; \n } else { \n String suffix = \"STR\" + className . replace ( \"STR\" , \"STR\" ) + \"STR\" ; \n extURL = extURL . replace ( suffix , \"STR\" ) ; \n if ( extURL . startsWith ( \"STR\" ) && extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( FILE_EXTENSION_LENGTH , extURL . lastIndexOf ( '/' ) ) ; \n } } try { \n url = new URL ( extURL ) ; \n } catch ( MalformedURLException e ) { \n EmptyStatement . ignore ( e ) ; \n } try { \n return new File ( url . toURI ( ) ) ; \n } catch ( Exception ignored ) { \n return new File ( url . getPath ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testGetFileFromUrl_fromJar",
                            "startLn": 130,
                            "endLn": 138,
                            "testMethod": "@Test\n public void testGetFileFromUrl_fromJar ( ) throws Exception {\n     URL url = new URL ( \"STR\" ) ; \n     File file = WizardUtils . getFileFromUrl ( url , \"STR\" ) ; \n     assertNotNull(file);\n}",
                            "oracle": "assertNotNull(file);",
                            "oracleLn": 134,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/wizard/WizardUtils.java",
                            "focalName": "getFileFromUrl",
                            "focalStartLn": 128,
                            "focalEndLn": 159,
                            "focalMethod": " static File getFileFromUrl ( URL url , String className ) { \n String extURL = url . toExternalForm ( ) ; \n if ( extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( 0 , extURL . lastIndexOf ( '/' ) ) ; \n } else { \n String suffix = \"STR\" + className . replace ( \"STR\" , \"STR\" ) + \"STR\" ; \n extURL = extURL . replace ( suffix , \"STR\" ) ; \n if ( extURL . startsWith ( \"STR\" ) && extURL . endsWith ( \"STR\" ) ) { \n extURL = extURL . substring ( FILE_EXTENSION_LENGTH , extURL . lastIndexOf ( '/' ) ) ; \n } } try { \n url = new URL ( extURL ) ; \n } catch ( MalformedURLException e ) { \n EmptyStatement . ignore ( e ) ; \n } try { \n return new File ( url . toURI ( ) ) ; \n } catch ( Exception ignored ) { \n return new File ( url . getPath ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testGetProfileFile_withZshrc",
                            "startLn": 77,
                            "endLn": 85,
                            "testMethod": "@Test\n public void testGetProfileFile_withZshrc ( ) {\n     File expectedFile = new File ( parent , \"STR\" ) ; \n     writeText ( \"STR\" , expectedFile ) ; \n     File actualFile = getProfileFile ( parent . getPath ( ) ) ; \n     assertEquals(expectedFile.getPath(),actualFile.getPath());\n}",
                            "oracle": "assertEquals(expectedFile.getPath(),actualFile.getPath());",
                            "oracleLn": 82,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/wizard/WizardUtils.java",
                            "focalName": "getProfileFile",
                            "focalStartLn": 52,
                            "focalEndLn": 71,
                            "focalMethod": " static File getProfileFile ( String directory ) { \n File zshrcFile = new File ( directory , \"STR\" ) ; \n if ( zshrcFile . isFile ( ) ) { \n return zshrcFile ; \n } File bashrcFile = new File ( directory , \"STR\" ) ; \n if ( bashrcFile . isFile ( ) ) { \n return bashrcFile ; \n } File profileFile = new File ( directory , \"STR\" ) ; \n if ( profileFile . isFile ( ) ) { \n return profileFile ; \n } throw new CommandLineExitException ( \"STR\" + \"STR\" + directory + \"STR\" + \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "UuidUtilTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/UuidUtilTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testNewUnsecureUUID",
                            "startLn": 41,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testNewUnsecureUUID ( ) {\n     UUID uuid = newUnsecureUUID ( ) ; \n     assertNotNull(uuid);\n}",
                            "oracle": "assertNotNull(uuid);",
                            "oracleLn": 44,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/UuidUtil.java",
                            "focalName": "newUnsecureUUID",
                            "focalStartLn": 84,
                            "focalEndLn": 86,
                            "focalMethod": " public static UUID newUnsecureUUID ( ) { \n return getUUID ( THREAD_LOCAL_UNSECURE_RANDOM . get ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "WorkerQueryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n list = new LinkedList < WorkerData > ( ) ; \n agent1 = agentAddress ( 1 ) ; \n agent2 = agentAddress ( 2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "targetType_whenPreferClients",
                            "startLn": 108,
                            "endLn": 119,
                            "testMethod": "@Test\n public void targetType_whenPreferClients ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setTargetType ( TargetType . CLIENT ) . execute ( list ) ; \n     assertEquals(asList(list.get(0),list.get(2)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(0),list.get(2)),result);",
                            "oracleLn": 115,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        },
                        {
                            "testName": "workerAddresses",
                            "startLn": 148,
                            "endLn": 159,
                            "testMethod": "@Test\n public void workerAddresses ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent2 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent2 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setWorkerAddresses ( asList ( list . get ( 0 ) . getAddress ( ) . toString ( ) , list . get ( 2 ) . getAddress ( ) . toString ( ) ) ) . execute ( list ) ; \n     assertEquals(asList(list.get(0),list.get(2)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(0),list.get(2)),result);",
                            "oracleLn": 155,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        },
                        {
                            "testName": "versionSpec",
                            "startLn": 42,
                            "endLn": 53,
                            "testMethod": "@Test\n public void versionSpec ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setVersionSpec ( \"STR\" ) . execute ( list ) ; \n     assertEquals(asList(list.get(1),list.get(3)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(1),list.get(3)),result);",
                            "oracleLn": 49,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ReflectionUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testInvokeMethod",
                            "startLn": 169,
                            "endLn": 177,
                            "testMethod": "@Test\n public void testInvokeMethod ( ) throws Exception {\n     assertFalse(InvokeMethodTest.hasBeenInvoked);\n}",
                            "oracle": "assertFalse(InvokeMethodTest.hasBeenInvoked);",
                            "oracleLn": 171,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionUtils.java",
                            "focalName": "invokeMethod",
                            "focalStartLn": 114,
                            "focalEndLn": 128,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < E > E invokeMethod ( Object classInstance , Method method , Object ... args ) throws Exception { \n if ( method == null ) { \n return null ; \n } try { \n return ( E ) method . invoke ( classInstance , args ) ; \n } catch ( InvocationTargetException e ) { \n if ( e . getCause ( ) instanceof Error ) { \n throw ( Error ) e . getCause ( ) ; \n } throw ( Exception ) e . getCause ( ) ; \n } } "
                        },
                        {
                            "testName": "testGetField_primitive",
                            "startLn": 76,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testGetField_primitive ( ) {\n     Field field = getField ( GetFieldTest . class , \"STR\" , null ) ; \n     assertNotNull(field);\n}",
                            "oracle": "assertNotNull(field);",
                            "oracleLn": 79,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionUtils.java",
                            "focalName": "getField",
                            "focalStartLn": 47,
                            "focalEndLn": 58,
                            "focalMethod": " public static Field getField ( Class classType , String fieldName , Class fieldType ) { \n Field field ; \n do { \n field = findField ( classType , fieldName , fieldType ) ; \n if ( field != null ) { \n return field ; \n } classType = classType . getSuperclass ( ) ; \n } while ( classType != null ) ; \n return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "ReflectionExceptionTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionExceptionTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testConstructor_withCause",
                            "startLn": 15,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testConstructor_withCause ( ) {\n     Throwable cause = new RuntimeException ( ) ; \n     Exception exception = new ReflectionException ( cause ) ; \n     assertEquals(cause,exception.getCause());\n}",
                            "oracle": "assertEquals(cause,exception.getCause());",
                            "oracleLn": 19,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionException.java",
                            "focalName": "ReflectionException",
                            "focalStartLn": 27,
                            "focalEndLn": 29,
                            "focalMethod": " public ReflectionException ( Throwable cause ) { \n super ( cause ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ThrottlingLoggerTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/ThrottlingLoggerTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testThrottling",
                            "startLn": 47,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testThrottling ( ) {\n     long testDurationNanos = SECONDS . toNanos ( 2 ) ; \n     long rateMs = 100 ; \n     int threadCount = 2 ; \n     when ( loggerMock . isEnabledFor ( FATAL ) ) . thenReturn ( true ) ; \n     throttlingLogger = ThrottlingLogger . newLogger ( loggerMock , rateMs ) ; \n     startLoggingThreadsAndAwait ( threadCount , testDurationNanos ) ; \n     assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);\n}",
                            "oracle": "assertRightNumberOfInvocation(loggerMock,testDurationNanos,rateMs);",
                            "oracleLn": 55,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/ThrottlingLogger.java",
                            "focalName": "newLogger",
                            "focalStartLn": 48,
                            "focalEndLn": 50,
                            "focalMethod": " public static ThrottlingLogger newLogger ( Logger delegate , long maximumRateMs ) { \n return new ThrottlingLogger ( delegate , maximumRateMs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FormatUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/FormatUtilsTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testJoinEmptyString",
                            "startLn": 206,
                            "endLn": 210,
                            "testMethod": "@Test\n public void testJoinEmptyString ( ) throws Exception {\n     String joined = join ( Collections . EMPTY_LIST ) ; \n     assertEquals(\"STR\",joined);\n}",
                            "oracle": "assertEquals(\"STR\",joined);",
                            "oracleLn": 209,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/FormatUtils.java",
                            "focalName": "join",
                            "focalStartLn": 142,
                            "focalEndLn": 144,
                            "focalMethod": " public static String join ( Iterable < ? > collection ) { \n return join ( collection , DEFAULT_DELIMITER ) ; \n } "
                        },
                        {
                            "testName": "testHumanReadableByteCount_GigaByte_NoSI",
                            "startLn": 193,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testHumanReadableByteCount_GigaByte_NoSI ( ) {\n     String actual = humanReadableByteCount ( Integer . MAX_VALUE , true ) ; \n     assertEqualsStringFormat(\"STR\",\"STR\",actual);\n}",
                            "oracle": "assertEqualsStringFormat(\"STR\",\"STR\",actual);",
                            "oracleLn": 196,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/FormatUtils.java",
                            "focalName": "humanReadableByteCount",
                            "focalStartLn": 132,
                            "focalEndLn": 140,
                            "focalMethod": " public static String humanReadableByteCount ( long bytes , boolean si ) { \n int unit = si ? SI_BYTES_FACTOR : IEC_BYTES_FACTOR ; \n if ( bytes < unit ) { \n return bytes + \"STR\" ; \n } int exp = ( int ) ( Math . log ( bytes ) / Math . log ( unit ) ) ; \n String pre = ( si ? \"STR\" : \"STR\" ) . charAt ( exp - 1 ) + ( si ? \"STR\" : \"STR\" ) ; \n return format ( Locale . US , \"STR\" , bytes / Math . pow ( unit , exp ) , pre ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GitInfoTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/GitInfoTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testLoadProperties_notExists",
                            "startLn": 46,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testLoadProperties_notExists ( ) {\n     Properties properties = GitInfo . loadGitProperties ( \"STR\" ) ; \n     assertNotNull(properties);\n}",
                            "oracle": "assertNotNull(properties);",
                            "oracleLn": 49,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/GitInfo.java",
                            "focalName": "loadGitProperties",
                            "focalStartLn": 67,
                            "focalEndLn": 81,
                            "focalMethod": " static Properties loadGitProperties ( String fileName ) { \n Properties properties = new Properties ( ) ; \n InputStream inputStream = GitInfo . class . getClassLoader ( ) . getResourceAsStream ( fileName ) ; \n try { \n properties . load ( inputStream ) ; \n return properties ; \n } catch ( NullPointerException e ) { \n LOGGER . trace ( \"STR\" + fileName , e ) ; \n } catch ( Exception e ) { \n LOGGER . warn ( \"STR\" + fileName , e ) ; \n } finally { \n closeQuietly ( inputStream ) ; \n } return new UnknownGitProperties ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimulatorAddressTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAddressLevel",
                            "startLn": 16,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testGetAddressLevel ( ) {\n     assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());\n}",
                            "oracle": "assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());",
                            "oracleLn": 18,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "getAddressLevel",
                            "focalStartLn": 81,
                            "focalEndLn": 83,
                            "focalMethod": " public AddressLevel getAddressLevel ( ) { \n return addressLevel ; \n } "
                        },
                        {
                            "testName": "testFromString_Worker",
                            "startLn": 133,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testFromString_Worker ( ) {\n     assertToAndFromStringEquals(workerAddress(3,7));\n}",
                            "oracle": "assertToAndFromStringEquals(workerAddress(3,7));",
                            "oracleLn": 135,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "workerAddress",
                            "focalStartLn": 72,
                            "focalEndLn": 74,
                            "focalMethod": " public static SimulatorAddress workerAddress ( int agentIndex , int workerIndex ) { \n return new SimulatorAddress ( WORKER , checkPositive ( agentIndex , \"STR\" ) , checkPositive ( workerIndex , \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FailureOperationTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/operations/FailureOperationTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void before ( ) { \n testCase = new TestCase ( TEST_ID ) ; \n cause = new TestException ( \"STR\" ) ; \n operation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , cause ) ; \n fullOperation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , \"STR\" , TEST_ID , null ) . setTestCase ( testCase ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetWorkerAddress_whenWorkerAddressIsNull",
                            "startLn": 49,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testGetWorkerAddress_whenWorkerAddressIsNull ( ) {\n     operation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , null , null , cause ) ; \n     assertNull(operation.getWorkerAddress());\n}",
                            "oracle": "assertNull(operation.getWorkerAddress());",
                            "oracleLn": 52,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/operations/FailureOperation.java",
                            "focalName": "getWorkerAddress",
                            "focalStartLn": 115,
                            "focalEndLn": 120,
                            "focalMethod": " public SimulatorAddress getWorkerAddress ( ) { \n if ( workerAddress == null ) { \n return null ; \n } return SimulatorAddress . fromString ( workerAddress ) ; \n } "
                        },
                        {
                            "testName": "testGetWorkerAddress",
                            "startLn": 44,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testGetWorkerAddress ( ) {\n     assertEquals(workerAddress,operation.getWorkerAddress());\n}",
                            "oracle": "assertEquals(workerAddress,operation.getWorkerAddress());",
                            "oracleLn": 46,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/operations/FailureOperation.java",
                            "focalName": "getWorkerAddress",
                            "focalStartLn": 115,
                            "focalEndLn": 120,
                            "focalMethod": " public SimulatorAddress getWorkerAddress ( ) { \n if ( workerAddress == null ) { \n return null ; \n } return SimulatorAddress . fromString ( workerAddress ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "DeploymentPlanTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/DeploymentPlanTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 36,
                        "setupMethod": "@Before\n public void before ( ) { \n agent1 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n agent2 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n agent3 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n driver = new FakeDriver ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "whenSingleClientWorker",
                            "startLn": 92,
                            "endLn": 100,
                            "testMethod": "@Test\n public void whenSingleClientWorker ( ) {\n     DeploymentPlan plan = new DeploymentPlan ( driver , registry ) . addToPlan ( 1 , \"STR\" ) ; \n     assertDeploymentPlanWorkerCount(plan,agent1,0,1);\n}",
                            "oracle": "assertDeploymentPlanWorkerCount(plan,agent1,0,1);",
                            "oracleLn": 95,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/DeploymentPlan.java",
                            "focalName": "addToPlan",
                            "focalStartLn": 73,
                            "focalEndLn": 85,
                            "focalMethod": " public DeploymentPlan addToPlan ( int workerCount , String workerType ) { \n for ( int i = 0 ; \n i < workerCount ; \n i ++ ) { \n WorkersPerAgent workersPerAgent = nextAgent ( workerType ) ; \n AgentData agent = workersPerAgent . agent ; \n WorkerParameters workerParameters = driver . loadWorkerParameters ( workerType , agent . getAddressIndex ( ) ) ; \n workersPerAgent . registerWorker ( workerParameters ) ; \n List < WorkerParameters > workerParametersList = workerDeployment . get ( agent . getAddress ( ) ) ; \n workerParametersList . add ( workerParameters ) ; \n } return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "RegistryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testAddTests_testIdFixing",
                            "startLn": 266,
                            "endLn": 279,
                            "testMethod": "@Test\n public void testAddTests_testIdFixing ( ) {\n     TestCase test1 = new TestCase ( \"STR\" ) ; \n     TestCase test2 = new TestCase ( \"STR\" ) ; \n     TestCase test3 = new TestCase ( \"STR\" ) ; \n     registry . addTests ( new TestSuite ( ) . addTest ( test1 ) ) ; \n     registry . addTests ( new TestSuite ( ) . addTest ( test2 ) ) ; \n     registry . addTests ( new TestSuite ( ) . addTest ( test3 ) ) ; \n     assertEquals(\"STR\",test1.getId());\n}",
                            "oracle": "assertEquals(\"STR\",test1.getId());",
                            "oracleLn": 274,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/TestCase.java",
                            "focalName": "getId",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        },
                        {
                            "testName": "testAddTests",
                            "startLn": 253,
                            "endLn": 264,
                            "testMethod": "@Test\n public void testAddTests ( ) {\n     TestSuite testSuite = new TestSuite ( ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     List < TestData > tests = registry . addTests ( testSuite ) ; \n     assertEquals(3,tests.size());\n}",
                            "oracle": "assertEquals(3,tests.size());",
                            "oracleLn": 260,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "addTests",
                            "focalStartLn": 299,
                            "focalEndLn": 317,
                            "focalMethod": " public synchronized List < TestData > addTests ( TestSuite testSuite ) { \n List < TestData > result = new ArrayList < > ( testSuite . size ( ) ) ; \n for ( TestCase testCase : testSuite . getTestCaseList ( ) ) { \n String id = testCase . getId ( ) ; \n AtomicLong count = ids . get ( id ) ; \n if ( count == null ) { \n ids . put ( id , new AtomicLong ( 1 ) ) ; \n } else { \n id = id + \"STR\" + count . getAndIncrement ( ) ; \n } int testIndex = testIndexGenerator . incrementAndGet ( ) ; \n testCase . setId ( id ) ; \n TestData test = new TestData ( testIndex , testCase , testSuite ) ; \n result . add ( test ) ; \n tests . put ( id , test ) ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testGetWorkers_getMemberWorkers_notEnoughWorkersFound",
                            "startLn": 243,
                            "endLn": 251,
                            "testMethod": "@ Test ( expected = IllegalStateException . class ) public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound ( ) {\n     SimulatorAddress agentAddress = addAgent ( ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     assertEquals(4,registry.workerCount());\n}",
                            "oracle": "assertEquals(4,registry.workerCount());",
                            "oracleLn": 248,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "workerCount",
                            "focalStartLn": 181,
                            "focalEndLn": 183,
                            "focalMethod": " public int workerCount ( ) { \n return workers . size ( ) ; \n } "
                        },
                        {
                            "testName": "testGetAgents",
                            "startLn": 67,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetAgents ( ) {\n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     assertEquals(2,registry.agentCount());\n}",
                            "oracle": "assertEquals(2,registry.agentCount());",
                            "oracleLn": 71,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PerformanceMonitorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/performance/PerformanceMonitorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 44,
                        "endLn": 54,
                        "setupMethod": "@Before\n public void before ( ) { \n setupFakeUserDir ( ) ; \n server = mock ( Server . class ) ; \n containerManager = mock ( TestManager . class ) ; \n when ( containerManager . getContainers ( ) ) . thenReturn ( tests . values ( ) ) ; \n performanceMonitor = new PerformanceMonitor ( server , containerManager , 1 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "test_whenTestRunning_thenSendPerformanceStats",
                            "startLn": 98,
                            "endLn": 120,
                            "testMethod": "@Test\n public void test_whenTestRunning_thenSendPerformanceStats ( ) {\n     performanceMonitor . start ( ) ; \n     sleepMillis ( 300 ) ; \n     DummyTest test = new DummyTest ( ) ; \n     TestContext testContext = addTest ( test ) ; \n     Thread runTestThread = new RunTestThread ( ) ; \n     runTestThread . start ( ) ; \n     assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});\n}",
                            "oracle": "assertTrueEventually(newAssertTask(){@Overridepublicvoidrun()throwsException{assertPerfStatsSend();}});",
                            "oracleLn": 106,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CommonUtils.java",
                            "focalName": "sleepMillis",
                            "focalStartLn": 176,
                            "focalEndLn": 182,
                            "focalMethod": " public static void sleepMillis ( long millis ) { \n try { \n MILLISECONDS . sleep ( millis ) ; \n } catch ( InterruptedException ignore ) { \n ignore ( ignore ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "TimeStepModel_probabilityTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TimeStepModel_probabilityTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "test_probability_singleMethod",
                            "startLn": 34,
                            "endLn": 43,
                            "testMethod": "@Test\n public void test_probability_singleMethod ( ) {\n     HashMap < String , Double > probs = new HashMap < String , Double > ( ) ; \n     TimeStepModel model = loadModel ( \"STR\" + \"STR\" + \"STR\" , probs ) ; \n     assertProbability(model,\"STR\",1.0);\n}",
                            "oracle": "assertProbability(model,\"STR\",1.0);",
                            "oracleLn": 38,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TimeStepModel.java",
                            "focalName": "getTimeStepProbabilityArray",
                            "focalStartLn": 331,
                            "focalEndLn": 333,
                            "focalMethod": " public byte [ ] getTimeStepProbabilityArray ( String group ) { \n return executionGroups . get ( group ) . timeStepProbabilityArray ; \n } "
                        }
                    ]
                },
                {
                    "className": "CliUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CliUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n oldSecurityManager = System . getSecurityManager ( ) ; \n System . setSecurityManager ( new ExitExceptionSecurityManager ( true ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInitOptionsWithHelp_noArgs",
                            "startLn": 45,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testInitOptionsWithHelp_noArgs ( ) {\n     OptionSet options = initOptionsWithHelp ( parser , new String [ ] { \n } ) ; \n     assertNotNull(options);\n}",
                            "oracle": "assertNotNull(options);",
                            "oracleLn": 48,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CliUtils.java",
                            "focalName": "initOptionsWithHelp",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static OptionSet initOptionsWithHelp ( OptionParser parser , String [ ] args ) { \n return initOptionsWithHelp ( parser , null , args ) ; \n } "
                        },
                        {
                            "testName": "testInitOptionsWithHelp_optionalArgument",
                            "startLn": 52,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testInitOptionsWithHelp_optionalArgument ( ) {\n     parser . accepts ( \"STR\" , \"STR\" ) ; \n     OptionSet options = initOptionsWithHelp ( parser , new String [ ] { \n \"STR\" } ) ; \n     assertNotNull(options);\n}",
                            "oracle": "assertNotNull(options);",
                            "oracleLn": 56,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CliUtils.java",
                            "focalName": "initOptionsWithHelp",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static OptionSet initOptionsWithHelp ( OptionParser parser , String [ ] args ) { \n return initOptionsWithHelp ( parser , null , args ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PerformanceStatsCollectorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 37,
                        "endLn": 49,
                        "setupMethod": "@Before\n public void before ( ) { \n emptyPerformanceStatsCollector = new PerformanceStatsCollector ( ) ; \n performanceStatsCollector = new PerformanceStatsCollector ( ) ; \n a1w1 = workerAddress ( 1 , 1 ) ; \n a1w2 = workerAddress ( 1 , 2 ) ; \n a2w1 = workerAddress ( 2 , 1 ) ; \n a2w2 = workerAddress ( 2 , 2 ) ; \n a1 = a1w1 . getParent ( ) ; \n a2 = a2w1 . getParent ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGet_testCaseNotFound",
                            "startLn": 109,
                            "endLn": 114,
                            "testMethod": "@Test\n public void testGet_testCaseNotFound ( ) {\n     PerformanceStats performanceStats = performanceStatsCollector . get ( \"STR\" , true ) ; \n     assertTrue(performanceStats.isEmpty());\n}",
                            "oracle": "assertTrue(performanceStats.isEmpty());",
                            "oracleLn": 112,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/performance/PerformanceStats.java",
                            "focalName": "isEmpty",
                            "focalStartLn": 146,
                            "focalEndLn": 148,
                            "focalMethod": " public boolean isEmpty ( ) { \n return ( operationCount == EMPTY_OPERATION_COUNT && intervalThroughput == EMPTY_THROUGHPUT ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FailureTypeTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/FailureTypeTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testFromPropertyValue_empty",
                            "startLn": 27,
                            "endLn": 31,
                            "testMethod": "@Test\n public void testFromPropertyValue_empty ( ) throws Exception {\n     Set < FailureType > types = fromPropertyValue ( \"STR\" ) ; \n     assertThat(types,is(empty()));\n}",
                            "oracle": "assertThat(types,is(empty()));",
                            "oracleLn": 30,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/common/FailureType.java",
                            "focalName": "fromPropertyValue",
                            "focalStartLn": 65,
                            "focalEndLn": 77,
                            "focalMethod": " public static Set < FailureType > fromPropertyValue ( String propertyValue ) { \n if ( propertyValue == null || propertyValue . isEmpty ( ) ) { \n return Collections . emptySet ( ) ; \n } Set < FailureType > result = new HashSet < > ( ) ; \n StringTokenizer tokenizer = new StringTokenizer ( propertyValue , \"STR\" ) ; \n while ( tokenizer . hasMoreTokens ( ) ) { \n String id = tokenizer . nextToken ( ) . trim ( ) ; \n FailureType failureType = getById ( id ) ; \n result . add ( failureType ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "FailureCollectorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/FailureCollectorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 44,
                        "endLn": 70,
                        "setupMethod": "@Before\n public void before ( ) { \n outputDirectory = TestUtils . createTmpDirectory ( ) ; \n registry = new Registry ( ) ; \n failureCollector = new FailureCollector ( outputDirectory , registry ) ; \n agentAddress = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n workerAddress = workerAddress ( agentAddress . getAgentIndex ( ) , 1 ) ; \n WorkerParameters workerParameters = new WorkerParameters ( ) . set ( \"STR\" , workerAddress ) ; \n registry . addWorkers ( singletonList ( workerParameters ) ) ; \n exceptionFailure = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , agentAddress . toString ( ) , \"STR\" , \"STR\" , null ) ; \n abnormalExitFailure = new FailureOperation ( \"STR\" , WORKER_ABNORMAL_EXIT , workerAddress , agentAddress . toString ( ) , \"STR\" , \"STR\" , null ) ; \n oomeFailure = new FailureOperation ( \"STR\" , WORKER_OOME , workerAddress , agentAddress . toString ( ) , \"STR\" , \"STR\" , null ) ; \n normalExitFailure = new FailureOperation ( \"STR\" , WORKER_NORMAL_EXIT , workerAddress , agentAddress . toString ( ) , \"STR\" , \"STR\" , null ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "notify_withPoisonPill",
                            "startLn": 154,
                            "endLn": 159,
                            "testMethod": "@Test\n public void notify_withPoisonPill ( ) {\n     failureCollector.notify(normalExitFailure);\n}",
                            "oracle": "failureCollector.notify(normalExitFailure);",
                            "oracleLn": 156,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/FailureCollector.java",
                            "focalName": "getFailureCount",
                            "focalStartLn": 139,
                            "focalEndLn": 141,
                            "focalMethod": " int getFailureCount ( ) { \n return criticalFailureCounter . get ( ) + nonCriticalFailureCounter . get ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BaseThreadStateTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/test/BaseThreadStateTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "setup",
                        "startLn": 12,
                        "endLn": 15,
                        "setupMethod": "@Before\n public void setup ( ) { \n state = new BaseThreadState ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "randomInt_withBound",
                            "startLn": 17,
                            "endLn": 22,
                            "testMethod": "@Test\n public void randomInt_withBound ( ) {\n     int value = state . randomInt ( 100 ) ; \n     assertTrue(value>=0);\n}",
                            "oracle": "assertTrue(value>=0);",
                            "oracleLn": 20,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/test/BaseThreadState.java",
                            "focalName": "randomInt",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public int randomInt ( int bound ) { \n return random . nextInt ( bound ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestContainer_BasicTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n ExceptionReporter . reset ( ) ; \n userDir = setupFakeUserDir ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass",
                            "startLn": 97,
                            "endLn": 112,
                            "testMethod": "@Test\n public void testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass ( ) throws Exception {\n     ChildWithOwnRunMethodTest test = new ChildWithOwnRunMethodTest ( ) ; \n     testContainer = createTestContainer ( test ) ; \n     testContainer . invoke ( TestPhase . SETUP ) ; \n     testContainer . invoke ( TestPhase . RUN ) ; \n     assertTrue(test.childRunCalled);\n}",
                            "oracle": "assertTrue(test.childRunCalled);",
                            "oracleLn": 103,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "invoke",
                            "focalStartLn": 173,
                            "focalEndLn": 197,
                            "focalMethod": " public void invoke ( TestPhase testPhase ) throws Exception { \n if ( ! currentPhase . compareAndSet ( null , testPhase ) ) { \n throw new IllegalStateException ( format ( \"STR\" , testPhase , testCase . getId ( ) , currentPhase . get ( ) ) ) ; \n } try { \n Callable task = taskPerPhaseMap . get ( testPhase ) ; \n if ( task == null ) { \n return ; \n } task . call ( ) ; \n } catch ( InvocationTargetException e ) { \n Throwable t = e . getTargetException ( ) ; \n if ( t instanceof Error ) { \n throw ( Error ) t ; \n } else if ( t instanceof Exception ) { \n throw ( Exception ) t ; \n } else { \n throw e ; \n } } finally { \n currentPhase . set ( null ) ; \n } } "
                        },
                        {
                            "testName": "testConstructor_withTestClassInstance",
                            "startLn": 31,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testConstructor_withTestClassInstance ( ) {\n     SuccessTest test = new SuccessTest ( ) ; \n     testContainer = new TestContainer ( testContext , test , new TestCase ( \"STR\" ) ) ; \n     assertEquals(test,testContainer.getTestInstance());\n}",
                            "oracle": "assertEquals(test,testContainer.getTestInstance());",
                            "oracleLn": 35,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "getTestInstance",
                            "focalStartLn": 145,
                            "focalEndLn": 147,
                            "focalMethod": " public Object getTestInstance ( ) { \n return testInstance ; \n } "
                        },
                        {
                            "testName": "testIsRunning",
                            "startLn": 78,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testIsRunning ( ) throws Exception {\n     testContainer = createTestContainer ( new BaseTest ( ) ) ; \n     assertFalse(testContainer.isRunning());\n}",
                            "oracle": "assertFalse(testContainer.isRunning());",
                            "oracleLn": 81,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "isRunning",
                            "focalStartLn": 161,
                            "focalEndLn": 163,
                            "focalMethod": " public boolean isRunning ( ) { \n return runStrategy == null ? false : runStrategy . isRunning ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_Test",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_Test.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_withPath",
                            "startLn": 52,
                            "endLn": 56,
                            "testMethod": "@Test\n public void bind_withPath ( ) {\n     bind0 ( someObject , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",someObject.otherObject.stringField);\n}",
                            "oracle": "assertEquals(\"STR\",someObject.otherObject.stringField);",
                            "oracleLn": 55,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ScriptExecutorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "setup",
                        "startLn": 17,
                        "endLn": 21,
                        "setupMethod": "@Before\n public void setup ( ) { \n driver = mock ( Driver . class ) ; \n scriptExecutor = new ScriptExecutor ( driver ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "bash",
                            "startLn": 23,
                            "endLn": 31,
                            "testMethod": "@Test\n public void bash ( ) {\n     ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation ( \"STR\" , false ) ; \n     StubPromise promise = new StubPromise ( ) ; \n     scriptExecutor . execute ( scriptOperation , promise ) ; \n     promise . assertCompletesEventually ( ) ; \n     assertTrue(promise.getAnswer()instanceofString);\n}",
                            "oracle": "assertTrue(promise.getAnswer()instanceofString);",
                            "oracleLn": 29,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/ScriptExecutor.java",
                            "focalName": "execute",
                            "focalStartLn": 42,
                            "focalEndLn": 68,
                            "focalMethod": " public void execute ( final ExecuteScriptOperation operation , final Promise promise ) { \n if ( operation . isFireAndForget ( ) ) { \n promise . answer ( \"STR\" ) ; \n } String fullCommand = operation . getCommand ( ) ; \n int indexColon = fullCommand . indexOf ( \"STR\" ) ; \n String extension = fullCommand . substring ( 0 , indexColon ) ; \n final String command = fullCommand . substring ( indexColon + 1 ) ; \n final Callable < String > task ; \n if ( extension . equals ( \"STR\" ) ) { \n task = newBashScriptCallable ( command ) ; \n } else { \n task = newGenericScriptCallable ( extension , command ) ; \n } new Thread ( ( ) -> { \n try { \n String result = task . call ( ) ; \n promise . answer ( result ) ; \n } catch ( Exception e ) { \n LOGGER . warn ( \"STR\" + command , e ) ; \n promise . answer ( e ) ; \n } } ) . start ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_bind0_NonNumericalTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NonNumericalTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_enum_nullValue",
                            "startLn": 69,
                            "endLn": 73,
                            "testMethod": "@Test\n public void bind_enum_nullValue ( ) {\n     bind0 ( testObject , \"STR\" , \"STR\" ) ; \n     assertNull(testObject.enumField);\n}",
                            "oracle": "assertNull(testObject.enumField);",
                            "oracleLn": 72,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "dbmdz",
            "repoName": "iiif-apis",
            "subRepos": [],
            "commitSHA": "9cee1ae168e761f2d3f78b2204d6a55416ecb1af",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SpecExamplesSerializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/presentation/SpecExamplesSerializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 48,
                        "endLn": 51,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testImageResource",
                            "startLn": 303,
                            "endLn": 315,
                            "testMethod": "@Test\n public void testImageResource ( ) throws Exception {\n     Annotation anno = new Annotation ( \"STR\" , Motivation . PAINTING ) ; \n     anno . setOn ( new Canvas ( \"STR\" ) ) ; \n     ImageContent img = new ImageContent ( \"STR\" ) ; \n     img . setWidth ( 1500 ) ; \n     img . setHeight ( 2000 ) ; \n     img . addService ( new ImageService ( \"STR\" , ImageApiProfile . LEVEL_TWO ) ) ; \n     anno . setResource ( img ) ; \n     assertSerializationEqualsSpec(anno,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(anno,\"STR\");",
                            "oracleLn": 312,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/openannotation/Annotation.java",
                            "focalName": "setResource",
                            "focalStartLn": 47,
                            "focalEndLn": 49,
                            "focalMethod": " public void setResource ( Resource resource ) { \n this . resource = resource ; \n } "
                        },
                        {
                            "testName": "testGenericService",
                            "startLn": 91,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testGenericService ( ) throws Exception {\n     GenericService service = new GenericService ( \"STR\" , \"STR\" , \"STR\" ) ; \n     service . setLabel ( new PropertyValue ( \"STR\" ) ) ; \n     assertSerializationEqualsSpec(service,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(service,\"STR\");",
                            "oracleLn": 95,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/Service.java",
                            "focalName": "setLabel",
                            "focalStartLn": 85,
                            "focalEndLn": 87,
                            "focalMethod": " public void setLabel ( PropertyValue label ) { \n this . label = label ; \n } "
                        },
                        {
                            "testName": "testErrorCondition",
                            "startLn": 96,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testErrorCondition ( ) throws IOException , JSONException {\n     InvalidCredentials err = new InvalidCredentials ( \"STR\" ) ; \n     assertSerializationEqualsSpec(err,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(err,\"STR\");",
                            "oracleLn": 99,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/errors/InvalidCredentials.java",
                            "focalName": "InvalidCredentials",
                            "focalStartLn": 7,
                            "focalEndLn": 9,
                            "focalMethod": " public InvalidCredentials ( String description ) { \n setDescription ( description ) ; \n } "
                        },
                        {
                            "testName": "testKioskPattern",
                            "startLn": 69,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testKioskPattern ( ) throws IOException , JSONException {\n     AccessCookieService service = new AccessCookieService ( \"STR\" , AuthPattern . KIOSK ) ; \n     service . setLabel ( \"STR\" ) ; \n     service . setFailureHeader ( \"STR\" ) ; \n     service . setFailureDescription ( \"STR\" ) ; \n     service . setServices ( Collections . emptyList ( ) ) ; \n     assertSerializationEqualsSpec(service,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(service,\"STR\");",
                            "oracleLn": 76,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/AccessCookieService.java",
                            "focalName": "setServices",
                            "focalStartLn": 173,
                            "focalEndLn": 175,
                            "focalMethod": " public void setServices ( List < AuthService > services ) { \n this . services = services ; \n } "
                        },
                        {
                            "testName": "testAnnotationListPage",
                            "startLn": 203,
                            "endLn": 211,
                            "testMethod": "@Test\n public void testAnnotationListPage ( ) throws Exception {\n     AnnotationList list = new AnnotationList ( \"STR\" ) ; \n     list . setStartIndex ( 0 ) ; \n     list . addWithin ( new Layer ( \"STR\" ) ) ; \n     list . setNext ( new AnnotationList ( \"STR\" ) ) ; \n     list . setResources ( new ArrayList < > ( ) ) ; \n     assertSerializationEqualsSpec(list,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(list,\"STR\");",
                            "oracleLn": 210,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/sharedcanvas/AnnotationList.java",
                            "focalName": "setResources",
                            "focalStartLn": 50,
                            "focalEndLn": 52,
                            "focalMethod": " public void setResources ( List < Annotation > resources ) { \n this . resources = resources ; \n } "
                        }
                    ]
                },
                {
                    "className": "SpecExamplesDeserializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/auth/SpecExamplesDeserializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLoginWithLogout",
                            "startLn": 82,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testLoginWithLogout ( ) throws IOException {\n     AccessCookieService authService = readFromResources ( \"STR\" , AccessCookieService . class ) ; \n     assertThat(authService.getServices()).hasSize(2);\n}",
                            "oracle": "assertThat(authService.getServices()).hasSize(2);",
                            "oracleLn": 85,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/AccessCookieService.java",
                            "focalName": "getServices",
                            "focalStartLn": 169,
                            "focalEndLn": 171,
                            "focalMethod": " public List < AuthService > getServices ( ) { \n return services ; \n } "
                        },
                        {
                            "testName": "testImageResource",
                            "startLn": 217,
                            "endLn": 232,
                            "testMethod": "@Test\n public void testImageResource ( ) throws IOException {\n     Annotation anno = readFromResources ( \"STR\" , Annotation . class ) ; \n     assertThat(anno).isNotNull();\n}",
                            "oracle": "assertThat(anno).isNotNull();",
                            "oracleLn": 220,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/Service.java",
                            "focalName": "getProfiles",
                            "focalStartLn": 54,
                            "focalEndLn": 56,
                            "focalMethod": " public List < Profile > getProfiles ( ) { \n return profiles ; \n } "
                        },
                        {
                            "testName": "testManifestWithRanges",
                            "startLn": 299,
                            "endLn": 312,
                            "testMethod": "@Test\n public void testManifestWithRanges ( ) throws Exception {\n     Manifest manifest = readFromResources ( \"STR\" , Manifest . class ) ; \n     assertThat(manifest.getSequences()).isEmpty();\n}",
                            "oracle": "assertThat(manifest.getSequences()).isEmpty();",
                            "oracleLn": 302,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/sharedcanvas/Manifest.java",
                            "focalName": "getSequences",
                            "focalStartLn": 92,
                            "focalEndLn": 94,
                            "focalMethod": " public List < Sequence > getSequences ( ) { \n return sequences ; \n } "
                        },
                        {
                            "testName": "testCookieServiceWithExternalPattern",
                            "startLn": 55,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testCookieServiceWithExternalPattern ( ) throws IOException {\n     AccessCookieService service = readFromResources ( \"STR\" , AccessCookieService . class ) ; \n     assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);\n}",
                            "oracle": "assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);",
                            "oracleLn": 58,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/AccessCookieService.java",
                            "focalName": "getAuthPattern",
                            "focalStartLn": 80,
                            "focalEndLn": 82,
                            "focalMethod": " public AuthPattern getAuthPattern ( ) { \n return authPattern ; \n } "
                        },
                        {
                            "testName": "testSvgSelector",
                            "startLn": 341,
                            "endLn": 349,
                            "testMethod": "@Test\n public void testSvgSelector ( ) throws Exception {\n     Annotation anno = readFromResources ( \"STR\" , Annotation . class ) ; \n     assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);\n}",
                            "oracle": "assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);",
                            "oracleLn": 344,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/openannotation/Annotation.java",
                            "focalName": "getResource",
                            "focalStartLn": 43,
                            "focalEndLn": 45,
                            "focalMethod": " public Resource < ? > getResource ( ) { \n return resource ; \n } "
                        }
                    ]
                },
                {
                    "className": "ParsingTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/ParsingTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 29,
                        "endLn": 32,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n this . mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testManifestWithStringLogo",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testManifestWithStringLogo ( ) throws Exception {\n     Manifest manifest = readFromResources ( \"STR\" , Manifest . class ) ; \n     assertThat(manifest.getLogoUri().toString()).isEqualTo(\"STR\");\n}",
                            "oracle": "assertThat(manifest.getLogoUri().toString()).isEqualTo(\"STR\");",
                            "oracleLn": 60,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/sharedcanvas/Resource.java",
                            "focalName": "getLogoUri",
                            "focalStartLn": 270,
                            "focalEndLn": 276,
                            "focalMethod": "@JsonIgnore\n public URI getLogoUri ( ) { \n if ( logos == null || logos . isEmpty ( ) ) { \n return null ; \n } return logos . get ( 0 ) . getIdentifier ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyValueTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/PropertyValueTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "multiValuedLanguage",
                            "startLn": 32,
                            "endLn": 45,
                            "testMethod": "@Test\n public void multiValuedLanguage ( ) throws Exception {\n     IiifObjectMapper mapper = new IiifObjectMapper ( ) ; \n     PropertyValue propVal = new PropertyValue ( ) ; \n     propVal . addValue ( Locale . ENGLISH , \"STR\" , \"STR\" ) ; \n     String json = mapper . writeValueAsString ( propVal ) ; \n     assertThat(json).isEqualTo(\"STR\".replace(\"STR\",\"STR\"));\n}",
                            "oracle": "assertThat(json).isEqualTo(\"STR\".replace(\"STR\",\"STR\"));",
                            "oracleLn": 38,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/PropertyValue.java",
                            "focalName": "addValue",
                            "focalStartLn": 61,
                            "focalEndLn": 68,
                            "focalMethod": " public PropertyValue addValue ( Locale language , String first , String ... rest ) { \n if ( this . localizations . containsKey ( language ) ) { \n this . localizations . get ( language ) . addAll ( Lists . asList ( first , rest ) ) ; \n } else { \n setValues ( language , first , rest ) ; \n } return this ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sharneng",
            "repoName": "gm4java",
            "subRepos": [],
            "commitSHA": "92f3f3b64a45f312ef6978f2367263ec64ff0c04",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GMOperationTest",
                    "classPath": "src/test/java/org/gm4java/im4java/GMOperationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 29,
                        "endLn": 32,
                        "setupMethod": "@Before\n public void setup ( ) { \n sut = new GMOperation ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "rotate_Annotation_HeightLargerThanWidth",
                            "startLn": 174,
                            "endLn": 178,
                            "testMethod": "@Test\n public void rotate_Annotation_HeightLargerThanWidth ( ) {\n     sut . rotate ( 90.0 , RotationAnnotation . HeightExceedsWidthOnly ) ; \n     assertThat(sut.getCmdArgs(),hasItem(\"STR\"));\n}",
                            "oracle": "assertThat(sut.getCmdArgs(),hasItem(\"STR\"));",
                            "oracleLn": 177,
                            "focalFile": "src/main/java/org/gm4java/im4java/GMOperation.java",
                            "focalName": "rotate",
                            "focalStartLn": 225,
                            "focalEndLn": 233,
                            "focalMethod": " public GMOperation rotate ( final double degrees , final RotationAnnotation annotation ) { \n if ( annotation == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final List < String > args = getCmdArgs ( ) ; \n args . add ( \"STR\" ) ; \n args . add ( String . format ( Locale . ENGLISH , \"STR\" , degrees , annotation . asAnnotation ( ) ) ) ; \n return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "GMBatchCommandTest",
                    "classPath": "src/test/java/org/gm4java/im4java/GMBatchCommandTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 63,
                        "endLn": 66,
                        "setupMethod": "@Before\n public void setup ( ) { \n MockitoAnnotations . initMocks ( this ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "run_returnsResultBack",
                            "startLn": 144,
                            "endLn": 168,
                            "testMethod": "@Test\n public void run_returnsResultBack ( ) throws Exception {\n     final String command = \"STR\" ; \n     sut = new GMBatchCommand ( service , command ) ; \n     IMOperation op = new IMOperation ( ) ; \n     op . ping ( ) ; \n     final String format = \"STR\" ; \n     op . format ( format ) ; \n     op . addImage ( ) ; \n     ArrayListOutputConsumer output = new ArrayListOutputConsumer ( ) ; \n     sut . setOutputConsumer ( output ) ; \n     when ( service . execute ( anyListOf ( String . class ) ) ) . thenReturn ( \"STR\" ) ; \n     sut . run ( op , SOURCE_IMAGE ) ; \n     verify ( service ) . execute ( Arrays . asList ( command , \"STR\" , \"STR\" , format , SOURCE_IMAGE ) ) ; \n     ArrayList < String > cmdOutput = output . getOutput ( ) ; \n     Iterator < String > iter = cmdOutput . iterator ( ) ; \n     assertThat(iter.next(),is(\"STR\"));\n}",
                            "oracle": "assertThat(iter.next(),is(\"STR\"));",
                            "oracleLn": 160,
                            "focalFile": "src/main/java/org/gm4java/engine/GMService.java",
                            "focalName": "execute",
                            "focalStartLn": 102,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n String execute ( @Nonnull\n List < String > command ) throws IOException , GMException , GMServiceException ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TrackedSetTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testReturnOriginalState",
                            "startLn": 298,
                            "endLn": 328,
                            "testMethod": "@Test\n public void testReturnOriginalState ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     final OTrackedSet < String > trackedSet = new OTrackedSet < String > ( doc ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     final Set < String > original = new HashSet < String > ( trackedSet ) ; \n     final List < OMultiValueChangeEvent < String , String > > firedEvents = new ArrayList < OMultiValueChangeEvent < String , String > > ( ) ; \n     trackedSet . addChangeListener ( new OMultiValueChangeListener < String , String > ( ) { \n public void onAfterRecordChanged ( final OMultiValueChangeEvent < String , String > event ) { \n firedEvents . add ( event ) ; \n } } ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . remove ( \"STR\" ) ; \n     trackedSet . remove ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . remove ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     trackedSet . add ( \"STR\" ) ; \n     Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));\n}",
                            "oracle": "Assert.assertEquals(original,trackedSet.returnOriginalState(firedEvents));",
                            "oracleLn": 318,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/record/OTrackedSet.java",
                            "focalName": "returnOriginalState",
                            "focalStartLn": 189,
                            "focalEndLn": 210,
                            "focalMethod": " public Set < T > returnOriginalState ( final List < OMultiValueChangeEvent < T , T > > multiValueChangeEvents ) { \n final Set < T > reverted = new HashSet < T > ( this ) ; \n final ListIterator < OMultiValueChangeEvent < T , T > > listIterator = multiValueChangeEvents . listIterator ( multiValueChangeEvents . size ( ) ) ; \n while ( listIterator . hasPrevious ( ) ) { \n final OMultiValueChangeEvent < T , T > event = listIterator . previous ( ) ; \n switch ( event . getChangeType ( ) ) { \n case ADD : reverted . remove ( event . getKey ( ) ) ; \n break ; \n case REMOVE : reverted . add ( event . getOldValue ( ) ) ; \n break ; \n default : throw new IllegalArgumentException ( \"STR\" + event . getChangeType ( ) ) ; \n } } return reverted ; \n } "
                        },
                        {
                            "testName": "testClearOne",
                            "startLn": 211,
                            "endLn": 249,
                            "testMethod": "@Test\n public void testClearOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 215,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        },
                        {
                            "testName": "testClearTwo",
                            "startLn": 251,
                            "endLn": 277,
                            "testMethod": "@Test\n public void testClearTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 255,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODirtyManagerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testSetToNullLink",
                            "startLn": 69,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testSetToNullLink ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc2 ) ; \n     doc . field ( \"STR\" , ( Object ) null ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(2,manager.getNewRecords().size());",
                            "oracleLn": 77,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        },
                        {
                            "testName": "testBasic",
                            "startLn": 24,
                            "endLn": 30,
                            "testMethod": "@Test\n public void testBasic ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(1,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(1,manager.getNewRecords().size());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        },
                        {
                            "testName": "testEmbeddedDocument",
                            "startLn": 32,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testEmbeddedDocument ( ) {\n     ODocument doc = new ODocument ( ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc1 , OType . EMBEDDED ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc1 . field ( \"STR\" , doc2 ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(2,manager.getNewRecords().size());",
                            "oracleLn": 40,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        }
                    ]
                },
                {
                    "className": "DoubleSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/DoubleSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n doubleSerializer = new ODoubleSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFieldSize",
                            "startLn": 43,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testFieldSize ( ) {\n     Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(doubleSerializer.getObjectSize(null),FIELD_SIZE);",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/ODoubleSerializer.java",
                            "focalName": "getObjectSize",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public int getObjectSize ( Double object , Object ... hints ) { \n return DOUBLE_SIZE ; \n } "
                        },
                        {
                            "testName": "testSerializeWALChanges",
                            "startLn": 92,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testSerializeWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     final ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     final byte [ ] data = new byte [ FIELD_SIZE ] ; \n     doubleSerializer . serializeNativeObject ( OBJECT , data , 0 ) ; \n     final OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 100,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/ODoubleSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 135,
                            "focalEndLn": 138,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return DOUBLE_SIZE ; \n } "
                        },
                        {
                            "testName": "testNativeDirectMemoryCompatibility",
                            "startLn": 61,
                            "endLn": 70,
                            "testMethod": "@Test\n public void testNativeDirectMemoryCompatibility ( ) {\n     doubleSerializer . serializeNative ( OBJECT , stream , 0 ) ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( stream . length ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     buffer . put ( stream ) ; \n     buffer . position ( 0 ) ; \n     Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);\n}",
                            "oracle": "Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);",
                            "oracleLn": 67,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/ODoubleSerializer.java",
                            "focalName": "deserializeFromByteBufferObject",
                            "focalStartLn": 111,
                            "focalEndLn": 114,
                            "focalMethod": "@Override\n public Double deserializeFromByteBufferObject ( ByteBuffer buffer ) { \n return Double . longBitsToDouble ( buffer . getLong ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OLucenePerFieldAnalyzerWrapperTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/analyzer/OLucenePerFieldAnalyzerWrapperTest.java",
                    "subRepo": "lucene",
                    "classTests": [
                        {
                            "testName": "shouldReturnCustomAnalyzerForEachField",
                            "startLn": 28,
                            "endLn": 42,
                            "testMethod": "@Test\n public void shouldReturnCustomAnalyzerForEachField ( ) throws Exception {\n     OLucenePerFieldAnalyzerWrapper analyzer = new OLucenePerFieldAnalyzerWrapper ( new StandardAnalyzer ( ) ) ; \n     analyzer . add ( \"STR\" , new EnglishAnalyzer ( ) ) ; \n     analyzer . add ( \"STR\" , new ItalianAnalyzer ( ) ) ; \n     assertThat(analyzer.getWrappedAnalyzer(\"STR\")).isNotNull();\n}",
                            "oracle": "assertThat(analyzer.getWrappedAnalyzer(\"STR\")).isNotNull();",
                            "oracleLn": 33,
                            "focalFile": "lucene/src/main/java/com/orientechnologies/lucene/analyzer/OLucenePerFieldAnalyzerWrapper.java",
                            "focalName": "getWrappedAnalyzer",
                            "focalStartLn": 47,
                            "focalEndLn": 51,
                            "focalMethod": "@Override\n protected Analyzer getWrappedAnalyzer ( String fieldName ) { \n Analyzer analyzer = fieldAnalyzers . get ( fieldName ) ; \n return ( analyzer != null ) ? analyzer : defaultAnalyzer ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLLogTransformerTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLLogTransformerTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "redirectSysOutToByteBuff",
                        "startLn": 39,
                        "endLn": 51,
                        "setupMethod": "@Before\n public void redirectSysOutToByteBuff ( ) { \n sysOut = System . err ; \n output = new ByteArrayOutputStream ( ) ; \n System . setErr ( new PrintStream ( output , true ) ) ; \n Logger . getLogger ( \"STR\" ) . addHandler ( new ConsoleHandler ( ) ) ; \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n } @Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPostfix",
                            "startLn": 72,
                            "endLn": 83,
                            "testMethod": "@Test\n public void testPostfix ( ) throws Exception {\n     String cfgJson = \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     String out = output . toString ( ) ; \n     assertThat(out).contains(\"STR\");\n}",
                            "oracle": "assertThat(out).contains(\"STR\");",
                            "oracleLn": 78,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyListIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventUpdateConvertValues",
                            "startLn": 409,
                            "endLn": 426,
                            "testMethod": "@Test\n public void testProcessChangeEventUpdateConvertValues ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < Integer , String > multiValueChangeEvent = new OMultiValueChangeEvent < Integer , String > ( OMultiValueChangeEvent . OChangeType . UPDATE , 0 , \"STR\" , \"STR\" ) ; \n     propertyIndex . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     addedKeys . put ( 41 , 1 ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     removedKeys . put ( 42 , 1 ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 419,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 92,
                            "focalEndLn": 111,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n switch ( changeEvent . getChangeType ( ) ) { \n case ADD : { \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case REMOVE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case UPDATE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } default : throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testProcessChangeEventAddOnceWithConversion",
                            "startLn": 138,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testProcessChangeEventAddOnceWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < Integer , String > multiValueChangeEvent = new OMultiValueChangeEvent < Integer , String > ( OMultiValueChangeEvent . OChangeType . ADD , 0 , \"STR\" ) ; \n     propertyIndex . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     addedKeys . put ( 42 , 1 ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 147,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 92,
                            "focalEndLn": 111,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n switch ( changeEvent . getChangeType ( ) ) { \n case ADD : { \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case REMOVE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case UPDATE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } default : throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "OneEntryPerKeyLockManagerNullKeysTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/concur/lock/OneEntryPerKeyLockManagerNullKeysTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void before ( ) { \n manager = new OOneEntryPerKeyLockManager < String > ( true , - 1 , 100 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNullKeyExclusive",
                            "startLn": 80,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testNullKeyExclusive ( ) {\n     manager . acquireExclusiveLock ( null ) ; \n     final Lock lock = manager . acquireExclusiveLock ( null ) ; \n     assertEquals(2,wrapper(lock).getLockCount());\n}",
                            "oracle": "assertEquals(2,wrapper(lock).getLockCount());",
                            "oracleLn": 84,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/concur/lock/OOneEntryPerKeyLockManager$CountableLockWrapper.java",
                            "focalName": "getLockCount",
                            "focalStartLn": 285,
                            "focalEndLn": 287,
                            "focalMethod": " int getLockCount ( ) { \n return countableLock . countLocks . get ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testOperatorPriority3",
                            "startLn": 465,
                            "endLn": 492,
                            "testMethod": "@Test\n public void testOperatorPriority3 ( ) {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult2 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult3 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult4 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > qResult5 = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),qResult2.size());\n}",
                            "oracle": "assertEquals(qResult.size(),qResult2.size());",
                            "oracleLn": 472,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testLimitWithNamedParam",
                            "startLn": 534,
                            "endLn": 540,
                            "testMethod": "@Test\n public void testLimitWithNamedParam ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , 2 ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 539,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testProjection2",
                            "startLn": 378,
                            "endLn": 386,
                            "testMethod": "@Test\n public void testProjection2 ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testComparisonOfShorts",
                            "startLn": 1490,
                            "endLn": 1506,
                            "testMethod": "@Test\n public void testComparisonOfShorts ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1499,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testEmbeddedMapOfMapsContainsValue",
                            "startLn": 1528,
                            "endLn": 1545,
                            "testMethod": "@Test\n public void testEmbeddedMapOfMapsContainsValue ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1537,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testInvertedIndexedCondition",
                            "startLn": 1547,
                            "endLn": 1574,
                            "testMethod": "@Test\n public void testInvertedIndexedCondition ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1555,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDoNotUseIndexWithOrNotIndexed",
                            "startLn": 348,
                            "endLn": 356,
                            "testMethod": "@Test\n public void testDoNotUseIndexWithOrNotIndexed ( ) throws Exception {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(indexUsages(db),idxUsagesBefore);\n}",
                            "oracle": "assertEquals(indexUsages(db),idxUsagesBefore);",
                            "oracleLn": 352,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OETLOrientDBLoaderTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/loader/OETLOrientDBLoaderTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldSaveDocuments",
                            "startLn": 140,
                            "endLn": 160,
                            "testMethod": "@Test\n public void shouldSaveDocuments ( ) {\n     configure ( \"STR\" + \"STR\" + name . getMethodName ( ) + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     proc . execute ( ) ; \n     ODatabaseDocument db = proc . getLoader ( ) . getPool ( ) . acquire ( ) ; \n     List < ? > res = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertThat(res.size()).isEqualTo(1);\n}",
                            "oracle": "assertThat(res.size()).isEqualTo(1);",
                            "oracleLn": 146,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OrientGraphFactoryTest",
                    "classPath": "graphdb/src/test/java/com/tinkerpop/blueprints/impls/orient/OrientGraphFactoryTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) { \n OrientBaseGraph . clearInitStack ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "createNoTxPool",
                            "startLn": 72,
                            "endLn": 85,
                            "testMethod": "@Test\n public void createNoTxPool ( ) {\n     OrientGraph graph = new OrientGraph ( \"STR\" ) ; \n     graph . shutdown ( ) ; \n     OrientGraphFactory factory = new OrientGraphFactory ( \"STR\" ) ; \n     factory . setupPool ( 5 , 10 ) ; \n     OrientBaseGraph g = factory . getNoTx ( ) ; \n     assertSame(g,OrientBaseGraph.getActiveGraph());\n}",
                            "oracle": "assertSame(g,OrientBaseGraph.getActiveGraph());",
                            "oracleLn": 79,
                            "focalFile": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientBaseGraph.java",
                            "focalName": "getActiveGraph",
                            "focalStartLn": 260,
                            "focalEndLn": 262,
                            "focalMethod": " public static OrientBaseGraph getActiveGraph ( ) { \n return activeGraph . get ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLCSVExtractorTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCustomNullValueInCell",
                            "startLn": 300,
                            "endLn": 312,
                            "testMethod": "@Test\n public void testCustomNullValueInCell ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 306,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        },
                        {
                            "testName": "testDateTypeAutodetection",
                            "startLn": 80,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testDateTypeAutodetection ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     ODocument doc = res . get ( 0 ) ; \n     Date birthday = doc . field ( \"STR\" ) ; \n     assertEquals(2008,birthday.getYear()+1900);\n}",
                            "oracle": "assertEquals(2008,birthday.getYear()+1900);",
                            "oracleLn": 88,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testFloatWithinQuotesAndCommaAsDecimalSeparator",
                            "startLn": 162,
                            "endLn": 174,
                            "testMethod": "@Test\n public void testFloatWithinQuotesAndCommaAsDecimalSeparator ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 168,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        },
                        {
                            "testName": "testCRLFDelimiter",
                            "startLn": 344,
                            "endLn": 357,
                            "testMethod": "@Test\n public void testCRLFDelimiter ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 350,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        },
                        {
                            "testName": "testStringStartedFromDigit",
                            "startLn": 121,
                            "endLn": 132,
                            "testMethod": "@Test\n public void testStringStartedFromDigit ( ) throws Exception {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 127,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OChainIndexFetchTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OChainIndexFetchTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OChainIndexFetchTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFetchChaninedIndex",
                            "startLn": 29,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testFetchChaninedIndex ( ) {\n     OClass baseClass = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     OProperty propr = baseClass . createProperty ( \"STR\" , OType . LINK ) ; \n     OClass linkedClass = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     OProperty id = linkedClass . createProperty ( \"STR\" , OType . STRING ) ; \n     id . createIndex ( INDEX_TYPE . UNIQUE ) ; \n     propr . setLinkedClass ( linkedClass ) ; \n     propr . createIndex ( INDEX_TYPE . NOTUNIQUE ) ; \n     ODocument doc = new ODocument ( linkedClass ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc ) ; \n     ODocument doc1 = new ODocument ( baseClass ) ; \n     doc1 . field ( \"STR\" , doc ) ; \n     db . save ( doc1 ) ; \n     List < ODocument > res = db . query ( new OSQLSynchQuery ( \"STR\" ) ) ; \n     assertEquals(0,res.size());\n}",
                            "oracle": "assertEquals(0,res.size());",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OrientDBConfigTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/OrientDBConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testParentConfig",
                            "startLn": 61,
                            "endLn": 76,
                            "testMethod": "@Test\n public void testParentConfig ( ) {\n     OrientDBConfig parent = OrientDBConfig . builder ( ) . addConfig ( OGlobalConfiguration . DB_POOL_MAX , 20 ) . addAttribute ( ATTRIBUTES . VALIDATION , true ) . build ( ) ; \n     OrientDBConfig settings = OrientDBConfig . builder ( ) . addConfig ( OGlobalConfiguration . CLIENT_CONNECTION_STRATEGY , \"STR\" ) . addAttribute ( ATTRIBUTES . VALIDATION , false ) . build ( ) ; \n     settings . setParent ( parent ) ; \n     assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);\n}",
                            "oracle": "assertEquals(settings.getConfigurations().getValue(OGlobalConfiguration.DB_POOL_MAX),(Integer)20);",
                            "oracleLn": 66,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/config/OContextConfiguration.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 73,
                            "focalMethod": " public Object getValue ( final OGlobalConfiguration iConfig ) { \n if ( config != null && config . containsKey ( iConfig . getKey ( ) ) ) return config . get ( iConfig . getKey ( ) ) ; \n return iConfig . getValue ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialIntersectsTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialIntersectsTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIntersectsIndex",
                            "startLn": 48,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testIntersectsIndex ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(execute.size(),1);\n}",
                            "oracle": "Assert.assertEquals(execute.size(),1);",
                            "oracleLn": 56,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialIOTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialIOTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGeometryCollection",
                            "startLn": 249,
                            "endLn": 259,
                            "testMethod": "@Test\n public void testGeometryCollection ( ) throws IOException {\n     OGeometryCollectionShapeBuilder builder = new OGeometryCollectionShapeBuilder ( OShapeFactory . INSTANCE ) ; \n     ODocument geometryCollection = geometryCollection ( ) ; \n     GeometryCollection collection = createGeometryCollection ( ) ; \n     String m1 = builder . asText ( geometryCollection ) ; \n     String m2 = collection . toText ( ) ; \n     Assert.assertEquals(m2,m1);\n}",
                            "oracle": "Assert.assertEquals(m2,m1);",
                            "oracleLn": 256,
                            "focalFile": "lucene/src/main/java/com/orientechnologies/spatial/shape/OShapeBuilder.java",
                            "focalName": "asText",
                            "focalStartLn": 101,
                            "focalEndLn": 103,
                            "focalMethod": " public String asText ( ODocument document ) { \n return asText ( fromDoc ( document ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FloatSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n floatSerializer = new OFloatSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeWALChanges",
                            "startLn": 93,
                            "endLn": 106,
                            "testMethod": "@Test\n public void testSerializeWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     byte [ ] data = new byte [ FIELD_SIZE ] ; \n     floatSerializer . serializeNative ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 101,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 135,
                            "focalEndLn": 138,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return FLOAT_SIZE ; \n } "
                        },
                        {
                            "testName": "testSerializeInByteBuffer",
                            "startLn": 72,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testSerializeInByteBuffer ( ) {\n     final int serializationOffset = 5 ; \n     ByteBuffer buffer = ByteBuffer . allocate ( FIELD_SIZE + serializationOffset ) ; \n     buffer . position ( serializationOffset ) ; \n     floatSerializer . serializeInByteBufferObject ( OBJECT , buffer ) ; \n     final int binarySize = buffer . position ( ) - serializationOffset ; \n     Assert.assertEquals(binarySize,FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(binarySize,FIELD_SIZE);",
                            "oracleLn": 79,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "serializeInByteBufferObject",
                            "focalStartLn": 103,
                            "focalEndLn": 106,
                            "focalMethod": "@Override\n public void serializeInByteBufferObject ( Float object , ByteBuffer buffer , Object ... hints ) { \n buffer . putInt ( Float . floatToIntBits ( object ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMultiKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testEqualsDifferentClass",
                            "startLn": 41,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testEqualsDifferentClass ( ) {\n     final OMultiKey multiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     assertFalse(multiKey.equals(\"STR\"));\n}",
                            "oracle": "assertFalse(multiKey.equals(\"STR\"));",
                            "oracleLn": 44,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java",
                            "focalName": "equals",
                            "focalStartLn": 65,
                            "focalEndLn": 80,
                            "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OMultiKey oMultiKey = ( OMultiKey ) o ; \n if ( keys . size ( ) != oMultiKey . keys . size ( ) ) return false ; \n for ( final Object inKey : keys ) { \n if ( ! oMultiKey . keys . contains ( inKey ) ) return false ; \n } return true ; \n } "
                        },
                        {
                            "testName": "testOneKeyNotInMap",
                            "startLn": 73,
                            "endLn": 84,
                            "testMethod": "@Test\n public void testOneKeyNotInMap ( ) {\n     final Map < OMultiKey , Object > multiKeyMap = new HashMap < OMultiKey , Object > ( ) ; \n     final OMultiKey multiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     multiKeyMap . put ( multiKey , new Object ( ) ) ; \n     final OMultiKey anotherMultiKey = new OMultiKey ( Collections . singletonList ( \"STR\" ) ) ; \n     final Object mapResult = multiKeyMap . get ( anotherMultiKey ) ; \n     assertNull(mapResult);\n}",
                            "oracle": "assertNull(mapResult);",
                            "oracleLn": 80,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java",
                            "focalName": "OMultiKey",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " public OMultiKey ( final Collection < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys ) ; \n hash = generateHashCode ( keys ) ; \n } "
                        },
                        {
                            "testName": "testTwoKeyMap",
                            "startLn": 86,
                            "endLn": 97,
                            "testMethod": "@Test\n public void testTwoKeyMap ( ) {\n     final Map < OMultiKey , Object > multiKeyMap = new HashMap < OMultiKey , Object > ( ) ; \n     final OMultiKey multiKey = new OMultiKey ( Arrays . asList ( new String [ ] { \n \"STR\" , \"STR\" } ) ) ; \n     multiKeyMap . put ( multiKey , new Object ( ) ) ; \n     final OMultiKey anotherMultiKey = new OMultiKey ( Arrays . asList ( new String [ ] { \n \"STR\" , \"STR\" } ) ) ; \n     final Object mapResult = multiKeyMap . get ( anotherMultiKey ) ; \n     assertNotNull(mapResult);\n}",
                            "oracle": "assertNotNull(mapResult);",
                            "oracleLn": 93,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java",
                            "focalName": "OMultiKey",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " public OMultiKey ( final Collection < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys ) ; \n hash = generateHashCode ( keys ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RemoteTransactionSupportTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 50,
                        "endLn": 70,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . CLASS_MINIMUM_CLUSTERS . setValue ( 1 ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n orientDB = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( RemoteTransactionSupportTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = orientDB . open ( RemoteTransactionSupportTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n OClass klass = database . createClass ( \"STR\" ) ; \n klass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n OClass uniqueClass = database . createClass ( \"STR\" ) ; \n uniqueClass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . UNIQUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryUpdateUpdatedInTxTransaction",
                            "startLn": 72,
                            "endLn": 85,
                            "testMethod": "@Test\n public void testQueryUpdateUpdatedInTxTransaction ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     OIdentifiable id = database . save ( doc ) ; \n     database . begin ( ) ; \n     ODocument doc2 = database . load ( id . getIdentity ( ) ) ; \n     doc2 . setProperty ( \"STR\" , \"STR\" ) ; \n     database . save ( doc2 ) ; \n     OResultSet result = database . command ( \"STR\" ) ; \n     assertEquals((long)result.next().getProperty(\"STR\"),1L);\n}",
                            "oracle": "assertEquals((long)result.next().getProperty(\"STR\"),1L);",
                            "oracleLn": 82,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreateIndexStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateIndexStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIfNotExists",
                            "startLn": 46,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testIfNotExists ( ) {\n     String className = \"STR\" ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . createClass ( className ) ; \n     clazz . createProperty ( \"STR\" , OType . STRING ) ; \n     Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));\n}",
                            "oracle": "Assert.assertNull(db.getMetadata().getIndexManager().getIndex(className+\"STR\"));",
                            "oracleLn": 51,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndexManager.java",
                            "focalName": "getIndex",
                            "focalStartLn": 76,
                            "focalEndLn": 76,
                            "focalMethod": " OIndex < ? > getIndex ( final String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSortTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneSortTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 26,
                        "endLn": 35,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n OClass cls = schema . createClass ( \"STR\" ) ; \n cls . createProperty ( \"STR\" , OType . STRING ) ; \n cls . createProperty ( \"STR\" , OType . STRING ) ; \n cls . createProperty ( \"STR\" , OType . STRING ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldIndexVeryLongDescriptionWithSingleField",
                            "startLn": 52,
                            "endLn": 65,
                            "testMethod": "@Test\n public void shouldIndexVeryLongDescriptionWithSingleField ( ) throws Exception {\n     db . save ( new ODocument ( \"STR\" ) . field ( \"STR\" , DESCRIPTION ) ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     long count = db . query ( \"STR\" ) . stream ( ) . count ( ) ; \n     Assert.assertEquals(1,count);\n}",
                            "oracle": "Assert.assertEquals(1,count);",
                            "oracleLn": 57,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "stream",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " default Stream < OResult > stream ( ) { \n return StreamSupport . stream ( this , false ) . onClose ( ( ) -> this . close ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODatabaseMetadataUpdateListener",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseMetadataUpdateListener.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 64,
                        "setupMethod": "@Before\n public void before ( ) { \n orientDB = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( \"STR\" , ODatabaseType . MEMORY ) ; \n session = orientDB . open ( \"STR\" , \"STR\" , \"STR\" ) ; \n count = 0 ; \n OMetadataUpdateListener listener = new OMetadataUpdateListener ( ) { \n @Override\n public void onSchemaUpdate ( String database , OSchemaShared schema ) { \n count ++ ; \n assertNotNull ( schema ) ; \n } @Override\n public void onIndexManagerUpdate ( String database , OIndexManager indexManager ) { \n count ++ ; \n assertNotNull ( indexManager ) ; \n } @Override\n public void onFunctionLibraryUpdate ( String database ) { \n count ++ ; \n } @Override\n public void onSequenceLibraryUpdate ( String database ) { \n count ++ ; \n } @Override\n public void onStorageConfigurationUpdate ( String database , OStorageConfiguration update ) { \n count ++ ; \n assertNotNull ( update ) ; \n } } ; \n ( ( ODatabaseDocumentInternal ) session ) . getSharedContext ( ) . registerListener ( listener ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSequenceUpdate",
                            "startLn": 79,
                            "endLn": 83,
                            "testMethod": "@Test\n public void testSequenceUpdate ( ) {\n     session . getMetadata ( ) . getSequenceLibrary ( ) . createSequence ( \"STR\" , OSequence . SEQUENCE_TYPE . ORDERED , null ) ; \n     assertEquals(count,1);\n}",
                            "oracle": "assertEquals(count,1);",
                            "oracleLn": 82,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java",
                            "focalName": "createSequence",
                            "focalStartLn": 36,
                            "focalEndLn": 36,
                            "focalMethod": " OSequence createSequence ( String iName , SEQUENCE_TYPE sequenceType , OSequence . CreateParams params ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OPropertyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 17,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testClassName",
                            "startLn": 115,
                            "endLn": 118,
                            "testMethod": "@Test\n public void testClassName ( ) {\n     Assert.assertEquals(\"STR\",propertyIndex.getClassName());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",propertyIndex.getClassName());",
                            "oracleLn": 117,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java",
                            "focalName": "getClassName",
                            "focalStartLn": 55,
                            "focalEndLn": 57,
                            "focalMethod": " public String getClassName ( ) { \n return className ; \n } "
                        }
                    ]
                },
                {
                    "className": "OAlterClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testName1",
                            "startLn": 30,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testName1 ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     Assert.assertNull(schema.getClass(className));\n}",
                            "oracle": "Assert.assertNull(schema.getClass(className));",
                            "oracleLn": 37,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 29,
                        "endLn": 63,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTriangle2Arrows",
                            "startLn": 966,
                            "endLn": 986,
                            "testMethod": "@Test\n public void testTriangle2Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     List < ODocument > result = db . command ( new OCommandSQL ( query . toString ( ) ) ) . execute ( ) ; \n     assertEquals(1,result.size());\n}",
                            "oracle": "assertEquals(1,result.size());",
                            "oracleLn": 977,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testArrayRange3",
                            "startLn": 1143,
                            "endLn": 1157,
                            "testMethod": "@Test\n public void testArrayRange3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     List < ? > result = db . command ( new OCommandSQL ( query . toString ( ) ) ) . execute ( ) ; \n     assertEquals(1,result.size());\n}",
                            "oracle": "assertEquals(1,result.size());",
                            "oracleLn": 1150,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testTriangle3",
                            "startLn": 988,
                            "endLn": 1001,
                            "testMethod": "@Test\n public void testTriangle3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     List < ODocument > result = db . command ( new OCommandSQL ( query . toString ( ) ) ) . execute ( ) ; \n     assertEquals(1,result.size());\n}",
                            "oracle": "assertEquals(1,result.size());",
                            "oracleLn": 999,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        },
                        {
                            "testName": "testAliasesWithSubquery",
                            "startLn": 1367,
                            "endLn": 1374,
                            "testMethod": "@Test\n public void testAliasesWithSubquery ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}",
                            "oracle": "assertEquals(1,qResult.size());",
                            "oracleLn": 1370,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreatePropertyStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateReadOnlyProperty",
                            "startLn": 132,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testCreateReadOnlyProperty ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 138,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testIfNotExists",
                            "startLn": 285,
                            "endLn": 305,
                            "testMethod": "@Test\n public void testIfNotExists ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = clazz . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 291,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testReturnExpressionArrows",
                            "startLn": 498,
                            "endLn": 508,
                            "testMethod": "@Test\n public void testReturnExpressionArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 501,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testPattens",
                            "startLn": 343,
                            "endLn": 354,
                            "testMethod": "@Test\n public void testPattens ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 347,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle3",
                            "startLn": 1114,
                            "endLn": 1130,
                            "testMethod": "@Test\n public void testTriangle3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1125,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle1Arrows",
                            "startLn": 1027,
                            "endLn": 1040,
                            "testMethod": "@Test\n public void testTriangle1Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1035,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testManager2",
                            "startLn": 774,
                            "endLn": 788,
                            "testMethod": "@Test\n public void testManager2 ( ) {\n     Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));",
                            "oracleLn": 776,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testCommonFriendsArrows",
                            "startLn": 412,
                            "endLn": 423,
                            "testMethod": "@Test\n public void testCommonFriendsArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 416,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testArrayRange2",
                            "startLn": 1302,
                            "endLn": 1319,
                            "testMethod": "@Test\n public void testArrayRange2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1309,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OVarIntSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "serializeZero",
                            "startLn": 11,
                            "endLn": 17,
                            "testMethod": "@Test\n public void serializeZero ( ) {\n     BytesContainer bytes = new BytesContainer ( ) ; \n     OVarIntSerializer . write ( bytes , 0 ) ; \n     bytes . offset = 0 ; \n     assertEquals(OVarIntSerializer.readAsLong(bytes),0l);\n}",
                            "oracle": "assertEquals(OVarIntSerializer.readAsLong(bytes),0l);",
                            "oracleLn": 16,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OVarIntSerializer.java",
                            "focalName": "readAsLong",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public static long readAsLong ( final BytesContainer bytes ) { \n return readSignedVarLong ( bytes ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNamedParamsWithIndex",
                            "startLn": 3407,
                            "endLn": 3423,
                            "testMethod": "@Test\n public void testNamedParamsWithIndex ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" , params ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3418,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet2",
                            "startLn": 2045,
                            "endLn": 2059,
                            "testMethod": "@Test\n public void testLet2 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2049,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testNewRid",
                            "startLn": 3219,
                            "endLn": 3231,
                            "testMethod": "@Test\n public void testNewRid ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3222,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testLet3",
                            "startLn": 2061,
                            "endLn": 2071,
                            "testMethod": "@Test\n public void testLet3 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2065,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIndexPrefixUsage",
                            "startLn": 3373,
                            "endLn": 3388,
                            "testMethod": "@Test\n public void testIndexPrefixUsage ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionAbsoluteValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 26,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionAbsoluteValue ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPositiveFloat",
                            "startLn": 108,
                            "endLn": 114,
                            "testMethod": "@Test\n public void testPositiveFloat ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n 10.5F } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofFloat);\n}",
                            "oracle": "assertTrue(resultinstanceofFloat);",
                            "oracleLn": 112,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        },
                        {
                            "testName": "testPositiveBigDecimal",
                            "startLn": 124,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testPositiveBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 128,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORemotePushMessagesTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/ORemotePushMessagesTest.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testSubscribeResponse",
                            "startLn": 162,
                            "endLn": 176,
                            "testMethod": "@Test\n public void testSubscribeResponse ( ) throws IOException {\n     MockChannel channel = new MockChannel ( ) ; \n     OSubscribeResponse response = new OSubscribeResponse ( new OSubscribeLiveQueryResponse ( 10 ) ) ; \n     response . write ( channel , 1 , ORecordSerializerNetworkV37 . INSTANCE ) ; \n     channel . close ( ) ; \n     OSubscribeResponse responseRead = new OSubscribeResponse ( new OSubscribeLiveQueryResponse ( ) ) ; \n     responseRead . read ( channel , null ) ; \n     assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);\n}",
                            "oracle": "assertTrue(responseRead.getResponse()instanceofOSubscribeLiveQueryResponse);",
                            "oracleLn": 170,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OSubscribeResponse.java",
                            "focalName": "getResponse",
                            "focalStartLn": 36,
                            "focalEndLn": 38,
                            "focalMethod": " public OBinaryResponse getResponse ( ) { \n return response ; \n } "
                        },
                        {
                            "testName": "testDistributedConfig",
                            "startLn": 28,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testDistributedConfig ( ) throws IOException {\n     MockChannel channel = new MockChannel ( ) ; \n     List < String > hosts = new ArrayList < > ( ) ; \n     hosts . add ( \"STR\" ) ; \n     hosts . add ( \"STR\" ) ; \n     OPushDistributedConfigurationRequest request = new OPushDistributedConfigurationRequest ( hosts ) ; \n     request . write ( channel ) ; \n     channel . close ( ) ; \n     OPushDistributedConfigurationRequest readRequest = new OPushDistributedConfigurationRequest ( ) ; \n     readRequest . read ( channel ) ; \n     assertEquals(readRequest.getHosts().size(),2);\n}",
                            "oracle": "assertEquals(readRequest.getHosts().size(),2);",
                            "oracleLn": 39,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OPushDistributedConfigurationRequest.java",
                            "focalName": "getHosts",
                            "focalStartLn": 59,
                            "focalEndLn": 61,
                            "focalMethod": " public List < String > getHosts ( ) { \n return hosts ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testNonStrict",
                            "startLn": 363,
                            "endLn": 391,
                            "testMethod": "@Test\n public void testNonStrict ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . getStorage ( ) . setProperty ( OStatement . CUSTOM_STRICT_SQL , \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 372,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testCreateReadOnlyFalseProperty",
                            "startLn": 203,
                            "endLn": 220,
                            "testMethod": "@Test\n public void testCreateReadOnlyFalseProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 211,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 289,
                            "endLn": 313,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 297,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialMiscFunctionsTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDistance",
                            "startLn": 457,
                            "endLn": 477,
                            "testMethod": "@Test\n public void testDistance ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);\n}",
                            "oracle": "assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);",
                            "oracleLn": 461,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "RemoteQuerySupportTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 50,
                        "endLn": 64,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . CLASS_MINIMUM_CLUSTERS . setValue ( 1 ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n orientDB = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( RemoteQuerySupportTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n session = orientDB . open ( RemoteQuerySupportTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n session . createClass ( \"STR\" ) ; \n oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE . getValueAsInteger ( ) ; \n QUERY_REMOTE_RESULTSET_PAGE_SIZE . setValue ( 10 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryEmbeddedSet",
                            "startLn": 187,
                            "endLn": 203,
                            "testMethod": "@Test\n public void testQueryEmbeddedSet ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     ODocument emb = new ODocument ( ) ; \n     emb . setProperty ( \"STR\" , \"STR\" ) ; \n     Set < ODocument > set = new HashSet < > ( ) ; \n     set . add ( emb ) ; \n     doc . setProperty ( \"STR\" , set , OType . EMBEDDEDSET ) ; \n     session . save ( doc ) ; \n     OResultSet res = session . query ( \"STR\" ) ; \n     OResult item = res . next ( ) ; \n     assertNotNull(item.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(item.getProperty(\"STR\"));",
                            "oracleLn": 199,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        },
                        {
                            "testName": "testQueryEmbeddedMap",
                            "startLn": 205,
                            "endLn": 221,
                            "testMethod": "@Test\n public void testQueryEmbeddedMap ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     ODocument emb = new ODocument ( ) ; \n     emb . setProperty ( \"STR\" , \"STR\" ) ; \n     Map < String , ODocument > map = new HashMap < > ( ) ; \n     map . put ( \"STR\" , emb ) ; \n     doc . setProperty ( \"STR\" , map , OType . EMBEDDEDMAP ) ; \n     session . save ( doc ) ; \n     OResultSet res = session . query ( \"STR\" ) ; \n     OResult item = res . next ( ) ; \n     assertNotNull(item.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(item.getProperty(\"STR\"));",
                            "oracleLn": 217,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedListTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddAllNotificationTwo",
                            "startLn": 142,
                            "endLn": 156,
                            "testMethod": "@Test\n public void testAddAllNotificationTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 146,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        },
                        {
                            "testName": "testRemoveIndexOne",
                            "startLn": 446,
                            "endLn": 476,
                            "testMethod": "@Test\n public void testRemoveIndexOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 450,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCreateClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testClusters",
                            "startLn": 58,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testClusters ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OBatchOperationsTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testBatchOperationsNoTx",
                            "startLn": 20,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testBatchOperationsNoTx ( ) throws IOException {\n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     operations . add ( new ORecordOperation ( new ODocument ( ) , ORecordOperation . CREATED ) ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     OBatchOperationsRequest request = new OBatchOperationsRequest ( - 1 , operations ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     request = new OBatchOperationsRequest ( ) ; \n     request . read ( channel , 0 , ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n     assertEquals(request.getOperations().size(),1);\n}",
                            "oracle": "assertEquals(request.getOperations().size(),1);",
                            "oracleLn": 30,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsRequest.java",
                            "focalName": "getOperations",
                            "focalStartLn": 123,
                            "focalEndLn": 125,
                            "focalMethod": " public List < ORecordOperationRequest > getOperations ( ) { \n return operations ; \n } "
                        }
                    ]
                },
                {
                    "className": "OInsertStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OInsertStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLinkMapWithSubqueries",
                            "startLn": 406,
                            "endLn": 427,
                            "testMethod": "@Test\n public void testLinkMapWithSubqueries ( ) {\n     String className = \"STR\" ; \n     String itemclassName = \"STR\" ; \n     db . command ( \"STR\" + className ) ; \n     db . command ( \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + itemclassName + \"STR\" ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName + \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     OResult item = result . next ( ) ; \n     Map theMap = item . getProperty ( \"STR\" ) ; \n     Assert.assertEquals(1,theMap.size());\n}",
                            "oracle": "Assert.assertEquals(1,theMap.size());",
                            "oracleLn": 418,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "CASObjectArrayTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddSingleItem",
                            "startLn": 7,
                            "endLn": 15,
                            "testMethod": "@Test\n public void testAddSingleItem ( ) {\n     final CASObjectArray < Integer > array = new CASObjectArray < > ( ) ; \n     Assert.assertEquals(0,array.size());\n}",
                            "oracle": "Assert.assertEquals(0,array.size());",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java",
                            "focalName": "size",
                            "focalStartLn": 127,
                            "focalEndLn": 129,
                            "focalMethod": " public int size ( ) { \n return size . get ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventRemoveKeyWithConversion",
                            "startLn": 362,
                            "endLn": 378,
                            "testMethod": "@Test\n public void testProcessChangeEventRemoveKeyWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , String > multiValueChangeEvent = new OMultiValueChangeEvent < String , String > ( OMultiValueChangeEvent . OChangeType . REMOVE , \"STR\" , \"STR\" ) ; \n     propertyIndexByIntegerKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     removedKeys . put ( 12 , 1 ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 371,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 142,
                            "focalEndLn": 152,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } "
                        },
                        {
                            "testName": "testProcessChangeEventUpdateKey",
                            "startLn": 414,
                            "endLn": 424,
                            "testMethod": "@Test\n public void testProcessChangeEventUpdateKey ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , Integer > multiValueChangeEvent = new OMultiValueChangeEvent < String , Integer > ( OMultiValueChangeEvent . OChangeType . UPDATE , \"STR\" , 42 ) ; \n     propertyIndexByKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     Assert.assertTrue(keysToAdd.isEmpty());\n}",
                            "oracle": "Assert.assertTrue(keysToAdd.isEmpty());",
                            "oracleLn": 420,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 142,
                            "focalEndLn": 152,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } "
                        },
                        {
                            "testName": "testEmptyIndexByKeyReload",
                            "startLn": 199,
                            "endLn": 217,
                            "testMethod": "@Test\n public void testEmptyIndexByKeyReload ( ) {\n     final ODatabaseDocumentTx database = new ODatabaseDocumentTx ( \"STR\" ) ; \n     database . create ( ) ; \n     propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n     final ODocument docToStore = propertyIndexByKey . toStream ( ) ; \n     database . save ( docToStore , database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     final ODocument docToLoad = database . load ( docToStore . getIdentity ( ) ) ; \n     final OPropertyIndexDefinition result = new OPropertyMapIndexDefinition ( ) ; \n     result . fromStream ( docToLoad ) ; \n     database . drop ( ) ; \n     Assert.assertEquals(result,propertyIndexByKey);\n}",
                            "oracle": "Assert.assertEquals(result,propertyIndexByKey);",
                            "oracleLn": 210,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "drop",
                            "focalStartLn": 1017,
                            "focalEndLn": 1025,
                            "focalMethod": "@Override\n public void drop ( ) { \n checkOpenness ( ) ; \n internal . callOnDropListeners ( ) ; \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n factory . drop ( this . getName ( ) , null , null ) ; \n this . internal = null ; \n clearOwner ( ) ; \n } "
                        },
                        {
                            "testName": "testCreateValueWrongParameterArrayParams",
                            "startLn": 145,
                            "endLn": 149,
                            "testMethod": "@Test\n public void testCreateValueWrongParameterArrayParams ( ) {\n     final Object result = propertyIndexByKey . createValue ( \"STR\" ) ; \n     Assert.assertNull(result);\n}",
                            "oracle": "Assert.assertNull(result);",
                            "oracleLn": 148,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 78,
                            "focalEndLn": 96,
                            "focalMethod": "@Override\n public Object createValue ( Object ... params ) { \n if ( ! ( params [ 0 ] instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params [ 0 ] ) ; \n final List < Object > result = new ArrayList < > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n Object val = createSingleValue ( mapParam ) ; \n result . add ( val ) ; \n } if ( getFieldsToIndex ( ) . size ( ) == 1 && result . size ( ) == 1 ) { \n return result . get ( 0 ) ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testGetTypes",
                            "startLn": 192,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testGetTypes ( ) {\n     final OType [ ] result = propertyIndexByKey . getTypes ( ) ; \n     Assert.assertEquals(result.length,1);\n}",
                            "oracle": "Assert.assertEquals(result.length,1);",
                            "oracleLn": 195,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java",
                            "focalName": "getTypes",
                            "focalStartLn": 133,
                            "focalEndLn": 135,
                            "focalMethod": " public OType [ ] getTypes ( ) { \n return new OType [ ] { \n keyType } ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCreateRecordTaskTest",
                    "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OCreateRecordTaskTest.java",
                    "subRepo": "distributed",
                    "classTests": [
                        {
                            "testName": "testSerialization",
                            "startLn": 12,
                            "endLn": 23,
                            "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     OCreateRecordTask from = new OCreateRecordTask ( ) ; \n     from . init ( new ORecordId ( 12 , 0 ) , \"STR\" . getBytes ( ) , 1 , ( byte ) 0 ) ; \n     OCreateRecordTask to = new OCreateRecordTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getRid(),to.getRid());\n}",
                            "oracle": "Assert.assertEquals(from.getRid(),to.getRid());",
                            "oracleLn": 18,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAbstractRecordReplicatedTask.java",
                            "focalName": "getRid",
                            "focalStartLn": 124,
                            "focalEndLn": 126,
                            "focalMethod": " public ORecordId getRid ( ) { \n return rid ; \n } "
                        }
                    ]
                },
                {
                    "className": "DuplicateNonUniqueIndexChangesTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateNonUniqueIndexChangesTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 42,
                        "endLn": 45,
                        "setupMethod": "@BeforeClass\n public static void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + DuplicateNonUniqueIndexChangesTxTest . class . getSimpleName ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n if ( ! db . isClosed ( ) ) db . drop ( ) ; \n db . create ( ) ; \n final OClass class_ = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n index = class_ . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE_HASH_INDEX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDuplicateValuesOnCreateDelete",
                            "startLn": 176,
                            "endLn": 198,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreateDelete ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . delete ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . delete ( ) ; \n     person4 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     assertRids(\"STR\");\n}",
                            "oracle": "assertRids(\"STR\");",
                            "oracleLn": 188,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "commit",
                            "focalStartLn": 726,
                            "focalEndLn": 731,
                            "focalMethod": "@Override\n public ODatabase < ORecord > commit ( ) throws OTransactionException { \n checkOpenness ( ) ; \n internal . commit ( ) ; \n return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddKeyComposite",
                            "startLn": 74,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testAddKeyComposite ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey compositeKeyToAdd = new OCompositeKey ( ) ; \n     compositeKeyToAdd . addKey ( \"STR\" ) ; \n     compositeKeyToAdd . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( compositeKeyToAdd ) ; \n     assertEquals(compositeKey.getKeys().size(),3);\n}",
                            "oracle": "assertEquals(compositeKey.getKeys().size(),3);",
                            "oracleLn": 82,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "getKeys",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public List < Object > getKeys ( ) { \n return Collections . unmodifiableList ( keys ) ; \n } "
                        },
                        {
                            "testName": "testCompareToPartiallySecondCase",
                            "startLn": 118,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testCompareToPartiallySecondCase ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertEquals(compositeKey.compareTo(anotherCompositeKey),0);\n}",
                            "oracle": "assertEquals(compositeKey.compareTo(anotherCompositeKey),0);",
                            "oracleLn": 127,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "compareTo",
                            "focalStartLn": 107,
                            "focalEndLn": 133,
                            "focalMethod": " public int compareTo ( final OCompositeKey otherKey ) { \n final Iterator < Object > inIter = keys . iterator ( ) ; \n final Iterator < Object > outIter = otherKey . keys . iterator ( ) ; \n while ( inIter . hasNext ( ) && outIter . hasNext ( ) ) { \n final Object inKey = inIter . next ( ) ; \n final Object outKey = outIter . next ( ) ; \n if ( outKey instanceof OAlwaysGreaterKey ) return - 1 ; \n if ( outKey instanceof OAlwaysLessKey ) return 1 ; \n if ( inKey instanceof OAlwaysGreaterKey ) return 1 ; \n if ( inKey instanceof OAlwaysLessKey ) return - 1 ; \n final int result = comparator . compare ( inKey , outKey ) ; \n if ( result != 0 ) return result ; \n } return 0 ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSymmetricKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "shouldTestSpecificAESKey",
                            "startLn": 43,
                            "endLn": 56,
                            "testMethod": "@Test\n public void shouldTestSpecificAESKey ( ) throws Exception {\n     OSymmetricKey sk = new OSymmetricKey ( \"STR\" , \"STR\" ) ; \n     String msgToEncrypt = \"STR\" ; \n     String magic = sk . encrypt ( \"STR\" , msgToEncrypt ) ; \n     String decryptedMsg = sk . decryptAsString ( magic ) ; \n     System . out . println ( \"STR\" + decryptedMsg ) ; \n     assertThat(msgToEncrypt).isEqualTo(decryptedMsg);\n}",
                            "oracle": "assertThat(msgToEncrypt).isEqualTo(decryptedMsg);",
                            "oracleLn": 50,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKey.java",
                            "focalName": "decryptAsString",
                            "focalStartLn": 516,
                            "focalEndLn": 523,
                            "focalMethod": " public String decryptAsString ( final String encodedJSON ) { \n try { \n byte [ ] decrypted = decrypt ( encodedJSON ) ; \n return new String ( decrypted , \"STR\" ) ; \n } catch ( Exception ex ) { \n throw OException . wrapException ( new OSecurityException ( \"STR\" + ex . getMessage ( ) ) , ex ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ONullBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddRemoveAddValue",
                            "startLn": 83,
                            "endLn": 110,
                            "testMethod": "@Test\n public void testAddRemoveAddValue ( ) throws IOException {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     bucket . setValue ( new OSBTreeValue < > ( false , - 1 , \"STR\" ) ) ; \n     bucket . removeValue ( ) ; \n     OSBTreeValue < String > treeValue = bucket . getValue ( ) ; \n     Assert.assertNull(treeValue);\n}",
                            "oracle": "Assert.assertNull(treeValue);",
                            "oracleLn": 95,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucket.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 78,
                            "focalMethod": " public OSBTreeValue < V > getValue ( ) { \n if ( getByteValue ( NEXT_FREE_POSITION ) == 0 ) return null ; \n final boolean isLink = getByteValue ( NEXT_FREE_POSITION + 1 ) == 0 ; \n if ( isLink ) return new OSBTreeValue < V > ( true , getLongValue ( NEXT_FREE_POSITION + 2 ) , null ) ; \n return new OSBTreeValue < V > ( false , - 1 , deserializeFromDirectMemory ( valueSerializer , NEXT_FREE_POSITION + 2 ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneTransactionCompositeQueryTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneTransactionCompositeQueryTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 43,
                        "endLn": 51,
                        "setupMethod": "@Before\n public void init ( ) { \n final OClass c1 = db . createVertexClass ( \"STR\" ) ; \n c1 . createProperty ( \"STR\" , OType . STRING ) ; \n c1 . createProperty ( \"STR\" , OType . STRING ) ; \n c1 . createIndex ( \"STR\" , \"STR\" , null , null , \"STR\" , new String [ ] { \n \"STR\" } ) ; \n c1 . createIndex ( \"STR\" , \"STR\" , null , null , \"STR\" , new String [ ] { \n \"STR\" } ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRollback",
                            "startLn": 53,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testRollback ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . begin ( ) ; \n     db . save ( doc ) ; \n     String query = \"STR\" ; \n     List < ODocument > vertices = db . command ( new OSQLSynchQuery < ODocument > ( query ) ) . execute ( ) ; \n     assertThat(vertices).hasSize(1);\n}",
                            "oracle": "assertThat(vertices).hasSize(1);",
                            "oracleLn": 62,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSBTreeBonsaiNonLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiNonLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , false , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "size",
                            "focalStartLn": 260,
                            "focalEndLn": 262,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( offset + SIZE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OByteBufferUtilsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/util/OByteBufferUtilsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n buffer1 = ByteBuffer . allocate ( 10 ) ; \n buffer2 = ByteBuffer . allocate ( 10 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSpecialSplitLong",
                            "startLn": 290,
                            "endLn": 306,
                            "testMethod": "@Test\n public void testSpecialSplitLong ( ) throws Exception {\n     byte [ ] array = new byte [ 10 ] ; \n     ByteBuffer part1 = ByteBuffer . wrap ( array , 0 , 4 ) ; \n     ByteBuffer part2 = ByteBuffer . wrap ( array , 4 , 4 ) ; \n     ByteBuffer all = ByteBuffer . wrap ( array , 0 , 8 ) ; \n     long value = Long . MAX_VALUE ; \n     OByteBufferUtils . splitLongToBuffers ( part1 , part2 , value ) ; \n     all . position ( 0 ) ; \n     long storedValue = all . getLong ( ) ; \n     assertEquals(value,storedValue);\n}",
                            "oracle": "assertEquals(value,storedValue);",
                            "oracleLn": 300,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OByteBufferUtils.java",
                            "focalName": "splitLongToBuffers",
                            "focalStartLn": 149,
                            "focalEndLn": 158,
                            "focalMethod": " public static void splitLongToBuffers ( final ByteBuffer buffer , final ByteBuffer buffer1 , final long iValue ) { \n final int remaining = buffer . remaining ( ) ; \n int i ; \n for ( i = 0 ; \n i < remaining ; \n ++ i ) { \n buffer . put ( ( byte ) ( iValue > > SIZE_OF_BYTE_IN_BITS * ( SIZE_OF_LONG - i - 1 ) ) ) ; \n } for ( int j = 0 ; \n j < SIZE_OF_LONG - remaining ; \n ++ j ) { \n buffer1 . put ( ( byte ) ( iValue > > SIZE_OF_BYTE_IN_BITS * ( SIZE_OF_LONG - i - j - 1 ) ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ODeleteRecordTaskTest",
                    "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/ODeleteRecordTaskTest.java",
                    "subRepo": "distributed",
                    "classTests": [
                        {
                            "testName": "testSerialization",
                            "startLn": 11,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     ODeleteRecordTask from = new ODeleteRecordTask ( ) ; \n     from . init ( new ORecordId ( 12 , 0 ) , 1 ) ; \n     ODeleteRecordTask to = new ODeleteRecordTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getRid(),to.getRid());\n}",
                            "oracle": "Assert.assertEquals(from.getRid(),to.getRid());",
                            "oracleLn": 17,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAbstractRecordReplicatedTask.java",
                            "focalName": "getRid",
                            "focalStartLn": 124,
                            "focalEndLn": 126,
                            "focalMethod": " public ORecordId getRid ( ) { \n return rid ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestBinaryRecordsQuery",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/select/TestBinaryRecordsQuery.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 26,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" ) ; \n database . create ( ) ; \n database . addBlobCluster ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSelectDeleteBinary",
                            "startLn": 66,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testSelectDeleteBinary ( ) {\n     ORecord rec = database . save ( new ORecordBytes ( \"STR\" . getBytes ( ) ) , \"STR\" ) ; \n     database . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , rec ) ; \n     database . save ( doc ) ; \n     Integer res = database . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     database . getLocalCache ( ) . clear ( ) ; \n     assertEquals(1,res.intValue());\n}",
                            "oracle": "assertEquals(1,res.intValue());",
                            "oracleLn": 75,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/cache/OLocalRecordCache.java",
                            "focalName": "clear",
                            "focalStartLn": 105,
                            "focalEndLn": 108,
                            "focalMethod": "@Override\n public void clear ( ) { \n super . clear ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OLiveQueryMessagesTests",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OLiveQueryMessagesTests.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testRequestWriteRead",
                            "startLn": 22,
                            "endLn": 34,
                            "testMethod": "@Test\n public void testRequestWriteRead ( ) throws IOException {\n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     OSubscribeLiveQueryRequest request = new OSubscribeLiveQueryRequest ( \"STR\" , params ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     OSubscribeLiveQueryRequest requestRead = new OSubscribeLiveQueryRequest ( ) ; \n     requestRead . read ( channel , - 1 , new ORecordSerializerNetworkV37 ( ) ) ; \n     assertEquals(requestRead.getQuery(),\"STR\");\n}",
                            "oracle": "assertEquals(requestRead.getQuery(),\"STR\");",
                            "oracleLn": 32,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OSubscribeLiveQueryRequest.java",
                            "focalName": "getQuery",
                            "focalStartLn": 85,
                            "focalEndLn": 87,
                            "focalMethod": " public String getQuery ( ) { \n return query ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneListIndexingTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneListIndexingTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 49,
                        "endLn": 65,
                        "setupMethod": "@Before\n public void init ( ) { \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n OClass person = schema . createClass ( \"STR\" ) ; \n person . createProperty ( \"STR\" , OType . STRING ) ; \n person . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . STRING ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OClass city = schema . createClass ( \"STR\" ) ; \n city . createProperty ( \"STR\" , OType . STRING ) ; \n city . createProperty ( \"STR\" , OType . EMBEDDEDLIST , OType . STRING ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "rname",
                            "startLn": 199,
                            "endLn": 219,
                            "testMethod": "@Test\n public void rname ( ) throws Exception {\n     final OClass c1 = db . createVertexClass ( \"STR\" ) ; \n     c1 . createProperty ( \"STR\" , OType . STRING ) ; \n     final ODocument metadata = new ODocument ( ) ; \n     metadata . field ( \"STR\" , \"STR\" ) ; \n     c1 . createIndex ( \"STR\" , \"STR\" , null , metadata , \"STR\" , new String [ ] { \n \"STR\" } ) ; \n     final OVertex vertex = db . newVertex ( \"STR\" ) ; \n     vertex . setProperty ( \"STR\" , \"STR\" ) ; \n     db . save ( vertex ) ; \n     db . commit ( ) ; \n     final List < ODocument > search = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertThat(search).hasSize(1);\n}",
                            "oracle": "assertThat(search).hasSize(1);",
                            "oracleLn": 211,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "DefaultValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/DefaultValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 29,
                        "endLn": 33,
                        "setupMethod": "@Before\n public void before ( ) { \n database = new ODatabaseDocumentTx ( \"STR\" + DefaultValueTest . class . getSimpleName ( ) ) ; \n database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDefaultValueProvidedMandatoryReadonlyFromJson",
                            "startLn": 131,
                            "endLn": 147,
                            "testMethod": "@Test\n public void testDefaultValueProvidedMandatoryReadonlyFromJson ( ) {\n     OSchema schema = database . getMetadata ( ) . getSchema ( ) ; \n     OClass classA = schema . createClass ( \"STR\" ) ; \n     OProperty prop = classA . createProperty ( \"STR\" , OType . DATETIME ) ; \n     prop . setMandatory ( true ) ; \n     prop . setReadonly ( true ) ; \n     prop . setDefaultValue ( ODateHelper . getDateTimeFormatInstance ( ) . format ( new Date ( ) ) ) ; \n     String value1 = ODateHelper . getDateTimeFormatInstance ( ) . format ( new Date ( ) ) ; \n     ODocument doc = new ODocument ( ) . fromJSON ( \"STR\" + value1 + \"STR\" ) ; \n     ODocument saved = database . save ( doc ) ; \n     assertNotNull(saved.field(\"STR\"));\n}",
                            "oracle": "assertNotNull(saved.field(\"STR\"));",
                            "oracleLn": 142,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OUTFSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/OUTFSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 17,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n OBJECT = \"STR\" + \"STR\" + \"STR\" ; \n stringSerializer = new OUTF8Serializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNativeDirectMemoryCompatibilityAsWhole",
                            "startLn": 57,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testNativeDirectMemoryCompatibilityAsWhole ( ) {\n     stream = stringSerializer . serializeNativeAsWhole ( OBJECT ) ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( stream . length ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     buffer . put ( stream ) ; \n     buffer . position ( 0 ) ; \n     Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);\n}",
                            "oracle": "Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer),OBJECT);",
                            "oracleLn": 63,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OUTF8Serializer.java",
                            "focalName": "deserializeFromByteBufferObject",
                            "focalStartLn": 97,
                            "focalEndLn": 104,
                            "focalMethod": "@Override\n public String deserializeFromByteBufferObject ( ByteBuffer buffer ) { \n final int encodedSize = buffer . getShort ( ) & INT_MASK ; \n final byte [ ] encoded = new byte [ encodedSize ] ; \n buffer . get ( encoded ) ; \n return new String ( encoded , StandardCharsets . UTF_8 ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODropUserStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropUserStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 22,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPlain",
                            "startLn": 29,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testPlain ( ) {\n     String name = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" ) ; \n     result . close ( ) ; \n     result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 35,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSBTreeBonsaiLeafBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiLeafBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInitialization",
                            "startLn": 25,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testInitialization ( ) throws Exception {\n     OByteBufferPool bufferPool = OByteBufferPool . instance ( null ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     OSBTreeBonsaiBucket < Long , OIdentifiable > treeBucket = new OSBTreeBonsaiBucket < > ( cacheEntry , 0 , true , OLongSerializer . INSTANCE , OLinkSerializer . INSTANCE , null ) ; \n     Assert.assertEquals(treeBucket.size(),0);\n}",
                            "oracle": "Assert.assertEquals(treeBucket.size(),0);",
                            "oracleLn": 34,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java",
                            "focalName": "size",
                            "focalStartLn": 260,
                            "focalEndLn": 262,
                            "focalMethod": " public int size ( ) { \n return getIntValue ( offset + SIZE_OFFSET ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSimpleKeyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER , OType . STRING ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testParamCountOneItem",
                            "startLn": 114,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testParamCountOneItem ( ) {\n     final OSimpleKeyIndexDefinition keyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER ) ; \n     Assert.assertEquals(keyIndexDefinition.getParamCount(),1);\n}",
                            "oracle": "Assert.assertEquals(keyIndexDefinition.getParamCount(),1);",
                            "oracleLn": 117,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java",
                            "focalName": "getParamCount",
                            "focalStartLn": 107,
                            "focalEndLn": 109,
                            "focalMethod": " public int getParamCount ( ) { \n return keyTypes . length ; \n } "
                        },
                        {
                            "testName": "testCreateValueCompositeKeyListParam",
                            "startLn": 41,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testCreateValueCompositeKeyListParam ( ) {\n     final Object result = simpleKeyIndexDefinition . createValue ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n     final OCompositeKey compositeKey = new OCompositeKey ( Arrays . asList ( 2 , \"STR\" ) ) ; \n     Assert.assertEquals(result,compositeKey);\n}",
                            "oracle": "Assert.assertEquals(result,compositeKey);",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CompactedLinkSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/CompactedLinkSerializerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testSerializeThreeBytesInByteBuffer",
                            "startLn": 140,
                            "endLn": 157,
                            "testMethod": "@Test\n public void testSerializeThreeBytesInByteBuffer ( ) {\n     final OCompactedLinkSerializer linkSerializer = new OCompactedLinkSerializer ( ) ; \n     final ORecordId rid = new ORecordId ( 123 , 65628 ) ; \n     final int size = linkSerializer . getObjectSize ( rid ) ; \n     ByteBuffer buffer = ByteBuffer . allocate ( size + 1 ) ; \n     buffer . position ( 1 ) ; \n     linkSerializer . serializeInByteBufferObject ( rid , buffer ) ; \n     buffer . position ( 1 ) ; \n     Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));\n}",
                            "oracle": "Assert.assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));",
                            "oracleLn": 149,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/OCompactedLinkSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 176,
                            "focalEndLn": 179,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer ) { \n return buffer . get ( buffer . position ( ) + OShortSerializer . SHORT_SIZE ) + OByteSerializer . BYTE_SIZE + OShortSerializer . SHORT_SIZE ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCopyDatabaseChunkTaskTest",
                    "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OCopyDatabaseChunkTaskTest.java",
                    "subRepo": "distributed",
                    "classTests": [
                        {
                            "testName": "testSerialization",
                            "startLn": 12,
                            "endLn": 22,
                            "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     OCopyDatabaseChunkTask from = new OCopyDatabaseChunkTask ( \"STR\" , 10 , 20L , false ) ; \n     OCopyDatabaseChunkTask to = new OCopyDatabaseChunkTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getFileName(),to.getFileName());\n}",
                            "oracle": "Assert.assertEquals(from.getFileName(),to.getFileName());",
                            "oracleLn": 17,
                            "focalFile": "distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OCopyDatabaseChunkTask.java",
                            "focalName": "getFileName",
                            "focalStartLn": 127,
                            "focalEndLn": 129,
                            "focalMethod": " public String getFileName ( ) { \n return fileName ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessBinarySerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createSerializer",
                        "startLn": 67,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void createSerializer ( ) { \n if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) ) serializer = new ORecordSerializerNetwork ( ) ; \n else if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) + 1 ) serializer = new ORecordSerializerNetworkV37 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testArrayOfArray",
                            "startLn": 553,
                            "endLn": 573,
                            "testMethod": "@Test\n public void testArrayOfArray ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     String [ ] [ ] array = new String [ 1 ] [ ] ; \n     String [ ] ls = new String [ 2 ] ; \n     ls [ 0 ] = \"STR\" ; \n     ls [ 1 ] = \"STR\" ; \n     array [ 0 ] = ls ; \n     document . field ( \"STR\" , array ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 565,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "OrientDBRemoteTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/core/db/OrientDBRemoteTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 37,
                        "endLn": 47,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . SERVER_BACKWARD_COMPATIBILITY . setValue ( false ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n factory = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testListDatabases",
                            "startLn": 122,
                            "endLn": 129,
                            "testMethod": "@Test\n public void testListDatabases ( ) {\n     assertEquals(factory.list().size(),0);\n}",
                            "oracle": "assertEquals(factory.list().size(),0);",
                            "oracleLn": 124,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/OrientDB.java",
                            "focalName": "list",
                            "focalStartLn": 283,
                            "focalEndLn": 285,
                            "focalMethod": " public List < String > list ( ) { \n return new ArrayList < > ( this . internal . listDatabases ( serverUser , serverPassword ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OrientJdbcResultSetTest",
                    "classPath": "jdbc/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSetTest.java",
                    "subRepo": "jdbc",
                    "before": {
                        "setupName": "prepareDatabase",
                        "startLn": 47,
                        "endLn": 73,
                        "setupMethod": "@Before\n public void prepareDatabase ( ) throws Exception { \n String dbName = name . getMethodName ( ) ; \n Properties info = new Properties ( ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n OrientDataSource ods = new OrientDataSource ( \"STR\" + \"STR\" + dbName , \"STR\" , \"STR\" , info ) ; \n ds = new DataSourceWithLetterCase ( ods , LetterCase . TABLE_DEFAULT , LetterCase . TABLE_DEFAULT , LetterCase . TABLE_DEFAULT ) ; \n conn = ( OrientJdbcConnection ) ds . getConnection ( ) ; \n orientDB = conn . getOrientDB ( ) ; \n db = ( ( OrientJdbcConnection ) ds . getConnection ( ) ) . getDatabase ( ) ; \n createSchemaDB ( db ) ; \n if ( ! new File ( \"STR\" ) . exists ( ) ) OLogManager . instance ( ) . warn ( this , \"STR\" ) ; \n loadDB ( db , 20 ) ; \n db . close ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldReturnEmptyResultSet",
                            "startLn": 58,
                            "endLn": 64,
                            "testMethod": "@Test\n public void shouldReturnEmptyResultSet ( ) throws Exception {\n     ResultSet rs = conn . createStatement ( ) . executeQuery ( \"STR\" ) ; \n     assertThat(rs.next()).isFalse();\n}",
                            "oracle": "assertThat(rs.next()).isFalse();",
                            "oracleLn": 61,
                            "focalFile": "jdbc/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java",
                            "focalName": "createStatement",
                            "focalStartLn": 86,
                            "focalEndLn": 89,
                            "focalMethod": " public Statement createStatement ( ) throws SQLException { \n return new OrientJdbcStatement ( this ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 21,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n compositeIndex = new OCompositeIndexDefinition ( \"STR\" ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueSuccessful",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testCreateValueSuccessful ( ) {\n     final Object result = compositeIndex . createValue ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n     Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));\n}",
                            "oracle": "Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));",
                            "oracleLn": 41,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testCreateValueDefinitionsMoreThanParams",
                            "startLn": 264,
                            "endLn": 270,
                            "testMethod": "@Test\n public void testCreateValueDefinitionsMoreThanParams ( ) {\n     compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n     final Object result = compositeIndex . createValue ( \"STR\" , \"STR\" ) ; \n     Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));\n}",
                            "oracle": "Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));",
                            "oracleLn": 268,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testDocumentToIndexRidBagValueSuccessfulThree",
                            "startLn": 513,
                            "endLn": 542,
                            "testMethod": "@Test\n public void testDocumentToIndexRidBagValueSuccessfulThree ( ) {\n     final ODocument document = new ODocument ( ) ; \n     final ORidBag ridBag = new ORidBag ( ) ; \n     ridBag . setAutoConvertToRecord ( false ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     document . field ( \"STR\" , 12 ) ; \n     document . field ( \"STR\" , ridBag ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyRidBagIndexDefinition ( \"STR\" , \"STR\" ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     final ArrayList < OCompositeKey > expectedResult = new ArrayList < OCompositeKey > ( ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     Assert.assertEquals(result,expectedResult);\n}",
                            "oracle": "Assert.assertEquals(result,expectedResult);",
                            "oracleLn": 533,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testGetFields",
                            "startLn": 29,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testGetFields ( ) {\n     final List < String > fields = compositeIndex . getFields ( ) ; \n     Assert.assertEquals(fields.size(),2);\n}",
                            "oracle": "Assert.assertEquals(fields.size(),2);",
                            "oracleLn": 32,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinition.java",
                            "focalName": "getFields",
                            "focalStartLn": 111,
                            "focalEndLn": 117,
                            "focalMethod": " public List < String > getFields ( ) { \n final List < String > fields = new LinkedList < String > ( ) ; \n for ( final OIndexDefinition indexDefinition : indexDefinitions ) { \n fields . addAll ( indexDefinition . getFields ( ) ) ; \n } return Collections . unmodifiableList ( fields ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialDistanceSphereTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialDistanceSphereTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithinIndex",
                            "startLn": 58,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testWithinIndex ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(2,execute.size());\n}",
                            "oracle": "Assert.assertEquals(2,execute.size());",
                            "oracleLn": 67,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialDropTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialDropTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 44,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n dbName = \"STR\" + this . getClass ( ) . getSimpleName ( ) ; \n insertcount = 100 ; \n ODatabaseDocumentTx db = new ODatabaseDocumentTx ( dbName ) ; \n db . create ( ) ; \n OClass test = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n test . createProperty ( \"STR\" , OType . STRING ) ; \n test . createProperty ( \"STR\" , OType . DOUBLE ) . setMandatory ( false ) ; \n test . createProperty ( \"STR\" , OType . DOUBLE ) . setMandatory ( false ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . close ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDeleteLuceneIndex1",
                            "startLn": 46,
                            "endLn": 71,
                            "testMethod": "@Test\n public void testDeleteLuceneIndex1 ( ) {\n     OPartitionedDatabasePool dbPool = new OPartitionedDatabasePool ( dbName , \"STR\" , \"STR\" ) ; \n     ODatabaseDocumentTx db = dbPool . acquire ( ) ; \n     fillDb ( db , insertcount ) ; \n     db . close ( ) ; \n     db = dbPool . acquire ( ) ; \n     OSQLSynchQuery < ODocument > query = new OSQLSynchQuery < ODocument > ( \"STR\" ) ; \n     List < ODocument > result = db . command ( query ) . execute ( ) ; \n     Assert.assertEquals(insertcount,result.size());\n}",
                            "oracle": "Assert.assertEquals(insertcount,result.size());",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneMiscTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMiscTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUnderscoreField",
                            "startLn": 149,
                            "endLn": 166,
                            "testMethod": "@Test\n public void testUnderscoreField ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OSQLSynchQuery query = new OSQLSynchQuery ( \"STR\" ) ; \n     Map params = new HashMap ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     List results = db . command ( query ) . execute ( params ) ; \n     Assert.assertEquals(results.size(),1);\n}",
                            "oracle": "Assert.assertEquals(results.size(),1);",
                            "oracleLn": 159,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedMapTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testClearTwo",
                            "startLn": 272,
                            "endLn": 298,
                            "testMethod": "@Test\n public void testClearTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     final OTrackedMap < String > trackedMap = new OTrackedMap < String > ( doc ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 280,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialGeometryCollectionTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialGeometryCollectionTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 35,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void init ( ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGeoCollectionOutsideTx",
                            "startLn": 44,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testGeoCollectionOutsideTx ( ) {\n     ODocument test1 = new ODocument ( \"STR\" ) ; \n     test1 . field ( \"STR\" , \"STR\" ) ; \n     ODocument geometry = new ODocument ( \"STR\" ) ; \n     ODocument point = new ODocument ( \"STR\" ) ; \n     point . field ( \"STR\" , Arrays . asList ( 1.0 , 2.0 ) ) ; \n     ODocument polygon = new ODocument ( \"STR\" ) ; \n     polygon . field ( \"STR\" , Arrays . asList ( Arrays . asList ( Arrays . asList ( 0.0 , 0.0 ) , Arrays . asList ( 10.0 , 0.0 ) , Arrays . asList ( 10.0 , 10.0 ) , Arrays . asList ( 0.0 , 10.0 ) , Arrays . asList ( 0.0 , 0.0 ) ) ) ) ; \n     geometry . field ( \"STR\" , Arrays . asList ( point , polygon ) ) ; \n     test1 . field ( \"STR\" , geometry ) ; \n     test1 . save ( ) ; \n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(execute.size(),1);\n}",
                            "oracle": "Assert.assertEquals(execute.size(),1);",
                            "oracleLn": 57,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommitStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCommitStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODatabaseImportTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "exportImportOnlySchemaTest",
                            "startLn": 19,
                            "endLn": 48,
                            "testMethod": "@Test\n public void exportImportOnlySchemaTest ( ) throws IOException {\n     ODatabaseDocument db = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) ) ; \n     db . create ( ) ; \n     db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; \n     ODatabaseExport export = new ODatabaseExport ( ( ODatabaseDocumentInternal ) db , output , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     export . setOptions ( \"STR\" ) ; \n     export . exportDatabase ( ) ; \n     db . drop ( ) ; \n     ODatabaseDocument dbImp = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) ) ; \n     dbImp . create ( ) ; \n     ODatabaseImport importer = new ODatabaseImport ( ( ODatabaseDocumentInternal ) dbImp , new ByteArrayInputStream ( output . toByteArray ( ) ) , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     importer . importDatabase ( ) ; \n     Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "existsClass",
                            "focalStartLn": 56,
                            "focalEndLn": 56,
                            "focalMethod": " boolean existsClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSelectStatementTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OSelectStatementTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testTranslateLucene",
                            "startLn": 739,
                            "endLn": 745,
                            "testMethod": "@Test\n public void testTranslateLucene ( ) {\n     OSelectStatement stm = ( OSelectStatement ) checkRightSyntax ( \"STR\" ) ; \n     stm . whereClause . getBaseExpression ( ) . translateLuceneOperator ( ) ; \n     Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));",
                            "oracleLn": 743,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/SimpleNode.java",
                            "focalName": "toString",
                            "focalStartLn": 115,
                            "focalEndLn": 119,
                            "focalMethod": " public String toString ( ) { \n StringBuilder result = new StringBuilder ( ) ; \n toString ( null , result ) ; \n return result . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLFieldTransformerTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRemove",
                            "startLn": 78,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testRemove ( ) {\n     configure ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(1,getResult().size());\n}",
                            "oracle": "assertEquals(1,getResult().size());",
                            "oracleLn": 82,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BinaryComparatorCompareTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BinaryComparatorCompareTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testDatetime",
                            "startLn": 49,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testDatetime ( ) throws ParseException {\n     testCompareNumber ( OType . DATETIME , 10l ) ; \n     final SimpleDateFormat format = new SimpleDateFormat ( OStorageConfiguration . DEFAULT_DATETIME_FORMAT ) ; \n     String now1 = format . format ( new Date ( ) ) ; \n     Date now = format . parse ( now1 ) ; \n     Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);\n}",
                            "oracle": "Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "compare",
                            "focalStartLn": 51,
                            "focalEndLn": 51,
                            "focalMethod": " int compare ( OBinaryField iValue1 , OBinaryField iValue2 ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ORemoteTransactionMessagesTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/ORemoteTransactionMessagesTest.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testBeginTransactionEmptyWriteRead",
                            "startLn": 23,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testBeginTransactionEmptyWriteRead ( ) throws IOException {\n     MockChannel channel = new MockChannel ( ) ; \n     OBeginTransactionRequest request = new OBeginTransactionRequest ( 0 , false , true , null , null ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     OBeginTransactionRequest readRequest = new OBeginTransactionRequest ( ) ; \n     readRequest . read ( channel , 0 , null ) ; \n     assertFalse(readRequest.isHasContent());\n}",
                            "oracle": "assertFalse(readRequest.isHasContent());",
                            "oracleLn": 31,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBeginTransactionRequest.java",
                            "focalName": "isHasContent",
                            "focalStartLn": 150,
                            "focalEndLn": 152,
                            "focalMethod": " public boolean isHasContent ( ) { \n return hasContent ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCustomSQLFunctionsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/sql/OCustomSQLFunctionsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 24,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OCustomSQLFunctionsTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAbsDouble",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testAbsDouble ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Double)result.get(0).field(\"STR\")==5.0);\n}",
                            "oracle": "assertTrue((Double)result.get(0).field(\"STR\")==5.0);",
                            "oracleLn": 52,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORollbackStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ORollbackStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OLuceneSearchOnIndexFunctionTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/functions/OLuceneSearchOnIndexFunctionTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 18,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n InputStream stream = ClassLoader . getSystemResourceAsStream ( \"STR\" ) ; \n db . execute ( \"STR\" , getScriptFromStream ( stream ) ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldFindNothingOnEmptyQuery",
                            "startLn": 57,
                            "endLn": 68,
                            "testMethod": "@Test\n public void shouldFindNothingOnEmptyQuery ( ) throws Exception {\n     OResultSet resultSet = db . query ( \"STR\" ) ; \n     assertThat(resultSet).hasSize(0);\n}",
                            "oracle": "assertThat(resultSet).hasSize(0);",
                            "oracleLn": 60,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 863,
                            "focalEndLn": 865,
                            "focalMethod": " default OResultSet query ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CharSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n charSerializer = new OCharSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeInWALChanges",
                            "startLn": 91,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testSerializeInWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     final ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     final byte [ ] data = new byte [ FIELD_SIZE ] ; \n     charSerializer . serializeNative ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 99,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OCharSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 142,
                            "focalEndLn": 145,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return CHAR_SIZE ; \n } "
                        }
                    ]
                },
                {
                    "className": "OWALPageV2ChangesPortionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageV2ChangesPortionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void before ( ) { \n Orient . instance ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSingleByteValue",
                            "startLn": 83,
                            "endLn": 95,
                            "testMethod": "@Test\n public void testSingleByteValue ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . put ( 64 , ( byte ) 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setByteValue ( pointer , ( byte ) 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);",
                            "oracleLn": 90,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getByteValue",
                            "focalStartLn": 107,
                            "focalEndLn": 114,
                            "focalMethod": "@Override\n public byte getByteValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ 1 ] ; \n readData ( pointer , offset , data ) ; \n return data [ 0 ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "OJsonWithCustom",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OJsonWithCustom.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCustomField",
                            "startLn": 20,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testCustomField ( ) {\n     boolean old = OGlobalConfiguration . DB_CUSTOM_SUPPORT . getValueAsBoolean ( ) ; \n     OGlobalConfiguration . DB_CUSTOM_SUPPORT . setValue ( true ) ; \n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , String . class , OType . CUSTOM ) ; \n     String json = doc . toJSON ( ) ; \n     System . out . println ( json ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . fromJSON ( json ) ; \n     assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));\n}",
                            "oracle": "assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));",
                            "oracleLn": 30,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OObjectBinaryDataStorageTest",
                    "classPath": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java",
                    "subRepo": "object",
                    "classTests": [
                        {
                            "testName": "testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory",
                            "startLn": 132,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory ( ) throws IOException {\n     this . createDb ( ODocumentFieldHandlingStrategyFactory . SIMPLE ) ; \n     Driver ronnie = this . databaseTx . newInstance ( Driver . class ) ; \n     ronnie . setName ( \"STR\" ) ; \n     byte [ ] ronniePicture = randomBytes ( 1024 * 32 ) ; \n     ronnie . setImageData ( ronniePicture ) ; \n     Driver savedRonnie = this . databaseTx . save ( ronnie ) ; \n     Driver loadedRonnie = this . databaseTx . load ( new ORecordId ( savedRonnie . getId ( ) ) ) ; \n     Assert.assertNotNull(savedRonnie);\n}",
                            "oracle": "Assert.assertNotNull(savedRonnie);",
                            "oracleLn": 141,
                            "focalFile": "object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTx.java",
                            "focalName": "load",
                            "focalStartLn": 401,
                            "focalEndLn": 403,
                            "focalMethod": " public < RET > RET load ( final ORID recordId ) { \n return ( RET ) load ( recordId , null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OConnectionExecutorTransactionTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 45,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void before ( ) { \n MockitoAnnotations . initMocks ( this ) ; \n orientDb = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDb . create ( OConnectionExecutorTransactionTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = ( ODatabaseDocumentInternal ) orientDb . open ( OConnectionExecutorTransactionTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n ONetworkProtocolData protocolData = new ONetworkProtocolData ( ) ; \n protocolData . setSerializer ( ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n Mockito . when ( connection . getDatabase ( ) ) . thenReturn ( database ) ; \n Mockito . when ( connection . getData ( ) ) . thenReturn ( protocolData ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBeginRollbackTransaction",
                            "startLn": 258,
                            "endLn": 276,
                            "testMethod": "@Test\n public void testBeginRollbackTransaction ( ) {\n     OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor ( connection , server ) ; \n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     ODocument rec = new ODocument ( \"STR\" ) ; \n     operations . add ( new ORecordOperation ( rec , ORecordOperation . CREATED ) ) ; \n     assertFalse(database.getTransaction().isActive());\n}",
                            "oracle": "assertFalse(database.getTransaction().isActive());",
                            "oracleLn": 264,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AListTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFromJavaUtil",
                            "startLn": 54,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testFromJavaUtil ( ) {\n     final AList < String > l = AList . < String > nil ( ) . cons ( \"STR\" ) . cons ( \"STR\" ) . cons ( \"STR\" ) ; \n     final AList < String > l2 = AList . create ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ; \n     final AList < String > l3 = AList . create ( ( Iterable < String > ) Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ; \n     assertEquals(l,l2);\n}",
                            "oracle": "assertEquals(l,l2);",
                            "oracleLn": 59,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java",
                            "focalName": "create",
                            "focalStartLn": 44,
                            "focalEndLn": 57,
                            "focalMethod": " public static < T > AList < T > create ( Iterable < T > elements ) { \n if ( elements instanceof AList ) { \n return ( AList < T > ) elements ; \n } if ( elements instanceof List ) { \n return create ( ( List < T > ) elements ) ; \n } AList < T > result = nil ( ) ; \n for ( T el : elements ) { \n result = result . cons ( el ) ; \n } return result . reverse ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFlatMapTokens",
                            "startLn": 102,
                            "endLn": 114,
                            "testMethod": "@Test\n public void testFlatMapTokens ( ) {\n     final AFunction1NoThrow < String , List < String > > tokens = new AFunction1NoThrow < String , List < String > > ( ) { \n @Override\n public List < String > apply ( String param ) { \n return Arrays . asList ( param . split ( \"STR\" ) ) ; \n } } ; \n     assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));\n}",
                            "oracle": "assertEquals(Arrays.<String>asList(),ACollectionHelper.flatMap(Arrays.<String>asList(),tokens));",
                            "oracleLn": 105,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "flatMap",
                            "focalStartLn": 197,
                            "focalEndLn": 207,
                            "focalMethod": " public static < T , X , E extends Throwable > Collection < X > flatMap ( Iterable < T > coll , AFunction1 < ? super T , ? extends Iterable < X > , E > f ) throws E { \n final List < X > result = new ArrayList < > ( ) ; \n for ( T o : coll ) { \n for ( X el : f . apply ( o ) ) { \n result . add ( el ) ; \n } } return result ; \n } "
                        },
                        {
                            "testName": "testFind",
                            "startLn": 48,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testFind ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));\n}",
                            "oracle": "assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));",
                            "oracleLn": 51,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "find",
                            "focalStartLn": 93,
                            "focalEndLn": 100,
                            "focalMethod": " public static < T , E extends Throwable > AOption < T > find ( Iterable < T > coll , APredicate < ? super T , E > pred ) throws E { \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n return AOption . some ( o ) ; \n } } return AOption . none ( ) ; \n } "
                        },
                        {
                            "testName": "testFlatten",
                            "startLn": 131,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testFlatten ( ) {\n     final Set < Set < String > > set = new HashSet < > ( ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ) ; \n     final Collection < String > flattened = ACollectionHelper . flatten ( set ) ; \n     assertEquals(5,flattened.size());\n}",
                            "oracle": "assertEquals(5,flattened.size());",
                            "oracleLn": 137,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "flatten",
                            "focalStartLn": 245,
                            "focalEndLn": 253,
                            "focalMethod": " public static < T > Collection < T > flatten ( Iterable < ? extends Iterable < T > > coll ) { \n final List < T > result = new ArrayList < > ( ) ; \n for ( Iterable < T > o : coll ) { \n for ( T el : o ) { \n result . add ( el ) ; \n } } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "AsArrayCopyTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsArrayCopyTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFlatMapOption",
                            "startLn": 74,
                            "endLn": 89,
                            "testMethod": "@Test\n@Override\n public void testFlatMapOption ( ) {\n     final AFunction1NoThrow < String , AOption < String > > uppercaseFirst = new AFunction1NoThrow < String , AOption < String > > ( ) { \n @Override\n public AOption < String > apply ( String param ) { \n if ( Character . isUpperCase ( param . charAt ( 0 ) ) ) return AOption . some ( param . substring ( 0 , 1 ) ) ; \n return AOption . none ( ) ; \n } } ; \n     assertEquals(createColl(),create().flatMap(uppercaseFirst));\n}",
                            "oracle": "assertEquals(createColl(),create().flatMap(uppercaseFirst));",
                            "oracleLn": 77,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java",
                            "focalName": "flatMap",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": "@Override\n < X , E extends Throwable > ACollection < X > flatMap ( AFunction1 < ? super T , ? extends Iterable < X > , E > f ) throws E ; \n"
                        }
                    ]
                },
                {
                    "className": "AJsonSerHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFalse",
                            "startLn": 152,
                            "endLn": 161,
                            "testMethod": "@Test\n public void testFalse ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeBooleanLiteral ( false ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 158,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "writeBooleanLiteral",
                            "focalStartLn": 139,
                            "focalEndLn": 143,
                            "focalMethod": " public void writeBooleanLiteral ( boolean value ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n out . write ( String . valueOf ( value ) ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testNullStringInArray",
                            "startLn": 174,
                            "endLn": 186,
                            "testMethod": "@Test\n public void testNullStringInArray ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeStringLiteral ( \"STR\" ) ; \n     ser . writeStringLiteral ( null ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 183,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "endArray",
                            "focalStartLn": 67,
                            "focalEndLn": 72,
                            "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testArray1",
                            "startLn": 200,
                            "endLn": 211,
                            "testMethod": "@Test\n public void testArray1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeBooleanLiteral ( true ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 208,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "endArray",
                            "focalStartLn": 67,
                            "focalEndLn": 72,
                            "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testNegativeNumber1",
                            "startLn": 82,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testNegativeNumber1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( - 1234567890 , 1 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 88,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "writeNumberLiteral",
                            "focalStartLn": 110,
                            "focalEndLn": 131,
                            "focalMethod": " public void writeNumberLiteral ( long value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n if ( value < 0 ) { \n out . write ( '-' ) ; \n value = - value ; \n } if ( numFracDigits == 0 ) { \n out . write ( String . valueOf ( value ) ) ; \n } else { \n final long intPart = value / TEN_POW [ numFracDigits ] ; \n final String fracPart = String . valueOf ( 1_000_000_000 + value % TEN_POW [ numFracDigits ] ) . substring ( 10 - numFracDigits , 10 ) ; \n out . write ( String . valueOf ( intPart ) ) ; \n out . write ( \"STR\" ) ; \n out . write ( fracPart ) ; \n } afterValueWritten ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SerializableTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/SerializableTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testHashSetSerializable",
                            "startLn": 32,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testHashSetSerializable ( ) throws IOException , ClassNotFoundException {\n     checkSerSame ( AHashSet . empty ( ) ) ; \n     assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));\n}",
                            "oracle": "assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));",
                            "oracleLn": 35,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AHashSet.java",
                            "focalName": "empty",
                            "focalStartLn": 21,
                            "focalEndLn": 31,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < T > AHashSet < T > empty ( AEquality equality ) { \n if ( equality == AEquality . EQUALS ) { \n return EMPTY_EQUALS ; \n } if ( equality == AEquality . IDENTITY ) { \n return EMPTY_IDENTITY ; \n } return new AHashSet < > ( AHashMap . < T , Boolean > empty ( equality ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoadKeyStoreTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "loadKeyStoreFromResources",
                            "startLn": 54,
                            "endLn": 62,
                            "testMethod": "@Test\n public void loadKeyStoreFromResources ( ) throws Exception {\n     String keyStorePath = \"STR\" ; \n     InputStream resourceAsStream = this . getClass ( ) . getResourceAsStream ( keyStorePath ) ; \n     assertNotNull(resourceAsStream);\n}",
                            "oracle": "assertNotNull(resourceAsStream);",
                            "oracleLn": 58,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java",
                            "focalName": "makeSSLSocketFactory",
                            "focalStartLn": 267,
                            "focalEndLn": 283,
                            "focalMethod": " public static SSLServerSocketFactory makeSSLSocketFactory ( String keyAndTrustStoreClasspathPath , char [ ] passphrase ) throws IOException { \n try { \n KeyStore keystore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; \n InputStream keystoreStream = NanoHTTPD . class . getResourceAsStream ( keyAndTrustStoreClasspathPath ) ; \n if ( keystoreStream == null ) { \n throw new IOException ( \"STR\" + keyAndTrustStoreClasspathPath ) ; \n } keystore . load ( keystoreStream , passphrase ) ; \n KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ; \n keyManagerFactory . init ( keystore , passphrase ) ; \n return makeSSLSocketFactory ( keystore , keyManagerFactory ) ; \n } catch ( Exception e ) { \n throw new IOException ( e . getMessage ( ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "GZipIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "noGzipWithoutAcceptEncoding",
                            "startLn": 142,
                            "endLn": 150,
                            "testMethod": "@Test\n public void noGzipWithoutAcceptEncoding ( ) throws IOException {\n     testServer . response = Response . newFixedLengthResponse ( \"STR\" ) ; \n     HttpGet request = new HttpGet ( \"STR\" ) ; \n     HttpResponse response = httpclient . execute ( request ) ; \n     Header contentEncoding = response . getFirstHeader ( \"STR\" ) ; \n     assertThat(contentEncoding,is(nullValue()));\n}",
                            "oracle": "assertThat(contentEncoding,is(nullValue()));",
                            "oracleLn": 148,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "newFixedLengthResponse",
                            "focalStartLn": 431,
                            "focalEndLn": 433,
                            "focalMethod": " public static Response newFixedLengthResponse ( String msg ) { \n return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "MimeTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/MimeTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testOverwritenMimeType",
                            "startLn": 53,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testOverwritenMimeType ( ) throws Exception {\n     Assert.assertEquals(\"STR\",NanoHTTPD.getMimeTypeForFile(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",NanoHTTPD.getMimeTypeForFile(\"STR\"));",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java",
                            "focalName": "getMimeTypeForFile",
                            "focalStartLn": 292,
                            "focalEndLn": 299,
                            "focalMethod": " public static String getMimeTypeForFile ( String uri ) { \n int dot = uri . lastIndexOf ( '.' ) ; \n String mime = null ; \n if ( dot >= 0 ) { \n mime = mimeTypes ( ) . get ( uri . substring ( dot + 1 ) . toLowerCase ( ) ) ; \n } return mime == null ? \"STR\" : mime ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullUri",
                            "startLn": 476,
                            "endLn": 482,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullUri ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 479,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$BaseRoutePrioritizer.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        },
                        {
                            "testName": "testRoutePrioritizerRemoveRouteNoRouteMatches",
                            "startLn": 548,
                            "endLn": 555,
                            "testMethod": "@Test\n public void testRoutePrioritizerRemoveRouteNoRouteMatches ( ) {\n     DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer ( ) ; \n     prioritizer . addRoute ( \"STR\" , 100 , NotImplementedHandler . class ) ; \n     prioritizer . removeRoute ( \"STR\" ) ; \n     Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 553,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD$BaseRoutePrioritizer.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "HttpGetRequestTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/HttpGetRequestTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 201,
                        "endLn": 205,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n this . testServer = new TestServer ( ) ; \n this . tempFileManager = new TestTempFileManager ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testOutputOfServeSentBackToClient",
                            "startLn": 178,
                            "endLn": 195,
                            "testMethod": "@Test\n public void testOutputOfServeSentBackToClient ( ) throws Exception {\n     String responseBody = \"STR\" ; \n     this . testServer . response = Response . newFixedLengthResponse ( responseBody ) ; \n     ByteArrayOutputStream outputStream = invokeServer ( \"STR\" + HttpServerTest . URI + \"STR\" ) ; \n     String [ ] expected = { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , responseBody } ; \n     assertResponse(outputStream,expected);\n}",
                            "oracle": "assertResponse(outputStream,expected);",
                            "oracleLn": 184,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "newFixedLengthResponse",
                            "focalStartLn": 431,
                            "focalEndLn": 433,
                            "focalMethod": " public static Response newFixedLengthResponse ( String msg ) { \n return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LifeCycleTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/LifeCycleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAvailabilityCheck",
                            "startLn": 33,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testAvailabilityCheck ( ) {\n     Assert.assertTrue(testFunctionAvailable(false));\n}",
                            "oracle": "Assert.assertTrue(testFunctionAvailable(false));",
                            "oracleLn": 35,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "shutdown",
                            "focalStartLn": 99,
                            "focalEndLn": 118,
                            "focalMethod": "@Override\n public void shutdown ( ) { \n super . shutdown ( ) ; \n this . connectionManager . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n this . taskScanner . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n if ( reconnectManager != null ) { \n reconnectManager . shutdown ( ) ; \n } if ( connectionMonitor != null ) { \n connectionMonitor . shutdown ( ) ; \n } for ( UserProcessor < ? > userProcessor : userProcessors . values ( ) ) { \n if ( userProcessor . isStarted ( ) ) { \n userProcessor . shutdown ( ) ; \n } } } "
                        }
                    ]
                },
                {
                    "className": "RpcConnectionManagerTest",
                    "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 81,
                        "endLn": 91,
                        "setupMethod": "@Before\n public void init ( ) { \n cm = new DefaultClientConnectionManager ( connectionSelectStrategy , connectionFactory , connectionEventHandler , connectionEventListener ) ; \n cm . setAddressParser ( addressParser ) ; \n cm . startup ( ) ; \n server = new BoltServer ( port ) ; \n server . start ( ) ; \n server . addConnectionEventProcessor ( ConnectionEventType . CONNECT , serverConnectProcessor ) ; \n this . addressParser . initUrlArgs ( url ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRemoveConnWithSpecifiedPoolkey",
                            "startLn": 184,
                            "endLn": 195,
                            "testMethod": "@Test\n public void testRemoveConnWithSpecifiedPoolkey ( ) {\n     Connection conn1 = getAConn ( ) ; \n     conn1 . addPoolKey ( \"STR\" ) ; \n     Connection conn2 = getAConn ( ) ; \n     conn2 . addPoolKey ( \"STR\" ) ; \n     cm . add ( conn1 ) ; \n     cm . add ( conn2 ) ; \n     Assert.assertEquals(2,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(2,cm.count(poolKey));",
                            "oracleLn": 192,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RecordsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "mlabel",
                            "startLn": 30,
                            "endLn": 33,
                            "testMethod": "@Test\n void mlabel ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.mLabel(\"STR\"));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.mLabel(\"STR\"));",
                            "oracleLn": 32,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java",
                            "focalName": "mLabel",
                            "focalStartLn": 35,
                            "focalEndLn": 37,
                            "focalMethod": " public static Attributes < ForNode > mLabel ( String label ) { \n return attrs ( attr ( SHAPE , M_RECORD ) , attr ( LABEL , label ) ) ; \n } "
                        },
                        {
                            "testName": "rec",
                            "startLn": 45,
                            "endLn": 48,
                            "testMethod": "@Test\n void rec ( ) {\n     assertEquals(\"STR\",Records.rec(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",Records.rec(\"STR\"));",
                            "oracleLn": 47,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java",
                            "focalName": "rec",
                            "focalStartLn": 51,
                            "focalEndLn": 55,
                            "focalMethod": " public static String rec ( String label ) { \n return label . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EndLabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/EndLabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "attrHead",
                            "startLn": 43,
                            "endLn": 48,
                            "testMethod": "@Test\n void attrHead ( ) {\n     final EndLabel head = EndLabel . head ( Label . of ( \"STR\" ) , 1d , 2d ) ; \n     assertEquals(attrs(attr(\"STR\",head),attr(\"STR\",1d),attr(\"STR\",2d)),attrs(head));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",head),attr(\"STR\",1d),attr(\"STR\",2d)),attrs(head));",
                            "oracleLn": 46,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OptionsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "fromJsonNoImage",
                            "startLn": 32,
                            "endLn": 37,
                            "testMethod": "@Test\n void fromJsonNoImage ( ) {\n     final Options options = Options . fromJson ( \"STR\" ) ; \n     final Options expected = Options . create ( ) . engine ( Engine . DOT ) . format ( Format . PNG ) . totalMemory ( 42 ) . yInvert ( true ) . basedir ( new File ( \"STR\" ) ) ; \n     assertEquals(expected,options);\n}",
                            "oracle": "assertEquals(expected,options);",
                            "oracleLn": 36,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/Options.java",
                            "focalName": "basedir",
                            "focalStartLn": 124,
                            "focalEndLn": 126,
                            "focalMethod": " public Options basedir ( File basedir ) { \n return new Options ( engine , format , totalMemory , yInvert , basedir , images ) ; \n } "
                        },
                        {
                            "testName": "toJsonMinimal",
                            "startLn": 66,
                            "endLn": 70,
                            "testMethod": "@Test\n void toJsonMinimal ( ) {\n     final String s = Options . create ( ) . engine ( Engine . DOT ) . format ( Format . PNG ) . toJson ( false ) ; \n     assertEquals(\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\",s);\n}",
                            "oracle": "assertEquals(\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\",s);",
                            "oracleLn": 69,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/service/SystemUtils.java",
                            "focalName": "uriPathOf",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public static String uriPathOf ( File path ) { \n return uriPathOf ( path . getAbsolutePath ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SvgElementFinderTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgElementFinderTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "linkedNodeNamesOf",
                            "startLn": 85,
                            "endLn": 90,
                            "testMethod": "@Test\n void linkedNodeNamesOf ( ) {\n     final String svg = Graphviz . fromGraph ( graph ( ) . directed ( ) . with ( node ( \"STR\" ) . link ( \"STR\" ) ) ) . render ( SVG ) . toString ( ) ; \n     final SvgElementFinder finder = new SvgElementFinder ( svg ) ; \n     assertEquals(asList(\"STR\",\"STR\"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));\n}",
                            "oracle": "assertEquals(asList(\"STR\",\"STR\"),SvgElementFinder.linkedNodeNamesOf(finder.findLinks().get(0)));",
                            "oracleLn": 89,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgElementFinder.java",
                            "focalName": "linkedNodeNamesOf",
                            "focalStartLn": 121,
                            "focalEndLn": 124,
                            "focalMethod": " public static List < String > linkedNodeNamesOf ( Element e ) { \n final String name = e . getElementsByTagName ( \"STR\" ) . item ( 0 ) . getTextContent ( ) ; \n return asList ( name . split ( name . contains ( \"STR\" ) ? \"STR\" : \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ColorTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ColorTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "angle",
                            "startLn": 106,
                            "endLn": 109,
                            "testMethod": "@Test\n void angle ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",45)),Color.RED.angle(45));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",45)),Color.RED.angle(45));",
                            "oracleLn": 108,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Color.java",
                            "focalName": "angle",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public Attributes < ForAll > angle ( int angle ) { \n return attrs ( this , new SingleAttributes < > ( \"STR\" , angle ) ) ; \n } "
                        },
                        {
                            "testName": "rgbOk",
                            "startLn": 56,
                            "endLn": 59,
                            "testMethod": "@Test\n void rgbOk ( ) {\n     assertColor(attr(\"STR\",\"STR\"),Color.rgb(\"STR\"));\n}",
                            "oracle": "assertColor(attr(\"STR\",\"STR\"),Color.rgb(\"STR\"));",
                            "oracleLn": 58,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Color.java",
                            "focalName": "rgb",
                            "focalStartLn": 91,
                            "focalEndLn": 97,
                            "focalMethod": " public static Color rgb ( String rgb ) { \n final String val = rgb . startsWith ( \"STR\" ) ? rgb . substring ( 1 ) : rgb ; \n if ( val . length ( ) != 6 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } return new Color ( \"STR\" + val ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizServerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizServerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "cmdLineValueSeparated",
                            "startLn": 48,
                            "endLn": 52,
                            "testMethod": "@Test\n void cmdLineValueSeparated ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 51,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer$CmdOptions.java",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        },
                        {
                            "testName": "cmdLineArgs",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n void cmdLineArgs ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 57,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer$CmdOptions.java",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        }
                    ]
                },
                {
                    "className": "AttributeValidatorTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/validate/AttributeValidatorTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "wrongScope",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n void wrongScope ( ) {\n     assertMessage(ERROR,\"STR\",\"STR\",validate(attr(\"STR\",5),NODE));\n}",
                            "oracle": "assertMessage(ERROR,\"STR\",\"STR\",validate(attr(\"STR\",5),NODE));",
                            "oracleLn": 51,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attr",
                            "focalStartLn": 26,
                            "focalEndLn": 28,
                            "focalMethod": " static < F extends For > Attributes < F > attr ( String key , @Nullable\n Object value ) { \n return new MapAttributes < F > ( key , value ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SerializerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SerializerTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n ser . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "privateAttribute",
                            "startLn": 217,
                            "endLn": 221,
                            "testMethod": "@Test\n void privateAttribute ( ) {\n     assertSerialize(graph().graphAttr().with(\"STR\",\"STR\").with(node(\"STR\").with(\"STR\",\"STR\")),\"STR\");\n}",
                            "oracle": "assertSerialize(graph().graphAttr().with(\"STR\",\"STR\").with(node(\"STR\").with(\"STR\",\"STR\")),\"STR\");",
                            "oracleLn": 219,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/Graph.java",
                            "focalName": "with",
                            "focalStartLn": 33,
                            "focalEndLn": 33,
                            "focalMethod": " Graph with ( LinkSource ... sources ) ; \n"
                        },
                        {
                            "testName": "nodeAttr",
                            "startLn": 86,
                            "endLn": 91,
                            "testMethod": "@Test\n void nodeAttr ( ) {\n     final Graph g = graph ( ) . nodeAttr ( ) . with ( \"STR\" , \"STR\" ) ; \n     assertSerialize(g,\"STR\",msg(WARN,\"STR\",\"STR\",NODE_ATTRS,g));\n}",
                            "oracle": "assertSerialize(g,\"STR\",msg(WARN,\"STR\",\"STR\",NODE_ATTRS,g));",
                            "oracleLn": 89,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributed.java",
                            "focalName": "with",
                            "focalStartLn": 25,
                            "focalEndLn": 27,
                            "focalMethod": " default T with ( String name , @Nullable\n Object value ) { \n return with ( attr ( name , value ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ParserTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/parse/ParserTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 44,
                        "endLn": 47,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n pars . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "emptyString",
                            "startLn": 154,
                            "endLn": 158,
                            "testMethod": "@Test\n void emptyString ( ) throws IOException {\n     assertParse(\"STR\",mutGraph().add(mutNode(\"STR\"),mutNode(\"STR\").add(\"STR\",Label.of(\"STR\"))));\n}",
                            "oracle": "assertParse(\"STR\",mutGraph().add(mutNode(\"STR\"),mutNode(\"STR\").add(\"STR\",Label.of(\"STR\"))));",
                            "oracleLn": 156,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/MutableGraph.java",
                            "focalName": "add",
                            "focalStartLn": 113,
                            "focalEndLn": 115,
                            "focalMethod": " public MutableGraph add ( LinkSource ... sources ) { \n return add ( asList ( sources ) ) ; \n } "
                        },
                        {
                            "testName": "inheritDirected",
                            "startLn": 147,
                            "endLn": 152,
                            "testMethod": "@Test\n void inheritDirected ( ) throws IOException {\n     assertParse(\"STR\",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(\"STR\").addLink(\"STR\"))));\n}",
                            "oracle": "assertParse(\"STR\",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(\"STR\").addLink(\"STR\"))));",
                            "oracleLn": 149,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/MutableGraph.java",
                            "focalName": "add",
                            "focalStartLn": 124,
                            "focalEndLn": 127,
                            "focalMethod": " public MutableGraph add ( LinkSource source ) { \n source . addTo ( this ) ; \n return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 43,
                        "endLn": 46,
                        "setupMethod": "@BeforeAll\n static void init ( ) { \n Graphviz . useEngine ( new AbstractGraphvizEngineTest . GraphvizEngineDummy ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "withTotalMemory",
                            "startLn": 80,
                            "endLn": 86,
                            "testMethod": "@Test\n void withTotalMemory ( ) {\n     final Graph graph = graph ( ) . with ( node ( \"STR\" ) . link ( \"STR\" ) ) ; \n     final String result = Graphviz . fromGraph ( graph ) . totalMemory ( 32000 ) . render ( SVG ) . toString ( ) ; \n     assertThat(result,is(\"STR\"+\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\"));\n}",
                            "oracle": "assertThat(result,is(\"STR\"+\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\"));",
                            "oracleLn": 84,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/service/SystemUtils.java",
                            "focalName": "uriPathOf",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public static String uriPathOf ( File path ) { \n return uriPathOf ( path . getAbsolutePath ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimpleLabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/SimpleLabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 23,
                            "endLn": 26,
                            "testMethod": "@Test\n void simple ( ) {\n     assertEquals(\"STR\",SimpleLabel.of(\"STR\").serialized());\n}",
                            "oracle": "assertEquals(\"STR\",SimpleLabel.of(\"STR\").serialized());",
                            "oracleLn": 25,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/SimpleLabel.java",
                            "focalName": "serialized",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public String serialized ( ) { \n return html ? ( \"STR\" + value + \"STR\" ) : ( \"STR\" + quoted ( ) + \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StyleTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 25,
                            "endLn": 28,
                            "testMethod": "@Test\n void simple ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Style.BOLD));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Style.BOLD));",
                            "oracleLn": 27,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SvgSizeAnalyzerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "getValues",
                            "startLn": 29,
                            "endLn": 40,
                            "testMethod": "@Test\n void getValues ( ) {\n     final SvgSizeAnalyzer a = SvgSizeAnalyzer . svg ( SVG ) ; \n     assertEquals(1000,a.getWidth());\n}",
                            "oracle": "assertEquals(1000,a.getWidth());",
                            "oracleLn": 32,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgSizeAnalyzer.java",
                            "focalName": "getWidth",
                            "focalStartLn": 88,
                            "focalEndLn": 90,
                            "focalMethod": " public int getWidth ( ) { \n return Integer . parseInt ( matcher . group ( \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "locate",
                            "startLn": 56,
                            "endLn": 61,
                            "testMethod": "@Test\n void locate ( ) {\n     assertEquals(attrs(attr(\"STR\",label.locate(TOP)),attr(\"STR\",\"STR\")),attrs(label.locate(TOP)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",label.locate(TOP)),attr(\"STR\",\"STR\")),attrs(label.locate(TOP)));",
                            "oracleLn": 58,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ArrowTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ArrowTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "dir",
                            "startLn": 86,
                            "endLn": 90,
                            "testMethod": "@Test\n void dir ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Arrow.BOX.dir(Arrow.DirType.BACK));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Arrow.BOX.dir(Arrow.DirType.BACK));",
                            "oracleLn": 88,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Arrow.java",
                            "focalName": "dir",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public Attributes < ForLink > dir ( DirType type ) { \n return config ( 0 , type ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ProtocolTest",
                    "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testToString",
                            "startLn": 84,
                            "endLn": 90,
                            "testMethod": "@Test\n public void testToString ( ) throws Exception {\n     Protocol protocol0 = new Protocol ( \"STR\" ) ; \n     assertEquals(\"STR\",protocol0.getProvidedProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",protocol0.getProvidedProtocol());",
                            "oracleLn": 87,
                            "focalFile": "src/main/java/org/java_websocket/protocols/Protocol.java",
                            "focalName": "getProvidedProtocol",
                            "focalStartLn": 72,
                            "focalEndLn": 75,
                            "focalMethod": "@Override\n public String getProvidedProtocol ( ) { \n return this . providedProtocol ; \n } "
                        }
                    ]
                },
                {
                    "className": "PerMessageDeflateExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIsServerNoContextTakeover",
                            "startLn": 128,
                            "endLn": 132,
                            "testMethod": "@Test\n public void testIsServerNoContextTakeover ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertTrue(deflateExtension.isServerNoContextTakeover());\n}",
                            "oracle": "assertTrue(deflateExtension.isServerNoContextTakeover());",
                            "oracleLn": 131,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "isServerNoContextTakeover",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public boolean isServerNoContextTakeover ( ) { \n return serverNoContextTakeover ; \n } "
                        },
                        {
                            "testName": "testAcceptProvidedExtensionAsServer",
                            "startLn": 51,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testAcceptProvidedExtensionAsServer ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertTrue(deflateExtension.acceptProvidedExtensionAsServer(\"STR\"));\n}",
                            "oracle": "assertTrue(deflateExtension.acceptProvidedExtensionAsServer(\"STR\"));",
                            "oracleLn": 54,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "acceptProvidedExtensionAsServer",
                            "focalStartLn": 252,
                            "focalEndLn": 272,
                            "focalMethod": "@Override\n public boolean acceptProvidedExtensionAsServer ( String inputExtension ) { \n String [ ] requestedExtensions = inputExtension . split ( \"STR\" ) ; \n for ( String extension : requestedExtensions ) { \n ExtensionRequestData extensionData = ExtensionRequestData . parseExtensionRequest ( extension ) ; \n if ( ! EXTENSION_REGISTERED_NAME . equalsIgnoreCase ( extensionData . getExtensionName ( ) ) ) { \n continue ; \n } Map < String , String > headers = extensionData . getExtensionParameters ( ) ; \n requestedParameters . putAll ( headers ) ; \n if ( requestedParameters . containsKey ( CLIENT_NO_CONTEXT_TAKEOVER ) ) { \n clientNoContextTakeover = true ; \n } return true ; \n } return false ; \n } "
                        },
                        {
                            "testName": "testGetDeflater",
                            "startLn": 174,
                            "endLn": 179,
                            "testMethod": "@Test\n public void testGetDeflater ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());\n}",
                            "oracle": "assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());",
                            "oracleLn": 177,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "getDeflater",
                            "focalStartLn": 65,
                            "focalEndLn": 67,
                            "focalMethod": " public Deflater getDeflater ( ) { \n return deflater ; \n } "
                        }
                    ]
                },
                {
                    "className": "Draft_6455Test",
                    "classPath": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "createFramesText",
                            "startLn": 537,
                            "endLn": 552,
                            "testMethod": "@Test\n public void createFramesText ( ) throws Exception {\n     Draft_6455 draft_6455 = new Draft_6455 ( ) ; \n     TextFrame curframe = new TextFrame ( ) ; \n     curframe . setPayload ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( \"STR\" ) ) ) ; \n     curframe . setTransferemasked ( false ) ; \n     List < Framedata > createdFrame = draft_6455 . createFrames ( \"STR\" , false ) ; \n     assertEquals(1,createdFrame.size());\n}",
                            "oracle": "assertEquals(1,createdFrame.size());",
                            "oracleLn": 544,
                            "focalFile": "src/main/java/org/java_websocket/drafts/Draft_6455.java",
                            "focalName": "createFrames",
                            "focalStartLn": 767,
                            "focalEndLn": 778,
                            "focalMethod": "@Override\n public List < Framedata > createFrames ( String text , boolean mask ) { \n TextFrame curframe = new TextFrame ( ) ; \n curframe . setPayload ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( text ) ) ) ; \n curframe . setTransferemasked ( mask ) ; \n try { \n curframe . isValid ( ) ; \n } catch ( InvalidDataException e ) { \n throw new NotSendableException ( e ) ; \n } return Collections . singletonList ( ( Framedata ) curframe ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "Issue609Test",
                    "classPath": "src/test/java/org/java_websocket/issues/Issue609Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIssue",
                            "startLn": 49,
                            "endLn": 109,
                            "testMethod": "@Test\n public void testIssue ( ) throws Exception {\n     int port = SocketUtil . getAvailablePort ( ) ; \n     WebSocketClient webSocket = new WebSocketClient ( new URI ( \"STR\" + port ) ) { \n @Override\n public void onOpen ( ServerHandshake handshakedata ) { \n } @Override\n public void onMessage ( String message ) { \n } @Override\n public void onClose ( int code , String reason , boolean remote ) { \n wasOpenClient = isOpen ( ) ; \n countDownLatch . countDown ( ) ; \n } @Override\n public void onError ( Exception ex ) { \n } } ; \n     WebSocketServer server = new WebSocketServer ( new InetSocketAddress ( port ) ) { \n @Override\n public void onOpen ( WebSocket conn , ClientHandshake handshake ) { \n } @Override\n public void onClose ( WebSocket conn , int code , String reason , boolean remote ) { \n wasOpenServer = conn . isOpen ( ) ; \n } @Override\n public void onMessage ( WebSocket conn , String message ) { \n } @Override\n public void onError ( WebSocket conn , Exception ex ) { \n } @Override\n public void onStart ( ) { \n countServerDownLatch . countDown ( ) ; \n } } ; \n     server . start ( ) ; \n     countServerDownLatch . await ( ) ; \n     webSocket . connectBlocking ( ) ; \n     assertTrue(\"STR\",webSocket.isOpen());\n}",
                            "oracle": "assertTrue(\"STR\",webSocket.isOpen());",
                            "oracleLn": 57,
                            "focalFile": "src/main/java/org/java_websocket/client/WebSocketClient.java",
                            "focalName": "isOpen",
                            "focalStartLn": 886,
                            "focalEndLn": 889,
                            "focalMethod": "@Override\n public boolean isOpen ( ) { \n return engine . isOpen ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "IncompleteExceptionTest",
                    "classPath": "src/test/java/org/java_websocket/exceptions/IncompleteExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructor",
                            "startLn": 37,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testConstructor ( ) {\n     IncompleteException incompleteException = new IncompleteException ( 42 ) ; \n     assertEquals(\"STR\",42,incompleteException.getPreferredSize());\n}",
                            "oracle": "assertEquals(\"STR\",42,incompleteException.getPreferredSize());",
                            "oracleLn": 40,
                            "focalFile": "src/main/java/org/java_websocket/exceptions/IncompleteException.java",
                            "focalName": "getPreferredSize",
                            "focalStartLn": 57,
                            "focalEndLn": 59,
                            "focalMethod": " public int getPreferredSize ( ) { \n return preferredSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "BinaryFrameTest",
                    "classPath": "src/test/java/org/java_websocket/framing/BinaryFrameTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExtends",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testExtends ( ) {\n     BinaryFrame frame = new BinaryFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofDataFrame);\n}",
                            "oracle": "assertEquals(\"STR\",true,frameinstanceofDataFrame);",
                            "oracleLn": 60,
                            "focalFile": "src/main/java/org/java_websocket/framing/BinaryFrame.java",
                            "focalName": "BinaryFrame",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public BinaryFrame ( ) { \n super ( Opcode . BINARY ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "InvalidHandshakeExceptionTest",
                    "classPath": "src/test/java/org/java_websocket/exceptions/InvalidHandshakeExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructor",
                            "startLn": 38,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testConstructor ( ) {\n     InvalidHandshakeException invalidHandshakeException = new InvalidHandshakeException ( ) ; \n     assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());\n}",
                            "oracle": "assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());",
                            "oracleLn": 41,
                            "focalFile": "src/main/java/org/java_websocket/exceptions/InvalidDataException.java",
                            "focalName": "getCloseCode",
                            "focalStartLn": 91,
                            "focalEndLn": 93,
                            "focalMethod": " public int getCloseCode ( ) { \n return closecode ; \n } "
                        }
                    ]
                },
                {
                    "className": "DefaultExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEncodeFrame",
                            "startLn": 49,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testEncodeFrame ( ) throws Exception {\n     DefaultExtension defaultExtension = new DefaultExtension ( ) ; \n     BinaryFrame binaryFrame = new BinaryFrame ( ) ; \n     binaryFrame . setPayload ( ByteBuffer . wrap ( \"STR\" . getBytes ( ) ) ) ; \n     defaultExtension . encodeFrame ( binaryFrame ) ; \n     assertEquals(ByteBuffer.wrap(\"STR\".getBytes()),binaryFrame.getPayloadData());\n}",
                            "oracle": "assertEquals(ByteBuffer.wrap(\"STR\".getBytes()),binaryFrame.getPayloadData());",
                            "oracleLn": 55,
                            "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java",
                            "focalName": "getPayloadData",
                            "focalStartLn": 124,
                            "focalEndLn": 127,
                            "focalMethod": "@Override\n public ByteBuffer getPayloadData ( ) { \n return unmaskedpayload ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AppveyorTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/AppveyorTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 60,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newAppveyor(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newAppveyor(env()).getName());",
                            "oracleLn": 62,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Appveyor.java",
                            "focalName": "getName",
                            "focalStartLn": 56,
                            "focalEndLn": 59,
                            "focalMethod": "@Override\n public String getName ( ) { \n return APPVEYOR_NAME ; \n } "
                        }
                    ]
                },
                {
                    "className": "CircleTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBuildNumber",
                            "startLn": 65,
                            "endLn": 68,
                            "testMethod": "@Test\n public void testGetBuildNumber ( ) {\n     assertEquals(\"STR\",newCircle(env()).getBuildNumber());\n}",
                            "oracle": "assertEquals(\"STR\",newCircle(env()).getBuildNumber());",
                            "oracleLn": 67,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java",
                            "focalName": "getBuildNumber",
                            "focalStartLn": 59,
                            "focalEndLn": 62,
                            "focalMethod": "@Override\n public String getBuildNumber ( ) { \n return getProperty ( CIRCLE_BUILD_NUMBER ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SourceTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEqualsForDifferentSources",
                            "startLn": 98,
                            "endLn": 103,
                            "testMethod": "@Test\n public void testEqualsForDifferentSources ( ) throws Exception {\n     Source source1 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     Source source2 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     assertFalse(source1.equals(source2));\n}",
                            "oracle": "assertFalse(source1.equals(source2));",
                            "oracleLn": 102,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java",
                            "focalName": "equals",
                            "focalStartLn": 111,
                            "focalEndLn": 120,
                            "focalMethod": "@Override\n public boolean equals ( final Object obj ) { \n if ( ! ( obj instanceof Source ) ) { \n return false ; \n } Source other = ( Source ) obj ; \n return ( Objects . equals ( this . name , other . name ) && Objects . equals ( this . digest , other . digest ) && Objects . equals ( this . coverage . length , other . coverage . length ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AbstractServiceSetupTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProperty",
                            "startLn": 46,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testGetProperty ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",create(env).getProperty(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",create(env).getProperty(\"STR\"));",
                            "oracleLn": 50,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetup.java",
                            "focalName": "getProperty",
                            "focalStartLn": 75,
                            "focalEndLn": 77,
                            "focalMethod": " protected final String getProperty ( final String name ) { \n return env . get ( name ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScanSourceLoaderTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/source/ScanSourceLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testMissingSourceFileFromDirectory",
                            "startLn": 55,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testMissingSourceFileFromDirectory ( ) throws Exception {\n     ScanSourceLoader sourceLoader = new ScanSourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ; \n     assertNull(sourceLoader.load(\"STR\"));\n}",
                            "oracle": "assertNull(sourceLoader.load(\"STR\"));",
                            "oracleLn": 58,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/source/AbstractSourceLoader.java",
                            "focalName": "load",
                            "focalStartLn": 50,
                            "focalEndLn": 64,
                            "focalMethod": "@Override\n public Source load ( final String sourceFile ) throws IOException { \n InputStream stream = locate ( sourceFile ) ; \n if ( stream != null ) { \n try ( Md5DigestInputStream ds = new Md5DigestInputStream ( stream ) ; \n InputStreamReader reader = new InputStreamReader ( ds , getSourceEncoding ( ) ) ) { \n String source = IOUtil . toString ( reader ) ; \n return new Source ( getFileName ( sourceFile ) , source , ds . getDigestHex ( ) ) ; \n } catch ( NoSuchAlgorithmException ex ) { \n throw new IOException ( \"STR\" , ex ) ; \n } } else { \n return null ; \n } } "
                        },
                        {
                            "testName": "testLoadSource",
                            "startLn": 68,
                            "endLn": 84,
                            "testMethod": "@Test\n public void testLoadSource ( ) throws Exception {\n     File dir = folder . newFolder ( \"STR\" , \"STR\" , \"STR\" ) ; \n     File fileA = new File ( dir , \"STR\" ) ; \n     File fileB = new File ( dir , \"STR\" ) ; \n     TestIoUtil . writeFileContent ( \"STR\" , fileA ) ; \n     TestIoUtil . writeFileContent ( \"STR\" , fileB ) ; \n     ScanSourceLoader sourceLoader = new ScanSourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ; \n     Source sourceA = sourceLoader . load ( fileA . getName ( ) ) ; \n     assertEquals(\"STR\",sourceA.getName());\n}",
                            "oracle": "assertEquals(\"STR\",sourceA.getName());",
                            "oracleLn": 77,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java",
                            "focalName": "getName",
                            "focalStartLn": 57,
                            "focalEndLn": 60,
                            "focalMethod": "@JsonIgnore\n public String getName ( ) { \n return name ; \n } "
                        }
                    ]
                },
                {
                    "className": "JsonWriterTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/json/JsonWriterTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 64,
                        "endLn": 67,
                        "setupMethod": "@Before\n public void init ( ) throws IOException { \n file = folder . newFile ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetCoverallsFile",
                            "startLn": 83,
                            "endLn": 89,
                            "testMethod": "@Test\n @ SuppressWarnings ( \"STR\" ) public void testGetCoverallsFile ( ) throws Exception {\n     Job job = job ( ) ; \n     assertSame(file,newJsonWriter(job,file).getCoverallsFile());\n}",
                            "oracle": "assertSame(file,newJsonWriter(job,file).getCoverallsFile());",
                            "oracleLn": 86,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/json/JsonWriter.java",
                            "focalName": "getCoverallsFile",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " public final File getCoverallsFile ( ) { \n return coverallsFile ; \n } "
                        }
                    ]
                },
                {
                    "className": "WildcardsTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testMatchesAgainstStar",
                            "startLn": 46,
                            "endLn": 49,
                            "testMethod": "@Test\n public void testMatchesAgainstStar ( ) throws Exception {\n     assertTrue(Wildcards.matches(\"STR\",\"STR\"));\n}",
                            "oracle": "assertTrue(Wildcards.matches(\"STR\",\"STR\"));",
                            "oracleLn": 48,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java",
                            "focalName": "matches",
                            "focalStartLn": 42,
                            "focalEndLn": 45,
                            "focalMethod": " public static boolean matches ( final String text , final String wildcard ) { \n String pattern = wildcard . replace ( \"STR\" , \"STR\" ) . replace ( \"STR\" , \"STR\" ) ; \n return ( text != null && text . matches ( pattern ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testPullRequest",
                            "startLn": 80,
                            "endLn": 83,
                            "testMethod": "@Test\n public void testPullRequest ( ) {\n     assertEquals(\"STR\",newShippable(env()).getPullRequest());\n}",
                            "oracle": "assertEquals(\"STR\",newShippable(env()).getPullRequest());",
                            "oracleLn": 82,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getPullRequest",
                            "focalStartLn": 76,
                            "focalEndLn": 83,
                            "focalMethod": "@Override\n public String getPullRequest ( ) { \n String pullRequest = getProperty ( SHIPPABLE_PULL_REQUEST ) ; \n if ( \"STR\" . equals ( pullRequest ) ) { \n return null ; \n } return pullRequest ; \n } "
                        }
                    ]
                },
                {
                    "className": "HttpClientFactoryTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testNonProxiedHostRequest",
                            "startLn": 104,
                            "endLn": 120,
                            "testMethod": "@Test\n public void testNonProxiedHostRequest ( ) throws Exception {\n     targetServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     proxyServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     Proxy proxy = new Proxy ( ) ; \n     proxy . setHost ( \"STR\" ) ; \n     proxy . setPort ( PROXY_PORT ) ; \n     proxy . setProtocol ( \"STR\" ) ; \n     proxy . setNonProxyHosts ( \"STR\" ) ; \n     HttpClient client = new HttpClientFactory ( TARGET_URL ) . proxy ( proxy ) . create ( ) ; \n     String body = EntityUtils . toString ( client . execute ( new HttpGet ( TARGET_URL ) ) . getEntity ( ) ) ; \n     Assert.assertEquals(\"STR\",body);\n}",
                            "oracle": "Assert.assertEquals(\"STR\",body);",
                            "oracleLn": 115,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactory.java",
                            "focalName": "create",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public HttpClient create ( ) { \n return hcb . setDefaultRequestConfig ( rcb . build ( ) ) . build ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "multistem_generateinflections",
                            "startLn": 2603,
                            "endLn": 2623,
                            "testMethod": "@Test\n public void multistem_generateinflections ( ) {\n     List < Wordform > sair\u0161ana = loc\u012bt\u0101js . generateInflectionsFromParadigm ( \"STR\" , 15 , \"STR\" , \"STR\" , \"STR\" ) ; \n     List < Wordform > laivas_ir\u0161ana = loc\u012bt\u0101js . generateInflectionsFromParadigm ( \"STR\" , 15 , \"STR\" , \"STR\" , \"STR\" ) ; \n     AttributeValues pagaatne = new AttributeValues ( ) ; \n     pagaatne . addAttribute ( AttributeNames . i_PartOfSpeech , AttributeNames . v_Verb ) ; \n     pagaatne . addAttribute ( AttributeNames . i_Person , \"STR\" ) ; \n     pagaatne . addAttribute ( AttributeNames . i_Izteiksme , AttributeNames . v_Iisteniibas ) ; \n     pagaatne . addAttribute ( AttributeNames . i_Laiks , AttributeNames . v_Pagaatne ) ; \n     assertInflection(sair\u0161ana,pagaatne,\"STR\");\n}",
                            "oracle": "assertInflection(sair\u0161ana,pagaatne,\"STR\");",
                            "oracleLn": 2612,
                            "focalFile": "src/main/java/lv/semti/morphology/attributes/AttributeValues.java",
                            "focalName": "addAttribute",
                            "focalStartLn": 71,
                            "focalEndLn": 74,
                            "focalMethod": " public void addAttribute ( String attribute , String value ) { \n attributes . put ( attribute , value ) ; \n } "
                        },
                        {
                            "testName": "aizkost",
                            "startLn": 2832,
                            "endLn": 2846,
                            "testMethod": "@Test\n public void aizkost ( ) {\n     List < Wordform > aizkost = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     AttributeValues tu = new AttributeValues ( ) ; \n     tu . addAttribute ( AttributeNames . i_PartOfSpeech , AttributeNames . v_Verb ) ; \n     tu . addAttribute ( AttributeNames . i_Person , \"STR\" ) ; \n     tu . addAttribute ( AttributeNames . i_Laiks , AttributeNames . v_Tagadne ) ; \n     tu . addAttribute ( AttributeNames . i_Number , AttributeNames . v_Singular ) ; \n     assertInflection(aizkost,tu,\"STR\");\n}",
                            "oracle": "assertInflection(aizkost,tu,\"STR\");",
                            "oracleLn": 2840,
                            "focalFile": "src/main/java/lv/semti/morphology/attributes/AttributeValues.java",
                            "focalName": "addAttribute",
                            "focalStartLn": 71,
                            "focalEndLn": 74,
                            "focalMethod": " public void addAttribute ( String attribute , String value ) { \n attributes . put ( attribute , value ) ; \n } "
                        },
                        {
                            "testName": "cache",
                            "startLn": 1193,
                            "endLn": 1211,
                            "testMethod": "@Test\n public void cache ( ) {\n     loc\u012bt\u0101js . setCacheSize ( 1000 ) ; \n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableVocative = true ; \n     loc\u012bt\u0101js . guessVerbs = false ; \n     loc\u012bt\u0101js . guessParticiples = false ; \n     loc\u012bt\u0101js . guessAdjectives = false ; \n     loc\u012bt\u0101js . guessInflexibleNouns = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     Word v\u0101rds = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(v\u0101rds.isRecognized());\n}",
                            "oracle": "assertTrue(v\u0101rds.isRecognized());",
                            "oracleLn": 1204,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "celties",
                            "startLn": 3485,
                            "endLn": 3490,
                            "testMethod": "@Test\n public void celties ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 3488,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "\u0123ener\u0113\u0161anaNezin\u0101miem",
                            "startLn": 1046,
                            "endLn": 1067,
                            "testMethod": "@Test\n public void \u0123ener\u0113\u0161anaNezin\u0101miem ( ) {\n     loc\u012bt\u0101js . enableGuessing = true ; \n     loc\u012bt\u0101js . enableVocative = true ; \n     loc\u012bt\u0101js . guessVerbs = false ; \n     loc\u012bt\u0101js . guessParticiples = false ; \n     loc\u012bt\u0101js . guessAdjectives = false ; \n     loc\u012bt\u0101js . guessInflexibleNouns = true ; \n     loc\u012bt\u0101js . enableAllGuesses = true ; \n     assertTrue(\"STR\".matches(\"STR\"));\n}",
                            "oracle": "assertTrue(\"STR\".matches(\"STR\"));",
                            "oracleLn": 1055,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java",
                            "focalName": "generateInflections",
                            "focalStartLn": 639,
                            "focalEndLn": 641,
                            "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } "
                        },
                        {
                            "testName": "turpms2",
                            "startLn": 2699,
                            "endLn": 2704,
                            "testMethod": "@Test\n public void turpms2 ( ) {\n     Word Turpm\u0101kaj\u0101 = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(Turpm\u0101kaj\u0101.isRecognized());\n}",
                            "oracle": "assertTrue(Turpm\u0101kaj\u0101.isRecognized());",
                            "oracleLn": 2702,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "s\u0113do\u0161s",
                            "startLn": 2505,
                            "endLn": 2510,
                            "testMethod": "@Test\n public void s\u0113do\u0161s ( ) {\n     Word s\u0113do\u0161s = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(s\u0113do\u0161s.isRecognized());\n}",
                            "oracle": "assertTrue(s\u0113do\u0161s.isRecognized());",
                            "oracleLn": 2508,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "b\u016bt",
                            "startLn": 3055,
                            "endLn": 3077,
                            "testMethod": "@Test\n public void b\u016bt ( ) {\n     ArrayList < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     AttributeValues testset = new AttributeValues ( ) ; \n     testset . addAttribute ( AttributeNames . i_PartOfSpeech , AttributeNames . v_Verb ) ; \n     testset . addAttribute ( AttributeNames . i_Izteiksme , AttributeNames . v_Vajadziibas ) ; \n     assertInflection(formas,testset,\"STR\");\n}",
                            "oracle": "assertInflection(formas,testset,\"STR\");",
                            "oracleLn": 3061,
                            "focalFile": "src/main/java/lv/semti/morphology/attributes/AttributeValues.java",
                            "focalName": "addAttribute",
                            "focalStartLn": 71,
                            "focalEndLn": 74,
                            "focalMethod": " public void addAttribute ( String attribute , String value ) { \n attributes . put ( attribute , value ) ; \n } "
                        },
                        {
                            "testName": "prefix_guessing_debitive",
                            "startLn": 3909,
                            "endLn": 3926,
                            "testMethod": "@Test\n public void prefix_guessing_debitive ( ) {\n     loc\u012bt\u0101js . enablePrefixes = false ; \n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(w.isRecognized());\n}",
                            "oracle": "assertFalse(w.isRecognized());",
                            "oracleLn": 3913,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana",
                            "startLn": 2403,
                            "endLn": 2407,
                            "testMethod": "@Test\n public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana ( ) {\n     List < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     assertEquals(1,formas.size());\n}",
                            "oracle": "assertEquals(1,formas.size());",
                            "oracleLn": 2406,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java",
                            "focalName": "generateInflections",
                            "focalStartLn": 639,
                            "focalEndLn": 641,
                            "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } "
                        },
                        {
                            "testName": "tuStum",
                            "startLn": 544,
                            "endLn": 552,
                            "testMethod": "@Test\n public void tuStum ( ) {\n     Word stum = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(stum.isRecognized());\n}",
                            "oracle": "assertTrue(stum.isRecognized());",
                            "oracleLn": 547,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "apvidv\u0101rdi",
                            "startLn": 2369,
                            "endLn": 2373,
                            "testMethod": "@Test\n public void apvidv\u0101rdi ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(w.isRecognized());\n}",
                            "oracle": "assertFalse(w.isRecognized());",
                            "oracleLn": 2372,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "leksikoni",
                            "startLn": 1250,
                            "endLn": 1254,
                            "testMethod": "@Test\n public void leksikoni ( ) {\n     Word pokemons = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(pokemons.isRecognized());\n}",
                            "oracle": "assertFalse(pokemons.isRecognized());",
                            "oracleLn": 1253,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "j\u0101m\u0101k",
                            "startLn": 706,
                            "endLn": 717,
                            "testMethod": "@Test\n public void j\u0101m\u0101k ( ) {\n     Word j\u0101m\u0101k = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(j\u0101m\u0101k.isRecognized());\n}",
                            "oracle": "assertTrue(j\u0101m\u0101k.isRecognized());",
                            "oracleLn": 709,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "mazajai",
                            "startLn": 1213,
                            "endLn": 1218,
                            "testMethod": "@Test\n public void mazajai ( ) {\n     Word mazajai = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(mazajai.isRecognized());\n}",
                            "oracle": "assertTrue(mazajai.isRecognized());",
                            "oracleLn": 1216,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TokenizeTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 40,
                        "endLn": 44,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) throws Exception { \n loc\u012bt\u0101js = new Analyzer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "sentences_isolated_quotes",
                            "startLn": 865,
                            "endLn": 873,
                            "testMethod": "@Test\n public void sentences_isolated_quotes ( ) {\n     LinkedList < LinkedList < Word > > sentences ; \n     sentences = Splitting . tokenizeSentences ( loc\u012bt\u0101js , \"STR\" ) ; \n     assertEquals(1,sentences.size());\n}",
                            "oracle": "assertEquals(1,sentences.size());",
                            "oracleLn": 869,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenizeSentences",
                            "focalStartLn": 207,
                            "focalEndLn": 210,
                            "focalMethod": " public static LinkedList < LinkedList < Word > > tokenizeSentences ( Analyzer morphoAnalyzer , String paragraph ) { \n return tokenizeSentences ( morphoAnalyzer , paragraph , DEFAULT_SENTENCE_LENGTH_CAP ) ; \n } "
                        },
                        {
                            "testName": "year_numerals",
                            "startLn": 569,
                            "endLn": 578,
                            "testMethod": "@Test\n public void year_numerals ( ) {\n     LinkedList < Word > tokens ; \n     tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(2,tokens.size());\n}",
                            "oracle": "assertEquals(2,tokens.size());",
                            "oracleLn": 573,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        },
                        {
                            "testName": "Laura10Aug",
                            "startLn": 421,
                            "endLn": 435,
                            "testMethod": "@Test\n public void Laura10Aug ( ) {\n     LinkedList < Word > tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(2,tokens.size());\n}",
                            "oracle": "assertEquals(2,tokens.size());",
                            "oracleLn": 424,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        },
                        {
                            "testName": "singleletters",
                            "startLn": 580,
                            "endLn": 585,
                            "testMethod": "@Test\n public void singleletters ( ) {\n     LinkedList < Word > tokens ; \n     tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(3,tokens.size());\n}",
                            "oracle": "assertEquals(3,tokens.size());",
                            "oracleLn": 584,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "StackOverflowTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/parse/StackOverflowTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 31,
                        "endLn": 35,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new JSoupParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNamespaceExtraction",
                            "startLn": 46,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testNamespaceExtraction ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     parse ( \"STR\" , \"STR\" , metadata ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}",
                            "oracle": "Assert.assertEquals(1,output.getEmitted().size());",
                            "oracleLn": 51,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testBothAnchorAndQueryFilter",
                            "startLn": 137,
                            "endLn": 145,
                            "testMethod": "@Test\n public void testBothAnchorAndQueryFilter ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 144,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testRemoveDupeQueryParams",
                            "startLn": 117,
                            "endLn": 125,
                            "testMethod": "@Test\n public void testRemoveDupeQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 124,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testInvalidURI",
                            "startLn": 235,
                            "endLn": 263,
                            "testMethod": "@Test\n public void testInvalidURI ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , true ) ; \n     String nonURI = \"STR\" ; \n     URL testSourceUrl = new URL ( nonURI ) ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , nonURI ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 242,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                },
                {
                    "className": "RegexFilterTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/RegexFilterTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testImagesFilter",
                            "startLn": 53,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testImagesFilter ( ) throws MalformedURLException {\n     URLFilter allAllowed = createFilter ( ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(null,filterResult);\n}",
                            "oracle": "Assert.assertEquals(null,filterResult);",
                            "oracleLn": 59,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TextExtractorTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/parse/TextExtractorTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testMainContent",
                            "startLn": 27,
                            "endLn": 41,
                            "testMethod": "@Test\n public void testMainContent ( ) throws IOException {\n     Config conf = new Config ( ) ; \n     conf . put ( TextExtractor . INCLUDE_PARAM_NAME , \"STR\" ) ; \n     TextExtractor extractor = new TextExtractor ( conf ) ; \n     String content = \"STR\" ; \n     Document jsoupDoc = Parser . htmlParser ( ) . parseInput ( content , \"STR\" ) ; \n     String text = extractor . text ( jsoupDoc . body ( ) ) ; \n     assertEquals(\"STR\",text);\n}",
                            "oracle": "assertEquals(\"STR\",text);",
                            "oracleLn": 35,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/parse/TextExtractor.java",
                            "focalName": "text",
                            "focalStartLn": 74,
                            "focalEndLn": 102,
                            "focalMethod": " public String text ( Element element ) { \n if ( noText ) return \"STR\" ; \n if ( inclusionPatterns . size ( ) == 0 && excludedTags . size ( ) == 0 ) { \n return _text ( element ) ; \n } Elements matches = new Elements ( ) ; \n for ( String pattern : inclusionPatterns ) { \n matches = element . select ( pattern ) ; \n if ( ! matches . isEmpty ( ) ) break ; \n } if ( matches . isEmpty ( ) ) { \n matches . add ( element ) ; \n } final StringBuilder accum = new StringBuilder ( ) ; \n for ( Element node : matches ) { \n accum . append ( _text ( node ) ) . append ( \"STR\" ) ; \n } return accum . toString ( ) . trim ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SiteMapParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/SiteMapParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 37,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new SiteMapParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSitemapParsingNoMT",
                            "startLn": 210,
                            "endLn": 229,
                            "testMethod": "@Test\n public void testSitemapParsingNoMT ( ) throws IOException {\n     Map parserConfig = new HashMap ( ) ; \n     parserConfig . put ( \"STR\" , true ) ; \n     parserConfig . put ( \"STR\" , \"STR\" ) ; \n     bolt . prepare ( parserConfig , TestUtil . getMockedTopologyContext ( ) , new OutputCollector ( output ) ) ; \n     Metadata metadata = new Metadata ( ) ; \n     parse ( \"STR\" , \"STR\" , metadata ) ; \n     Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());\n}",
                            "oracle": "Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());",
                            "oracleLn": 218,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicIndexingTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupIndexerBolt",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupIndexerBolt ( ) { \n bolt = new DummyIndexer ( ) ; \n setupIndexerBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMissingCanonicalParamConfiguration",
                            "startLn": 136,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testMissingCanonicalParamConfiguration ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));",
                            "oracleLn": 145,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "setValue",
                            "focalStartLn": 125,
                            "focalEndLn": 129,
                            "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleStateTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "equal_to_state_with_same_puzzle",
                            "startLn": 138,
                            "endLn": 144,
                            "testMethod": "@Test\n public void equal_to_state_with_same_puzzle ( ) {\n     PuzzleState a = new PuzzleState ( getPuzzle ( 1 ) ) ; \n     PuzzleState b = new PuzzleState ( getPuzzle ( 1 ) ) ; \n     assertTrue(a.equals(b));\n}",
                            "oracle": "assertTrue(a.equals(b));",
                            "oracleLn": 142,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java",
                            "focalName": "equals",
                            "focalStartLn": 87,
                            "focalEndLn": 96,
                            "focalMethod": "@Override\n public boolean equals ( Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n PuzzleState that = ( PuzzleState ) o ; \n return puzzle . equals ( that . puzzle ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "puzzle_not_solved",
                            "startLn": 46,
                            "endLn": 53,
                            "testMethod": "@Test\n public void puzzle_not_solved ( ) {\n     int [ ] cells = getSolution ( ) ; \n     cells = swap ( cells , 3 , 4 ) ; \n     Puzzle p = new Puzzle ( cells ) ; \n     assertFalse(p.isSolved());\n}",
                            "oracle": "assertFalse(p.isSolved());",
                            "oracleLn": 51,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "isSolved",
                            "focalStartLn": 76,
                            "focalEndLn": 79,
                            "focalMethod": " public boolean isSolved ( ) { \n return getDistanceToGoal ( ) == 0 ; \n } "
                        },
                        {
                            "testName": "different_cells_means_different_puzzle",
                            "startLn": 96,
                            "endLn": 102,
                            "testMethod": "@Test\n public void different_cells_means_different_puzzle ( ) {\n     Puzzle a = new Puzzle ( getSolution ( ) ) ; \n     Puzzle b = new Puzzle ( swap ( getSolution ( ) , 8 , 2 ) ) ; \n     assertNotEquals(a,b);\n}",
                            "oracle": "assertNotEquals(a,b);",
                            "oracleLn": 100,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "Puzzle",
                            "focalStartLn": 15,
                            "focalEndLn": 18,
                            "focalMethod": " public Puzzle ( int [ ] cells ) { \n this . cells = cells ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CiEnvironmentTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/CiEnvironmentTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "recognises_tfs",
                            "startLn": 58,
                            "endLn": 69,
                            "testMethod": "@Test\n public void recognises_tfs ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 64,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        },
                        {
                            "testName": "recognises_bamboo",
                            "startLn": 18,
                            "endLn": 29,
                            "testMethod": "@Test\n public void recognises_bamboo ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 24,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        }
                    ]
                },
                {
                    "className": "ConfigTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/ConfigTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "has_yaml_representation",
                            "startLn": 66,
                            "endLn": 87,
                            "testMethod": "@Test\n public void has_yaml_representation ( ) {\n     Config config = new Config ( ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     config . set ( \"STR\" , \"STR\" ) ; \n     String expected = \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     assertEquals(expected,config.toYaml(\"STR\"));\n}",
                            "oracle": "assertEquals(expected,config.toYaml(\"STR\"));",
                            "oracleLn": 74,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "toYaml",
                            "focalStartLn": 100,
                            "focalEndLn": 108,
                            "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } "
                        },
                        {
                            "testName": "gets_deep_value",
                            "startLn": 28,
                            "endLn": 37,
                            "testMethod": "@Test\n public void gets_deep_value ( ) {\n     Config root = new Config ( ) ; \n     Config one = root . getChild ( \"STR\" ) ; \n     Config two = one . getChild ( \"STR\" ) ; \n     two . set ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",root.getString(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",root.getString(\"STR\"));",
                            "oracleLn": 34,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "getString",
                            "focalStartLn": 17,
                            "focalEndLn": 19,
                            "focalMethod": " public String getString ( String key ) { \n return getIn ( normalize ( key ) , false ) . getString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CucumberProResultsUrlBuilderTest",
                    "classPath": "src/test/java/io/cucumber/pro/results/CucumberProResultsUrlBuilderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "builds_url_for_appliance_when_env_var_is_set",
                            "startLn": 19,
                            "endLn": 25,
                            "testMethod": "@Test\n public void builds_url_for_appliance_when_env_var_is_set ( ) {\n     Config config = createConfig ( ) ; \n     config . set ( Keys . CUCUMBERPRO_URL , \"STR\" ) ; \n     String url = CucumberProResultsUrlBuilder . buildCucumberProUrl ( config , \"STR\" ) ; \n     assertEquals(\"STR\",url);\n}",
                            "oracle": "assertEquals(\"STR\",url);",
                            "oracleLn": 24,
                            "focalFile": "src/main/java/io/cucumber/pro/results/CucumberProResultsUrlBuilder.java",
                            "focalName": "buildCucumberProUrl",
                            "focalStartLn": 12,
                            "focalEndLn": 14,
                            "focalMethod": " static String buildCucumberProUrl ( final Config config , final String projectName ) { \n return getCucumberProUrl ( config ) + \"STR\" + encodeURIComponent ( projectName ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EnvFilterTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "filters_and_sorts_keys",
                            "startLn": 14,
                            "endLn": 37,
                            "testMethod": "@Test\n public void filters_and_sorts_keys ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Config config = createConfig ( ) ; \n     new EnvironmentVariablesConfigLoader ( env ) . load ( config ) ; \n     EnvFilter envFilter = new EnvFilter ( config ) ; \n     Map < String , String > expectedEnv = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     assertEquals(expectedEnv,envFilter.filter(env));\n}",
                            "oracle": "assertEquals(expectedEnv,envFilter.filter(env));",
                            "oracleLn": 21,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/EnvFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 18,
                            "focalEndLn": 25,
                            "focalMethod": " public Map < String , String > filter ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( Map . Entry < String , String > entry : env . entrySet ( ) ) { \n if ( ! maskPattern . matcher ( entry . getKey ( ) ) . matches ( ) ) result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; \n } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MacAddressTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddressMulticast",
                            "startLn": 101,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testAddressMulticast ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     assertTrue(macAddress.isMulticast());\n}",
                            "oracle": "assertTrue(macAddress.isMulticast());",
                            "oracleLn": 104,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "isMulticast",
                            "focalStartLn": 75,
                            "focalEndLn": 77,
                            "focalMethod": " public boolean isMulticast ( ) { \n return ( address [ 0 ] & MUTLTICAST_FLAG ) == MUTLTICAST_FLAG ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "AlejandroRivera",
            "repoName": "embedded-rabbitmq",
            "subRepos": [],
            "commitSHA": "79615bf3e8e738ba756ebb44e6bf456610de4520",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RandomPortSupplierTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/util/RandomPortSupplierTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testRandomPortIsReturned",
                            "startLn": 19,
                            "endLn": 23,
                            "testMethod": "@Test\n public void testRandomPortIsReturned ( ) throws IOException {\n     int port = new RandomPortSupplier ( ) . get ( ) ; \n     assertThat(port,not(equalTo(0)));\n}",
                            "oracle": "assertThat(port,not(equalTo(0)));",
                            "oracleLn": 22,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/util/RandomPortSupplier.java",
                            "focalName": "get",
                            "focalStartLn": 29,
                            "focalEndLn": 46,
                            "focalMethod": " public int get ( ) throws IllegalStateException { \n ServerSocket socket = null ; \n try { \n socket = this . severSocketFactory . createServerSocket ( 0 ) ; \n socket . setReuseAddress ( false ) ; \n return socket . getLocalPort ( ) ; \n } catch ( IOException e ) { \n throw new IllegalStateException ( \"STR\" , e ) ; \n } finally { \n if ( socket != null ) { \n try { \n socket . close ( ) ; \n } catch ( IOException e ) { \n LOGGER . debug ( \"STR\" , e ) ; \n } } } } "
                        }
                    ]
                },
                {
                    "className": "PluginTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/bin/plugins/PluginTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExplicitlyEnabledPluginLine",
                            "startLn": 37,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testExplicitlyEnabledPluginLine ( ) throws Exception {\n     String output = \"STR\" ; \n     Plugin plugin = Plugin . fromString ( output ) ; \n     assertThat(plugin.getName(),equalTo(\"STR\"));\n}",
                            "oracle": "assertThat(plugin.getName(),equalTo(\"STR\"));",
                            "oracleLn": 41,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/bin/plugins/Plugin.java",
                            "focalName": "getName",
                            "focalStartLn": 62,
                            "focalEndLn": 64,
                            "focalMethod": " public String getName ( ) { \n return pluginName ; \n } "
                        }
                    ]
                },
                {
                    "className": "RabbitMqCommandTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/bin/RabbitMqCommandTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 78,
                        "endLn": 103,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n version = PredefinedVersion . LATEST ; \n configBuilder = new EmbeddedRabbitMqConfig . Builder ( ) . extractionFolder ( tempFolder . getRoot ( ) ) . version ( this . version ) . processExecutorFactory ( this . factory ) ; \n command = RandomStringUtils . randomAlphabetic ( 10 ) ; \n this . processExecutor = Mockito . mock ( ProcessExecutor . class , new Answer ( ) { \n @Override\n public Object answer ( InvocationOnMock invocationOnMock ) throws Throwable { \n if ( invocationOnMock . getMethod ( ) . getName ( ) . equals ( \"STR\" ) ) { \n return startedProcess ; \n } return invocationOnMock . getMock ( ) ; \n } } ) ; \n when ( factory . createInstance ( ) ) . thenReturn ( processExecutor ) ; \n String appFolder = version . getExtractionFolder ( ) ; \n File executableFilesFolder = tempFolder . newFolder ( appFolder , RabbitMqCommand . BINARIES_FOLDER ) ; \n executableFile = new File ( executableFilesFolder , command + RabbitMqCommand . getCommandExtension ( ) ) ; \n assertTrue ( \"STR\" , executableFile . createNewFile ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "errorLoggingLevelDefaultsToWarn",
                            "startLn": 230,
                            "endLn": 240,
                            "testMethod": "@Test\n public void errorLoggingLevelDefaultsToWarn ( ) throws Exception {\n     rabbitMqCommand = new RabbitMqCommand ( configBuilder . build ( ) , command ) ; \n     rabbitMqCommand . call ( ) ; \n     ArgumentCaptor < OutputStream > osCaptor = ArgumentCaptor . forClass ( OutputStream . class ) ; \n     verify ( processExecutor ) . redirectError ( osCaptor . capture ( ) ) ; \n     OutputStream os = osCaptor . getValue ( ) ; \n     assertThat(os,instanceOf(Slf4jWarnOutputStream.class));\n}",
                            "oracle": "assertThat(os,instanceOf(Slf4jWarnOutputStream.class));",
                            "oracleLn": 237,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/bin/RabbitMqCommand.java",
                            "focalName": "call",
                            "focalStartLn": 208,
                            "focalEndLn": 235,
                            "focalMethod": "@Override\n public StartedProcess call ( ) throws RabbitMqCommandException { \n List < String > fullCommand = new ArrayList < > ( arguments ) ; \n fullCommand . add ( 0 , executableFile . toString ( ) ) ; \n Slf4jStream loggingStream = Slf4jStream . of ( processOutputLogger ) ; \n LoggingProcessListener loggingListener = new LoggingProcessListener ( processOutputLogger ) ; \n ProcessExecutor processExecutor = processExecutorFactory . createInstance ( ) . environment ( envVars ) . directory ( appFolder ) . command ( fullCommand ) . destroyOnExit ( ) . addListener ( loggingListener ) . addListener ( eventsListener ) . redirectError ( loggingStream . as ( stdErrLogLevel ) ) . redirectOutput ( loggingStream . as ( stdOutLogLevel ) ) . redirectOutputAlsoTo ( outputStream ) . redirectErrorAlsoTo ( errorOutputStream ) . readOutput ( storeOutput ) ; \n try { \n return processExecutor . start ( ) ; \n } catch ( IOException e ) { \n throw new RabbitMqCommandException ( \"STR\" + StringUtils . join ( fullCommand , \"STR\" ) , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ObjectQueryPreparerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 61,
                        "endLn": 71,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . preparer = new ObjectQueryPreparer ( ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . mockParameterReplacer = Mockito . mock ( ParameterReplacer . class ) ; \n this . testTarget001 = new TestClass001 ( ) ; \n this . testTarget002 = new TestClass002 ( ) ; \n this . testTarget003 = new TestClass003 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPrepareObjectQueryWithParameterReplacement",
                            "startLn": 126,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testPrepareObjectQueryWithParameterReplacement ( ) throws Exception {\n     ObjectQueryInfo result ; \n     this . initPreparer ( ) ; \n     Mockito . when ( this . mockParameterReplacer . replaceObjectNameParameters ( TEST_ONAME_STR002 , this . testTarget002 ) ) . thenReturn ( TEST_ONAME_STR002B ) ; \n     result = this . preparer . prepareObjectQuery ( this . testTarget002 ) ; \n     assertSame(this.testTarget002,result.getTarget());\n}",
                            "oracle": "assertSame(this.testTarget002,result.getTarget());",
                            "oracleLn": 132,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java",
                            "focalName": "getTarget",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public Object getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                },
                {
                    "className": "JolokiaConnectionTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JolokiaConnectionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 76,
                        "endLn": 122,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJ4pClient = Mockito . mock ( J4pClient . class ) ; \n this . mockJ4pReadResponse1 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pReadResponse2 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pSearchResponse = PowerMockito . mock ( J4pSearchResponse . class ) ; \n this . jolokiaConnection = new JolokiaConnection ( this . mockJ4pClient ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . objectName1 = new ObjectName ( \"STR\" ) ; \n this . objectName2 = new ObjectName ( \"STR\" ) ; \n this . queryExp = new ObjectName ( \"STR\" ) ; \n this . att1 = \"STR\" ; \n this . att2 = \"STR\" ; \n this . att3 = \"STR\" ; \n this . att4 = \"STR\" ; \n this . value1 = \"STR\" ; \n this . value2 = \"STR\" ; \n this . value3 = \"STR\" ; \n this . value4 = \"STR\" ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att4 ) ) . thenReturn ( this . value4 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName1 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName2 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att4 ) ) . thenReturn ( this . value4 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetLogger",
                            "startLn": 131,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetSetLogger ( ) throws Exception {\n     assertNotNull(this.jolokiaConnection.getLog());\n}",
                            "oracle": "assertNotNull(this.jolokiaConnection.getLog());",
                            "oracleLn": 133,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JolokiaConnection.java",
                            "focalName": "getLog",
                            "focalStartLn": 60,
                            "focalEndLn": 62,
                            "focalMethod": " public Logger getLog ( ) { \n return log ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXMBeanConnectionTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXMBeanConnectionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 48,
                        "endLn": 67,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockMBeanServerConnection = Mockito . mock ( MBeanServerConnection . class ) ; \n this . mockAttributeList = Mockito . mock ( AttributeList . class ) ; \n this . mockQueryExp = Mockito . mock ( QueryExp . class ) ; \n this . objectName = new ObjectName ( \"STR\" ) ; \n this . testAttributeList = new LinkedList < > ( ) ; \n Mockito . when ( this . mockJmxConnector . getMBeanServerConnection ( ) ) . thenReturn ( this . mockMBeanServerConnection ) ; \n Mockito . when ( this . mockMBeanServerConnection . getAttributes ( this . objectName , new String [ ] { \n \"STR\" } ) ) . thenReturn ( this . mockAttributeList ) ; \n Mockito . when ( this . mockAttributeList . asList ( ) ) . thenReturn ( this . testAttributeList ) ; \n Mockito . when ( this . mockMBeanServerConnection . queryNames ( this . objectName , this . mockQueryExp ) ) . thenReturn ( this . testQueryResult ) ; \n this . connection = new JMXMBeanConnection ( this . mockJmxConnector ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAttributes",
                            "startLn": 69,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetAttributes ( ) throws Exception {\n     List < Attribute > result = this . connection . getAttributes ( this . objectName , \"STR\" ) ; \n     assertSame(this.testAttributeList,result);\n}",
                            "oracle": "assertSame(this.testAttributeList,result);",
                            "oracleLn": 72,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXMBeanConnection.java",
                            "focalName": "getAttributes",
                            "focalStartLn": 44,
                            "focalEndLn": 49,
                            "focalMethod": "@Override\n public List < Attribute > getAttributes ( ObjectName objectName , String ... attributeNames ) throws InstanceNotFoundException , IOException , ReflectionException { \n return this . mBeanServerConnection . getAttributes ( objectName , attributeNames ) . asList ( ) ; \n } "
                        },
                        {
                            "testName": "testQueryNames",
                            "startLn": 76,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testQueryNames ( ) throws Exception {\n     Set < ObjectName > result = this . connection . queryNames ( this . objectName , this . mockQueryExp ) ; \n     assertSame(this.testQueryResult,result);\n}",
                            "oracle": "assertSame(this.testQueryResult,result);",
                            "oracleLn": 79,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXMBeanConnection.java",
                            "focalName": "queryNames",
                            "focalStartLn": 51,
                            "focalEndLn": 54,
                            "focalMethod": "@Override\n public Set < ObjectName > queryNames ( ObjectName pattern , QueryExp query ) throws IOException { \n return this . mBeanServerConnection . queryNames ( pattern , query ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BatchPollProcessorTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 64,
                        "endLn": 102,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . processor = new BatchPollProcessor ( ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polled001 = Mockito . mock ( TestClass001 . class ) ; \n this . polledObjects . add ( this . polled001 ) ; \n this . mockObjectQueryInfo001 = Mockito . mock ( ObjectQueryInfo . class ) ; \n this . objectName001 = Mockito . mock ( ObjectName . class ) ; \n this . attributeNames001 = new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . attributeSetters001 = new HashMap < > ( ) ; \n this . queryAttributeMap = new HashMap < > ( ) ; \n this . resultAttributeMap = new HashMap < > ( ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , String . class ) ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , int . class ) ) ; \n this . queryAttributeMap . put ( this . objectName001 , Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . resultAttributeMap . put ( this . objectName001 , Arrays . asList ( new Attribute ( \"STR\" , \"STR\" ) , new Attribute ( \"STR\" , 11 ) ) ) ; \n Mockito . when ( this . mockObjectQueryPreparer . prepareObjectQuery ( this . polled001 ) ) . thenReturn ( this . mockObjectQueryInfo001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getTarget ( ) ) . thenReturn ( this . polled001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getObjectName ( ) ) . thenReturn ( this . objectName001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeNames ( ) ) . thenReturn ( this . attributeNames001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeSetters ( ) ) . thenReturn ( this . attributeSetters001 ) ; \n Mockito . when ( this . mockAccessConnection . batchQueryAttributes ( this . createAttributeMapMatcher ( this . queryAttributeMap ) ) ) . thenReturn ( this . resultAttributeMap ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetAttributeInjector",
                            "startLn": 109,
                            "endLn": 116,
                            "testMethod": "@Test\n public void testGetSetAttributeInjector ( ) throws Exception {\n     assertNotNull(this.processor.getAttributeInjector());\n}",
                            "oracle": "assertNotNull(this.processor.getAttributeInjector());",
                            "oracleLn": 111,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java",
                            "focalName": "getAttributeInjector",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public AttributeInjector getAttributeInjector ( ) { \n return attributeInjector ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXJvmIdConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 54,
                        "endLn": 78,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . factory = new JMXJvmIdConnectionFactory ( \"STR\" ) ; \n this . mockVirtualMachine = Mockito . mock ( VirtualMachine . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAttacher = Mockito . mock ( VirtualMachineAttacher . class ) ; \n this . mockJmxServiceUrlFactory = Mockito . mock ( JMXServiceUrlFactory . class ) ; \n this . mockJmxConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMbeanConnectorFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMbeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockAgentProperties = Mockito . mock ( Properties . class ) ; \n this . mockSystemProperties = Mockito . mock ( Properties . class ) ; \n Mockito . when ( this . mockJmxServiceUrlFactory . createJMXServiceUrl ( \"STR\" ) ) . thenReturn ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockJmxConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMbeanConnectorFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMbeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateConnection",
                            "startLn": 121,
                            "endLn": 138,
                            "testMethod": "@Test\n public void testCreateConnection ( ) throws Exception {\n     this . initFactory ( ) ; \n     Mockito . when ( this . mockAttacher . attach ( \"STR\" ) ) . thenReturn ( this . mockVirtualMachine ) ; \n     Mockito . when ( this . mockVirtualMachine . getAgentProperties ( ) ) . thenReturn ( this . mockAgentProperties ) ; \n     Mockito . when ( this . mockVirtualMachine . getSystemProperties ( ) ) . thenReturn ( this . mockSystemProperties ) ; \n     Mockito . when ( this . mockAgentProperties . getProperty ( JMXJvmIdConnectionFactory . COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ) . thenReturn ( \"STR\" ) ; \n     MBeanAccessConnection result = this . factory . createConnection ( ) ; \n     assertSame(result,this.mockJmxMbeanConnection);\n}",
                            "oracle": "assertSame(result,this.mockJmxMbeanConnection);",
                            "oracleLn": 129,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java",
                            "focalName": "createConnection",
                            "focalStartLn": 104,
                            "focalEndLn": 132,
                            "focalMethod": "@Override\n public MBeanAccessConnection createConnection ( ) throws IOException { \n JMXMBeanConnection result = null ; \n try { \n VirtualMachine vm = this . attacher . attach ( jvmId ) ; \n String url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n if ( url == null ) { \n String javaHome = vm . getSystemProperties ( ) . getProperty ( \"STR\" ) ; \n String agent = javaHome + File . separator + \"STR\" + File . separator + \"STR\" ; \n vm . loadAgent ( agent ) ; \n url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n } if ( url != null ) { \n JMXServiceURL jmxUrl = this . jmxServiceUrlFactory . createJMXServiceUrl ( url ) ; \n JMXConnector connector = this . jmxConnectorFactoryDelegate . connect ( jmxUrl ) ; \n result = this . jmxmBeanConnectionFactory . create ( connector ) ; \n } else { \n log . warn ( \"STR\" , this . jvmId ) ; \n } } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) { \n log . warn ( \"STR\" , this . jvmId , exc ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "JmxAttributePollerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 77,
                        "endLn": 111,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . polled001 = new TestDataClass001 ( ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polledObjects . add ( \"STR\" ) ; \n this . polledObjects . add ( polled001 ) ; \n this . mockMBeanAccessConnectionFactory = Mockito . mock ( MBeanAccessConnectionFactory . class ) ; \n this . mockScheduler = Mockito . mock ( Scheduler . class ) ; \n this . mockBatchCapableAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanAccessConnection . class ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockBatchPollProcessor = Mockito . mock ( BatchPollProcessor . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockTestHooks = Mockito . mock ( JmxAttributePoller . ConcurrencyTestHooks . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . poller = new JmxAttributePoller ( this . polledObjects ) ; \n this . processes = new LinkedList < > ( ) ; \n this . executionSlips = new LinkedList < > ( ) ; \n Answer < SchedulerProcessExecutionSlip > startProcessAnswer = createProcessExecutionSlipAnswer ( null , null ) ; \n Mockito . when ( this . mockScheduler . startProcess ( Mockito . any ( SchedulerProcess . class ) ) ) . thenAnswer ( startProcessAnswer ) ; \n this . testObjectName001 = new ObjectName ( this . TEST_ONAME_001_STR ) ; \n this . accessConnectionFactoryDesc = \"STR\" ; \n Mockito . when ( this . mockMBeanAccessConnectionFactory . getTargetDescription ( ) ) . thenReturn ( this . accessConnectionFactoryDesc ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetAttributeInjector",
                            "startLn": 143,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetSetAttributeInjector ( ) throws Exception {\n     assertNotNull(this.poller.getAttributeInjector());\n}",
                            "oracle": "assertNotNull(this.poller.getAttributeInjector());",
                            "oracleLn": 145,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java",
                            "focalName": "getAttributeInjector",
                            "focalStartLn": 103,
                            "focalEndLn": 105,
                            "focalMethod": " public AttributeInjector getAttributeInjector ( ) { \n return attributeInjector ; \n } "
                        }
                    ]
                },
                {
                    "className": "ObjectQueryInfoTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testImmutableQueryInfo",
                            "startLn": 36,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testImmutableQueryInfo ( ) throws Exception {\n     Map < String , Method > setters = new HashMap < > ( ) ; \n     setters . put ( \"STR\" , null ) ; \n     setters . put ( \"STR\" , null ) ; \n     Object target = new Object ( ) ; \n     ObjectName oname = new ObjectName ( \"STR\" ) ; \n     ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo ( target , oname , setters ) ; \n     assertSame(target,objectQueryInfo.getTarget());\n}",
                            "oracle": "assertSame(target,objectQueryInfo.getTarget());",
                            "oracleLn": 44,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java",
                            "focalName": "getTarget",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public Object getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RangeTest",
                    "classPath": "src/test/java/com/basistech/tclre/RangeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testUpper",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testUpper ( ) throws Exception {\n     RePattern exp = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED , PatternFlags . EXPANDED ) ; \n     assertThat(\"STR\",matches(exp));\n}",
                            "oracle": "assertThat(\"STR\",matches(exp));",
                            "oracleLn": 60,
                            "focalFile": "src/main/java/com/basistech/tclre/HsrePattern.java",
                            "focalName": "compile",
                            "focalStartLn": 65,
                            "focalEndLn": 69,
                            "focalMethod": " public static RePattern compile ( String pattern , PatternFlags ... flags ) throws RegexException { \n EnumSet < PatternFlags > flagSet = EnumSet . noneOf ( PatternFlags . class ) ; \n Collections . addAll ( flagSet , flags ) ; \n return Compiler . compile ( pattern , flagSet ) ; \n } "
                        },
                        {
                            "testName": "testNotBom",
                            "startLn": 51,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testNotBom ( ) throws Exception {\n     RePattern exp = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED , PatternFlags . EXPANDED ) ; \n     assertThat(\"STR\",matches(exp));\n}",
                            "oracle": "assertThat(\"STR\",matches(exp));",
                            "oracleLn": 54,
                            "focalFile": "src/main/java/com/basistech/tclre/HsrePattern.java",
                            "focalName": "compile",
                            "focalStartLn": 65,
                            "focalEndLn": 69,
                            "focalMethod": " public static RePattern compile ( String pattern , PatternFlags ... flags ) throws RegexException { \n EnumSet < PatternFlags > flagSet = EnumSet . noneOf ( PatternFlags . class ) ; \n Collections . addAll ( flagSet , flags ) ; \n return Compiler . compile ( pattern , flagSet ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "MatcherTest",
                    "classPath": "src/test/java/apitests/MatcherTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "lookingAt",
                            "startLn": 95,
                            "endLn": 106,
                            "testMethod": "@Test\n public void lookingAt ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 99,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "SimpleTest",
                    "classPath": "src/test/java/com/basistech/tclre/SimpleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testNullQuant",
                            "startLn": 103,
                            "endLn": 107,
                            "testMethod": "@Test\n public void testNullQuant ( ) throws Exception {\n     RePattern exp = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     assertThat(\"STR\",matches(exp));\n}",
                            "oracle": "assertThat(\"STR\",matches(exp));",
                            "oracleLn": 106,
                            "focalFile": "src/main/java/com/basistech/tclre/HsrePattern.java",
                            "focalName": "compile",
                            "focalStartLn": 65,
                            "focalEndLn": 69,
                            "focalMethod": " public static RePattern compile ( String pattern , PatternFlags ... flags ) throws RegexException { \n EnumSet < PatternFlags > flagSet = EnumSet . noneOf ( PatternFlags . class ) ; \n Collections . addAll ( flagSet , flags ) ; \n return Compiler . compile ( pattern , flagSet ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RegressionTest",
                    "classPath": "src/test/java/com/basistech/tclre/RegressionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testStockSymbol",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testStockSymbol ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}",
                            "oracle": "assertTrue(matcher.find());",
                            "oracleLn": 61,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "find",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": " boolean find ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testShortOTP",
                            "startLn": 117,
                            "endLn": 121,
                            "testMethod": "@Test\n public void testShortOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}",
                            "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));",
                            "oracleLn": 120,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "isValidOTPFormat",
                            "focalStartLn": 222,
                            "focalEndLn": 233,
                            "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } "
                        },
                        {
                            "testName": "testValidOTPPublicId",
                            "startLn": 216,
                            "endLn": 222,
                            "testMethod": "@Test\n public void testValidOTPPublicId ( ) {\n     String testOtp = \"STR\" ; \n     String testPublicId = \"STR\" ; \n     String resultPublicId = YubicoClient . getPublicId ( testOtp ) ; \n     assertEquals(testPublicId,resultPublicId);\n}",
                            "oracle": "assertEquals(testPublicId,resultPublicId);",
                            "oracleLn": 221,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "getPublicId",
                            "focalStartLn": 197,
                            "focalEndLn": 210,
                            "focalMethod": " public static String getPublicId ( String otp ) { \n if ( ( otp == null ) || ( otp . length ( ) < OTP_MIN_LEN ) ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Integer len = otp . length ( ) ; \n return otp . substring ( 0 , len - 32 ) . toLowerCase ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JsonSchemaTest",
                    "classPath": "src/test/java/guru/nidi/loader/use/jsonschema/JsonSchemaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jsonSchemaWithLoader",
                            "startLn": 35,
                            "endLn": 39,
                            "testMethod": "@Test\n public void jsonSchemaWithLoader ( ) throws IOException , ProcessingException {\n     final JsonSchemaFactory factory = LoaderUriDownloader . createJsonSchemaFactory ( loader ) ; \n     assertTrue(validate(factory).isSuccess());\n}",
                            "oracle": "assertTrue(validate(factory).isSuccess());",
                            "oracleLn": 38,
                            "focalFile": "src/main/java/guru/nidi/loader/use/jsonschema/LoaderUriDownloader.java",
                            "focalName": "createJsonSchemaFactory",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static JsonSchemaFactory createJsonSchemaFactory ( Loader loader ) { \n return createJsonSchemaFactory ( loader , null , null , null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GithubTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/GithubTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 34,
                        "endLn": 37,
                        "setupMethod": "@BeforeClass\n public static void init ( ) { \n assumeMyLocalMachine ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "publicGithub",
                            "startLn": 39,
                            "endLn": 43,
                            "testMethod": "@Test\n public void publicGithub ( ) throws IOException {\n     final InputStream in = GithubLoader . forPublic ( USER , \"STR\" ) . fetchResource ( \"STR\" , - 1 ) ; \n     assertRamlStart(in);\n}",
                            "oracle": "assertRamlStart(in);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/guru/nidi/loader/url/GithubLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 85,
                            "focalEndLn": 98,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final String res = ( resourceBase == null || resourceBase . length ( ) == 0 ) ? \"STR\" : ( resourceBase + \"STR\" ) ; \n try ( final InputStream raw = fetcher . fetchFromUrl ( client , base , res + name , ifModifiedSince ) ) { \n if ( raw == null ) { \n return null ; \n } @ SuppressWarnings ( \"STR\" ) final Map < String , String > desc = new ObjectMapper ( ) . readValue ( raw , Map . class ) ; \n return fetcher . fetchFromUrl ( client , desc . get ( \"STR\" ) , \"STR\" , ifModifiedSince ) ; \n } catch ( IOException e ) { \n throw new ResourceNotFoundException ( res + name , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MavenConfigurationExtractorTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractorTest.java",
                    "subRepo": "enricher/api",
                    "classTests": [
                        {
                            "testName": "should_parse_deep_inner_objects",
                            "startLn": 67,
                            "endLn": 96,
                            "testMethod": "@Test\n public void should_parse_deep_inner_objects ( ) {\n     final Plugin fakePlugin = createFakePlugin ( \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     final Map < String , Object > config = MavenConfigurationExtractor . extract ( ( Xpp3Dom ) fakePlugin . getConfiguration ( ) ) ; \n     final Map < String , Object > e = new HashMap < > ( ) ; \n     e . put ( \"STR\" , \"STR\" ) ; \n     final Map < String , Object > d = new HashMap < > ( ) ; \n     d . put ( \"STR\" , e ) ; \n     final Map < String , Object > c = new HashMap < > ( ) ; \n     c . put ( \"STR\" , d ) ; \n     final Map < String , Object > expected = new HashMap < > ( ) ; \n     expected . put ( \"STR\" , c ) ; \n     assertThat(config).containsEntry(\"STR\",expected);\n}",
                            "oracle": "assertThat(config).containsEntry(\"STR\",expected);",
                            "oracleLn": 79,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractor.java",
                            "focalName": "extract",
                            "focalStartLn": 38,
                            "focalEndLn": 44,
                            "focalMethod": " public static Map < String , Object > extract ( Xpp3Dom root ) { \n if ( root == null ) { \n return new HashMap < > ( ) ; \n } return getElement ( root ) ; \n } "
                        },
                        {
                            "testName": "should_parse_simple_types",
                            "startLn": 32,
                            "endLn": 46,
                            "testMethod": "@Test\n public void should_parse_simple_types ( ) {\n     final Plugin fakePlugin = createFakePlugin ( \"STR\" ) ; \n     final Map < String , Object > config = MavenConfigurationExtractor . extract ( ( Xpp3Dom ) fakePlugin . getConfiguration ( ) ) ; \n     assertThat(config).containsEntry(\"STR\",\"STR\").containsEntry(\"STR\",\"STR\");\n}",
                            "oracle": "assertThat(config).containsEntry(\"STR\",\"STR\").containsEntry(\"STR\",\"STR\");",
                            "oracleLn": 36,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractor.java",
                            "focalName": "extract",
                            "focalStartLn": 38,
                            "focalEndLn": 44,
                            "focalMethod": " public static Map < String , Object > extract ( Xpp3Dom root ) { \n if ( root == null ) { \n return new HashMap < > ( ) ; \n } return getElement ( root ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorConfigTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "order",
                            "startLn": 96,
                            "endLn": 111,
                            "testMethod": "@Test\n public void order ( ) {\n     List < TestNamed > data = Arrays . asList ( new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) ) ; \n     List < String > inc = Arrays . asList ( \"STR\" , \"STR\" ) ; \n     ProcessorConfig pConfig = new ProcessorConfig ( inc , null , null ) ; \n     List < TestNamed > result = pConfig . prepareProcessors ( data , \"STR\" ) ; \n     assertEquals(2,result.size());\n}",
                            "oracle": "assertEquals(2,result.size());",
                            "oracleLn": 102,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProfileUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 43,
                            "endLn": 58,
                            "testMethod": "@Test\n public void simple ( ) throws IOException {\n     InputStream is = getClass ( ) . getResourceAsStream ( \"STR\" ) ; \n     assertNotNull(is);\n}",
                            "oracle": "assertNotNull(is);",
                            "oracleLn": 46,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "use",
                            "focalStartLn": 128,
                            "focalEndLn": 130,
                            "focalMethod": " public boolean use ( String inc ) { \n return ! excludes . contains ( inc ) && includes . contains ( inc ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CABACTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/CABACTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testMBSkipFlag",
                            "startLn": 148,
                            "endLn": 162,
                            "testMethod": "@Test\n public void testMBSkipFlag ( ) {\n     CABAC cabac = new CABAC ( 2 ) ; \n     MockMDecoder m = new MockMDecoder ( new int [ ] { \n 0 } , new int [ ] { \n 11 } ) ; \n     Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));\n}",
                            "oracle": "Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));",
                            "oracleLn": 152,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java",
                            "focalName": "readMBSkipFlag",
                            "focalStartLn": 703,
                            "focalEndLn": 713,
                            "focalMethod": " public boolean readMBSkipFlag ( MDecoder mDecoder , SliceType slType , boolean leftAvailable , boolean topAvailable , int mbX ) { \n int base = slType == SliceType . P ? 11 : 24 ; \n boolean ret = mDecoder . decodeBin ( base + ( leftAvailable && ! skipFlagLeft ? 1 : 0 ) + ( topAvailable && ! skipFlagsTop [ mbX ] ? 1 : 0 ) ) == 1 ; \n skipFlagLeft = skipFlagsTop [ mbX ] = ret ; \n return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "ColorExtensionTest",
                    "classPath": "src/test/java/org/jcodec/containers/mp4/boxes/ColorExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testColorMov",
                            "startLn": 18,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testColorMov ( ) throws Exception {\n     ColorExtension color = ColorExtension . createColr ( ) ; \n     ByteBuffer buf = ByteBuffer . allocate ( 64 ) ; \n     color . write ( buf ) ; \n     buf . flip ( ) ; \n     Assert.assertEquals(18,buf.remaining());\n}",
                            "oracle": "Assert.assertEquals(18,buf.remaining());",
                            "oracleLn": 24,
                            "focalFile": "src/main/java/org/jcodec/containers/mp4/boxes/Box.java",
                            "focalName": "write",
                            "focalStartLn": 50,
                            "focalEndLn": 58,
                            "focalMethod": " public void write ( ByteBuffer buf ) { \n ByteBuffer dup = buf . duplicate ( ) ; \n NIOUtils . skip ( buf , 8 ) ; \n doWrite ( buf ) ; \n header . setBodySize ( buf . position ( ) - dup . position ( ) - 8 ) ; \n checkState ( header . headerSize ( ) == ( long ) 8 ) ; \n header . write ( dup ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "NalUnitTypeTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTypeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIdentifiesBadTypeCorrectly",
                            "startLn": 40,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testIdentifiesBadTypeCorrectly ( ) {\n     assertEquals(\"STR\",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);\n}",
                            "oracle": "assertEquals(\"STR\",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnitType.java",
                            "focalName": "fromValue",
                            "focalStartLn": 60,
                            "focalEndLn": 62,
                            "focalMethod": " public static NALUnitType fromValue ( int value ) { \n return value > 0 && value < lut . length ? lut [ value ] : null ; \n } "
                        }
                    ]
                },
                {
                    "className": "BooleanCodingTest",
                    "classPath": "src/test/java/org/jcodec/codecs/vp8/BooleanCodingTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testLeadingZero",
                            "startLn": 18,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testLeadingZero ( ) throws Exception {\n     Assert.assertEquals(7,leadingZeroCountInByte((byte)1));\n}",
                            "oracle": "Assert.assertEquals(7,leadingZeroCountInByte((byte)1));",
                            "oracleLn": 20,
                            "focalFile": "src/main/java/org/jcodec/codecs/vpx/VPXBooleanDecoder.java",
                            "focalName": "leadingZeroCountInByte",
                            "focalStartLn": 243,
                            "focalEndLn": 253,
                            "focalMethod": " public static int leadingZeroCountInByte ( byte b ) { \n int i = b & 0xFF ; \n if ( i >= 128 || i == 0 ) return 0 ; \n return Integer . numberOfLeadingZeros ( b ) - 24 ; \n } "
                        }
                    ]
                },
                {
                    "className": "NalUnitTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCanReadNalUnitFromValidNal",
                            "startLn": 12,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testCanReadNalUnitFromValidNal ( ) {\n     byte [ ] data = new byte [ ] { \n ( byte ) 0x7C , ( byte ) 0x81 } ; \n     final NALUnit actual = NALUnit . read ( ByteBuffer . wrap ( data ) ) ; \n     assertEquals(\"STR\",3,actual.nal_ref_idc);\n}",
                            "oracle": "assertEquals(\"STR\",3,actual.nal_ref_idc);",
                            "oracleLn": 16,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnit.java",
                            "focalName": "read",
                            "focalStartLn": 23,
                            "focalEndLn": 30,
                            "focalMethod": " public static NALUnit read ( ByteBuffer _in ) { \n int nalu = _in . get ( ) & 0xff ; \n int nal_ref_idc = ( nalu > > 5 ) & 0x3 ; \n int nb = nalu & 0x1f ; \n NALUnitType type = NALUnitType . fromValue ( nb ) ; \n return new NALUnit ( type , nal_ref_idc ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdate",
                            "startLn": 82,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testUpdate ( ) {\n     assertEquals(\"STR\",sql.update(\"STR\").set(\"STR\").toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.update(\"STR\").set(\"STR\").toString());",
                            "oracleLn": 84,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        },
                        {
                            "testName": "testDelete",
                            "startLn": 89,
                            "endLn": 93,
                            "testMethod": "@Test\n public void testDelete ( ) {\n     assertEquals(\"STR\",sql.delete().from(\"STR\").toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.delete().from(\"STR\").toString());",
                            "oracleLn": 91,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jsevellec",
            "repoName": "cassandra-unit",
            "subRepos": [
                "cassandra-unit",
                "cassandra-unit-shaded",
                "cassandra-unit-spring"
            ],
            "commitSHA": "dec40b1b68944acc46f55dcc3d17857a0b3f73b9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CassandraUnitCommandLineLoaderTest",
                    "classPath": "cassandra-unit/src/test/java/org/cassandraunit/cli/CassandraUnitCommandLineLoaderTest.java",
                    "subRepo": "cassandra-unit",
                    "classTests": [
                        {
                            "testName": "shouldPrintUsageBecauseHostArgumentIsMissing",
                            "startLn": 56,
                            "endLn": 61,
                            "testMethod": "@Test\n public void shouldPrintUsageBecauseHostArgumentIsMissing ( ) throws Exception {\n     String [ ] args = { \n \"STR\" , \"STR\" , \"STR\" } ; \n     CassandraUnitCommandLineLoader . parseCommandLine ( args ) ; \n     assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));\n}",
                            "oracle": "assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));",
                            "oracleLn": 60,
                            "focalFile": "cassandra-unit/src/main/java/org/cassandraunit/cli/CassandraUnitCommandLineLoader.java",
                            "focalName": "isUsageBeenPrinted",
                            "focalStartLn": 143,
                            "focalEndLn": 145,
                            "focalMethod": " protected static boolean isUsageBeenPrinted ( ) { \n return usageBeenPrinted ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCleanTargetDir",
                            "startLn": 366,
                            "endLn": 388,
                            "testMethod": "@Test\n public void testCleanTargetDir ( ) throws Exception {\n     File tempClass = new File ( targetDir , \"STR\" ) ; \n     Files . write ( tempClass . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(tempClass.exists());\n}",
                            "oracle": "assertTrue(tempClass.exists());",
                            "oracleLn": 370,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "cleanTargetDir",
                            "focalStartLn": 4155,
                            "focalEndLn": 4170,
                            "focalMethod": " protected void cleanTargetDir ( File outputDirectory ) { \n File [ ] fList = outputDirectory . listFiles ( ) ; \n if ( fList != null ) { \n for ( File file : fList ) { \n if ( file . isFile ( ) && file . getName ( ) . toLowerCase ( ) . endsWith ( \"STR\" ) ) { \n file . delete ( ) ; \n info ( \"STR\" + file ) ; \n } else if ( file . isDirectory ( ) ) { \n cleanTargetDir ( file ) ; \n } } } if ( outputDirectory . listFiles ( ) . length == 0 ) { \n outputDirectory . delete ( ) ; \n } } "
                        },
                        {
                            "testName": "testGeneratedConfigFiles",
                            "startLn": 439,
                            "endLn": 448,
                            "testMethod": "@Test\n public void testGeneratedConfigFiles ( ) throws Exception {\n     File sourceFile = new File ( configDirectory , \"STR\" ) ; \n     createTargetFile ( sourceFile . getName ( ) , true ) ; \n     assertTrue(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));\n}",
                            "oracle": "assertTrue(\"STR\",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));",
                            "oracleLn": 443,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "isGeneratedConfigFile",
                            "focalStartLn": 3989,
                            "focalEndLn": 3992,
                            "focalMethod": " protected boolean isGeneratedConfigFile ( File fileChanged , File srcDir , File targetDir ) throws IOException { \n return ( fileChanged . getName ( ) . equals ( \"STR\" ) || fileChanged . getName ( ) . equals ( \"STR\" ) ) && isGeneratedTargetFile ( fileChanged , srcDir , targetDir ) ; \n } "
                        },
                        {
                            "testName": "testCopyFile",
                            "startLn": 338,
                            "endLn": 347,
                            "testMethod": "@Test\n public void testCopyFile ( ) throws Exception {\n     File configFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( configFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     util . copyFile ( configFile , srcDir , targetDir , \"STR\" ) ; \n     File targetFile = new File ( targetDir , \"STR\" ) ; \n     assertTrue(targetFile.exists());\n}",
                            "oracle": "assertTrue(targetFile.exists());",
                            "oracleLn": 344,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "copyFile",
                            "focalStartLn": 4093,
                            "focalEndLn": 4104,
                            "focalMethod": " public void copyFile ( File fileChanged , File srcDir , File targetDir , String targetFileName ) throws IOException { \n File targetResource = getTargetFile ( fileChanged , srcDir , targetDir , targetFileName ) ; \n try { \n FileUtils . copyFile ( fileChanged , targetResource ) ; \n info ( \"STR\" + fileChanged . getCanonicalPath ( ) + \"STR\" + targetResource . getCanonicalPath ( ) ) ; \n } catch ( FileNotFoundException ex ) { \n debug ( \"STR\" + fileChanged . getCanonicalPath ( ) ) ; \n } catch ( Exception ex ) { \n debug ( ex ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "JavaCompilerOptionsTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testDefaultOptions",
                            "startLn": 46,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testDefaultOptions ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(1,result.size());\n}",
                            "oracle": "assertEquals(1,result.size());",
                            "oracleLn": 50,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java",
                            "focalName": "getOptions",
                            "focalStartLn": 51,
                            "focalEndLn": 60,
                            "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fizzed",
            "repoName": "jne",
            "subRepos": [],
            "commitSHA": "783226a1fb002d304d22f841870c5c73575fc994",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JNETest",
                    "classPath": "src/test/java/com/fizzed/jne/JNETest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "findExecutable",
                            "startLn": 60,
                            "endLn": 83,
                            "testMethod": "@Test\n public void findExecutable ( ) throws IOException , ExtractException {\n     Options options = new Options ( ) ; \n     options . setOperatingSystem ( OperatingSystem . LINUX ) ; \n     options . setHardwareArchitecture ( HardwareArchitecture . X64 ) ; \n     File file ; \n     file = JNE . findExecutable ( \"STR\" , options ) ; \n     assertThat(file,is(not(nullValue())));\n}",
                            "oracle": "assertThat(file,is(not(nullValue())));",
                            "oracleLn": 67,
                            "focalFile": "src/main/java/com/fizzed/jne/JNE.java",
                            "focalName": "findExecutable",
                            "focalStartLn": 105,
                            "focalEndLn": 107,
                            "focalMethod": " synchronized static public File findExecutable ( String name , Options options ) throws IOException { \n return findExecutable ( name , null , options ) ; \n } "
                        },
                        {
                            "testName": "findFile",
                            "startLn": 34,
                            "endLn": 58,
                            "testMethod": "@Test\n public void findFile ( ) throws IOException , ExtractException {\n     Options options = new Options ( ) ; \n     options . setOperatingSystem ( OperatingSystem . LINUX ) ; \n     options . setHardwareArchitecture ( HardwareArchitecture . X64 ) ; \n     File file ; \n     file = JNE . findFile ( \"STR\" , options ) ; \n     assertThat(file,is(not(nullValue())));\n}",
                            "oracle": "assertThat(file,is(not(nullValue())));",
                            "oracleLn": 41,
                            "focalFile": "src/main/java/com/fizzed/jne/JNE.java",
                            "focalName": "findFile",
                            "focalStartLn": 320,
                            "focalEndLn": 339,
                            "focalMethod": " synchronized static public File findFile ( String name , Options options ) throws IOException { \n if ( options == null ) { \n options = DEFAULT_OPTIONS ; \n } File file = JNE . find ( name , name , options , options . getOperatingSystem ( ) , options . getHardwareArchitecture ( ) ) ; \n if ( file == null ) { \n file = JNE . find ( name , name , options , options . getOperatingSystem ( ) , HardwareArchitecture . ANY ) ; \n } if ( file == null ) { \n file = JNE . find ( name , name , options , OperatingSystem . ANY , HardwareArchitecture . ANY ) ; \n } return file ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkUAHUKMinus",
                            "startLn": 237,
                            "endLn": 241,
                            "testMethod": "@Test\n public void checkUAHUKMinus ( ) {\n     assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));",
                            "oracleLn": 239,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "ExpediaGroup",
            "repoName": "beeju",
            "subRepos": [],
            "commitSHA": "2263c4aac9a96e93328cdff7b5d31e1a795d885e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BeejuCoreTest",
                    "classPath": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "initialisedDbNameAndHiveConfConstructor",
                            "startLn": 109,
                            "endLn": 118,
                            "testMethod": "@Test\n public void initialisedDbNameAndHiveConfConstructor ( ) {\n     assertThat(dbNameAndHiveConfCore.databaseName(),is(\"STR\"));\n}",
                            "oracle": "assertThat(dbNameAndHiveConfCore.databaseName(),is(\"STR\"));",
                            "oracleLn": 111,
                            "focalFile": "src/main/java/com/hotels/beeju/core/BeejuCore.java",
                            "focalName": "databaseName",
                            "focalStartLn": 266,
                            "focalEndLn": 268,
                            "focalMethod": " public String databaseName ( ) { \n return databaseName ; \n } "
                        },
                        {
                            "testName": "deleteDirectory",
                            "startLn": 125,
                            "endLn": 131,
                            "testMethod": "@Test\n public void deleteDirectory ( ) throws IOException {\n     BeejuCore testCore = new BeejuCore ( ) ; \n     testCore . cleanUp ( ) ; \n     assertFalse(Files.exists(testCore.warehouseDir()));\n}",
                            "oracle": "assertFalse(Files.exists(testCore.warehouseDir()));",
                            "oracleLn": 129,
                            "focalFile": "src/main/java/com/hotels/beeju/core/BeejuCore.java",
                            "focalName": "warehouseDir",
                            "focalStartLn": 288,
                            "focalEndLn": 290,
                            "focalMethod": " public Path warehouseDir ( ) { \n return warehouseDir ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "mikolajmitura",
            "repoName": "java-properties-to-json",
            "subRepos": [],
            "commitSHA": "47137e7cdcfc9e003e710e3f60409e451c4f0454",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LocalDateToJsonTypeConverterTest",
                    "classPath": "src/test/java/pl/jalokim/propertiestojson/resolvers/primitives/custom/LocalDateToJsonTypeConverterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "convertLocalDateToJsonObject",
                            "startLn": 26,
                            "endLn": 37,
                            "testMethod": "@Test\n public void convertLocalDateToJsonObject ( ) {\n     LocalDate localDate = LocalDate . of ( 2019 , 8 , 4 ) ; \n     LocalDateToJsonTypeConverter resolver = new LocalDateToJsonTypeConverter ( false ) ; \n     AbstractJsonType jsonObject = resolver . convertToJsonTypeOrEmpty ( null , localDate , \"STR\" ) . get ( ) ; \n     assertThat(jsonObject).isNotNull();\n}",
                            "oracle": "assertThat(jsonObject).isNotNull();",
                            "oracleLn": 31,
                            "focalFile": "src/main/java/pl/jalokim/propertiestojson/resolvers/primitives/custom/LocalDateToJsonTypeConverter.java",
                            "focalName": "convertToJsonTypeOrEmpty",
                            "focalStartLn": 61,
                            "focalEndLn": 71,
                            "focalMethod": "@Override\n public Optional < AbstractJsonType > convertToJsonTypeOrEmpty ( PrimitiveJsonTypesResolver primitiveJsonTypesResolver , LocalDate convertedValue , String propertyKey ) { \n if ( asTimestampInUTC ) { \n return Optional . of ( new NumberJsonType ( convertedValue . atStartOfDay ( ZoneOffset . UTC ) . toEpochSecond ( ) ) ) ; \n } else if ( ! propertyKey . contains ( \"STR\" ) ) { \n return Optional . of ( SuperObjectToJsonTypeConverter . convertFromObjectToJson ( convertedValue , propertyKey ) ) ; \n } return Optional . empty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "xmlet",
            "repoName": "XsdParser",
            "subRepos": [],
            "commitSHA": "8dce9914aac46eea527f6c773a753175e93ad709",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "IssuesTest",
                    "classPath": "src/test/java/org/xmlet/xsdparser/IssuesTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIssue27Attributes",
                            "startLn": 322,
                            "endLn": 359,
                            "testMethod": "@Test\n public void testIssue27Attributes ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertEquals(1,schemas.size());\n}",
                            "oracle": "Assert.assertEquals(1,schemas.size());",
                            "oracleLn": 326,
                            "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java",
                            "focalName": "getResultXsdSchemas",
                            "focalStartLn": 413,
                            "focalEndLn": 420,
                            "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "EdgeCases",
                    "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNull",
                            "startLn": 62,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testNull ( ) {\n     assertEquals(\"STR\",m.markdown(null));\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(null));",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "HandleHtmlInlineTagsTest",
                    "classPath": "core/src/test/java/org/markdownj/test/HandleHtmlInlineTagsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 11,
                        "endLn": 14,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInlineTagsWithMarkdown",
                            "startLn": 16,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testInlineTagsWithMarkdown ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\").trim());\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\").trim());",
                            "oracleLn": 18,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSameChars",
                            "startLn": 65,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));",
                            "oracleLn": 67,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "repeatChar",
                            "focalStartLn": 1233,
                            "focalEndLn": 1239,
                            "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "khennig",
            "repoName": "jpql-querybuilder",
            "subRepos": [],
            "commitSHA": "61206f7c42631c67a49603b9beddccf48a8112e8",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OrderColumnTest",
                    "classPath": "src/test/java/com/tri/persistence/jpql/OrderColumnTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "renderDesc",
                            "startLn": 26,
                            "endLn": 32,
                            "testMethod": "@Test\n public void renderDesc ( ) {\n     OrderColumn oc = new OrderColumn ( \"STR\" , Order . DESC ) ; \n     assertThat(oc.render()).isEqualTo(\"STR\");\n}",
                            "oracle": "assertThat(oc.render()).isEqualTo(\"STR\");",
                            "oracleLn": 29,
                            "focalFile": "src/main/java/com/tri/persistence/jpql/OrderColumn.java",
                            "focalName": "render",
                            "focalStartLn": 37,
                            "focalEndLn": 43,
                            "focalMethod": " public String render ( ) { \n StringBuilder builder = new StringBuilder ( column ) ; \n if ( order != null ) { \n builder . append ( \"STR\" ) . append ( getOrder ( ) . name ( ) ) ; \n } return builder . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "ToastShaman",
            "repoName": "dropwizard-auth-jwt",
            "subRepos": [],
            "commitSHA": "17850c4ad75d1209b1218d140dcef399f4061988",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JwtCachingAuthenticatorTest",
                    "classPath": "src/test/java/com/github/toastshaman/dropwizard/auth/jwt/JwtCachingAuthenticatorTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 85,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n when ( underlying . authenticate ( any ( JwtContext . class ) ) ) . thenReturn ( Optional . < Principal > of ( new PrincipalImpl ( \"STR\" ) ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "doesNotCacheDifferingTokens",
                            "startLn": 95,
                            "endLn": 101,
                            "testMethod": "@Test\n public void doesNotCacheDifferingTokens ( ) throws Exception {\n     assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(\"STR\")));\n}",
                            "oracle": "assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(\"STR\")));",
                            "oracleLn": 97,
                            "focalFile": "src/main/java/com/github/toastshaman/dropwizard/auth/jwt/CachingJwtAuthenticator.java",
                            "focalName": "authenticate",
                            "focalStartLn": 57,
                            "focalEndLn": 74,
                            "focalMethod": "@Override\n public Optional < P > authenticate ( JwtContext context ) throws AuthenticationException { \n final Timer . Context timer = gets . time ( ) ; \n try { \n final SimpleEntry < JwtContext , Optional < P > > cacheEntry = cache . getIfPresent ( context . getJwt ( ) ) ; \n if ( cacheEntry != null ) { \n return cacheEntry . getValue ( ) ; \n } cacheMisses . mark ( ) ; \n final Optional < P > principal = authenticator . authenticate ( context ) ; \n if ( principal . isPresent ( ) ) { \n cache . put ( context . getJwt ( ) , new SimpleEntry < > ( context , principal ) ) ; \n } return principal ; \n } finally { \n timer . stop ( ) ; \n } } "
                        }
                    ]
                }
            ]
        }
    ]
}