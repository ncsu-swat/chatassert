OracleID	ClassName	TestName	TrueOracle	GenOracle	Correct
0	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual);	0
1	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
2	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	0
3	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
4	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNull(actual);	0
5	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
6	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals(expected,actual);	0
7	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(condition);	0
8	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	0
9	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(condition);	0
0	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	1
1	VerbsTest	testVoided	assertNotNull(actual);	assertNotSame(Verbs.createVerb("STR"),actual);	0
2	VerbsTest	testVoided	assertNotNull(actual);	assertEquals("STR",actual.getName());	0
3	VerbsTest	testVoided	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getAliases());	0
4	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals(Verbs.createVerb("STR"),actual);	0
5	VerbsTest	testVoided	assertNotNull(actual);	assertSame(Verbs.createVerb("STR"),actual);	0
6	VerbsTest	testVoided	assertNotNull(actual);	assertThrows(IllegalArgumentException.class,()->Verbs.createVerb(null));	0
7	VerbsTest	testVoided	assertNotNull(actual);	assertFalse(actual.isNotVoided());	0
8	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	0
9	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actual.isVoided());	0
0	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotSame(expected,actual);	0
1	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	0
2	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
3	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	0
4	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(object);	0
5	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNull(object);	0
6	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(condition);	0
7	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	0
8	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(condition);	0
0	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(internal.getActiveIntent());	0
1	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(getActiveIntent()instanceofOIntent);	0
2	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	1
3	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(intent,getActiveIntent());	0
4	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntent.class,getActiveIntent().getClass());	0
5	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()instanceofOIntentMassiveInsert);	0
6	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(getActiveIntent(),internal.getActiveIntent());	0
7	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	0
8	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(internal.getActiveIntent(),getActiveIntent());	0
9	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(intent,getActiveIntent());	0
0	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	0
1	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	1
2	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>var);	0
3	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(storedVar<var);	0
4	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNull(buffer2.get(9));	0
5	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(buffer1.get(9),buffer.get(0));	0
6	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer,buffer2);	0
7	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertSame(buffer,buffer1);	0
8	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1.get(8),buffer.get(1));	0
9	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertArrayEquals(buffer.array(),buffer2.array());	0
0	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(5,qResult.size());	0
1	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(1,qResult.get(0).field("STR"));	0
2	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
3	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult.get(0).field("STR"));	0
4	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.isEmpty());	0
5	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(0,qResult.size());	0
6	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
7	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	0
8	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals("STR",qResult.get(0).field("STR"));	0
9	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>3);	0
0	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(getParamCount()==0);	0
1	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(getParamCount()>0);	0
2	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(simpleKeyIndexDefinition.getKeyType(),OType.DOUBLE);	0
3	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(1,getParamCount());	0
4	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNull(null);	0
5	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyTypes);	0
6	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,getParamCount());	0
8	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(keyTypes.length,0);	0
9	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(simpleKeyIndexDefinition.getKeyType(),OType.INTEGER);	0
0	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.containsField("STR"));	0
1	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc2.containsField("STR"));	0
2	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(getReal().newRecords.contains(doc));	0
3	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals("STR",doc.field("STR"));	0
4	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc,manager.getRecord());	0
5	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager);	0
6	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	0
7	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(getReal().newRecords,getNewRecords());	0
8	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc,doc2);	0
0	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStopped());	0
1	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStarted());	0
2	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotEquals("STR",proc.getExtractor().getCurrentRecord().toString());	0
3	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	0
4	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotEquals(0,proc.getExtractor().getProcessedRecords());	0
5	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNull(proc.getError());	0
6	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(0,proc.getExtractor().getTotalRecords());	0
7	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(1,proc.getLoader().getTotalRecords());	0
8	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotSame(proc.getExtractor(),proc.getLoader());	0
9	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertFalse(proc.isStopped());	0
0	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertSame(result,db.query("STR"));	0
1	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	0
2	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotEquals(2L,result.getProperty("STR"));	0
3	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
4	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotEquals(1L,result.getProperty("STR"));	0
5	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNull(result.getProperty("STR"));	0
6	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotSame(result,db.query("STR"));	0
7	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(1L,result.getProperty("STR"));	0
8	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
9	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(2L,result.getProperty("STR"));	0
0	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{true},newboolean[]{doc.isDirty()});	0
1	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
2	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
3	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0
4	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
5	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0
6	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
7	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	0
8	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(true,doc.isDirty());	0
0	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResultinstanceofOResultSet);	0
1	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
2	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals("STR",qResult.next().getProperty("STR"));	0
3	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(!qResult.hasNext());	0
4	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(OResultSet.class,qResult.getClass());	0
5	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
6	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(OResultSet.class,qResult.getClass());	0
7	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	0
8	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext()&&!qResult.hasNext());	0
9	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(!qResult.hasNext());	0
0	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(20),test.get(24));	0
1	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	1
2	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	0
3	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertSame(Integer.valueOf(11),test.get(24));	0
4	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(10),test.get(24));	0
5	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(test.get(24).toString(),String.CASE_INSENSITIVE_ORDER);	0
6	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.get(24)instanceofInteger);	0
7	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThrows(NullPointerException.class,()->test.get(24));	0
8	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(Integer.valueOf(10),test.get(24));	0
9	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(null,test.get(24));	0
0	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(readInterIntraUvMode(5,decoder,c));	0
1	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(5,readInterIntraUvMode(0,decoder,c));	0
2	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(readInterIntraUvMode(2,decoder,c)>0);	0
3	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
4	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotEquals(7,readInterIntraUvMode(1,decoder,c));	0
5	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNull(readInterIntraUvMode(4,decoder,c));	0
6	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(readInterIntraUvMode(3,decoder,c)==10);	0
7	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotSame(decoder,readInterIntraUvMode(6,decoder,c));	0
8	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertSame(c,readInterIntraUvMode(7,decoder,c));	0
0	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals("STR",kindAndName.getKind());	0
1	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals("STR",kindAndName.getName());	0
2	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(secondKindAndName);	0
3	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(kindAndName,secondKindAndName);	0
4	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertSame(kindAndName,secondKindAndName);	0
5	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(kindAndName,thirdKindAndName);	0
6	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNull(kindAndName);	0
7	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.getKind().equals("STR"));	0
8	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(kindAndName,thirdKindAndName);	0
9	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.getKind().equals("STR"));	0
0	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertSame(object1,object2);	0
1	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertEquals("STR",config.get(Configs.Key.SOME_KEY));	0
2	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(string.contains(substring));	0
3	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertNotSame(object1,object2);	0
4	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertFalse(condition);	0
5	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(list.isEmpty());	0
6	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertNotNull(config.get(Configs.Key.SOME_KEY));	0
7	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertEquals(expectedValue,actualValue);	0
8	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(collection.contains(element));	0
9	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(condition);	0
0	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(pConfig.prepareProcessors(getAllTestData(),"STR"),filtered);	0
1	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(0,filtered.size());	0
2	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotEquals(0,pConfig.prepareProcessors(getAllTestData(),"STR").size());	0
3	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.contains(null));	0
4	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.isEmpty());	0
5	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(10,pConfig.prepareProcessors(getAllTestData(),"STR").size());	0
6	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(3,pConfig.prepareProcessors(getAllTestData(),"STR").size());	0
7	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotNull(pConfig);	0
8	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(pConfig.prepareProcessors(getAllTestData(),"STR").contains(filter));	0
9	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(getAllTestData(),filtered);	0
0	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedSize,result.size());	0
1	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(result);	0
2	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedProfile.hashCode(),result.get(0).hashCode());	0
3	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(result.isEmpty());	0
4	ProfileUtilTest	multiple	assertNotNull(is);	assertNotSame(expectedProfile,result.get(0));	0
6	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(expectedProfile,result.get(0));	0
7	ProfileUtilTest	multiple	assertNotNull(is);	assertArrayEquals(expectedProfiles.toArray(),result.toArray());	0
8	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(result.contains(expectedProfile));	0
9	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(result.stream().allMatch(p->p.getName().startsWith("STR")));	0
0	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
1	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertArrayEquals(expectedArray,getInitContainer(builder,"STR"));	0
2	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotSame(expectedObj,getInitContainer(builder,"STR"));	0
3	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(getInitContainer(builder,"STR"));	0
4	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	0
5	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals(expectedArray,getInitContainer(builder,"STR"));	0
6	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals("STR",getInitContainer(builder,"STR"));	0
7	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR"));	0
8	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(hasInitContainer(builder,"STR"));	0
9	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertSame(expectedObj,getInitContainer(builder,"STR"));	0
0	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertEquals(expectedUrl,url);	0
1	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(url.startsWith(expectedPrefix));	0
2	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotEquals(unexpectedUrl,url);	0
3	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertSame(expectedUrl,url);	0
4	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotSame("STR",expectedUrl,url);	0
5	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertFalse(url.startsWith(unexpectedPrefix));	0
6	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotNull(url);	0
7	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertFalse(url.isEmpty());	0
8	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(url.isEmpty());	0
9	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNull(url);	0
0	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertSame(serverEnvFile,newFile(serverDirectory.getCanonicalPath()+"STR"));	0
1	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals("STR",newString(Files.readAllBytes(serverEnvBackup.toPath())));	0
2	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNull(serverEnvFile.getParentFile());	0
3	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile.exists());	0
4	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotNull(serverEnvBackup.getParentFile());	0
5	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotSame(serverEnvBackup,serverEnvFile);	0
6	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBackup.exists());	0
7	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(serverEnv.toPath()));	0
8	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotEquals("STR",newString(Files.readAllBytes(serverEnvBackup.toPath())));	0
9	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBackup.delete());	0
0	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
1	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertSame("STR",fileString);	0
2	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals("STR",fileString);	0
3	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
4	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertArrayEquals("STR".getBytes(),fileString.getBytes());	0
5	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(util.readFile(tempFile).contains("STR"));	0
6	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
7	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	0
8	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(null,fileString);	0
0	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists()&&targetFile.length()>0);	0
1	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(srcDir));	0
2	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0
3	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
4	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.exists());	0
5	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
6	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
7	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(newFile(targetDir,"STR").getCanonicalPath(),targetFile.getCanonicalPath());	0
8	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(targetDir));	0
0	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertFalse(evt.getLoggerName().equals("STR"));	0
1	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
2	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNull(filter.decide(null));	0
3	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(null));	0
4	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertArrayEquals(newObject[]{FilterReply.DENY},newObject[]{filter.decide(evt)});	0
5	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(evt.getLoggerName().startsWith("STR"));	0
6	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotSame(FilterReply.ACCEPT,filter.decide(evt));	0
7	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	1
8	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0
9	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertSame(FilterReply.DENY,filter.decide(evt));	0
0	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult.length(),normalizedUrl.length());	0
1	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(testSourceUrl.getProtocol()));	0
2	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
3	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	0
4	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceUrl.getRef());	0
5	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	0
6	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
7	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
8	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(urlToFilter.isEmpty());	0
9	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlToFilter.contains(testSourceUrl.getHost()));	0
0	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
1	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	0
2	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
3	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testUrl,normalizedUrl);	0
4	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	0
5	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	0
6	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.contains("STR"));	0
7	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
8	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(urlFilter.filter(null,null,null));	0
0	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlWithEscapedCharacters.length()>0);	0
1	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
2	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(sourceUrl,testSourceUrl);	0
3	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
4	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
5	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	0
6	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
7	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(urlWithEscapedCharacters,testUrl);	0
8	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceMetadata);	0
9	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
0	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.CLIENT,result.get(0).getTargetType());	0
1	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.PREFER_CLIENT));	0
2	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	0
3	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.PREFER_CLIENT,result.get(2).getTargetType());	0
4	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.MEMBER));	0
5	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.size());	0
6	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.CLIENT));	0
7	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.isEmpty());	0
8	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.ALL));	0
9	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.MEMBER,result.get(1).getTargetType());	0
0	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.contains("STR"));	0
1	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.size());	0
2	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(5,registry.size());	0
3	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	0
4	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertSame(agents,registry);	0
5	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertFalse(registry.contains("STR"));	0
6	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNull(registry.get("STR"));	0
7	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.isEmpty());	0
8	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry.get("STR"));	0
9	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotSame(agents,registry);	0
0	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	1
1	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
2	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.agents.isEmpty());	0
3	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.entrySet().stream().anyMatch(e->e.getKey().equals("STR")&&e.getValue().equals("STR")));	0
4	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(2,registry.agentCount());	0
5	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotNull(registry.getAgent("STR"));	0
6	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNull(registry.getAgent("STR"));	0
7	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertSame(agentsFile,registry.getAgentsFile());	0
8	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.containsKey("STR"));	0
9	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.containsValue("STR"));	0
0	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals(MoneyToStr.Currency.UAH,moneyToStrUAH.getCurrency());	0
1	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(moneyToStrUAH.getCurrency(),moneyToStrRUR.getCurrency());	0
2	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame("STR",fractPart,theMoney);	0
3	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrRUR.getCurrency());	0
4	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrEURRUS.getCurrency()instanceofMoneyToStr.Currency);	0
5	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrUSDENG.getCurrency()==MoneyToStr.Currency.RUR);	0
6	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNull(intPart);	0
7	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertSame(intPart,theMoney.longValue());	0
8	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(moneyToStrUAHENG.getCurrency(),moneyToStrUAH.getCurrency());	0
9	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertArrayEquals("STR",newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getStringArray());	0
2	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(null);	0
4	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertArrayEquals(2,3});	0
0	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(this.getConnectionPool(this.connTasks.get("STR")));	0
1	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(StringUtils.isBlank("STR"));	0
2	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(this.getConnectionPool(this.connTasks.get("STR")));	0
3	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(pool.size()==0);	0
4	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,count("STR"));	0
5	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(count("STR")<0);	0
6	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(StringUtils.isBlank("STR"));	0
7	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(count("STR")>=0);	0
8	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,count("STR"));	0
9	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(pool.size()>0);	0
0	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsValue(someValue));	0
1	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,result.size());	0
2	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedValue,result.get(someKey));	0
3	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	0
4	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsKey(null));	0
5	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.isEmpty());	0
6	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsKey(someKey));	0
7	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsValue(someValue));	0
8	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedCount,result.keySet().size());	0
9	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(resultinstanceofHashMap);	0
0	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals("STR",graph.minimalCycles().get(1));	0
1	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.minimalCycles().isEmpty());	0
2	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	0
3	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(0,graph.minimalCycles().size());	0
4	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotEquals("STR",graph.minimalCycles().get(0));	0
5	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
6	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.minimalCycles().isEmpty());	0
7	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(2,graph.minimalCycles().size());	0
8	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles()||!graph.hasCycles());	0
9	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals("STR",graph.minimalCycles().get(0));	0
0	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofArrayIterable);	0
1	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()>=0);	0
2	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
3	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
4	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
5	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(null,graph.edges());	0
6	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().iterator().hasNext());	0
7	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofCollection);	0
8	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertDoesNotThrow(()->graph.edges().forEach(System.out::println));	0
9	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	0
0	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertThrows(ResourceNotFoundException.class,()->fetchResource("STR",0));	0
1	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotNull(fetchResource("STR",0));	0
2	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertSame(expectedObject,fetchResource("STR",0));	0
3	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNull(fetchResource("STR",0));	0
4	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertFalse(fetchResource("STR",0)instanceofInputStream);	0
5	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotEquals("STR",fetchResource("STR",0));	0
6	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertEquals("STR",fetchResource("STR",0));	0
7	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertTrue(fetchResource("STR",0)instanceofInputStream);	0
8	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotSame(expectedObject,fetchResource("STR",0));	0
9	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertDoesNotThrow(()->fetchResource("STR",0));	0
0	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getProtocol().equals("STR"));	0
1	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertEquals(name,exception.getName());	0
2	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(newFile(url.getPath()).lastModified()>ifModifiedSince);	0
3	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertEquals("STR",url.getProtocol());	0
4	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getPath().endsWith("STR"));	0
5	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getPath().startsWith("STR"));	0
6	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertNotNull(url);	0
7	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(newFile(url.getPath()).lastModified()<=ifModifiedSince);	0
0	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(false);	0
1	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals("STR",factory);	0
2	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	0
3	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(Uninitialized,factory);	0
4	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	0
5	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(expected,factory);	0
6	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expected,factory);	0
7	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(true);	0
8	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofJsonSchemaFactory);	0
9	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(expected,factory);	0
0	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(7,event.getFieldCount());	0
1	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getSourceIP());	0
2	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(sample1,event.getRawString());	0
3	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDestinationIP());	0
4	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDetectionTime());	0
5	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0
6	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getSeverity()>=5);	0
7	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(0,event.getProtocolVersion());	0
8	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getDetectedMessage().contains("STR"));	0
9	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getThreatManager());	0
0	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().length()>0);	0
1	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNull(sql.toString());	0
2	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
3	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertSame(expectedString,sql.toString());	0
4	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.toString());	0
5	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString()instanceofMyClass);	0
6	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	0
7	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString()instanceofString);	0
8	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
0	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(5,res.size());	0
1	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertSame(String.class,res.get(0).getClass());	0
2	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(res.contains("STR"));	0
3	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Integer.class,res.get(1).getClass());	0
4	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass.getDeclaredField("STR"));	0
5	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
6	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	0
7	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(10,res.size());	0
8	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNull(helloClass.getMethod("STR"));	0
9	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThrows(RuntimeException.class,()->helloClass.getConstructor(Integer.class));	0
0	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(true,ceļu.isRecognized());	0
1	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu.isRecognized());	0
2	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertDoesNotThrow(()->ceļu.isRecognized());	0
3	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized()>=0&&ceļu.isRecognized()<=100);	0
4	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	1
5	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertThrows(Exception.class,()->ceļu.isRecognized());	0
6	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertSame(expected,ceļu.isRecognized());	0
7	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotSame(unexpected,ceļu.isRecognized());	0
8	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.isRecognized());	0
0	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller);	0
1	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(null,testObjectName001);	0
2	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(polledObjects.contains(polled001));	0
3	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals("STR",accessConnectionFactoryDesc);	0
4	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	0
5	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockLogger,poller.getLogger());	0
6	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockAccessConnection,mockBatchCapableAccessConnection);	0
7	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertArrayEquals(newObject[]{mockScheduler},poller.getSchedulers().toArray());	0
8	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNull(mockBatchCapableAccessConnection.getBatchExecutionResult());	0
9	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(processes.isEmpty());	0
0	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(SpecificHandler.class,routerNanoHttpd.getNotFoundHandler());	0
1	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(null,routerNanoHttpd.getNotImplementedHandler());	0
2	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNull(routerNanoHttpd.getNotImplementedHandler());	0
3	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertArrayEquals("two","three"});	0
4	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(null,routerNanoHttpd.getNotFoundHandler());	0
5	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(GeneralHandler.class,routerNanoHttpd.getNotFoundHandler());	0
6	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(GeneralHandler.class,routerNanoHttpd.getNotImplementedHandler());	0
7	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd.getNotImplementedHandler());	0
8	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getNotFoundHandler()instanceofGeneralHandler);	0
9	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertFalse(routerNanoHttpd.getNotFoundHandler()instanceofSpecificHandler);	0
0	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(0,response.getTimestamp());	0
1	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(client,response.getClient());	0
2	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
3	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
4	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response.getNonce());	0
5	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isVerified());	0
6	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.isError());	0
7	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0
8	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(client,response.getClient());	0
9	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isOk());	0
0	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertArrayEquals("STR".toCharArray(),getBuildUrl().toCharArray());	0
1	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertTrue(getBuildUrl().startsWith("STR"));	0
2	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertThat(getBuildUrl(),equalToIgnoringCase("STR"));	0
3	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	0
4	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertSame("STR",getBuildUrl());	0
5	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertThat(getBuildUrl(),containsString("STR"));	0
6	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertFalse(getBuildUrl().isEmpty());	0
7	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotSame("STR",getBuildUrl());	0
8	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotNull(getBuildUrl());	0
9	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotEquals("STR",getBuildUrl());	0
0	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()<0);	0
1	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	0
2	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(2,p.getBlankIndex());	0
3	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==-1||p.getBlankIndex()>0);	0
4	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()<9);	0
5	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==0||p.getBlankIndex()==8);	0
6	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(3,p.getBlankIndex());	0
7	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(4,p.getBlankIndex());	0
8	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<=8);	0
9	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	0
10	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>2||p.getBlankIndex()<7);	0
4	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertArrayEquals('A','A'});	0
0	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNull(locītājs.getDefaultSettings());	0
1	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals("STR",vārds.toString());	0
2	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(wordforms.isEmpty());	0
3	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotSame(vārds,locītājs.analyze("STR"));	0
4	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(0,locītājs.clearCache());	0
5	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0
6	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertArrayEquals(2,3});	0
7	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(locītājs.getAnalyzerType());	0
8	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertSame(locītājs,locītājs.getInstance());	0
9	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableGuessing);	0
0	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	0
1	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotEquals(unexpectedValue,actualValue);	0
2	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertArrayEquals(expectedArray,actualArray);	0
3	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotSame(unexpectedObject,actualObject);	0
4	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(locītājs.isRecognized());	0
5	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertSame(expectedObject,actualObject);	0
6	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(locītājs);	0
7	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNull(locītājs);	0
8	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertEquals(expectedValue,actualValue);	0
0	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0
1	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	0
2	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	0
3	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.isRecognized());	0
4	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.isRecognized());	0
5	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0
6	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0
7	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0
8	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,locītājs.wordforms.size());	0
9	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	0
0	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	0
1	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(expectedObject,actualObject);	0
2	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	0
3	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(2,w.wordforms.size());	0
4	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.contains("STR"));	0
5	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=1);	0
6	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(expectedObject,actualObject);	0
7	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.contains("STR"));	0
8	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
9	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.isEmpty());	0
6	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNull(null);	0
0	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	0
1	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotNull(exception);	0
2	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertSame("STR",exception.getMessage());	0
3	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNull(exception.getCause().getMessage());	0
4	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertTrue(exception.getCause()instanceofRuntimeException);	0
5	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
6	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
7	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNull(exception.getDescription());	0
8	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotSame("STR",exception.getMessage());	0
0	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
1	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertEquals("STR",exceptionFile.getName());	0
2	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotSame(IOException.class,ExceptionReporter.getException(exceptionFile).getClass());	0
3	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().isDirectory(),CoreMatchers.equalTo(true));	0
4	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().getName(),CoreMatchers.notNullValue());	0
5	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(null,exceptionFile.getParentFile());	0
6	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertSame(RuntimeException.class,ExceptionReporter.getException(exceptionFile).getClass());	0
7	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertArrayEquals(newbyte[]{},ExceptionReporter.getException(exceptionFile).getMessage().getBytes());	0
8	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	0
9	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(ExceptionReporter.getException(exceptionFile).getCause(),CoreMatchers.instanceOf(RuntimeException.class));	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(expected,bind0(object,property,value));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertArrayEquals(expectedArray,bind0(object,property,value));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(expected,bind0(object,property,value));	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,property,value));	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,property,value));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,property,value));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,property,value));	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(expected,bind0(object,property,value));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertSame(expected,bind0(object,property,value));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,property,value));	0
0	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA0);	0
1	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA1instanceofFluentLogger);	0
2	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA_lh0.getReconnector()instanceofExponentialDelayReconnector);	0
3	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(1234,loggerA_lh1.getPort());	0
4	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals("STR",loggerB0.getTagPrefix());	0
6	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotEquals(loggerA0.getTagPrefix(),loggerB0.getTagPrefix());	0
7	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertSame(loggerA0,loggerA1);	0
8	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	0
9	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals("STR",loggerA_lh0.getHost());	0
0	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotEquals(attrs(),attrs(attrs()));	0
1	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotSame(attrs(),attrs(attrs()));	0
2	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertEquals(1,attrs(attrs()).size());	0
3	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertFalse(attrs().isEmpty());	0
4	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertArrayEquals(newAttributes[]{},attrs().toArray());	0
5	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertEquals(attrs(attrs()),attrs(attrs(attrs())));	0
6	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertSame(attrs(),attrs());	0
7	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNull(attrs());	0
8	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertTrue(attrs().isEmpty());	0
9	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotNull(attrs());	0
0	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.args.size());	0
1	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.args.isEmpty());	0
2	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertSame(GraphvizServer.CmdOptions.class,opts.getClass());	0
3	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsKey("STR"));	0
4	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.isEmpty());	0
5	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.opts.size());	0
6	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsValue("STR"));	0
7	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts);	0
0	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(object);	0
1	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(condition);	0
2	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertArrayEquals(expectedArray,actualArray);	0
3	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue(condition);	0
4	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertSame(expected,actual);	0
5	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(expected,actual);	0
6	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(expected,actual);	0
7	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNull(object);	0
0	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNull(tail);	0
1	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertSame(tail,EndLabel.tail(Label.of("STR"),1d,2d));	0
2	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotNull(tail);	0
3	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertArrayEquals(newObject[]{1d,2d});	0
4	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotSame(tail,EndLabel.tail(Label.of("STR"),1d,2d));	0
5	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertTrue(tailinstanceofEndLabel);	0
6	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotEquals(newObject[]{1d,2d});	0
7	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotEquals("STR",tail.getLabel());	0
8	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertEquals("STR",tail.getLabel());	0
9	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertFalse(tailinstanceofEndLabel);	0
0	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{doc.isDirty()});	0
1	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
2	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0
3	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
4	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(null,doc.isDirty());	0
5	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
6	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
7	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
8	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNull(null);	0
9	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0
0	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA.getName(),classLinked.getName());	0
1	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA.getName(),"STR");	0
2	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNull(classA.getProperty("STR"));	0
3	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(schema.existsClass("STR"));	0
4	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA.getProperty("STR"),classA.getProperty("STR"));	0
5	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(prop.getType(),OType.LINK);	0
6	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(db);	0
7	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.existsProperty("STR"));	0
8	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classA.getName(),"STR");	0
9	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classLinked,classA);	0
0	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getThreadPool());	0
1	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNull(g);	0
2	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	0
3	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,factory.getPool().getMin());	0
4	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
5	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals("STR","STR");	0
6	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getPool());	0
7	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.getRawGraph()instanceofOrientGraph);	0
8	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(10,factory.getPool().getMax());	0
9	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	0
0	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofInteger);	0
1	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertEquals(1,doc.field("STR"));	0
2	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofHashMap);	0
3	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofMap);	0
4	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertFalse(doc.field("STR")instanceofString);	0
5	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNull(doc.field("STR"));	0
6	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR").toString().startsWith("STR"));	0
7	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotEquals("STR",doc.field("STR"));	0
8	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotNull(doc.field("STR"));	0
0	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotSame(now,compare(OType.DATETIME,10l));	0
1	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(now,compare(OType.DATETIME,10l));	0
2	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(compare(OType.DATETIME,10l)>10);	0
3	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(OType.DATETIME,10l)<20);	0
4	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(now);	0
5	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertArrayEquals(2,3});	0
6	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),is(notNullValue()));	0
7	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),anyOf(is(10),is(20)));	0
8	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(10,compare(OType.DATETIME,10l));	0
9	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertSame(now,compare(OType.DATETIME,10l));	0
0	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertArrayEquals(expectedArray,value);	0
1	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertEquals("STR",value);	0
2	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotSame(expectedValue,value);	0
3	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(valueinstanceofString);	0
4	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertSame(expectedValue,value);	0
5	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotNull(value);	0
6	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNull(value);	0
7	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals("STR",value);	0
8	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertFalse(valueinstanceofInteger);	0
9	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals(expectedArray,value);	0
0	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	0
1	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	0
2	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(42,addedKeys.get(42));	0
3	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(555));	0
4	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	0
5	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertSame(addedKeys,addedKeys);	0
6	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(1));	0
7	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndex,null);	0
8	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd.values());	0
9	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	0
0	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertSame(owner1,owner2);	0
1	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner2));	0
2	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	0
3	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.isEmpty());	0
4	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(0,list.size());	0
5	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	0
6	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotSame(owner1,owner2);	0
7	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner1));	0
8	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner1));	0
9	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner2));	0
0	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(-1,sqlQuery.getLimit());	0
1	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotEquals(0,results.size());	0
2	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.stream().anyMatch(doc->doc.containsField("STR")));	0
3	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.stream().allMatch(doc->doc.getClassName().equals("STR")));	0
4	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.isEmpty());	0
5	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	0
6	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.contains(doc1));	0
7	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertSame(sql,sqlQuery);	0
8	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(doc1,doc2);	0
9	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	1
0	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
1	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	0
2	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThrows(YubicoVerificationException.class,()->client.verify(otp));	0
3	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.OK,response.getStatus());	0
4	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	0
5	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0
6	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response);	0
7	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus());	0
8	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK);	0
0	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.startsWith(expectedPrefix));	0
1	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(resultinstanceofString);	0
2	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
3	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertNotNull(result);	0
4	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertFalse(result.contains(unexpectedSubstring));	0
5	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.endsWith(expectedSuffix));	0
6	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.matches(expectedRegex));	0
7	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertEquals(expectedLength,result.length());	0
8	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.contains(expectedSubstring));	0
9	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertEquals(expectedResult,result);	0
0	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame(ser,out);	0
1	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
2	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertSame(baos,ser.getStream());	0
3	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
4	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
5	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
6	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(16,result.length());	0
7	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
8	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertArrayEquals("STR".toCharArray(),result.toCharArray());	0
9	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNull(null);	0
0	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(content);	0
1	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(sha1str.contains("STR"));	0
2	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(sha1str.isEmpty());	0
3	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(WARCRecordFormat.getDigestSha1(content));	0
4	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(base32.encodeAsString(DigestUtils.sha1(content)).isEmpty());	0
5	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",sha1str);	0
6	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	0
7	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(base32.encodeAsString(DigestUtils.sha1(content)).startsWith("STR"));	0
8	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(22,content.length);	0
9	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
0	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
1	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertArrayEquals(newString[]{"STR"},fields.get("STR"));	0
2	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	0
3	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals("STR",fields.get("STR"));	0
4	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	0
5	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	0
6	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",fields.get("STR"));	0
7	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.entrySet().size()>0);	0
8	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
9	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
0	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(object);	0
1	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertFalse(condition);	0
2	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotSame(unexpectedObject,actualObject);	0
3	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertArrayEquals(expectedArray,actualArray);	0
4	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertSame(expectedObject,actualObject);	0
5	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(condition);	0
6	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertThat(actualValue,CoreMatchers.equalTo(expectedValue));	0
7	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",actualValue);	0
8	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNull(object);	0
0	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	0
1	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokensinstanceofjava.util.Collection);	0
2	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokens.contains("STR"));	0
3	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertSame(expectedCollection,tokens);	0
4	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokensinstanceofjava.util.List);	0
5	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.contains("STR"));	0
6	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotSame(expectedCollection,tokens);	0
7	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	0
8	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(5,tokens.size());	0
9	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()>0);	0
0	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()instanceofExpectedClass);	0
1	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertSame(expectedCloseCode,invalidHandshakeException.getCloseCode());	0
2	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()<unexpectedCloseCode);	0
3	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotNull(invalidHandshakeException.getCloseCode());	0
4	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNull(invalidHandshakeException.getCloseCode());	0
5	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>=minCloseCode&&invalidHandshakeException.getCloseCode()<=maxCloseCode);	0
6	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertFalse(invalidHandshakeException.getCloseCode()instanceofUnexpectedClass);	0
7	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>expectedCloseCode);	0
8	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotEquals(unexpectedCloseCode,invalidHandshakeException.getCloseCode());	0
9	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(expectedCloseCode,invalidHandshakeException.getCloseCode());	0
0	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertFalse(cookie.getHTTPHeader().isEmpty());	0
1	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals("STR",cookie.getHTTPHeader());	0
2	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertTrue(cookie.getHTTPHeader().contains("STR"));	0
3	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertNotNull(cookie.getHTTPHeader());	0
4	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals(expectedLength,cookie.getHTTPHeader().length());	0
5	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	"assertThrows(Exception.class,()->{
???;
});"	0
6	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertNotEquals(0,randomExpirationTime);	0
7	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals(expectedDouble,actualDouble);	0
8	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertTrue(cookie.getHTTPHeader().startsWith("STR"));	0
9	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertArrayEquals(expectedArray,cookie.getHTTPHeader().toCharArray());	0
0	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazzs);	0
1	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp.getClass(),clazzs.getClass());	0
2	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotSame(exp,clazzs);	0
3	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	"assertThrows(NullPointerException.class,()->{
???;
});"	0
4	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazzs.length);	0
5	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(exp.length>0);	0
6	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazzs);	0
7	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,clazzs.length+1);	0
8	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNull(null);	0
9	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(exp.length==0);	0
0	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(hexdump("STR".getBytes()).startsWith("STR"));	0
1	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(hexdump("STR".getBytes()));	0
2	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertThrows(Exception.class,()->hexdump(null));	0
3	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertSame(hexdump("STR".getBytes()),hexdump("STR".getBytes()));	0
4	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNull(hexdump(null));	0
5	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
6	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotSame(hexdump("STR".getBytes()),hexdump("STR".getBytes()));	0
7	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(hexdump("STR".getBytes()).endsWith("STR"));	0
8	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotEquals("STR",hexdump("STR".getBytes()));	0
9	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertArrayEquals("STR".toCharArray(),hexdump("STR".getBytes()).toCharArray());	0
0	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertFalse(isBlank(escapeJava("STR")));	0
1	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotSame(str,escapeJava("STR"));	0
2	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",escapeJava("STR"));	0
3	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotNull(escapeJava("STR"));	0
4	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertArrayEquals("World"},newString[]{escapeJava("Hello"));	0
5	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertTrue(isBlank(escapeJava("STR")));	0
6	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertSame(str,escapeJava("STR"));	0
7	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNull(escapeJava(null));	0
8	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotEquals("STR",escapeJava("STR"));	0
0	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(123.45));	0
1	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(678.90));	0
2	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(987.65));	0
3	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(321.0));	0
4	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(987.65));	0
5	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(543.0));	0
6	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(456.78));	0
7	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(678.90));	0
8	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(123.45));	0
9	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(456.78));	0
0	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()>=0);	0
1	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()<=10);	0
2	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey("STR"));	0
3	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size());	1
4	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotNull(map);	0
5	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsValue(null));	0
6	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.containsKey("STR")&&map.get("STR").equals("STR"));	0
7	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.isEmpty());	0
8	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey(null));	0
0	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	1
1	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotSame(2,p.getDistanceToGoal());	0
2	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	0
3	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertSame(0,p.getDistanceToGoal());	0
4	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()==0);	0
5	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()>0);	0
6	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p.getDistanceToGoal());	0
7	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(-1,p.getDistanceToGoal());	0
8	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(1,p.getDistanceToGoal());	0
0	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	0
1	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNull(panel.getTurtleCount());	0
2	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(1,panel.getTurtleCount());	0
3	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
4	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
5	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertArrayEquals(newint[]{1},newint[]{panel.getTurtleCount()});	0
6	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
7	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0
8	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
9	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(true,false);	0
0	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[1]);	0
1	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[4]);	0
2	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-2]);	0
3	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[2]);	0
4	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[0]);	0
5	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-1]);	0
6	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-4,a[6]);	0
7	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[3]);	0
8	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-1,a[5]);	0
9	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(7,a.length);	0
0	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame(actuals,newString[]{"STR","STR","STR"});	0
1	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("2","3"});	0
2	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(actuals.length==0);	0
3	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	0
4	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertArrayEquals("2","3"});	0
5	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("5","6"});	0
6	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertSame(actuals,actuals);	0
7	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	0
8	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNull(null);	0
0	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(2*macAddress.getAddress().length-1,macAddress.toString().length());	0
1	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
2	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
3	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
4	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
5	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(STANDARD_SEPARATOR));	0
6	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
7	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().contains("STR"));	0
8	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),Matchers.matchesPattern("STR"));	0
0	TimestampParserTest	testParseNull	assertNull(parsed);	assertTrue(StringUtils.isBlank(timestamp));	0
1	TimestampParserTest	testParseNull	assertNull(parsed);	assertSame(expectedDate,parsed);	0
2	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(expectedDate,parsed);	0
3	TimestampParserTest	testParseNull	assertNull(parsed);	assertDoesNotThrow(()->newTimestampParser(null).parse("STR"));	0
4	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotNull(parsed);	0
5	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	1
6	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotEquals(unexpectedDate,parsed);	0
7	TimestampParserTest	testParseNull	assertNull(parsed);	assertFalse(StringUtils.isBlank(timestamp));	0
8	TimestampParserTest	testParseNull	assertNull(parsed);	assertThrows(ProcessingException.class,()->newTimestampParser(null).parse("STR"));	0
9	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(null,parsed);	0
0	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	1
1	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception.getMessage());	0
2	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	0
3	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull(exception.getCause());	0
4	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame(null,exception.getMessage());	0
5	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exception.getMessage().contains(MESSAGE));	0
6	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertThrows(ValidationException.class,()->{
???;
});"	0
7	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertSame(MESSAGE,exception.getMessage());	0
8	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
9	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame("STR",exception.getMessage());	0
0	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertFalse(actual.getNalRefIdc()<NALUnit.EXPECTED_REF_IDC);	0
1	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(NALUnit.EXPECTED_REF_IDC,actual.getNalRefIdc());	0
2	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual.getType());	0
3	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>0);	0
4	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>=MIN_REF_IDC&&actual.getNalRefIdc()<=MAX_REF_IDC);	0
5	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getType()instanceofNALUnitType);	0
6	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>=NALUnit.EXPECTED_REF_IDC);	0
7	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertEquals(NALUnitType.EXPECTED_TYPE,actual.getType());	0
8	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertSame(actual.getType(),NALUnitType.SOME_OTHER_TYPE);	0
9	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(actual.getType(),newObject());	0
0	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotNull(objectReference);	0
1	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertArrayEquals(expectedArray,actualArray);	0
2	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertTrue(booleanExpression);	0
3	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotEquals(expectedValue,calculatedValue);	0
4	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertSame(expectedObject,actualObject);	0
5	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertFalse(booleanExpression);	0
6	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNull(objectReference);	0
7	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertEquals(expectedValue,calculatedValue);	0
8	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotSame("STR",expectedObject,actualObject);	0
0	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(null,matcher.find());	0
1	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals(false,matcher.find());	0
2	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(find());	0
3	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	1
4	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertSame(true,matcher.find());	0
5	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals("STR",matcher.find());	0
6	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertThrows(Exception.class,()->find());	0
7	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNull(null);	0
8	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
9	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher.find());	0
0	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.lookingAt()});	0
1	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0
2	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNull(null);	0
3	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0
4	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0
5	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	0
6	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0
7	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
8	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
0	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	1
1	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface());	0
2	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredMethod("STR")!=null);	0
3	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals("STR",helloClass.getName());	0
4	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertSame(org.mdkt.HelloClass.class,helloClass);	0
5	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getMethods().length>0);	0
6	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getDeclaredFields().length);	0
7	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertEquals("STR",helloClass.getName());	0
8	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getModifiers()==java.lang.reflect.Modifier.PUBLIC);	0
9	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.isAssignableFrom(org.mdkt.HelloClass.class));	0
0	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceofIExtension);	0
1	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertSame(extension,draft_6455.getExtension());	0
2	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(null,draft_6455.getExtension());	0
3	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertFalse(draft_6455.getExtension()instanceofIExtension);	0
4	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(null,extension);	0
5	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertArrayEquals(newObject[]{extension},newObject[]{draft_6455.getExtension()});	0
6	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(extension,null);	0
7	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	1
8	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotSame(null,draft_6455.getExtension());	0
9	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(extension,draft_6455.getExtension());	0
0	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertEquals(webSocketImpl.getWebSocketAdapter(),webSocketAdapter);	0
1	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotNull(webSocketServerFactory);	0
2	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotEquals(webSocketServerFactory,webSocketAdapter);	0
3	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertFalse(webSocketAdapterinstanceofDefaultSSLWebSocketServerFactory);	0
4	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotSame(webSocketServerFactory,webSocketAdapter);	0
5	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertThrows(NoSuchAlgorithmException.class,()->newDefaultSSLWebSocketServerFactory(SSLContext.getDefault()));	0
6	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertArrayEquals(webSocketImpl.getDraft().getClass().getName().toCharArray(),newchar[]{'D','r','a','f','t','_','6','4','5','5'});	0
7	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertSame(webSocketImpl.createWebSocket(webSocketAdapter,newDraft_6455()),webSocketImpl);	0
8	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertTrue(webSocketServerFactoryinstanceofDefaultSSLWebSocketServerFactory);	0
9	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertSame(webSocketAdapter,webSocketAdapter);	0
0	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(expected==actual);	0
1	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(expected!=actual);	0
2	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	0
3	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	0
4	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertSame(expected,actual);	0
5	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNull(actual);	0
6	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
7	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(actual);	0
8	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertArrayEquals(expectedArray,actualArray);	0
0	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNull(object);	0
1	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotNull(object);	0
2	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
3	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotSame(expected,actual);	0
4	SubStatementTest	testGetVerb	assertNotNull(actual);	assertThat(actual,is(equalTo(expected)));	0
5	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
6	SubStatementTest	testGetVerb	assertNotNull(actual);	assertTrue(condition);	0
7	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
8	SubStatementTest	testGetVerb	assertNotNull(actual);	assertFalse(condition);	0
9	SubStatementTest	testGetVerb	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
0	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(obj);	0
1	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual);	0
2	ResultTest	testGetDuration	assertNotNull(actual);	assertNotSame(expected,actual);	0
3	ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
4	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(condition);	0
5	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
6	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(condition);	0
7	ResultTest	testGetDuration	assertNotNull(actual);	assertThat(actual,Matchers.is(expected));	0
8	ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
9	ResultTest	testGetDuration	assertNotNull(actual);	assertNull(obj);	0
0	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(actualinstanceofActor);	0
1	StatementTest	testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	0
2	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotSame(agent,actual);	0
3	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	0
4	StatementTest	testGetAuthority	assertNotNull(actual);	assertFalse(actualinstanceofUser);	0
5	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotEquals(agent,actual);	0
6	StatementTest	testGetAuthority	assertNotNull(actual);	assertNull(actual);	0
7	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotEquals(null,actual);	0
8	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	1
9	StatementTest	testGetAuthority	assertNotNull(actual);	assertArrayEquals(newActor[]{agent},newActor[]{actual});	0
0	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotNull(OpenKoreanTextProcessorJava.normalize("STR"));	0
1	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertThrows(IllegalArgumentException.class,()->normalize("STR"));	0
2	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNull(normalize(null));	0
3	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertTrue(normalize("STR").startsWith("STR"));	0
4	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertEquals("STR",normalize("STR"));	0
5	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertArrayEquals('b','c'});	0
6	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertSame(normalize("STR"),normalize("STR"));	0
7	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotSame(OpenKoreanTextProcessorJava.normalize("STR"),OpenKoreanTextProcessorJava.normalize("STR"));	0
8	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertFalse(normalize("STR").endsWith("STR"));	0
9	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	0
0	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(tokens.size()>0);	0
1	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotEquals(0,tokens.size());	0
2	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(tokens.get(0).isUnknown());	0
3	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotNull(tokens);	0
4	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotSame(KoreanTokenizer.KoreanToken.class,tokens.get(0).getClass());	0
5	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertSame(String.class,text.getClass());	0
6	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
7	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertFalse(tokens.isEmpty());	0
8	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertEquals(5,tokens.size());	0
0	IssuesTest	testIssue23	assertTrue(true);	assertArrayEquals(newXsdSchema[]{},schemas.toArray());	0
1	IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	0
2	IssuesTest	testIssue23	assertTrue(true);	assertNotSame(schemas.get(0),null);	0
3	IssuesTest	testIssue23	assertTrue(true);	assertThat(schemas,Matchers.hasSize(1));	0
4	IssuesTest	testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
5	IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	0
6	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
7	IssuesTest	testIssue23	assertTrue(true);	assertSame(parser,parser);	0
8	IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	0
9	IssuesTest	testIssue23	assertTrue(true);	assertThat(schemas,Matchers.contains(Matchers.notNullValue()));	0
0	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNull(schemas);	0
1	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(parser,schemas.get(0).getParser());	0
2	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertArrayEquals(newObject[]{parser},newObject[]{schemas.get(0).getParser()});	0
3	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0
4	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
5	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(parser,schemas.get(0).getParser());	0
6	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.isEmpty());	0
7	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0
8	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(parser,schemas.get(0).getParser());	0
9	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(0,schemas.size());	0
0	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	0
1	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
2	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertSame(b,a);	0
3	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(history.isEmpty());	0
4	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	0
5	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.isSolved());	0
6	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(3,a.getSize());	0
7	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(1,a.getHistory().size());	0
8	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNull(history);	0
9	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getHistory().size(),b.getHistory().size());	0
0	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(test,testContainer.getTestInstance());	0
1	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()instanceofBaseTest);	0
2	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(testContainer.getTestInstance(),null);	0
3	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(testContainer.getTestInstance(),getTestInstance());	0
4	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(test);	0
5	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(test,getTestInstance());	0
6	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestInstance()==null);	0
7	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
8	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
9	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,getTestInstance());	0
0	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals("STR",testData.getTestName());	0
1	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	1
2	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(0,testData.getTestIndex());	0
3	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertArrayEquals(2,3});	0
4	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotSame(testData,registry.getTest("STR"));	0
5	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertFalse(testData.getTestIndex()==5);	0
6	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestIndex()>0);	0
7	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertSame(testData,registry.getTest("STR"));	0
8	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData);	0
0	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertThat(TestClass.isLocal(cloudProvider),Matchers.is(true));	0
1	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertArrayEquals(newboolean[]{true},newboolean[]{TestClass.isLocal(cloudProvider)});	0
2	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertEquals(true,TestClass.isLocal(cloudProvider));	0
3	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotNull(cloudProvider);	0
4	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotSame(true,TestClass.isLocal(cloudProvider));	0
5	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertTrue(TestClass.isLocal(cloudProvider));	0
6	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertFalse(TestClass.isLocal(cloudProvider));	0
7	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertSame(true,TestClass.isLocal(cloudProvider));	0
8	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNull(cloudProvider);	0
9	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotEquals(false,TestClass.isLocal(cloudProvider));	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(newCustomObject(),"STR","STR"));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",findField(newObject().getClass(),"STR").getName());	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(newCustomObject(),"STR","STR"));	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNull(findField(newObject().getClass(),"STR"));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertSame(String.class,findField(newCustomObject().getClass(),"STR").getType());	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(findTargetObject(newObject(),"STR",newString[]{"STR"}));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(newObject(),"STR","STR"));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(null,findTargetObject(newCustomObject(),"STR",newString[]{"STR"}));	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(object,"STR","STR"));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertSame(bind0(object,"STR","STR"),true);	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(bind0(object,"STR","STR"),null);	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(false,bind0(object,"STR","STR"));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,"STR","STR"));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,"STR","STR"));	0
0	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen<secondLastSeen);	0
1	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen>secondLastSeen);	0
2	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertThat(firstLastSeen,both(greaterThanOrEqualTo(0L)).and(lessThanOrEqualTo(100L)));	0
3	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(firstLastSeen,secondLastSeen);	0
4	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(firstLastSeen,secondLastSeen);	0
5	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen<=secondLastSeen);	0
6	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(firstLastSeen);	0
7	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNull(firstLastSeen);	0
8	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen,secondLastSeen);	0
9	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen>=secondLastSeen);	0
1	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertArrayEquals(2,3});	0
0	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotSame("STR",obj.toString());	0
1	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertEquals("STR",obj.toString());	0
2	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertFalse(obj.toString().startsWith("STR"));	0
3	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNull(obj.toString());	0
4	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotNull(obj.toString());	0
5	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertTrue(obj.toString().startsWith("STR"));	0
6	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertSame("STR",obj.toString());	0
7	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotEquals("STR",obj.toString());	0
0	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResultinstanceofList);	0
1	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),distinctElements.size());	0
2	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.contains(expectedElement));	0
3	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	0
4	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	1
5	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.get(0)instanceofODocument);	0
6	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.contains(unexpectedElement));	0
7	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(expectedOrderedElements,qResult);	0
8	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.stream().anyMatch(Objects::isNull));	0
9	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(expectedValue,qResult.get(0).field("STR"));	0
10	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.isEmpty());	0
0	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNull(object);	0
1	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(expectedValue,actualValue);	0
2	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(object);	0
3	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotSame(expectedObject,actualObject);	0
4	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertSame(expectedObject,actualObject);	0
5	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(condition);	0
6	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(condition);	0
7	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertArrayEquals(expectedArray,actualArray);	0
8	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(expectedValue,actualValue);	0
0	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	0
1	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(schema.getClass("STR").existsProperty("STR"));	0
2	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",property.getName());	0
3	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(5,db.getMetadata().getSchema().getClasses().size());	0
4	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertArrayEquals(newOProperty[]{property},classA.getDeclaredProperties().toArray());	0
5	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertSame(OType.STRING,property.getType());	0
6	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotEquals("STR",property.getName());	0
7	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotSame(OType.INTEGER,property.getType());	0
8	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertFalse(schema.getClass("STR").existsProperty("STR"));	0
9	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNull(property);	0
0	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,set.size());	0
1	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(set.isEmpty());	0
2	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc1);	0
3	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,lst.size());	0
4	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.field("STR"));	0
5	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(0,doc.fieldCount());	0
6	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc2);	0
7	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(lst.isEmpty());	0
0	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertTrue(valueinstanceofString);	0
1	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotEquals(0,value.length);	0
2	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertEquals("STR",value);	0
3	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertFalse(valueinstanceofInteger);	0
4	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotSame(unexpectedObject,value);	0
5	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotEquals("STR",value);	0
6	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertArrayEquals(expectedArray,value);	0
7	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNull(value);	0
8	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertSame(expectedObject,value);	0
9	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotNull(value);	0
0	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertArrayEquals("b","c"});	0
1	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[1]);	0
2	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[0]);	0
3	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fieldsinstanceofString[]);	0
4	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	0
5	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields);	1
6	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertFalse(Arrays.asList(fields).contains("STR"));	0
7	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields[0]);	0
8	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[2]);	0
9	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length>=3);	0
0	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotEquals(expectedArray,result.toArray());	0
1	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotSame(unexpectedObject,result);	0
2	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotEquals("STR",result);	0
3	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertTrue(resultinstanceofOCompositeKey);	0
4	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertFalse(resultinstanceofOCompositeKey);	0
5	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertArrayEquals(expectedArray,result.toArray());	0
6	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertEquals("STR",result);	0
7	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertSame(expectedObject,result);	0
8	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotNull(result);	0
9	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	1
0	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(-1.0,Double.parseDouble(res.get(0).field("STR").toString()));	0
1	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Double.isNaN(Double.parseDouble(res.get(0).field("STR").toString())));	0
2	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	0
3	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(Double.isNaN(Double.parseDouble(res.get(0).field("STR").toString())));	0
4	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotEquals(-2.0,Double.parseDouble(res.get(0).field("STR").toString()));	0
5	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
6	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNull(res);	0
7	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertSame(res,res);	0
8	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotSame(res,newArrayList<ODocument>());	0
9	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	0
0	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.get(0)instanceofODocument);	0
1	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.contains(newODocument("STR")));	0
2	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(1,res.size());	0
3	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	1
4	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.containsExactlyOne());	0
5	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(res.isEmpty());	0
6	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(res.iterator().hasNext());	0
7	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(hasNullName);	0
8	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	0
9	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNull(((ODocument)res.get(0)).field("STR"));	0
0	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockLogger,jolokiaConnection.getLog());	0
1	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals("STR",jolokiaConnection.getLog().getName());	0
2	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog());	0
3	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNull(null);	0
4	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(jolokiaConnection.getLog().getName().isEmpty());	0
5	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog().equals(mockLogger));	0
6	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(null,jolokiaConnection.getLog());	0
7	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection.getLog());	0
8	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog()instanceofLogger);	0
9	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(null,jolokiaConnection.getLog());	0
0	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(unexpectedInstance,result);	0
1	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertSame(expectedInstance,result);	0
2	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(unexpectedResult,result);	0
3	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObjectQueryInfo);	0
4	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertArrayEquals(expectedArray,result.toArray());	0
5	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result!=null);	0
6	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(expectedResult,result);	0
7	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(result==null);	0
8	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
9	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
0	CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"));	1
1	CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",toDBC("STR"));	0
0	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertSame(connection,pool.getConnection());	0
1	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,count("STR"));	0
2	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(pool,null);	0
3	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count("STR")==5);	0
4	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(this.getConnectionPool(this.connTasks.get(poolKey)));	0
5	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,pool.size());	0
6	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")==0);	0
7	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNull(this.connTasks.get(poolKey));	0
8	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(3,count("STR"));	0
9	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotSame(connection,pool.getConnection());	0
0	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(isConnectionMonitorSwitchOn());	0
1	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(isConnectionMonitorSwitchOn());	0
2	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,isConnectionMonitorSwitchOn());	0
3	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(false,isConnectionMonitorSwitchOn());	0
4	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNull(isConnectionMonitorSwitchOn());	0
5	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertArrayEquals(newboolean[]{true},newboolean[]{isConnectionMonitorSwitchOn()});	0
6	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(newBoolean(true),newBoolean(isConnectionMonitorSwitchOn()));	0
7	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(false,isConnectionMonitorSwitchOn());	0
8	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertSame(true,isConnectionMonitorSwitchOn());	0
9	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(isConnectionMonitorSwitchOn());	0
0	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getPort());	0
1	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame("STR",proxy.getProtocol());	0
2	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals(8080,proxy.getPort());	0
3	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getHost());	0
4	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getProtocol());	0
5	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getHost());	0
6	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame(1234,proxy.getPort());	0
7	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame("STR",proxy.getHost());	0
8	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertTrue(proxy.getHost().startsWith("STR"));	0
9	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getProtocol());	0
0	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(expectedLength,res.length);	0
1	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(expectedResult,res);	0
2	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
3	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
4	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(res.length==0);	0
5	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(expectedResult,res);	0
6	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedLength,res.length);	0
7	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNull(nullValue);	0
8	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertSame(expectedResult,res);	0
9	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedResult,res);	0
0	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(hasProfile);	0
1	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertArrayEquals(profile2,profile3});	0
2	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(0,profiles.size());	0
3	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profile);	0
4	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(3,profiles.size());	0
5	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	0
6	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles.get(0));	0
7	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(hasProfile);	0
8	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(profiles.size(),profileSet.size());	0
9	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.isEmpty());	0
0	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR").getName());	0
1	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR").getImage());	0
2	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	0
3	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().getSpec().getInitContainers().size()>2);	0
4	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertArrayEquals("command2"},getInitContainer(builder,"initContainerName").getCommand());	0
5	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(3,builder.build().getSpec().getInitContainers().size());	0
6	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
7	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	0
8	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().getSpec().getInitContainers().size()<5);	0
9	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	0
0	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	0
1	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag2Date);	0
2	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)>0);	0
3	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag1Date);	0
4	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag2Date.compareTo(tag1Date)<0);	0
5	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
6	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0
7	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
0	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	0
1	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
2	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(cookies.getCookies().size()>0);	0
3	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals("STR",cookies.getCookies().get(0).getName());	0
4	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNull(cookies.getCookies().get(1));	0
5	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(responseHandler.handleResponse(null).isEmpty());	0
6	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(cookies.getCookies().get(0));	0
7	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertFalse(cookies.getCookies().isEmpty());	0
8	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	0
9	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotEquals("STR",cookies.getCookies().get(0).getValue());	0
0	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.isEmpty());	0
1	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertFalse(headers.containsKey("STR"));	0
2	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(0,headers.size());	0
3	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertSame(requestTemplate,oAuth2FeignRequestInterceptor.getRequestTemplate());	0
4	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.containsKey("STR"));	0
5	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotSame(template,requestTemplate);	0
6	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(HttpMethod.GET,requestTemplate.method());	0
7	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotNull(headers.get("STR"));	0
8	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNull(headers.get("STR"));	0
9	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(0,headers.size());	0
0	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.ACCEPT);	0
1	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
2	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0
3	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),CoreMatchers.equalTo(FilterReply.NEUTRAL));	0
4	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNull(filter.decide(evt));	0
5	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
6	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
7	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0
8	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
9	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertArrayEquals(newFilterReply[]{FilterReply.ACCEPT},newFilterReply[]{filter.decide(evt)});	0
0	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
1	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(sourceMetadata);	0
2	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
3	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testSourceUrl,sourceUrl);	0
4	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	0
5	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceUrl);	0
6	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
7	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.contains("STR"));	0
8	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testUrl,normalizedUrl);	0
0	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotEquals(0,Double.compare(10.5,moneyToStrUSDRUS.convert(10.5).length()));	0
1	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNull(moneyToStrRUR);	0
2	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotSame(moneyToStrRURRUS,moneyToStrUAHENG);	0
3	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getCustomStrings());	0
4	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSD.getCurrency().toString());	0
5	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertTrue(moneyToStrUSDENGinstanceofMoneyToStr);	0
6	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertSame(moneyToStrUAHENG,moneyToStrUAHENG);	0
7	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(100.0).isEmpty());	0
8	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrPER100.convert(null));	0
9	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotNull(moneyToStrUAH);	0
0	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotNull(map);	0
1	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertEquals(3,map.size());	0
2	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotSame(map.getClass(),ZippedMap.class);	0
3	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertArrayEquals("goodbye","hey"});	0
4	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertFalse(map.containsKey("STR"));	0
5	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertThrows(NullPointerException.class,()->map.containsKey(null));	0
6	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.containsKey("STR"));	1
7	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotSame(map,newZippedMap<>());	0
8	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotEquals(map.size(),0);	0
9	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertSame(map,map);	0
0	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(0,formas.size());	0
1	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
2	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	0
3	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedElement));	0
4	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertArrayEquals(expectedElements,formas.toArray());	0
5	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
6	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	0
7	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(condition(forma));	0
8	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	0
9	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.contains(unexpectedElement));	0
0	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertSame(config,config);	0
1	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals(config.get("STR"),config.get("STR"));	0
2	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertArrayEquals("nonk"},config.getValues("kasha"));	0
3	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotSame(config,config.clone());	0
4	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertEquals("STR",config.get("STR"));	0
5	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals("STR",config.get("STR"));	0
6	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertTrue(config.getIn("STR").isNull());	0
7	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNull(config.get("STR"));	0
8	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertFalse(config.getIn("STR").isNull());	0
9	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotNull(config);	0
0	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getColorMapSize());	0
1	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(cm.getcolor('a'),cm.getcolor('b'));	0
2	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().isEmpty());	0
3	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm.getcolor('a'));	0
4	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(nfa.size(),cm.getColorMapSize());	0
5	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertFalse(cm.getColorMap().containsValue(0));	0
6	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('a')>0);	0
7	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(expected,actual);	0
8	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().containsKey('b'));	0
9	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNull(cm.getcolor('z'));	0
0	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(true,matcher.find());	0
1	MatcherTest	reset	assertTrue(matcher.find());	assertEquals(false,matcher.find());	0
2	MatcherTest	reset	assertTrue(matcher.find());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.find()});	0
3	MatcherTest	reset	assertTrue(matcher.find());	assertSame(false,matcher.find());	0
4	MatcherTest	reset	assertTrue(matcher.find());	assertNotSame(true,matcher.find());	0
5	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(null,matcher.find());	0
6	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0
7	MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.find());	0
8	MatcherTest	reset	assertTrue(matcher.find());	assertNull(matcher.find());	0
9	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
0	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes));	0
1	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	0
2	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0L,OVarIntSerializer.readAsLong(bytes));	0
3	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNull(null);	0
4	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(null,OVarIntSerializer.readAsLong(bytes));	0
5	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertSame(Long.class,readAsLong(bytes).getClass());	0
6	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertArrayEquals(newlong[]{20432343L},newlong[]{OVarIntSerializer.readAsLong(bytes)});	0
7	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0L);	0
8	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0);	0
9	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0L,OVarIntSerializer.readAsLong(bytes));	0
0	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()<0);	0
1	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertSame(0,treeBucket.size());	0
2	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	0
3	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(5,treeBucket.size());	0
4	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	1
5	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertThat(treeBucket.size(),CoreMatchers.is(0));	0
6	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNull(treeBucket.size());	0
7	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(10,treeBucket.size());	0
8	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertArrayEquals(newint[]{0},newint[]{treeBucket.size()});	0
9	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket.size());	0
0	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase("STR"));	0
1	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(existsDatabase(databaseName));	0
2	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(existsDatabase(longDatabaseName));	0
3	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase(databaseName));	0
4	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertEquals(expectedDatabaseCount,actualDatabaseCount);	0
5	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertNotNull(db);	0
6	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	1
7	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase(longDatabaseName));	0
0	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotSame(res.get(0),res.get(1));	0
1	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
2	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
3	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotEquals(5.0f,res.get(0).field("STR"));	0
4	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(10.78f,res.get(0).field("STR"));	0
5	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertThat(res.get(0).field("STR"),is(equalTo(10.78f)));	0
6	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNull(res.get(0).field("STR"));	0
7	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertArrayEquals(newFloat[]{10.78f},newFloat[]{res.get(0).field("STR")});	0
8	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
9	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertSame(res.get(0),res.get(0));	0
0	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(anotherCompositeKey.equals(compositeKey));	0
1	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	0
2	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey)||anotherCompositeKey.equals(compositeKey));	0
3	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(anotherCompositeKey.equals(anotherCompositeKey));	0
4	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0
5	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	0
6	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	0
7	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(null));	0
8	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals("STR"));	0
9	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.contains(anotherCompositeKey));	0
0	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),result.size());	0
1	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0),result.get(0));	0
2	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList<?>);	0
3	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotSame(expectedResult,result);	0
4	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	0
5	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals(expectedResult,result);	0
6	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(result.containsAll(expectedResult));	0
7	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(compositeIndexDefinition.getFields().contains("STR"));	0
8	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	0
9	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertArrayEquals(expectedResult.toArray(),result.toArray());	0
0	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.getName().endsWith("STR"));	0
1	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotEquals("STR",property.getName());	0
2	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals("STR",property.getName());	0
3	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.getName().contains("STR"));	0
4	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getName().startsWith("STR"));	0
5	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getName().contains("STR"));	0
6	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotSame(property.getName(),"STR");	0
7	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertArrayEquals(property.getName().toCharArray(),"STR".toCharArray());	0
8	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property.getName());	0
9	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertSame(property.getName(),"STR");	0
0	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objectsinstanceofHashSet);	0
1	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.size()>0);	0
2	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLineinstanceofOMultiValueChangeTimeLine);	0
3	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.contains("STR"));	0
4	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,objects.size());	0
5	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0
6	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0
7	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains(nestedDoc));	0
8	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objects.contains(nestedDoc));	0
9	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals("STR",subObjects.contains("STR"));	0
0	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
1	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertArrayEquals(newObject[0],w);	0
2	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	0
3	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(w);	0
4	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotSame(null,w);	0
5	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals("STR",w.isRecognized());	0
6	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertSame(null,w);	0
7	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNull(w);	0
8	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	0
9	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
0	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	0
1	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedWordform,actualWordform);	0
2	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotEquals(expectedObject,actualObject);	0
3	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedNumberOfWordforms,locītājs.wordforms.size());	0
4	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(condition);	0
5	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0
6	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotNull(viņš);	0
7	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(condition);	0
8	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.wordforms.contains(expectedWordform));	0
0	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertSame(set,set);	0
1	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened);	0
2	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(flattened.contains("STR"));	0
3	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(set,flattened);	0
4	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(0,flattened.size());	0
5	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(3,flattened.size());	0
6	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened);	0
7	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertArrayEquals(newString[]{"STR","STR","STR","STR"},flattened.toArray());	0
8	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(flattened.containsAll(Arrays.asList("STR","STR","STR","STR")));	0
9	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	0
0	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotSame(0,result.length());	0
1	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotNull(result);	0
2	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertArrayEquals(newbyte[]{},result.getBytes());	0
3	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
4	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotEquals("STR",result);	0
5	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals("STR",result);	1
6	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
7	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
8	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertFalse(result.endsWith("STR"));	0
0	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertSame(srcDir,targetDir);	0
1	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
2	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(true,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
3	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(srcDir,targetDir);	0
4	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals("STR","STR");	0
5	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNull(null);	0
6	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
7	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
8	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals(false,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
9	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
0	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotSame(serverDirectory,tempClass.getParentFile());	0
1	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(tempClass.getParent());	0
2	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals("STR",tempClass.getName().substring(tempClass.getName().lastIndexOf("STR")));	0
3	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.getPath().contains(targetDir.getPath()));	0
4	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(tempClass.toPath()));	0
5	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(tempClass.lastModified());	0
6	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals("STR",tempClass.getName());	0
7	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(targetDir,tempClass.getParentFile());	0
8	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(tempClass.isDirectory());	0
9	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	1
0	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotNull(result);	0
1	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
2	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals(4,result.length());	0
3	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	0
4	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertFalse(result.contains("STR"));	0
5	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals("STR",result);	1
6	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertSame("STR",result);	0
7	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotSame("STR",result);	0
8	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertArrayEquals(newString[]{"STR"},newString[]{result});	0
0	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertArrayEquals(2,3});	0
1	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotEquals("STR",result.toString());	0
2	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	1
3	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertEquals("STR",result.toString());	0
4	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotEquals(newJMXServiceURL("STR"),result);	0
5	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertSame(result,factory.createJMXServiceUrl("STR"));	0
6	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(resultinstanceofJMXServiceURL);	0
7	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotSame(result,factory.createJMXServiceUrl("STR"));	0
8	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(result.toString().startsWith("STR"));	0
9	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertFalse(result.equals(null));	0
0	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals("STR",jmxServiceUrlFactory.getSomeProperty());	0
1	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNull(jmxServiceUrlFactory.getSomething());	0
2	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(expectedObject,jmxServiceUrlFactory.getReferenceObject());	0
3	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertArrayEquals(expectedArray,jmxServiceUrlFactory.getArray());	0
4	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(expectedObject,jmxServiceUrlFactory.getAnotherReferenceObject());	0
5	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(expectedValue,jmxServiceUrlFactory.getValue());	0
6	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(jmxServiceUrlFactory.isInitialized());	0
7	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(jmxServiceUrlFactory);	0
8	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(jmxServiceUrlFactory.isExpired());	0
0	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
1	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(m.markdown("STR"),m.markdown("STR"));	0
2	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertFalse(m.markdown("STR").isEmpty());	0
3	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNull(markdown("STR"));	0
4	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR")instanceofString);	0
5	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotSame(m.markdown("STR"),m.markdown("STR"));	0
6	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",markdown(null));	0
7	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertSame("STR",markdown("STR"));	0
8	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertArrayEquals("b"},markdown("a\n\nb").split("\n"));	0
9	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(null,m.markdown("STR"));	0
0	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().startsWith("STR"));	0
1	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	1
2	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotNull(deflateExtension.getProvidedExtensionAsServer());	0
3	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().contains("STR"));	0
4	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotSame(StringBuilder.class,deflateExtension.getProvidedExtensionAsServer().getClass());	0
5	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertFalse(deflateExtension.getProvidedExtensionAsServer().isEmpty());	0
6	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertArrayEquals("SERVER_NO_CONTEXT_TAKEOVER","CLIENT_NO_CONTEXT_TAKEOVER"});	0
7	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals(3,deflateExtension.getProvidedExtensionAsServer().split("STR").length);	0
8	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertSame(PerMessageDeflateExtension.class,deflateExtension.getClass());	0
9	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotEquals("STR",deflateExtension.getProvidedExtensionAsServer());	0
0	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()>=0);	0
1	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
2	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()<0);	0
3	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNull(null);	0
4	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0.hashCode());	0
5	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	0
6	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
7	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
8	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
9	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertArrayEquals(newint[]{defaultExtension0.hashCode()},newint[]{defaultExtension1.hashCode()});	0
0	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(object);	0
1	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(expectedObject,actualObject);	0
3	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(condition);	0
4	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertThat(actualValue,matcher);	0
6	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNull(object);	0
7	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(condition);	0
8	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertArrayEquals(expectedArray,actualArray);	0
9	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertSame(expectedObject,actualObject);	0
0	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(null,actual);	0
1	VerbsTest	testRegistered	assertNotNull(actual);	assertThat(actual.getName(),is(equalToIgnoringCase("STR")));	0
2	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame("STR",actual.getName());	0
3	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual);	1
4	VerbsTest	testRegistered	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	0
5	VerbsTest	testRegistered	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getAliases());	0
6	VerbsTest	testRegistered	assertNotNull(actual);	assertFalse(actual.isDeleted());	0
7	VerbsTest	testRegistered	assertNotNull(actual);	assertEquals("STR",actual.getName());	0
8	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame(0,actual.getCreatedAt());	0
9	VerbsTest	testRegistered	assertNotNull(actual);	assertTrue(actual.isActive());	0
0	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.getName().isEmpty());	0
1	VerbsTest	testImported	assertNotNull(actual);	assertNotNull(actual);	1
2	VerbsTest	testImported	assertNotNull(actual);	assertSame(actual,Verbs.imported());	0
3	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
5	VerbsTest	testImported	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	0
6	VerbsTest	testImported	assertNotNull(actual);	assertEquals("STR",actual.getName());	0
7	VerbsTest	testImported	assertNotNull(actual);	assertNotSame(createVerb("STR"),actual);	0
8	VerbsTest	testImported	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getSynonyms());	0
9	VerbsTest	testImported	assertNotNull(actual);	assertNull(actual.getDescription());	0
0	VerbsTest	testInitialized	assertNotNull(actual);	assertNotSame(expected,actual);	0
1	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	1
2	VerbsTest	testInitialized	assertNotNull(actual);	assertNull(actual);	0
3	VerbsTest	testInitialized	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	0
4	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.getName());	0
5	VerbsTest	testInitialized	assertNotNull(actual);	assertNotEquals(expectedArray,actualArray);	0
6	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.isInitialized());	0
7	VerbsTest	testInitialized	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
8	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(expected,actual);	0
9	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.isInitialized());	0
0	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.getTimestamp(),statement.getStored());	0
1	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getContext().getLanguage());	0
2	StatementTest	testToString	assertNotNull(actual);	assertTrue(expectedList.contains(attachment));	0
3	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getVersion().isEmpty());	0
4	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getId());	0
5	StatementTest	testToString	assertNotNull(actual);	assertEquals(agent,statement.getAuthority());	0
6	StatementTest	testToString	assertNotNull(actual);	assertTrue(attachment.getUsageType()instanceofURI);	0
7	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getStored().isEmpty());	0
8	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	0
9	StatementTest	testToString	assertNotNull(actual);	assertEquals(MBOX,agent.getMbox());	0
0	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotNull(object);	0
1	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotSame(expected,actual);	0
2	ActivityTest	testGetObjectType	assertNotNull(actual);	assertThat(actual,Matchers.equalTo(expected));	0
3	ActivityTest	testGetObjectType	assertNotNull(actual);	assertFalse(condition);	0
4	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotEquals(expected,actual);	0
5	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
6	ActivityTest	testGetObjectType	assertNotNull(actual);	assertTrue(condition);	0
7	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNull(object);	0
8	ActivityTest	testGetObjectType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
9	ActivityTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	0
0	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHENG,moneyToStrUSD);	0
1	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals(0.01,moneyToStrUSD.calculateTax(100.0));	0
2	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.getCurrencyCode());	0
3	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertArrayEquals("STR","STR"});	0
4	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrRURRUSinstanceofMoneyToStr);	0
5	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUSDENG,moneyToStrEURRUS);	0
6	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS,moneyToStrUAHENG);	0
7	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertFalse(moneyToStrUAHENG.isCurrencyCentNameRequired());	0
8	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(1234.56));	0
9	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrUAH);	0
0	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotEquals(percentToStr(5.5,Language.RUS),percentToStrUSD.percentToStr(5.5,Language.RUS));	0
1	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNull(percentToStr(0.0,Language.RUS));	0
2	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertTrue(percentToStr(23.75,Language.ENG).endsWith("STR"));	0
3	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotSame("STR",percentToStr(12.5,Language.ENG),percentToStrUAHENG.percentToStr(12.5,Language.ENG));	0
4	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertEquals(percentToStr(10.0,Language.UKR),percentToStrUAH.percentToStr(10.0,Language.UKR));	0
5	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertArrayEquals(newString[]{"STR"},newString[]{percentToStr(100.0,Language.RUS)});	0
6	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertSame(percentToStr(99.99,Language.RUS),percentToStrRUR.percentToStr(99.99,Language.RUS));	0
7	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertFalse(percentToStr(99.99,Language.UKR).isEmpty());	0
8	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotNull(percentToStr(75.0,Language.UKR));	0
9	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertEquals("STR",percentToStr(17.33,Language.RUS));	0
0	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(object);	0
1	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
2	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(condition);	0
3	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0
4	TestPressure	testToMillibar	assertEquals(expected,actual);	assertThat(value,matcher);	0
5	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	1
6	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(condition);	0
7	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	0
8	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNull(object);	0
9	TestPressure	testToMillibar	assertEquals(expected,actual);	assertSame(expected,actual);	0
0	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(object);	0
1	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
2	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(condition);	0
3	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0
4	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
5	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(condition);	0
6	TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(object);	0
7	TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	0
8	TestPressure	testToInHg	assertEquals(expected,actual);	assertSame(expected,actual);	0
0	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<=100);	0
1	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>50);	0
2	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%2);	0
3	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(Math.abs(value-50)<=10);	0
4	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<=100);	0
5	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0);	1
6	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(50,value);	0
7	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%5);	0
8	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<50);	0
9	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertDoesNotThrow(()->bind0(object,"STR","STR"));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(findTargetObject(object,"STR",path));	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(isProbeField(field));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNull(findTargetObject(object,"STR",path));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(isProbeField(field));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertDoesNotThrow(()->bind0(object,"STR","STR"));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(object,bind0(object,"STR","STR"));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,"STR","STR"));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertSame(object,bind0(object,"STR","STR"));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,"STR","STR"));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	0
0	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertArrayEquals(expectedArray,getCloudIdentity().toCharArray());	0
1	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertFalse(getCloudIdentity().isEmpty());	0
2	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotSame(unexpectedObject,getCloudIdentity());	0
3	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertSame(expectedObject,getCloudIdentity());	0
4	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotEquals("STR",getCloudIdentity());	0
5	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertEquals("STR",getCloudIdentity());	0
6	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotNull(getCloudIdentity());	0
7	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertTrue(getCloudIdentity().length()>0);	0
8	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertThat(getCloudIdentity(),CoreMatchers.startsWith("STR"));	0
9	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNull(getCloudIdentity());	0
0	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	0
1	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(Object.class,field.getDeclaringClass());	0
2	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isSynthetic());	0
3	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(String.class,field.getType());	0
4	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals("STR",field.getName());	0
5	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isAccessible());	0
6	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(field.getDeclaringClass()==GetFieldTest.class||field.getDeclaringClass().isAssignableFrom(GetFieldTest.class));	0
7	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(Modifier.isPublic(field.getDeclaringClass().getModifiers()));	0
8	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.class,field.getType());	0
9	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals("STR",field.getName());	0
0	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertSame(parser,options.getParser());	0
1	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(null,options.getOptions());	0
2	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotSame(parser,options.getParser());	0
3	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals("STR",options.toString());	0
4	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertArrayEquals(newString[]{},options.getArguments());	0
5	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.getOptions().size());	0
6	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	0
7	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertThrows(ExitException.class,()->options.getParser().parse(newString[]{"STR"}));	0
8	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	1
9	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(0,options.size());	0
0	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotNull(object);	0
1	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotSame(expected,actual);	0
2	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	"assertThrows(Exception.class,()->{
});"	0
3	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertFalse(condition);	0
4	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotEquals(expected,actual);	0
5	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertEquals(expected,actual);	0
6	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertTrue(condition);	0
7	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNull(object);	0
8	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertArrayEquals(expectedArray,actualArray);	0
9	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertSame(expected,actual);	0
0	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertEquals(expectedAttributes,actualAttributes);	0
1	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotSame(expectedObject,actualObject);	0
2	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNull(attributes);	0
3	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertFalse(condition);	0
4	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotNull(attributes);	0
5	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotEquals(expectedAttributes,actualAttributes);	0
6	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotEquals(expectedArray,actualArray);	0
7	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertTrue(condition);	0
8	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertArrayEquals(expectedArray,actualArray);	0
9	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertSame(expectedObject,actualObject);	0
0	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertNull(attrs().get("STR"));	0
1	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertSame(attrs(),attrs(attrs()));	0
3	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertTrue(attrs().isEmpty());	0
5	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertThrows(NullPointerException.class,()->attrs((Attributes<?extendsFor>)null));	0
7	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertNotNull(attrs().put("STR","STR"));	0
8	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertArrayEquals(newAttributes[]{},attrs().toArray());	0
9	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertFalse(attrs().contains(null));	0
0	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertThrows(IllegalArgumentException.class,()->viz.toString());	0
1	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	0
2	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertArrayEquals('b','c'});	0
3	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotSame(null,viz.toString());	0
4	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotEquals(null,viz.toString());	0
5	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotEquals("STR",viz.toString());	0
6	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertEquals("STR",viz.toString());	0
7	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertTrue(viz.toString().contains("STR"));	0
8	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertFalse(viz.toString().isEmpty());	0
9	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotSame("STR",viz.toString());	0
0	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(object);	0
1	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(expected,actual);	0
2	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals("STR","STR");	0
3	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(condition);	0
4	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNull(object);	0
5	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(condition);	0
6	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(expectedArray,actualArray);	0
7	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertSame(expected,actual);	0
8	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR","STR");	0
0	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(nouns.isEmpty());	0
1	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(3,tokens.size());	0
2	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.nonEmpty());	0
3	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertDoesNotThrow(()->OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun,nouns));	0
4	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.head()instanceofKoreanTokenizer.KoreanToken);	0
5	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",text);	0
6	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",nouns.get(0));	0
7	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	0
8	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(1,nouns.size());	0
9	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	0
0	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotSame(expectedObject,actualObject);	0
1	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertFalse(false);	0
2	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	0
3	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(notNullValue);	0
4	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(expectedValue,actualValue);	0
5	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotEquals(expectedValue,actualValue);	0
6	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNull(nullValue);	0
7	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertArrayEquals(expectedArray,actualArray);	0
8	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertSame(expectedObject,actualObject);	0
0	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1).getDvchost());	0
1	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	1
2	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals("STR",parser.parse(sample1).getCs1());	0
3	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(expectedProtocols.contains(parser.parse(sample1).getProto()));	0
4	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotEquals(unexpectedEvent,parser.parse(sample1));	0
5	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1)instanceofCommonEvent);	0
6	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1).getRt().startsWith("STR"));	0
7	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertFalse(parser.parse(sample1).getSmac().isEmpty());	0
8	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedEvent,parser.parse(sample1));	0
9	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertSame(CommonEvent.class,parser.parse(sample1).getClass());	0
0	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",getCiName());	0
1	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",getCiName());	0
2	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(Character.isJavaIdentifierStart(getCiName().charAt(0)));	0
3	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().matches("STR"));	0
4	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().startsWith("STR"));	0
5	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName()instanceofString);	0
6	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().contains("STR"));	0
7	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().endsWith("STR"));	0
8	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(getCiName());	0
9	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().isEmpty());	0
0	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredClasses().length>0);	0
1	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotSame(String.class,helloClass.getSuperclass());	0
2	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals("STR",helloClass.getName());	0
3	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals("STR",helloClass.getMethod("STR").invoke(helloClass.newInstance()));	0
4	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredClasses()[0].isInterface());	0
5	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredClasses()[0].getDeclaredFields().length);	0
6	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(Modifier.isPrivate(helloClass.getDeclaredClasses()[0].getModifiers()));	0
7	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertArrayEquals(newClass<?>[]{String.class},helloClass.getInterfaces());	0
8	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredFields().length>0);	0
9	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	1
0	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertFalse(false);	0
1	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(true);	0
2	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals("STR","STR");	0
3	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull("STR");	0
4	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNull(null);	0
5	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals(5,5);	0
6	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
7	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertSame("STR","STR");	0
8	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotSame("STR","STR");	0
9	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals(10,20);	0
0	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	0
1	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>durationLimit);	0
2	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<durationLimit);	0
3	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=lowerBound&&duration<=upperBound);	0
4	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(randomValue>0);	0
5	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertFalse(randomValue<0);	0
6	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(maxDelayNanos>0);	0
7	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=durationLimit);	0
8	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(randomValue>=0);	0
9	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit);	0
0	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.hasProperty("STR"));	0
1	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.areIndexed("STR"));	0
2	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.hasProperty("STR"));	0
3	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.areIndexed("STR"));	0
4	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.isSubClassOf("STR"));	0
5	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotEquals("STR",clazz.getCustom("STR"));	0
6	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotNull(clazz.getCustom("STR"));	0
7	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNull(clazz.getCustom("STR"));	0
8	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.isSubClassOf("STR"));	0
9	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertEquals("STR",clazz.getCustom("STR"));	1
0	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(mapToTest.size(),((List<?>)result).size());	0
1	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
2	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertArrayEquals(mapToTest.values().toArray(),((List<?>)result).toArray());	0
3	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
4	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size());	0
5	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	0
6	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(mapToTest,result.get(0));	0
7	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(null,result.get(0));	0
8	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(mapToTest,params.get(0));	0
9	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).containsAll(mapToTest.values()));	0
0	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	0
1	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(result.length==0);	0
2	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(result);	0
3	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	0
4	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
5	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0
6	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.STRING,result[0]);	0
7	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	0
8	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(newOType[]{OType.INTEGER},result);	0
9	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
0	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys()instanceofSet);	0
1	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	0
2	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys()instanceofList);	0
3	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().contains("STR"));	0
4	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals("STR",compositeKey.getKeys().get(0));	0
5	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	1
6	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().contains("STR"));	0
7	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals("STR",compositeKey.getKeys().get(0));	0
8	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().isEmpty());	0
9	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	0
0	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getSize());	0
1	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(-1,db.command(newOCommandSQL("STR")).execute());	0
2	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(8,db.get(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS));	0
3	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertArrayEquals("location"},db.getMetadata().getSchema().getClass("City").getPropertyNames());	0
4	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOIndex);	0
5	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertSame(path,"STR");	0
6	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotSame(type,ODatabaseType.MEMORY);	0
7	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals("STR",db.query(newOSQLSynchQuery<>("STR")).get(0));	0
8	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertFalse(context.exists(name.getMethodName()));	0
9	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(db);	0
0	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNull(result);	0
1	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(5D),result);	0
2	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	0
3	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofInteger);	0
4	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	0
5	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	0
6	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(0),result);	0
7	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertSame(function,result);	0
8	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(resultinstanceofString);	0
9	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertArrayEquals(newObject[]{newBigDecimal(10.5D)},(Object[])result);	0
0	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals("STR",qResult.stream().findFirst().orElseThrow().getProperty("STR"));	0
1	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	0
2	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(qResult.hasNext());	0
3	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertThrows(Exception.class,()->db.query(null));	0
4	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().anyMatch(result->result.getProperty("STR").equals("STR")));	0
5	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().allMatch(result->result.getProperty("STR").toString().startsWith("STR")));	0
6	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
7	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	0
8	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertArrayEquals("Jane"},qResult.stream().map(r->r.getProperty("name")).toArray());	0
9	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(0,qResult.stream().count());	0
0	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertArrayEquals(token,connection.getToken());	0
1	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(5));	0
2	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(null,server.getContextConfiguration());	0
3	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener.getSubscribers());	0
4	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(0,listener.getSubscribersCount());	0
5	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(5,listener.getSubscribersCount());	0
6	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	0
7	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNull(listener.getSubscribers());	0
8	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotSame(protocol,connection.getProtocol());	0
9	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertSame(db,connection.getDatabase());	0
0	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertFalse(oSchema.getClass("STR").existsProperty("STR"));	0
1	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotSame(oClass.getProperty("STR"),oClass.getProperty("STR"));	0
2	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotEquals(OType.INTEGER,oClass.getProperty("STR").getType());	0
3	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNull(oClass.getProperty("STR"));	0
4	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertTrue(oSchema.getClass("STR").existsProperty("STR"));	0
5	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertSame(oClass.getProperty("STR"),oClass.getProperty("STR"));	0
6	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotNull(oClass.getProperty("STR"));	1
7	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertEquals(OType.LINKLIST,oClass.getProperty("STR").getType());	0
0	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(((List)result).size(),((List)result).stream().distinct().count());	0
1	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList<?>);	0
2	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
3	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals("STR",((List)result).get(0));	0
4	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofInteger));	0
5	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
6	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List)result).isEmpty());	0
7	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(IntStream.range(0,resultList.size()-1).allMatch(i->resultList.get(i)<resultList.get(i+1)));	0
8	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->((Integer)e)%2==0));	0
9	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofString));	0
10	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(2,((List)result).size());	0
0	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.deserializeNative(data,0));	0
1	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset));	0
2	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset<buffer.capacity());	0
3	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset>=0);	0
4	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	0
5	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,floatSerializer.deserializeNative(data,serializationOffset));	0
6	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	0
7	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.deserializeNative(data,0)>0);	0
8	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	0
9	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(data);	0
0	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
1	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(c>=0x20&&c<=0x7E);	0
2	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(c<0x20||c>0x7E);	0
3	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(otp,otherOtp);	0
4	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>=OTP_MIN_LEN);	0
5	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0
6	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=OTP_MAX_LEN);	0
7	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(20,otp.length());	0
8	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(30,otp.length());	0
9	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
0	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat("STR"));	0
1	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(null));	0
2	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat("STR"));	0
0	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
1	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer.getPrioritizedRoutes(),mappings);	0
2	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
3	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
4	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	0
5	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(mappings.toArray(),routePrioritizer.getPrioritizedRoutes().toArray());	0
6	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().stream().allMatch(Objects::nonNull));	0
7	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0
8	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
9	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
0	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(newUriResource[]{},routePrioritizer.getPrioritizedRoutes().toArray());	0
1	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(mappings,routePrioritizer.getPrioritizedRoutes());	0
2	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
3	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0
4	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
5	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	0
6	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0
7	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	0
8	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
9	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
0	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().isEmpty());	0
1	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().matches("STR"));	0
2	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getUnit());	0
3	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a);	0
4	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().contains("STR"));	0
5	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getSvg().length());	0
6	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	0
7	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().startsWith("STR"));	0
8	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().endsWith("STR"));	0
9	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getWidth());	0
0	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertSame(args[0],opts.args.get(0));	0
1	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts.opts.get("STR"));	0
2	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertArrayEquals("c","d"});	0
3	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals("STR",opts.args.get(1));	0
4	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertEquals(2,opts.args.size());	0
5	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsKey("STR"));	0
6	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNull(opts.opts.get("STR"));	0
7	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals("STR",opts.opts.get("STR"));	0
8	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotSame(options,opts);	0
9	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertFalse(opts.opts.containsKey("STR"));	0
0	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,size);	0
1	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>0);	0
2	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>=2);	0
3	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining<=0);	0
4	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>=0);	0
5	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>0);	0
6	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,value);	0
7	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(value>=0);	0
8	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(size>0);	0
9	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(signedComplement[size],value);	0
0	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(expectedTransform,transform);	0
1	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	1
2	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofTransform);	0
3	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transform>=min&&transform<=max);	0
4	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(someCondition);	0
5	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(unexpectedTransform,transform);	0
6	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(someCondition);	0
7	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotSame(differentTransform,transform);	0
8	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertSame(sameTransform,transform);	0
9	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(transform>=min&&transform<=max);	0
0	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	1
1	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotSame(expected,actual);	0
2	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(actual.length==0);	0
3	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length==0);	0
4	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(Arrays.asList(expected),Arrays.asList(actual));	0
5	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actualinstanceofString[]);	0
6	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected.length,actual.length);	0
7	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(element);	0
8	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,Arrays.copyOf(actual,expected.length));	0
9	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	0
0	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>=1);	0
1	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actualinstanceofArrayList);	0
2	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotEquals(e,actual.get(0));	0
3	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(1,actual.size());	0
4	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.contains(null));	0
5	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
6	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals("STR",actual.get(0).getDescription().get("STR"));	0
7	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(expected);	0
8	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals("STR",actual.get(0).getId());	0
9	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
0	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	0
1	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	1
2	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getContext().getLanguage().equals("STR"));	0
3	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	0
4	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expected,actual);	0
5	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expectedList.size(),statement.getAttachments().size());	0
6	StatementTest	testGetObject	assertNotNull(actual);	assertArrayEquals(expectedList.toArray(),statement.getAttachments().toArray());	0
7	StatementTest	testGetObject	assertNotNull(actual);	assertEquals("STR",statement.getAuthority().getVersion());	0
8	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	0
9	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	0
0	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual);	0
1	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	0
2	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual);	0
3	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertThat(actual,matcher);	0
4	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(object);	0
5	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expectedArray,actualArray);	0
6	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertSame(expected,actual);	0
7	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	0
8	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	0
9	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition);	0
0	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotNull(getName());	0
1	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertTrue(getName().startsWith("STR"));	0
2	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",getName());	0
3	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertSame("STR",getName());	0
4	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertFalse(getName().startsWith("STR"));	0
5	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNull(getName());	0
6	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertArrayEquals(newString[]{"STR"},newString[]{getName()});	0
7	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR",getName());	0
8	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotSame("STR",getName());	0
9	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR","STR");	0
0	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	1
1	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(directories.size(),sourceLoader.getNumberOfLoaders());	0
2	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	0
3	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(directories.isEmpty());	0
4	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(0)instanceofDirectorySourceLoader);	0
5	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertSame(modules,sourceLoader.getModules());	0
6	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getSourceEncoding().equals("STR"));	0
7	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getBaseDir().equals(baseDir));	0
8	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(1)instanceofScanSourceLoader);	0
9	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNull(sourceLoader.getLoader(2));	0
0	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertSame(expectedObject,actualObject);	0
1	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(booleanExpression);	0
2	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNull(object);	0
3	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(expectedObject,actualObject);	0
4	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(booleanExpression);	0
5	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(object);	0
6	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR","STR");	0
7	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertArrayEquals(expectedArray,actualArray);	0
8	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertThat(actualValue,matcher);	0
9	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR","STR");	0
0	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThrows(AccessTokenRequiredException.class,()->acquireAccessToken());	0
1	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertFalse(oAuth2ClientContext.getPreservedState().containsKey(stateKey));	0
2	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertArrayEquals(newHttpMethod[]{HttpMethod.GET},requestTemplate.method().toArray());	0
3	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertSame(resource,obtainableAccessToken.getAdditionalInformation().get("STR"));	0
4	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNull(tokenRequest.getStateKey());	0
5	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotSame(obtainableAccessToken,existingToken);	0
6	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotNull(obtainableAccessToken);	0
7	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertTrue(obtainableAccessToken.getExpiration().isAfter(LocalDateTime.now()));	0
8	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertEquals("STR",existingToken.getValue());	0
9	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertTrue(tokenRequest.getPreservedState().isEmpty());	0
0	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(env,result);	0
1	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsKey("STR"));	0
2	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsKey("STR"));	0
3	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNull(result.get("STR"));	0
4	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(result.get("STR"));	0
5	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(env,result);	0
6	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,result.size());	0
7	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotSame(env,result);	0
8	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertSame(env,result);	0
9	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,result.size());	0
0	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsValue("STR"));	0
1	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",result.get("STR"));	0
2	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsKey("STR"));	0
3	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsKey("STR"));	0
4	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(result);	0
5	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(2,result.size());	0
6	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsValue("STR"));	0
7	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotSame(env,result);	0
8	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(resultinstanceofHashMap);	0
0	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.containsKey("STR"));	0
1	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(env.containsKey("STR"));	0
2	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(result);	0
3	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(2,result.size());	0
4	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertSame(env,filter(env));	0
5	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(env.containsValue("STR"));	0
6	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,env.size());	0
7	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.containsValue("STR"));	0
8	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.isEmpty());	0
9	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.isEmpty());	0
0	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(expectedMethod,result.get("STR"));	0
1	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedArray,result.values().toArray());	0
2	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(result.containsKey("STR"));	0
3	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(result.containsKey("STR"));	0
4	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNull(result.get("STR"));	0
5	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(result.get("STR"));	0
6	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(expectedMethod,result.get("STR"));	0
7	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedSize,result.size());	0
8	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedSize,result.size());	0
9	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertArrayEquals(expectedArray,result.values().toArray());	0
0	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAttributeInjector);	0
1	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(attributeNames001);	0
2	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryInfo001);	0
3	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(objectName001);	0
4	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockLogger);	0
5	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryPreparer);	0
6	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polled001);	0
7	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAccessConnection);	0
8	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polledObjects);	0
9	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor);	0
0	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").get(tokens.apply("STR").size()-1).endsWith("STR"));	0
1	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertArrayEquals("value2","value3"});	0
2	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(3,tokens.apply("STR").size());	0
3	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply("STR").contains("STR"));	0
4	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(tokens.apply("STR").size(),newHashSet<>(tokens.apply("STR")).size());	0
5	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotNull(tokens.apply("STR"));	0
6	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply("STR").isEmpty());	0
7	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").contains("STR"));	0
8	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").isEmpty());	0
9	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").get(0).startsWith("STR"));	0
0	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotSame("STR","STR");	0
1	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNull(bolt.parseDomain(null));	0
2	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(bolt.parseString("STR"));	0
3	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(2,3});	0
4	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt!=null);	0
5	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(5,bolt.parseNumber("STR"));	0
6	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals("STR",bolt.parseDomain("STR"));	0
7	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	0
8	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals("STR",bolt.parseDomain("STR"));	0
9	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt.parseString("STR"));	0
0	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertArrayEquals(newString[]{"STR"},fields.get("STR").split("STR"));	0
1	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
2	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
3	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(fields.get("STR"),fields.get("STR"));	0
4	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	0
5	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
6	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(null,fields.get("STR"));	0
7	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",fields.get("STR"));	0
8	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
9	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals(null,fields.get("STR"));	0
0	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	0
1	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(newObject[]{},md.keySet().toArray());	0
2	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(md.isEmpty());	0
3	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	0
4	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(md,newHashMap<>());	0
5	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(5,md.size());	0
6	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertSame(md,md);	0
7	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNull(md.get("STR"));	0
8	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(md.containsKey("STR"));	0
0	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4,elementCount);	0
1	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(true);	0
2	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(1,iterator.next().intValue());	0
3	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iteratorinstanceofIterator);	0
4	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	1
5	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	0
6	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	0
7	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	0
0	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertThat("STR",Matchers.equalTo(result));	0
1	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
2	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotNull(result);	0
3	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertSame("STR",result);	0
4	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertFalse(result.equals("STR"));	0
5	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNull(null);	0
6	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertEquals("STR",result);	1
7	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotSame("STR",result);	0
8	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertThat(result,Matchers.is("STR"));	0
9	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	0
0	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(KoreanPosJava.Adjective,tokens.apply(2).getPos());	0
1	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.last().getSurface());	0
2	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>=3);	0
3	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(5,tokens.count());	0
4	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.exists(token->"STR".equals(token.getSurface())));	0
5	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.exists(token->"STR".equals(token.getSurface())));	0
6	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	0
7	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals("STR",tokens.apply(1).getSurface());	0
8	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(KoreanPosJava.Noun,tokens.apply(0).getPos());	0
9	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.apply(0).getSurface());	0
0	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertArrayEquals(namedList.toArray(),filtered.toArray());	0
1	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals("STR",filtered.get(2).getName());	0
2	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotEquals(null,filtered);	0
3	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(3,filtered.size());	0
4	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(filtered.size(),set.size());	0
5	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.stream().anyMatch(e->e.getName().equals("STR")));	0
6	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(0,filtered.size());	0
7	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.stream().anyMatch(e->e.getName().equals("STR")));	0
8	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotNull(filtered);	0
9	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.isEmpty());	0
0	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0
1	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThrows(Exception.class,()->matcher.lookingAt());	0
2	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(!matcher.lookingAt());	0
3	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0
4	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(null);	0
5	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotThrows(Exception.class,()->matcher.lookingAt());	0
6	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	0
7	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0
8	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0
9	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
0	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(formas,locītājs.generateInflections("STR"));	0
1	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(2,formas.size());	0
2	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertSame(formas,locītājs.generateInflections("STR"));	0
3	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertArrayEquals(newWordform[]{},formas.toArray());	0
4	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,hasSize(0));	0
5	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
6	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(0,formas.size());	0
7	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.contains(null));	0
8	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,empty());	0
9	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	0
0	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(-10999999999999.99));	0
1	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(-9999999999999.99));	0
2	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDENG.convert(-10999999999999.99));	0
3	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(-9999999999999.99));	0
4	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(-9999999999999.99));	0
5	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(-9999999999999.99));	0
6	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(-9999999999999.99));	0
7	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(-9999999999999.99));	0
8	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(-10999999999999.99));	0
9	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(-9999999999999.99));	0
0	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().contains("STR"));	0
1	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().startsWith("STR"));	0
2	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotEquals("STR",defaultExtension.toString());	0
3	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotNull(defaultExtension.toString());	0
4	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertEquals("STR",defaultExtension.toString());	1
5	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotSame("STR",defaultExtension.toString());	0
6	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().endsWith("STR"));	0
7	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertFalse(defaultExtension.toString().isEmpty());	0
8	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().length()>0);	0
9	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().matches("STR"));	0
0	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	1
1	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertNull(util.removeSurroundingQuotes(null));	0
2	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertNotEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	0
3	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertEquals("STR",removeSurroundingQuotes("STR"));	0
0	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(true);	0
1	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	0
2	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNull(null);	0
3	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(object1,object2);	0
5	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertSame(object1,object2);	0
6	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(false);	0
0	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertArrayEquals(newString[]{"STR"},sql.getTables());	0
1	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().endsWith("STR"));	0
2	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
3	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	0
4	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.getTables()[0]);	0
5	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql);	0
6	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNull(sql);	0
7	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	0
8	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
9	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertSame("STR",sql.toString());	0
0	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotSame(_in,expecteds);	0
1	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(lacesCount<0);	0
2	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	1
3	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(3,calcEbmlLacingDiffs(_in).length);	0
4	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertSame(_in,_in);	0
5	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(443,MkvBlock.calcEbmlLacingDiffs(_in)[1]);	0
6	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(_in));	0
7	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(187.0,calcEbmlLacingDiffs(_in)[0]);	0
8	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNull(null);	0
9	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(lacesCount>0);	0
0	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(127,ebmlEncode(20)[2]);	0
1	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[]{0,0,0,20},ebmlEncode(20));	0
2	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame(first,second);	0
3	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(4,ebmlEncode(15).length);	0
4	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(10).length>0);	0
5	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[0],ebmlEncode(0));	0
6	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertSame(first,second);	0
7	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNull(ebmlEncode(0));	0
8	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(ebmlEncode(5));	0
0	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotSame(moneyToStrRUR,moneyToStrUSDENG);	0
1	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotNull(moneyToStrUAH);	0
2	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNull(moneyToStrRURRUS);	0
3	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(323.0));	0
5	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertTrue(moneyToStrPER1000.convert(10.05).startsWith("STR"));	0
6	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getCustomStrings());	0
7	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals(moneyToStrUSDENG.convert(50.5),moneyToStrUSDENG.convert(50.50));	0
8	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertFalse(moneyToStrUSDENG.convert(100.0).endsWith("STR"));	0
0	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newObject()));	0
1	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNotEquals(OMultiValue.getFirstValue(collection),"STR");	0
2	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newArrayList<String>()));	0
3	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newString[]{}));	0
4	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals("STR",getFirstValue(Arrays.asList("STR","STR","STR")));	0
5	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals("STR",OMultiValue.getFirstValue(newString[]{"STR","STR","STR"}));	0
7	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(getFirstValue(newHashMap<String,String>()));	0
8	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(null));	0
9	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue("STR"));	0
0	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertArrayEquals(newObject[]{doc},vertices.toArray());	0
1	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	1
2	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size());	0
3	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals("STR",vertices.get(0).field("STR"));	0
4	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(doc,vertices.get(0));	0
5	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertSame(doc,vertices.get(0));	0
6	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	0
7	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNull(vertices.get(0));	0
8	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.size()>0);	0
9	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	0
0	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(compositeIndex);	0
1	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys[0],result.getKeys().get(0));	0
2	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	0
3	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(documentinstanceofODocument);	0
4	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	0
5	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys.length,result.getKeys().size());	0
6	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals("STR",compositeIndex.getIndex(1).getDefinition().getFields().get(0));	0
7	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals("STR",compositeIndex.getIndex(0).getDefinition().getFields().get(0));	0
8	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofOCompositeKey);	0
9	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(2,compositeIndex.size());	0
0	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndex);	0
1	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertFalse(compositeIndex.hasIndex("STR"));	0
2	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,keys.size());	0
3	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,compositeIndex.getIndexes().size());	0
4	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	0
5	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(compositeIndex.hasIndex("STR",OType.INTEGER));	0
6	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	0
7	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	1
8	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,((ArrayList<OCompositeKey>)result).size());	0
9	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList);	0
0	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	0
1	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.stream().count(),CoreMatchers.is(0));	0
2	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertArrayEquals(newObject[]{},result.stream().toArray());	0
3	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
4	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotEquals(0,result.stream().count());	0
5	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNull(result.next());	0
6	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.next());	0
7	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertSame(0,result.stream().count());	0
8	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotSame(0,result.stream().count());	0
9	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
0	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedLength,stream.length);	0
1	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(expectedByteArray,stream);	0
2	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedByte,stream[0]);	0
3	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream[0]);	0
4	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newbyte[0],stream);	0
5	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],greaterThan(minValue));	0
6	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertSame(expectedByte,stream[0]);	0
7	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],instanceOf(Byte.class));	0
8	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],lessThan(maxValue));	0
9	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(expectedByte,stream[0]);	0
10	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNull(stream[0]);	0
0	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(database.getRecordById(docOne.getIdentity()));	0
1	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo);	0
2	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNull(database.getRecordById(newORecordId(-1,-1)));	0
3	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertArrayEquals(2,3});	0
4	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotEquals(0,database.countClusterElements(database.getDefaultClusterId()));	0
5	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	1
6	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(recordsCount==0);	0
7	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertSame(docOne,ridBag.get(0));	0
8	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(0,database.countClusterElements(database.getClusterIdByName(database.getDefaultClusterName())));	0
9	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(recordsCount>0);	0
0	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR",idProperty.getName());	0
1	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().startsWith("STR"));	0
2	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(Pattern.matches("STR",idProperty.getName()));	0
3	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName()instanceofString);	0
4	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().contains("STR"));	0
5	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
6	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().length()>=1&&idProperty.getName().length()<=100);	0
7	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty.getName());	0
8	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(!idProperty.getName().isEmpty());	0
0	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR",idProperty.getName());	0
1	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,idProperty.getMin());	0
2	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax());	0
3	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	0
4	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isUnsafe());	0
5	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getOwnerClass().getName());	0
6	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
7	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0
8	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(OType.EMBEDDEDLIST,idProperty.getType());	0
9	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(db);	0
0	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(0,getClusterIds().length);	0
1	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(1,getClusterIds()[0]);	0
2	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).contains(5));	0
3	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(3,getClusterIds().length);	0
4	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(getClusterIds().length,clusterIdsSet.size());	0
5	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).contains(2));	0
6	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).isEmpty());	0
7	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(getClusterIds());	0
8	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).isEmpty());	0
9	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(getClusterIds().length>0);	0
0	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
1	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0
2	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
3	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	0
4	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0
5	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
6	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	0
7	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
8	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()==false);	0
9	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
0	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	1
1	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(ret.getId()>0);	0
2	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(OServerPluginHelper.isHandlerCallbackInvoked(ret.getProtocol().getServer(),ret));	0
3	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	0
4	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsValue(ret));	0
5	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(connectionSerial.get()-1,ret.getConnectionSerial());	0
6	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(protocol,ret.getProtocol());	0
7	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsKey(ret.getId()));	0
8	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(OLogManager.instance().getConfiguredLoggers().contains("STR"+ret));	0
9	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(server,ret.getProtocol().getServer());	0
0	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(res);	0
1	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions(),serializerVersion);	0
2	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(document.containsProperty("STR"));	0
3	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertFalse(mappa.containsKey("STR"));	0
4	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(serializerinstanceofORecordSerializerNetwork);	0
5	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extrinstanceofODocument);	0
6	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	0
7	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotEquals(ORecordSerializerNetworkV37.class,serializer.getClass());	0
8	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(2,lista.size());	0
9	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(_fieldSize>0);	0
0	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(anotherCompositeKey);	0
1	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	0
2	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKeyinstanceofString);	0
3	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
4	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKeyinstanceofOCompositeKey);	0
5	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	1
6	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	0
7	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0
8	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	0
9	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0
0	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(0,request.getCommand());	0
1	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals(0,request.getCommand());	0
2	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	0
3	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getErrorMessage());	0
4	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertFalse(request.getCommand()!=OChannelBinaryProtocol.REQUEST_QUERY);	0
5	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertArrayEquals(2,3});	0
6	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals("STR",params.get("STR"));	0
7	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertTrue(request.getCommand()==OChannelBinaryProtocol.REQUEST_QUERY);	0
8	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	0
9	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNull(other.getErrorMessage());	0
0	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotEquals(expectedValue,result);	0
1	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertEquals(expectedValue,result);	0
2	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertSame(expectedObject,result);	0
3	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertFalse(result);	0
4	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotNull(result);	0
5	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertTrue(result);	0
6	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotSame("STR",expectedObject,result);	0
7	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNull(result);	0
8	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertArrayEquals(expectedArray,result);	0
0	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals("STR",config.get(Keys.CUCUMBERPRO_LOGGING));	0
1	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(config,logger.getConfig());	0
2	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotEquals("STR",logger.getLogLevelType());	0
3	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(config.get(Keys.CUCUMBERPRO_LOGGING));	0
4	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(loggerinstanceofLogger.ConsoleLogger);	0
5	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotEquals("STR",config.get(Keys.CUCUMBERPRO_LOGGING));	0
6	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertArrayEquals(newString[]{"STR"},config.logLevelsToArray());	0
7	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertSame(config,logger.getConfig());	0
8	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNull(config.get(Keys.CUCUMBERPRO_LOGGING));	0
9	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(loggerinstanceofLogger.SystemLogger);	0
0	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals("STR",config.get(CUCUMBERPRO_URL));	0
1	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config.get(CUCUMBERPRO_LOGGING));	0
2	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(logger,newLogger(config));	0
3	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNull(config.get(CUCUMBERPRO_PROFILE));	0
4	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(config.get(CUCUMBERPRO_LOGFILE),"STR");	0
5	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
6	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.isDebugEnabled());	0
7	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertArrayEquals(newString[]{"STR","STR","STR","STR"},config.get(CUCUMBERPRO_ENVMASK));	0
8	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(config,createConfig());	0
9	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(5001,config.get(CUCUMBERPRO_CONNECTION_TIMEOUT));	0
0	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0);	0
1	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0);	0
2	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison>0);	0
3	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<=0);	0
4	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>=0);	0
5	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	0
6	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(macAddress,macAddress.address);	0
7	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison);	0
8	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(5,comparison);	0
0	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	0
1	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedLength,macAddress.getAddress().length);	0
2	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddressinstanceofMacAddress);	0
3	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(macAddress));	0
4	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(someObject));	0
5	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	0
6	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedResult,macAddress.equals(otherMacAddress));	0
7	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	0
8	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedMacAddress,macAddress);	0
9	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(expectedMacAddress,macAddress);	0
0	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals("STR",parser.parse(sample1,true,Locale.US).getVendor());	0
1	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	0
2	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame(parser.parse(sample1,true,Locale.US),parser.parse(sample1,true,Locale.US));	0
3	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertThat(parser.parse(sample1,true,Locale.US),instanceOf(CommonEvent.class));	0
4	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertArrayEquals("FireEye","CMS"});	0
5	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).isValidate());	0
6	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNull(parser.parse(null,true,Locale.US));	0
7	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(7.2,parser.parse(sample1,true,Locale.US).getVersion());	0
8	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(parser.parse(sample1,false,Locale.US).isNormalize());	0
9	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).getExtensions().isEmpty());	0
0	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(markdown("STR"));	0
1	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertSame(html("STR"),markdown("STR"));	0
2	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNull(markdown(null));	0
3	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(html("STR").contains("STR"));	0
4	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotSame(html("STR"),markdown("STR"));	0
5	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertArrayEquals(html("STR").toCharArray(),markdown("STR").toCharArray());	0
6	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(html("STR"),markdown("STR"));	0
7	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(html("STR").contains("STR"));	0
8	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals(html("STR"),markdown("STR"));	0
0	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch()instanceofString);	0
1	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertFalse(condition);	0
2	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().isEmpty());	0
3	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertNotNull(getBranch());	0
4	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().startsWith(prefix));	0
5	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertEquals(expectedValue,getBranch());	0
6	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().endsWith(suffix));	0
7	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(condition);	0
8	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertFalse(getBranch().isEmpty());	0
9	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertNotEquals(unexpectedValue,getBranch());	0
0	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(isSelected());	0
1	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNull(getProperty(CIRCLE));	0
2	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotNull(getProperty(CIRCLE));	0
3	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertFalse(!isSelected());	0
4	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotEquals(false,isSelected());	0
5	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertEquals(true,isSelected());	0
0	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(isSelected());	0
1	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(null,getProperty(JENKINS_URL));	0
2	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotNull(getProperty(JENKINS_URL));	0
3	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotEquals(null,getProperty(JENKINS_URL));	0
4	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(true,isSelected());	0
5	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertEquals(null,getProperty(JENKINS_URL));	0
6	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(isSelected());	0
7	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(true,isSelected());	0
8	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(null,getProperty(JENKINS_URL));	0
9	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNull(getProperty(JENKINS_URL));	0
0	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected.toString(),actual.toString());	0
1	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
2	AboutTest	testGetExtensions	assertNotNull(actual);	assertNull(actual);	0
3	AboutTest	testGetExtensions	assertNotNull(actual);	assertFalse(expected.isEquals(actual));	0
4	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotSame(expected,actual);	0
5	AboutTest	testGetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
6	AboutTest	testGetExtensions	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
7	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
8	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual);	0
9	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(expected.isEquals(actual));	0
0	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertSame(statementRef,statementRef);	0
1	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(null,statementRef);	0
2	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	0
3	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	1
4	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(StatementReference.class,statementRef.getClass());	0
5	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotSame(id,statementRef.getId());	0
6	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertThrows(IllegalArgumentException.class,()->newStatementReference(null));	0
7	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(id,statementRef.getId());	0
8	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getId()));	0
9	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertArrayEquals(newObject[]{id},newObject[]{statementRef.getId()});	0
0	GroupTest	testSetMember	assertNotNull(actual);	"assertThrows(Exception.class,()->{
/*codethatshouldthrowanexception*/
});"	0
1	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	0
2	GroupTest	testSetMember	assertNotNull(actual);	assertThat(actual,Matchers.hasItem(expected));	0
3	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
4	GroupTest	testSetMember	assertNotNull(actual);	assertNotSame(expected,actual);	0
5	GroupTest	testSetMember	assertNotNull(actual);	assertSame(expected,actual);	0
6	GroupTest	testSetMember	assertNotNull(actual);	assertNull(actual);	0
7	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	1
8	GroupTest	testSetMember	assertNotNull(actual);	assertNotEquals(expected,actual);	0
9	GroupTest	testSetMember	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
0	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertThat(actual,CoreMatchers.is(expected));	0
1	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equalsIgnoreCase(actual));	0
2	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	1
3	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(expected.equals(actual));	0
4	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	0
5	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
6	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	0
7	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNull(actual);	0
8	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual);	0
9	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotEquals(expected,actual);	0
0	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(InteractionComponent.class,actual.get(0).getClass());	0
1	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.stream().anyMatch(comp->comp.getId().equals("STR")));	0
2	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(1,actual.size());	0
3	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.stream().anyMatch(Objects::isNull));	0
4	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.isEmpty());	0
5	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>0);	0
6	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotSame(expected,actual);	0
7	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.stream().anyMatch(comp->comp.getId().equals("STR")));	0
8	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual);	1
9	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
0	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
1	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
2	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
3	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
4	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl);	0
5	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
6	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
7	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertSame("STR",normalizedUrl);	0
8	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(newString[]{"STR"},normalizedUrl.split("STR")[1].split("STR"));	0
0	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	0
1	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
2	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(expectedResult.equals(normalizedUrl));	0
3	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	0
4	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testSourceUrl,sourceUrl);	0
5	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
6	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl);	0
7	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(expectedResult.equals(normalizedUrl));	0
8	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult.length(),normalizedUrl.length());	0
9	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
0	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(aXls.getURL(),newClassPathResource("STR").getURL());	0
1	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.exists());	0
2	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertThat(aXls.getFile().getName(),Matchers.startsWith("STR"));	0
3	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	0
4	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertSame(CodeListDocument.class,super.getBoundType());	0
5	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(o->newObjectFactory().createCodeList(o)instanceofCodeList);	0
6	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(aXls,newClassPathResource("STR"));	0
7	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(aXls,null);	0
8	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(CGenericode.GENERICODE_10_XSDS,super.getSchemaLocations());	0
9	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals("banana","orange"});	0
0	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getOpcode());	0
1	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertArrayEquals(newbyte[0],frame.getPayloadData());	0
2	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotEquals("STR",frame.getReason());	0
3	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotEquals(CloseFrame.CONTINUOUS,frame.getCode());	0
4	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotSame("STR",frame.getReason());	0
5	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertSame(Opcode.CLOSING,frame.getOpcode());	0
6	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertFalse(frame.getReason().isEmpty());	0
7	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotNull(frame.toString());	0
8	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.getCode()==CloseFrame.NORMAL);	0
9	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNull(frame.getCloseCode());	0
0	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
1	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertSame("STR",protocol0.getProvidedProtocol());	0
2	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
3	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().equals("STR"));	0
4	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
5	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
6	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertArrayEquals(newString[]{"STR"},newString[]{protocol0.getProvidedProtocol()});	0
7	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
8	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNull(protocol0.getProvidedProtocol());	0
0	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNull(client.removeHeader("STR"));	0
1	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertTrue(client.removeHeader("STR").isEmpty());	0
2	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotEquals("STR",client.removeHeader("STR"));	0
3	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotNull(client.removeHeader("STR"));	0
4	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertArrayEquals(httpHeaders.keySet().toArray(),client.removeHeader("STR").split("STR"));	0
5	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertSame(httpHeaders,client.headers);	0
6	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertFalse(client.removeHeader("STR").contains("STR"));	0
7	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotSame(httpHeaders,client.removeHeader("STR"));	0
8	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertEquals("STR",client.removeHeader("STR"));	1
0	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(1,2,3)).collect(Collectors.toSet()).containsAll(Arrays.asList(1,3)));	0
1	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(5,2,8,1)).sorted().collect(Collectors.toList()).equals(Arrays.asList(1,2,5,8)));	0
2	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(IterableToStream.stream(Arrays.asList(1,2,3)));	0
3	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(0,stream(newHashSet<>()).count());	0
4	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element>3));	0
5	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(10,(int)IterableToStream.stream(Arrays.asList(10,20,30)).findFirst().orElse(-1));	0
6	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element==4));	0
7	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(newArrayList<>()));	0
8	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(IterableToStream.stream(Arrays.asList(2,4,6)).allMatch(element->element%2==0));	0
9	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(IterableToStream.stream(Arrays.asList("STR","STR","STR")).count()>0);	0
0	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(null));	0
1	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(1,stream(Collections.singleton("STR").iterator()).count());	0
2	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.singleton("STR").iterator()).findFirst().isPresent());	0
3	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(Collections.emptyIterator()).findFirst().isPresent());	0
4	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2,3),stream(Arrays.asList(1,2,3).iterator()));	0
5	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(Collections.singleton("STR").iterator()).findFirst().orElse(null));	0
6	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.singleton("STR").iterator()).anyMatch(e->e.equals("STR")));	0
7	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.emptyIterator()).count()==0);	0
8	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.empty(),stream(Collections.emptyIterator()));	0
9	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(Collections.singleton("STR").iterator()).anyMatch(e->e.equals("STR")));	0
0	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(testServer.response.getBody().contains("STR"));	0
1	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertEquals("STR",contentEncoding.getValue());	0
2	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(httpclient.getConnectionManager()instanceofSingleClientConnManager);	0
3	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	0
4	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(testServer.response.getBody().contains("STR"));	0
5	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(httpclient.getConnectionManager()instanceofThreadSafeClientConnManager);	0
6	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(response.getStatusLine().getStatusCode()==404);	0
7	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(response.getStatusLine().getStatusCode()==200);	0
8	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNotEquals("STR",contentEncoding.getValue());	0
9	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNotNull(contentEncoding);	0
0	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.isEmpty());	0
1	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(result.contains("STR"));	0
2	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertArrayEquals("10"},result.toArray());	0
3	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertSame(options,result);	0
4	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	0
5	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotSame(options,result);	0
6	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(2,result.size());	0
7	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(Arrays.asList("STR"),result);	0
8	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertThat(result,IsIterableWithSize.iterableWithSize(2));	0
9	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(3,result.size());	0
0	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(KoreanPos.Noun,tokens.get(0).getPos());	0
1	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(3,tokens.size());	0
2	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(text.contains("STR"));	0
3	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	"assertDoesNotThrow(()->{
});"	0
4	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.stream().anyMatch(token->token.getText().equals("STR")));	0
5	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(5,tokens.size());	0
6	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	0
7	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>2);	0
8	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.get(1).getText());	0
9	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.stream().anyMatch(token->token.getText().equals("STR")));	0
0	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(userProcessor.isStarted());	0
1	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(loggerinstanceofLogger);	0
2	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.size()>=2);	0
3	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().iterator().next().isStarted());	0
4	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionManager);	0
5	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(connectionMonitorinstanceofConnectionMonitor);	0
6	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	0
7	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertSame(connectionManager,taskScanner);	0
8	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(shutdown());	0
9	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionMonitor);	0
10	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(logger.hasWarning());	0
0	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getDefaultTopicQueueNum()>0);	0
1	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getMaxMessageSize()>0);	0
2	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(!getProducer().getInstanceName().isEmpty());	0
3	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getSendMsgTimeout()>0);	0
4	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getCompressMsgBodyOverHowmuch()<=1024);	0
5	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getRetryTimesWhenSendFailed()<=5);	0
6	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(getProducer());	0
7	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(TEST_NAME_SERVER,getProducer().getNameServerAddress());	0
8	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(TEST_PRODUCER_GROUP,getProducer().getProducerGroup());	0
9	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(ServiceState.RUNNING,getProducer().getServiceState());	0
0	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertSame(tempTextFile,configFile);	0
1	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0
2	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
3	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNull(configFile);	0
4	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile,configFile);	0
5	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	0
6	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
7	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.exists());	0
8	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertArrayEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	0
9	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
8	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertArrayEquals(newString[]{SHAPE,LABEL});	0
0	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertFalse(zigzag.contains(10));	0
1	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotEquals(5,zigzag.size());	0
2	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertEquals(0,zigzag.size());	0
3	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(zigzag.contains(4));	0
4	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(zigzaginstanceofZigzag);	0
5	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotNull(zigzag);	0
6	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotSame(zigzag1,zigzag2);	0
7	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertFalse(zigzag.isEmpty());	0
8	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertArrayEquals(2,3});	0
0	OPLogTest	testDescription	assertEquals("STR",value);	assertArrayEquals(expectedArray,actualArray);	0
1	OPLogTest	testDescription	assertEquals("STR",value);	assertThat(value,CoreMatchers.is(expectedValue));	0
2	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(condition);	0
3	OPLogTest	testDescription	assertEquals("STR",value);	assertNull(object);	0
4	OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(condition);	0
5	OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(expectedObject,actualObject);	0
6	OPLogTest	testDescription	assertEquals("STR",value);	assertSame(expectedObject,actualObject);	0
7	OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR","STR");	0
8	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR","STR");	0
9	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(object);	0
0	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotEquals("STR",obj.getName());	0
1	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertFalse(map.isEmpty());	0
2	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertTrue(paramsMap.size()>0);	0
3	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNull(obj.getEmail());	0
4	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertArrayEquals(newObject[]{"STR","STR","STR","STR"},paramsMap.keySet().toArray());	0
5	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertSame(TestVo.class,obj.getClass());	0
6	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals("STR",obj.getAddr());	0
7	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertTrue(map.containsKey("STR"));	0
8	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(21,obj.getAge());	1
9	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	0
0	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNull(someObject);	0
1	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(value>=min&&value<=max);	0
2	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someBooleanValue);	0
3	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(someBooleanValue);	0
4	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotEquals(expectedObject,actualObject);	0
5	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(someObject);	0
6	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(expectedObject,actualObject);	0
7	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someCondition);	0
8	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertArrayEquals(expectedArray,actualArray);	0
0	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(1,btUrl.getProtocol());	0
1	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getSerializeType());	0
2	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getIp());	0
3	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotSame(parser,null);	0
4	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertTrue(url.contains("STR"));	0
5	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals(btUrl,null);	0
6	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertFalse(url.isEmpty());	0
7	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(3000,btUrl.getTimeout());	0
8	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(2000,btUrl.getConnectTimeout());	0
9	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	0
0	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	0
1	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(processorManager.getDefaultProcessor(),processorManager.getProcessor(null));	0
2	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
3	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getDefaultProcessor());	0
4	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd1)instanceofRpcRequestProcessor);	0
6	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd1));	0
7	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd2));	0
8	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor2,processorManager.getProcessor(cmd2));	0
9	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	0
0	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.SUCCESS);	0
1	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertArrayEquals(newbyte[]{1,1,0,0},response.getStatus().toByteArray());	0
2	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.ERROR,response.getStatus());	0
3	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.TOO_MANY_REQUESTS,response.getStatus());	0
4	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotNull(response.getStatus());	0
5	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.OUTPUT,response.getStatus());	0
6	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
7	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNull(response.getError());	0
8	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertSame(ResponseStatus.NO_SUCH_CLIENT,response.getStatus());	0
9	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.REPLAYED_OTP);	0
0	YubicoClientTest	testBadOTP	assertNotNull(response);	assertArrayEquals(0x02,0x03});	0
1	YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.isSuccess());	0
2	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	0
3	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNull(response.getErrorMessage());	0
4	YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals("STR",response.getStatus());	0
5	YubicoClientTest	testBadOTP	assertNotNull(response);	assertSame(client,response.getClient());	0
6	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(null,response.getRequest());	0
7	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	0
8	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	0
9	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isRetryable());	0
0	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertFalse(expected.isEmpty());	0
1	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotSame(expected,actual);	0
2	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
3	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotNull(actual);	1
4	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
5	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
6	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	0
7	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
8	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNull(actual);	0
9	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected,actual);	0
0	ScoreTest	testSerialize	assertNotNull(actual);	assertNull(actual.getAsJsonObject().get("STR"));	0
1	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
2	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MAX,actual.getAsJsonObject().get("STR").getAsInt());	0
3	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(RAW,actual.getAsJsonObject().get("STR").getAsInt());	0
4	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MIN,actual.getAsJsonObject().get("STR").getAsInt());	0
5	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(0,actual.getAsJsonObject().entrySet().size());	0
6	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
7	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(SCALED,actual.getAsJsonObject().get("STR").getAsInt());	0
8	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actualinstanceofJsonObject);	0
0	VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(expected.containsKey("STR"));	0
1	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.isEmpty());	0
2	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotSame(expected,actual);	0
3	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
4	VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	0
5	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
6	VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	0
7	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	0
8	VerbTest	testSetDisplay	assertNotNull(actual);	assertNull(actual);	0
9	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected,actual);	0
0	StatementTest	testGetId	assertNotNull(actual);	assertTrue(condition);	0
1	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	0
2	StatementTest	testGetId	assertNotNull(actual);	assertFalse(condition);	0
3	StatementTest	testGetId	assertNotNull(actual);	assertNull(object);	0
4	StatementTest	testGetId	assertNotNull(actual);	assertNotSame(expected,actual);	0
5	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.containsString(expected));	0
6	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.is(expected));	0
7	StatementTest	testGetId	assertNotNull(actual);	assertSame(expected,actual);	0
8	StatementTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
9	StatementTest	testGetId	assertNotNull(actual);	assertNotNull(object);	0
0	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertTrue(frame.isFin());	0
1	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotNull(frame.isFin());	0
2	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertSame(true,frame.isFin());	0
3	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertEquals(true,frame.isFin());	0
4	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertArrayEquals(newboolean[]{true},newboolean[]{frame.isFin()});	0
5	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotEquals(false,frame.isFin());	0
6	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotEquals(true,frame.isFin());	0
7	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertFalse(frame.isFin());	0
8	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNull(frame.isFin());	0
9	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotSame(false,frame.isFin());	0
0	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
1	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
2	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertArrayEquals(newODocument[0],qResult.toArray());	0
3	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals("STR",qResult.get(0).field("STR"));	0
4	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
5	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.get(0).field("STR"));	0
6	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
7	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertSame(qResult,db.command(newOCommandSQL("STR")).execute());	0
8	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
9	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotSame(db.command(newOCommandSQL("STR")).execute(),qResult);	0
0	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertTrue(names.contains("STR"));	1
1	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotNull(names);	0
2	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotEquals(2,names.size());	0
3	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertArrayEquals("foo.bar",""});	0
4	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertFalse(names.contains("STR"));	0
5	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNull(names);	0
6	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertEquals(3,names.size());	0
7	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotEquals(4,names.size());	0
0	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertTrue(condition);	0
1	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertEquals("STR",value);	0
2	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertFalse(condition);	0
3	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertThat(actualValue,Matchers.equalTo(expectedValue));	0
4	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertSame(expectedObject,actualObject);	0
5	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotEquals("STR",value);	0
6	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotNull(value);	0
7	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotSame(notExpectedObject,actualObject);	0
8	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertArrayEquals(expectedArray,actualArray);	0
0	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(ddl.contains("STR"));	0
1	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.startsWith("STR"));	0
2	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith(indexType+"STR"));	0
3	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertNotNull(ddl);	0
4	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith(className+"STR"));	0
5	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains(indexName));	0
6	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith("STR"));	0
7	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains("STR"+field+"STR"));	0
8	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains("STR"));	0
9	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(ddl.isEmpty());	0
0	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue(v>0.0f);	0
1	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotSame(OBJECT,v);	0
2	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertSame(OBJECT,v);	0
3	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	0
4	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(floatSerializer,v);	0
5	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertFalse(v<=0.0f);	0
6	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(3.14f,v);	0
7	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertArrayEquals(newfloat[]{1.0f,2.0f,3.0f},newfloat[]{1.0f,2.0f,3.0f});	0
8	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNull(v);	0
9	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	1
0	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{});	0
1	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0
2	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
3	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
4	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	0
5	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
6	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertSame(Boolean.FALSE,doc.isDirty());	0
7	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotSame(Boolean.TRUE,doc.isDirty());	0
8	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
0	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(db.existsClass("STR"));	0
1	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.hasNext());	0
2	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNull(r.current());	0
3	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(4,db.countClass("STR"));	0
4	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(db.newInstance());	0
5	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(db.isClosed());	0
6	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.hasNext());	0
7	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals("STR",r.get(0).field("STR"));	0
8	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertSame(OLegacyResultSet.class,r.getClass());	0
9	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(3,r.size());	0
0	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.containsKey("STR"));	0
1	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",env.get("STR"));	0
2	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.get("STR").startsWith("STR"));	0
3	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.get("STR").endsWith("STR"));	0
4	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env.get("STR"));	0
5	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.get("STR").isEmpty());	0
6	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("STR"));	0
7	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env);	0
0	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertSame(CIEnvironment.class,ci.getClass());	0
1	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(0,env.size());	0
2	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(env.isEmpty());	0
3	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(ci);	0
4	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(0,env.size());	0
5	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotNull(ci);	0
6	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotSame(CIEnvironment.class,ci.getClass());	0
7	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(newString[]{},env.keySet().toArray());	0
8	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertArrayEquals(newString[]{},env.keySet().toArray());	0
9	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(env.isEmpty());	0
0	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
1	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertArrayEquals(yaml.toCharArray(),config.toYaml("STR").toCharArray());	0
2	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertSame(yaml,config.toYaml("STR"));	0
3	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertThat(config.toYaml("STR"),CoreMatchers.containsStringIgnoringCase("STR"));	0
4	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertEquals(yaml,config.toYaml("STR"));	1
5	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
6	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotSame("STR",config.toYaml("STR"));	0
7	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
8	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNull(null);	0
9	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
0	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertArrayEquals(newObject[]{"STR"},newObject[]{factory.getDsn()});	0
1	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertTrue(factory.getDsn().startsWith("STR"));	0
2	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotNull(factory.getDsn());	0
3	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotEquals("STR",factory.getDsn());	0
4	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertFalse(factory.getDsn().isEmpty());	0
5	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertThat(factory.getDsn(),CoreMatchers.containsString("STR"));	0
6	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertEquals("STR",factory.getDsn());	0
7	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertSame("STR",factory.getDsn());	0
8	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotSame("STR",factory.getDsn());	0
9	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNull(factory.getDsn());	0
0	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	0
1	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(AEquality.IDENTITY,map.getEquality());	0
2	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.values().isEmpty());	0
3	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertSame(key1,key3);	0
4	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key2);	0
5	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.isEmpty());	0
6	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertFalse(map.containsKey(key2));	0
7	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map);	0
8	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(mapinstanceofAHashMap);	0
9	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size());	0
0	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotSame(coll,result);	0
1	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.isEmpty());	0
2	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(result.isEmpty());	0
3	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.hasSize(expectedSize));	0
4	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result);	0
5	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNull(result);	0
6	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedSize,result.size());	0
7	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.anyOf(Matchers.empty(),Matchers.hasSize(expectedSize)));	0
8	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertSame(coll,result);	0
9	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(unexpectedSize,result.size());	0
0	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(a.equals(b));	0
1	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(a,b);	0
2	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(a.getCells(),b.getCells());	0
3	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(a,b);	0
4	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertSame(a,b);	0
5	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNull(b);	0
6	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	1
7	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	"assertThrows(Exception.class,()->{
???;
});"	0
8	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	0
9	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a);	0
0	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	0
1	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	0
2	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
3	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(false,matcher.lookingAt());	0
4	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(true,matcher.lookingAt());	0
5	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	0
6	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	0
7	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(true,matcher.lookingAt());	0
8	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
9	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	0
0	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.isRecognized());	0
1	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk.isRecognized());	0
2	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(false,jāmāk.isRecognized());	0
3	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(true,jāmāk.isRecognized());	0
4	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(false,jāmāk.isRecognized());	0
5	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNull(jāmāk);	0
6	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(true,jāmāk.isRecognized());	0
7	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	1
8	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	0
9	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertArrayEquals(newboolean[]{true},newboolean[]{jāmāk.isRecognized()});	0
0	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	0
1	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
2	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	0
3	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	0
4	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertArrayEquals(expectedArray,resultArray);	0
5	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotSame(obj1,obj2);	0
6	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	0
7	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertSame(obj1,obj1);	0
8	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNull(null);	0
9	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(expected,actual);	0
0	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(fetcher.fetchResource("STR",System.currentTimeMillis()));	0
1	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(resource);	0
2	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertTrue(file.lastModified()>ifModifiedSince);	0
3	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(file.lastModified()>ifModifiedSince);	0
4	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertEquals("STR",resource.getFile());	0
5	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotEquals("STR",resource.getFile());	0
6	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(file.exists());	0
7	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertTrue(file.exists());	0
8	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(resource);	0
9	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(fetcher.fetchResource("STR",System.currentTimeMillis()));	0
0	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
1	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	0
2	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals("STR",System.getProperty(Config.FLUENT_SENDER_CLASS));	0
3	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals(FluentLogger.getLogger("STR"),logger);	0
4	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.hasTag("STR"));	0
5	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getFactory());	0
6	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotSame(logger,FluentLogger.getLogger("STR"));	0
7	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.hasTag("STR"));	0
8	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals("STR",logger.getTag());	0
9	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertSame(sysLogger,logger.getLogger());	0
0	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(testTarget001,testTarget003);	0
1	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(true);	0
2	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertFalse(false);	0
3	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(5,2+3);	0
4	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(testTarget001);	0
5	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(testTarget001,testTarget002);	0
6	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals(parameterReplacer,testTarget001.getParameterReplacer());	0
7	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals("STR","STR");	0
8	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertThrows(NullPointerException.class,()->testTarget001.getParameterReplacer().doSomething());	0
9	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(mockLog);	0
7	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNull(null);	0
0	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotSame(methods.get(0),methods.iterator().next());	0
1	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(methods.get(0));	0
2	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertSame(methods.get(0),methods.iterator().next());	0
3	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertTrue(methods.size()==0);	0
4	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertEquals(1,methods.size());	0
5	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotEquals(0,methods.size());	0
6	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotEquals(format("STR",clazz.getName(),annotationClazz.getName()),newReflectionException().getMessage());	0
7	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNull(methods.get(0));	0
8	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertFalse(methods.size()==0);	0
0	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(object,"STR","STR"));	0
1	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertEquals(true,bind0(object,"STR","STR"));	0
2	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNull(bind0(object,"STR","STR"));	0
3	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertSame(expectedObject,bind0(object,"STR","STR"));	0
4	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	0
5	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotSame(unexpectedObject,bind0(object,"STR","STR"));	0
6	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertTrue(bind0(object,"STR","STR"));	0
7	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertThat(bind0(object,"STR","STR"),CoreMatchers.is(true));	0
8	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotNull(bind0(object,"STR","STR"));	0
9	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotEquals(false,bind0(object,"STR","STR"));	0
0	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor,newBasicExtractor(config));	0
1	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(extractor,extractor);	0
2	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
3	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	0
4	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.hashCode(),newBasicExtractor(config).hashCode());	0
5	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
6	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0
7	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newCachedExtractor(extractor,config));	0
8	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.getClass(),CachedExtractor.class);	0
9	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newExtractorFactory(builder.build()).getNewInstance());	0
0	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(3).getValue());	0
1	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotEquals("STR",testServer.cookiesToSend.get(0).getValue());	0
2	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(1).getValue());	0
3	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(0).getValue());	0
4	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	0
5	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(testServer.cookiesToSend.size()==4);	0
6	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(2).getValue());	0
7	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotSame(testServer,httpclient);	0
8	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(testServer);	0
9	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(httpclient);	0
0	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties.getProperty("STR"));	0
1	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.getProperty("STR").startsWith("STR"));	0
2	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNull(properties.getProperty("STR"));	0
3	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
4	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.getProperty("STR").contains("STR"));	0
5	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
7	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertNull(nullNameVariable);	0
0	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotEquals("STR",accessToken.getSomeValue());	0
1	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertEquals("STR",accessToken.getSomeValue());	0
2	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotNull(accessToken);	0
3	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotSame(expectedObject,actualObject);	0
4	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertSame(expectedObject,actualObject);	0
5	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNull(accessToken);	0
6	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotEquals(expectedArray,actualArray);	0
7	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertFalse(accessToken.isExpired());	0
8	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertTrue(accessToken.isExpired());	0
9	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertArrayEquals(expectedArray,actualArray);	0
0	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(collection.contains(element));	0
1	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value<otherValue);	0
2	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(condition);	0
3	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(condition);	0
4	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotSame(object1,object2);	0
5	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedObject,actualObject);	0
6	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value>otherValue);	0
7	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedString.toLowerCase(),actualString.toLowerCase());	0
8	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(object);	0
0	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown("STR"));	0
1	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	0
2	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown(null));	0
3	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue(m.markdown("STR").endsWith("STR"));	0
4	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals(m.markdown("STR"),m.markdown("STR"));	0
5	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotSame(text,markdown("STR"));	0
6	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse(m.markdown("STR").isEmpty());	0
7	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals("STR",m.markdown("STR"));	0
8	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertThrows(NullPointerException.class,()->markdown(null));	0
0	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR"},node.getPath().split("STR"));	0
1	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	0
2	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
3	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
4	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals("STR",node.getPath());	0
5	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertSame("STR",node.getPath());	0
6	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().startsWith("STR"));	0
7	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(19,node.getPath().length());	0
8	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertThrows(NullPointerException.class,()->node.getPath().toLowerCase());	0
9	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().endsWith("STR"));	0
0	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotNull(execs.getAppName());	0
1	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertFalse(execs.getAppName().isEmpty());	0
2	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotSame(unexpectedAppName,execs.getAppName());	0
3	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNull(execs.getAppName());	0
4	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertSame(expectedAppName,execs.getAppName());	0
5	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertArrayEquals(expectedAppNameArray,execs.getAppName().toCharArray());	0
6	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertTrue(execs.getAppName().length()>0);	0
7	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName());	1
8	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotEquals("STR",execs.getAppName());	0
0	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(0,convertToBytes(4)[0]);	0
1	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.toString(convertToBytes(8)));	0
2	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(8,convertToBytes(2).length);	0
3	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(Arrays.equals(convertToBytes(6),newbyte[]{0x00}));	0
4	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x09,0x09});	0
5	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},convertToBytes(1));	0
6	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(-1,convertToBytes(9).length);	0
7	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.equals(convertToBytes(3),newbyte[]{0x03,0x00,0x00,0x00}));	0
8	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertSame(byte[].class,convertToBytes(5).getClass());	0
9	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(0x00,convertToBytes(7)[0]);	0