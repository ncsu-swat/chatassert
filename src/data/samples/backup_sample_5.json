{
    "projects": [
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testValidOTPPublicId",
                            "startLn": 216,
                            "endLn": 222,
                            "testMethod": "@Test\n public void testValidOTPPublicId ( ) {\n     String testOtp = \"STR\" ; \n     String testPublicId = \"STR\" ; \n     String resultPublicId = YubicoClient . getPublicId ( testOtp ) ; \n     assertEquals(testPublicId,resultPublicId);\n}",
                            "oracle": "assertEquals(testPublicId,resultPublicId);",
                            "oracleLn": 221,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "getPublicId",
                            "focalStartLn": 197,
                            "focalEndLn": 210,
                            "focalMethod": " public static String getPublicId ( String otp ) { \n if ( ( otp == null ) || ( otp . length ( ) < OTP_MIN_LEN ) ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Integer len = otp . length ( ) ; \n return otp . substring ( 0 , len - 32 ) . toLowerCase ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OCopyDatabaseChunkTaskTest",
                    "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OCopyDatabaseChunkTaskTest.java",
                    "subRepo": "distributed",
                    "classTests": [
                        {
                            "testName": "testSerialization",
                            "startLn": 12,
                            "endLn": 22,
                            "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     OCopyDatabaseChunkTask from = new OCopyDatabaseChunkTask ( \"STR\" , 10 , 20L , false ) ; \n     OCopyDatabaseChunkTask to = new OCopyDatabaseChunkTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getFileName(),to.getFileName());\n}",
                            "oracle": "Assert.assertEquals(from.getFileName(),to.getFileName());",
                            "oracleLn": 17,
                            "focalFile": "distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OCopyDatabaseChunkTask.java",
                            "focalName": "getFileName",
                            "focalStartLn": 127,
                            "focalEndLn": 129,
                            "focalMethod": " public String getFileName ( ) { \n return fileName ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventUpdateKey",
                            "startLn": 414,
                            "endLn": 424,
                            "testMethod": "@Test\n public void testProcessChangeEventUpdateKey ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , Integer > multiValueChangeEvent = new OMultiValueChangeEvent < String , Integer > ( OMultiValueChangeEvent . OChangeType . UPDATE , \"STR\" , 42 ) ; \n     propertyIndexByKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     Assert.assertTrue(keysToAdd.isEmpty());\n}",
                            "oracle": "Assert.assertTrue(keysToAdd.isEmpty());",
                            "oracleLn": 420,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 142,
                            "focalEndLn": 152,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessBinarySerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createSerializer",
                        "startLn": 67,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void createSerializer ( ) { \n if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) ) serializer = new ORecordSerializerNetwork ( ) ; \n else if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) + 1 ) serializer = new ORecordSerializerNetworkV37 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testArrayOfArray",
                            "startLn": 553,
                            "endLn": 573,
                            "testMethod": "@Test\n public void testArrayOfArray ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     String [ ] [ ] array = new String [ 1 ] [ ] ; \n     String [ ] ls = new String [ 2 ] ; \n     ls [ 0 ] = \"STR\" ; \n     ls [ 1 ] = \"STR\" ; \n     array [ 0 ] = ls ; \n     document . field ( \"STR\" , array ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 565,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNewRid",
                            "startLn": 3219,
                            "endLn": 3231,
                            "testMethod": "@Test\n public void testNewRid ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3222,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProjection2",
                            "startLn": 378,
                            "endLn": 386,
                            "testMethod": "@Test\n public void testProjection2 ( ) {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OrientDBRemoteTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/core/db/OrientDBRemoteTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 37,
                        "endLn": 47,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . SERVER_BACKWARD_COMPATIBILITY . setValue ( false ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getClassLoader ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n factory = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testListDatabases",
                            "startLn": 122,
                            "endLn": 129,
                            "testMethod": "@Test\n public void testListDatabases ( ) {\n     assertEquals(factory.list().size(),0);\n}",
                            "oracle": "assertEquals(factory.list().size(),0);",
                            "oracleLn": 124,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/OrientDB.java",
                            "focalName": "list",
                            "focalStartLn": 283,
                            "focalEndLn": 285,
                            "focalMethod": " public List < String > list ( ) { \n return new ArrayList < > ( this . internal . listDatabases ( serverUser , serverPassword ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OrientJdbcResultSetTest",
                    "classPath": "jdbc/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSetTest.java",
                    "subRepo": "jdbc",
                    "before": {
                        "setupName": "prepareDatabase",
                        "startLn": 47,
                        "endLn": 73,
                        "setupMethod": "@Before\n public void prepareDatabase ( ) throws Exception { \n String dbName = name . getMethodName ( ) ; \n Properties info = new Properties ( ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n info . put ( \"STR\" , \"STR\" ) ; \n OrientDataSource ods = new OrientDataSource ( \"STR\" + \"STR\" + dbName , \"STR\" , \"STR\" , info ) ; \n ds = new DataSourceWithLetterCase ( ods , LetterCase . TABLE_DEFAULT , LetterCase . TABLE_DEFAULT , LetterCase . TABLE_DEFAULT ) ; \n conn = ( OrientJdbcConnection ) ds . getConnection ( ) ; \n orientDB = conn . getOrientDB ( ) ; \n db = ( ( OrientJdbcConnection ) ds . getConnection ( ) ) . getDatabase ( ) ; \n createSchemaDB ( db ) ; \n if ( ! new File ( \"STR\" ) . exists ( ) ) OLogManager . instance ( ) . warn ( this , \"STR\" ) ; \n loadDB ( db , 20 ) ; \n db . close ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldReturnEmptyResultSet",
                            "startLn": 58,
                            "endLn": 64,
                            "testMethod": "@Test\n public void shouldReturnEmptyResultSet ( ) throws Exception {\n     ResultSet rs = conn . createStatement ( ) . executeQuery ( \"STR\" ) ; \n     assertThat(rs.next()).isFalse();\n}",
                            "oracle": "assertThat(rs.next()).isFalse();",
                            "oracleLn": 61,
                            "focalFile": "jdbc/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java",
                            "focalName": "createStatement",
                            "focalStartLn": 86,
                            "focalEndLn": 89,
                            "focalMethod": " public Statement createStatement ( ) throws SQLException { \n return new OrientJdbcStatement ( this ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 21,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n compositeIndex = new OCompositeIndexDefinition ( \"STR\" ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueSuccessful",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testCreateValueSuccessful ( ) {\n     final Object result = compositeIndex . createValue ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n     Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));\n}",
                            "oracle": "Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));",
                            "oracleLn": 41,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testCreateValueDefinitionsMoreThanParams",
                            "startLn": 264,
                            "endLn": 270,
                            "testMethod": "@Test\n public void testCreateValueDefinitionsMoreThanParams ( ) {\n     compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n     final Object result = compositeIndex . createValue ( \"STR\" , \"STR\" ) ; \n     Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));\n}",
                            "oracle": "Assert.assertEquals(result,newOCompositeKey(Arrays.asList(12,\"STR\")));",
                            "oracleLn": 268,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testDocumentToIndexRidBagValueSuccessfulThree",
                            "startLn": 513,
                            "endLn": 542,
                            "testMethod": "@Test\n public void testDocumentToIndexRidBagValueSuccessfulThree ( ) {\n     final ODocument document = new ODocument ( ) ; \n     final ORidBag ridBag = new ORidBag ( ) ; \n     ridBag . setAutoConvertToRecord ( false ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     ridBag . add ( new ORecordId ( \"STR\" ) ) ; \n     document . field ( \"STR\" , 12 ) ; \n     document . field ( \"STR\" , ridBag ) ; \n     document . field ( \"STR\" , \"STR\" ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyRidBagIndexDefinition ( \"STR\" , \"STR\" ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     final ArrayList < OCompositeKey > expectedResult = new ArrayList < OCompositeKey > ( ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , new ORecordId ( \"STR\" ) , \"STR\" ) ) ; \n     Assert.assertEquals(result,expectedResult);\n}",
                            "oracle": "Assert.assertEquals(result,expectedResult);",
                            "oracleLn": 533,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODirtyManagerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testEmbeddedDocument",
                            "startLn": 32,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testEmbeddedDocument ( ) {\n     ODocument doc = new ODocument ( ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc1 , OType . EMBEDDED ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc1 . field ( \"STR\" , doc2 ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(2,manager.getNewRecords().size());",
                            "oracleLn": 40,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCompareToPartiallySecondCase",
                            "startLn": 118,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testCompareToPartiallySecondCase ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertEquals(compositeKey.compareTo(anotherCompositeKey),0);\n}",
                            "oracle": "assertEquals(compositeKey.compareTo(anotherCompositeKey),0);",
                            "oracleLn": 127,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "compareTo",
                            "focalStartLn": 107,
                            "focalEndLn": 133,
                            "focalMethod": " public int compareTo ( final OCompositeKey otherKey ) { \n final Iterator < Object > inIter = keys . iterator ( ) ; \n final Iterator < Object > outIter = otherKey . keys . iterator ( ) ; \n while ( inIter . hasNext ( ) && outIter . hasNext ( ) ) { \n final Object inKey = inIter . next ( ) ; \n final Object outKey = outIter . next ( ) ; \n if ( outKey instanceof OAlwaysGreaterKey ) return - 1 ; \n if ( outKey instanceof OAlwaysLessKey ) return 1 ; \n if ( inKey instanceof OAlwaysGreaterKey ) return 1 ; \n if ( inKey instanceof OAlwaysLessKey ) return - 1 ; \n final int result = comparator . compare ( inKey , outKey ) ; \n if ( result != 0 ) return result ; \n } return 0 ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialDistanceSphereTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialDistanceSphereTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithinIndex",
                            "startLn": 58,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testWithinIndex ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(2,execute.size());\n}",
                            "oracle": "Assert.assertEquals(2,execute.size());",
                            "oracleLn": 67,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCreatePropertyStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIfNotExists",
                            "startLn": 285,
                            "endLn": 305,
                            "testMethod": "@Test\n public void testIfNotExists ( ) throws Exception {\n     db . command ( \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" ) . close ( ) ; \n     OClass clazz = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = clazz . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 291,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "DoubleSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/DoubleSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n doubleSerializer = new ODoubleSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNativeDirectMemoryCompatibility",
                            "startLn": 61,
                            "endLn": 70,
                            "testMethod": "@Test\n public void testNativeDirectMemoryCompatibility ( ) {\n     doubleSerializer . serializeNative ( OBJECT , stream , 0 ) ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( stream . length ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     buffer . put ( stream ) ; \n     buffer . position ( 0 ) ; \n     Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);\n}",
                            "oracle": "Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer),OBJECT);",
                            "oracleLn": 67,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/ODoubleSerializer.java",
                            "focalName": "deserializeFromByteBufferObject",
                            "focalStartLn": 111,
                            "focalEndLn": 114,
                            "focalMethod": "@Override\n public Double deserializeFromByteBufferObject ( ByteBuffer buffer ) { \n return Double . longBitsToDouble ( buffer . getLong ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialDropTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialDropTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 44,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n dbName = \"STR\" + this . getClass ( ) . getSimpleName ( ) ; \n insertcount = 100 ; \n ODatabaseDocumentTx db = new ODatabaseDocumentTx ( dbName ) ; \n db . create ( ) ; \n OClass test = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n test . createProperty ( \"STR\" , OType . STRING ) ; \n test . createProperty ( \"STR\" , OType . DOUBLE ) . setMandatory ( false ) ; \n test . createProperty ( \"STR\" , OType . DOUBLE ) . setMandatory ( false ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . close ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDeleteLuceneIndex1",
                            "startLn": 46,
                            "endLn": 71,
                            "testMethod": "@Test\n public void testDeleteLuceneIndex1 ( ) {\n     OPartitionedDatabasePool dbPool = new OPartitionedDatabasePool ( dbName , \"STR\" , \"STR\" ) ; \n     ODatabaseDocumentTx db = dbPool . acquire ( ) ; \n     fillDb ( db , insertcount ) ; \n     db . close ( ) ; \n     db = dbPool . acquire ( ) ; \n     OSQLSynchQuery < ODocument > query = new OSQLSynchQuery < ODocument > ( \"STR\" ) ; \n     List < ODocument > result = db . command ( query ) . execute ( ) ; \n     Assert.assertEquals(insertcount,result.size());\n}",
                            "oracle": "Assert.assertEquals(insertcount,result.size());",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneMiscTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMiscTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUnderscoreField",
                            "startLn": 149,
                            "endLn": 166,
                            "testMethod": "@Test\n public void testUnderscoreField ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OSQLSynchQuery query = new OSQLSynchQuery ( \"STR\" ) ; \n     Map params = new HashMap ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     List results = db . command ( query ) . execute ( params ) ; \n     Assert.assertEquals(results.size(),1);\n}",
                            "oracle": "Assert.assertEquals(results.size(),1);",
                            "oracleLn": 159,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AboutTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AboutTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n about = new About ( ) ; \n ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n String expected = \"STR\" ; \n versionInput . add ( expected ) ; \n about . setVersion ( versionInput ) ; \n JsonObject extension = new JsonObject ( ) ; \n extension . addProperty ( \"STR\" , \"STR\" ) ; \n about . setExtensions ( extension ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetVersion",
                            "startLn": 56,
                            "endLn": 66,
                            "testMethod": "@Test\n public void testSetVersion ( ) {\n     ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n     String expected = \"STR\" ; \n     versionInput . add ( expected ) ; \n     about . setVersion ( versionInput ) ; \n     ArrayList < String > version = about . getVersion ( ) ; \n     assertNotNull(version);\n}",
                            "oracle": "assertNotNull(version);",
                            "oracleLn": 63,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java",
                            "focalName": "getVersion",
                            "focalStartLn": 14,
                            "focalEndLn": 16,
                            "focalMethod": " public ArrayList < String > getVersion ( ) { \n return version ; \n } "
                        }
                    ]
                },
                {
                    "className": "ContextTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContextTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetRevision",
                            "startLn": 126,
                            "endLn": 134,
                            "testMethod": "@Test\n public void testGetRevision ( ) {\n     String expected = UUID . randomUUID ( ) . toString ( ) ; \n     Context c = new Context ( ) ; \n     c . setRevision ( expected ) ; \n     String actual = c . getRevision ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 132,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Context.java",
                            "focalName": "getRevision",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public String getRevision ( ) { \n return revision ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbsTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAnswered",
                            "startLn": 13,
                            "endLn": 18,
                            "testMethod": "@Test\n public void testAnswered ( ) {\n     Verb actual = Verbs . answered ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 16,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "answered",
                            "focalStartLn": 16,
                            "focalEndLn": 18,
                            "focalMethod": " public static Verb answered ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetId",
                            "startLn": 217,
                            "endLn": 224,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = ID ; \n     statement . setId ( expected ) ; \n     String actual = statement . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 222,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getId",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScoreTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ScoreTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 23,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n score = new Score ( ) ; \n score . setMax ( MAX ) ; \n score . setMin ( MIN ) ; \n score . setRaw ( RAW ) ; \n score . setScaled ( SCALED ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerialize",
                            "startLn": 97,
                            "endLn": 107,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     JsonElement actual = score . serialize ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 100,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "serialize",
                            "focalStartLn": 37,
                            "focalEndLn": 44,
                            "focalMethod": " public JsonElement serialize ( ) { \n JsonObject obj = new JsonObject ( ) ; \n obj . addProperty ( \"STR\" , this . scaled ) ; \n obj . addProperty ( \"STR\" , this . raw ) ; \n obj . addProperty ( \"STR\" , this . min ) ; \n obj . addProperty ( \"STR\" , this . max ) ; \n return obj ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "xmlet",
            "repoName": "XsdParser",
            "subRepos": [],
            "commitSHA": "8dce9914aac46eea527f6c773a753175e93ad709",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "IssuesTest",
                    "classPath": "src/test/java/org/xmlet/xsdparser/IssuesTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIssue27Attributes",
                            "startLn": 322,
                            "endLn": 359,
                            "testMethod": "@Test\n public void testIssue27Attributes ( ) {\n     XsdParser parser = new XsdParser ( getFilePath ( \"STR\" ) ) ; \n     List < XsdSchema > schemas = parser . getResultXsdSchemas ( ) . collect ( Collectors . toList ( ) ) ; \n     Assert.assertEquals(1,schemas.size());\n}",
                            "oracle": "Assert.assertEquals(1,schemas.size());",
                            "oracleLn": 326,
                            "focalFile": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java",
                            "focalName": "getResultXsdSchemas",
                            "focalStartLn": 413,
                            "focalEndLn": 420,
                            "focalMethod": " public Stream < XsdSchema > getResultXsdSchemas ( ) { \n return parseElements . values ( ) . stream ( ) . flatMap ( List :: stream ) . filter ( element -> element . getElement ( ) instanceof XsdSchema ) . map ( element -> ( XsdSchema ) element . getElement ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "WorkerQueryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n list = new LinkedList < WorkerData > ( ) ; \n agent1 = agentAddress ( 1 ) ; \n agent2 = agentAddress ( 2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "workerAddresses",
                            "startLn": 148,
                            "endLn": 159,
                            "testMethod": "@Test\n public void workerAddresses ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent2 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent2 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setWorkerAddresses ( asList ( list . get ( 0 ) . getAddress ( ) . toString ( ) , list . get ( 2 ) . getAddress ( ) . toString ( ) ) ) . execute ( list ) ; \n     assertEquals(asList(list.get(0),list.get(2)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(0),list.get(2)),result);",
                            "oracleLn": 155,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "TestContainer_BasicTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n ExceptionReporter . reset ( ) ; \n userDir = setupFakeUserDir ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass",
                            "startLn": 97,
                            "endLn": 112,
                            "testMethod": "@Test\n public void testAnnotationInheritance_withSetupInBaseClass_withRunInChildClass ( ) throws Exception {\n     ChildWithOwnRunMethodTest test = new ChildWithOwnRunMethodTest ( ) ; \n     testContainer = createTestContainer ( test ) ; \n     testContainer . invoke ( TestPhase . SETUP ) ; \n     testContainer . invoke ( TestPhase . RUN ) ; \n     assertTrue(test.childRunCalled);\n}",
                            "oracle": "assertTrue(test.childRunCalled);",
                            "oracleLn": 103,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "invoke",
                            "focalStartLn": 173,
                            "focalEndLn": 197,
                            "focalMethod": " public void invoke ( TestPhase testPhase ) throws Exception { \n if ( ! currentPhase . compareAndSet ( null , testPhase ) ) { \n throw new IllegalStateException ( format ( \"STR\" , testPhase , testCase . getId ( ) , currentPhase . get ( ) ) ) ; \n } try { \n Callable task = taskPerPhaseMap . get ( testPhase ) ; \n if ( task == null ) { \n return ; \n } task . call ( ) ; \n } catch ( InvocationTargetException e ) { \n Throwable t = e . getTargetException ( ) ; \n if ( t instanceof Error ) { \n throw ( Error ) t ; \n } else if ( t instanceof Exception ) { \n throw ( Exception ) t ; \n } else { \n throw e ; \n } } finally { \n currentPhase . set ( null ) ; \n } } "
                        },
                        {
                            "testName": "testConstructor_withTestClassInstance",
                            "startLn": 31,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testConstructor_withTestClassInstance ( ) {\n     SuccessTest test = new SuccessTest ( ) ; \n     testContainer = new TestContainer ( testContext , test , new TestCase ( \"STR\" ) ) ; \n     assertEquals(test,testContainer.getTestInstance());\n}",
                            "oracle": "assertEquals(test,testContainer.getTestInstance());",
                            "oracleLn": 35,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "getTestInstance",
                            "focalStartLn": 145,
                            "focalEndLn": 147,
                            "focalMethod": " public Object getTestInstance ( ) { \n return testInstance ; \n } "
                        }
                    ]
                },
                {
                    "className": "FormatUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/FormatUtilsTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testHumanReadableByteCount_GigaByte_NoSI",
                            "startLn": 193,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testHumanReadableByteCount_GigaByte_NoSI ( ) {\n     String actual = humanReadableByteCount ( Integer . MAX_VALUE , true ) ; \n     assertEqualsStringFormat(\"STR\",\"STR\",actual);\n}",
                            "oracle": "assertEqualsStringFormat(\"STR\",\"STR\",actual);",
                            "oracleLn": 196,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/FormatUtils.java",
                            "focalName": "humanReadableByteCount",
                            "focalStartLn": 132,
                            "focalEndLn": 140,
                            "focalMethod": " public static String humanReadableByteCount ( long bytes , boolean si ) { \n int unit = si ? SI_BYTES_FACTOR : IEC_BYTES_FACTOR ; \n if ( bytes < unit ) { \n return bytes + \"STR\" ; \n } int exp = ( int ) ( Math . log ( bytes ) / Math . log ( unit ) ) ; \n String pre = ( si ? \"STR\" : \"STR\" ) . charAt ( exp - 1 ) + ( si ? \"STR\" : \"STR\" ) ; \n return format ( Locale . US , \"STR\" , bytes / Math . pow ( unit , exp ) , pre ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimulatorAddressTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testFromString_Worker",
                            "startLn": 133,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testFromString_Worker ( ) {\n     assertToAndFromStringEquals(workerAddress(3,7));\n}",
                            "oracle": "assertToAndFromStringEquals(workerAddress(3,7));",
                            "oracleLn": 135,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "workerAddress",
                            "focalStartLn": 72,
                            "focalEndLn": 74,
                            "focalMethod": " public static SimulatorAddress workerAddress ( int agentIndex , int workerIndex ) { \n return new SimulatorAddress ( WORKER , checkPositive ( agentIndex , \"STR\" ) , checkPositive ( workerIndex , \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RegistryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testAddTests",
                            "startLn": 253,
                            "endLn": 264,
                            "testMethod": "@Test\n public void testAddTests ( ) {\n     TestSuite testSuite = new TestSuite ( ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     testSuite . addTest ( new TestCase ( \"STR\" ) ) ; \n     List < TestData > tests = registry . addTests ( testSuite ) ; \n     assertEquals(3,tests.size());\n}",
                            "oracle": "assertEquals(3,tests.size());",
                            "oracleLn": 260,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "addTests",
                            "focalStartLn": 299,
                            "focalEndLn": 317,
                            "focalMethod": " public synchronized List < TestData > addTests ( TestSuite testSuite ) { \n List < TestData > result = new ArrayList < > ( testSuite . size ( ) ) ; \n for ( TestCase testCase : testSuite . getTestCaseList ( ) ) { \n String id = testCase . getId ( ) ; \n AtomicLong count = ids . get ( id ) ; \n if ( count == null ) { \n ids . put ( id , new AtomicLong ( 1 ) ) ; \n } else { \n id = id + \"STR\" + count . getAndIncrement ( ) ; \n } int testIndex = testIndexGenerator . incrementAndGet ( ) ; \n testCase . setId ( id ) ; \n TestData test = new TestData ( testIndex , testCase , testSuite ) ; \n result . add ( test ) ; \n tests . put ( id , test ) ; \n } return result ; \n } "
                        },
                        {
                            "testName": "testGetWorkers_getMemberWorkers_notEnoughWorkersFound",
                            "startLn": 243,
                            "endLn": 251,
                            "testMethod": "@ Test ( expected = IllegalStateException . class ) public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound ( ) {\n     SimulatorAddress agentAddress = addAgent ( ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     registry . addWorkers ( newWorkerParametersList ( agentAddress , 2 , \"STR\" ) ) ; \n     assertEquals(4,registry.workerCount());\n}",
                            "oracle": "assertEquals(4,registry.workerCount());",
                            "oracleLn": 248,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "workerCount",
                            "focalStartLn": 181,
                            "focalEndLn": 183,
                            "focalMethod": " public int workerCount ( ) { \n return workers . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_Test",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_Test.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_withPath",
                            "startLn": 52,
                            "endLn": 56,
                            "testMethod": "@Test\n public void bind_withPath ( ) {\n     bind0 ( someObject , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",someObject.otherObject.stringField);\n}",
                            "oracle": "assertEquals(\"STR\",someObject.otherObject.stringField);",
                            "oracleLn": 55,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "BuildInfoUtilsTest",
                    "classPath": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java",
                    "subRepo": "drivers/driver-hazelcast4plus",
                    "classTests": [
                        {
                            "testName": "testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse",
                            "startLn": 37,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse ( ) {\n     assertFalse(isMinVersion(\"STR\",null));\n}",
                            "oracle": "assertFalse(isMinVersion(\"STR\",null));",
                            "oracleLn": 39,
                            "focalFile": "drivers/driver-hazelcast4plus/src/main/java/com/hazelcast/simulator/utils/BuildInfoUtils.java",
                            "focalName": "isMinVersion",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " static boolean isMinVersion ( String minVersion , String version ) { \n if ( version == null ) { \n return false ; \n } return VersionUtils . isMinVersion ( minVersion , getVersion ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CliUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CliUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 24,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void before ( ) { \n oldSecurityManager = System . getSecurityManager ( ) ; \n System . setSecurityManager ( new ExitExceptionSecurityManager ( true ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInitOptionsWithHelp_optionalArgument",
                            "startLn": 52,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testInitOptionsWithHelp_optionalArgument ( ) {\n     parser . accepts ( \"STR\" , \"STR\" ) ; \n     OptionSet options = initOptionsWithHelp ( parser , new String [ ] { \n \"STR\" } ) ; \n     assertNotNull(options);\n}",
                            "oracle": "assertNotNull(options);",
                            "oracleLn": 56,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CliUtils.java",
                            "focalName": "initOptionsWithHelp",
                            "focalStartLn": 36,
                            "focalEndLn": 39,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static OptionSet initOptionsWithHelp ( OptionParser parser , String [ ] args ) { \n return initOptionsWithHelp ( parser , null , args ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "NalUnitTypeTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTypeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIdentifiesBadTypeCorrectly",
                            "startLn": 40,
                            "endLn": 46,
                            "testMethod": "@Test\n public void testIdentifiesBadTypeCorrectly ( ) {\n     assertEquals(\"STR\",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);\n}",
                            "oracle": "assertEquals(\"STR\",NALUnitType.fromValue(1),NALUnitType.NON_IDR_SLICE);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnitType.java",
                            "focalName": "fromValue",
                            "focalStartLn": 60,
                            "focalEndLn": 62,
                            "focalMethod": " public static NALUnitType fromValue ( int value ) { \n return value > 0 && value < lut . length ? lut [ value ] : null ; \n } "
                        }
                    ]
                },
                {
                    "className": "BooleanCodingTest",
                    "classPath": "src/test/java/org/jcodec/codecs/vp8/BooleanCodingTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testLeadingZero",
                            "startLn": 18,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testLeadingZero ( ) throws Exception {\n     Assert.assertEquals(7,leadingZeroCountInByte((byte)1));\n}",
                            "oracle": "Assert.assertEquals(7,leadingZeroCountInByte((byte)1));",
                            "oracleLn": 20,
                            "focalFile": "src/main/java/org/jcodec/codecs/vpx/VPXBooleanDecoder.java",
                            "focalName": "leadingZeroCountInByte",
                            "focalStartLn": 243,
                            "focalEndLn": 253,
                            "focalMethod": " public static int leadingZeroCountInByte ( byte b ) { \n int i = b & 0xFF ; \n if ( i >= 128 || i == 0 ) return 0 ; \n return Integer . numberOfLeadingZeros ( b ) - 24 ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "EdgeCases",
                    "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNull",
                            "startLn": 62,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testNull ( ) {\n     assertEquals(\"STR\",m.markdown(null));\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(null));",
                            "oracleLn": 64,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AJsonSerHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testNullStringInArray",
                            "startLn": 174,
                            "endLn": 186,
                            "testMethod": "@Test\n public void testNullStringInArray ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeStringLiteral ( \"STR\" ) ; \n     ser . writeStringLiteral ( null ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 183,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "endArray",
                            "focalStartLn": 67,
                            "focalEndLn": 72,
                            "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SerializableTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/SerializableTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testHashSetSerializable",
                            "startLn": 32,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testHashSetSerializable ( ) throws IOException , ClassNotFoundException {\n     checkSerSame ( AHashSet . empty ( ) ) ; \n     assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));\n}",
                            "oracle": "assertEquals(MyEquality.INSTANCE,JUnitTestSupport.equality(serDeser(AHashSet.empty(MyEquality.INSTANCE))));",
                            "oracleLn": 35,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AHashSet.java",
                            "focalName": "empty",
                            "focalStartLn": 21,
                            "focalEndLn": 31,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < T > AHashSet < T > empty ( AEquality equality ) { \n if ( equality == AEquality . EQUALS ) { \n return EMPTY_EQUALS ; \n } if ( equality == AEquality . IDENTITY ) { \n return EMPTY_IDENTITY ; \n } return new AHashSet < > ( AHashMap . < T , Boolean > empty ( equality ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "dbmdz",
            "repoName": "iiif-apis",
            "subRepos": [],
            "commitSHA": "9cee1ae168e761f2d3f78b2204d6a55416ecb1af",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SpecExamplesDeserializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/auth/SpecExamplesDeserializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCookieServiceWithExternalPattern",
                            "startLn": 55,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testCookieServiceWithExternalPattern ( ) throws IOException {\n     AccessCookieService service = readFromResources ( \"STR\" , AccessCookieService . class ) ; \n     assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);\n}",
                            "oracle": "assertThat(service.getAuthPattern()).isEqualTo(AuthPattern.EXTERNAL);",
                            "oracleLn": 58,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/AccessCookieService.java",
                            "focalName": "getAuthPattern",
                            "focalStartLn": 80,
                            "focalEndLn": 82,
                            "focalMethod": " public AuthPattern getAuthPattern ( ) { \n return authPattern ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GraphvizServerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizServerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "cmdLineValueSeparated",
                            "startLn": 48,
                            "endLn": 52,
                            "testMethod": "@Test\n void cmdLineValueSeparated ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 51,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        }
                    ]
                },
                {
                    "className": "AttributeValidatorTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/validate/AttributeValidatorTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "wrongScope",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n void wrongScope ( ) {\n     assertMessage(ERROR,\"STR\",\"STR\",validate(attr(\"STR\",5),NODE));\n}",
                            "oracle": "assertMessage(ERROR,\"STR\",\"STR\",validate(attr(\"STR\",5),NODE));",
                            "oracleLn": 51,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attr",
                            "focalStartLn": 26,
                            "focalEndLn": 28,
                            "focalMethod": " static < F extends For > Attributes < F > attr ( String key , @Nullable\n Object value ) { \n return new MapAttributes < F > ( key , value ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SerializerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SerializerTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n ser . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "privateAttribute",
                            "startLn": 217,
                            "endLn": 221,
                            "testMethod": "@Test\n void privateAttribute ( ) {\n     assertSerialize(graph().graphAttr().with(\"STR\",\"STR\").with(node(\"STR\").with(\"STR\",\"STR\")),\"STR\");\n}",
                            "oracle": "assertSerialize(graph().graphAttr().with(\"STR\",\"STR\").with(node(\"STR\").with(\"STR\",\"STR\")),\"STR\");",
                            "oracleLn": 219,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/Graph.java",
                            "focalName": "with",
                            "focalStartLn": 33,
                            "focalEndLn": 33,
                            "focalMethod": " Graph with ( LinkSource ... sources ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MavenConfigurationExtractorTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractorTest.java",
                    "subRepo": "enricher/api",
                    "classTests": [
                        {
                            "testName": "should_parse_simple_types",
                            "startLn": 32,
                            "endLn": 46,
                            "testMethod": "@Test\n public void should_parse_simple_types ( ) {\n     final Plugin fakePlugin = createFakePlugin ( \"STR\" ) ; \n     final Map < String , Object > config = MavenConfigurationExtractor . extract ( ( Xpp3Dom ) fakePlugin . getConfiguration ( ) ) ; \n     assertThat(config).containsEntry(\"STR\",\"STR\").containsEntry(\"STR\",\"STR\");\n}",
                            "oracle": "assertThat(config).containsEntry(\"STR\",\"STR\").containsEntry(\"STR\",\"STR\");",
                            "oracleLn": 36,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractor.java",
                            "focalName": "extract",
                            "focalStartLn": 38,
                            "focalEndLn": 44,
                            "focalMethod": " public static Map < String , Object > extract ( Xpp3Dom root ) { \n if ( root == null ) { \n return new HashMap < > ( ) ; \n } return getElement ( root ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorConfigTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "order",
                            "startLn": 96,
                            "endLn": 111,
                            "testMethod": "@Test\n public void order ( ) {\n     List < TestNamed > data = Arrays . asList ( new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) , new TestNamed ( \"STR\" ) ) ; \n     List < String > inc = Arrays . asList ( \"STR\" , \"STR\" ) ; \n     ProcessorConfig pConfig = new ProcessorConfig ( inc , null , null ) ; \n     List < TestNamed > result = pConfig . prepareProcessors ( data , \"STR\" ) ; \n     assertEquals(2,result.size());\n}",
                            "oracle": "assertEquals(2,result.size());",
                            "oracleLn": 102,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TokenizeTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 40,
                        "endLn": 44,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) throws Exception { \n loc\u012bt\u0101js = new Analyzer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "sentences_isolated_quotes",
                            "startLn": 865,
                            "endLn": 873,
                            "testMethod": "@Test\n public void sentences_isolated_quotes ( ) {\n     LinkedList < LinkedList < Word > > sentences ; \n     sentences = Splitting . tokenizeSentences ( loc\u012bt\u0101js , \"STR\" ) ; \n     assertEquals(1,sentences.size());\n}",
                            "oracle": "assertEquals(1,sentences.size());",
                            "oracleLn": 869,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenizeSentences",
                            "focalStartLn": 207,
                            "focalEndLn": 210,
                            "focalMethod": " public static LinkedList < LinkedList < Word > > tokenizeSentences ( Analyzer morphoAnalyzer , String paragraph ) { \n return tokenizeSentences ( morphoAnalyzer , paragraph , DEFAULT_SENTENCE_LENGTH_CAP ) ; \n } "
                        },
                        {
                            "testName": "year_numerals",
                            "startLn": 569,
                            "endLn": 578,
                            "testMethod": "@Test\n public void year_numerals ( ) {\n     LinkedList < Word > tokens ; \n     tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(2,tokens.size());\n}",
                            "oracle": "assertEquals(2,tokens.size());",
                            "oracleLn": 573,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MimeTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/MimeTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testOverwritenMimeType",
                            "startLn": 53,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testOverwritenMimeType ( ) throws Exception {\n     Assert.assertEquals(\"STR\",NanoHTTPD.getMimeTypeForFile(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",NanoHTTPD.getMimeTypeForFile(\"STR\"));",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java",
                            "focalName": "getMimeTypeForFile",
                            "focalStartLn": 292,
                            "focalEndLn": 299,
                            "focalMethod": " public static String getMimeTypeForFile ( String uri ) { \n int dot = uri . lastIndexOf ( '.' ) ; \n String mime = null ; \n if ( dot >= 0 ) { \n mime = mimeTypes ( ) . get ( uri . substring ( dot + 1 ) . toLowerCase ( ) ) ; \n } return mime == null ? \"STR\" : mime ; \n } "
                        }
                    ]
                },
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullUri",
                            "startLn": 476,
                            "endLn": 482,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullUri ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 479,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "different_cells_means_different_puzzle",
                            "startLn": 96,
                            "endLn": 102,
                            "testMethod": "@Test\n public void different_cells_means_different_puzzle ( ) {\n     Puzzle a = new Puzzle ( getSolution ( ) ) ; \n     Puzzle b = new Puzzle ( swap ( getSolution ( ) , 8 , 2 ) ) ; \n     assertNotEquals(a,b);\n}",
                            "oracle": "assertNotEquals(a,b);",
                            "oracleLn": 100,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "Puzzle",
                            "focalStartLn": 15,
                            "focalEndLn": 18,
                            "focalMethod": " public Puzzle ( int [ ] cells ) { \n this . cells = cells ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}