{
    "projects": [
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLimitWithNamedParam",
                            "startLn": 534,
                            "endLn": 540,
                            "testMethod": "@Test\n public void testLimitWithNamedParam ( ) {\n     Map < String , Object > params = new HashMap < String , Object > ( ) ; \n     params . put ( \"STR\" , 2 ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( params ) ; \n     assertEquals(qResult.size(),2);\n}",
                            "oracle": "assertEquals(qResult.size(),2);",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testNonStrict",
                            "startLn": 363,
                            "endLn": 391,
                            "testMethod": "@Test\n public void testNonStrict ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . getStorage ( ) . setProperty ( OStatement . CUSTOM_STRICT_SQL , \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialMiscFunctionsTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDistance",
                            "startLn": 457,
                            "endLn": 477,
                            "testMethod": "@Test\n public void testDistance ( ) {\n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     ODocument next = execute . iterator ( ) . next ( ) ; \n     assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);\n}",
                            "oracle": "assertThat(next.<Double>field(\"STR\")).isEqualTo(0.0015056772638228177);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTriangle3",
                            "startLn": 1114,
                            "endLn": 1130,
                            "testMethod": "@Test\n public void testTriangle3 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 9,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testTriangle1Arrows",
                            "startLn": 1027,
                            "endLn": 1040,
                            "testMethod": "@Test\n public void testTriangle1Arrows ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testManager2",
                            "startLn": 774,
                            "endLn": 788,
                            "testMethod": "@Test\n public void testManager2 ( ) {\n     Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",getManager2(\"STR\").getProperty(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "RemoteQuerySupportTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 50,
                        "endLn": 64,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . CLASS_MINIMUM_CLUSTERS . setValue ( 1 ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n orientDB = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( RemoteQuerySupportTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n session = orientDB . open ( RemoteQuerySupportTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n session . createClass ( \"STR\" ) ; \n oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE . getValueAsInteger ( ) ; \n QUERY_REMOTE_RESULTSET_PAGE_SIZE . setValue ( 10 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryEmbeddedSet",
                            "startLn": 187,
                            "endLn": 203,
                            "testMethod": "@Test\n public void testQueryEmbeddedSet ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . setProperty ( \"STR\" , \"STR\" ) ; \n     ODocument emb = new ODocument ( ) ; \n     emb . setProperty ( \"STR\" , \"STR\" ) ; \n     Set < ODocument > set = new HashSet < > ( ) ; \n     set . add ( emb ) ; \n     doc . setProperty ( \"STR\" , set , OType . EMBEDDEDSET ) ; \n     session . save ( doc ) ; \n     OResultSet res = session . query ( \"STR\" ) ; \n     OResult item = res . next ( ) ; \n     assertNotNull(item.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(item.getProperty(\"STR\"));",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedListTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddAllNotificationTwo",
                            "startLn": 142,
                            "endLn": 156,
                            "testMethod": "@Test\n public void testAddAllNotificationTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCreateClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testClusters",
                            "startLn": 58,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testClusters ( ) {\n     String className = \"STR\" ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertNotNull(clazz);\n}",
                            "oracle": "Assert.assertNotNull(clazz);",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "getClass",
                            "focalStartLn": 72,
                            "focalEndLn": 72,
                            "focalMethod": " OClass getClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OBatchOperationsTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testBatchOperationsNoTx",
                            "startLn": 20,
                            "endLn": 39,
                            "testMethod": "@Test\n public void testBatchOperationsNoTx ( ) throws IOException {\n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     operations . add ( new ORecordOperation ( new ODocument ( ) , ORecordOperation . CREATED ) ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     OBatchOperationsRequest request = new OBatchOperationsRequest ( - 1 , operations ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     request = new OBatchOperationsRequest ( ) ; \n     request . read ( channel , 0 , ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n     assertEquals(request.getOperations().size(),1);\n}",
                            "oracle": "assertEquals(request.getOperations().size(),1);",
                            "oracleLn": 8,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsRequest.java",
                            "focalName": "getOperations",
                            "focalStartLn": 123,
                            "focalEndLn": 125,
                            "focalMethod": " public List < ORecordOperationRequest > getOperations ( ) { \n return operations ; \n } "
                        }
                    ]
                },
                {
                    "className": "OInsertStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OInsertStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLinkMapWithSubqueries",
                            "startLn": 406,
                            "endLn": 427,
                            "testMethod": "@Test\n public void testLinkMapWithSubqueries ( ) {\n     String className = \"STR\" ; \n     String itemclassName = \"STR\" ; \n     db . command ( \"STR\" + className ) ; \n     db . command ( \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName ) ; \n     db . command ( \"STR\" + itemclassName + \"STR\" ) ; \n     db . command ( \"STR\" + className + \"STR\" + itemclassName + \"STR\" ) ; \n     OResultSet result = db . query ( \"STR\" + className ) ; \n     OResult item = result . next ( ) ; \n     Map theMap = item . getProperty ( \"STR\" ) ; \n     Assert.assertEquals(1,theMap.size());\n}",
                            "oracle": "Assert.assertEquals(1,theMap.size());",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java",
                            "focalName": "getProperty",
                            "focalStartLn": 29,
                            "focalEndLn": 29,
                            "focalMethod": " < T > T getProperty ( String name ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ODirtyManagerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testBasic",
                            "startLn": 24,
                            "endLn": 30,
                            "testMethod": "@Test\n public void testBasic ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(1,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(1,manager.getNewRecords().size());",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        }
                    ]
                },
                {
                    "className": "CASObjectArrayTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddSingleItem",
                            "startLn": 7,
                            "endLn": 15,
                            "testMethod": "@Test\n public void testAddSingleItem ( ) {\n     final CASObjectArray < Integer > array = new CASObjectArray < > ( ) ; \n     Assert.assertEquals(0,array.size());\n}",
                            "oracle": "Assert.assertEquals(0,array.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java",
                            "focalName": "size",
                            "focalStartLn": 127,
                            "focalEndLn": 129,
                            "focalMethod": " public int size ( ) { \n return size . get ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventRemoveKeyWithConversion",
                            "startLn": 362,
                            "endLn": 378,
                            "testMethod": "@Test\n public void testProcessChangeEventRemoveKeyWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < String , String > multiValueChangeEvent = new OMultiValueChangeEvent < String , String > ( OMultiValueChangeEvent . OChangeType . REMOVE , \"STR\" , \"STR\" ) ; \n     propertyIndexByIntegerKey . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     removedKeys . put ( 12 , 1 ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 142,
                            "focalEndLn": 152,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n final boolean result ; \n if ( indexBy . equals ( INDEX_BY . KEY ) ) result = processKeyChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n else result = processValueChangeEvent ( changeEvent , keysToAdd , keysToRemove ) ; \n if ( ! result ) throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCreateRecordTaskTest",
                    "classPath": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OCreateRecordTaskTest.java",
                    "subRepo": "distributed",
                    "classTests": [
                        {
                            "testName": "testSerialization",
                            "startLn": 12,
                            "endLn": 23,
                            "testMethod": "@Test\n public void testSerialization ( ) throws IOException {\n     OCreateRecordTask from = new OCreateRecordTask ( ) ; \n     from . init ( new ORecordId ( 12 , 0 ) , \"STR\" . getBytes ( ) , 1 , ( byte ) 0 ) ; \n     OCreateRecordTask to = new OCreateRecordTask ( ) ; \n     serializeDeserialize ( from , to ) ; \n     Assert.assertEquals(from.getRid(),to.getRid());\n}",
                            "oracle": "Assert.assertEquals(from.getRid(),to.getRid());",
                            "oracleLn": 4,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAbstractRecordReplicatedTask.java",
                            "focalName": "getRid",
                            "focalStartLn": 124,
                            "focalEndLn": 126,
                            "focalMethod": " public ORecordId getRid ( ) { \n return rid ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyListIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProcessChangeEventAddOnceWithConversion",
                            "startLn": 138,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testProcessChangeEventAddOnceWithConversion ( ) {\n     final Map < Object , Integer > keysToAdd = new HashMap < Object , Integer > ( ) ; \n     final Map < Object , Integer > keysToRemove = new HashMap < Object , Integer > ( ) ; \n     final OMultiValueChangeEvent < Integer , String > multiValueChangeEvent = new OMultiValueChangeEvent < Integer , String > ( OMultiValueChangeEvent . OChangeType . ADD , 0 , \"STR\" ) ; \n     propertyIndex . processChangeEvent ( multiValueChangeEvent , keysToAdd , keysToRemove ) ; \n     final Map < Object , Integer > addedKeys = new HashMap < Object , Integer > ( ) ; \n     addedKeys . put ( 42 , 1 ) ; \n     final Map < Object , Integer > removedKeys = new HashMap < Object , Integer > ( ) ; \n     Assert.assertEquals(keysToAdd,addedKeys);\n}",
                            "oracle": "Assert.assertEquals(keysToAdd,addedKeys);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "processChangeEvent",
                            "focalStartLn": 92,
                            "focalEndLn": 111,
                            "focalMethod": " public void processChangeEvent ( final OMultiValueChangeEvent < ? , ? > changeEvent , final Map < Object , Integer > keysToAdd , final Map < Object , Integer > keysToRemove ) { \n switch ( changeEvent . getChangeType ( ) ) { \n case ADD : { \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case REMOVE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } case UPDATE : { \n processRemoval ( createSingleValue ( changeEvent . getOldValue ( ) ) , keysToAdd , keysToRemove ) ; \n processAdd ( createSingleValue ( changeEvent . getValue ( ) ) , keysToAdd , keysToRemove ) ; \n break ; \n } default : throw new IllegalArgumentException ( \"STR\" + changeEvent . getChangeType ( ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "DuplicateNonUniqueIndexChangesTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateNonUniqueIndexChangesTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 42,
                        "endLn": 45,
                        "setupMethod": "@BeforeClass\n public static void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + DuplicateNonUniqueIndexChangesTxTest . class . getSimpleName ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n if ( ! db . isClosed ( ) ) db . drop ( ) ; \n db . create ( ) ; \n final OClass class_ = db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n index = class_ . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE_HASH_INDEX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDuplicateValuesOnCreateDelete",
                            "startLn": 176,
                            "endLn": 198,
                            "testMethod": "@Test\n public void testDuplicateValuesOnCreateDelete ( ) {\n     db . begin ( ) ; \n     final ODocument person1 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person2 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person3 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     final ODocument person4 = db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person1 . delete ( ) ; \n     person2 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     person3 . delete ( ) ; \n     person4 . field ( \"STR\" , \"STR\" ) . save ( ) ; \n     db . commit ( ) ; \n     assertRids(\"STR\");\n}",
                            "oracle": "assertRids(\"STR\");",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "commit",
                            "focalStartLn": 726,
                            "focalEndLn": 731,
                            "focalMethod": "@Override\n public ODatabase < ORecord > commit ( ) throws OTransactionException { \n checkOpenness ( ) ; \n internal . commit ( ) ; \n return this ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLCSVExtractorTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDateTypeAutodetection",
                            "startLn": 80,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testDateTypeAutodetection ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     ODocument doc = res . get ( 0 ) ; \n     Date birthday = doc . field ( \"STR\" ) ; \n     assertEquals(2008,birthday.getYear()+1900);\n}",
                            "oracle": "assertEquals(2008,birthday.getYear()+1900);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        },
                        {
                            "testName": "testFloatWithinQuotesAndCommaAsDecimalSeparator",
                            "startLn": 162,
                            "endLn": 174,
                            "testMethod": "@Test\n public void testFloatWithinQuotesAndCommaAsDecimalSeparator ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 4,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddKeyComposite",
                            "startLn": 74,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testAddKeyComposite ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey compositeKeyToAdd = new OCompositeKey ( ) ; \n     compositeKeyToAdd . addKey ( \"STR\" ) ; \n     compositeKeyToAdd . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( compositeKeyToAdd ) ; \n     assertEquals(compositeKey.getKeys().size(),3);\n}",
                            "oracle": "assertEquals(compositeKey.getKeys().size(),3);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "getKeys",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public List < Object > getKeys ( ) { \n return Collections . unmodifiableList ( keys ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLet2",
                            "startLn": 2045,
                            "endLn": 2059,
                            "testMethod": "@Test\n public void testLet2 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSymmetricKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "shouldTestSpecificAESKey",
                            "startLn": 43,
                            "endLn": 56,
                            "testMethod": "@Test\n public void shouldTestSpecificAESKey ( ) throws Exception {\n     OSymmetricKey sk = new OSymmetricKey ( \"STR\" , \"STR\" ) ; \n     String msgToEncrypt = \"STR\" ; \n     String magic = sk . encrypt ( \"STR\" , msgToEncrypt ) ; \n     String decryptedMsg = sk . decryptAsString ( magic ) ; \n     System . out . println ( \"STR\" + decryptedMsg ) ; \n     assertThat(msgToEncrypt).isEqualTo(decryptedMsg);\n}",
                            "oracle": "assertThat(msgToEncrypt).isEqualTo(decryptedMsg);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/security/symmetrickey/OSymmetricKey.java",
                            "focalName": "decryptAsString",
                            "focalStartLn": 516,
                            "focalEndLn": 523,
                            "focalMethod": " public String decryptAsString ( final String encodedJSON ) { \n try { \n byte [ ] decrypted = decrypt ( encodedJSON ) ; \n return new String ( decrypted , \"STR\" ) ; \n } catch ( Exception ex ) { \n throw OException . wrapException ( new OSecurityException ( \"STR\" + ex . getMessage ( ) ) , ex ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "ONullBucketTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucketTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddRemoveAddValue",
                            "startLn": 83,
                            "endLn": 110,
                            "testMethod": "@Test\n public void testAddRemoveAddValue ( ) throws IOException {\n     OByteBufferPool bufferPool = new OByteBufferPool ( 1024 ) ; \n     OPointer pointer = bufferPool . acquireDirect ( true ) ; \n     OCachePointer cachePointer = new OCachePointer ( pointer , bufferPool , 0 , 0 ) ; \n     cachePointer . incrementReferrer ( ) ; \n     OCacheEntry cacheEntry = new OCacheEntryImpl ( 0 , 0 , cachePointer , false ) ; \n     cacheEntry . acquireExclusiveLock ( ) ; \n     ONullBucket < String > bucket = new ONullBucket < > ( cacheEntry , OStringSerializer . INSTANCE , true ) ; \n     bucket . setValue ( new OSBTreeValue < > ( false , - 1 , \"STR\" ) ) ; \n     bucket . removeValue ( ) ; \n     OSBTreeValue < String > treeValue = bucket . getValue ( ) ; \n     Assert.assertNull(treeValue);\n}",
                            "oracle": "Assert.assertNull(treeValue);",
                            "oracleLn": 10,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtree/local/ONullBucket.java",
                            "focalName": "getValue",
                            "focalStartLn": 69,
                            "focalEndLn": 78,
                            "focalMethod": " public OSBTreeValue < V > getValue ( ) { \n if ( getByteValue ( NEXT_FREE_POSITION ) == 0 ) return null ; \n final boolean isLink = getByteValue ( NEXT_FREE_POSITION + 1 ) == 0 ; \n if ( isLink ) return new OSBTreeValue < V > ( true , getLongValue ( NEXT_FREE_POSITION + 2 ) , null ) ; \n return new OSBTreeValue < V > ( false , - 1 , deserializeFromDirectMemory ( valueSerializer , NEXT_FREE_POSITION + 2 ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneTransactionCompositeQueryTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneTransactionCompositeQueryTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 43,
                        "endLn": 51,
                        "setupMethod": "@Before\n public void init ( ) { \n final OClass c1 = db . createVertexClass ( \"STR\" ) ; \n c1 . createProperty ( \"STR\" , OType . STRING ) ; \n c1 . createProperty ( \"STR\" , OType . STRING ) ; \n c1 . createIndex ( \"STR\" , \"STR\" , null , null , \"STR\" , new String [ ] { \n \"STR\" } ) ; \n c1 . createIndex ( \"STR\" , \"STR\" , null , null , \"STR\" , new String [ ] { \n \"STR\" } ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRollback",
                            "startLn": 53,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testRollback ( ) {\n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . begin ( ) ; \n     db . save ( doc ) ; \n     String query = \"STR\" ; \n     List < ODocument > vertices = db . command ( new OSQLSynchQuery < ODocument > ( query ) ) . execute ( ) ; \n     assertThat(vertices).hasSize(1);\n}",
                            "oracle": "assertThat(vertices).hasSize(1);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RegexFilterTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/RegexFilterTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testImagesFilter",
                            "startLn": 53,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testImagesFilter ( ) throws MalformedURLException {\n     URLFilter allAllowed = createFilter ( ) ; \n     URL url = new URL ( \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     String filterResult = allAllowed . filter ( url , metadata , url . toExternalForm ( ) ) ; \n     Assert.assertEquals(null,filterResult);\n}",
                            "oracle": "Assert.assertEquals(null,filterResult);",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ActivityTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String id = \"STR\" ; \n ActivityDefinition definition = new ActivityDefinition ( ) ; \n HashMap < String , String > name = new HashMap < String , String > ( ) ; \n name . put ( \"STR\" , \"STR\" ) ; \n definition . setName ( name ) ; \n activity = new Activity ( id , definition ) ; \n assertNotNull ( activity ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetId",
                            "startLn": 67,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = \"STR\" ; \n     String actual = activity . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Activity.java",
                            "focalName": "getId",
                            "focalStartLn": 27,
                            "focalEndLn": 29,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementReferenceTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 22,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n statementRef = new StatementReference ( ID ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStatementReferenceString",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testStatementReferenceString ( ) {\n     String id = UUID . randomUUID ( ) . toString ( ) ; \n     StatementReference statementRef = new StatementReference ( id ) ; \n     assertNotNull(statementRef);\n}",
                            "oracle": "assertNotNull(statementRef);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementReference.java",
                            "focalName": "StatementReference",
                            "focalStartLn": 13,
                            "focalEndLn": 15,
                            "focalMethod": " public StatementReference ( String id ) { \n this . id = id ; \n } "
                        }
                    ]
                },
                {
                    "className": "AccountTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AccountTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n account = new Account ( expectedName , expectedHomepage ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAccount",
                            "startLn": 32,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testAccount ( ) {\n     Account account = new Account ( ) ; \n     assertNotNull(account);\n}",
                            "oracle": "assertNotNull(account);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Account.java",
                            "focalName": "Account",
                            "focalStartLn": 9,
                            "focalEndLn": 9,
                            "focalMethod": " public Account ( ) { \n } "
                        }
                    ]
                },
                {
                    "className": "PersonTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/PersonTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n person = new Person ( ) ; \n person . setName ( NAME ) ; \n person . setMbox ( MBOX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetMbox",
                            "startLn": 69,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetMbox ( ) {\n     String [ ] expected = MBOX ; \n     String [ ] actual = person . getMbox ( ) ; \n     assertArrayEquals(expected,actual);\n}",
                            "oracle": "assertArrayEquals(expected,actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getMbox",
                            "focalStartLn": 30,
                            "focalEndLn": 32,
                            "focalMethod": " public String [ ] getMbox ( ) { \n return this . mbox ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MavenConfigurationExtractorTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractorTest.java",
                    "subRepo": "enricher/api",
                    "classTests": [
                        {
                            "testName": "should_parse_deep_inner_objects",
                            "startLn": 67,
                            "endLn": 96,
                            "testMethod": "@Test\n public void should_parse_deep_inner_objects ( ) {\n     final Plugin fakePlugin = createFakePlugin ( \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     final Map < String , Object > config = MavenConfigurationExtractor . extract ( ( Xpp3Dom ) fakePlugin . getConfiguration ( ) ) ; \n     final Map < String , Object > e = new HashMap < > ( ) ; \n     e . put ( \"STR\" , \"STR\" ) ; \n     final Map < String , Object > d = new HashMap < > ( ) ; \n     d . put ( \"STR\" , e ) ; \n     final Map < String , Object > c = new HashMap < > ( ) ; \n     c . put ( \"STR\" , d ) ; \n     final Map < String , Object > expected = new HashMap < > ( ) ; \n     expected . put ( \"STR\" , c ) ; \n     assertThat(config).containsEntry(\"STR\",expected);\n}",
                            "oracle": "assertThat(config).containsEntry(\"STR\",expected);",
                            "oracleLn": 10,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/MavenConfigurationExtractor.java",
                            "focalName": "extract",
                            "focalStartLn": 38,
                            "focalEndLn": 44,
                            "focalMethod": " public static Map < String , Object > extract ( Xpp3Dom root ) { \n if ( root == null ) { \n return new HashMap < > ( ) ; \n } return getElement ( root ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SourceTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEqualsForDifferentSources",
                            "startLn": 98,
                            "endLn": 103,
                            "testMethod": "@Test\n public void testEqualsForDifferentSources ( ) throws Exception {\n     Source source1 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     Source source2 = new Source ( \"STR\" , \"STR\" , \"STR\" ) ; \n     assertFalse(source1.equals(source2));\n}",
                            "oracle": "assertFalse(source1.equals(source2));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java",
                            "focalName": "equals",
                            "focalStartLn": 111,
                            "focalEndLn": 120,
                            "focalMethod": "@Override\n public boolean equals ( final Object obj ) { \n if ( ! ( obj instanceof Source ) ) { \n return false ; \n } Source other = ( Source ) obj ; \n return ( Objects . equals ( this . name , other . name ) && Objects . equals ( this . digest , other . digest ) && Objects . equals ( this . coverage . length , other . coverage . length ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AbstractServiceSetupTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProperty",
                            "startLn": 46,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testGetProperty ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",create(env).getProperty(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",create(env).getProperty(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetup.java",
                            "focalName": "getProperty",
                            "focalStartLn": 75,
                            "focalEndLn": 77,
                            "focalMethod": " protected final String getProperty ( final String name ) { \n return env . get ( name ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScanSourceLoaderTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/source/ScanSourceLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testMissingSourceFileFromDirectory",
                            "startLn": 55,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testMissingSourceFileFromDirectory ( ) throws Exception {\n     ScanSourceLoader sourceLoader = new ScanSourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ; \n     assertNull(sourceLoader.load(\"STR\"));\n}",
                            "oracle": "assertNull(sourceLoader.load(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/source/AbstractSourceLoader.java",
                            "focalName": "load",
                            "focalStartLn": 50,
                            "focalEndLn": 64,
                            "focalMethod": "@Override\n public Source load ( final String sourceFile ) throws IOException { \n InputStream stream = locate ( sourceFile ) ; \n if ( stream != null ) { \n try ( Md5DigestInputStream ds = new Md5DigestInputStream ( stream ) ; \n InputStreamReader reader = new InputStreamReader ( ds , getSourceEncoding ( ) ) ) { \n String source = IOUtil . toString ( reader ) ; \n return new Source ( getFileName ( sourceFile ) , source , ds . getDigestHex ( ) ) ; \n } catch ( NoSuchAlgorithmException ex ) { \n throw new IOException ( \"STR\" , ex ) ; \n } } else { \n return null ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SimulatorAddressTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAddressLevel",
                            "startLn": 16,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testGetAddressLevel ( ) {\n     assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());\n}",
                            "oracle": "assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "getAddressLevel",
                            "focalStartLn": 81,
                            "focalEndLn": 83,
                            "focalMethod": " public AddressLevel getAddressLevel ( ) { \n return addressLevel ; \n } "
                        }
                    ]
                },
                {
                    "className": "FailureOperationTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/operations/FailureOperationTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void before ( ) { \n testCase = new TestCase ( TEST_ID ) ; \n cause = new TestException ( \"STR\" ) ; \n operation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , cause ) ; \n fullOperation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , \"STR\" , TEST_ID , null ) . setTestCase ( testCase ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetWorkerAddress_whenWorkerAddressIsNull",
                            "startLn": 49,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testGetWorkerAddress_whenWorkerAddressIsNull ( ) {\n     operation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , null , null , cause ) ; \n     assertNull(operation.getWorkerAddress());\n}",
                            "oracle": "assertNull(operation.getWorkerAddress());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/operations/FailureOperation.java",
                            "focalName": "getWorkerAddress",
                            "focalStartLn": 115,
                            "focalEndLn": 120,
                            "focalMethod": " public SimulatorAddress getWorkerAddress ( ) { \n if ( workerAddress == null ) { \n return null ; \n } return SimulatorAddress . fromString ( workerAddress ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "DeploymentPlanTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/DeploymentPlanTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 36,
                        "setupMethod": "@Before\n public void before ( ) { \n agent1 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n agent2 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n agent3 = registry . addAgent ( \"STR\" , \"STR\" ) . getAddress ( ) ; \n driver = new FakeDriver ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "whenSingleClientWorker",
                            "startLn": 92,
                            "endLn": 100,
                            "testMethod": "@Test\n public void whenSingleClientWorker ( ) {\n     DeploymentPlan plan = new DeploymentPlan ( driver , registry ) . addToPlan ( 1 , \"STR\" ) ; \n     assertDeploymentPlanWorkerCount(plan,agent1,0,1);\n}",
                            "oracle": "assertDeploymentPlanWorkerCount(plan,agent1,0,1);",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/DeploymentPlan.java",
                            "focalName": "addToPlan",
                            "focalStartLn": 73,
                            "focalEndLn": 85,
                            "focalMethod": " public DeploymentPlan addToPlan ( int workerCount , String workerType ) { \n for ( int i = 0 ; \n i < workerCount ; \n i ++ ) { \n WorkersPerAgent workersPerAgent = nextAgent ( workerType ) ; \n AgentData agent = workersPerAgent . agent ; \n WorkerParameters workerParameters = driver . loadWorkerParameters ( workerType , agent . getAddressIndex ( ) ) ; \n workersPerAgent . registerWorker ( workerParameters ) ; \n List < WorkerParameters > workerParametersList = workerDeployment . get ( agent . getAddress ( ) ) ; \n workerParametersList . add ( workerParameters ) ; \n } return this ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CABACTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/CABACTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testMBSkipFlag",
                            "startLn": 148,
                            "endLn": 162,
                            "testMethod": "@Test\n public void testMBSkipFlag ( ) {\n     CABAC cabac = new CABAC ( 2 ) ; \n     MockMDecoder m = new MockMDecoder ( new int [ ] { \n 0 } , new int [ ] { \n 11 } ) ; \n     Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));\n}",
                            "oracle": "Assert.assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java",
                            "focalName": "readMBSkipFlag",
                            "focalStartLn": 703,
                            "focalEndLn": 713,
                            "focalMethod": " public boolean readMBSkipFlag ( MDecoder mDecoder , SliceType slType , boolean leftAvailable , boolean topAvailable , int mbX ) { \n int base = slType == SliceType . P ? 11 : 24 ; \n boolean ret = mDecoder . decodeBin ( base + ( leftAvailable && ! skipFlagLeft ? 1 : 0 ) + ( topAvailable && ! skipFlagsTop [ mbX ] ? 1 : 0 ) ) == 1 ; \n skipFlagLeft = skipFlagsTop [ mbX ] = ret ; \n return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "ColorExtensionTest",
                    "classPath": "src/test/java/org/jcodec/containers/mp4/boxes/ColorExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testColorMov",
                            "startLn": 18,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testColorMov ( ) throws Exception {\n     ColorExtension color = ColorExtension . createColr ( ) ; \n     ByteBuffer buf = ByteBuffer . allocate ( 64 ) ; \n     color . write ( buf ) ; \n     buf . flip ( ) ; \n     Assert.assertEquals(18,buf.remaining());\n}",
                            "oracle": "Assert.assertEquals(18,buf.remaining());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/jcodec/containers/mp4/boxes/Box.java",
                            "focalName": "write",
                            "focalStartLn": 50,
                            "focalEndLn": 58,
                            "focalMethod": " public void write ( ByteBuffer buf ) { \n ByteBuffer dup = buf . duplicate ( ) ; \n NIOUtils . skip ( buf , 8 ) ; \n doWrite ( buf ) ; \n header . setBodySize ( buf . position ( ) - dup . position ( ) - 8 ) ; \n checkState ( header . headerSize ( ) == ( long ) 8 ) ; \n header . write ( dup ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JolokiaConnectionTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JolokiaConnectionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 76,
                        "endLn": 122,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJ4pClient = Mockito . mock ( J4pClient . class ) ; \n this . mockJ4pReadResponse1 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pReadResponse2 = PowerMockito . mock ( J4pReadResponse . class ) ; \n this . mockJ4pSearchResponse = PowerMockito . mock ( J4pSearchResponse . class ) ; \n this . jolokiaConnection = new JolokiaConnection ( this . mockJ4pClient ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . objectName1 = new ObjectName ( \"STR\" ) ; \n this . objectName2 = new ObjectName ( \"STR\" ) ; \n this . queryExp = new ObjectName ( \"STR\" ) ; \n this . att1 = \"STR\" ; \n this . att2 = \"STR\" ; \n this . att3 = \"STR\" ; \n this . att4 = \"STR\" ; \n this . value1 = \"STR\" ; \n this . value2 = \"STR\" ; \n this . value3 = \"STR\" ; \n this . value4 = \"STR\" ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . att4 ) ) . thenReturn ( this . value4 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName1 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse1 . getValue ( this . objectName1 , this . att2 ) ) . thenReturn ( this . value2 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getObjectNames ( ) ) . thenReturn ( Arrays . asList ( this . objectName2 ) ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att1 ) ) . thenReturn ( this . value1 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att3 ) ) . thenReturn ( this . value3 ) ; \n Mockito . when ( this . mockJ4pReadResponse2 . getValue ( this . objectName2 , this . att4 ) ) . thenReturn ( this . value4 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetLogger",
                            "startLn": 131,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetSetLogger ( ) throws Exception {\n     assertNotNull(this.jolokiaConnection.getLog());\n}",
                            "oracle": "assertNotNull(this.jolokiaConnection.getLog());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JolokiaConnection.java",
                            "focalName": "getLog",
                            "focalStartLn": 60,
                            "focalEndLn": 62,
                            "focalMethod": " public Logger getLog ( ) { \n return log ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXMBeanConnectionTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXMBeanConnectionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 48,
                        "endLn": 67,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockMBeanServerConnection = Mockito . mock ( MBeanServerConnection . class ) ; \n this . mockAttributeList = Mockito . mock ( AttributeList . class ) ; \n this . mockQueryExp = Mockito . mock ( QueryExp . class ) ; \n this . objectName = new ObjectName ( \"STR\" ) ; \n this . testAttributeList = new LinkedList < > ( ) ; \n Mockito . when ( this . mockJmxConnector . getMBeanServerConnection ( ) ) . thenReturn ( this . mockMBeanServerConnection ) ; \n Mockito . when ( this . mockMBeanServerConnection . getAttributes ( this . objectName , new String [ ] { \n \"STR\" } ) ) . thenReturn ( this . mockAttributeList ) ; \n Mockito . when ( this . mockAttributeList . asList ( ) ) . thenReturn ( this . testAttributeList ) ; \n Mockito . when ( this . mockMBeanServerConnection . queryNames ( this . objectName , this . mockQueryExp ) ) . thenReturn ( this . testQueryResult ) ; \n this . connection = new JMXMBeanConnection ( this . mockJmxConnector ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAttributes",
                            "startLn": 69,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetAttributes ( ) throws Exception {\n     List < Attribute > result = this . connection . getAttributes ( this . objectName , \"STR\" ) ; \n     assertSame(this.testAttributeList,result);\n}",
                            "oracle": "assertSame(this.testAttributeList,result);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXMBeanConnection.java",
                            "focalName": "getAttributes",
                            "focalStartLn": 44,
                            "focalEndLn": 49,
                            "focalMethod": "@Override\n public List < Attribute > getAttributes ( ObjectName objectName , String ... attributeNames ) throws InstanceNotFoundException , IOException , ReflectionException { \n return this . mBeanServerConnection . getAttributes ( objectName , attributeNames ) . asList ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BinaryFrameTest",
                    "classPath": "src/test/java/org/java_websocket/framing/BinaryFrameTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExtends",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testExtends ( ) {\n     BinaryFrame frame = new BinaryFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofDataFrame);\n}",
                            "oracle": "assertEquals(\"STR\",true,frameinstanceofDataFrame);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/framing/BinaryFrame.java",
                            "focalName": "BinaryFrame",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public BinaryFrame ( ) { \n super ( Opcode . BINARY ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "EnvFilterTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "filters_and_sorts_keys",
                            "startLn": 14,
                            "endLn": 37,
                            "testMethod": "@Test\n public void filters_and_sorts_keys ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Config config = createConfig ( ) ; \n     new EnvironmentVariablesConfigLoader ( env ) . load ( config ) ; \n     EnvFilter envFilter = new EnvFilter ( config ) ; \n     Map < String , String > expectedEnv = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     assertEquals(expectedEnv,envFilter.filter(env));\n}",
                            "oracle": "assertEquals(expectedEnv,envFilter.filter(env));",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/EnvFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 18,
                            "focalEndLn": 25,
                            "focalMethod": " public Map < String , String > filter ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( Map . Entry < String , String > entry : env . entrySet ( ) ) { \n if ( ! maskPattern . matcher ( entry . getKey ( ) ) . matches ( ) ) result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; \n } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "s\u0113do\u0161s",
                            "startLn": 2505,
                            "endLn": 2510,
                            "testMethod": "@Test\n public void s\u0113do\u0161s ( ) {\n     Word s\u0113do\u0161s = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(s\u0113do\u0161s.isRecognized());\n}",
                            "oracle": "assertTrue(s\u0113do\u0161s.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "b\u016bt",
                            "startLn": 3055,
                            "endLn": 3077,
                            "testMethod": "@Test\n public void b\u016bt ( ) {\n     ArrayList < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     AttributeValues testset = new AttributeValues ( ) ; \n     testset . addAttribute ( AttributeNames . i_PartOfSpeech , AttributeNames . v_Verb ) ; \n     testset . addAttribute ( AttributeNames . i_Izteiksme , AttributeNames . v_Vajadziibas ) ; \n     assertInflection(formas,testset,\"STR\");\n}",
                            "oracle": "assertInflection(formas,testset,\"STR\");",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/lv/semti/morphology/attributes/AttributeValues.java",
                            "focalName": "addAttribute",
                            "focalStartLn": 71,
                            "focalEndLn": 74,
                            "focalMethod": " public void addAttribute ( String attribute , String value ) { \n attributes . put ( attribute , value ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sharneng",
            "repoName": "gm4java",
            "subRepos": [],
            "commitSHA": "92f3f3b64a45f312ef6978f2367263ec64ff0c04",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GMBatchCommandTest",
                    "classPath": "src/test/java/org/gm4java/im4java/GMBatchCommandTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 63,
                        "endLn": 66,
                        "setupMethod": "@Before\n public void setup ( ) { \n MockitoAnnotations . initMocks ( this ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "run_returnsResultBack",
                            "startLn": 144,
                            "endLn": 168,
                            "testMethod": "@Test\n public void run_returnsResultBack ( ) throws Exception {\n     final String command = \"STR\" ; \n     sut = new GMBatchCommand ( service , command ) ; \n     IMOperation op = new IMOperation ( ) ; \n     op . ping ( ) ; \n     final String format = \"STR\" ; \n     op . format ( format ) ; \n     op . addImage ( ) ; \n     ArrayListOutputConsumer output = new ArrayListOutputConsumer ( ) ; \n     sut . setOutputConsumer ( output ) ; \n     when ( service . execute ( anyListOf ( String . class ) ) ) . thenReturn ( \"STR\" ) ; \n     sut . run ( op , SOURCE_IMAGE ) ; \n     verify ( service ) . execute ( Arrays . asList ( command , \"STR\" , \"STR\" , format , SOURCE_IMAGE ) ) ; \n     ArrayList < String > cmdOutput = output . getOutput ( ) ; \n     Iterator < String > iter = cmdOutput . iterator ( ) ; \n     assertThat(iter.next(),is(\"STR\"));\n}",
                            "oracle": "assertThat(iter.next(),is(\"STR\"));",
                            "oracleLn": 14,
                            "focalFile": "src/main/java/org/gm4java/engine/GMService.java",
                            "focalName": "execute",
                            "focalStartLn": 102,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n String execute ( @Nonnull\n List < String > command ) throws IOException , GMException , GMServiceException ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdate",
                            "startLn": 82,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testUpdate ( ) {\n     assertEquals(\"STR\",sql.update(\"STR\").set(\"STR\").toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.update(\"STR\").set(\"STR\").toString());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OptionsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "fromJsonNoImage",
                            "startLn": 32,
                            "endLn": 37,
                            "testMethod": "@Test\n void fromJsonNoImage ( ) {\n     final Options options = Options . fromJson ( \"STR\" ) ; \n     final Options expected = Options . create ( ) . engine ( Engine . DOT ) . format ( Format . PNG ) . totalMemory ( 42 ) . yInvert ( true ) . basedir ( new File ( \"STR\" ) ) ; \n     assertEquals(expected,options);\n}",
                            "oracle": "assertEquals(expected,options);",
                            "oracleLn": 2,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/Options.java",
                            "focalName": "basedir",
                            "focalStartLn": 124,
                            "focalEndLn": 126,
                            "focalMethod": " public Options basedir ( File basedir ) { \n return new Options ( engine , format , totalMemory , yInvert , basedir , images ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RangeTest",
                    "classPath": "src/test/java/com/basistech/tclre/RangeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testNotBom",
                            "startLn": 51,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testNotBom ( ) throws Exception {\n     RePattern exp = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED , PatternFlags . EXPANDED ) ; \n     assertThat(\"STR\",matches(exp));\n}",
                            "oracle": "assertThat(\"STR\",matches(exp));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/basistech/tclre/HsrePattern.java",
                            "focalName": "compile",
                            "focalStartLn": 65,
                            "focalEndLn": 69,
                            "focalMethod": " public static RePattern compile ( String pattern , PatternFlags ... flags ) throws RegexException { \n EnumSet < PatternFlags > flagSet = EnumSet . noneOf ( PatternFlags . class ) ; \n Collections . addAll ( flagSet , flags ) ; \n return Compiler . compile ( pattern , flagSet ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jsevellec",
            "repoName": "cassandra-unit",
            "subRepos": [
                "cassandra-unit",
                "cassandra-unit-shaded",
                "cassandra-unit-spring"
            ],
            "commitSHA": "dec40b1b68944acc46f55dcc3d17857a0b3f73b9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CassandraUnitCommandLineLoaderTest",
                    "classPath": "cassandra-unit/src/test/java/org/cassandraunit/cli/CassandraUnitCommandLineLoaderTest.java",
                    "subRepo": "cassandra-unit",
                    "classTests": [
                        {
                            "testName": "shouldPrintUsageBecauseHostArgumentIsMissing",
                            "startLn": 56,
                            "endLn": 61,
                            "testMethod": "@Test\n public void shouldPrintUsageBecauseHostArgumentIsMissing ( ) throws Exception {\n     String [ ] args = { \n \"STR\" , \"STR\" , \"STR\" } ; \n     CassandraUnitCommandLineLoader . parseCommandLine ( args ) ; \n     assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));\n}",
                            "oracle": "assertThat(CassandraUnitCommandLineLoader.isUsageBeenPrinted(),is(true));",
                            "oracleLn": 2,
                            "focalFile": "cassandra-unit/src/main/java/org/cassandraunit/cli/CassandraUnitCommandLineLoader.java",
                            "focalName": "isUsageBeenPrinted",
                            "focalStartLn": 143,
                            "focalEndLn": 145,
                            "focalMethod": " protected static boolean isUsageBeenPrinted ( ) { \n return usageBeenPrinted ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCleanTargetDir",
                            "startLn": 366,
                            "endLn": 388,
                            "testMethod": "@Test\n public void testCleanTargetDir ( ) throws Exception {\n     File tempClass = new File ( targetDir , \"STR\" ) ; \n     Files . write ( tempClass . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(tempClass.exists());\n}",
                            "oracle": "assertTrue(tempClass.exists());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "cleanTargetDir",
                            "focalStartLn": 4155,
                            "focalEndLn": 4170,
                            "focalMethod": " protected void cleanTargetDir ( File outputDirectory ) { \n File [ ] fList = outputDirectory . listFiles ( ) ; \n if ( fList != null ) { \n for ( File file : fList ) { \n if ( file . isFile ( ) && file . getName ( ) . toLowerCase ( ) . endsWith ( \"STR\" ) ) { \n file . delete ( ) ; \n info ( \"STR\" + file ) ; \n } else if ( file . isDirectory ( ) ) { \n cleanTargetDir ( file ) ; \n } } } if ( outputDirectory . listFiles ( ) . length == 0 ) { \n outputDirectory . delete ( ) ; \n } } "
                        }
                    ]
                }
            ]
        }
    ]
}