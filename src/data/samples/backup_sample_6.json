{
    "projects": [
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmptyIndexByKeyReload",
                            "startLn": 199,
                            "endLn": 217,
                            "testMethod": "@Test\n public void testEmptyIndexByKeyReload ( ) {\n     final ODatabaseDocumentTx database = new ODatabaseDocumentTx ( \"STR\" ) ; \n     database . create ( ) ; \n     propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n     final ODocument docToStore = propertyIndexByKey . toStream ( ) ; \n     database . save ( docToStore , database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     final ODocument docToLoad = database . load ( docToStore . getIdentity ( ) ) ; \n     final OPropertyIndexDefinition result = new OPropertyMapIndexDefinition ( ) ; \n     result . fromStream ( docToLoad ) ; \n     database . drop ( ) ; \n     Assert.assertEquals(result,propertyIndexByKey);\n}",
                            "oracle": "Assert.assertEquals(result,propertyIndexByKey);",
                            "oracleLn": 210,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "drop",
                            "focalStartLn": 1017,
                            "focalEndLn": 1025,
                            "focalMethod": "@Override\n public void drop ( ) { \n checkOpenness ( ) ; \n internal . callOnDropListeners ( ) ; \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n factory . drop ( this . getName ( ) , null , null ) ; \n this . internal = null ; \n clearOwner ( ) ; \n } "
                        },
                        {
                            "testName": "testCreateValueWrongParameterArrayParams",
                            "startLn": 145,
                            "endLn": 149,
                            "testMethod": "@Test\n public void testCreateValueWrongParameterArrayParams ( ) {\n     final Object result = propertyIndexByKey . createValue ( \"STR\" ) ; \n     Assert.assertNull(result);\n}",
                            "oracle": "Assert.assertNull(result);",
                            "oracleLn": 148,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 78,
                            "focalEndLn": 96,
                            "focalMethod": "@Override\n public Object createValue ( Object ... params ) { \n if ( ! ( params [ 0 ] instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params [ 0 ] ) ; \n final List < Object > result = new ArrayList < > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n Object val = createSingleValue ( mapParam ) ; \n result . add ( val ) ; \n } if ( getFieldsToIndex ( ) . size ( ) == 1 && result . size ( ) == 1 ) { \n return result . get ( 0 ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLCSVExtractorTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCRLFDelimiter",
                            "startLn": 344,
                            "endLn": 357,
                            "testMethod": "@Test\n public void testCRLFDelimiter ( ) {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 350,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TrackedMapTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testClearTwo",
                            "startLn": 272,
                            "endLn": 298,
                            "testMethod": "@Test\n public void testClearTwo ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     final OTrackedMap < String > trackedMap = new OTrackedMap < String > ( doc ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     trackedMap . put ( \"STR\" , \"STR\" ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 280,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSimpleKeyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER , OType . STRING ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueCompositeKeyListParam",
                            "startLn": 41,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testCreateValueCompositeKeyListParam ( ) {\n     final Object result = simpleKeyIndexDefinition . createValue ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n     final OCompositeKey compositeKey = new OCompositeKey ( Arrays . asList ( 2 , \"STR\" ) ) ; \n     Assert.assertEquals(result,compositeKey);\n}",
                            "oracle": "Assert.assertEquals(result,compositeKey);",
                            "oracleLn": 45,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 42,
                            "focalEndLn": 48,
                            "focalMethod": " public OCompositeKey ( final List < ? > keys ) { \n this . keys = new ArrayList < Object > ( keys . size ( ) ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCommonFriendsArrows",
                            "startLn": 412,
                            "endLn": 423,
                            "testMethod": "@Test\n public void testCommonFriendsArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     printExecutionPlan ( qResult ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 416,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "LuceneSpatialGeometryCollectionTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialGeometryCollectionTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 35,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void init ( ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGeoCollectionOutsideTx",
                            "startLn": 44,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testGeoCollectionOutsideTx ( ) {\n     ODocument test1 = new ODocument ( \"STR\" ) ; \n     test1 . field ( \"STR\" , \"STR\" ) ; \n     ODocument geometry = new ODocument ( \"STR\" ) ; \n     ODocument point = new ODocument ( \"STR\" ) ; \n     point . field ( \"STR\" , Arrays . asList ( 1.0 , 2.0 ) ) ; \n     ODocument polygon = new ODocument ( \"STR\" ) ; \n     polygon . field ( \"STR\" , Arrays . asList ( Arrays . asList ( Arrays . asList ( 0.0 , 0.0 ) , Arrays . asList ( 10.0 , 0.0 ) , Arrays . asList ( 10.0 , 10.0 ) , Arrays . asList ( 0.0 , 10.0 ) , Arrays . asList ( 0.0 , 0.0 ) ) ) ) ; \n     geometry . field ( \"STR\" , Arrays . asList ( point , polygon ) ) ; \n     test1 . field ( \"STR\" , geometry ) ; \n     test1 . save ( ) ; \n     List < ODocument > execute = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(execute.size(),1);\n}",
                            "oracle": "Assert.assertEquals(execute.size(),1);",
                            "oracleLn": 57,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommitStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCommitStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testComparisonOfShorts",
                            "startLn": 1490,
                            "endLn": 1506,
                            "testMethod": "@Test\n public void testComparisonOfShorts ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1499,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODatabaseImportTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "exportImportOnlySchemaTest",
                            "startLn": 19,
                            "endLn": 48,
                            "testMethod": "@Test\n public void exportImportOnlySchemaTest ( ) throws IOException {\n     ODatabaseDocument db = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) ) ; \n     db . create ( ) ; \n     db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) ; \n     ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; \n     ODatabaseExport export = new ODatabaseExport ( ( ODatabaseDocumentInternal ) db , output , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     export . setOptions ( \"STR\" ) ; \n     export . exportDatabase ( ) ; \n     db . drop ( ) ; \n     ODatabaseDocument dbImp = new ODatabaseDocumentTx ( \"STR\" + ODatabaseImportTest . class . getSimpleName ( ) ) ; \n     dbImp . create ( ) ; \n     ODatabaseImport importer = new ODatabaseImport ( ( ODatabaseDocumentInternal ) dbImp , new ByteArrayInputStream ( output . toByteArray ( ) ) , new OCommandOutputListener ( ) { \n @Override\n public void onMessage ( String iText ) { \n } } ) ; \n     importer . importDatabase ( ) ; \n     Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"STR\"));",
                            "oracleLn": 33,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java",
                            "focalName": "existsClass",
                            "focalStartLn": 56,
                            "focalEndLn": 56,
                            "focalMethod": " boolean existsClass ( String iClassName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionAbsoluteValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 26,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionAbsoluteValue ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPositiveBigDecimal",
                            "startLn": 124,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testPositiveBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 128,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OSelectStatementTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testTranslateLucene",
                            "startLn": 739,
                            "endLn": 745,
                            "testMethod": "@Test\n public void testTranslateLucene ( ) {\n     OSelectStatement stm = ( OSelectStatement ) checkRightSyntax ( \"STR\" ) ; \n     stm . whereClause . getBaseExpression ( ) . translateLuceneOperator ( ) ; \n     Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(stm.whereClause.toString().contains(\"STR\"));",
                            "oracleLn": 743,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/SimpleNode.java",
                            "focalName": "toString",
                            "focalStartLn": 115,
                            "focalEndLn": 119,
                            "focalMethod": " public String toString ( ) { \n StringBuilder result = new StringBuilder ( ) ; \n toString ( null , result ) ; \n return result . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLet3",
                            "startLn": 2061,
                            "endLn": 2071,
                            "testMethod": "@Test\n public void testLet3 ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     printExecutionPlan ( result ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 2065,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        },
                        {
                            "testName": "testIndexPrefixUsage",
                            "startLn": 3373,
                            "endLn": 3388,
                            "testMethod": "@Test\n public void testIndexPrefixUsage ( ) {\n     String className = \"STR\" ; \n     db . command ( \"STR\" + className ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" + className + \"STR\" ) . close ( ) ; \n     db . command ( \"STR\" + className + \"STR\" ) . close ( ) ; \n     OResultSet result = db . query ( \"STR\" + className + \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 3382,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCreateReadOnlyFalseProperty",
                            "startLn": 203,
                            "endLn": 220,
                            "testMethod": "@Test\n public void testCreateReadOnlyFalseProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty nameProperty = companyClass . getProperty ( PROP_NAME ) ; \n     assertEquals(nameProperty.getName(),PROP_NAME);\n}",
                            "oracle": "assertEquals(nameProperty.getName(),PROP_NAME);",
                            "oracleLn": 211,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 289,
                            "endLn": 313,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 297,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OETLFieldTransformerTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRemove",
                            "startLn": 78,
                            "endLn": 89,
                            "testMethod": "@Test\n public void testRemove ( ) {\n     configure ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(1,getResult().size());\n}",
                            "oracle": "assertEquals(1,getResult().size());",
                            "oracleLn": 82,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BinaryComparatorCompareTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BinaryComparatorCompareTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testDatetime",
                            "startLn": 49,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testDatetime ( ) throws ParseException {\n     testCompareNumber ( OType . DATETIME , 10l ) ; \n     final SimpleDateFormat format = new SimpleDateFormat ( OStorageConfiguration . DEFAULT_DATETIME_FORMAT ) ; \n     String now1 = format . format ( new Date ( ) ) ; \n     Date now = format . parse ( now1 ) ; \n     Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);\n}",
                            "oracle": "Assert.assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);",
                            "oracleLn": 55,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OBinaryComparator.java",
                            "focalName": "compare",
                            "focalStartLn": 51,
                            "focalEndLn": 51,
                            "focalMethod": " int compare ( OBinaryField iValue1 , OBinaryField iValue2 ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "apvidv\u0101rdi",
                            "startLn": 2369,
                            "endLn": 2373,
                            "testMethod": "@Test\n public void apvidv\u0101rdi ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(w.isRecognized());\n}",
                            "oracle": "assertFalse(w.isRecognized());",
                            "oracleLn": 2372,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "leksikoni",
                            "startLn": 1250,
                            "endLn": 1254,
                            "testMethod": "@Test\n public void leksikoni ( ) {\n     Word pokemons = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertFalse(pokemons.isRecognized());\n}",
                            "oracle": "assertFalse(pokemons.isRecognized());",
                            "oracleLn": 1253,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TokenizeTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 40,
                        "endLn": 44,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) throws Exception { \n loc\u012bt\u0101js = new Analyzer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "Laura10Aug",
                            "startLn": 421,
                            "endLn": 435,
                            "testMethod": "@Test\n public void Laura10Aug ( ) {\n     LinkedList < Word > tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(2,tokens.size());\n}",
                            "oracle": "assertEquals(2,tokens.size());",
                            "oracleLn": 424,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AnnotationFilterTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testLocalWarmupFilter",
                            "startLn": 37,
                            "endLn": 45,
                            "testMethod": "@Test\n public void testLocalWarmupFilter ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . withFilter ( new PrepareFilter ( false ) ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 40,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "WorkerQueryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n list = new LinkedList < WorkerData > ( ) ; \n agent1 = agentAddress ( 1 ) ; \n agent2 = agentAddress ( 2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "versionSpec",
                            "startLn": 42,
                            "endLn": 53,
                            "testMethod": "@Test\n public void versionSpec ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     List < WorkerData > result = new WorkerQuery ( ) . setVersionSpec ( \"STR\" ) . execute ( list ) ; \n     assertEquals(asList(list.get(1),list.get(3)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(1),list.get(3)),result);",
                            "oracleLn": 49,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "TestContainer_BasicTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 27,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void before ( ) { \n ExceptionReporter . reset ( ) ; \n userDir = setupFakeUserDir ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIsRunning",
                            "startLn": 78,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testIsRunning ( ) throws Exception {\n     testContainer = createTestContainer ( new BaseTest ( ) ) ; \n     assertFalse(testContainer.isRunning());\n}",
                            "oracle": "assertFalse(testContainer.isRunning());",
                            "oracleLn": 81,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java",
                            "focalName": "isRunning",
                            "focalStartLn": 161,
                            "focalEndLn": 163,
                            "focalMethod": " public boolean isRunning ( ) { \n return runStrategy == null ? false : runStrategy . isRunning ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScriptExecutorTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "setup",
                        "startLn": 17,
                        "endLn": 21,
                        "setupMethod": "@Before\n public void setup ( ) { \n driver = mock ( Driver . class ) ; \n scriptExecutor = new ScriptExecutor ( driver ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "bash",
                            "startLn": 23,
                            "endLn": 31,
                            "testMethod": "@Test\n public void bash ( ) {\n     ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation ( \"STR\" , false ) ; \n     StubPromise promise = new StubPromise ( ) ; \n     scriptExecutor . execute ( scriptOperation , promise ) ; \n     promise . assertCompletesEventually ( ) ; \n     assertTrue(promise.getAnswer()instanceofString);\n}",
                            "oracle": "assertTrue(promise.getAnswer()instanceofString);",
                            "oracleLn": 29,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/worker/ScriptExecutor.java",
                            "focalName": "execute",
                            "focalStartLn": 42,
                            "focalEndLn": 68,
                            "focalMethod": " public void execute ( final ExecuteScriptOperation operation , final Promise promise ) { \n if ( operation . isFireAndForget ( ) ) { \n promise . answer ( \"STR\" ) ; \n } String fullCommand = operation . getCommand ( ) ; \n int indexColon = fullCommand . indexOf ( \"STR\" ) ; \n String extension = fullCommand . substring ( 0 , indexColon ) ; \n final String command = fullCommand . substring ( indexColon + 1 ) ; \n final Callable < String > task ; \n if ( extension . equals ( \"STR\" ) ) { \n task = newBashScriptCallable ( command ) ; \n } else { \n task = newGenericScriptCallable ( extension , command ) ; \n } new Thread ( ( ) -> { \n try { \n String result = task . call ( ) ; \n promise . answer ( result ) ; \n } catch ( Exception e ) { \n LOGGER . warn ( \"STR\" + command , e ) ; \n promise . answer ( e ) ; \n } } ) . start ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RegistryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAgents",
                            "startLn": 67,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testGetAgents ( ) {\n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     assertEquals(2,registry.agentCount());\n}",
                            "oracle": "assertEquals(2,registry.agentCount());",
                            "oracleLn": 71,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FailureOperationTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/operations/FailureOperationTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 30,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void before ( ) { \n testCase = new TestCase ( TEST_ID ) ; \n cause = new TestException ( \"STR\" ) ; \n operation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , cause ) ; \n fullOperation = new FailureOperation ( \"STR\" , WORKER_EXCEPTION , workerAddress , null , \"STR\" , TEST_ID , null ) . setTestCase ( testCase ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetWorkerAddress",
                            "startLn": 44,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testGetWorkerAddress ( ) {\n     assertEquals(workerAddress,operation.getWorkerAddress());\n}",
                            "oracle": "assertEquals(workerAddress,operation.getWorkerAddress());",
                            "oracleLn": 46,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/operations/FailureOperation.java",
                            "focalName": "getWorkerAddress",
                            "focalStartLn": 115,
                            "focalEndLn": 120,
                            "focalMethod": " public SimulatorAddress getWorkerAddress ( ) { \n if ( workerAddress == null ) { \n return null ; \n } return SimulatorAddress . fromString ( workerAddress ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SiteMapParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/SiteMapParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 37,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new SiteMapParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSitemapParsingNoMT",
                            "startLn": 210,
                            "endLn": 229,
                            "testMethod": "@Test\n public void testSitemapParsingNoMT ( ) throws IOException {\n     Map parserConfig = new HashMap ( ) ; \n     parserConfig . put ( \"STR\" , true ) ; \n     parserConfig . put ( \"STR\" , \"STR\" ) ; \n     bolt . prepare ( parserConfig , TestUtil . getMockedTopologyContext ( ) , new OutputCollector ( output ) ) ; \n     Metadata metadata = new Metadata ( ) ; \n     parse ( \"STR\" , \"STR\" , metadata ) ; \n     Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());\n}",
                            "oracle": "Assert.assertEquals(6,output.getEmitted(Constants.StatusStreamName).size());",
                            "oracleLn": 218,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicIndexingTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupIndexerBolt",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupIndexerBolt ( ) { \n bolt = new DummyIndexer ( ) ; \n setupIndexerBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMissingCanonicalParamConfiguration",
                            "startLn": 136,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testMissingCanonicalParamConfiguration ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));",
                            "oracleLn": 145,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "setValue",
                            "focalStartLn": 125,
                            "focalEndLn": 129,
                            "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testInvalidURI",
                            "startLn": 235,
                            "endLn": 263,
                            "testMethod": "@Test\n public void testInvalidURI ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( true , true ) ; \n     String nonURI = \"STR\" ; \n     URL testSourceUrl = new URL ( nonURI ) ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , nonURI ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 242,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSameChars",
                            "startLn": 65,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));",
                            "oracleLn": 67,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "repeatChar",
                            "focalStartLn": 1233,
                            "focalEndLn": 1239,
                            "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "VerbsTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testInitialized",
                            "startLn": 83,
                            "endLn": 88,
                            "testMethod": "@Test\n public void testInitialized ( ) {\n     Verb actual = Verbs . initialized ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 86,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "initialized",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public static Verb initialized ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStatement",
                            "startLn": 77,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testStatement ( ) {\n     Statement actual = new Statement ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 80,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "Statement",
                            "focalStartLn": 23,
                            "focalEndLn": 23,
                            "focalMethod": " public Statement ( ) { \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RegressionTest",
                    "classPath": "src/test/java/com/basistech/tclre/RegressionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testStockSymbol",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testStockSymbol ( ) throws Exception {\n     String exp = \"STR\" ; \n     RePattern pattern = HsrePattern . compile ( exp , EnumSet . of ( PatternFlags . ADVANCED ) ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.find());\n}",
                            "oracle": "assertTrue(matcher.find());",
                            "oracleLn": 61,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "find",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": " boolean find ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testPullRequest",
                            "startLn": 80,
                            "endLn": 83,
                            "testMethod": "@Test\n public void testPullRequest ( ) {\n     assertEquals(\"STR\",newShippable(env()).getPullRequest());\n}",
                            "oracle": "assertEquals(\"STR\",newShippable(env()).getPullRequest());",
                            "oracleLn": 82,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getPullRequest",
                            "focalStartLn": 76,
                            "focalEndLn": 83,
                            "focalMethod": "@Override\n public String getPullRequest ( ) { \n String pullRequest = getProperty ( SHIPPABLE_PULL_REQUEST ) ; \n if ( \"STR\" . equals ( pullRequest ) ) { \n return null ; \n } return pullRequest ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScanSourceLoaderTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/source/ScanSourceLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testLoadSource",
                            "startLn": 68,
                            "endLn": 84,
                            "testMethod": "@Test\n public void testLoadSource ( ) throws Exception {\n     File dir = folder . newFolder ( \"STR\" , \"STR\" , \"STR\" ) ; \n     File fileA = new File ( dir , \"STR\" ) ; \n     File fileB = new File ( dir , \"STR\" ) ; \n     TestIoUtil . writeFileContent ( \"STR\" , fileA ) ; \n     TestIoUtil . writeFileContent ( \"STR\" , fileB ) ; \n     ScanSourceLoader sourceLoader = new ScanSourceLoader ( folder . getRoot ( ) , folder . getRoot ( ) , \"STR\" ) ; \n     Source sourceA = sourceLoader . load ( fileA . getName ( ) ) ; \n     assertEquals(\"STR\",sourceA.getName());\n}",
                            "oracle": "assertEquals(\"STR\",sourceA.getName());",
                            "oracleLn": 77,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java",
                            "focalName": "getName",
                            "focalStartLn": 57,
                            "focalEndLn": 60,
                            "focalMethod": "@JsonIgnore\n public String getName ( ) { \n return name ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "dbmdz",
            "repoName": "iiif-apis",
            "subRepos": [],
            "commitSHA": "9cee1ae168e761f2d3f78b2204d6a55416ecb1af",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SpecExamplesSerializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/auth/SpecExamplesSerializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 27,
                        "endLn": 30,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testKioskPattern",
                            "startLn": 69,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testKioskPattern ( ) throws IOException , JSONException {\n     AccessCookieService service = new AccessCookieService ( \"STR\" , AuthPattern . KIOSK ) ; \n     service . setLabel ( \"STR\" ) ; \n     service . setFailureHeader ( \"STR\" ) ; \n     service . setFailureDescription ( \"STR\" ) ; \n     service . setServices ( Collections . emptyList ( ) ) ; \n     assertSerializationEqualsSpec(service,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(service,\"STR\");",
                            "oracleLn": 76,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/auth/AccessCookieService.java",
                            "focalName": "setServices",
                            "focalStartLn": 173,
                            "focalEndLn": 175,
                            "focalMethod": " public void setServices ( List < AuthService > services ) { \n this . services = services ; \n } "
                        }
                    ]
                },
                {
                    "className": "PropertyValueTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/PropertyValueTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "multiValuedLanguage",
                            "startLn": 32,
                            "endLn": 45,
                            "testMethod": "@Test\n public void multiValuedLanguage ( ) throws Exception {\n     IiifObjectMapper mapper = new IiifObjectMapper ( ) ; \n     PropertyValue propVal = new PropertyValue ( ) ; \n     propVal . addValue ( Locale . ENGLISH , \"STR\" , \"STR\" ) ; \n     String json = mapper . writeValueAsString ( propVal ) ; \n     assertThat(json).isEqualTo(\"STR\".replace(\"STR\",\"STR\"));\n}",
                            "oracle": "assertThat(json).isEqualTo(\"STR\".replace(\"STR\",\"STR\"));",
                            "oracleLn": 38,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/PropertyValue.java",
                            "focalName": "addValue",
                            "focalStartLn": 61,
                            "focalEndLn": 68,
                            "focalMethod": " public PropertyValue addValue ( Locale language , String first , String ... rest ) { \n if ( this . localizations . containsKey ( language ) ) { \n this . localizations . get ( language ) . addAll ( Lists . asList ( first , rest ) ) ; \n } else { \n setValues ( language , first , rest ) ; \n } return this ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ParserTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/parse/ParserTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 44,
                        "endLn": 47,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n pars . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "emptyString",
                            "startLn": 154,
                            "endLn": 158,
                            "testMethod": "@Test\n void emptyString ( ) throws IOException {\n     assertParse(\"STR\",mutGraph().add(mutNode(\"STR\"),mutNode(\"STR\").add(\"STR\",Label.of(\"STR\"))));\n}",
                            "oracle": "assertParse(\"STR\",mutGraph().add(mutNode(\"STR\"),mutNode(\"STR\").add(\"STR\",Label.of(\"STR\"))));",
                            "oracleLn": 156,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/MutableGraph.java",
                            "focalName": "add",
                            "focalStartLn": 113,
                            "focalEndLn": 115,
                            "focalMethod": " public MutableGraph add ( LinkSource ... sources ) { \n return add ( asList ( sources ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 43,
                        "endLn": 46,
                        "setupMethod": "@BeforeAll\n static void init ( ) { \n Graphviz . useEngine ( new AbstractGraphvizEngineTest . GraphvizEngineDummy ( ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "withTotalMemory",
                            "startLn": 80,
                            "endLn": 86,
                            "testMethod": "@Test\n void withTotalMemory ( ) {\n     final Graph graph = graph ( ) . with ( node ( \"STR\" ) . link ( \"STR\" ) ) ; \n     final String result = Graphviz . fromGraph ( graph ) . totalMemory ( 32000 ) . render ( SVG ) . toString ( ) ; \n     assertThat(result,is(\"STR\"+\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\"));\n}",
                            "oracle": "assertThat(result,is(\"STR\"+\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\"));",
                            "oracleLn": 84,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/service/SystemUtils.java",
                            "focalName": "uriPathOf",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public static String uriPathOf ( File path ) { \n return uriPathOf ( path . getAbsolutePath ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizServerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizServerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "cmdLineArgs",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n void cmdLineArgs ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 57,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        }
                    ]
                },
                {
                    "className": "ColorTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ColorTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "rgbOk",
                            "startLn": 56,
                            "endLn": 59,
                            "testMethod": "@Test\n void rgbOk ( ) {\n     assertColor(attr(\"STR\",\"STR\"),Color.rgb(\"STR\"));\n}",
                            "oracle": "assertColor(attr(\"STR\",\"STR\"),Color.rgb(\"STR\"));",
                            "oracleLn": 58,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Color.java",
                            "focalName": "rgb",
                            "focalStartLn": 91,
                            "focalEndLn": 97,
                            "focalMethod": " public static Color rgb ( String rgb ) { \n final String val = rgb . startsWith ( \"STR\" ) ? rgb . substring ( 1 ) : rgb ; \n if ( val . length ( ) != 6 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } return new Color ( \"STR\" + val ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PerMessageDeflateExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAcceptProvidedExtensionAsServer",
                            "startLn": 51,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testAcceptProvidedExtensionAsServer ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertTrue(deflateExtension.acceptProvidedExtensionAsServer(\"STR\"));\n}",
                            "oracle": "assertTrue(deflateExtension.acceptProvidedExtensionAsServer(\"STR\"));",
                            "oracleLn": 54,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "acceptProvidedExtensionAsServer",
                            "focalStartLn": 252,
                            "focalEndLn": 272,
                            "focalMethod": "@Override\n public boolean acceptProvidedExtensionAsServer ( String inputExtension ) { \n String [ ] requestedExtensions = inputExtension . split ( \"STR\" ) ; \n for ( String extension : requestedExtensions ) { \n ExtensionRequestData extensionData = ExtensionRequestData . parseExtensionRequest ( extension ) ; \n if ( ! EXTENSION_REGISTERED_NAME . equalsIgnoreCase ( extensionData . getExtensionName ( ) ) ) { \n continue ; \n } Map < String , String > headers = extensionData . getExtensionParameters ( ) ; \n requestedParameters . putAll ( headers ) ; \n if ( requestedParameters . containsKey ( CLIENT_NO_CONTEXT_TAKEOVER ) ) { \n clientNoContextTakeover = true ; \n } return true ; \n } return false ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ProfileUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 43,
                            "endLn": 58,
                            "testMethod": "@Test\n public void simple ( ) throws IOException {\n     InputStream is = getClass ( ) . getResourceAsStream ( \"STR\" ) ; \n     assertNotNull(is);\n}",
                            "oracle": "assertNotNull(is);",
                            "oracleLn": 46,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "use",
                            "focalStartLn": 128,
                            "focalEndLn": 130,
                            "focalMethod": " public boolean use ( String inc ) { \n return ! excludes . contains ( inc ) && includes . contains ( inc ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AJsonSerHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testArray1",
                            "startLn": 200,
                            "endLn": 211,
                            "testMethod": "@Test\n public void testArray1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . startArray ( ) ; \n     ser . writeBooleanLiteral ( true ) ; \n     ser . endArray ( ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 208,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "endArray",
                            "focalStartLn": 67,
                            "focalEndLn": 72,
                            "focalMethod": " public void endArray ( ) throws IOException { \n checkInArray ( ) ; \n state . pop ( ) ; \n out . write ( \"STR\" ) ; \n afterValueWritten ( ) ; \n } "
                        },
                        {
                            "testName": "testNegativeNumber1",
                            "startLn": 82,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testNegativeNumber1 ( ) throws IOException {\n     final ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; \n     final AJsonSerHelper ser = new AJsonSerHelper ( baos ) ; \n     ser . writeNumberLiteral ( - 1234567890 , 1 ) ; \n     final String result = new String ( baos . toByteArray ( ) , \"STR\" ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 88,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java",
                            "focalName": "writeNumberLiteral",
                            "focalStartLn": 110,
                            "focalEndLn": 131,
                            "focalMethod": " public void writeNumberLiteral ( long value , int numFracDigits ) throws IOException { \n checkAcceptsValueAndPrefixComma ( ) ; \n if ( value < 0 ) { \n out . write ( '-' ) ; \n value = - value ; \n } if ( numFracDigits == 0 ) { \n out . write ( String . valueOf ( value ) ) ; \n } else { \n final long intPart = value / TEN_POW [ numFracDigits ] ; \n final String fracPart = String . valueOf ( 1_000_000_000 + value % TEN_POW [ numFracDigits ] ) . substring ( 10 - numFracDigits , 10 ) ; \n out . write ( String . valueOf ( intPart ) ) ; \n out . write ( \"STR\" ) ; \n out . write ( fracPart ) ; \n } afterValueWritten ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRoutePrioritizerRemoveRouteNoRouteMatches",
                            "startLn": 548,
                            "endLn": 555,
                            "testMethod": "@Test\n public void testRoutePrioritizerRemoveRouteNoRouteMatches ( ) {\n     DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer ( ) ; \n     prioritizer . addRoute ( \"STR\" , 100 , NotImplementedHandler . class ) ; \n     prioritizer . removeRoute ( \"STR\" ) ; \n     Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(1,prioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 553,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JMXJvmIdConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 54,
                        "endLn": 78,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . factory = new JMXJvmIdConnectionFactory ( \"STR\" ) ; \n this . mockVirtualMachine = Mockito . mock ( VirtualMachine . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAttacher = Mockito . mock ( VirtualMachineAttacher . class ) ; \n this . mockJmxServiceUrlFactory = Mockito . mock ( JMXServiceUrlFactory . class ) ; \n this . mockJmxConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMbeanConnectorFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMbeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockAgentProperties = Mockito . mock ( Properties . class ) ; \n this . mockSystemProperties = Mockito . mock ( Properties . class ) ; \n Mockito . when ( this . mockJmxServiceUrlFactory . createJMXServiceUrl ( \"STR\" ) ) . thenReturn ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockJmxConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMbeanConnectorFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMbeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateConnection",
                            "startLn": 121,
                            "endLn": 138,
                            "testMethod": "@Test\n public void testCreateConnection ( ) throws Exception {\n     this . initFactory ( ) ; \n     Mockito . when ( this . mockAttacher . attach ( \"STR\" ) ) . thenReturn ( this . mockVirtualMachine ) ; \n     Mockito . when ( this . mockVirtualMachine . getAgentProperties ( ) ) . thenReturn ( this . mockAgentProperties ) ; \n     Mockito . when ( this . mockVirtualMachine . getSystemProperties ( ) ) . thenReturn ( this . mockSystemProperties ) ; \n     Mockito . when ( this . mockAgentProperties . getProperty ( JMXJvmIdConnectionFactory . COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ) . thenReturn ( \"STR\" ) ; \n     MBeanAccessConnection result = this . factory . createConnection ( ) ; \n     assertSame(result,this.mockJmxMbeanConnection);\n}",
                            "oracle": "assertSame(result,this.mockJmxMbeanConnection);",
                            "oracleLn": 129,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java",
                            "focalName": "createConnection",
                            "focalStartLn": 104,
                            "focalEndLn": 132,
                            "focalMethod": "@Override\n public MBeanAccessConnection createConnection ( ) throws IOException { \n JMXMBeanConnection result = null ; \n try { \n VirtualMachine vm = this . attacher . attach ( jvmId ) ; \n String url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n if ( url == null ) { \n String javaHome = vm . getSystemProperties ( ) . getProperty ( \"STR\" ) ; \n String agent = javaHome + File . separator + \"STR\" + File . separator + \"STR\" ; \n vm . loadAgent ( agent ) ; \n url = vm . getAgentProperties ( ) . getProperty ( COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY ) ; \n } if ( url != null ) { \n JMXServiceURL jmxUrl = this . jmxServiceUrlFactory . createJMXServiceUrl ( url ) ; \n JMXConnector connector = this . jmxConnectorFactoryDelegate . connect ( jmxUrl ) ; \n result = this . jmxmBeanConnectionFactory . create ( connector ) ; \n } else { \n log . warn ( \"STR\" , this . jvmId ) ; \n } } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) { \n log . warn ( \"STR\" , this . jvmId , exc ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "JmxAttributePollerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 77,
                        "endLn": 111,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . polled001 = new TestDataClass001 ( ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polledObjects . add ( \"STR\" ) ; \n this . polledObjects . add ( polled001 ) ; \n this . mockMBeanAccessConnectionFactory = Mockito . mock ( MBeanAccessConnectionFactory . class ) ; \n this . mockScheduler = Mockito . mock ( Scheduler . class ) ; \n this . mockBatchCapableAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanAccessConnection . class ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockBatchPollProcessor = Mockito . mock ( BatchPollProcessor . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockTestHooks = Mockito . mock ( JmxAttributePoller . ConcurrencyTestHooks . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . poller = new JmxAttributePoller ( this . polledObjects ) ; \n this . processes = new LinkedList < > ( ) ; \n this . executionSlips = new LinkedList < > ( ) ; \n Answer < SchedulerProcessExecutionSlip > startProcessAnswer = createProcessExecutionSlipAnswer ( null , null ) ; \n Mockito . when ( this . mockScheduler . startProcess ( Mockito . any ( SchedulerProcess . class ) ) ) . thenAnswer ( startProcessAnswer ) ; \n this . testObjectName001 = new ObjectName ( this . TEST_ONAME_001_STR ) ; \n this . accessConnectionFactoryDesc = \"STR\" ; \n Mockito . when ( this . mockMBeanAccessConnectionFactory . getTargetDescription ( ) ) . thenReturn ( this . accessConnectionFactoryDesc ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetAttributeInjector",
                            "startLn": 143,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetSetAttributeInjector ( ) throws Exception {\n     assertNotNull(this.poller.getAttributeInjector());\n}",
                            "oracle": "assertNotNull(this.poller.getAttributeInjector());",
                            "oracleLn": 145,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java",
                            "focalName": "getAttributeInjector",
                            "focalStartLn": 103,
                            "focalEndLn": 105,
                            "focalMethod": " public AttributeInjector getAttributeInjector ( ) { \n return attributeInjector ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fizzed",
            "repoName": "jne",
            "subRepos": [],
            "commitSHA": "783226a1fb002d304d22f841870c5c73575fc994",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JNETest",
                    "classPath": "src/test/java/com/fizzed/jne/JNETest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "findFile",
                            "startLn": 34,
                            "endLn": 58,
                            "testMethod": "@Test\n public void findFile ( ) throws IOException , ExtractException {\n     Options options = new Options ( ) ; \n     options . setOperatingSystem ( OperatingSystem . LINUX ) ; \n     options . setHardwareArchitecture ( HardwareArchitecture . X64 ) ; \n     File file ; \n     file = JNE . findFile ( \"STR\" , options ) ; \n     assertThat(file,is(not(nullValue())));\n}",
                            "oracle": "assertThat(file,is(not(nullValue())));",
                            "oracleLn": 41,
                            "focalFile": "src/main/java/com/fizzed/jne/JNE.java",
                            "focalName": "findFile",
                            "focalStartLn": 320,
                            "focalEndLn": 339,
                            "focalMethod": " synchronized static public File findFile ( String name , Options options ) throws IOException { \n if ( options == null ) { \n options = DEFAULT_OPTIONS ; \n } File file = JNE . find ( name , name , options , options . getOperatingSystem ( ) , options . getHardwareArchitecture ( ) ) ; \n if ( file == null ) { \n file = JNE . find ( name , name , options , options . getOperatingSystem ( ) , HardwareArchitecture . ANY ) ; \n } if ( file == null ) { \n file = JNE . find ( name , name , options , OperatingSystem . ANY , HardwareArchitecture . ANY ) ; \n } return file ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}