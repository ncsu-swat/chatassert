{
    "projects": [
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "HttpGetRequestTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/HttpGetRequestTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 201,
                        "endLn": 205,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n this . testServer = new TestServer ( ) ; \n this . tempFileManager = new TestTempFileManager ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testOutputOfServeSentBackToClient",
                            "startLn": 178,
                            "endLn": 195,
                            "testMethod": "@Test\n public void testOutputOfServeSentBackToClient ( ) throws Exception {\n     String responseBody = \"STR\" ; \n     this . testServer . response = Response . newFixedLengthResponse ( responseBody ) ; \n     ByteArrayOutputStream outputStream = invokeServer ( \"STR\" + HttpServerTest . URI + \"STR\" ) ; \n     String [ ] expected = { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , responseBody } ; \n     assertResponse(outputStream,expected);\n}",
                            "oracle": "assertResponse(outputStream,expected);",
                            "oracleLn": 184,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "newFixedLengthResponse",
                            "focalStartLn": 431,
                            "focalEndLn": 433,
                            "focalMethod": " public static Response newFixedLengthResponse ( String msg ) { \n return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "khennig",
            "repoName": "jpql-querybuilder",
            "subRepos": [],
            "commitSHA": "61206f7c42631c67a49603b9beddccf48a8112e8",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OrderColumnTest",
                    "classPath": "src/test/java/com/tri/persistence/jpql/OrderColumnTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "renderDesc",
                            "startLn": 26,
                            "endLn": 32,
                            "testMethod": "@Test\n public void renderDesc ( ) {\n     OrderColumn oc = new OrderColumn ( \"STR\" , Order . DESC ) ; \n     assertThat(oc.render()).isEqualTo(\"STR\");\n}",
                            "oracle": "assertThat(oc.render()).isEqualTo(\"STR\");",
                            "oracleLn": 29,
                            "focalFile": "src/main/java/com/tri/persistence/jpql/OrderColumn.java",
                            "focalName": "render",
                            "focalStartLn": 37,
                            "focalEndLn": 43,
                            "focalMethod": " public String render ( ) { \n StringBuilder builder = new StringBuilder ( column ) ; \n if ( order != null ) { \n builder . append ( \"STR\" ) . append ( getOrder ( ) . name ( ) ) ; \n } return builder . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OCommandExecutorSQLSelectTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 51,
                        "endLn": 180,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" + \"STR\" + \"STR\" + \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n if ( ! schema . existsClass ( \"STR\" ) ) { \n schema . createClass ( \"STR\" , 1 , null ) ; \n } ORecordIteratorClass < ODocument > iter = db . browseClass ( \"STR\" ) ; \n while ( iter . hasNext ( ) ) { \n iter . next ( ) . delete ( ) ; \n } String rowModel = \"STR\" ; \n for ( int i = 0 ; \n i < 26 ; \n ++ i ) { \n String l = String . valueOf ( ( char ) ( 'A' + i ) ) ; \n String json = String . format ( rowModel , l , i ) ; \n ODocument doc = db . newInstance ( \"STR\" ) ; \n doc . fromJSON ( json ) ; \n doc . save ( ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initExpandSkipLimit ( db ) ; \n initMassiveOrderSkipLimit ( db ) ; \n initDatesSet ( db ) ; \n initMatchesWithRegex ( db ) ; \n initDistinctLimit ( db ) ; \n initLinkListSequence ( db ) ; \n initMaxLongNumber ( db ) ; \n initFilterAndOrderByTest ( db ) ; \n initComplexFilterInSquareBrackets ( db ) ; \n initCollateOnLinked ( db ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testEmbeddedMapOfMapsContainsValue",
                            "startLn": 1528,
                            "endLn": 1545,
                            "testMethod": "@Test\n public void testEmbeddedMapOfMapsContainsValue ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),1);\n}",
                            "oracle": "assertEquals(results.size(),1);",
                            "oracleLn": 1537,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testInvertedIndexedCondition",
                            "startLn": 1547,
                            "endLn": 1574,
                            "testMethod": "@Test\n public void testInvertedIndexedCondition ( ) {\n     String className = \"STR\" ; \n     db . command ( new OCommandSQL ( \"STR\" + className ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + className + \"STR\" ) ) . execute ( ) ; \n     List < ODocument > results = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" + className + \"STR\" ) ) ; \n     assertEquals(results.size(),2);\n}",
                            "oracle": "assertEquals(results.size(),2);",
                            "oracleLn": 1555,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 754,
                            "focalEndLn": 758,
                            "focalMethod": "@Override\n public < RET extends List < ? > > RET query ( OQuery < ? > iCommand , Object ... iArgs ) { \n checkOpenness ( ) ; \n return internal . query ( iCommand , iArgs ) ; \n } "
                        },
                        {
                            "testName": "testDoNotUseIndexWithOrNotIndexed",
                            "startLn": 348,
                            "endLn": 356,
                            "testMethod": "@Test\n public void testDoNotUseIndexWithOrNotIndexed ( ) throws Exception {\n     long idxUsagesBefore = indexUsages ( db ) ; \n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(indexUsages(db),idxUsagesBefore);\n}",
                            "oracle": "assertEquals(indexUsages(db),idxUsagesBefore);",
                            "oracleLn": 352,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ORemoteTransactionMessagesTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/ORemoteTransactionMessagesTest.java",
                    "subRepo": "client",
                    "classTests": [
                        {
                            "testName": "testBeginTransactionEmptyWriteRead",
                            "startLn": 23,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testBeginTransactionEmptyWriteRead ( ) throws IOException {\n     MockChannel channel = new MockChannel ( ) ; \n     OBeginTransactionRequest request = new OBeginTransactionRequest ( 0 , false , true , null , null ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     OBeginTransactionRequest readRequest = new OBeginTransactionRequest ( ) ; \n     readRequest . read ( channel , 0 , null ) ; \n     assertFalse(readRequest.isHasContent());\n}",
                            "oracle": "assertFalse(readRequest.isHasContent());",
                            "oracleLn": 31,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBeginTransactionRequest.java",
                            "focalName": "isHasContent",
                            "focalStartLn": 150,
                            "focalEndLn": 152,
                            "focalMethod": " public boolean isHasContent ( ) { \n return hasContent ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCustomSQLFunctionsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/sql/OCustomSQLFunctionsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 20,
                        "endLn": 24,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OCustomSQLFunctionsTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAbsDouble",
                            "startLn": 49,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testAbsDouble ( ) {\n     List < ODocument > result = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     assertTrue((Double)result.get(0).field(\"STR\")==5.0);\n}",
                            "oracle": "assertTrue((Double)result.get(0).field(\"STR\")==5.0);",
                            "oracleLn": 52,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORollbackStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ORollbackStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBegin",
                            "startLn": 27,
                            "endLn": 40,
                            "testMethod": "@Test\n public void testBegin ( ) {\n     Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());\n}",
                            "oracle": "Assert.assertTrue(db.getTransaction()==null||!db.getTransaction().isActive());",
                            "oracleLn": 29,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OLuceneSearchOnIndexFunctionTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/functions/OLuceneSearchOnIndexFunctionTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 18,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n InputStream stream = ClassLoader . getSystemResourceAsStream ( \"STR\" ) ; \n db . execute ( \"STR\" , getScriptFromStream ( stream ) ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n } @Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldFindNothingOnEmptyQuery",
                            "startLn": 57,
                            "endLn": 68,
                            "testMethod": "@Test\n public void shouldFindNothingOnEmptyQuery ( ) throws Exception {\n     OResultSet resultSet = db . query ( \"STR\" ) ; \n     assertThat(resultSet).hasSize(0);\n}",
                            "oracle": "assertThat(resultSet).hasSize(0);",
                            "oracleLn": 60,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 863,
                            "focalEndLn": 865,
                            "focalMethod": " default OResultSet query ( String query , Object ... args ) throws OCommandSQLParsingException , OCommandExecutionException { \n throw new UnsupportedOperationException ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTypes",
                            "startLn": 192,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testGetTypes ( ) {\n     final OType [ ] result = propertyIndexByKey . getTypes ( ) ; \n     Assert.assertEquals(result.length,1);\n}",
                            "oracle": "Assert.assertEquals(result.length,1);",
                            "oracleLn": 195,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java",
                            "focalName": "getTypes",
                            "focalStartLn": 133,
                            "focalEndLn": 135,
                            "focalMethod": " public OType [ ] getTypes ( ) { \n return new OType [ ] { \n keyType } ; \n } "
                        }
                    ]
                },
                {
                    "className": "CharSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n charSerializer = new OCharSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeInWALChanges",
                            "startLn": 91,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testSerializeInWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     final ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     final byte [ ] data = new byte [ FIELD_SIZE ] ; \n     charSerializer . serializeNative ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(charSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 99,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OCharSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 142,
                            "focalEndLn": 145,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return CHAR_SIZE ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 21,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n compositeIndex = new OCompositeIndexDefinition ( \"STR\" ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetFields",
                            "startLn": 29,
                            "endLn": 36,
                            "testMethod": "@Test\n public void testGetFields ( ) {\n     final List < String > fields = compositeIndex . getFields ( ) ; \n     Assert.assertEquals(fields.size(),2);\n}",
                            "oracle": "Assert.assertEquals(fields.size(),2);",
                            "oracleLn": 32,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinition.java",
                            "focalName": "getFields",
                            "focalStartLn": 111,
                            "focalEndLn": 117,
                            "focalMethod": " public List < String > getFields ( ) { \n final List < String > fields = new LinkedList < String > ( ) ; \n for ( final OIndexDefinition indexDefinition : indexDefinitions ) { \n fields . addAll ( indexDefinition . getFields ( ) ) ; \n } return Collections . unmodifiableList ( fields ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TrackedListTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRemoveIndexOne",
                            "startLn": 446,
                            "endLn": 476,
                            "testMethod": "@Test\n public void testRemoveIndexOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 450,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 29,
                        "endLn": 63,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAliasesWithSubquery",
                            "startLn": 1367,
                            "endLn": 1374,
                            "testMethod": "@Test\n public void testAliasesWithSubquery ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}",
                            "oracle": "assertEquals(1,qResult.size());",
                            "oracleLn": 1370,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OWALPageV2ChangesPortionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageV2ChangesPortionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 20,
                        "endLn": 23,
                        "setupMethod": "@Before\n public void before ( ) { \n Orient . instance ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSingleByteValue",
                            "startLn": 83,
                            "endLn": 95,
                            "testMethod": "@Test\n public void testSingleByteValue ( ) {\n     byte [ ] data = new byte [ 1024 ] ; \n     ByteBuffer pointer = ByteBuffer . wrap ( data ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     pointer . put ( 64 , ( byte ) 31 ) ; \n     OWALPageChangesPortion changesCollector = new OWALPageChangesPortion ( 1024 ) ; \n     changesCollector . setByteValue ( pointer , ( byte ) 42 , 64 ) ; \n     Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);\n}",
                            "oracle": "Assert.assertEquals(changesCollector.getByteValue(pointer,64),42);",
                            "oracleLn": 90,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALPageChangesPortion.java",
                            "focalName": "getByteValue",
                            "focalStartLn": 107,
                            "focalEndLn": 114,
                            "focalMethod": "@Override\n public byte getByteValue ( ByteBuffer pointer , int offset ) { \n byte [ ] data = new byte [ 1 ] ; \n readData ( pointer , offset , data ) ; \n return data [ 0 ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "OJsonWithCustom",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OJsonWithCustom.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testCustomField",
                            "startLn": 20,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testCustomField ( ) {\n     boolean old = OGlobalConfiguration . DB_CUSTOM_SUPPORT . getValueAsBoolean ( ) ; \n     OGlobalConfiguration . DB_CUSTOM_SUPPORT . setValue ( true ) ; \n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , String . class , OType . CUSTOM ) ; \n     String json = doc . toJSON ( ) ; \n     System . out . println ( json ) ; \n     ODocument doc1 = new ODocument ( ) ; \n     doc1 . fromJSON ( json ) ; \n     assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));\n}",
                            "oracle": "assertEquals(doc.<String>field(\"STR\"),doc1.field(\"STR\"));",
                            "oracleLn": 30,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OObjectBinaryDataStorageTest",
                    "classPath": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java",
                    "subRepo": "object",
                    "classTests": [
                        {
                            "testName": "testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory",
                            "startLn": 132,
                            "endLn": 153,
                            "testMethod": "@Test\n public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping_InstantiatePojoUsingDbFactory ( ) throws IOException {\n     this . createDb ( ODocumentFieldHandlingStrategyFactory . SIMPLE ) ; \n     Driver ronnie = this . databaseTx . newInstance ( Driver . class ) ; \n     ronnie . setName ( \"STR\" ) ; \n     byte [ ] ronniePicture = randomBytes ( 1024 * 32 ) ; \n     ronnie . setImageData ( ronniePicture ) ; \n     Driver savedRonnie = this . databaseTx . save ( ronnie ) ; \n     Driver loadedRonnie = this . databaseTx . load ( new ORecordId ( savedRonnie . getId ( ) ) ) ; \n     Assert.assertNotNull(savedRonnie);\n}",
                            "oracle": "Assert.assertNotNull(savedRonnie);",
                            "oracleLn": 141,
                            "focalFile": "object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTx.java",
                            "focalName": "load",
                            "focalStartLn": 401,
                            "focalEndLn": 403,
                            "focalMethod": " public < RET > RET load ( final ORID recordId ) { \n return ( RET ) load ( recordId , null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OConnectionExecutorTransactionTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 45,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void before ( ) { \n MockitoAnnotations . initMocks ( this ) ; \n orientDb = new OrientDB ( \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDb . create ( OConnectionExecutorTransactionTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = ( ODatabaseDocumentInternal ) orientDb . open ( OConnectionExecutorTransactionTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n ONetworkProtocolData protocolData = new ONetworkProtocolData ( ) ; \n protocolData . setSerializer ( ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n Mockito . when ( connection . getDatabase ( ) ) . thenReturn ( database ) ; \n Mockito . when ( connection . getData ( ) ) . thenReturn ( protocolData ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBeginRollbackTransaction",
                            "startLn": 258,
                            "endLn": 276,
                            "testMethod": "@Test\n public void testBeginRollbackTransaction ( ) {\n     OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor ( connection , server ) ; \n     List < ORecordOperation > operations = new ArrayList < > ( ) ; \n     ODocument rec = new ODocument ( \"STR\" ) ; \n     operations . add ( new ORecordOperation ( rec , ORecordOperation . CREATED ) ) ; \n     assertFalse(database.getTransaction().isActive());\n}",
                            "oracle": "assertFalse(database.getTransaction().isActive());",
                            "oracleLn": 264,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java",
                            "focalName": "isActive",
                            "focalStartLn": 49,
                            "focalEndLn": 49,
                            "focalMethod": " boolean isActive ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testArrayRange2",
                            "startLn": 1302,
                            "endLn": 1319,
                            "testMethod": "@Test\n public void testArrayRange2 ( ) {\n     StringBuilder query = new StringBuilder ( ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     query . append ( \"STR\" ) ; \n     OResultSet result = db . query ( query . toString ( ) ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1309,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OETLCSVExtractorTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStringStartedFromDigit",
                            "startLn": 121,
                            "endLn": 132,
                            "testMethod": "@Test\n public void testStringStartedFromDigit ( ) throws Exception {\n     String cfgJson = \"STR\" ; \n     configure ( cfgJson ) ; \n     proc . execute ( ) ; \n     List < ODocument > res = getResult ( ) ; \n     assertFalse(res.isEmpty());\n}",
                            "oracle": "assertFalse(res.isEmpty());",
                            "oracleLn": 127,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TokenizeTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 40,
                        "endLn": 44,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) throws Exception { \n loc\u012bt\u0101js = new Analyzer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "singleletters",
                            "startLn": 580,
                            "endLn": 585,
                            "testMethod": "@Test\n public void singleletters ( ) {\n     LinkedList < Word > tokens ; \n     tokens = Splitting . tokenize ( loc\u012bt\u0101js , \"STR\" , false ) ; \n     assertEquals(3,tokens.size());\n}",
                            "oracle": "assertEquals(3,tokens.size());",
                            "oracleLn": 584,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Splitting.java",
                            "focalName": "tokenize",
                            "focalStartLn": 186,
                            "focalEndLn": 205,
                            "focalMethod": " public static LinkedList < Word > tokenize ( Analyzer morphoAnalyzer , String chunk , boolean bruteSplit ) { \n if ( bruteSplit ) { \n LinkedList < Word > tokens = new LinkedList < Word > ( ) ; \n if ( chunk == null ) return tokens ; \n String [ ] parts_of_string = chunk . trim ( ) . split ( \"STR\" ) ; \n for ( String part : parts_of_string ) { \n if ( part . length ( ) > 0 ) tokens . add ( ( morphoAnalyzer == null ) ? new Word ( part ) : morphoAnalyzer . analyze ( part ) ) ; \n } return tokens ; \n } else { \n return tokenize ( morphoAnalyzer , chunk ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "j\u0101m\u0101k",
                            "startLn": 706,
                            "endLn": 717,
                            "testMethod": "@Test\n public void j\u0101m\u0101k ( ) {\n     Word j\u0101m\u0101k = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(j\u0101m\u0101k.isRecognized());\n}",
                            "oracle": "assertTrue(j\u0101m\u0101k.isRecognized());",
                            "oracleLn": 709,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "mazajai",
                            "startLn": 1213,
                            "endLn": 1218,
                            "testMethod": "@Test\n public void mazajai ( ) {\n     Word mazajai = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(mazajai.isRecognized());\n}",
                            "oracle": "assertTrue(mazajai.isRecognized());",
                            "oracleLn": 1216,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "ExpediaGroup",
            "repoName": "beeju",
            "subRepos": [],
            "commitSHA": "2263c4aac9a96e93328cdff7b5d31e1a795d885e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BeejuCoreTest",
                    "classPath": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "deleteDirectory",
                            "startLn": 125,
                            "endLn": 131,
                            "testMethod": "@Test\n public void deleteDirectory ( ) throws IOException {\n     BeejuCore testCore = new BeejuCore ( ) ; \n     testCore . cleanUp ( ) ; \n     assertFalse(Files.exists(testCore.warehouseDir()));\n}",
                            "oracle": "assertFalse(Files.exists(testCore.warehouseDir()));",
                            "oracleLn": 129,
                            "focalFile": "src/main/java/com/hotels/beeju/core/BeejuCore.java",
                            "focalName": "warehouseDir",
                            "focalStartLn": 288,
                            "focalEndLn": 290,
                            "focalMethod": " public Path warehouseDir ( ) { \n return warehouseDir ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCopyFile",
                            "startLn": 338,
                            "endLn": 347,
                            "testMethod": "@Test\n public void testCopyFile ( ) throws Exception {\n     File configFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( configFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     util . copyFile ( configFile , srcDir , targetDir , \"STR\" ) ; \n     File targetFile = new File ( targetDir , \"STR\" ) ; \n     assertTrue(targetFile.exists());\n}",
                            "oracle": "assertTrue(targetFile.exists());",
                            "oracleLn": 344,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "copyFile",
                            "focalStartLn": 4093,
                            "focalEndLn": 4104,
                            "focalMethod": " public void copyFile ( File fileChanged , File srcDir , File targetDir , String targetFileName ) throws IOException { \n File targetResource = getTargetFile ( fileChanged , srcDir , targetDir , targetFileName ) ; \n try { \n FileUtils . copyFile ( fileChanged , targetResource ) ; \n info ( \"STR\" + fileChanged . getCanonicalPath ( ) + \"STR\" + targetResource . getCanonicalPath ( ) ) ; \n } catch ( FileNotFoundException ex ) { \n debug ( \"STR\" + fileChanged . getCanonicalPath ( ) ) ; \n } catch ( Exception ex ) { \n debug ( ex ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PropertyBindingSupport_bind0_NonNumericalTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NonNumericalTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_enum_nullValue",
                            "startLn": 69,
                            "endLn": 73,
                            "testMethod": "@Test\n public void bind_enum_nullValue ( ) {\n     bind0 ( testObject , \"STR\" , \"STR\" ) ; \n     assertNull(testObject.enumField);\n}",
                            "oracle": "assertNull(testObject.enumField);",
                            "oracleLn": 72,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "dbmdz",
            "repoName": "iiif-apis",
            "subRepos": [],
            "commitSHA": "9cee1ae168e761f2d3f78b2204d6a55416ecb1af",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SpecExamplesSerializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/presentation/SpecExamplesSerializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 48,
                        "endLn": 51,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAnnotationListPage",
                            "startLn": 203,
                            "endLn": 211,
                            "testMethod": "@Test\n public void testAnnotationListPage ( ) throws Exception {\n     AnnotationList list = new AnnotationList ( \"STR\" ) ; \n     list . setStartIndex ( 0 ) ; \n     list . addWithin ( new Layer ( \"STR\" ) ) ; \n     list . setNext ( new AnnotationList ( \"STR\" ) ) ; \n     list . setResources ( new ArrayList < > ( ) ) ; \n     assertSerializationEqualsSpec(list,\"STR\");\n}",
                            "oracle": "assertSerializationEqualsSpec(list,\"STR\");",
                            "oracleLn": 210,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/sharedcanvas/AnnotationList.java",
                            "focalName": "setResources",
                            "focalStartLn": 50,
                            "focalEndLn": 52,
                            "focalMethod": " public void setResources ( List < Annotation > resources ) { \n this . resources = resources ; \n } "
                        }
                    ]
                },
                {
                    "className": "SpecExamplesDeserializationTest",
                    "classPath": "src/test/java/de/digitalcollections/iiif/model/presentation/SpecExamplesDeserializationTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setup",
                        "startLn": 40,
                        "endLn": 43,
                        "setupMethod": "@BeforeEach\n public void setup ( ) { \n mapper = new IiifObjectMapper ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSvgSelector",
                            "startLn": 341,
                            "endLn": 349,
                            "testMethod": "@Test\n public void testSvgSelector ( ) throws Exception {\n     Annotation anno = readFromResources ( \"STR\" , Annotation . class ) ; \n     assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);\n}",
                            "oracle": "assertThat(anno.getResource()).isInstanceOf(SpecificResource.class);",
                            "oracleLn": 344,
                            "focalFile": "src/main/java/de/digitalcollections/iiif/model/openannotation/Annotation.java",
                            "focalName": "getResource",
                            "focalStartLn": 43,
                            "focalEndLn": 45,
                            "focalMethod": " public Resource < ? > getResource ( ) { \n return resource ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GithubTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/GithubTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 34,
                        "endLn": 37,
                        "setupMethod": "@BeforeClass\n public static void init ( ) { \n assumeMyLocalMachine ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "publicGithub",
                            "startLn": 39,
                            "endLn": 43,
                            "testMethod": "@Test\n public void publicGithub ( ) throws IOException {\n     final InputStream in = GithubLoader . forPublic ( USER , \"STR\" ) . fetchResource ( \"STR\" , - 1 ) ; \n     assertRamlStart(in);\n}",
                            "oracle": "assertRamlStart(in);",
                            "oracleLn": 42,
                            "focalFile": "src/main/java/guru/nidi/loader/url/GithubLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 85,
                            "focalEndLn": 98,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final String res = ( resourceBase == null || resourceBase . length ( ) == 0 ) ? \"STR\" : ( resourceBase + \"STR\" ) ; \n try ( final InputStream raw = fetcher . fetchFromUrl ( client , base , res + name , ifModifiedSince ) ) { \n if ( raw == null ) { \n return null ; \n } @ SuppressWarnings ( \"STR\" ) final Map < String , String > desc = new ObjectMapper ( ) . readValue ( raw , Map . class ) ; \n return fetcher . fetchFromUrl ( client , desc . get ( \"STR\" ) , \"STR\" , ifModifiedSince ) ; \n } catch ( IOException e ) { \n throw new ResourceNotFoundException ( res + name , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFind",
                            "startLn": 48,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testFind ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));\n}",
                            "oracle": "assertEquals(AOption.<String>none(),ACollectionHelper.find(Arrays.<String>asList(),len1));",
                            "oracleLn": 51,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "find",
                            "focalStartLn": 93,
                            "focalEndLn": 100,
                            "focalMethod": " public static < T , E extends Throwable > AOption < T > find ( Iterable < T > coll , APredicate < ? super T , E > pred ) throws E { \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n return AOption . some ( o ) ; \n } } return AOption . none ( ) ; \n } "
                        },
                        {
                            "testName": "testFlatten",
                            "startLn": 131,
                            "endLn": 144,
                            "testMethod": "@Test\n public void testFlatten ( ) {\n     final Set < Set < String > > set = new HashSet < > ( ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ) ; \n     set . add ( new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" ) ) ) ; \n     final Collection < String > flattened = ACollectionHelper . flatten ( set ) ; \n     assertEquals(5,flattened.size());\n}",
                            "oracle": "assertEquals(5,flattened.size());",
                            "oracleLn": 137,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "flatten",
                            "focalStartLn": 245,
                            "focalEndLn": 253,
                            "focalMethod": " public static < T > Collection < T > flatten ( Iterable < ? extends Iterable < T > > coll ) { \n final List < T > result = new ArrayList < > ( ) ; \n for ( Iterable < T > o : coll ) { \n for ( T el : o ) { \n result . add ( el ) ; \n } } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InvalidHandshakeExceptionTest",
                    "classPath": "src/test/java/org/java_websocket/exceptions/InvalidHandshakeExceptionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testConstructor",
                            "startLn": 38,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testConstructor ( ) {\n     InvalidHandshakeException invalidHandshakeException = new InvalidHandshakeException ( ) ; \n     assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());\n}",
                            "oracle": "assertEquals(\"STR\",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());",
                            "oracleLn": 41,
                            "focalFile": "src/main/java/org/java_websocket/exceptions/InvalidDataException.java",
                            "focalName": "getCloseCode",
                            "focalStartLn": 91,
                            "focalEndLn": 93,
                            "focalMethod": " public int getCloseCode ( ) { \n return closecode ; \n } "
                        }
                    ]
                },
                {
                    "className": "DefaultExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEncodeFrame",
                            "startLn": 49,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testEncodeFrame ( ) throws Exception {\n     DefaultExtension defaultExtension = new DefaultExtension ( ) ; \n     BinaryFrame binaryFrame = new BinaryFrame ( ) ; \n     binaryFrame . setPayload ( ByteBuffer . wrap ( \"STR\" . getBytes ( ) ) ) ; \n     defaultExtension . encodeFrame ( binaryFrame ) ; \n     assertEquals(ByteBuffer.wrap(\"STR\".getBytes()),binaryFrame.getPayloadData());\n}",
                            "oracle": "assertEquals(ByteBuffer.wrap(\"STR\".getBytes()),binaryFrame.getPayloadData());",
                            "oracleLn": 55,
                            "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java",
                            "focalName": "getPayloadData",
                            "focalStartLn": 124,
                            "focalEndLn": 127,
                            "focalMethod": "@Override\n public ByteBuffer getPayloadData ( ) { \n return unmaskedpayload ; \n } "
                        }
                    ]
                },
                {
                    "className": "PerMessageDeflateExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetDeflater",
                            "startLn": 174,
                            "endLn": 179,
                            "testMethod": "@Test\n public void testGetDeflater ( ) {\n     PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension ( ) ; \n     assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());\n}",
                            "oracle": "assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());",
                            "oracleLn": 177,
                            "focalFile": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java",
                            "focalName": "getDeflater",
                            "focalStartLn": 65,
                            "focalEndLn": 67,
                            "focalMethod": " public Deflater getDeflater ( ) { \n return deflater ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SimpleLabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/SimpleLabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 23,
                            "endLn": 26,
                            "testMethod": "@Test\n void simple ( ) {\n     assertEquals(\"STR\",SimpleLabel.of(\"STR\").serialized());\n}",
                            "oracle": "assertEquals(\"STR\",SimpleLabel.of(\"STR\").serialized());",
                            "oracleLn": 25,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/SimpleLabel.java",
                            "focalName": "serialized",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public String serialized ( ) { \n return html ? ( \"STR\" + value + \"STR\" ) : ( \"STR\" + quoted ( ) + \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "StyleTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 25,
                            "endLn": 28,
                            "testMethod": "@Test\n void simple ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Style.BOLD));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\")),attrs(Style.BOLD));",
                            "oracleLn": 27,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SvgSizeAnalyzerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "getValues",
                            "startLn": 29,
                            "endLn": 40,
                            "testMethod": "@Test\n void getValues ( ) {\n     final SvgSizeAnalyzer a = SvgSizeAnalyzer . svg ( SVG ) ; \n     assertEquals(1000,a.getWidth());\n}",
                            "oracle": "assertEquals(1000,a.getWidth());",
                            "oracleLn": 32,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgSizeAnalyzer.java",
                            "focalName": "getWidth",
                            "focalStartLn": 88,
                            "focalEndLn": 90,
                            "focalMethod": " public int getWidth ( ) { \n return Integer . parseInt ( matcher . group ( \"STR\" ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "locate",
                            "startLn": 56,
                            "endLn": 61,
                            "testMethod": "@Test\n void locate ( ) {\n     assertEquals(attrs(attr(\"STR\",label.locate(TOP)),attr(\"STR\",\"STR\")),attrs(label.locate(TOP)));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",label.locate(TOP)),attr(\"STR\",\"STR\")),attrs(label.locate(TOP)));",
                            "oracleLn": 58,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java",
                            "focalName": "attrs",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": "@SafeVarargs\n static < F extends For > Attributes < F > attrs ( Attributes < ? extends F > ... attributes ) { \n return attrs ( asList ( attributes ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OptionsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "toJsonMinimal",
                            "startLn": 66,
                            "endLn": 70,
                            "testMethod": "@Test\n void toJsonMinimal ( ) {\n     final String s = Options . create ( ) . engine ( Engine . DOT ) . format ( Format . PNG ) . toJson ( false ) ; \n     assertEquals(\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\",s);\n}",
                            "oracle": "assertEquals(\"STR\"+uriPathOf(newFile(\"STR\"))+\"STR\",s);",
                            "oracleLn": 69,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/service/SystemUtils.java",
                            "focalName": "uriPathOf",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public static String uriPathOf ( File path ) { \n return uriPathOf ( path . getAbsolutePath ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SerializerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SerializerTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n ser . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "nodeAttr",
                            "startLn": 86,
                            "endLn": 91,
                            "testMethod": "@Test\n void nodeAttr ( ) {\n     final Graph g = graph ( ) . nodeAttr ( ) . with ( \"STR\" , \"STR\" ) ; \n     assertSerialize(g,\"STR\",msg(WARN,\"STR\",\"STR\",NODE_ATTRS,g));\n}",
                            "oracle": "assertSerialize(g,\"STR\",msg(WARN,\"STR\",\"STR\",NODE_ATTRS,g));",
                            "oracleLn": 89,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributed.java",
                            "focalName": "with",
                            "focalStartLn": 25,
                            "focalEndLn": 27,
                            "focalMethod": " default T with ( String name , @Nullable\n Object value ) { \n return with ( attr ( name , value ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ArrowTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ArrowTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "dir",
                            "startLn": 86,
                            "endLn": 90,
                            "testMethod": "@Test\n void dir ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Arrow.BOX.dir(Arrow.DirType.BACK));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Arrow.BOX.dir(Arrow.DirType.BACK));",
                            "oracleLn": 88,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Arrow.java",
                            "focalName": "dir",
                            "focalStartLn": 79,
                            "focalEndLn": 81,
                            "focalMethod": " public Attributes < ForLink > dir ( DirType type ) { \n return config ( 0 , type ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ParserTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/parse/ParserTest.java",
                    "subRepo": "graphviz-java",
                    "before": {
                        "setupName": "init",
                        "startLn": 44,
                        "endLn": 47,
                        "setupMethod": "@BeforeEach\n void init ( ) { \n pars . messages . clear ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "inheritDirected",
                            "startLn": 147,
                            "endLn": 152,
                            "testMethod": "@Test\n void inheritDirected ( ) throws IOException {\n     assertParse(\"STR\",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(\"STR\").addLink(\"STR\"))));\n}",
                            "oracle": "assertParse(\"STR\",mutGraph().setDirected(true).add(mutGraph().setDirected(true).add(mutNode(\"STR\").addLink(\"STR\"))));",
                            "oracleLn": 149,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/MutableGraph.java",
                            "focalName": "add",
                            "focalStartLn": 124,
                            "focalEndLn": 127,
                            "focalMethod": " public MutableGraph add ( LinkSource source ) { \n source . addTo ( this ) ; \n return this ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testToString",
                            "startLn": 309,
                            "endLn": 320,
                            "testMethod": "@Test\n public void testToString ( ) {\n     String verb = \"STR\" ; \n     String activity = TEST_IRI + UUID . randomUUID ( ) . toString ( ) ; \n     Verb v = new Verb ( verb ) ; \n     Activity act = new Activity ( activity ) ; \n     Statement actual = new Statement ( agent , v , act ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 316,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "Statement",
                            "focalStartLn": 25,
                            "focalEndLn": 30,
                            "focalMethod": " public Statement ( Actor actor , Verb verb , IStatementObject object ) { \n this . id = UUID . randomUUID ( ) . toString ( ) ; \n this . actor = actor ; \n this . verb = verb ; \n this . object = object ; \n } "
                        }
                    ]
                },
                {
                    "className": "ContextTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContextTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetTeam",
                            "startLn": 100,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testGetTeam ( ) {\n     Agent expected = new Agent ( \"STR\" , \"STR\" ) ; \n     ArrayList < Agent > members = new ArrayList < Agent > ( ) ; \n     members . add ( expected ) ; \n     Group group = new Group ( members ) ; \n     Context c = new Context ( ) ; \n     c . setTeam ( group ) ; \n     Group actual = c . getTeam ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 109,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Context.java",
                            "focalName": "getTeam",
                            "focalStartLn": 43,
                            "focalEndLn": 45,
                            "focalMethod": " public Group getTeam ( ) { \n return team ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "ToastShaman",
            "repoName": "dropwizard-auth-jwt",
            "subRepos": [],
            "commitSHA": "17850c4ad75d1209b1218d140dcef399f4061988",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JwtCachingAuthenticatorTest",
                    "classPath": "src/test/java/com/github/toastshaman/dropwizard/auth/jwt/JwtCachingAuthenticatorTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 85,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n when ( underlying . authenticate ( any ( JwtContext . class ) ) ) . thenReturn ( Optional . < Principal > of ( new PrincipalImpl ( \"STR\" ) ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "doesNotCacheDifferingTokens",
                            "startLn": 95,
                            "endLn": 101,
                            "testMethod": "@Test\n public void doesNotCacheDifferingTokens ( ) throws Exception {\n     assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(\"STR\")));\n}",
                            "oracle": "assertThat(cached.authenticate(tokenOne())).isEqualTo(Optional.<Principal>of(newPrincipalImpl(\"STR\")));",
                            "oracleLn": 97,
                            "focalFile": "src/main/java/com/github/toastshaman/dropwizard/auth/jwt/CachingJwtAuthenticator.java",
                            "focalName": "authenticate",
                            "focalStartLn": 57,
                            "focalEndLn": 74,
                            "focalMethod": "@Override\n public Optional < P > authenticate ( JwtContext context ) throws AuthenticationException { \n final Timer . Context timer = gets . time ( ) ; \n try { \n final SimpleEntry < JwtContext , Optional < P > > cacheEntry = cache . getIfPresent ( context . getJwt ( ) ) ; \n if ( cacheEntry != null ) { \n return cacheEntry . getValue ( ) ; \n } cacheMisses . mark ( ) ; \n final Optional < P > principal = authenticator . authenticate ( context ) ; \n if ( principal . isPresent ( ) ) { \n cache . put ( context . getJwt ( ) , new SimpleEntry < > ( context , principal ) ) ; \n } return principal ; \n } finally { \n timer . stop ( ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "HandleHtmlInlineTagsTest",
                    "classPath": "core/src/test/java/org/markdownj/test/HandleHtmlInlineTagsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 11,
                        "endLn": 14,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInlineTagsWithMarkdown",
                            "startLn": 16,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testInlineTagsWithMarkdown ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\").trim());\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\").trim());",
                            "oracleLn": 18,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "HttpClientFactoryTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testNonProxiedHostRequest",
                            "startLn": 104,
                            "endLn": 120,
                            "testMethod": "@Test\n public void testNonProxiedHostRequest ( ) throws Exception {\n     targetServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     proxyServer . stubFor ( get ( urlMatching ( \"STR\" ) ) . willReturn ( aResponse ( ) . withBody ( \"STR\" ) ) ) ; \n     Proxy proxy = new Proxy ( ) ; \n     proxy . setHost ( \"STR\" ) ; \n     proxy . setPort ( PROXY_PORT ) ; \n     proxy . setProtocol ( \"STR\" ) ; \n     proxy . setNonProxyHosts ( \"STR\" ) ; \n     HttpClient client = new HttpClientFactory ( TARGET_URL ) . proxy ( proxy ) . create ( ) ; \n     String body = EntityUtils . toString ( client . execute ( new HttpGet ( TARGET_URL ) ) . getEntity ( ) ) ; \n     Assert.assertEquals(\"STR\",body);\n}",
                            "oracle": "Assert.assertEquals(\"STR\",body);",
                            "oracleLn": 115,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactory.java",
                            "focalName": "create",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public HttpClient create ( ) { \n return hcb . setDefaultRequestConfig ( rcb . build ( ) ) . build ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CiEnvironmentTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/CiEnvironmentTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "recognises_bamboo",
                            "startLn": 18,
                            "endLn": 29,
                            "testMethod": "@Test\n public void recognises_bamboo ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 24,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "NalUnitTest",
                    "classPath": "src/test/java/org/jcodec/codecs/h264/io/model/NalUnitTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCanReadNalUnitFromValidNal",
                            "startLn": 12,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testCanReadNalUnitFromValidNal ( ) {\n     byte [ ] data = new byte [ ] { \n ( byte ) 0x7C , ( byte ) 0x81 } ; \n     final NALUnit actual = NALUnit . read ( ByteBuffer . wrap ( data ) ) ; \n     assertEquals(\"STR\",3,actual.nal_ref_idc);\n}",
                            "oracle": "assertEquals(\"STR\",3,actual.nal_ref_idc);",
                            "oracleLn": 16,
                            "focalFile": "src/main/java/org/jcodec/codecs/h264/io/model/NALUnit.java",
                            "focalName": "read",
                            "focalStartLn": 23,
                            "focalEndLn": 30,
                            "focalMethod": " public static NALUnit read ( ByteBuffer _in ) { \n int nalu = _in . get ( ) & 0xff ; \n int nal_ref_idc = ( nalu > > 5 ) & 0x3 ; \n int nb = nalu & 0x1f ; \n NALUnitType type = NALUnitType . fromValue ( nb ) ; \n return new NALUnit ( type , nal_ref_idc ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ObjectQueryInfoTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testImmutableQueryInfo",
                            "startLn": 36,
                            "endLn": 51,
                            "testMethod": "@Test\n public void testImmutableQueryInfo ( ) throws Exception {\n     Map < String , Method > setters = new HashMap < > ( ) ; \n     setters . put ( \"STR\" , null ) ; \n     setters . put ( \"STR\" , null ) ; \n     Object target = new Object ( ) ; \n     ObjectName oname = new ObjectName ( \"STR\" ) ; \n     ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo ( target , oname , setters ) ; \n     assertSame(target,objectQueryInfo.getTarget());\n}",
                            "oracle": "assertSame(target,objectQueryInfo.getTarget());",
                            "oracleLn": 44,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java",
                            "focalName": "getTarget",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public Object getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}