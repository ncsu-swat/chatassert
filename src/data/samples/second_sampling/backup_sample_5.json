{
    "projects": [
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommonUtils_SleepTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testSleepRandomNanosMinDelayZero",
                            "startLn": 173,
                            "endLn": 182,
                            "testMethod": "@Test\n public void testSleepRandomNanosMinDelayZero ( ) {\n     long started = System . nanoTime ( ) ; \n     sleepRandomNanos ( new Random ( ) , 0 ) ; \n     long duration = System . nanoTime ( ) - started ; \n     long durationLimit = ONE_SECOND_TO_NANOS ; \n     assertTrue(format(\"STR\",duration),duration>0);\n}",
                            "oracle": "assertTrue(format(\"STR\",duration),duration>0);",
                            "oracleLn": 4,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/CommonUtils.java",
                            "focalName": "sleepRandomNanos",
                            "focalStartLn": 223,
                            "focalEndLn": 229,
                            "focalMethod": " public static void sleepRandomNanos ( Random random , long maxDelayNanos ) { \n if ( maxDelayNanos <= 0 ) { \n return ; \n } long randomValue = Math . abs ( random . nextLong ( ) + 1 ) ; \n sleepNanos ( randomValue % maxDelayNanos ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SimulatorAddressTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testToString_whenCoordinator",
                            "startLn": 108,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testToString_whenCoordinator ( ) {\n     assertEquals(\"STR\",coordinatorAddress().toString());\n}",
                            "oracle": "assertEquals(\"STR\",coordinatorAddress().toString());",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java",
                            "focalName": "toString",
                            "focalStartLn": 162,
                            "focalEndLn": 171,
                            "focalMethod": "@Override\n public String toString ( ) { \n if ( addressLevel == COORDINATOR ) { \n return COORDINATOR_STRING ; \n } else if ( addressLevel == AGENT ) { \n return \"STR\" + agentIndex ; \n } else { \n return \"STR\" + agentIndex + \"STR\" + workerIndex ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OAlterClassStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterClassStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 19,
                        "endLn": 23,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCustom",
                            "startLn": 181,
                            "endLn": 191,
                            "testMethod": "@Test\n public void testCustom ( ) {\n     String className = \"STR\" ; \n     OSchema schema = db . getMetadata ( ) . getSchema ( ) ; \n     schema . createClass ( className ) ; \n     OResultSet result = db . command ( \"STR\" + className + \"STR\" ) ; \n     schema . reload ( ) ; \n     OClass clazz = schema . getClass ( className ) ; \n     Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",clazz.getCustom(\"STR\"));",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getCustom",
                            "focalStartLn": 437,
                            "focalEndLn": 437,
                            "focalMethod": " String getCustom ( String iName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueByKeyTwoParameters",
                            "startLn": 63,
                            "endLn": 74,
                            "testMethod": "@Test\n public void testCreateValueByKeyTwoParameters ( ) {\n     final Object result = propertyIndexByKey . createValue ( Arrays . asList ( mapToTest , \"STR\" ) ) ; \n     Assert.assertTrue(resultinstanceofCollection);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofCollection);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 64,
                            "focalEndLn": 76,
                            "focalMethod": "@Override\n public Object createValue ( List < ? > params ) { \n if ( ! ( params . get ( 0 ) instanceof Map ) ) return null ; \n final Collection < ? > mapParams = extractMapParams ( ( Map < ? , ? > ) params . get ( 0 ) ) ; \n final List < Object > result = new ArrayList < Object > ( mapParams . size ( ) ) ; \n for ( final Object mapParam : mapParams ) { \n result . add ( createSingleValue ( mapParam ) ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 17,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTypes",
                            "startLn": 74,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testGetTypes ( ) {\n     final OType [ ] result = propertyIndex . getTypes ( ) ; \n     Assert.assertEquals(result.length,1);\n}",
                            "oracle": "Assert.assertEquals(result.length,1);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java",
                            "focalName": "getTypes",
                            "focalStartLn": 133,
                            "focalEndLn": 135,
                            "focalMethod": " public OType [ ] getTypes ( ) { \n return new OType [ ] { \n keyType } ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddKeyComparable",
                            "startLn": 64,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testAddKeyComparable ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     assertEquals(compositeKey.getKeys().size(),1);\n}",
                            "oracle": "assertEquals(compositeKey.getKeys().size(),1);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "getKeys",
                            "focalStartLn": 73,
                            "focalEndLn": 75,
                            "focalMethod": " public List < Object > getKeys ( ) { \n return Collections . unmodifiableList ( keys ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneGeoUpdateTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/spatial/LuceneGeoUpdateTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testUpdate",
                            "startLn": 30,
                            "endLn": 48,
                            "testMethod": "@Test\n public void testUpdate ( ) {\n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . getIndex ( \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     Assert.assertEquals(2,index.getSize());\n}",
                            "oracle": "Assert.assertEquals(2,index.getSize());",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "getSize",
                            "focalStartLn": 115,
                            "focalEndLn": 115,
                            "focalMethod": " long getSize ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSQLFunctionAbsoluteValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setup",
                        "startLn": 26,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void setup ( ) { \n function = new OSQLFunctionAbsoluteValue ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testPositiveBigDecimal",
                            "startLn": 124,
                            "endLn": 130,
                            "testMethod": "@Test\n public void testPositiveBigDecimal ( ) {\n     function . execute ( null , null , null , new Object [ ] { \n new BigDecimal ( 10.5D ) } , null ) ; \n     Object result = function . getResult ( ) ; \n     assertTrue(resultinstanceofBigDecimal);\n}",
                            "oracle": "assertTrue(resultinstanceofBigDecimal);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java",
                            "focalName": "getResult",
                            "focalStartLn": 81,
                            "focalEndLn": 84,
                            "focalMethod": "@Override\n public Object getResult ( ) { \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMaxDepthArrow",
                            "startLn": 695,
                            "endLn": 716,
                            "testMethod": "@Test\n public void testMaxDepthArrow ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertEquals(2,size(qResult));\n}",
                            "oracle": "Assert.assertEquals(2,size(qResult));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "query",
                            "focalStartLn": 1353,
                            "focalEndLn": 1357,
                            "focalMethod": "@Override\n public OResultSet query ( String query , Object ... args ) { \n checkOpenness ( ) ; \n return internal . query ( query , args ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OLiveCommandResultListenerTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OLiveCommandResultListenerTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 63,
                        "endLn": 81,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n MockitoAnnotations . initMocks ( this ) ; \n Mockito . when ( server . getContextConfiguration ( ) ) . thenReturn ( new OContextConfiguration ( ) ) ; \n db = new ODatabaseDocumentTx ( \"STR\" + OLiveCommandResultListenerTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n OClientConnectionManager manager = new OClientConnectionManager ( server ) ; \n protocol = new ONetworkProtocolBinary ( server ) ; \n protocol . initVariables ( server , channelBinary ) ; \n connection = manager . connect ( protocol ) ; \n OTokenHandlerImpl tokenHandler = new OTokenHandlerImpl ( server ) ; \n byte [ ] token = tokenHandler . getSignedBinaryToken ( db , db . getUser ( ) , connection . getData ( ) ) ; \n connection = manager . connect ( protocol , connection , token , tokenHandler ) ; \n connection . setDatabase ( db ) ; \n connection . getData ( ) . setSerializationImpl ( ORecordSerializerNetwork . NAME ) ; \n Mockito . when ( server . getClientConnectionManager ( ) ) . thenReturn ( manager ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNetworkError",
                            "startLn": 91,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testNetworkError ( ) throws IOException {\n     Mockito . when ( channelBinary . writeInt ( Mockito . anyInt ( ) ) ) . thenThrow ( new IOException ( \"STR\" ) ) ; \n     OLiveCommandResultListener listener = new OLiveCommandResultListener ( server , connection , new TestResultListener ( ) ) ; \n     OLiveQueryHook . subscribe ( 10 , rawListener , db ) ; \n     assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));\n}",
                            "oracle": "assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/query/live/OLiveQueryQueueThread.java",
                            "focalName": "hasToken",
                            "focalStartLn": 103,
                            "focalEndLn": 105,
                            "focalMethod": " public boolean hasToken ( Integer key ) { \n return subscribers . containsKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OClassImplTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 28,
                        "setupMethod": "@Before\n public void setUp ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + OClassImplTest . class . getSimpleName ( ) ) ; \n if ( db . exists ( ) ) { \n db . open ( \"STR\" , \"STR\" ) ; \n } else db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateNoLinkedClass",
                            "startLn": 75,
                            "endLn": 86,
                            "testMethod": "@Test\n public void testCreateNoLinkedClass ( ) {\n     final OSchema oSchema = db . getMetadata ( ) . getSchema ( ) ; \n     OClass oClass = oSchema . createClass ( \"STR\" ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null ) ; \n     oClass . createProperty ( \"STR\" , OType . LINKLIST , ( OClass ) null , true ) ; \n     assertNotNull(oClass.getProperty(\"STR\"));\n}",
                            "oracle": "assertNotNull(oClass.getProperty(\"STR\"));",
                            "oracleLn": 4,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getProperty",
                            "focalStartLn": 113,
                            "focalEndLn": 113,
                            "focalMethod": " OProperty getProperty ( String iPropertyName ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OPropertyListIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n propertyIndex = new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateValueSingleParameter",
                            "startLn": 24,
                            "endLn": 35,
                            "testMethod": "@Test\n public void testCreateValueSingleParameter ( ) {\n     final Object result = propertyIndex . createValue ( Collections . singletonList ( Arrays . asList ( \"STR\" , \"STR\" ) ) ) ; \n     Assert.assertTrue(resultinstanceofCollection);\n}",
                            "oracle": "Assert.assertTrue(resultinstanceofCollection);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java",
                            "focalName": "createValue",
                            "focalStartLn": 50,
                            "focalEndLn": 61,
                            "focalMethod": "@Override\n public Object createValue ( List < ? > params ) { \n if ( ! ( params . get ( 0 ) instanceof Collection ) ) params = ( List ) Collections . singletonList ( params ) ; \n final Collection < ? > multiValueCollection = ( Collection < ? > ) params . get ( 0 ) ; \n final List < Object > values = new ArrayList < > ( multiValueCollection . size ( ) ) ; \n for ( final Object item : multiValueCollection ) { \n values . add ( createSingleValue ( item ) ) ; \n } return values ; \n } "
                        }
                    ]
                },
                {
                    "className": "FloatSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n floatSerializer = new OFloatSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeWALChanges",
                            "startLn": 93,
                            "endLn": 106,
                            "testMethod": "@Test\n public void testSerializeWALChanges ( ) {\n     final int serializationOffset = 5 ; \n     ByteBuffer buffer = ByteBuffer . allocateDirect ( FIELD_SIZE + serializationOffset ) . order ( ByteOrder . nativeOrder ( ) ) ; \n     byte [ ] data = new byte [ FIELD_SIZE ] ; \n     floatSerializer . serializeNative ( OBJECT , data , 0 ) ; \n     OWALChanges walChanges = new OWALChangesTree ( ) ; \n     walChanges . setBinaryValue ( buffer , data , serializationOffset ) ; \n     Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);\n}",
                            "oracle": "Assert.assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "getObjectSizeInByteBuffer",
                            "focalStartLn": 135,
                            "focalEndLn": 138,
                            "focalMethod": "@Override\n public int getObjectSizeInByteBuffer ( ByteBuffer buffer , OWALChanges walChanges , int offset ) { \n return FLOAT_SIZE ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLongOTP",
                            "startLn": 123,
                            "endLn": 127,
                            "testMethod": "@Test\n public void testLongOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}",
                            "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));",
                            "oracleLn": 1,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "isValidOTPFormat",
                            "focalStartLn": 222,
                            "focalEndLn": 233,
                            "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } "
                        },
                        {
                            "testName": "testShortOTP",
                            "startLn": 117,
                            "endLn": 121,
                            "testMethod": "@Test\n public void testShortOTP ( ) {\n     String otp = \"STR\" ; \n     assertFalse(YubicoClient.isValidOTPFormat(otp));\n}",
                            "oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));",
                            "oracleLn": 1,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "isValidOTPFormat",
                            "focalStartLn": 222,
                            "focalEndLn": 233,
                            "focalMethod": " public static boolean isValidOTPFormat ( String otp ) { \n if ( otp == null ) { \n return false ; \n } int len = otp . length ( ) ; \n for ( char c : otp . toCharArray ( ) ) { \n if ( c < 0x20 || c > 0x7E ) { \n return false ; \n } } return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullUri",
                            "startLn": 476,
                            "endLn": 482,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullUri ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 1,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        },
                        {
                            "testName": "testProvidedPriorityRoutePrioritizerNullHandler",
                            "startLn": 484,
                            "endLn": 490,
                            "testMethod": "@Test\n public void testProvidedPriorityRoutePrioritizerNullHandler ( ) {\n     ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer ( ) ; \n     Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());\n}",
                            "oracle": "Assert.assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());",
                            "oracleLn": 1,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "getPrioritizedRoutes",
                            "focalStartLn": 515,
                            "focalEndLn": 518,
                            "focalMethod": "@Override\n public Collection < UriResource > getPrioritizedRoutes ( ) { \n return Collections . unmodifiableCollection ( mappings ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SvgSizeAnalyzerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "svgWithoutChanges",
                            "startLn": 42,
                            "endLn": 46,
                            "testMethod": "@Test\n void svgWithoutChanges ( ) {\n     final SvgSizeAnalyzer a = SvgSizeAnalyzer . svg ( SVG ) ; \n     assertEquals(SVG,a.getSvg());\n}",
                            "oracle": "assertEquals(SVG,a.getSvg());",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgSizeAnalyzer.java",
                            "focalName": "getSvg",
                            "focalStartLn": 67,
                            "focalEndLn": 73,
                            "focalMethod": " public String getSvg ( ) { \n final String size = width == null ? \"STR\" + getWidth ( ) + getUnit ( ) + \"STR\" + getHeight ( ) + getUnit ( ) + \"STR\" : \"STR\" + width + \"STR\" + height + \"STR\" ; \n return matcher . replaceFirst ( \"STR\" + size + matcher . group ( \"STR\" ) + \"STR\" + getTransform ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "GraphvizServerTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/GraphvizServerTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "cmdLineArgs",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n void cmdLineArgs ( ) {\n     final GraphvizServer . CmdOptions opts = GraphvizServer . CmdOptions . parse ( new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ) ; \n     assertEquals(map(\"STR\",\"STR\"),opts.opts);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),opts.opts);",
                            "oracleLn": 1,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/GraphvizServer.java",
                            "focalName": "parse",
                            "focalStartLn": 126,
                            "focalEndLn": 150,
                            "focalMethod": " static CmdOptions parse ( String [ ] args ) { \n final CmdOptions options = new CmdOptions ( ) ; \n for ( int i = 0 ; \n i < args . length ; \n i ++ ) { \n if ( args [ i ] . startsWith ( \"STR\" ) ) { \n final int len = args [ i ] . length ( ) ; \n if ( len == 1 ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } final String name = args [ i ] . substring ( 1 , 2 ) ; \n String value ; \n if ( len > 2 ) { \n value = args [ i ] . substring ( 2 ) ; \n } else if ( i == args . length - 1 ) { \n value = \"STR\" ; \n } else { \n value = args [ i + 1 ] ; \n i ++ ; \n } options . opts . put ( name , value ) ; \n } else { \n options . args . add ( args [ i ] ) ; \n } } return options ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MkvBlockTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadingSignedInt",
                            "startLn": 143,
                            "endLn": 147,
                            "testMethod": "@Test\n public void testReadingSignedInt ( ) throws Exception {\n     Assert.assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));\n}",
                            "oracle": "Assert.assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java",
                            "focalName": "ebmlDecodeSigned",
                            "focalStartLn": 345,
                            "focalEndLn": 360,
                            "focalMethod": " static public long ebmlDecodeSigned ( ByteBuffer source ) { \n byte firstByte = source . get ( ) ; \n int size = EbmlUtil . computeLength ( firstByte ) ; \n if ( size == 0 ) throw new RuntimeException ( \"STR\" ) ; \n long value = firstByte & ( 0xFF > > > size ) ; \n int remaining = size - 1 ; \n while ( remaining > 0 ) { \n value = ( value << 8 ) | ( source . get ( ) & 0xff ) ; \n remaining -- ; \n } return value - signedComplement [ size ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "Yuv444jToYuv420jTest",
                    "classPath": "src/test/java/org/jcodec/scale/Yuv444jToYuv420jTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEvenEven",
                            "startLn": 10,
                            "endLn": 21,
                            "testMethod": "@Test\n public void testEvenEven ( ) {\n     byte [ ] [ ] srcPix = { \n { \n 30 , 50 , 100 , 120 } , { \n 40 , 90 , 20 , 50 } , { \n 30 , 60 , 100 , 120 } } ; \n     byte [ ] [ ] expPix = { \n { \n 30 , 50 , 100 , 120 } , { \n 50 } , { \n 78 } } ; \n     Picture src = Picture . createPicture ( 2 , 2 , srcPix , ColorSpace . YUV444J ) ; \n     Picture dst = Picture . create ( 2 , 2 , ColorSpace . YUV420J ) ; \n     Transform transform = ColorUtil . getTransform ( src . getColor ( ) , dst . getColor ( ) ) ; \n     Assert.assertNotNull(transform);\n}",
                            "oracle": "Assert.assertNotNull(transform);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/org/jcodec/scale/ColorUtil.java",
                            "focalName": "getTransform",
                            "focalStartLn": 60,
                            "focalEndLn": 64,
                            "focalMethod": " public static Transform getTransform ( ColorSpace from , ColorSpace to ) { \n Map < ColorSpace , Transform > map2 = map . get ( from ) ; \n return map2 == null ? null : map2 . get ( to ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PersonTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/PersonTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n person = new Person ( ) ; \n person . setName ( NAME ) ; \n person . setMbox ( MBOX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetMbox_sha1sum",
                            "startLn": 92,
                            "endLn": 100,
                            "testMethod": "@Test\n public void testGetMbox_sha1sum ( ) {\n     String [ ] expected = MBOX_SHA1SUM ; \n     person . setMbox ( null ) ; \n     person . setMbox_sha1sum ( expected ) ; \n     String [ ] actual = person . getMbox_sha1sum ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getMbox_sha1sum",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public String [ ] getMbox_sha1sum ( ) { \n return this . mbox_sha1sum ; \n } "
                        }
                    ]
                },
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetChoices",
                            "startLn": 263,
                            "endLn": 277,
                            "testMethod": "@Test\n public void testSetChoices ( ) {\n     ArrayList < InteractionComponent > expected = new ArrayList < InteractionComponent > ( ) ; \n     InteractionComponent e = new InteractionComponent ( ) ; \n     String id = \"STR\" ; \n     e . setId ( id ) ; \n     HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n     desc . put ( \"STR\" , \"STR\" ) ; \n     e . setDescription ( desc ) ; \n     expected . add ( e ) ; \n     activityDefinition . setChoices ( expected ) ; \n     ArrayList < InteractionComponent > actual = activityDefinition . getChoices ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getChoices",
                            "focalStartLn": 160,
                            "focalEndLn": 162,
                            "focalMethod": " public ArrayList < InteractionComponent > getChoices ( ) { \n return choices ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetObject",
                            "startLn": 271,
                            "endLn": 278,
                            "testMethod": "@Test\n public void testGetObject ( ) {\n     Activity expected = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n     statement . setObject ( expected ) ; \n     Activity actual = ( Activity ) statement . getObject ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getObject",
                            "focalStartLn": 86,
                            "focalEndLn": 88,
                            "focalMethod": " public IStatementObject getObject ( ) { \n return object ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "phax",
            "repoName": "ph-genericode",
            "subRepos": [],
            "commitSHA": "5e28716fa68c642a6dec8011346229a00a6721e4",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExcelSheetToCodeList04Test",
                    "classPath": "src/test/java/com/helger/genericode/excel/ExcelSheetToCodeList04Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadExcel",
                            "startLn": 44,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testReadExcel ( ) throws URISyntaxException {\n     final IReadableResource aXls = new ClassPathResource ( \"STR\" ) ; \n     assertTrue(aXls.exists());\n}",
                            "oracle": "assertTrue(aXls.exists());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/helger/genericode/Genericode04CodeListMarshaller.java",
                            "focalName": "Genericode04CodeListMarshaller",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": " public Genericode04CodeListMarshaller ( ) { \n super ( CodeListDocument . class , CGenericode . GENERICODE_04_XSDS , o -> new ObjectFactory ( ) . createCodeList ( o ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GeneralTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 60,
                            "endLn": 63,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newGeneral(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newGeneral(env()).getName());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/General.java",
                            "focalName": "getName",
                            "focalStartLn": 52,
                            "focalEndLn": 55,
                            "focalMethod": "@Override\n public String getName ( ) { \n return getProperty ( CI_NAME ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SourceLoaderFactoryTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 65,
                        "endLn": 76,
                        "setupMethod": "@Before\n public void init ( ) throws Exception { \n rootSources = new File ( folder . getRoot ( ) , \"STR\" ) ; \n m1Sources = folder . newFolder ( \"STR\" , \"STR\" ) ; \n m2Sources = folder . newFolder ( \"STR\" , \"STR\" ) ; \n when ( root . getCollectedProjects ( ) ) . thenReturn ( Arrays . asList ( m1 , m2 ) ) ; \n when ( m1 . getCollectedProjects ( ) ) . thenReturn ( Collections . < MavenProject > emptyList ( ) ) ; \n when ( m2 . getCollectedProjects ( ) ) . thenReturn ( Collections . < MavenProject > emptyList ( ) ) ; \n when ( root . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( rootSources . getAbsolutePath ( ) ) ) ; \n when ( m1 . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( m1Sources . getAbsolutePath ( ) ) ) ; \n when ( m2 . getCompileSourceRoots ( ) ) . thenReturn ( Arrays . asList ( m2Sources . getAbsolutePath ( ) ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateSourceLoaderWithAdditionalSourceDirectories",
                            "startLn": 84,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testCreateSourceLoaderWithAdditionalSourceDirectories ( ) throws Exception {\n     File s1 = new File ( folder . getRoot ( ) , \"STR\" ) ; \n     File s2 = folder . newFolder ( \"STR\" ) ; \n     SourceLoader sourceLoader = createSourceLoaderFactory ( \"STR\" ) . withSourceDirectories ( Arrays . asList ( s1 , s2 ) ) . createSourceLoader ( ) ; \n     assertNotNull(sourceLoader);\n}",
                            "oracle": "assertNotNull(sourceLoader);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactory.java",
                            "focalName": "createSourceLoader",
                            "focalStartLn": 63,
                            "focalEndLn": 92,
                            "focalMethod": " public SourceLoader createSourceLoader ( ) { \n MultiSourceLoader multiSourceLoader = new MultiSourceLoader ( ) ; \n List < File > directories = new ArrayList < > ( ) ; \n List < MavenProject > modules = new MavenProjectCollector ( project ) . collect ( ) ; \n for ( MavenProject module : modules ) { \n for ( String sourceRoot : module . getCompileSourceRoots ( ) ) { \n File sourceDirectory = new File ( sourceRoot ) ; \n directories . add ( sourceDirectory ) ; \n } } if ( sourceDirectories != null ) { \n directories . addAll ( sourceDirectories ) ; \n } for ( File directory : directories ) { \n if ( directory . exists ( ) && directory . isDirectory ( ) ) { \n DirectorySourceLoader moduleSourceLoader = new DirectorySourceLoader ( baseDir , directory , sourceEncoding ) ; \n multiSourceLoader . add ( moduleSourceLoader ) ; \n } } if ( scanForSources ) { \n for ( File directory : directories ) { \n if ( directory . exists ( ) && directory . isDirectory ( ) ) { \n ScanSourceLoader scanSourceLoader = new ScanSourceLoader ( baseDir , directory , sourceEncoding ) ; \n multiSourceLoader . add ( scanSourceLoader ) ; \n } } } return multiSourceLoader ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LineConventions",
                    "classPath": "core/src/test/java/org/markdownj/test/LineConventions.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMacLineConventions",
                            "startLn": 63,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testMacLineConventions ( ) {\n     MarkdownProcessor markup = new MarkdownProcessor ( ) ; \n     assertEquals(EXPECTED,markup.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(EXPECTED,markup.markdown(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        },
                        {
                            "testName": "testWindowsLineConventions",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testWindowsLineConventions ( ) {\n     MarkdownProcessor markup = new MarkdownProcessor ( ) ; \n     assertEquals(EXPECTED,markup.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(EXPECTED,markup.markdown(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EdgeCases",
                    "classPath": "core/src/test/java/org/markdownj/test/EdgeCases.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 47,
                        "endLn": 50,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSpaces",
                            "startLn": 57,
                            "endLn": 60,
                            "testMethod": "@Test\n public void testSpaces ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "spring-cloud",
            "repoName": "spring-cloud-security",
            "subRepos": [
                "spring-cloud-security",
                "spring-cloud-starter-security",
                "spring-cloud-starter-oauth2"
            ],
            "commitSHA": "d5dac0e77e1d9ef17a75fd6b34dfc62685da50e7",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OAuth2FeignRequestInterceptorTests",
                    "classPath": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java",
                    "subRepo": "spring-cloud-security",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 51,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void setUp ( ) { \n oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new MockOAuth2ClientContext ( \"STR\" ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n requestTemplate = new RequestTemplate ( ) . method ( HttpMethod . GET ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "configureAccessTokenProvider",
                            "startLn": 79,
                            "endLn": 86,
                            "testMethod": "@Test\n public void configureAccessTokenProvider ( ) {\n     OAuth2AccessToken mockedToken = new MockOAuth2AccessToken ( \"STR\" ) ; \n     oAuth2FeignRequestInterceptor . setAccessTokenProvider ( new MockAccessTokenProvider ( mockedToken ) ) ; \n     Assert.assertEquals(\"STR\",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "acquireAccessToken",
                            "focalStartLn": 157,
                            "focalEndLn": 184,
                            "focalMethod": " protected OAuth2AccessToken acquireAccessToken ( ) throws UserRedirectRequiredException { \n AccessTokenRequest tokenRequest = oAuth2ClientContext . getAccessTokenRequest ( ) ; \n if ( tokenRequest == null ) { \n throw new AccessTokenRequiredException ( \"STR\" + resource . getId ( ) + \"STR\" , resource ) ; \n } String stateKey = tokenRequest . getStateKey ( ) ; \n if ( stateKey != null ) { \n tokenRequest . setPreservedState ( oAuth2ClientContext . removePreservedState ( stateKey ) ) ; \n } OAuth2AccessToken existingToken = oAuth2ClientContext . getAccessToken ( ) ; \n if ( existingToken != null ) { \n oAuth2ClientContext . setAccessToken ( existingToken ) ; \n } OAuth2AccessToken obtainableAccessToken ; \n obtainableAccessToken = accessTokenProvider . obtainAccessToken ( resource , tokenRequest ) ; \n if ( obtainableAccessToken == null || obtainableAccessToken . getValue ( ) == null ) { \n throw new IllegalStateException ( \"STR\" ) ; \n } oAuth2ClientContext . setAccessToken ( obtainableAccessToken ) ; \n return obtainableAccessToken ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BambooEnvironmentVariablesTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "duplicates_bamboo_prefixed_env_vars_with_prefixless_copy",
                            "startLn": 11,
                            "endLn": 20,
                            "testMethod": "@Test\n public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy ( ) {\n     HashMap < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Map < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ; \n     assertEquals(\"STR\",convertedEnv.get(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java",
                            "focalName": "convert",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public Map < String , String > convert ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( String key : env . keySet ( ) ) { \n Matcher matcher = BAMBOO_PATTERN . matcher ( key ) ; \n if ( matcher . lookingAt ( ) ) { \n String value = env . get ( key ) ; \n String strippedVar = matcher . group ( 1 ) ; \n result . put ( strippedVar , value ) ; \n } } result . putAll ( env ) ; \n return result ; \n } "
                        },
                        {
                            "testName": "prefixless_env_var_takes_precendence",
                            "startLn": 22,
                            "endLn": 32,
                            "testMethod": "@Test\n public void prefixless_env_var_takes_precendence ( ) {\n     HashMap < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Map < String , String > convertedEnv = new BambooEnvironmentVariables ( ) . convert ( env ) ; \n     assertEquals(\"STR\",convertedEnv.get(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",convertedEnv.get(\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java",
                            "focalName": "convert",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public Map < String , String > convert ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( String key : env . keySet ( ) ) { \n Matcher matcher = BAMBOO_PATTERN . matcher ( key ) ; \n if ( matcher . lookingAt ( ) ) { \n String value = env . get ( key ) ; \n String strippedVar = matcher . group ( 1 ) ; \n result . put ( strippedVar , value ) ; \n } } result . putAll ( env ) ; \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "EnvFilterTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "allows_overriding_mask",
                            "startLn": 39,
                            "endLn": 64,
                            "testMethod": "@Test\n public void allows_overriding_mask ( ) {\n     Map < String , String > env = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     Config config = createConfig ( ) ; \n     new EnvironmentVariablesConfigLoader ( env ) . load ( config ) ; \n     EnvFilter envFilter = new EnvFilter ( config ) ; \n     Map < String , String > expectedEnv = new HashMap < String , String > ( ) { \n { \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n put ( \"STR\" , \"STR\" ) ; \n } } ; \n     assertEquals(expectedEnv,envFilter.filter(env));\n}",
                            "oracle": "assertEquals(expectedEnv,envFilter.filter(env));",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/EnvFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 18,
                            "focalEndLn": 25,
                            "focalMethod": " public Map < String , String > filter ( Map < String , String > env ) { \n Map < String , String > result = new HashMap < > ( ) ; \n for ( Map . Entry < String , String > entry : env . entrySet ( ) ) { \n if ( ! maskPattern . matcher ( entry . getKey ( ) ) . matches ( ) ) result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; \n } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MBeanAnnotationUtilTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . withoutAnnotation = new Object ( ) ; \n this . testAnnotation1 = new TestAnnotation1 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetAttributes",
                            "startLn": 49,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testGetAttributes ( ) throws Exception {\n     Map < String , Method > atts = MBeanAnnotationUtil . getAttributes ( this . testAnnotation1 ) ; \n     assertEquals(2,atts.size());\n}",
                            "oracle": "assertEquals(2,atts.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtil.java",
                            "focalName": "getAttributes",
                            "focalStartLn": 37,
                            "focalEndLn": 54,
                            "focalMethod": " public static Map < String , Method > getAttributes ( Object mbeanLocation ) { \n Map < String , Method > result = new TreeMap < String , Method > ( ) ; \n Method [ ] methods = mbeanLocation . getClass ( ) . getMethods ( ) ; \n for ( Method oneMethod : methods ) { \n MBeanAttribute attribute = oneMethod . getAnnotation ( MBeanAttribute . class ) ; \n if ( attribute != null ) { \n result . put ( attribute . name ( ) , oneMethod ) ; \n } } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "BatchPollProcessorTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 64,
                        "endLn": 102,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . processor = new BatchPollProcessor ( ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polled001 = Mockito . mock ( TestClass001 . class ) ; \n this . polledObjects . add ( this . polled001 ) ; \n this . mockObjectQueryInfo001 = Mockito . mock ( ObjectQueryInfo . class ) ; \n this . objectName001 = Mockito . mock ( ObjectName . class ) ; \n this . attributeNames001 = new HashSet < > ( Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . attributeSetters001 = new HashMap < > ( ) ; \n this . queryAttributeMap = new HashMap < > ( ) ; \n this . resultAttributeMap = new HashMap < > ( ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , String . class ) ) ; \n this . attributeSetters001 . put ( \"STR\" , TestClass001 . class . getMethod ( \"STR\" , int . class ) ) ; \n this . queryAttributeMap . put ( this . objectName001 , Arrays . asList ( \"STR\" , \"STR\" ) ) ; \n this . resultAttributeMap . put ( this . objectName001 , Arrays . asList ( new Attribute ( \"STR\" , \"STR\" ) , new Attribute ( \"STR\" , 11 ) ) ) ; \n Mockito . when ( this . mockObjectQueryPreparer . prepareObjectQuery ( this . polled001 ) ) . thenReturn ( this . mockObjectQueryInfo001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getTarget ( ) ) . thenReturn ( this . polled001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getObjectName ( ) ) . thenReturn ( this . objectName001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeNames ( ) ) . thenReturn ( this . attributeNames001 ) ; \n Mockito . when ( this . mockObjectQueryInfo001 . getAttributeSetters ( ) ) . thenReturn ( this . attributeSetters001 ) ; \n Mockito . when ( this . mockAccessConnection . batchQueryAttributes ( this . createAttributeMapMatcher ( this . queryAttributeMap ) ) ) . thenReturn ( this . resultAttributeMap ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetObjectQueryPreparer",
                            "startLn": 123,
                            "endLn": 131,
                            "testMethod": "@Test\n public void testGetSetObjectQueryPreparer ( ) throws Exception {\n     assertNotNull(this.processor.getObjectQueryPreparer());\n}",
                            "oracle": "assertNotNull(this.processor.getObjectQueryPreparer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java",
                            "focalName": "getObjectQueryPreparer",
                            "focalStartLn": 54,
                            "focalEndLn": 56,
                            "focalMethod": " public ObjectQueryPreparer getObjectQueryPreparer ( ) { \n return objectQueryPreparer ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AsArrayViewTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsArrayViewTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFlatMapTokens",
                            "startLn": 59,
                            "endLn": 72,
                            "testMethod": "@Test\n@Override\n public void testFlatMapTokens ( ) {\n     final AFunction1NoThrow < String , List < String > > tokens = new AFunction1NoThrow < String , List < String > > ( ) { \n @Override\n public List < String > apply ( String param ) { \n return Arrays . asList ( param . split ( \"STR\" ) ) ; \n } } ; \n     assertEquals(createColl(),create().flatMap(tokens));\n}",
                            "oracle": "assertEquals(createColl(),create().flatMap(tokens));",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java",
                            "focalName": "flatMap",
                            "focalStartLn": 61,
                            "focalEndLn": 61,
                            "focalMethod": "@Override\n < X , E extends Throwable > ACollection < X > flatMap ( AFunction1 < ? super T , ? extends Iterable < X > , E > f ) throws E ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SiteMapParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/SiteMapParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 37,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new SiteMapParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNonSitemapParsing",
                            "startLn": 231,
                            "endLn": 239,
                            "testMethod": "@Test\n public void testNonSitemapParsing ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     parse ( \"STR\" , \"STR\" , new Metadata ( ) ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}",
                            "oracle": "Assert.assertEquals(1,output.getEmitted().size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "BasicIndexingTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupIndexerBolt",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setupIndexerBolt ( ) { \n bolt = new DummyIndexer ( ) ; \n setupIndexerBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRelativeCanonicalURL",
                            "startLn": 76,
                            "endLn": 94,
                            "testMethod": "@Test\n public void testRelativeCanonicalURL ( ) throws Exception {\n     Map config = new HashMap ( ) ; \n     config . put ( AbstractIndexerBolt . urlFieldParamName , \"STR\" ) ; \n     config . put ( AbstractIndexerBolt . canonicalMetadataParamName , \"STR\" ) ; \n     Metadata metadata = new Metadata ( ) ; \n     metadata . setValue ( \"STR\" , \"STR\" ) ; \n     prepareIndexerBolt ( config ) ; \n     index ( URL , metadata ) ; \n     Map < String , String > fields = ( ( DummyIndexer ) bolt ) . returnFields ( ) ; \n     Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",\"STR\",fields.get(\"STR\"));",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "setValue",
                            "focalStartLn": 125,
                            "focalEndLn": 129,
                            "focalMethod": " public void setValue ( String key , String value ) { \n checkLockException ( ) ; \n md . put ( key , new String [ ] { \n value } ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FeedParserBoltTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/bolt/FeedParserBoltTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setupParserBolt",
                        "startLn": 34,
                        "endLn": 38,
                        "setupMethod": "@Before\n public void setupParserBolt ( ) { \n bolt = new FeedParserBolt ( ) ; \n setupParserBolt ( bolt ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testNonFeedParsing",
                            "startLn": 93,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testNonFeedParsing ( ) throws IOException {\n     prepareParserBolt ( \"STR\" ) ; \n     parse ( \"STR\" , \"STR\" , new Metadata ( ) ) ; \n     Assert.assertEquals(1,output.getEmitted().size());\n}",
                            "oracle": "Assert.assertEquals(1,output.getEmitted().size());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java",
                            "focalName": "Metadata",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public Metadata ( ) { \n md = new HashMap < > ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "gvlasov",
            "repoName": "collections-utils",
            "subRepos": [],
            "commitSHA": "82f20efc8e53ea876896b779e35ed33633ec2e23",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "StreamIterableTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/StreamIterableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "containsRightElements",
                            "startLn": 11,
                            "endLn": 26,
                            "testMethod": "@Test\n public void containsRightElements ( ) {\n     final Iterator < Integer > iterator = new StreamIterable < > ( Arrays . asList ( 1 , 2 , 3 , 4 ) . stream ( ) ) . iterator ( ) ; \n     Assert.assertTrue(iterator.hasNext());\n}",
                            "oracle": "Assert.assertTrue(iterator.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/StreamIterable.java",
                            "focalName": "iterator",
                            "focalStartLn": 13,
                            "focalEndLn": 16,
                            "focalMethod": "@Override\n public Iterator < T > iterator ( ) { \n return stream . iterator ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CollectorsTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/CollectorsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "toLinkedHashSet",
                            "startLn": 29,
                            "endLn": 40,
                            "testMethod": "@Test\n public void toLinkedHashSet ( ) {\n     final LinkedHashSet < Integer > expected = new LinkedHashSet < > ( ) ; \n     expected . add ( 1 ) ; \n     expected . add ( 2 ) ; \n     expected . add ( 3 ) ; \n     Assert.assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));\n}",
                            "oracle": "Assert.assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/Collectors.java",
                            "focalName": "toLinkedHashSet",
                            "focalStartLn": 19,
                            "focalEndLn": 21,
                            "focalMethod": " public static < T > Collector < T , ? , LinkedHashSet < T > > toLinkedHashSet ( ) { \n return java . util . stream . Collectors . toCollection ( LinkedHashSet :: new ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "FizzBuzzTDDTest",
                    "classPath": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "test15ReturnsFizzBuzz",
                            "startLn": 46,
                            "endLn": 51,
                            "testMethod": "@Test\n public void test15ReturnsFizzBuzz ( ) {\n     String result = FizzBuzzTDD . convert ( 15 ) ; \n     assertEquals(\"STR\",result);\n}",
                            "oracle": "assertEquals(\"STR\",result);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingkidsprogramming/recipes/completed/section09final/FizzBuzzTDD.java",
                            "focalName": "convert",
                            "focalStartLn": 9,
                            "focalEndLn": 15,
                            "focalMethod": " public static String convert ( int i ) { \n if ( 0 == i % 15 ) { \n return \"STR\" ; \n } if ( 0 == i % 5 ) { \n return \"STR\" ; \n } if ( 0 == i % 3 ) { \n return \"STR\" ; \n } return \"STR\" + i ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddWordsToDictionary",
                            "startLn": 89,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testAddWordsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/KoreanTokenJava.java",
                            "focalName": "getPos",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public KoreanPosJava getPos ( ) { \n return pos ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ProcessorConfigTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "inc",
                            "startLn": 56,
                            "endLn": 64,
                            "testMethod": "@Test\n public void inc ( ) {\n     ProcessorConfig pConfig = new ProcessorConfig ( includes , null , config ) ; \n     List < TestNamed > filtered = pConfig . prepareProcessors ( getAllTestData ( ) , \"STR\" ) ; \n     assertTrue(contains(filtered,\"STR\"));\n}",
                            "oracle": "assertTrue(contains(filtered,\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MatcherTest",
                    "classPath": "src/test/java/apitests/MatcherTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "lookingAtAREDirector",
                            "startLn": 115,
                            "endLn": 120,
                            "testMethod": "@Test\n public void lookingAtAREDirector ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" , PatternFlags . ADVANCED ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana",
                            "startLn": 2403,
                            "endLn": 2407,
                            "testMethod": "@Test\n public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana ( ) {\n     List < Wordform > formas = loc\u012bt\u0101js . generateInflections ( \"STR\" ) ; \n     assertEquals(1,formas.size());\n}",
                            "oracle": "assertEquals(1,formas.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java",
                            "focalName": "generateInflections",
                            "focalStartLn": 639,
                            "focalEndLn": 641,
                            "focalMethod": " public ArrayList < Wordform > generateInflections ( String lemma ) { \n return generateInflections ( lemma , false ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkEURRUS",
                            "startLn": 356,
                            "endLn": 367,
                            "testMethod": "@Test\n public void checkEURRUS ( ) {\n     assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrEURRUS.convert(V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DefaultExtensionTest",
                    "classPath": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testToString",
                            "startLn": 131,
                            "endLn": 135,
                            "testMethod": "@Test\n public void testToString ( ) throws Exception {\n     DefaultExtension defaultExtension = new DefaultExtension ( ) ; \n     assertEquals(\"STR\",defaultExtension.toString());\n}",
                            "oracle": "assertEquals(\"STR\",defaultExtension.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/extensions/DefaultExtension.java",
                            "focalName": "toString",
                            "focalStartLn": 89,
                            "focalEndLn": 92,
                            "focalMethod": "@Override\n public String toString ( ) { \n return getClass ( ) . getSimpleName ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testRemoveSurroundingQuotes",
                            "startLn": 450,
                            "endLn": 471,
                            "testMethod": "@Test\n public void testRemoveSurroundingQuotes ( ) {\n     assertEquals(\"STR\",DevUtil.removeSurroundingQuotes(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",DevUtil.removeSurroundingQuotes(\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "removeSurroundingQuotes",
                            "focalStartLn": 1681,
                            "focalEndLn": 1686,
                            "focalMethod": " protected static String removeSurroundingQuotes ( String str ) { \n if ( str != null && str . length ( ) >= 2 && ( ( str . startsWith ( \"STR\" ) && str . endsWith ( \"STR\" ) ) || ( str . startsWith ( \"STR\" ) && str . endsWith ( \"STR\" ) ) ) ) { \n return str . substring ( 1 , str . length ( ) - 1 ) ; \n } return str ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}