{
    "projects": [
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetFileFromConfigDirectory",
                            "startLn": 390,
                            "endLn": 399,
                            "testMethod": "@Test\n public void testGetFileFromConfigDirectory ( ) throws Exception {\n     DevUtil util = new DevTestUtil ( null , null , null , this . configDirectory , null , false , false ) ; \n     File tempTextFile = new File ( configDirectory , \"STR\" ) ; \n     Files . write ( tempTextFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File configFile = util . getFileFromConfigDirectory ( \"STR\" ) ; \n     assertTrue(configFile.exists());\n}",
                            "oracle": "assertTrue(configFile.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "getFileFromConfigDirectory",
                            "focalStartLn": 4277,
                            "focalEndLn": 4283,
                            "focalMethod": " protected File getFileFromConfigDirectory ( String file ) { \n File f = new File ( configDirectory , file ) ; \n if ( configDirectory != null && f . exists ( ) ) { \n return f ; \n } return null ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RecordsTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "of",
                            "startLn": 35,
                            "endLn": 38,
                            "testMethod": "@Test\n void of ( ) {\n     assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.of(\"STR\",\"STR\",\"STR\"));\n}",
                            "oracle": "assertEquals(attrs(attr(\"STR\",\"STR\"),attr(\"STR\",\"STR\")),Records.of(\"STR\",\"STR\",\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java",
                            "focalName": "of",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static Attributes < ForNode > of ( String ... recs ) { \n return attrs ( attr ( SHAPE , RECORD ) , attr ( LABEL , String . join ( \"STR\" , recs ) ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FillStyleTest",
                    "classPath": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java",
                    "subRepo": "graphviz-rough",
                    "classTests": [
                        {
                            "testName": "zigzag",
                            "startLn": 47,
                            "endLn": 53,
                            "testMethod": "@Test\n void zigzag ( ) {\n     assertEquals(map(\"STR\",\"STR\"),FillStyle.zigzag().values);\n}",
                            "oracle": "assertEquals(map(\"STR\",\"STR\"),FillStyle.zigzag().values);",
                            "oracleLn": 0,
                            "focalFile": "graphviz-rough/src/main/java/guru/nidi/graphviz/rough/FillStyle.java",
                            "focalName": "zigzag",
                            "focalStartLn": 188,
                            "focalEndLn": 190,
                            "focalMethod": " public static Zigzag zigzag ( ) { \n return new Zigzag ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OPLogTest",
                    "classPath": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testDescription",
                            "startLn": 35,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testDescription ( ) throws SecurityException , NoSuchMethodException {\n     Plog annotation = ( Plog ) ClassUtil . getDeclaredMethod ( getClass ( ) , false , \"STR\" ) . getAnnotation ( Plog . class ) ; \n     String value = annotation . value ( ) ; \n     Assert.assertEquals(\"STR\",value);\n}",
                            "oracle": "Assert.assertEquals(\"STR\",value);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ClassUtil.java",
                            "focalName": "getDeclaredMethod",
                            "focalStartLn": 239,
                            "focalEndLn": 255,
                            "focalMethod": " public static Method getDeclaredMethod ( Class < ? > clazz , boolean recursively , String methodName , Class < ? > ... parameterTypes ) { \n try { \n return clazz . getDeclaredMethod ( methodName , parameterTypes ) ; \n } catch ( NoSuchMethodException e ) { \n Class < ? > superClass = clazz . getSuperclass ( ) ; \n if ( superClass != null && recursively ) { \n return getDeclaredMethod ( superClass , true , methodName , parameterTypes ) ; \n } } catch ( SecurityException e ) { \n log . error ( \"STR\" , e . getMessage ( ) , e ) ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "ReflexUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/ReflexUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetInstance",
                            "startLn": 35,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testGetInstance ( ) {\n     Map < String , Object > map = new HashMap < String , Object > ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     map . put ( \"STR\" , 21 ) ; \n     map . put ( \"STR\" , null ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     TestVo obj = ReflexUtil . getBasicInstance ( TestVo . class , map , false ) ; \n     Assert.assertEquals(21,obj.getAge());\n}",
                            "oracle": "Assert.assertEquals(21,obj.getAge());",
                            "oracleLn": 6,
                            "focalFile": "src/main/java/com/rockagen/commons/util/ReflexUtil.java",
                            "focalName": "getBasicInstance",
                            "focalStartLn": 427,
                            "focalEndLn": 449,
                            "focalMethod": " public static < T > T getBasicInstance ( final Class < T > clazz , final Map < String , Object > paramsMap , boolean accessible ) { \n if ( clazz != null && paramsMap != null && paramsMap . size ( ) > 0 ) { \n T instance = ClassUtil . getInstance ( clazz , accessible ) ; \n for ( Map . Entry < String , Object > entry : paramsMap . entrySet ( ) ) { \n String key = entry . getKey ( ) ; \n if ( CommUtil . isBlank ( key ) ) { \n continue ; \n } key = CommUtil . uncapitalize ( key ) ; \n setFieldValue ( instance , key , entry . getValue ( ) , false ) ; \n } return instance ; \n } else { \n return null ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GlobalSwitchTest",
                    "classPath": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "initClass",
                        "startLn": 38,
                        "endLn": 40,
                        "setupMethod": "@BeforeClass\n public static void initClass ( ) { \n } @Before\n public void init ( ) { \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDefaultvalue",
                            "startLn": 54,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testDefaultvalue ( ) {\n     System . clearProperty ( Configs . CONN_RECONNECT_SWITCH ) ; \n     System . clearProperty ( Configs . CONN_MONITOR_SWITCH ) ; \n     client1 = new RpcClient ( ) ; \n     client2 = new RpcClient ( ) ; \n     Assert.assertFalse(client1.isConnectionMonitorSwitchOn());\n}",
                            "oracle": "Assert.assertFalse(client1.isConnectionMonitorSwitchOn());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "isConnectionMonitorSwitchOn",
                            "focalStartLn": 558,
                            "focalEndLn": 562,
                            "focalMethod": "@Override\n@Deprecated\n public boolean isConnectionMonitorSwitchOn ( ) { \n return option ( BoltClientOption . CONN_MONITOR_SWITCH ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RpcAddressParserTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testParserConnectTimeout",
                            "startLn": 70,
                            "endLn": 79,
                            "testMethod": "@Test\n public void testParserConnectTimeout ( ) throws RemotingException {\n     String url = \"STR\" ; \n     RpcAddressParser parser = new RpcAddressParser ( ) ; \n     Url btUrl = parser . parse ( url ) ; \n     Assert.assertEquals(\"STR\",btUrl.getIp());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",btUrl.getIp());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/alipay/remoting/Url.java",
                            "focalName": "getIp",
                            "focalStartLn": 168,
                            "focalEndLn": 170,
                            "focalMethod": " public String getIp ( ) { \n return ip ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorManagerTest",
                    "classPath": "src/test/java/com/alipay/remoting/ProcessorManagerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testRegisterProcessor",
                            "startLn": 36,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testRegisterProcessor ( ) {\n     ProcessorManager processorManager = new ProcessorManager ( ) ; \n     CommandCode cmd1 = RpcCommandCode . RPC_REQUEST ; \n     CommandCode cmd2 = RpcCommandCode . RPC_REQUEST ; \n     RpcRequestProcessor rpcRequestProcessor1 = new RpcRequestProcessor ( ) ; \n     RpcRequestProcessor rpcRequestProcessor2 = new RpcRequestProcessor ( ) ; \n     processorManager . registerProcessor ( cmd1 , rpcRequestProcessor1 ) ; \n     processorManager . registerProcessor ( cmd2 , rpcRequestProcessor2 ) ; \n     Assert.assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);\n}",
                            "oracle": "Assert.assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/com/alipay/remoting/ProcessorManager.java",
                            "focalName": "getProcessor",
                            "focalStartLn": 103,
                            "focalEndLn": 109,
                            "focalMethod": " public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { \n RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; \n if ( processor != null ) { \n return processor ; \n } return this . defaultProcessor ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testBadSignature",
                            "startLn": 103,
                            "endLn": 109,
                            "testMethod": "@Test\n public void testBadSignature ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     client . setKey ( \"STR\" ) ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());",
                            "oracleLn": 3,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        },
                        {
                            "testName": "testBadOTP",
                            "startLn": 76,
                            "endLn": 82,
                            "testMethod": "@Test\n public void testBadOTP ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertNotNull(response);\n}",
                            "oracle": "assertNotNull(response);",
                            "oracleLn": 2,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java",
                            "focalName": "verify",
                            "focalStartLn": 70,
                            "focalEndLn": 70,
                            "focalMethod": " public abstract VerificationResponse verify ( String otp ) throws YubicoVerificationException , YubicoValidationFailure ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ContentActivitiesTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 28,
                        "endLn": 47,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n category = new ArrayList < Activity > ( ) ; \n category . add ( new Activity ( ID ) ) ; \n grouping = new ArrayList < Activity > ( ) ; \n grouping . add ( new Activity ( ID ) ) ; \n other = new ArrayList < Activity > ( ) ; \n other . add ( new Activity ( ID ) ) ; \n parent = new ArrayList < Activity > ( ) ; \n parent . add ( new Activity ( ID ) ) ; \n contextActivities = new ContextActivities ( ) ; \n contextActivities . setCategory ( category ) ; \n contextActivities . setGrouping ( grouping ) ; \n contextActivities . setOther ( other ) ; \n contextActivities . setParent ( parent ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetCategory",
                            "startLn": 109,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testSetCategory ( ) {\n     String newID = \"STR\" + ID ; \n     ArrayList < Activity > expected = category ; \n     expected . add ( new Activity ( newID ) ) ; \n     contextActivities . setCategory ( expected ) ; \n     ArrayList < Activity > actual = contextActivities . getCategory ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java",
                            "focalName": "getCategory",
                            "focalStartLn": 28,
                            "focalEndLn": 30,
                            "focalMethod": " public ArrayList < Activity > getCategory ( ) { \n return category ; \n } "
                        }
                    ]
                },
                {
                    "className": "ScoreTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ScoreTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 23,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n score = new Score ( ) ; \n score . setMax ( MAX ) ; \n score . setMin ( MIN ) ; \n score . setRaw ( RAW ) ; \n score . setScaled ( SCALED ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerialize",
                            "startLn": 97,
                            "endLn": 107,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     JsonElement actual = score . serialize ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Score.java",
                            "focalName": "serialize",
                            "focalStartLn": 37,
                            "focalEndLn": 44,
                            "focalMethod": " public JsonElement serialize ( ) { \n JsonObject obj = new JsonObject ( ) ; \n obj . addProperty ( \"STR\" , this . scaled ) ; \n obj . addProperty ( \"STR\" , this . raw ) ; \n obj . addProperty ( \"STR\" , this . min ) ; \n obj . addProperty ( \"STR\" , this . max ) ; \n return obj ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n HashMap < String , String > display = new HashMap < String , String > ( ) ; \n display . put ( \"STR\" , EN_VERB ) ; \n display . put ( \"STR\" , ES_VERB ) ; \n verb = new Verb ( ID , display ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetDisplay",
                            "startLn": 95,
                            "endLn": 103,
                            "testMethod": "@Test\n public void testSetDisplay ( ) {\n     HashMap < String , String > expected = new HashMap < String , String > ( ) ; \n     expected . put ( \"STR\" , \"STR\" ) ; \n     verb . setDisplay ( expected ) ; \n     HashMap < String , String > actual = verb . getDisplay ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verb.java",
                            "focalName": "getDisplay",
                            "focalStartLn": 45,
                            "focalEndLn": 47,
                            "focalMethod": " public HashMap < String , String > getDisplay ( ) { \n return display ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n agent = new Agent ( ) ; \n agent . setMbox ( MBOX ) ; \n Verb v = new Verb ( \"STR\" ) ; \n Activity act = new Activity ( TEST_IRI + UUID . randomUUID ( ) . toString ( ) ) ; \n statement = new Statement ( agent , v , act ) ; \n statement . setId ( ID ) ; \n Attachment attachment = new Attachment ( ) ; \n Attachment expected = new Attachment ( ) ; \n String att = \"STR\" ; \n String contentType = \"STR\" ; \n expected . addAttachment ( att , contentType ) ; \n attachment . setUsageType ( new URI ( \"STR\" ) ) ; \n ArrayList < Attachment > expectedList = new ArrayList < Attachment > ( ) ; \n expectedList . add ( attachment ) ; \n statement . setAttachments ( expectedList ) ; \n Context context = new Context ( ) ; \n context . setLanguage ( \"STR\" ) ; \n statement . setContext ( context ) ; \n Result result = new Result ( ) ; \n result . setSuccess ( true ) ; \n statement . setResult ( result ) ; \n String time = String . valueOf ( System . currentTimeMillis ( ) ) ; \n statement . setStored ( time ) ; \n statement . setTimestamp ( time ) ; \n statement . setAuthority ( agent ) ; \n statement . setVersion ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetId",
                            "startLn": 217,
                            "endLn": 224,
                            "testMethod": "@Test\n public void testGetId ( ) {\n     String expected = ID ; \n     statement . setId ( expected ) ; \n     String actual = statement . getId ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Statement.java",
                            "focalName": "getId",
                            "focalStartLn": 68,
                            "focalEndLn": 70,
                            "focalMethod": " public String getId ( ) { \n return id ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "FramedataImpl1Test",
                    "classPath": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSetters",
                            "startLn": 75,
                            "endLn": 91,
                            "testMethod": "@Test\n public void testSetters ( ) {\n     FramedataImpl1 frame = FramedataImpl1 . get ( Opcode . BINARY ) ; \n     frame . setFin ( false ) ; \n     assertEquals(\"STR\",false,frame.isFin());\n}",
                            "oracle": "assertEquals(\"STR\",false,frame.isFin());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/java_websocket/framing/FramedataImpl1.java",
                            "focalName": "isFin",
                            "focalStartLn": 109,
                            "focalEndLn": 112,
                            "focalMethod": "@Override\n public boolean isFin ( ) { \n return fin ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OMatchStatementExecutionTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 29,
                        "endLn": 63,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAliasesWithSubquery",
                            "startLn": 1367,
                            "endLn": 1374,
                            "testMethod": "@Test\n public void testAliasesWithSubquery ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(1,qResult.size());\n}",
                            "oracle": "assertEquals(1,qResult.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OElementTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OElementTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 22,
                        "endLn": 26,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetProperty",
                            "startLn": 33,
                            "endLn": 44,
                            "testMethod": "@Test\n public void testGetSetProperty ( ) {\n     OElement elem = db . newElement ( ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     elem . setProperty ( \"STR\" , \"STR\" ) ; \n     Set < String > names = elem . getPropertyNames ( ) ; \n     Assert.assertTrue(names.contains(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(names.contains(\"STR\"));",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/OElement.java",
                            "focalName": "getPropertyNames",
                            "focalStartLn": 37,
                            "focalEndLn": 37,
                            "focalMethod": " public Set < String > getPropertyNames ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "HttpCommandTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpCommandTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "createDatabase",
                        "startLn": 37,
                        "endLn": 46,
                        "setupMethod": "@Before\n public void createDatabase ( ) throws Exception { \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n Assert . assertEquals ( post ( \"STR\" + getDatabaseName ( ) + \"STR\" ) . setUserName ( \"STR\" ) . setUserPassword ( \"STR\" ) . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) , 200 ) ; \n onAfterDatabaseCreated ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "commandWithPosParams",
                            "startLn": 46,
                            "endLn": 60,
                            "testMethod": "@Test\n public void commandWithPosParams ( ) throws IOException {\n     Assert.assertEquals(post(\"STR\"+getDatabaseName()+\"STR\").payload(\"STR\",CONTENT.TEXT).setUserName(\"STR\").setUserPassword(\"STR\").getResponse().getStatusLine().getStatusCode(),200);\n}",
                            "oracle": "Assert.assertEquals(post(\"STR\"+getDatabaseName()+\"STR\").payload(\"STR\",CONTENT.TEXT).setUserName(\"STR\").setUserPassword(\"STR\").getResponse().getStatusLine().getStatusCode(),200);",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "field",
                            "focalStartLn": 1201,
                            "focalEndLn": 1226,
                            "focalMethod": "@Override\n public < RET > RET field ( final String iFieldName ) { \n RET value = this . rawField ( iFieldName ) ; \n if ( ! iFieldName . startsWith ( \"STR\" ) && _lazyLoad && value instanceof ORID && ( ( ( ORID ) value ) . isPersistent ( ) || ( ( ORID ) value ) . isNew ( ) ) && ODatabaseRecordThreadLocal . instance ( ) . isDefined ( ) ) { \n RET newValue = getDatabase ( ) . load ( ( ORID ) value ) ; \n if ( newValue != null ) { \n unTrack ( ( ORID ) value ) ; \n track ( ( OIdentifiable ) newValue ) ; \n value = newValue ; \n if ( this . isTrackingChanges ( ) ) { \n ORecordInternal . setDirtyManager ( ( ORecord ) value , this . getDirtyManager ( ) ) ; \n } if ( ! iFieldName . contains ( \"STR\" ) ) { \n ODocumentEntry entry = _fields . get ( iFieldName ) ; \n removeCollectionChangeListener ( entry , entry . value ) ; \n entry . value = value ; \n addCollectionChangeListener ( entry ) ; \n } } } return value ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateDDLByKey",
                            "startLn": 261,
                            "endLn": 265,
                            "testMethod": "@Test\n public void testCreateDDLByKey ( ) {\n     final String ddl = propertyIndexByKey . toCreateIndexDDL ( \"STR\" , \"STR\" , null ) . toLowerCase ( Locale . ENGLISH ) ; \n     Assert.assertEquals(ddl,\"STR\");\n}",
                            "oracle": "Assert.assertEquals(ddl,\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "toCreateIndexDDL",
                            "focalStartLn": 205,
                            "focalEndLn": 221,
                            "focalMethod": "@Override\n public String toCreateIndexDDL ( String indexName , String indexType , String engine ) { \n final StringBuilder ddl = new StringBuilder ( \"STR\" ) ; \n ddl . append ( indexName ) . append ( \"STR\" ) ; \n ddl . append ( className ) . append ( \"STR\" ) . append ( field ) . append ( \"STR\" ) ; \n if ( indexBy == INDEX_BY . KEY ) ddl . append ( \"STR\" ) ; \n else ddl . append ( \"STR\" ) ; \n ddl . append ( \"STR\" ) ; \n ddl . append ( indexType ) ; \n return ddl . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "FloatSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 38,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n floatSerializer = new OFloatSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerializeNative",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testSerializeNative ( ) {\n     floatSerializer . serializeNative ( OBJECT , stream , 0 ) ; \n     Float v = floatSerializer . deserializeNative ( stream , 0 ) ; \n     Assert.assertEquals(v,OBJECT);\n}",
                            "oracle": "Assert.assertEquals(v,OBJECT);",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java",
                            "focalName": "deserializeNative",
                            "focalStartLn": 83,
                            "focalEndLn": 85,
                            "focalMethod": " public float deserializeNative ( final byte [ ] stream , final int startPosition ) { \n return Float . intBitsToFloat ( CONVERTER . getInt ( stream , startPosition , ByteOrder . nativeOrder ( ) ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TrackedSetTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRemoveNotificationThree",
                            "startLn": 156,
                            "endLn": 182,
                            "testMethod": "@Test\n public void testRemoveNotificationThree ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "TxNonUniqueIndexWithCollationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/TxNonUniqueIndexWithCollationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 41,
                        "endLn": 52,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n db . getMetadata ( ) . getSchema ( ) . createClass ( \"STR\" ) . createProperty ( \"STR\" , OType . STRING ) . setCollate ( \"STR\" ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n db . newInstance ( \"STR\" ) . field ( \"STR\" , \"STR\" ) . save ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testIn",
                            "startLn": 90,
                            "endLn": 105,
                            "testMethod": "@Test\n public void testIn ( ) {\n     db . begin ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     final OLegacyResultSet < ODocument > r = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(4,r.size());\n}",
                            "oracle": "assertEquals(4,r.size());",
                            "oracleLn": 3,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OLuceneManualIndexTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/tests/OLuceneManualIndexTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "init",
                        "startLn": 41,
                        "endLn": 49,
                        "setupMethod": "@Before\n public void init ( ) { \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n db . command ( \"STR\" ) ; \n } @Before\n public void setupDatabase ( ) { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n setupDatabase ( config ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "shouldCreateManualIndexWithJavaApi",
                            "startLn": 51,
                            "endLn": 76,
                            "testMethod": "@Test\n public void shouldCreateManualIndexWithJavaApi ( ) throws Exception {\n     ODocument meta = new ODocument ( ) . field ( \"STR\" , StandardAnalyzer . class . getName ( ) ) ; \n     OIndex < ? > index = db . getMetadata ( ) . getIndexManager ( ) . createIndex ( \"STR\" , OClass . INDEX_TYPE . FULLTEXT . toString ( ) , new OSimpleKeyIndexDefinition ( OType . STRING , OType . STRING ) , null , null , meta , OLuceneIndexFactory . LUCENE_ALGORITHM ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     db . command ( \"STR\" ) ; \n     Assert.assertEquals(index.getSize(),4);\n}",
                            "oracle": "Assert.assertEquals(index.getSize(),4);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java",
                            "focalName": "getSize",
                            "focalStartLn": 115,
                            "focalEndLn": 115,
                            "focalMethod": " long getSize ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CiEnvironmentTest",
                    "classPath": "src/test/java/io/cucumber/pro/environment/CiEnvironmentTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "recognises_circle",
                            "startLn": 31,
                            "endLn": 43,
                            "testMethod": "@Test\n public void recognises_circle ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     env . put ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());\n}",
                            "oracle": "assertEquals(\"STR\",CIEnvironment.detect(env).getCiName());",
                            "oracleLn": 5,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "getCiName",
                            "focalStartLn": 130,
                            "focalEndLn": 132,
                            "focalMethod": " public String getCiName ( ) { \n return ciName ; \n } "
                        },
                        {
                            "testName": "is_inactive_by_default",
                            "startLn": 12,
                            "endLn": 16,
                            "testMethod": "@Test\n public void is_inactive_by_default ( ) {\n     Map < String , String > env = new HashMap < > ( ) ; \n     assertNull(CIEnvironment.detect(env));\n}",
                            "oracle": "assertNull(CIEnvironment.detect(env));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/cucumber/pro/environment/CIEnvironment.java",
                            "focalName": "detect",
                            "focalStartLn": 21,
                            "focalEndLn": 30,
                            "focalMethod": " public static CIEnvironment detect ( Map < String , String > env ) { \n CIEnvironment ci ; \n if ( ( ci = detectBamboo ( env ) ) != null ) return ci ; \n if ( ( ci = detectCircle ( env ) ) != null ) return ci ; \n if ( ( ci = detectJenkins ( env ) ) != null ) return ci ; \n if ( ( ci = detectTfs ( env ) ) != null ) return ci ; \n if ( ( ci = detectTravis ( env ) ) != null ) return ci ; \n if ( ( ci = detectWercker ( env ) ) != null ) return ci ; \n return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "YamlConfigLoaderTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "merges",
                            "startLn": 29,
                            "endLn": 46,
                            "testMethod": "@Test\n public void merges ( ) {\n     Config config = new Config ( ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     new YamlConfigLoader ( new StringReader ( \"STR\" + \"STR\" + \"STR\" ) ) . load ( config ) ; \n     String yaml = \"STR\" + \"STR\" + \"STR\" + \"STR\" ; \n     assertEquals(yaml,config.toYaml(\"STR\"));\n}",
                            "oracle": "assertEquals(yaml,config.toYaml(\"STR\"));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "toYaml",
                            "focalStartLn": 100,
                            "focalEndLn": 108,
                            "focalMethod": " public String toYaml ( String rootKey ) { \n try { \n StringBuilder out = new StringBuilder ( ) ; \n this . print ( 0 , rootKey , out ) ; \n return out . toString ( ) ; \n } catch ( IOException e ) { \n throw new RuntimeException ( e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "tradier",
            "repoName": "dropwizard-raven",
            "subRepos": [],
            "commitSHA": "117c78b4879ba930d0187ae2874773646213d3d2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RavenAppenderFactoryTest",
                    "classPath": "src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "hasValidDefaults",
                            "startLn": 27,
                            "endLn": 38,
                            "testMethod": "@Test\n public void hasValidDefaults ( ) throws IOException , ConfigurationException {\n     final RavenAppenderFactory factory = new RavenAppenderFactory ( ) ; \n     assertNull(\"STR\",factory.getDsn());\n}",
                            "oracle": "assertNull(\"STR\",factory.getDsn());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java",
                            "focalName": "getDsn",
                            "focalStartLn": 50,
                            "focalEndLn": 52,
                            "focalMethod": " public String getDsn ( ) { \n return dsn ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AHashMapTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AHashMapTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testEqualityIdentity",
                            "startLn": 250,
                            "endLn": 279,
                            "testMethod": "@ SuppressWarnings ( \"STR\" ) @Test\n public void testEqualityIdentity ( ) {\n     AMap < String , String > map = AHashMap . empty ( AEquality . IDENTITY ) ; \n     final String key1 = new String ( \"STR\" ) ; \n     final String key2 = new String ( \"STR\" ) ; \n     final String key3 = new String ( \"STR\" ) ; \n     assertEquals(key1,key2);\n}",
                            "oracle": "assertEquals(key1,key2);",
                            "oracleLn": 4,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AHashMap.java",
                            "focalName": "empty",
                            "focalStartLn": 41,
                            "focalEndLn": 47,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public static < K , V > AHashMap < K , V > empty ( AEquality equality ) { \n if ( equality == AEquality . EQUALS ) return ( AHashMap < K , V > ) emptyEquals ; \n if ( equality == AEquality . IDENTITY ) return ( AHashMap < K , V > ) emptyIdentity ; \n return new AHashMap < > ( equality ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testFilter",
                            "startLn": 146,
                            "endLn": 158,
                            "testMethod": "@Test\n public void testFilter ( ) {\n     final APredicateNoThrow < String > len1 = new APredicateNoThrow < String > ( ) { \n @Override\n public boolean apply ( String o ) { \n return o . length ( ) == 1 ; \n } } ; \n     assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));\n}",
                            "oracle": "assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "filter",
                            "focalStartLn": 348,
                            "focalEndLn": 356,
                            "focalMethod": " public static < T , E extends Throwable > List < T > filter ( List < T > coll , APredicate < ? super T , E > pred ) throws E { \n final List < T > result = createEmptyListOfType ( coll , false ) ; \n for ( T o : coll ) { \n if ( pred . apply ( o ) ) { \n result . add ( o ) ; \n } } return result ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "same_cells_means_same_puzzle",
                            "startLn": 106,
                            "endLn": 112,
                            "testMethod": "@Test\n public void same_cells_means_same_puzzle ( ) {\n     Puzzle a = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     Puzzle b = new Puzzle ( swap ( getSolution ( ) , 8 , 3 ) ) ; \n     assertEquals(a,b);\n}",
                            "oracle": "assertEquals(a,b);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "Puzzle",
                            "focalStartLn": 15,
                            "focalEndLn": 18,
                            "focalMethod": " public Puzzle ( int [ ] cells ) { \n this . cells = cells ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "basis-technology-corp",
            "repoName": "tcl-regex-java",
            "subRepos": [],
            "commitSHA": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MatcherTest",
                    "classPath": "src/test/java/apitests/MatcherTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "lookingAt",
                            "startLn": 95,
                            "endLn": 106,
                            "testMethod": "@Test\n public void lookingAt ( ) throws Exception {\n     RePattern pattern = HsrePattern . compile ( \"STR\" ) ; \n     ReMatcher matcher = pattern . matcher ( \"STR\" ) ; \n     assertTrue(matcher.lookingAt());\n}",
                            "oracle": "assertTrue(matcher.lookingAt());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/basistech/tclre/ReMatcher.java",
                            "focalName": "lookingAt",
                            "focalStartLn": 120,
                            "focalEndLn": 120,
                            "focalMethod": " boolean lookingAt ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "j\u0101m\u0101k",
                            "startLn": 706,
                            "endLn": 717,
                            "testMethod": "@Test\n public void j\u0101m\u0101k ( ) {\n     Word j\u0101m\u0101k = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(j\u0101m\u0101k.isRecognized());\n}",
                            "oracle": "assertTrue(j\u0101m\u0101k.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "\u017eirafe",
                            "startLn": 2791,
                            "endLn": 2797,
                            "testMethod": "@Test\n public void \u017eirafe ( ) {\n     Word w = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(w.isRecognized());\n}",
                            "oracle": "assertTrue(w.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoaderTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/LoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "fileNok",
                            "startLn": 125,
                            "endLn": 130,
                            "testMethod": "@ Test ( expected = ResourceNotFoundException . class ) public void fileNok ( ) {\n     final URL resource = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( \"STR\" ) ; \n     assertEquals(\"STR\",resource.getProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",resource.getProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/FileLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 34,
                            "focalEndLn": 43,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n try { \n final File file = new File ( base , name ) ; \n return file . lastModified ( ) > ifModifiedSince ? new FileInputStream ( file ) : null ; \n } catch ( FileNotFoundException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluent",
            "repoName": "fluent-logger-java",
            "subRepos": [],
            "commitSHA": "2e5fdf2dbed59cc5af88442ceae6cbe72f321060",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestBugfixes",
                    "classPath": "src/test/java/org/fluentd/logger/TestBugfixes.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters",
                            "startLn": 12,
                            "endLn": 30,
                            "testMethod": "@Test\n public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters ( ) {\n     System . setProperty ( Config . FLUENT_SENDER_CLASS , \"STR\" ) ; \n     FluentLogger logger = FluentLogger . getLogger ( \"STR\" ) ; \n     logger . log ( \"STR\" , Collections . < String , Object > emptyMap ( ) ) ; \n     logger . close ( ) ; \n     assertEquals(null,logger.sender);\n}",
                            "oracle": "assertEquals(null,logger.sender);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/org/fluentd/logger/FluentLogger.java",
                            "focalName": "close",
                            "focalStartLn": 109,
                            "focalEndLn": 116,
                            "focalMethod": " public void close ( ) { \n if ( sender != null ) { \n sender . flush ( ) ; \n sender . close ( ) ; \n sender = null ; \n } factory . purgeLogger ( this ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ObjectQueryPreparerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 61,
                        "endLn": 71,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . preparer = new ObjectQueryPreparer ( ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . mockParameterReplacer = Mockito . mock ( ParameterReplacer . class ) ; \n this . testTarget001 = new TestClass001 ( ) ; \n this . testTarget002 = new TestClass002 ( ) ; \n this . testTarget003 = new TestClass003 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetParameterReplacer",
                            "startLn": 92,
                            "endLn": 99,
                            "testMethod": "@Test\n public void testGetSetParameterReplacer ( ) throws Exception {\n     assertNotNull(this.preparer.getParameterReplacer());\n}",
                            "oracle": "assertNotNull(this.preparer.getParameterReplacer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java",
                            "focalName": "getParameterReplacer",
                            "focalStartLn": 51,
                            "focalEndLn": 53,
                            "focalMethod": " public ParameterReplacer getParameterReplacer ( ) { \n return parameterReplacer ; \n } "
                        }
                    ]
                },
                {
                    "className": "JMXRemoteUrlConnectionFactoryTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 48,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . mockJmxServiceUrl = Mockito . mock ( JMXServiceURL . class ) ; \n this . mockConnectorFactoryDelegate = Mockito . mock ( JMXConnectorFactoryDelegate . class ) ; \n this . mockJmxMBeanConnectionFactory = Mockito . mock ( JMXMBeanConnectionFactory . class ) ; \n this . mockJmxConnector = Mockito . mock ( JMXConnector . class ) ; \n this . mockJmxMBeanConnection = Mockito . mock ( JMXMBeanConnection . class ) ; \n this . mockLog = Mockito . mock ( Logger . class ) ; \n this . factory = new JMXRemoteUrlConnectionFactory ( this . mockJmxServiceUrl ) ; \n Mockito . when ( this . mockConnectorFactoryDelegate . connect ( this . mockJmxServiceUrl ) ) . thenReturn ( this . mockJmxConnector ) ; \n Mockito . when ( this . mockJmxMBeanConnectionFactory . create ( this . mockJmxConnector ) ) . thenReturn ( this . mockJmxMBeanConnection ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTargetDescription",
                            "startLn": 145,
                            "endLn": 150,
                            "testMethod": "@Test\n public void testGetTargetDescription ( ) throws Exception {\n     Mockito . when ( this . mockJmxServiceUrl . toString ( ) ) . thenReturn ( \"STR\" ) ; \n     assertEquals(\"STR\",this.factory.getTargetDescription());\n}",
                            "oracle": "assertEquals(\"STR\",this.factory.getTargetDescription());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java",
                            "focalName": "getTargetDescription",
                            "focalStartLn": 100,
                            "focalEndLn": 103,
                            "focalMethod": "@Override\n public String getTargetDescription ( ) { \n return \"STR\" + this . url ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AnnotatedMethodRetrieverTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "testGetAtMostOneVoidMethodSkipArgsCheck",
                            "startLn": 18,
                            "endLn": 24,
                            "testMethod": "@Test\n public void testGetAtMostOneVoidMethodSkipArgsCheck ( ) {\n     Method method = new AnnotatedMethodRetriever ( AnnotationTestClass . class , Prepare . class ) . withVoidReturnType ( ) . find ( ) ; \n     assertEquals(\"STR\",method.getName());\n}",
                            "oracle": "assertEquals(\"STR\",method.getName());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java",
                            "focalName": "find",
                            "focalStartLn": 68,
                            "focalEndLn": 79,
                            "focalMethod": " public Method find ( ) { \n List < Method > methods = findAll ( ) ; \n switch ( methods . size ( ) ) { \n case 0 : return null ; \n case 1 : return methods . iterator ( ) . next ( ) ; \n default : throw new ReflectionException ( format ( \"STR\" , clazz . getName ( ) , annotationClazz . getName ( ) ) ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "PropertyBindingSupport_bind0_NumericalTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java",
                    "subRepo": "simulator",
                    "classTests": [
                        {
                            "testName": "bind_int_whitespace",
                            "startLn": 89,
                            "endLn": 93,
                            "testMethod": "@Test\n public void bind_int_whitespace ( ) {\n     assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));\n}",
                            "oracle": "assertTrue(bind0(testObject,\"STR\",\"STR\"+NEW_LINE));",
                            "oracleLn": 0,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java",
                            "focalName": "bind0",
                            "focalStartLn": 100,
                            "focalEndLn": 122,
                            "focalMethod": " static boolean bind0 ( Object object , String property , String value ) { \n value = value . trim ( ) ; \n String [ ] path = property . split ( \"STR\" ) ; \n object = findTargetObject ( object , property , path ) ; \n if ( object == null ) { \n return false ; \n } Field field = findField ( object . getClass ( ) , path [ path . length - 1 ] ) ; \n if ( field == null || isProbeField ( field ) ) { \n return false ; \n } try { \n setField ( field , object , value ) ; \n return true ; \n } catch ( Exception e ) { \n throw new BindException ( format ( \"STR\" , value , object . getClass ( ) . getName ( ) , property , field . getType ( ) ) , e ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testDetokenizer",
                            "startLn": 200,
                            "endLn": 208,
                            "testMethod": "@Test\n public void testDetokenizer ( ) {\n     List < String > words = Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.detokenize(words));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "detokenize",
                            "focalStartLn": 182,
                            "focalEndLn": 184,
                            "focalMethod": " public static String detokenize ( List < String > tokens ) { \n return OpenKoreanTextProcessor . detokenize ( JavaConverters . asScalaBufferConverter ( tokens ) . asScala ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "AlejandroRivera",
            "repoName": "embedded-rabbitmq",
            "subRepos": [],
            "commitSHA": "79615bf3e8e738ba756ebb44e6bf456610de4520",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExtractorFactoryTest",
                    "classPath": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 14,
                        "endLn": 17,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n builder = new EmbeddedRabbitMqConfig . Builder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "withCaching",
                            "startLn": 27,
                            "endLn": 33,
                            "testMethod": "@Test\n public void withCaching ( ) throws Exception {\n     builder . useCachedDownload ( true ) ; \n     Extractor extractor = new ExtractorFactory ( builder . build ( ) ) . getNewInstance ( ) ; \n     assertTrue(extractor.getClass().equals(CachedExtractor.class));\n}",
                            "oracle": "assertTrue(extractor.getClass().equals(CachedExtractor.class));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactory.java",
                            "focalName": "getNewInstance",
                            "focalStartLn": 16,
                            "focalEndLn": 22,
                            "focalMethod": " public Extractor getNewInstance ( ) { \n Extractor extractor = new BasicExtractor ( config ) ; \n if ( config . shouldCachedDownload ( ) ) { \n extractor = new CachedExtractor ( extractor , config ) ; \n } return extractor ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CookieIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/CookieIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "testMultipleCookieSentBackToClient",
                            "startLn": 102,
                            "endLn": 113,
                            "testMethod": "@Test\n public void testMultipleCookieSentBackToClient ( ) throws Exception {\n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     this . testServer . cookiesToSend . add ( new Cookie ( \"STR\" , \"STR\" , 30 ) ) ; \n     HttpGet httpget = new HttpGet ( \"STR\" ) ; \n     ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; \n     this . httpclient . execute ( httpget , responseHandler ) ; \n     assertEquals(4,this.httpclient.getCookieStore().getCookies().size());\n}",
                            "oracle": "assertEquals(4,this.httpclient.getCookieStore().getCookies().size());",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/content/Cookie.java",
                            "focalName": "Cookie",
                            "focalStartLn": 62,
                            "focalEndLn": 66,
                            "focalMethod": " public Cookie ( String name , String value , int numDays ) { \n this . n = name ; \n this . v = value ; \n this . e = getHTTPTime ( numDays ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetEnvironment",
                            "startLn": 92,
                            "endLn": 101,
                            "testMethod": "@Test\n public void testGetEnvironment ( ) {\n     Properties properties = new Shippable ( env ( ) ) . getEnvironment ( ) ; \n     assertEquals(5,properties.size());\n}",
                            "oracle": "assertEquals(5,properties.size());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getEnvironment",
                            "focalStartLn": 85,
                            "focalEndLn": 94,
                            "focalMethod": "@Override\n public Properties getEnvironment ( ) { \n Properties environment = new Properties ( ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_NUMBER ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BUILD_ID ) ) ; \n addProperty ( environment , \"STR\" , getBuildUrl ( ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_BRANCH ) ) ; \n addProperty ( environment , \"STR\" , getProperty ( SHIPPABLE_COMMIT ) ) ; \n return environment ; \n } "
                        }
                    ]
                },
                {
                    "className": "BambooTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/BambooTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetName",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testGetName ( ) {\n     assertEquals(\"STR\",newBamboo(env()).getName());\n}",
                            "oracle": "assertEquals(\"STR\",newBamboo(env()).getName());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Bamboo.java",
                            "focalName": "getName",
                            "focalStartLn": 52,
                            "focalEndLn": 55,
                            "focalMethod": "@Override\n public String getName ( ) { \n return BAMBOO_NAME ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "spring-cloud",
            "repoName": "spring-cloud-security",
            "subRepos": [
                "spring-cloud-security",
                "spring-cloud-starter-security",
                "spring-cloud-starter-oauth2"
            ],
            "commitSHA": "d5dac0e77e1d9ef17a75fd6b34dfc62685da50e7",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OAuth2FeignRequestInterceptorTests",
                    "classPath": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java",
                    "subRepo": "spring-cloud-security",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 51,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void setUp ( ) { \n oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new MockOAuth2ClientContext ( \"STR\" ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n requestTemplate = new RequestTemplate ( ) . method ( HttpMethod . GET ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "tryToAcquireToken",
                            "startLn": 69,
                            "endLn": 77,
                            "testMethod": "@ Test ( expected = OAuth2AccessDeniedException . class ) public void tryToAcquireToken ( ) {\n     oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor ( new DefaultOAuth2ClientContext ( ) , new BaseOAuth2ProtectedResourceDetails ( ) ) ; \n     OAuth2AccessToken oAuth2AccessToken = oAuth2FeignRequestInterceptor . getToken ( ) ; \n     Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);\n}",
                            "oracle": "Assert.assertTrue(oAuth2AccessToken.getValue()+\"STR\",oAuth2AccessToken.getValue()==null);",
                            "oracleLn": 2,
                            "focalFile": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java",
                            "focalName": "getToken",
                            "focalStartLn": 128,
                            "focalEndLn": 149,
                            "focalMethod": " public OAuth2AccessToken getToken ( ) { \n OAuth2AccessToken accessToken = oAuth2ClientContext . getAccessToken ( ) ; \n if ( accessToken == null || accessToken . isExpired ( ) ) { \n try { \n accessToken = acquireAccessToken ( ) ; \n } catch ( UserRedirectRequiredException e ) { \n oAuth2ClientContext . setAccessToken ( null ) ; \n String stateKey = e . getStateKey ( ) ; \n if ( stateKey != null ) { \n Object stateToPreserve = e . getStateToPreserve ( ) ; \n if ( stateToPreserve == null ) { \n stateToPreserve = \"STR\" ; \n } oAuth2ClientContext . setPreservedState ( stateKey , stateToPreserve ) ; \n } throw e ; \n } } return accessToken ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "invalidMessageValidationTest",
                            "startLn": 293,
                            "endLn": 305,
                            "testMethod": "@Test\n public void invalidMessageValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "myabc",
            "repoName": "markdownj",
            "subRepos": [
                "core"
            ],
            "commitSHA": "f8ed00caeb69fc602aa2209812d953c26c2a4263",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "HandleHtmlInlineTagsTest",
                    "classPath": "core/src/test/java/org/markdownj/test/HandleHtmlInlineTagsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createProcessor",
                        "startLn": 11,
                        "endLn": 14,
                        "setupMethod": "@Before\n public void createProcessor ( ) { \n m = new MarkdownProcessor ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testInlineTagsWithMarkdown",
                            "startLn": 16,
                            "endLn": 20,
                            "testMethod": "@Test\n public void testInlineTagsWithMarkdown ( ) {\n     assertEquals(\"STR\",m.markdown(\"STR\").trim());\n}",
                            "oracle": "assertEquals(\"STR\",m.markdown(\"STR\").trim());",
                            "oracleLn": 0,
                            "focalFile": "core/src/main/java/org/markdownj/MarkdownProcessor.java",
                            "focalName": "markdown",
                            "focalStartLn": 75,
                            "focalEndLn": 98,
                            "focalMethod": " public String markdown ( String txt ) { \n if ( txt == null ) { \n txt = \"STR\" ; \n } TextEditor text = new TextEditor ( txt ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . replaceAll ( \"STR\" , \"STR\" ) ; \n text . append ( \"STR\" ) ; \n text . detabify ( ) ; \n text . deleteAll ( \"STR\" ) ; \n hashHTMLBlocks ( text ) ; \n stripLinkDefinitions ( text ) ; \n text = runBlockGamut ( text ) ; \n unEscapeSpecialChars ( text ) ; \n text . append ( \"STR\" ) ; \n return text . toString ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "retog",
            "repoName": "wymiwyg-commons-core",
            "subRepos": [],
            "commitSHA": "5b5ba4fef4e810b8cea0ac08ce105fa402eaee3c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MultiPathNodeTest",
                    "classPath": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "commonPath",
                            "startLn": 35,
                            "endLn": 41,
                            "testMethod": "@Test\n public void commonPath ( ) {\n     MultiPathNode node = new MultiPathNode ( nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) , nodeWithPath ( \"STR\" ) ) ; \n     Assert.assertEquals(\"STR\",node.getPath());\n}",
                            "oracle": "Assert.assertEquals(\"STR\",node.getPath());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/wymiwyg/commons/util/dirbrowser/MultiPathNode.java",
                            "focalName": "getPath",
                            "focalStartLn": 212,
                            "focalEndLn": 218,
                            "focalMethod": " public String getPath ( ) { \n String currentLongest = nodes [ 0 ] . getPath ( ) ; \n for ( int i = 1 ; \n i < nodes . length ; \n i ++ ) { \n currentLongest = getLongestCommonSuffix ( currentLongest , nodes [ i ] . getPath ( ) ) ; \n } return currentLongest ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "vdmeer",
            "repoName": "execs",
            "subRepos": [],
            "commitSHA": "ac73170bfd449de1f460248d56ece57ff3b0c761",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "Test_ExecS",
                    "classPath": "src/test/java/de/vandermeer/execs/Test_ExecS.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCliAppName",
                            "startLn": 31,
                            "endLn": 38,
                            "testMethod": "@Test\n public void testCliAppName ( ) {\n     ExecS execs = new ExecS ( ) ; \n     assertEquals(\"STR\",execs.getAppName());\n}",
                            "oracle": "assertEquals(\"STR\",execs.getAppName());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/de/vandermeer/execs/ExecS.java",
                            "focalName": "getAppName",
                            "focalStartLn": 282,
                            "focalEndLn": 284,
                            "focalMethod": " public final String getAppName ( ) { \n return this . appName ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "EbmlSintTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testBytePacking",
                            "startLn": 41,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testBytePacking ( ) throws Exception {\n     Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java",
                            "focalName": "convertToBytes",
                            "focalStartLn": 58,
                            "focalEndLn": 63,
                            "focalMethod": " public static byte [ ] convertToBytes ( long val ) { \n int num = ebmlSignedLength ( val ) ; \n val += signedComplement [ num ] ; \n return EbmlUtil . ebmlEncodeLen ( val , num ) ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}