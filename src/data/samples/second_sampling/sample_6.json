{
    "projects": [
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SeqTest",
                    "classPath": "src/test/java/me/zzp/util/SeqTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testCommaList",
                            "startLn": 39,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testCommaList ( ) {\n     Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",Seq.join(Arrays.asList(\"STR\",\"STR\",\"STR\"),\"STR\"));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/me/zzp/util/Seq.java",
                            "focalName": "join",
                            "focalStartLn": 83,
                            "focalEndLn": 102,
                            "focalMethod": " public static String join ( Collection < ? > list , String delimiter ) { \n if ( list == null || list . isEmpty ( ) ) { \n return \"STR\" ; \n } if ( delimiter == null ) { \n delimiter = \"STR\" ; \n } StringBuilder s = new StringBuilder ( ) ; \n boolean first = true ; \n for ( Object e : list ) { \n if ( first ) { \n first = false ; \n } else { \n s . append ( delimiter ) ; \n } s . append ( e ) ; \n } return s . toString ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWhere",
                            "startLn": 26,
                            "endLn": 32,
                            "testMethod": "@Test\n public void testWhere ( ) {\n     sql . select ( ) . from ( \"STR\" ) . where ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        },
                        {
                            "testName": "testSort",
                            "startLn": 44,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testSort ( ) {\n     sql . select ( ) . from ( \"STR\" ) . orderBy ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MkvBlockTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEbml",
                            "startLn": 38,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testEbml ( ) {\n     int [ ] _in = new int [ ] { \n 187 , 630 , 255 , 60 , 0xFFFFFF } ; \n     long [ ] expecteds = new long [ ] { \n 187 , 443 , - 375 , - 195 } ; \n     assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));\n}",
                            "oracle": "assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java",
                            "focalName": "calcEbmlLacingDiffs",
                            "focalStartLn": 362,
                            "focalEndLn": 370,
                            "focalMethod": " public static long [ ] calcEbmlLacingDiffs ( int [ ] laceSizes ) { \n int lacesCount = laceSizes . length - 1 ; \n long [ ] out = new long [ lacesCount ] ; \n out [ 0 ] = ( int ) laceSizes [ 0 ] ; \n for ( int i = 1 ; \n i < lacesCount ; \n i ++ ) { \n out [ i ] = laceSizes [ i ] - laceSizes [ i - 1 ] ; \n } return out ; \n } "
                        }
                    ]
                },
                {
                    "className": "EbmlUtilTest",
                    "classPath": "src/test/java/org/jcodec/containers/mkv/EbmlUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testEbmlBytes",
                            "startLn": 54,
                            "endLn": 59,
                            "testMethod": "@Test\n public void testEbmlBytes ( ) throws Exception {\n     Assert.assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));\n}",
                            "oracle": "Assert.assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/jcodec/containers/mkv/util/EbmlUtil.java",
                            "focalName": "ebmlEncode",
                            "focalStartLn": 41,
                            "focalEndLn": 43,
                            "focalMethod": " public static byte [ ] ebmlEncode ( long value ) { \n return ebmlEncodeLen ( value , ebmlLength ( value ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkUAHRUSMinus",
                            "startLn": 258,
                            "endLn": 262,
                            "testMethod": "@Test\n public void checkUAHRUSMinus ( ) {\n     assertEquals(\"STR\",moneyToStrUAHRUS.convert(-V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAHRUS.convert(-V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        },
                        {
                            "testName": "checkUAHUKMinus",
                            "startLn": 237,
                            "endLn": 241,
                            "testMethod": "@Test\n public void checkUAHUKMinus ( ) {\n     assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrUAH.convert(-V_300D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OMultiValueTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/collection/OMultiValueTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testArrayFirstLast",
                            "startLn": 42,
                            "endLn": 47,
                            "testMethod": "@Test\n public void testArrayFirstLast ( ) {\n     String [ ] collection = new String [ ] { \n \"STR\" , \"STR\" , \"STR\" } ; \n     Assert.assertEquals(OMultiValue.getFirstValue(collection),\"STR\");\n}",
                            "oracle": "Assert.assertEquals(OMultiValue.getFirstValue(collection),\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/collection/OMultiValue.java",
                            "focalName": "getFirstValue",
                            "focalStartLn": 116,
                            "focalEndLn": 138,
                            "focalMethod": " public static Object getFirstValue ( final Object iObject ) { \n if ( iObject == null ) return null ; \n if ( ! isMultiValue ( iObject ) || getSize ( iObject ) == 0 ) return null ; \n try { \n if ( iObject instanceof List < ? > ) return ( ( List < Object > ) iObject ) . get ( 0 ) ; \n else if ( iObject instanceof Iterable < ? > ) return ( ( Iterable < Object > ) iObject ) . iterator ( ) . next ( ) ; \n else if ( iObject instanceof Map < ? , ? > ) return ( ( Map < ? , Object > ) iObject ) . values ( ) . iterator ( ) . next ( ) ; \n else if ( iObject . getClass ( ) . isArray ( ) ) return Array . get ( iObject , 0 ) ; \n } catch ( RuntimeException e ) { \n OLogManager . instance ( ) . debug ( iObject , \"STR\" , iObject , e ) ; \n } return null ; \n } "
                        }
                    ]
                },
                {
                    "className": "LuceneInheritanceQueryTest",
                    "classPath": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneInheritanceQueryTest.java",
                    "subRepo": "lucene",
                    "before": {
                        "setupName": "setupDatabase",
                        "startLn": 45,
                        "endLn": 75,
                        "setupMethod": "@Before\n public void setupDatabase ( ) throws Throwable { \n String config = System . getProperty ( \"STR\" , \"STR\" ) ; \n String path ; \n if ( \"STR\" . equals ( config ) || \"STR\" . equals ( config ) ) { \n type = ODatabaseType . PLOCAL ; \n path = \"STR\" ; \n } else { \n type = ODatabaseType . MEMORY ; \n path = \"STR\" ; \n } context = new OrientDB ( path , OrientDBConfig . defaultConfig ( ) ) ; \n if ( context . exists ( name . getMethodName ( ) ) ) { \n context . drop ( name . getMethodName ( ) ) ; \n } context . create ( name . getMethodName ( ) , type ) ; \n db = context . open ( name . getMethodName ( ) , \"STR\" , \"STR\" ) ; \n db . set ( ODatabase . ATTRIBUTES . MINIMUMCLUSTERS , 8 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQuery",
                            "startLn": 41,
                            "endLn": 56,
                            "testMethod": "@Test\n public void testQuery ( ) {\n     createSchema ( db ) ; \n     ODocument doc = new ODocument ( \"STR\" ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     db . save ( doc ) ; \n     List < ODocument > vertices = db . query ( new OSQLSynchQuery < ODocument > ( \"STR\" ) ) ; \n     Assert.assertEquals(1,vertices.size());\n}",
                            "oracle": "Assert.assertEquals(1,vertices.size());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java",
                            "focalName": "query",
                            "focalStartLn": 830,
                            "focalEndLn": 831,
                            "focalMethod": "@Deprecated\n < RET extends List < ? > > RET query ( final OQuery < ? > iCommand , final Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OCompositeIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 21,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n compositeIndex = new OCompositeIndexDefinition ( \"STR\" ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n compositeIndex . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . STRING ) ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testDocumentToIndexCollectionValueEmptyOneNullValuesSupport",
                            "startLn": 375,
                            "endLn": 390,
                            "testMethod": "@Test\n public void testDocumentToIndexCollectionValueEmptyOneNullValuesSupport ( ) {\n     final ODocument document = new ODocument ( ) ; \n     document . field ( \"STR\" , 12 ) ; \n     document . field ( \"STR\" , Collections . emptyList ( ) ) ; \n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . setNullValuesIgnored ( false ) ; \n     final Object result = compositeIndexDefinition . getDocumentValueToIndex ( document ) ; \n     Assert.assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));\n}",
                            "oracle": "Assert.assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));",
                            "oracleLn": 8,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        },
                        {
                            "testName": "testCreateCollectionValueSuccessfulOne",
                            "startLn": 66,
                            "endLn": 81,
                            "testMethod": "@Test\n public void testCreateCollectionValueSuccessfulOne ( ) {\n     final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition ( \"STR\" ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     compositeIndexDefinition . addIndex ( new OPropertyListIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER ) ) ; \n     final Object result = compositeIndexDefinition . createValue ( 12 , Arrays . asList ( 1 , 2 ) ) ; \n     final ArrayList < OCompositeKey > expectedResult = new ArrayList < OCompositeKey > ( ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 1 ) ) ; \n     expectedResult . add ( new OCompositeKey ( 12 , 2 ) ) ; \n     Assert.assertEquals(result,expectedResult);\n}",
                            "oracle": "Assert.assertEquals(result,expectedResult);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "OCompositeKey",
                            "focalStartLn": 50,
                            "focalEndLn": 56,
                            "focalMethod": " public OCompositeKey ( final Object ... keys ) { \n this . keys = new ArrayList < Object > ( keys . length ) ; \n this . comparator = ODefaultComparator . INSTANCE ; \n for ( final Object key : keys ) addKey ( key ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "RemoteTransactionSupportTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 50,
                        "endLn": 70,
                        "setupMethod": "@Before\n public void before ( ) throws Exception { \n OGlobalConfiguration . CLASS_MINIMUM_CLUSTERS . setValue ( 1 ) ; \n server = new OServer ( false ) ; \n server . setServerRootDirectory ( SERVER_DIRECTORY ) ; \n server . startup ( getClass ( ) . getResourceAsStream ( \"STR\" ) ) ; \n server . activate ( ) ; \n orientDB = new OrientDB ( \"STR\" , \"STR\" , \"STR\" , OrientDBConfig . defaultConfig ( ) ) ; \n orientDB . create ( RemoteTransactionSupportTest . class . getSimpleName ( ) , ODatabaseType . MEMORY ) ; \n database = orientDB . open ( RemoteTransactionSupportTest . class . getSimpleName ( ) , \"STR\" , \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n database . createClass ( \"STR\" ) ; \n OClass klass = database . createClass ( \"STR\" ) ; \n klass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . NOTUNIQUE ) ; \n OClass uniqueClass = database . createClass ( \"STR\" ) ; \n uniqueClass . createProperty ( \"STR\" , OType . STRING ) . createIndex ( OClass . INDEX_TYPE . UNIQUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testQueryDeleteTxSQLTransaction",
                            "startLn": 201,
                            "endLn": 219,
                            "testMethod": "@Test\n public void testQueryDeleteTxSQLTransaction ( ) {\n     OElement someTx = database . newElement ( \"STR\" ) ; \n     someTx . setProperty ( \"STR\" , \"STR\" ) ; \n     someTx . save ( ) ; \n     database . begin ( ) ; \n     database . command ( \"STR\" ) ; \n     database . commit ( ) ; \n     OResultSet result = database . command ( \"STR\" ) ; \n     assertFalse(result.hasNext());\n}",
                            "oracle": "assertFalse(result.hasNext());",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "ByteSerializerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/serialization/types/ByteSerializerTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 39,
                        "endLn": 42,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n byteSerializer = new OByteSerializer ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSerialize",
                            "startLn": 48,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testSerialize ( ) {\n     byteSerializer . serialize ( OBJECT , stream , 0 ) ; \n     Assert.assertEquals(byteSerializer.deserialize(stream,0),OBJECT);\n}",
                            "oracle": "Assert.assertEquals(byteSerializer.deserialize(stream,0),OBJECT);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/serialization/types/OByteSerializer.java",
                            "focalName": "deserialize",
                            "focalStartLn": 53,
                            "focalEndLn": 55,
                            "focalMethod": " public Byte deserialize ( final byte [ ] stream , final int startPosition ) { \n return stream [ startPosition ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "ORidBagAtomicUpdateTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/storage/ridbag/sbtree/ORidBagAtomicUpdateTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n database . declareIntent ( new OIntentMassiveInsert ( ) ) ; \n } @Before\n public void beforeMethod ( ) { \n topThreshold = OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . getValueAsInteger ( ) ; \n bottomThreshold = OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . getValueAsInteger ( ) ; \n OGlobalConfiguration . RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD . setValue ( - 1 ) ; \n OGlobalConfiguration . RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD . setValue ( - 1 ) ; \n } @Before\n public void beforeClass ( ) { \n final String dbName = this . getClass ( ) . getSimpleName ( ) ; \n final String storageType = getStorageType ( ) ; \n final String buildDirectory = System . getProperty ( \"STR\" , \"STR\" ) ; \n database = new ODatabaseDocumentTx ( storageType + \"STR\" + buildDirectory + \"STR\" + dbName ) ; \n if ( database . exists ( ) ) { \n database . open ( \"STR\" , \"STR\" ) ; \n database . drop ( ) ; \n } database . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAddTwoSavedDocuments",
                            "startLn": 291,
                            "endLn": 315,
                            "testMethod": "@Test\n public void testAddTwoSavedDocuments ( ) {\n     long recordsCount = database . countClusterElements ( database . getDefaultClusterId ( ) ) ; \n     database . begin ( ) ; \n     ODocument rootDoc = new ODocument ( ) ; \n     ORidBag ridBag = new ORidBag ( ) ; \n     rootDoc . field ( \"STR\" , ridBag ) ; \n     ODocument docOne = new ODocument ( ) ; \n     docOne . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ODocument docTwo = new ODocument ( ) ; \n     docTwo . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     ridBag . add ( docOne ) ; \n     ridBag . add ( docTwo ) ; \n     rootDoc . save ( database . getClusterNameById ( database . getDefaultClusterId ( ) ) ) ; \n     database . rollback ( ) ; \n     Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);\n}",
                            "oracle": "Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);",
                            "oracleLn": 13,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "countClusterElements",
                            "focalStartLn": 1165,
                            "focalEndLn": 1169,
                            "focalMethod": "@Override\n public long countClusterElements ( int iCurrentClusterId ) { \n checkOpenness ( ) ; \n return internal . countClusterElements ( iCurrentClusterId ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCommandExecutorSQLCreatePropertyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testNonStrict",
                            "startLn": 363,
                            "endLn": 391,
                            "testMethod": "@Test\n public void testNonStrict ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . getStorage ( ) . setProperty ( OStatement . CUSTOM_STRICT_SQL , \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        },
                        {
                            "testName": "testLinkedTypeDefaultAndMinMaxUnsafeProperty",
                            "startLn": 289,
                            "endLn": 313,
                            "testMethod": "@Test\n public void testLinkedTypeDefaultAndMinMaxUnsafeProperty ( ) throws Exception {\n     final ODatabaseDocumentTx db = new ODatabaseDocumentTx ( \"STR\" + System . nanoTime ( ) ) ; \n     db . create ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     OClass companyClass = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     OProperty idProperty = companyClass . getProperty ( PROP_ID ) ; \n     assertEquals(idProperty.getName(),PROP_ID);\n}",
                            "oracle": "assertEquals(idProperty.getName(),PROP_ID);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java",
                            "focalName": "getName",
                            "focalStartLn": 41,
                            "focalEndLn": 41,
                            "focalMethod": " public String getName ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "CreateClassMultipleClusterTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/CreateClassMultipleClusterTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "before",
                        "startLn": 16,
                        "endLn": 20,
                        "setupMethod": "@Before\n public void before ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" + CreateClassMultipleClusterTest . class . getSimpleName ( ) ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateClassSQLSpecifiedClusters",
                            "startLn": 41,
                            "endLn": 53,
                            "testMethod": "@Test\n public void testCreateClassSQLSpecifiedClusters ( ) {\n     int s = db . addCluster ( \"STR\" ) ; \n     int t = db . addCluster ( \"STR\" ) ; \n     db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     db . command ( new OCommandSQL ( \"STR\" + s + \"STR\" + t ) ) . execute ( ) ; \n     final OClass clazzV = db . getMetadata ( ) . getSchema ( ) . getClass ( \"STR\" ) ; \n     assertEquals(2,clazzV.getClusterIds().length);\n}",
                            "oracle": "assertEquals(2,clazzV.getClusterIds().length);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java",
                            "focalName": "getClusterIds",
                            "focalStartLn": 157,
                            "focalEndLn": 157,
                            "focalMethod": " int [ ] getClusterIds ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedSetTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testClearOne",
                            "startLn": 211,
                            "endLn": 249,
                            "testMethod": "@Test\n public void testClearOne ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OClientConnectionManagerTest",
                    "classPath": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionManagerTest.java",
                    "subRepo": "server",
                    "before": {
                        "setupName": "before",
                        "startLn": 32,
                        "endLn": 37,
                        "setupMethod": "@Before\n public void before ( ) throws NoSuchAlgorithmException , InvalidKeyException , IOException { \n MockitoAnnotations . initMocks ( this ) ; \n Mockito . when ( handler . parseBinaryToken ( Mockito . any ( byte [ ] . class ) ) ) . thenReturn ( token ) ; \n Mockito . when ( protocol . getServer ( ) ) . thenReturn ( server ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSimpleConnectDisconnect",
                            "startLn": 39,
                            "endLn": 50,
                            "testMethod": "@Test\n public void testSimpleConnectDisconnect ( ) throws IOException {\n     OClientConnectionManager manager = new OClientConnectionManager ( server ) ; \n     OClientConnection ret = manager . connect ( protocol ) ; \n     assertNotNull(ret);\n}",
                            "oracle": "assertNotNull(ret);",
                            "oracleLn": 2,
                            "focalFile": "server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java",
                            "focalName": "connect",
                            "focalStartLn": 139,
                            "focalEndLn": 149,
                            "focalMethod": " public OClientConnection connect ( final ONetworkProtocol iProtocol ) { \n final OClientConnection connection ; \n connection = new OClientConnection ( connectionSerial . incrementAndGet ( ) , iProtocol ) ; \n connections . put ( connection . getId ( ) , connection ) ; \n OLogManager . instance ( ) . config ( this , \"STR\" + connection ) ; \n OServerPluginHelper . invokeHandlerCallbackOnClientConnection ( iProtocol . getServer ( ) , connection ) ; \n return connection ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODocumentSchemalessBinarySerializationTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "createSerializer",
                        "startLn": 67,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void createSerializer ( ) { \n if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) ) serializer = new ORecordSerializerNetwork ( ) ; \n else if ( serializerVersion == ORecordSerializerBinary . INSTANCE . getNumberOfSupportedVersions ( ) + 1 ) serializer = new ORecordSerializerNetworkV37 ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testListOfMapsWithNull",
                            "startLn": 965,
                            "endLn": 987,
                            "testMethod": "@Test\n public void testListOfMapsWithNull ( ) {\n     ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n     ODocument document = new ODocument ( ) ; \n     List lista = new ArrayList < > ( ) ; \n     Map mappa = new LinkedHashMap < > ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     mappa . put ( \"STR\" , null ) ; \n     lista . add ( mappa ) ; \n     mappa = new HashMap ( ) ; \n     mappa . put ( \"STR\" , \"STR\" ) ; \n     lista . add ( mappa ) ; \n     document . setProperty ( \"STR\" , lista ) ; \n     byte [ ] res = serializer . toStream ( document , false ) ; \n     ODocument extr = ( ODocument ) serializer . fromStream ( res , new ODocument ( ) , new String [ ] { \n } ) ; \n     assertEquals(extr.fields(),document.fields());\n}",
                            "oracle": "assertEquals(extr.fields(),document.fields());",
                            "oracleLn": 13,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java",
                            "focalName": "fields",
                            "focalStartLn": 2098,
                            "focalEndLn": 2102,
                            "focalMethod": " public int fields ( ) { \n checkForLoading ( ) ; \n checkForFields ( ) ; \n return _fieldSize ; \n } "
                        }
                    ]
                },
                {
                    "className": "OCompositeKeyTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testEqualSameKeys",
                            "startLn": 16,
                            "endLn": 29,
                            "testMethod": "@Test\n public void testEqualSameKeys ( ) {\n     final OCompositeKey compositeKey = new OCompositeKey ( ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     compositeKey . addKey ( \"STR\" ) ; \n     final OCompositeKey anotherCompositeKey = new OCompositeKey ( ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     anotherCompositeKey . addKey ( \"STR\" ) ; \n     assertTrue(compositeKey.equals(anotherCompositeKey));\n}",
                            "oracle": "assertTrue(compositeKey.equals(anotherCompositeKey));",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java",
                            "focalName": "equals",
                            "focalStartLn": 138,
                            "focalEndLn": 148,
                            "focalMethod": "@Override\n public boolean equals ( final Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n final OCompositeKey that = ( OCompositeKey ) o ; \n return keys . equals ( that . keys ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OQueryRequestTest",
                    "classPath": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OQueryRequestTest.java",
                    "subRepo": "client",
                    "before": {
                        "setupName": "before",
                        "startLn": 18,
                        "endLn": 21,
                        "setupMethod": "@Before\n public void before ( ) { \n ODatabaseRecordThreadLocal . instance ( ) . remove ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testWithNamedParams",
                            "startLn": 46,
                            "endLn": 67,
                            "testMethod": "@Test\n public void testWithNamedParams ( ) throws IOException {\n     Map < String , Object > params = new HashMap < > ( ) ; \n     params . put ( \"STR\" , \"STR\" ) ; \n     params . put ( \"STR\" , 12 ) ; \n     OQueryRequest request = new OQueryRequest ( \"STR\" , \"STR\" , params , OQueryRequest . QUERY , ORecordSerializerNetworkFactory . INSTANCE . current ( ) , 123 ) ; \n     MockChannel channel = new MockChannel ( ) ; \n     request . write ( channel , null ) ; \n     channel . close ( ) ; \n     OQueryRequest other = new OQueryRequest ( ) ; \n     other . read ( channel , - 1 , ORecordSerializerNetworkFactory . INSTANCE . current ( ) ) ; \n     Assert.assertEquals(request.getCommand(),other.getCommand());\n}",
                            "oracle": "Assert.assertEquals(request.getCommand(),other.getCommand());",
                            "oracleLn": 9,
                            "focalFile": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OQueryRequest.java",
                            "focalName": "getCommand",
                            "focalStartLn": 118,
                            "focalEndLn": 121,
                            "focalMethod": "@Override\n public byte getCommand ( ) { \n return OChannelBinaryProtocol . REQUEST_QUERY ; \n } "
                        }
                    ]
                },
                {
                    "className": "OPropertyMapIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 23,
                        "endLn": 27,
                        "setupMethod": "@Before\n public void beforeClass ( ) { \n mapToTest . put ( \"STR\" , 1 ) ; \n mapToTest . put ( \"STR\" , 2 ) ; \n } @Before\n public void beforeMethod ( ) { \n propertyIndexByKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . STRING , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByIntegerKey = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . KEY ) ; \n propertyIndexByValue = new OPropertyMapIndexDefinition ( \"STR\" , \"STR\" , OType . INTEGER , OPropertyMapIndexDefinition . INDEX_BY . VALUE ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCreateSingleValueByKey",
                            "startLn": 239,
                            "endLn": 243,
                            "testMethod": "@Test\n public void testCreateSingleValueByKey ( ) {\n     final Object result = propertyIndexByKey . createSingleValue ( \"STR\" ) ; \n     Assert.assertEquals(result,\"STR\");\n}",
                            "oracle": "Assert.assertEquals(result,\"STR\");",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java",
                            "focalName": "createSingleValue",
                            "focalStartLn": 138,
                            "focalEndLn": 140,
                            "focalMethod": " public Object createSingleValue ( final Object ... param ) { \n return OType . convert ( param [ 0 ] , keyType . getDefaultJavaType ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "SystemLoggerTest",
                    "classPath": "src/test/java/io/cucumber/pro/SystemLoggerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "defaults_to_WARN_when_unknown_log_level_is_set",
                            "startLn": 30,
                            "endLn": 36,
                            "testMethod": "@Test\n public void defaults_to_WARN_when_unknown_log_level_is_set ( ) {\n     Config config = createConfig ( ) ; \n     config . set ( Keys . CUCUMBERPRO_LOGGING , \"STR\" ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.WARN,logger.level);\n}",
                            "oracle": "assertEquals(Logger.Level.WARN,logger.level);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "set",
                            "focalStartLn": 37,
                            "focalEndLn": 39,
                            "focalMethod": " public void set ( String key , String value ) { \n setIn ( normalize ( key ) , RealValue . fromString ( value ) ) ; \n } "
                        },
                        {
                            "testName": "is_info_level_by_default",
                            "startLn": 15,
                            "endLn": 20,
                            "testMethod": "@Test\n public void is_info_level_by_default ( ) {\n     Config config = createConfig ( ) ; \n     Logger . SystemLogger logger = new Logger . SystemLogger ( config ) ; \n     assertEquals(Logger.Level.INFO,logger.level);\n}",
                            "oracle": "assertEquals(Logger.Level.INFO,logger.level);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/Keys.java",
                            "focalName": "createConfig",
                            "focalStartLn": 15,
                            "focalEndLn": 27,
                            "focalMethod": " public static Config createConfig ( ) { \n Config config = new Config ( ) ; \n config . set ( CUCUMBERPRO_CONNECTION_TIMEOUT , 5000 ) ; \n config . set ( CUCUMBERPRO_ENVMASK , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_LOGFILE ) ; \n config . set ( CUCUMBERPRO_LOGGING , \"STR\" ) ; \n config . setNull ( CUCUMBERPRO_PROFILE ) ; \n config . setNull ( CUCUMBERPRO_PROJECTNAME ) ; \n config . setNull ( CUCUMBERPRO_TOKEN ) ; \n config . set ( CUCUMBERPRO_URL , \"STR\" ) ; \n return config ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MacAddressTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddressCompareToNotEqual",
                            "startLn": 132,
                            "endLn": 137,
                            "testMethod": "@Test\n public void testAddressCompareToNotEqual ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     final int comparison = macAddress . compareTo ( new MacAddress ( LOCAL_ADDRESS ) ) ; \n     assertNotEquals(0,comparison);\n}",
                            "oracle": "assertNotEquals(0,comparison);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "compareTo",
                            "focalStartLn": 140,
                            "focalEndLn": 152,
                            "focalMethod": "@Override\n public int compareTo ( final MacAddress macAddress ) { \n int comparison = 0 ; \n for ( int i = 0 ; \n i < ADDRESS_LENGTH ; \n i ++ ) { \n comparison = address [ i ] - macAddress . address [ i ] ; \n if ( comparison != 0 ) { \n break ; \n } } return comparison ; \n } "
                        },
                        {
                            "testName": "testAddressMulticastNotLocal",
                            "startLn": 107,
                            "endLn": 111,
                            "testMethod": "@Test\n public void testAddressMulticastNotLocal ( ) {\n     final MacAddress macAddress = new MacAddress ( MULTICAST_ADDRESS ) ; \n     assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));\n}",
                            "oracle": "assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/fluenda/parcefone/event/MacAddress.java",
                            "focalName": "equals",
                            "focalStartLn": 112,
                            "focalEndLn": 122,
                            "focalMethod": "@Override\n public boolean equals ( final Object object ) { \n boolean equals = false ; \n if ( object instanceof MacAddress ) { \n final MacAddress macAddress = ( MacAddress ) object ; \n equals = Arrays . equals ( address , macAddress . address ) ; \n } return equals ; \n } "
                        }
                    ]
                },
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "validStringMessageWithLocaleAndValidationTest",
                            "startLn": 196,
                            "endLn": 207,
                            "testMethod": "@Test\n public void validStringMessageWithLocaleAndValidationTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));\n}",
                            "oracle": "Assert.assertNotNull(parser.parse(sample1,true,Locale.FRANCE));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 146,
                            "focalEndLn": 148,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate , Locale locale ) { \n return this . parse ( cefString , validate , false , locale ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "graphviz-java",
            "subRepos": [
                "graphviz-java",
                "graphviz-java-min-deps",
                "graphviz-java-all-j2v8",
                "graphviz-rough",
                "graphviz-kotlin"
            ],
            "commitSHA": "dcbd021a903a4114dd087ef9acec5650b92c89b2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LabelTest",
                    "classPath": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java",
                    "subRepo": "graphviz-java",
                    "classTests": [
                        {
                            "testName": "markdown",
                            "startLn": 113,
                            "endLn": 117,
                            "testMethod": "@Test\n void markdown ( ) {\n     assertEquals(\"STR\",Label.markdown(\"STR\").value);\n}",
                            "oracle": "assertEquals(\"STR\",Label.markdown(\"STR\").value);",
                            "oracleLn": 0,
                            "focalFile": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Label.java",
                            "focalName": "markdown",
                            "focalStartLn": 171,
                            "focalEndLn": 181,
                            "focalMethod": " public static Label markdown ( String value ) { \n return html ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( replaceMd ( value . replace ( \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) , \"STR\" , \"STR\" ) . replaceAll ( \"STR\" , \"STR\" ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "WerckerTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/WerckerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBranch",
                            "startLn": 74,
                            "endLn": 77,
                            "testMethod": "@Test\n public void testGetBranch ( ) {\n     assertEquals(\"STR\",newWercker(env()).getBranch());\n}",
                            "oracle": "assertEquals(\"STR\",newWercker(env()).getBranch());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Wercker.java",
                            "focalName": "getBranch",
                            "focalStartLn": 68,
                            "focalEndLn": 71,
                            "focalMethod": "@Override\n public String getBranch ( ) { \n return getProperty ( WERCKER_BRANCH ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "CircleTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIsSelectedForCircle",
                            "startLn": 55,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testIsSelectedForCircle ( ) {\n     assertTrue(newCircle(env()).isSelected());\n}",
                            "oracle": "assertTrue(newCircle(env()).isSelected());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java",
                            "focalName": "isSelected",
                            "focalStartLn": 49,
                            "focalEndLn": 52,
                            "focalMethod": "@Override\n public boolean isSelected ( ) { \n return ( getProperty ( CIRCLE ) != null ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "JenkinsTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIsSelectedForNothing",
                            "startLn": 51,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testIsSelectedForNothing ( ) {\n     assertFalse(newJenkins(newHashMap<String,String>()).isSelected());\n}",
                            "oracle": "assertFalse(newJenkins(newHashMap<String,String>()).isSelected());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Jenkins.java",
                            "focalName": "isSelected",
                            "focalStartLn": 50,
                            "focalEndLn": 53,
                            "focalMethod": "@Override\n public boolean isSelected ( ) { \n return ( getProperty ( JENKINS_URL ) != null ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "AboutTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/AboutTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 21,
                        "endLn": 31,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n about = new About ( ) ; \n ArrayList < String > versionInput = new ArrayList < String > ( ) ; \n String expected = \"STR\" ; \n versionInput . add ( expected ) ; \n about . setVersion ( versionInput ) ; \n JsonObject extension = new JsonObject ( ) ; \n extension . addProperty ( \"STR\" , \"STR\" ) ; \n about . setExtensions ( extension ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetExtensions",
                            "startLn": 47,
                            "endLn": 54,
                            "testMethod": "@Test\n public void testGetExtensions ( ) {\n     JsonObject expected = new JsonObject ( ) ; \n     expected . addProperty ( \"STR\" , \"STR\" ) ; \n     JsonObject actual = about . getExtensions ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/About.java",
                            "focalName": "getExtensions",
                            "focalStartLn": 17,
                            "focalEndLn": 19,
                            "focalMethod": " public JsonObject getExtensions ( ) { \n return extensions ; \n } "
                        }
                    ]
                },
                {
                    "className": "StatementReferenceTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 22,
                        "endLn": 25,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n statementRef = new StatementReference ( ID ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testStatementReferenceString",
                            "startLn": 38,
                            "endLn": 43,
                            "testMethod": "@Test\n public void testStatementReferenceString ( ) {\n     String id = UUID . randomUUID ( ) . toString ( ) ; \n     StatementReference statementRef = new StatementReference ( id ) ; \n     assertNotNull(statementRef);\n}",
                            "oracle": "assertNotNull(statementRef);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/StatementReference.java",
                            "focalName": "StatementReference",
                            "focalStartLn": 13,
                            "focalEndLn": 15,
                            "focalMethod": " public StatementReference ( String id ) { \n this . id = id ; \n } "
                        }
                    ]
                },
                {
                    "className": "GroupTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/GroupTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n members = new ArrayList < Agent > ( ) ; \n members . add ( new Agent ( NAME , MBOX ) ) ; \n group = new Group ( members ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetMember",
                            "startLn": 84,
                            "endLn": 92,
                            "testMethod": "@Test\n public void testSetMember ( ) {\n     ArrayList < Agent > expected = new ArrayList < Agent > ( ) ; \n     expected . add ( new Agent ( \"STR\" + NAME , MBOX ) ) ; \n     group . setMember ( expected ) ; \n     ArrayList < Agent > actual = group . getMember ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Group.java",
                            "focalName": "getMember",
                            "focalStartLn": 23,
                            "focalEndLn": 25,
                            "focalMethod": " public ArrayList < Agent > getMember ( ) { \n return member ; \n } "
                        }
                    ]
                },
                {
                    "className": "PersonTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/PersonTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 40,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n person = new Person ( ) ; \n person . setName ( NAME ) ; \n person . setMbox ( MBOX ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetObjectType",
                            "startLn": 47,
                            "endLn": 52,
                            "testMethod": "@Test\n public void testGetObjectType ( ) {\n     String expected = \"STR\" ; \n     String actual = person . getObjectType ( ) ; \n     assertEquals(expected,actual);\n}",
                            "oracle": "assertEquals(expected,actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Person.java",
                            "focalName": "getObjectType",
                            "focalStartLn": 18,
                            "focalEndLn": 20,
                            "focalMethod": " public String getObjectType ( ) { \n return OBJECTTYPE ; \n } "
                        }
                    ]
                },
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetTarget",
                            "startLn": 356,
                            "endLn": 370,
                            "testMethod": "@Test\n public void testSetTarget ( ) {\n     ArrayList < InteractionComponent > expected = new ArrayList < InteractionComponent > ( ) ; \n     InteractionComponent e = new InteractionComponent ( ) ; \n     String id = \"STR\" ; \n     e . setId ( id ) ; \n     HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n     desc . put ( \"STR\" , \"STR\" ) ; \n     e . setDescription ( desc ) ; \n     expected . add ( e ) ; \n     activityDefinition . setTarget ( expected ) ; \n     ArrayList < InteractionComponent > actual = activityDefinition . getTarget ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 10,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getTarget",
                            "focalStartLn": 184,
                            "focalEndLn": 186,
                            "focalMethod": " public ArrayList < InteractionComponent > getTarget ( ) { \n return target ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testRemoveDupeQueryParams",
                            "startLn": 117,
                            "endLn": 125,
                            "testMethod": "@Test\n public void testRemoveDupeQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testLowerCasing",
                            "startLn": 265,
                            "endLn": 281,
                            "testMethod": "@Test\n public void testLowerCasing ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( false , false ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String inputURL = \"STR\" ; \n     String expectedResult = inputURL . toLowerCase ( ) ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , inputURL ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "phax",
            "repoName": "ph-genericode",
            "subRepos": [],
            "commitSHA": "5e28716fa68c642a6dec8011346229a00a6721e4",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ExcelSheetToCodeList10Test",
                    "classPath": "src/test/java/com/helger/genericode/excel/ExcelSheetToCodeList10Test.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testReadExcel",
                            "startLn": 44,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testReadExcel ( ) throws URISyntaxException {\n     final IReadableResource aXls = new ClassPathResource ( \"STR\" ) ; \n     assertTrue(aXls.exists());\n}",
                            "oracle": "assertTrue(aXls.exists());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/com/helger/genericode/Genericode10CodeListMarshaller.java",
                            "focalName": "Genericode10CodeListMarshaller",
                            "focalStartLn": 34,
                            "focalEndLn": 37,
                            "focalMethod": " public Genericode10CodeListMarshaller ( ) { \n super ( CodeListDocument . class , CGenericode . GENERICODE_10_XSDS , o -> new ObjectFactory ( ) . createCodeList ( o ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TooTallNate",
            "repoName": "Java-WebSocket",
            "subRepos": [],
            "commitSHA": "e630e60168f8a857549731cd500e9312dfccbc46",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CloseFrameTest",
                    "classPath": "src/test/java/org/java_websocket/framing/CloseFrameTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testExtends",
                            "startLn": 57,
                            "endLn": 61,
                            "testMethod": "@Test\n public void testExtends ( ) {\n     CloseFrame frame = new CloseFrame ( ) ; \n     assertEquals(\"STR\",true,frameinstanceofControlFrame);\n}",
                            "oracle": "assertEquals(\"STR\",true,frameinstanceofControlFrame);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/framing/CloseFrame.java",
                            "focalName": "CloseFrame",
                            "focalStartLn": 168,
                            "focalEndLn": 172,
                            "focalMethod": " public CloseFrame ( ) { \n super ( Opcode . CLOSING ) ; \n setReason ( \"STR\" ) ; \n setCode ( CloseFrame . NORMAL ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProtocolTest",
                    "classPath": "src/test/java/org/java_websocket/protocols/ProtocolTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetProvidedProtocol",
                            "startLn": 66,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testGetProvidedProtocol ( ) throws Exception {\n     Protocol protocol0 = new Protocol ( \"STR\" ) ; \n     assertEquals(\"STR\",protocol0.getProvidedProtocol());\n}",
                            "oracle": "assertEquals(\"STR\",protocol0.getProvidedProtocol());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/java_websocket/protocols/Protocol.java",
                            "focalName": "getProvidedProtocol",
                            "focalStartLn": 72,
                            "focalEndLn": 75,
                            "focalMethod": "@Override\n public String getProvidedProtocol ( ) { \n return this . providedProtocol ; \n } "
                        }
                    ]
                },
                {
                    "className": "HeadersTest",
                    "classPath": "src/test/java/org/java_websocket/client/HeadersTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "test_Add_RemoveHeaders",
                            "startLn": 72,
                            "endLn": 103,
                            "testMethod": "@Test\n public void test_Add_RemoveHeaders ( ) throws URISyntaxException {\n     Map < String , String > httpHeaders = null ; \n     WebSocketClient client = new WebSocketClient ( new URI ( \"STR\" ) , httpHeaders ) { \n @Override\n public void onOpen ( ServerHandshake handshakedata ) { \n } @Override\n public void onMessage ( String message ) { \n } @Override\n public void onClose ( int code , String reason , boolean remote ) { \n } @Override\n public void onError ( Exception ex ) { \n } } ; \n     client . addHeader ( \"STR\" , \"STR\" ) ; \n     assertEquals(\"STR\",client.removeHeader(\"STR\"));\n}",
                            "oracle": "assertEquals(\"STR\",client.removeHeader(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/java_websocket/client/WebSocketClient.java",
                            "focalName": "removeHeader",
                            "focalStartLn": 284,
                            "focalEndLn": 289,
                            "focalMethod": " public String removeHeader ( String key ) { \n if ( headers == null ) { \n return null ; \n } return headers . remove ( key ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "gvlasov",
            "repoName": "collections-utils",
            "subRepos": [],
            "commitSHA": "82f20efc8e53ea876896b779e35ed33633ec2e23",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "IterableToStreamTest",
                    "classPath": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "iterableToStream",
                            "startLn": 9,
                            "endLn": 17,
                            "testMethod": "@Test\n public void iterableToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 10,
                            "focalEndLn": 18,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterable < T > iterable ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterable . iterator ( ) , Spliterator . ORDERED ) , false ) ; \n } "
                        },
                        {
                            "testName": "iteratorToStream",
                            "startLn": 19,
                            "endLn": 27,
                            "testMethod": "@Test\n public void iteratorToStream ( ) {\n     Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));\n}",
                            "oracle": "Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java",
                            "focalName": "stream",
                            "focalStartLn": 19,
                            "focalEndLn": 27,
                            "focalMethod": " public static < T > Stream < T > stream ( Iterator < T > iterator ) { \n return StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator , Spliterator . ORDERED ) , false ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "GZipIntegrationTest",
                    "classPath": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 54,
                        "endLn": 63,
                        "setupMethod": "@Before\n public void setUp ( ) { \n this . testServer = createTestServer ( ) ; \n this . httpclient = new DefaultHttpClient ( ) ; \n try { \n this . testServer . start ( ) ; \n } catch ( IOException e ) { \n e . printStackTrace ( ) ; \n } } "
                    },
                    "classTests": [
                        {
                            "testName": "contentShouldNotBeGzippedIfContentLengthIsAddedManually",
                            "startLn": 152,
                            "endLn": 163,
                            "testMethod": "@Test\n public void contentShouldNotBeGzippedIfContentLengthIsAddedManually ( ) throws IOException {\n     testServer . response = Response . newFixedLengthResponse ( \"STR\" ) ; \n     testServer . response . addHeader ( \"STR\" , \"STR\" + ( \"STR\" . getBytes ( \"STR\" ) . length ) ) ; \n     HttpGet request = new HttpGet ( \"STR\" ) ; \n     request . addHeader ( \"STR\" , \"STR\" ) ; \n     HttpResponse response = httpclient . execute ( request ) ; \n     Header contentEncoding = response . getFirstHeader ( \"STR\" ) ; \n     assertNull(\"STR\",contentEncoding);\n}",
                            "oracle": "assertNull(\"STR\",contentEncoding);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java",
                            "focalName": "addHeader",
                            "focalStartLn": 175,
                            "focalEndLn": 177,
                            "focalMethod": " public void addHeader ( String name , String value ) { \n this . header . put ( name , value ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JavaCompilerOptionsTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSource",
                            "startLn": 55,
                            "endLn": 65,
                            "testMethod": "@Test\n public void testSource ( ) throws Exception {\n     JavaCompilerOptions jco = new JavaCompilerOptions ( ) ; \n     jco . setSource ( \"STR\" ) ; \n     List < String > result = jco . getOptions ( ) ; \n     assertEquals(3,result.size());\n}",
                            "oracle": "assertEquals(3,result.size());",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java",
                            "focalName": "getOptions",
                            "focalStartLn": 51,
                            "focalEndLn": 60,
                            "focalMethod": " public List < String > getOptions ( ) { \n List < String > options = new ArrayList < String > ( ) ; \n if ( ! showWarnings ) { \n options . add ( \"STR\" ) ; \n } addStringOption ( options , \"STR\" , source ) ; \n addStringOption ( options , \"STR\" , target ) ; \n addStringOption ( options , \"STR\" , release ) ; \n return options ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "open-korean-text",
            "repoName": "open-korean-text",
            "subRepos": [],
            "commitSHA": "95bf003beb3b357fcb16f94d4f595613cf7c5276",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "OpenKoreanProcessorJavaTest",
                    "classPath": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAddNounsToDictionary",
                            "startLn": 70,
                            "endLn": 87,
                            "testMethod": "@Test\n public void testAddNounsToDictionary ( ) {\n     String text = \"STR\" ; \n     Seq < KoreanTokenizer . KoreanToken > tokens = OpenKoreanTextProcessorJava . tokenize ( text ) ; \n     assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n}",
                            "oracle": "assertEquals(\"STR\",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java",
                            "focalName": "addNounsToDictionary",
                            "focalStartLn": 66,
                            "focalEndLn": 68,
                            "focalMethod": " public static void addNounsToDictionary ( List < String > words ) { \n OpenKoreanTextProcessor . addNounsToDictionary ( JavaConverters . asScalaBufferConverter ( words ) . asScala ( ) ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LifeCycleTest",
                    "classPath": "src/test/java/com/alipay/remoting/rpc/LifeCycleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testAvailabilityCheck",
                            "startLn": 33,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testAvailabilityCheck ( ) {\n     Assert.assertTrue(testFunctionAvailable(false));\n}",
                            "oracle": "Assert.assertTrue(testFunctionAvailable(false));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/alipay/remoting/rpc/RpcClient.java",
                            "focalName": "shutdown",
                            "focalStartLn": 99,
                            "focalEndLn": 118,
                            "focalMethod": "@Override\n public void shutdown ( ) { \n super . shutdown ( ) ; \n this . connectionManager . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n this . taskScanner . shutdown ( ) ; \n logger . warn ( \"STR\" ) ; \n if ( reconnectManager != null ) { \n reconnectManager . shutdown ( ) ; \n } if ( connectionMonitor != null ) { \n connectionMonitor . shutdown ( ) ; \n } for ( UserProcessor < ? > userProcessor : userProcessors . values ( ) ) { \n if ( userProcessor . isStarted ( ) ) { \n userProcessor . shutdown ( ) ; \n } } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rhwayfun",
            "repoName": "spring-boot-rocketmq-starter",
            "subRepos": [],
            "commitSHA": "642a6745434e3f7ea2e6bca42d3b8f450590441c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RocketMqAutoConfigurationTest",
                    "classPath": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "defaultRocketMqProducer",
                            "startLn": 40,
                            "endLn": 54,
                            "testMethod": "@Test\n public void defaultRocketMqProducer ( ) {\n     load ( \"STR\" + TEST_NAME_SERVER , \"STR\" + TEST_PRODUCER_GROUP ) ; \n     Assert.assertTrue(this.context.containsBean(\"STR\"));\n}",
                            "oracle": "Assert.assertTrue(this.context.containsBean(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/github/rhwayfun/springboot/rocketmq/starter/common/DefaultRocketMqProducer.java",
                            "focalName": "getProducer",
                            "focalStartLn": 69,
                            "focalEndLn": 71,
                            "focalMethod": " public DefaultMQProducer getProducer ( ) { \n return producer ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}