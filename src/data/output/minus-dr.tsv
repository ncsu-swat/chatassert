ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.optHead().equals("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.size()==3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l,l2);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l2);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l.isEmpty());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.size(),3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.size()<=3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l2,l3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l.size(),l3.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertEquals(expectedSize,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertTrue(size()>=0);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotEquals(0,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotNull(size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotSame(expectedSize,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotEquals(expectedSize,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertTrue(size()>0);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotSame(0,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertEquals(0,size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotEquals(-1,size());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result.trim());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotNull(graph);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(2,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(2,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(2,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(obj->obj.getValue().equals("STR")));	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals("STR",qResult.get(0).getField("STR"));	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.stream().allMatch(obj->obj.getField("STR")!=null));	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.get(0).toString().length());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertTrue(resultinstanceofCollection);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertEquals(2,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertFalse(result.isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotEquals(0,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotNull(result.get(0));	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertTrue(result.contains(1));	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotEquals(-1,result.indexOf(2));	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(1,matcher.find()?1:0);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotNull(matcher);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(0,matcher.groupCount());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(!matcher.pattern().isEmpty());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotSame(null,matcher.pattern());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find(0));	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.regionStart()>=0);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,false,true,2));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,1));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.I,true,true,3));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,true,4));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,true,2));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.I,false,false,0));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,3));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,false,4));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,1));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	???;	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getWidth());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getHeight());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getColorSpace()==ColorSpace.RGB);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getPlaneData(0).length);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0)[0]>=0&&out.getPlaneData(0)[0]<=255);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(null,out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getPlaneData(0)[1]>=-128&&out.getPlaneData(0)[1]<=127);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNull(out.getPlaneData(1));	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(getProducer());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(producer.isRetryAnotherBrokerWhenNotStoreOK());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(TEST_PRODUCER_GROUP,getProducer().getProducerGroup());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(producer.isVipChannelEnabled());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotSame(defaultRocketMqProducer(),anotherRocketMqProducer());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(producer.getImportantFlag());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertArrayEquals(expectedArray,actualArray);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(5,getProducer().getConnectionTimeout());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNull(getProducer().getSomeValue());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(producer.isInAStoppedState());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text);	1
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR")&&text.contains("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(0,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.startsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(-1,text.indexOf("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>0);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals(31,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(!filterResult.isEmpty());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url.toExternalForm(),filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertSame(url,sourceUrl);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(metadata,sourceMetadata);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.endsWith("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	???;	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(null,fields.get("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(V_300D));	1
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(0,moneyToStrCustom.convert(V_300D).length());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrCustom.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrCustom.convert(V_300D).startsWith("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrCustom.convert(V_300D).matches("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertFalse(moneyToStrCustom.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame("STR",moneyToStrCustom.convert(V_300D));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertFalse(moneyToStrCustom.convert(V_300D).contains("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",someMethod());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(314.159));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER1000.convert(112.734));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(500.0));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(700.25));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER1000.convert(1234.56));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER1000.convert(3210.895));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER1000.convert(989.999));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(805.6));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(12345.678));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrPER100.convert(9999.999));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURUKR.convert(V_300D));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrRURUKR.convert(V_500D));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRURUKR.convert(V_150D));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrRURUKR.convert(V_200D).startsWith("STR"));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRURUKR.convert(V_100D));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrRURUKR.convert(V_250D).isEmpty());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRURUKR.convert(123.46));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRURUKR.convert(1000.0));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame("STR",moneyToStrRURUKR.convert(V_75D));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrRURUKR.convert(V_50D).contains("STR"));	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	???;	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	???;	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(p,c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,p.getBlankIndex()+1);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(-1,p.getBlankIndex()-1);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(3,p.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(c,p);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	???;	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown(null));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR")!=null);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotNull(focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertTrue(focalObject.getName().startsWith("STR"));	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR",focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertTrue(focalObject.getName().length()>0);	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals(null,focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotSame("STR",focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertFalse(focalObject.getName().isEmpty());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertSame("STR",focalObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR",focalObject.getName());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotNull(getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertTrue(getPullRequest().startsWith("STR"));	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotEquals("STR",getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotSame("STR",getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertFalse(getPullRequest().isEmpty());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotEquals(null,getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotSame(null,getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotEquals("STR",getPullRequest());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	???;	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(null,deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater()!=null);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertSame(deflateExtension.getInflater(),deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().totalIn()>=0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(0,deflateExtension.getInflater().totalIn());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().end()==true);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().finished());	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	assertTrue(CharacterCheck.isValidUTF8(ByteBuffer.allocate(0)));	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
CharsetfunctionsTest	testIsValidUTF8	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{(byte)128})));	???;	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.isRecognized());	1
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals(1,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts.getBestWordform());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getBestWordform().getValue(AttributeNames.i_Lemma).contains("STR"));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(nopūsts.getBestWordform().getAttributes().isEmpty());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getBestWordform().getValue(AttributeNames.i_Wordform).equalsIgnoreCase("STR"));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(0,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(nopūsts.wordforms.isEmpty());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.wordforms.stream().anyMatch(wf->wf.getValue(AttributeNames.i_Lemma).equalsIgnoreCase("STR")));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getBestWordform().getAttributes().contains(AttributeNames.i_Gramm));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(log,JMXRemoteUrlConnectionFactory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotEquals(null,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertSame(log,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(this.factory.getLog());	1
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertFalse(factory.getLog()==null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(null,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotEquals(log.hashCode(),factory.getLog().hashCode());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog().toString().startsWith("STR"));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(log.getClass(),factory.getLog().getClass());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	???;	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR")&&result.contains("STR")&&result.contains("STR")&&result.contains("STR")&&result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR","STR","STR","STR")));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.isEmpty());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.size()<=(a.size()+b.size()+c.size()));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(a)&&result.containsAll(b)&&result.containsAll(c));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertSame(5,result.size());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(retinstanceofString);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotSame(body,ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertSame(RequestBody.class,body.getClass());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertFalse(ret.isEmpty());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.startsWith("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals(12,ret.length());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(false,dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(true,dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotNull(dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNull(dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotSame(true,dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(!dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(!dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(null,dispatch_msg_list_in_default_executor());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(proc.getLoader().getTestResult().isEmpty());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc.getLoader().getTestResult());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertEquals(0,proc.getLoader().getTestResult().size());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNull(proc.getLoader().getTestResult());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotEquals(5,proc.getLoader().getTestResult().size());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertFalse(proc.getLoader().getTestResult().contains("STR"));	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotSame(0,proc.getLoader().getTestResult().size());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(proc.getLoader().getTestResult()==null||proc.getLoader().getTestResult().isEmpty());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotEquals(null,proc.getLoader().getTestResult());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	???;	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(expectedNumDocuments,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.contains(null));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(expectedNumDocuments,qResult.stream().map(doc->doc.field("STR")).distinct().count());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.stream().allMatch(doc->doc.containsField("STR")));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>=expectedNumDocuments);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(1,manager.getNewRecords().size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().isEmpty());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(0,manager.getNewRecords().size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(null));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(0,manager.getNewRecords().size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().containsAll(Collections.emptyList()));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(Collections.emptyList(),manager.getNewRecords());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(0,manager.getNewRecords().size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(newObject()));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)==FLOAT_SIZE);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(0,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertSame(FLOAT_SIZE,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)>0);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotNull(getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotSame(0,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertFalse(getObjectSize(null)<0);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotSame(FLOAT_SIZE+1,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)>=0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(database.command("STR").hasNext());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals(0,database.countClass("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(database.countClass("STR")>0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertFalse(database.isClosed());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(0,database.countClass("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals(1,database.getClusters().size());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(-1,getSequence("STR").getSequenceValue());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNull(getSequence("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR","STR"),(List)result);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofSet&&((Set)result).containsAll(Arrays.asList("STR","STR")));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(result);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofCollection&&!((Collection)result).isEmpty());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofList&&((List)result).contains("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotEquals(0,((Collection)result).size());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofList&&((List)result).size()>1);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofSet&&((Set)result).size()==2);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofSet||resultinstanceofList||result==null);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertFalse(resultinstanceofMap&&!((Map<?,?>)result).isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.stream().filter(doc->doc.field("STR")!=null).count());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.parallelStream().anyMatch(doc->doc.field("STR").contains("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()<=100);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR").equals("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(this.testTarget003,result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(result.getAttributeSetters().isEmpty());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result.getAttributeSetters().containsKey("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(0,result.getAttributeSetters().size());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObjectQueryInfo);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObject.getClass().getSimpleName().equals("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(resultinstanceofObject);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals(NanoletUtils.getMimeType("STR"),"STR");	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(NanoletUtils.getMimeType("STR").contains("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotNull(NanoletUtils.getMimeType("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertFalse(NanoletUtils.getMimeType("STR").isEmpty());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals(0,NanoletUtils.getMimeType("STR").length());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(NanoletUtils.getMimeType("STR").startsWith("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals("STR",NanoletUtils.getMimeType("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotSame("STR",NanoletUtils.getMimeType("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",NanoletUtils.getMimeType("STR"));	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals("STR",NanoletUtils.getMimeType("STR"));	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	???;	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(Status.OK,response.getStatus());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatus().getCode()==200);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity().getContent());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getStatus().getCode()==404);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().getContentLength()<0);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().getContentLength()==-1);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().getContentType().getValue().contains("STR"));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated())));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",true)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull(attrs(attr("STR",label.decorated())));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs(attr("STR",label.decorated())).isEmpty());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(For.class,attrs(attr("STR",label.decorated())).getType());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	???;	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",false)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR",label.decorated()),attr("STR",true)),attrs(attr("STR",label.decorated()),attr("STR",false)));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(2,attrs(attr("STR",label.decorated()),attr("STR",true)).size());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(0,attrs(attr("STR",label.decorated())).hashCode());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(10,person.nullArm.finger.length);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(person);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(personinstanceofPerson);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals("STR",person.getName());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNull(person.getLastName());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotSame(newPerson(),person);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(20,person.height);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(worker->worker.getWorkerType().equals("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()>0);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(3,result.stream().filter(worker->worker.getWorkerType().equals("STR")).count());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(worker->worker.getWorkerType().equals("STR")||worker.getWorkerType().equals("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().anyMatch(worker->worker.getWorkerType().equals("STR")));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",((Deployment)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answerinstanceofDeployment);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals("STR",((Deployment)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals("STR",((Deployment)answer).getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue((!(item1instanceofDeployment)||!(item2instanceofDeployment))&&(!(item1instanceofConfigMap)||!(item2instanceofConfigMap)));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(0,((Deployment)answer).getMetadata().getAnnotations().size());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((Deployment)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((Deployment)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((Deployment)answer).getMetadata().getAnnotations().containsKey("STR")&&((Deployment)answer).getMetadata().getAnnotations().containsKey("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.length()>0);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isBlank());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempTargetFile.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals(13,targetDir.listFiles().length);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.directoryContains(targetDir,tempTargetFile));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.deleteQuietly(tempSrcFile));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(targetDir.listFiles()[0].isDirectory());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotNull(targetDir);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.sizeOfDirectory(targetDir)>0);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(targetDir.listFiles()[0].isFile());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals(0,FileUtils.sizeOfDirectory(srcDir));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(FileUtils.directoryContains(srcDir,tempSrcFile));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.isRecognized());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(!panest.isRecognized());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(0,panest.getWordforms().size());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getWordforms().size()>0);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(null,panest.getBestWordform());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getCorrectWordform()!=null);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.getWordforms().isEmpty());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest.getBestWordform());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(1,w.getWordforms().size());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.isRecognized());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.getWordforms().isEmpty());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(0,w.getWordforms().size());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.getWordforms().contains(expectedWordform));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals("STR",w.getBestWordform().getValue(AttributeNames.i_Lemma));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.hasAnalysisResults());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w.getAnalysisResults());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(0,w.getAnalysisResults().size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(2,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals("STR",paragraph);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).get(0).getToken().equals("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(3,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).get(0).getToken().startsWith("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).get(0).getToken().endsWith("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>=2);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	1
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.length()>0);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(7,OpenKoreanTextProcessorJava.tokensToJavaList(tokens).size());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(OpenKoreanTextProcessorJava.tokenize("STR").isEmpty());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(0,tokens.size());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",OpenKoreanTextProcessorJava.tokenize(text).toString());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(null,tokens);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.filter(token->token.getText().contains("STR")).size()>0);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(true,isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>OTP_MAX_LEN||otp.length()<OTP_MIN_LEN);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp!=null);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.matches("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=OTP_MAX_LEN&&otp.length()>=OTP_MIN_LEN);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(OTP_MIN_LEN,otp.length());	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.ACCEPT);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.ACCEPT,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(newLoggingEvent()));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(true,StringUtils.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNull(StringUtils.capitalize(null));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotEquals(5,StringUtils.calculateSum(2,3));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotNull(StringUtils.reverseString("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEqual("STR","STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotSame(obj1,obj2);	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEqualIgnoreCase("STR","STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertEquals(newAgent(),activityState.getAgent());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals(null,activityState.getRegistration());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertTrue(activityState.getStateId().startsWith("STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals("STR",activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState.getState());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertFalse(activityState.getActivityId().isEmpty());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertEquals("STR",activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotSame(activityState.getAgent(),newAgent());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getAgent().getMbox());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actualinstanceofJsonObject);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(expected);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNull(expected);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.entrySet().size()>0);	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testAttended	assertNotNull(actual);	assertEquals("STR",actual.getId());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotEquals("STR",actual.getId());	0
VerbsTest	testAttended	assertNotNull(actual);	assertSame(Verbs.createVerb("STR"),actual);	0
VerbsTest	testAttended	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotSame(Verbs.createVerb("STR"),actual);	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotEquals("STR",actual.getId());	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNotNull(thrownException);	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(spawner.getThreads().size()==1);	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertEquals("STR",spawner.getThreads().get(0).getName());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertEquals("STR",((CommandLineExitException)spawner.getCaughtException()).getMessage());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	???;	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNotNull(spawner.getCaughtException());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(spawner.getExceptionReporter().getReportedExceptions().size()==1);	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNull(spawner.getExceptionReporter().getLastReportedThread());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertEquals(0,spawner.getExceptionReporter().getReportedExceptions().size());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(spawner.getThreads().isEmpty());	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(getValues("STR"));	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(2,getValues("STR").length);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(Arrays.asList(getValues("STR")).contains("STR"));	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNull(getValues("STR"));	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(0,getValues("STR").length);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(getValues("STR").length>0);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(0,getValues("STR").length);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	???;	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(Arrays.asList(getValues("STR")).isEmpty());	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(Arrays.stream(getValues("STR")).allMatch(value->value.length()==3));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(fetchResource("STR",System.currentTimeMillis()));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotEquals(null,fetchResource("STR",System.currentTimeMillis()));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	???;	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertEquals("STR",desc.get("STR"));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(desc.containsKey("STR"));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotSame(null,fetchResource("STR",System.currentTimeMillis()));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(desc);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(desc.size()>0);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(res.startsWith("STR"));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotEquals(0,desc.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",result.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(env);	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsValue("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.isEmpty());	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",FOCAL.toDBC("STR"));	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<p.getCells().length);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=2);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(3,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(2,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==10);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<cells.length);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(6,p.getBlankIndex());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(true,isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(!isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(puzzle.isSolved());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(puzzle.isSolved(),isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(false,!isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(puzzle.isSolved(),!isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(puzzle);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(puzzle.getSolutionStatus());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",newYourClassName().getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotNull(actual);	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(newYourClassName().getName().equals("STR"));	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotEquals("STR",newYourClassName().getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals(10,newYourClassName().getName().length());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotSame("STR",newYourClassName().getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertFalse(newYourClassName().getName().isEmpty());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotEquals(null,newYourClassName().getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(newYourClassName().getName().startsWith("STR"));	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotEquals("STR",newYourClassName().getName());	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.equals(anotherCompositeKey),false);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey)!=true);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.compareTo(anotherCompositeKey),0);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.toString(),anotherCompositeKey.toString());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey==anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(!compositeKey.equals(anotherCompositeKey));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getType()==OType.INTEGER);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getMin()==1);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getMax()==10);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isMandatory());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNull(idProperty.getDescription());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isNotNull());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.hasNext());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(20,result.estimateSize());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertFalse(result.hasNext());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotEquals(0,result.getExecutionPlan().length());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.isCloseable());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNull(result.getQueryStats());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(20,result.stream().count());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.characteristics()>0);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotEquals(0,result.getExecutionPlan().hashCode());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(10,request.getMonitorId());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(request.getEvents());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(mock.isLiveEventsProcessed());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,request.getEvents().size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotEquals(OLiveQueryPushRequest.ERROR,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(OLiveQueryPushRequest.END,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.stream().anyMatch(event->event.getEventType()==OLiveQueryResult.CREATE_EVENT));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(request.getEvents().stream().anyMatch(event->event.getEventType()==OLiveQueryResult.UPDATE_EVENT));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.stream().anyMatch(event->event.getEventType()==OLiveQueryResult.DELETE_EVENT));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,events.size());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").toString().startsWith("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.field("STR").toString().isEmpty());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").endsWith("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.field("STR").isEmpty());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals("STR",extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").contains("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,document.fields());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(3,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props.getProperty("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotSame(0,props.hashCode());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.getProperty("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(0,props.size());	1
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",FOCAL.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(FOCAL.getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals("STR",FOCAL.getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",FOCAL.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(FOCAL.getSystemPropertyWithMavenPropertyAsFallback(newProperties(),"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(FOCAL.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals("STR",FOCAL.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(Focal.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR")!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertFalse(Focal.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR")!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(Focal.getSystemPropertyWithMavenPropertyAsFallback(properties,"STR").isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().allMatch(word->word.getToken().length()>0));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(0,tokens.indexOf(newWord("STR")));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals("STR",tokens.getFirst().getToken());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(newWord("STR")));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.stream().filter(word->word.getToken().startsWith("STR")).count());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().anyMatch(word->word.getToken().contains("STR")));	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frameinstanceofPongFrame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frameinstanceofControlFrame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(0,frame.getPayloadLength());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(null,frame.getTimestamp());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(frame.getOpcode(),Opcode.CONTROL);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFalse(frameinstanceofPingFrame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertSame(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(0,frame.hashCode());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protocol1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protocol1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protocol1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals(protocol0.getProvidedProtocol(),protocol1.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0.getProvidedProtocol(),protocol1.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals(protocol0,protocol1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0.hashCode(),protocol1.hashCode());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0.copyInstance(),protocol1.copyInstance());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.toString(),protocol1.toString());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNull(pool);	1
RpcConnectionManagerTest	testGet	assertNull(pool);	assertTrue(poolinstanceofConnectionPool);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertTrue(pool!=null&&poolinstanceofConnectionPool);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(pool.get());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(this.getConnectionPool(this.connTasks.get(poolKey)));	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotEquals(null,pool.get());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertTrue(pool!=null&&poolinstanceofConnectionPool&&pool.get()!=null);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	???;	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(pool.get().getChannel());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertSame(pool,this.getConnectionPool(this.connTasks.get(poolKey)));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(result);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals("STR",result.getVendor());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(resultinstanceofCommonEvent);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(7,result.getVersion());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals("STR",result.getDeviceVendor());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(result.getSignatureIds().contains(80494706));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertFalse(result.getExtensions().isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(0,result.getEventId());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(result.getVendor().startsWith("STR"));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(Arrays.equals(expected.getBytes(),fromString.getBytes()));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected.toString(),fromString.toString());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertArrayEquals(expected.getBytes(),fromString.getBytes());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotEquals(expected.hashCode(),fromString.hashCode());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.toString().equals(fromString.toString()));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(fromString.equals(UL.newUL("STR")));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertSame(expected.getClass(),fromString.getClass());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(first);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals(0,response.readableBytes());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.capacity()>=1024);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	???;	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(policyResponse,response);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.equals(ChannelBuffers.copiedBuffer(policyResponse)));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals(policyResponse.hashCode(),response.hashCode());	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag==latestTag||resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(tag1,tag2);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(latestTag)||resultedTag.equals(oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag==oldTag||resultedTag==latestTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertFalse(tag1.equals(tag2));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,latestTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(tag1Date,tag2Date);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger!=null);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals("STR",logger.getTag());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isClosed());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.isInitialized());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals("STR",logger.getTag());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotSame(FluentLogger.getLogger("STR"),FluentLogger.getLogger("STR"));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.getLogCount()==0);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(0,logger.getLogCount());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.isError());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(actualDelegate);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertEquals(expected,actual);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertSame(expected,actual);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(actualDelegateinstanceofJMXConnectorFactoryDelegate);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(expected,actual);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNull(actualDelegate);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertFalse(condition);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotEquals(expected,actual);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertArrayEquals(expectedArray,actualArray);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(actualDelegate!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(attacher,factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	???;	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(attacher,factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotSame(anotherAttacher,factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotEquals(anotherAttacher,factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNull(factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(factory.getAttacher()==null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(factory.getAttacher()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotEquals(null,factory.getAttacher());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(poller.shutdownInd);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(processinstanceofJmxAttributePoller.PollOneObjectSchedulerProcess);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(poller.isPollActive());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(2,polledObjects.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotEquals("STR",process.toString());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotEquals(0,processes.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(executionSlips);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(mockBatchCapableAccessConnection.isConnected());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getName().get("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getDescription().get("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getExtensions().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getInteractionType());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getCorrectResponsesPattern().contains("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getChoices().size());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getSteps().size());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotEquals("STR",ad.toString());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad.getMoreInfo());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertFalse(ad.getSteps().isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals("STR",actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(DURATION,actual.trim());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals("STR",actual);	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertTrue(a.getResponseMessage().equals(RESPONSE_MESSAGE));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(statements,a.getStatements());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(attachments.size(),a.getAttachments().size());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotSame(statement,a.getStatements().get(0));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertSame(attachments,a.getAttachments());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertTrue(a.getAttachments().containsKey(HASH));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a.getAttachments().get(HASH));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotEquals(0,a.getStatements().size());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream,"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotNull(resourceAsStream,"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream!=null,"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream==null,"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStreaminstanceofInputStream,"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(-1,resourceAsStream.available(),"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream.read(),"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotSame(this.getClass(),resourceAsStream.getClass(),"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream.markSupported(),"STR");	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(0,resourceAsStream.available(),"STR");	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(expectedURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertSame(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(expectedURL,"STR");	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(duration>=500);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(duration<1000);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertEquals(1,db.getMetadata().getSchema().getClasses().size());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db.getMetadata().getSchema().getClass("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals("STR",actualValue);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.existsClass("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotSame(obj1,obj2);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertSame(expectedObj,actualObj);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.getTransaction().isActive());	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertEquals("STR",YourClass.get(ATTRIBUTES.YOUR_ATTRIBUTE));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	???;	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(YourClass.get(ATTRIBUTES.SOME_ATTRIBUTE));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotEquals("STR",YourClass.get(ATTRIBUTES.OTHER_ATTRIBUTE));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertSame(ExpectedObject,YourClass.get(ATTRIBUTES.SOME_OTHER_ATTRIBUTE));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertFalse(condition);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotSame(NotExpectedObject,YourClass.get(ATTRIBUTES.YET_ANOTHER_ATTRIBUTE));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNull(YourClass.get(ATTRIBUTES.ATTRIBUTE_TO_BE_NULL));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertTrue(condition);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertEquals(expectedSize,YourClass.get(ATTRIBUTES.COLLECTION_ATTRIBUTE).size());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.get(0).getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertFalse(script.isEmpty());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotEquals(0,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(className.equals("STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(script.contains("STR"+className+"STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(script.contains("STR"+className+"STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",rs.get(0).getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotEquals(0,className.length());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",detokenize(words));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(words.isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(words);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotSame("STR",detokenize(words));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.size()>0);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(6,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.containsAll(Arrays.asList("STR","STR")));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	???;	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotNull(attrs());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	???;	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	???;	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertEquals(0,attrs().size());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotEquals(0,attrs().hashCode());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotNull(attrs().toString());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertFalse(attrs().isEmpty());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertSame(F.class,attrs().getType());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertEquals(0,attrs().values().size());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	???;	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotSame(Options.create(),options);	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertTrue(options.isYInvert());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotNull(options.getBasedir());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertTrue(options.getFormat()==Format.PNG);	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals("STR",options.getBasedir().getName());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotEquals(43,options.getTotalMemory());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertSame(Format.PNG,options.getFormat());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertFalse(options.isEngine(Engine.NEATO));	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotEquals(0,options.getImages().size());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	???;	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotNull(dots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertEquals(Dots.class,dots().getClass());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotEquals(null,dots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertSame(Dots.class,dots().getClass());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertTrue(dots()!=null);	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotSame(null,dots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotEquals(null,dots().toString());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertTrue(dots().toString().startsWith("STR"));	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotSame(System.identityHashCode(dots()),System.identityHashCode(newDots()));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(null,testSuite.getTestCase(null));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertTrue(testSuite.getTestCaseList().isEmpty());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(0,testSuite.size());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertFalse(testSuite.isVerifyEnabled());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals(5,testSuite.getMaxTestCaseIdLength());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(1,testSuite.getTestCaseList().size());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertFalse(testSuite.isParallel());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getWorkerQuery());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(!properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(expectedSize,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(expectedPropertyValue,properties.getProperty("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(newUnknownGitProperties(),properties);	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.containsKey("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNull(properties.getProperty("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotSame(newUnknownGitProperties(),GitInfo.loadGitProperties("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties.getProperty("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertEquals(EXPECTED_MARKDOWN,m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertFalse(m.markdown("STR").isEmpty());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals(EXPECTED_NON_EMPTY_STRING_LENGTH,m.markdown("STR").length());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotSame("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").contains("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertFalse(m.markdown("STR").equals("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals(EXPECTED_HASH_CODE,m.markdown("STR").hashCode());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").startsWith("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertArrayEquals("STR".getBytes(StandardCharsets.US_ASCII),asciiBytes("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals(0,simtiem.getWordforms().size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.getBestWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.getWordforms().isEmpty());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(0,simtiem.getWordforms().size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(!simtiem.getWordforms().isEmpty());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(null,simtiem.getBestWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.getCorrectWordform()!=null);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.getCorrectWordform().isAmbiguous());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals("STR",simtiem.getBestWordform().getToken());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(2,readKfIntraMode(miCol,miRow,blSz,decoder,c));	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes.length==16);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(c.leftModes[0],Decoder.PRED);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	???;	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c.getKfYModeProbs());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(c.interpFilterProbs[0][0]==-1);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(decoder.isFullyRead());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(c.getAboveModes(),c.getLeftModes());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.miTileStartCol>=0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(blSz,3);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.asJavaUtilSet().containsAll(Arrays.asList("STR","STR","STR","STR")));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotNull(keys);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.asJavaUtilSet().size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(0,keys.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(0,keys.asJavaUtilSet().size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()==4);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.asJavaUtilSet().size()==4);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.contains("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(-1,filterResult.indexOf("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(0,filterResult.compareTo(url.toExternalForm()));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals("STR"+DigestUtils.sha1Hex(content2).toUpperCase(),sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals(37,sha1str.length());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR"+DigestUtils.sha1Hex(content1).toUpperCase(),sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotSame("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.endsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.matches("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult.toUpperCase());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(0,filterResult.length());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	???;	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.keySet().contains("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(Focal.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	???;	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals(newURL("STR"),Focal.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotSame(Focal.create("STR"),Focal.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals("STR",Focal.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(Focal.create("STR").toString().contains("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(Focal.create("STR").getProtocol().equals("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(Focal.create("STR").getHost().equals("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNull(Focal.create(null));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",Focal.create("STR").toString());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(polledObjects));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotEquals(0,poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polledObjects.get(0)));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(Arrays.asList("STR",polled001)));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(convertToBytes(inputLongValue).length<0);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedArrayLength,convertToBytes(inputLongValue).length);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(inputLongValue));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(inputLongValue).length>0);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(0,convertToBytes(inputLongValue).length);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(expectedByteArray,convertToBytes(inputLongValue));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(null,convertToBytes(inputLongValue));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(inputLongValue).length<=256);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertArrayEquals(networkArray,FOCAL.parseNetworks("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotNull(FOCAL.parseNetworks("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals(3,FOCAL.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(Arrays.asList(FOCAL.parseNetworks("STR")).contains("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,FOCAL.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(Arrays.asList(FOCAL.parseNetworks("STR")).contains("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNull(FOCAL.parseNetworks("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	???;	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(Arrays.asList(FOCAL.parseNetworks("STR")).contains("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals("STR",FOCAL.parseNetworks("STR")[0]);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(!result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(expectedSize,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.contains(expectedDocument));	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(-1,result.indexOf(expectedDocument));	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(expectedValue,result.get(index).field("STR"));	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.stream().allMatch(doc->doc.field("STR").equals("STR")));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager2.isSame(manager));	1
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(1,manager.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReferences());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertSame(doc1,manager.getNewRecords().iterator().next());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(manager,manager2);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getUpdateRecords().isEmpty());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotSame(manager.getReferences(),manager2.getReferences());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc1));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(manager.getReal()==manager2.getReal());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotSame(doc1,set.iterator().next());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(0,doc.fields());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(newODocument(),doc);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(expectedObject,actualObject);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(expectedValue,actualValue);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc==doc);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(docinstanceofSomeOtherClass);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals(1,listener.getLatch().getCount());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(listener.getLatch().getCount()==1);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(live);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(item.getProperty("STR").equals("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals("STR",item.getProperty("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotEquals(0,item.getIdentity().getClusterPosition());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(item.getIdentity().isPersistent());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getClosed());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotEquals(0,database.countClass(OVertex.class.getName()));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.existsClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(1,countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(db.getMetadata());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc1.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(2,doc2.size());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc2.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(doc2.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	???;	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertFalse(doc1.field("STR")==doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals("STR",doc2.field("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	???;	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals(3,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(Arrays.asList(actuals).contains("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(Arrays.asList(actuals).isEmpty());	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("STR",actuals[2]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals[0].startsWith("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame(actuals[0],actuals[1]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals[1].contains("STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Collections.emptyList(),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotNull(striped());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertEquals(Attributes.class,striped().getClass());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotEquals(null,striped());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertTrue(striped()!=null);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	???;	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertFalse(striped().isEmpty());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotSame(null,striped());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertTrue(striped().contains(Style.STRIPED));	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotNull(striped().getAttributes());	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertTrue(striped().attributesExist());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotNull(result);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertTrue(result.size()>0);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertEquals(expectedSize,result.size());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotEquals(expectedSize,result.size()-1);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotNull(attrs());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotSame(expectedAttributes,attrs());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertSame(expectedAttributes,attrs());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	???;	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotEquals(0,attrs().size());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertTrue(attrs().isEmpty());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	???;	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.PING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertFalse(binary.getOpcode()==Opcode.CLOSING);	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.TEXT,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.PONG,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode()!=Opcode.CLOSING);	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.CLOSING,binary.getOpcode());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected.length(),config.toYaml("STR").length());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").endsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals(-1,config.toYaml("STR").indexOf("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('A',3));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('C',6));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('D',0));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('B',2));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('E',5));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('Z',9));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('x',24));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('$',20));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('H',28));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('!',1));	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.getPort());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertFalse(rpcServer.port()<0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(-1,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.getConnectionManager());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	???;	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.getBossGroup()!=null);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.getUserProcessors());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(expectedAgentCount,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()>0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.agentCount()<0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(expectedAgentCount,registry.agentCount()+1);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(expectedAgentCount,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()>=0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(-1,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(expectedAgentCount,registry.agentCount()*2);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,actual.toString());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actualinstanceofJsonObject);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(jsonObject.has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual.getAsJsonObject().get("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals("STR",obj.get("STR").getAsString());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(obj.has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(obj.get("STR").isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(1,obj.entrySet().size());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(Response.newFixedLengthResponse("STR").getData(),"STR");	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().getContentType().getValue().contains("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getEntity().getContentLength()==0);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(response.getEntity().getContentLength(),-1);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(Status.OK.getRequestStatus(),200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotSame(Status.OK,Status.FORBIDDEN);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatus()==Status.OK);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals(response.getStatusCode(),200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(response.getUri(),null);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.endsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(-1,filterResult.indexOf("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult.trim());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertSame(13,filterResult.length());	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(null,"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(-1,a[0]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a[a.length-1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-1,a[0]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[2]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a[0]!=a[1]);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals("STR",sql.select().from("STR").limit(10).toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").limit(10).toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")&&sql.toString().contains("STR")&&sql.toString().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR")&&sql.toString().contains("STR")&&sql.toString().endsWith("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").limit(5).toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").limit(10).toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").limit(10).toString().isEmpty());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.select().from("STR").limit(10).toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals(26,sql.select().from("STR").limit(10).toString().length());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotSame(sql.select().from("STR").limit(10).toString(),sql.select().from("STR").limit(5).toString());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",person1.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.equals(person1)&&person2.equals(person2)&&person3.equals(person3));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(person1);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(person1,person2);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	???;	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(3,db.countClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(person1.equals(person2));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.field("STR").startsWith("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(db.exists("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals(person1,person2);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(expectedResult.size(),result.size());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertFalse(result.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotNull(result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotEquals(0,result.size());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotEquals(expectedResult,result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(resultinstanceofList);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.contains("STR"));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(expectedResult,result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.stream().anyMatch(element->element.get("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(Collections.emptyList(),results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(1,results.stream().map(ODocument::field).filter(Objects::nonNull).count());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals("STR",results.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	???;	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertSame(results.get(0).field("STR"),expectedValue);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(5,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.contains(expectedDocument));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.stream().allMatch(doc->doc.field("STR").toString().startsWith("STR")));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(-1,results.indexOf(expectedDocument));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(expectedSize,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>=5);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.get(0).field("STR").equals("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(db);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals("STR",qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(keyTypes,focalObject.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(focalObject.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertTrue(Arrays.equals(keyTypes,focalObject.getTypes()));	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(Arrays.copyOf(keyTypes,keyTypes.length),focalObject.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(keyTypes.length,focalObject.getTypes().length);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotSame(keyTypes,focalObject.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	???;	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotEquals(keyTypes.length,focalObject.getTypes().length);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertSame(keyTypes.getClass(),focalObject.getTypes().getClass());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	???;	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(0,doc.getVersion());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(bytes.length,((byte[])doc.field("STR")).length);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotEquals("STR",doc.getVersion());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isNew());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals("STR",doc.fieldNames().iterator().next());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.getDocumentType().equals("STR"));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().map(OResult::getPropertyKeys).allMatch(keys->keys.contains("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().anyMatch(r->r.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().allMatch(r->r.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().map(r->r.getProperty("STR")).distinct().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().allMatch(r->r.getProperty("STR").toString().startsWith("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().map(r->r.getProperty("STR").toString().length()).sum());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().anyMatch(r->r.getPropertyKeys().isEmpty()));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(1,result.stream().map(r->r.getPropertyKeys().size()).findFirst().orElse(0));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().noneMatch(r->r.getPropertyKeys().contains("STR")));	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(resultinstanceofDouble);	1
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(null,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(-10.5D,(double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertFalse(resultinstanceofString);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(resultinstanceofNumber);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(-10.5D,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(result!=null);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(4,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofInteger);	1
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotEquals(0,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofNumber);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotSame(OMathExpression.Operator.BIT_XOR,exp.operators.get(0));	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertSame(OMathExpression.Operator.BIT_AND,exp.operators.get(0));	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertFalse(childExpressions.isEmpty());	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNull(exp.calculateWithOpPriority(null,null));	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue(exp.childExpressions.size()>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(expectedCount,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(0,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(countClass("STR")>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(0L,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(countClass("STR")>=0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(countClass("STR")<0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(expectedCount,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(expectedCount,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(expectedCount,countClass("STR"));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(0,result.estimateSize());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNull(result.next());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result.getExecutionPlan());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotEquals(5,result.getExecutionPlan().length());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(db.isOpen());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(db.isClosed());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(3,1+2);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotSame("STR","STR");	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(0,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(0,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(1,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.wordforms.size()>0);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(null,vārds.wordforms);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertSame(0,vārds.wordforms.size());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsKey("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals(0,env.size());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR"));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotEquals(null,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotEquals(expected.length(),actual.length());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.startsWith(expected.substring(0,5)));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.matches("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(1,methods.size());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(0,methods.size());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getParameterCount()==0);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals("STR",e.getClass().getSimpleName());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method.getName());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(methods.isEmpty());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(null,method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotSame(methods.get(0),methods.get(1));	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>=0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(registry);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(5,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(2,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals("STR",registry.getAgentByPublicAddress("STR").getPublicAddress());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(4,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(registry.agentCount()==0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>=5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(registry.getWorkers());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.getWorkers().size());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(10,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()<=10);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(7,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(registry.workerCount()==0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(3,registry.workerCount());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	???;	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotEquals(null,this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(mockJmxMbeanConnectorFactory,this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertSame(mockJmxMbeanConnectorFactory,this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(mockJmxMbeanConnectorFactory,this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNull(this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertTrue(this.factory.getJmxMBeanConnectionFactory().equals(this.factory.getJmxMBeanConnectionFactory()));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertFalse(this.factory.getJmxMBeanConnectionFactory()==this.factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotEquals(this.mockJmxMbeanConnection,this.factory.getJmxMBeanConnectionFactory());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(expectedMap,groupBy(inputList,function,equality));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(groupBy(inputList,function,equality));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.isEmpty());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.size()>0);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(0,result.size());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(expectedSize,result.size());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotSame(Collections.emptyList(),result.entrySet());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsValue(someValue));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsValue(someValue));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode()==Opcode.CONTINUOUS);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(Opcode.UNKNOWN,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getClass()==ContinuousFrame.class);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotSame(frame,newContinuousFrame());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frameinstanceofContinuousFrame);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.toString().contains("STR"));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(0,frame.hashCode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.hashCode()!=0);	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals(7,config.getString("STR").length());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").endsWith("STR"));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofMetronome);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(Metronome.class,m.getClass());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertFalse(m.getClass().getSimpleName().isEmpty());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertSame(supplier.get(),supplier.get());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(supplier.get(),null);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(supplier.get(),supplier.get());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(propertyBinding);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(2342,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNull(pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertSame(Integer.class,pid.getClass());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>=0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertFalse(pid==null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedB,Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotEquals(mapA,Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotNull(Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(Utility.mergeMaps(mapA,mapB).containsKey("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(Utility.mergeMaps(mapA,mapB).containsValue("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(Utility.mergeMaps(mapA,mapB).size()==3);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertSame(mapA,Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotSame(mapB,Utility.mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(Utility.mergeMaps(mapA,mapB).isEmpty()==false);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertFalse(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertFalse(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(3,someVariable);	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1
ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(5,someVariable);	0
ProfileUtilTest	simple	assertNotNull(is);	assertNull(someObject);	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotSame(expectedObject,actualObject);	0
ProfileUtilTest	simple	assertNotNull(is);	assertSame(expectedObject,actualObject);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(5)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(10)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size()>0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size()==1);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(null,array.get(0));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.get(0));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertFalse(array.add(null)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array.get(0));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(4,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result.iterator());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals("STR",result.stream().findFirst().get().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.stream().anyMatch(vertex->vertex.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals("STR",result.stream().sorted(Comparator.comparing(vertex->vertex.getProperty("STR"))).findFirst().get().getProperty("STR"));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(compositeKey.equals(compositeKey),true);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(compositeKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(compositeKey,null);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(compositeKey.getClass(),OCompositeKey.class);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey.getKeys());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotSame(compositeKey.getKeys(),anotherCompositeKey.getKeys());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getKeys().size()==0);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=0);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	???;	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getId()==100);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.getGlobalProperties().size()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNull(schema.getGlobalPropertyById(200));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals(OType.LINK,prop.getType());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getId()>=0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(schema.countClasses()==0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.getGlobalProperties().isEmpty());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(prop.getName().isEmpty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals(1,map.size());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(map);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isEmpty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsValue("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result.get(0).field("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(result.isEmpty());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(0,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals("STR",classA.getName());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(schema.existsClass("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(prop.getType().isLinkedType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.existsProperty("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	???;	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(doc.getClassName().startsWith("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(doc.containsField("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(2,schema.getClasses().size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(c0.existsProperty("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(c1.existsProperty("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertFalse(schema.existsClass("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(doc.getClassName().contains("STR"));	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(expectedSize,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(expectedResults,qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(expectedResults,qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(expectedResults,qResult.size());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(200,getVersion());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotNull(getVersion());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getVersion()>0);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals("STR",getLastRequestUrl());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getLastRequestUrl().contains("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getLastRequestUrl().startsWith("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals("STR",getLastRequestContentType());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	1
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNull(getResponse().getStatusLine().getReasonPhrase());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().equals("STR"));	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(ResponseStatus.OK,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getTimeStamp()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.isError());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals("STR",response.getError());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame("STR",response.getNonce());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSessionCounter()>=0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSessionUse()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame(0,response.getSyncPercentage());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()==1);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()==0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(1,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	???;	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(dockerfileLines,expectedDockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()>0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(2,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals("STR",dockerfileLines.get(0));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,muxXiphLacing(_in));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,actuals);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(3,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	???;	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.get(0).getPosition()>=0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals("STR",rootAtoms.get(1).getName());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.stream().allMatch(atom->atom.getSize()>0));	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotSame(originalRootAtoms,rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.get(rootAtoms.size()-1).getPosition()>=0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,toArray(ByteBuffer.wrap(f1.data)));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(32,mpeges.fetchSize);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().limit()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame2,toArray(ByteBuffer.wrap(f1.data)));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getDuration()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(0,f1.getPts());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame1,frame2);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getFrameNo()>=0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1.getData());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(actualinstanceofAgent);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotEquals(null,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(instructor,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertFalse(c.getInstructor()==null);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals("STR",actual.getName());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotEquals("STR",actual.getMbox());	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(actual.getName().startsWith("STR"));	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.isRecognized());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.toString().contains("STR"));	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals("STR",austrumlatvija.toString());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija.getCorrectWordform());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.getWordforms().size());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(!austrumlatvija.getWordforms().isEmpty());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.getCorrectWordform()==null);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.hashCode()!=0);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.getWordforms().size()>=1);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.getWordforms().isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(1,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsKey(processor.interest()));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors.get(multiInterestUserProcessor.interest()));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotSame(preProcessor,processor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.size()>0);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.contains(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.containsKey("STR"));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(processor));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getAll());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll().isEmpty());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.getAll().size());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll().containsValue(conn));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll().values().stream().anyMatch(connection->connection.equals(conn)));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll().containsKey(poolKey));	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals(5,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher.pattern());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotSame("STR",matcher.pattern());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals("STR",matcher.pattern());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNull(matcher.flags());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find()||matcher.matches());	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getHistory());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertSame(3,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(1,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	???;	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotSame(0,s.getActualCost());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(expectedClusterId,getClusterIdByName(clusterName));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result!=null);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(clusterName.isEmpty());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,result.getExecutionPlan().get().getCost());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotSame(clusterName,result.getExecutionPlan().get().getStages());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertArrayEquals(expectedArray,actualArray);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNull(query.getQueryStats());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(Arrays.asList("STR").contains(clusterName));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(null,prop.getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getId()>0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(prop.getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertFalse(prop.getId()<0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(OType.STRING,prop.getType());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals("STR",prop.getName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(oClass.createProperty("STR",OType.INTEGER),oClass.createProperty("STR",OType.BOOLEAN));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertSame("STR",prop.getFullName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNull(prop.getDescription());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(newValue,next);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	???;	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals("STR",next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(iFieldName.startsWith("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(((ORID)next.field("STR")).isPersistent()||((ORID)next.field("STR")).isNew());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(iFieldName.contains("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals("STR",next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals("STR",next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(oldValue,newValue);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	???;	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertEquals("STR",processor.getTransformedData().get(0).get("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(configurator.getPipeline().getLoader());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(configurator.getConfiguration().containsKey("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(configurator.getPipeline());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(configurator.getConfiguration().containsKey("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertEquals(1,configurator.getConfiguration().size());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertFalse(configurator.getConfiguration().isEmpty());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.getClass().getSimpleName().equals("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(configurator.getLoader());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getName().equals("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getSuperClass().getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.getClusterIds().length);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getShortName().startsWith("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isEdgeType());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz.getDefaultClusterId());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getBaseClasses().contains("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isAbstract());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.getName().isEmpty());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(createValue(123));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(propertyIndex.createValue("STR"));	1
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotNull(createValue(Collections.singletonList("STR")));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertEquals(1,createValue("STR"));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(0,createValue(123));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotSame(Collections.emptyList(),createValue(Arrays.asList(1,2,3)));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(null,createValue("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNull(prioritizer.getRoute("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().contains("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,prioritizer.getRoute("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getRoute("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotSame(NotImplementedHandler.class,prioritizer.getRoute("STR").getHandler());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(100,prioritizer.getRoute("STR").getPriority());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,prioritizer.getPrioritizedRoutes().get(0));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(3,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(!routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(0,routePrioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().size()>0);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus().toString());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.getOtp().isEmpty());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(ResponseStatus.INVALID_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getH().startsWith("STR"));	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getSessioncounter());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response.getKeyValueMap());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getSessionuse()>=0);	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(actualinstanceofAgent);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNull(activityState.getActivityId());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(activityState.isCompleted());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotEquals("STR","STR");	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(activityState.getState().toString().contains("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotSame(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.equals(actual));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals("STR",actual.get("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsValue("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNull(expected.get("STR"));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().size()>0);	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(attachments.size(),a.getAttachment().size());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotEquals("STR",a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getAttachment());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getAttachment().containsKey("STR"));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(statement,a.getXapiStatement());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNull(a.getXapiStatement());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals("STR",extractor.getClass().getSimpleName());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(0,extractor.hashCode());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(BasicExtractor.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(System.getProperty("STR"),config.toString());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofBasicExtractor);	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(6,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).containsKey(4));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotNull(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertFalse(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(!ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotEquals(0,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).containsKey(6));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).get(6).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotEquals(0,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).get(3).size());	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList(),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionsHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals(1,w.getWordforms().size());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(w.getWordforms().isEmpty());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getWordforms().stream().anyMatch(wordform->wordform.getValue().contains("STR")));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotEquals(0,w.getWordforms().size());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getWordforms().stream().anyMatch(wordform->wordform.getAttribute("STR").equals("STR")));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals("STR",w.getBestWordform().getAttribute("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(!w.getWordforms().isEmpty());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getBestWordform().containsAttribute("STR"));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotEquals(0,methods.size());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(methods.size()<=1);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertFalse(methods.size()>1);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(filter);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(clazz.getName().contains("STR"));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals(annotationClazz,Verify.class);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(filter.isGlobal());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotSame(clazz,annotationClazz);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.startsWith("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.endsWith("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertFalse(performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals(54,performance.length());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.matches("STR"));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertEquals(SECONDS.toMillis(3),durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<SECONDS.toMillis(3));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(0,duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(SECONDS.toNanos(3),duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration==0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(SECONDS.toMillis(2),durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(Long.valueOf(SECONDS.toMillis(2)),Long.valueOf(duration));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(expectedValue,ebmlSignedLength(inputValue));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(inputValue)>=1&&ebmlSignedLength(inputValue)<=8);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(0,ebmlSignedLength(inputValue));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertFalse(ebmlSignedLength(inputValue)==0);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(inputValue)>=1&&ebmlSignedLength(inputValue)<=8&&(ebmlSignedLength(inputValue)>=1&&ebmlSignedLength(inputValue)<=7||ebmlSignedLength(inputValue)==8));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(1,ebmlSignedLength(inputValue));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(inputValue)>=1&&ebmlSignedLength(inputValue)<=7);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(2,ebmlSignedLength(inputValue));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,ebmlSignedLength(inputValue));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(inputValue)>=1&&ebmlSignedLength(inputValue)<=7||ebmlSignedLength(inputValue)==8);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(expectedResult,hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals(null,getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertSame(container1,getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotSame(container2,getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals(expectedInitContainer,getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(false,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(true,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotSame(true,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNull(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertSame(false,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(true,!find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(!find());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(0,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertFalse(s.getEstimatedCost()<0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(1,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(3,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(cm.getConnectionPool("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(cm.getConnectionPool("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.getAll().size());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(3,cm.getAll().size());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(someObject);	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(expectedObject,actualObject);	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertSame(expectedObject,actualObject);	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.toString().contains("STR"));	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(null,doc);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.stream().allMatch(doc->doc.field("STR").toString().contains("STR")));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals("STR",cfgJson);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,proc.getLoader().getExtractor().getExecutionCount());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(!proc.getLoader().getExtractor().getExecutionSummary().isEmpty());	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(EXPECTED_BYTE_ARRAY,stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(EXPECTED_START_POSITION,actualStartPosition);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(charSerializer);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(0,stream.length);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(charSerializerinstanceofOCharSerializer);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(EXPECTED_CHARACTER_OBJECT,deserializedCharacter);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(null,deserializedCharacter);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertSame(EXPECTED_OBJECT,actualObject);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals(expectedValue,v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(false,v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(true,v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNull(v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotSame(previousValue,v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent()==true);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(null,v.isPersistent());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.contains(newOCompositeKey(12,newOCompositeKey("STR","STR"))));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofList);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofOCompositeKey);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(compositeKeys.size(),0);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(result,firstKey);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(compositeKeys.contains(newOCompositeKey("STR")));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(compositeKeys.size(),1);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(collectionResult.size(),2);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertFalse(collectionResult.isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(resultinstanceofCollection);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertSame(document.field("STR"),12);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals(compositeIndex,null);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(compositeIndexDefinition.getIndexes().size()>=2);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotSame(compositeIndexDefinition.getDocumentValueToIndex(document).getClass(),String.class);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	???;	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(resultinstanceofArrayList);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(frominstanceofOClusterRepairInfoTask);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),to.getResultStrategy());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getDistributedTimeout(),to.getDistributedTimeout());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from.getName(),to.getName());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertSame(from.getResultStrategy(),to.getResultStrategy());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(from.isIdempotent());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(_className!=null||!v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals("STR",v1.getIdentity().toString());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(database.getTransaction());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame(_className,getClassName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame(v1,database.command(newOCommandSQL("STR")).execute());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals(_className.length(),getClassName().length());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(database.getTransaction().isActive());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals("STR",getClassName());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR").equals("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(job);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",f.getName());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals(0,f.length());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.isDryRun());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNull(job.getServiceEnvironment());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.isDirectory());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotSame(folder.getRoot(),f.getParentFile());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.getBranch().equals("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",job.getServiceEnvironment().getProperty("STR"));	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(env()).getBranch());	1
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	???;	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotNull(newTravis(env()).getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotEquals("STR",newTravis(env()).getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertTrue(!newTravis(env()).getBranch().isEmpty());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotEquals(null,newTravis(env()).getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotSame(newTravis(env()).getBranch(),newTravis(env()).getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(env).getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertFalse(newTravis(env()).getBranch().isBlank());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertSame(newTravis(env()).getBranch(),newTravis(env()).getBranch());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	???;	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector()!=null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(attributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(attributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(otherAttributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector().toString());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotEquals(null,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertFalse(processor.getAttributeInjector()==null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotEquals(attributeInjector,processor.getAttributeInjector());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(Modifier.isStatic(Field.class.getModifiers()));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTestinstanceofSetFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(0,setFieldTest.getClass().getDeclaredFields().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.getClass().getDeclaredMethods().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(0,setFieldTest.getClass().getDeclaredConstructors().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(Modifier.isFinal(Field.class.getModifiers()));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(Modifier.isPrivate(Field.class.getModifiers()));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(Modifier.isPublic(Field.class.getModifiers()));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(Modifier.isProtected(Field.class.getModifiers()));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	???;	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNull(result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals(0,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.size()>0);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals(null,result);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,registry.workerCount());	1
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(registry.workerCount()>=4);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotNull(registry);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(registry.workerCount()<0);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotSame(0,registry.workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(3,registry.workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotSame(-1,registry.workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(registry.workerCount()>0);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(10,registry.workerCount());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.isFileNewer(targetFile,configFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(4,util.countFilesInDirectory(targetDir));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEqualsIgnoreEOL(configFile,targetFile,null));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetDir.list().length>0);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.length()>0);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(4,targetDir.listFiles().length);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(2,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(expectedDockerfileLines.size()>0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals("STR",dockerfileLines.get(1));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(!dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame("STR",dockerfileLines.get(0));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.startsWith(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(0,actual.length());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.matches("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(Constants.WHITE,runtime(cm).getcolor('b'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals((short)0,runtime(cm).getcolor('c'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('d')!=0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(runtime(cm).getcolor('e')<0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(runtime(cm).getMap());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotSame(Constants.NOSUB,colorDescs.get(0).sub);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(65536,colorDescs.get(0).getNChars());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(null,compiler);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(colorDescs.size()==1);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(Collections.singletonList(curframe),createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	???;	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.size()==1);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	???;	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(0,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals("STR",((TextFrame)createdFrame.get(0)).getPayloadData().toString());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(curframe,createdFrame.get(0));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(testUrl));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertSame(testSourceUrl,sourceUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl.toUpperCase());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponseinstanceofErrorResponse);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(HttpStatus.BAD_REQUEST,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(handshakeResponse.isSuccess());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(HttpStatus.OK,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNull(handshakeResponse.getBody());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals("STR",handshakeResponse.getMessage());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotSame(HttpStatus.FORBIDDEN,handshakeResponse.getStatus());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse.getTimestamp()>0);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(handshakeResponse.isClosed());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR").toString().equals("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR")==null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().allMatch(doc->doc.field("STR")!=null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,FOCAL.readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(bytes);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(1,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0,OVarIntSerializer.write(bytes,16238));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset!=0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(8,FOCAL.readAsLong(bytes)+1);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(100,OVarIntSerializer.write(bytes,16238));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset<100);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotNull(getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals(expectedValue,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals(unexpectedValue,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	???;	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotSame(someObject,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertFalse(getProperty("STR").isEmpty());	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals(null,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertTrue(getProperty("STR")!=null);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertTrue(getProperty("STR").startsWith("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotSame(anotherObject,getProperty("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertSame(OType.BINARY,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.DATE,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertFalse(doc.fieldType("STR")==OType.STRING);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertTrue(doc.fieldType("STR")!=OType.LINK);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	???;	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(element->element.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(element->element.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(element->element.getProperty("STR").endsWith("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,result.stream().count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().anyMatch(element->element.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().allMatch(element->element.getPropertyNames().contains("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().anyMatch(element->element.getProperty("STR")!=null));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(0,result.stream().filter(element->element.getProperty("STR")!=null).count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,result.stream().map(element->element.getProperty("STR")).distinct().count());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	1
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals("STR",dbImp.getMetadata().getSchema().getClass("STR").getName());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(dbImp.getMetadata().getSchema().existsClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull(dbImp.getMetadata().getSchema().getClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(0,dbImp.getMetadata().getSchema().getClass("STR").getClusterSelection().size());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(1,dbImp.getMetadata().getSchema().getClass("STR").getClusterSelection().size());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.getMetadata().getSchema().getClass("STR").getClusterIds().size()>0);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	???;	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNull(dbImp.getMetadata().getSchema().getClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.getMetadata().getSchema().getClass("STR").isAbstract());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.stream().count()>0);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getExecutionPlan().isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.stream().anyMatch(item->item.getProperty("STR").equals("STR")));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.stream().allMatch(item->item.getProperty("STR").equals("STR")));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.getQueryStats().isEmpty());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.getQueryStats().get("STR").isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getQueryStats().containsKey("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.getQueryStats().get("STR").isEmpty());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys(),compositeKeyTwo.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.compareTo(compositeKeyTwo)==0);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne.hashCode(),compositeKeyTwo.hashCode());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyOne);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne,compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.equals(compositeKeyTwo));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne.toString(),compositeKeyTwo.toString());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.getKeys().containsAll(compositeKeyTwo.getKeys()));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne.getKeys(),compositeKeyTwo.getKeys());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(AppNanolets.iniParameter);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(AppNanolets.iniParameter.contains("STR"));	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(AppNanolets.iniParameter.startsWith("STR"));	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(AppNanolets.iniParameter.isEmpty());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals("STR",AppNanolets.iniParameter);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertSame("STR",AppNanolets.iniParameter);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame("STR",AppNanolets.iniParameter);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(10,AppNanolets.iniParameter.length());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(0,AppNanolets.iniParameter.indexOf("STR"));	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(AppNanolets.iniParameter.endsWith("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.hashCode());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().containsKey("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNull(routePrioritizer.getLastRouteAdded());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getSimpleName().contains("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame("STR",routePrioritizer.getSomeMethod());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.getPriorityThreshold());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),router.getNotImplementedHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notFoundHandler,notImplementedHandler);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(router.getNotFoundHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(router.getNotImplementedHandler(),notFoundHandler);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(router.getNotFoundHandler(),router.getNotImplementedHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(router.getNotFoundHandler().getClass(),router.getNotImplementedHandler().getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNull(router.getNotFoundHandler().getContentType());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	???;	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(null,exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause.getClass(),exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotSame(newRuntimeException(),exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage()==null);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(RuntimeException.class,exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	???;	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getCause().getClass().getSimpleName());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	1
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNull(exception.getCause());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals(0,exception.hashCode());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals(1,exception.getSuppressed().length);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotSame("STR",exception.getClass().getSimpleName());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getLocalizedMessage().isEmpty());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.toString().contains("STR"));	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(800,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(300,performanceStats.getIntervalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats.getTotalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStats.getIntervalLatencyAvgNanos());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalLatencyMaxNanos()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalLatency999PercentileNanos()>=MICROSECONDS.toNanos(100));	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStats.getIntervalLatency999PercentileNanos());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals(COORDINATOR_STRING,instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(instanceUnderTest.toString().startsWith("STR"));	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(instanceUnderTest.toString().contains("STR"+workerIndex));	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(!instanceUnderTest.toString().isEmpty());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotNull(instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",instanceUnderTest.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",instanceUnderTest.toString());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.stream().allMatch(m->m.getReturnType().equals(Void.TYPE)));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.stream().allMatch(m->m.getParameterCount()==0));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(Modifier.isPublic(method.getModifiers()));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.contains(null));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.stream().anyMatch(m->m.getParameterTypes().length>0));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(4,methodList.stream().filter(m->m.isAnnotationPresent(Teardown.class)).count());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals(0,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(10,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props.entrySet());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(propsinstanceofProperties);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotSame(0,props.entrySet().size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertSame(2,props.keySet().size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.containsValue("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(!environment.isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getBranch());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getName());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getJobId());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getEnvironment().containsKey("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getPullRequest());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(mojo.sourceEncoding.equalsIgnoreCase("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals("STR",moneyToStrPER100.convert(12.346));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(7.89));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(18.75));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(25.0).startsWith("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrPER100.convert(31.42).isEmpty());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(9.99));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals(42,moneyToStrPER100.convert(42.0).length());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(10,moneyToStrPER100.convert(36.99).length());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	???;	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame("STR",moneyToStrPER100.convert(123.45));	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(true,m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(false,m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(!m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(null,m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.hashCode()!=0);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,m.hashCode());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.hashCode()>0);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(System.identityHashCode(m),System.identityHashCode(null));	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(formas.size(),expectedSize);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.stream().anyMatch(forma->forma.getToken().equals("STR")));	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(formas.size(),0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(formas.size(),1);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>=0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(!formas.isEmpty()&&formas.size()>0);	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals(html?("STR"+value+"STR"):("STR"+quoted()+"STR"),newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(newMyClass().serialized().startsWith("STR")&&newMyClass().serialized().endsWith("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR"+quoted()+"STR",newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotNull(newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotSame("STR"+value+"STR",newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(newMyClass().serialized().contains("STR")||newMyClass().serialized().contains("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals(html?"STR"+value+"STR":"STR"+quoted()+"STR",newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR",newMyClass().serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertFalse(newMyClass().serialized().isEmpty());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals(html?value:quoted(),newMyClass().serialized());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",FOCAL.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertTrue(FOCAL.turn("STR","STR","STR").startsWith("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",FOCAL.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotNull(FOCAL.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.turn());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertTrue(FOCAL.turn("STR","STR","STR").contains("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals(21,FOCAL.turn("STR","STR","STR").length());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertFalse(FOCAL.turn("STR","STR").isEmpty());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.turn("STR","STR","STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(4,conns.size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(conns.containsKey("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(allConnections.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(allConnections.containsValue(someConnectionList));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(allConnections.get("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(allConnections.get("STR").isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(3,pool.getAll().size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(!allConnections.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(allConnections.containsKey("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(0,allConnections.size());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertSame("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals(1,s.map(str->1).getOrElseEval(()->0).intValue());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.map(str->str.startsWith("STR")).getOrElse(false));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.toString());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(expectedSize,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.contains(document));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(expectedList,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotSame(expectedList,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(expectedList,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().allMatch(doc->doc.field("STR")!=null));	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofCollection);	1
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertSame(1,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotSame(0,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	???;	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertTrue(resultinstanceofInteger);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(result,12);	1
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertFalse(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame(1,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertTrue(resultinstanceofString);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(0,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertSame(1,result);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals("STR",loadedHunt.getName());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,loadedHunt.getImageData());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(hunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(loadedHunt.getImageData().length>0);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(loadedHunt.getName().startsWith("STR"));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(savedHunt);	1
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(savedHunt.getId());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertFalse(loadedHunt.getName().isEmpty());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(sequence);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(name,sequence.getName());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(sequenceinstanceofOSequence);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(sequence.getStart()>=0);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotEquals(0,sequence.getIncrement());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(sequence.getStart());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotSame(previousSequence,sequence);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(sequence.getIncrement()>0);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(sequence.getCurrent()<sequence.getUpperLimit());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotSame(sequence.getType(),OSequence.SEQUENCE_TYPE.ORDERED);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(compositeKey.compareTo(anotherCompositeKey),0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(compositeKey.compareTo(anotherCompositeKey),1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotNull(compositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotNull(anotherCompositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertSame(compositeKey.getClass(),anotherCompositeKey.getClass());	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotSame(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(true,next.field("STR"));	1
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	???;	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(next.field("STR"),null);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(next.getClass().getName(),"STR");	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	???;	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(next.field("STR").getClass().getName(),"STR");	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(iFieldName.contains("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(this.isTrackingChanges());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(value==newValue);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getSize()>=MIN_SIZE);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(index);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(2,index.getClustersSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(rome,london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getClusterNames().contains("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(rome.containsField("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(-1,rome.getIdentity().getClusterPosition());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	???;	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(rome.containsField("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(3,db.countClass("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getIndexDefinitions());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(2,result.getIndexDefinitions().size());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getClass().getSimpleName().startsWith("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getClassName().equals("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getCollate());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getMultiValueDefinitionIndex()==-1);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertFalse(result.getIndexDefinitions().isEmpty());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getClass().getSimpleName().contains("STR"));	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(frame1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(32,mpeges.getFrameNo());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.data.remaining()>0);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,frame2);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(Arrays.equals(frame1,frame2));	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame1,frame2);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(buf.capacity()>=1024);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(mpegesinstanceofMPEGES);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertSame(f1.getFrameNo(),32);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	???;	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(copied.isEmpty());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.contains("STR"));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	???;	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list,null);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().startsWith("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().contains("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame(protocol0,newProtocol("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.copyInstance());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(Collections.<IExtension>emptyList(),newDraft_6455().getExtension());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getDrafts().contains(newDraft_6455()));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1337,server.getAddress().getPort());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDecoderThreadCount());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnectionsContainer().isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	???;	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(server);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotSame(draftCollection,server.getDrafts());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertFalse(server.getDrafts().isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getAddress().getAddress().isLoopbackAddress());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(String.format("STR",address[0])));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(-1,macAddress.toString().indexOf(STANDARD_SEPARATOR));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame(macAddress.toString(),newMacAddress(SOME_OTHER_ADDRESS).toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith(String.format("STR",address[0])));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(-1,macAddress.toString().lastIndexOf(STANDARD_SEPARATOR));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(result);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(resultinstanceofCommonEvent);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(result.getSomeSpecificMethod()!=null);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(expectedValue,actualValue);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(expectedValue,actualValue);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(result.isSomeConditionMet());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame(expectedObject,actualObject);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertArrayEquals(expectedArray,result.getArray());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNull(result);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertSame(expectedObject,actualObject);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(Collections.singletonList("STR"),OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).size()>0);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens));	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).isEmpty());	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(1,OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).size());	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(0,OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).size());	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(2,OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).size());	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).contains("STR"));	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).stream().anyMatch(token->token.contains("STR")));	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(Collections.singletonList("STR"),OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.getId().equals(actual.getId()));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(ID,actual.getId());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(actor,substatement.getActor());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotEquals(result,substatement.getResult());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(context,substatement.getContext());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(attachments,substatement.getAttachments());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(activityDefinition.getCorrectResponsesPattern());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(123.4));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(123.4));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(123.4));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(123.4));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(123.4));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(142.2));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(121.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(57.5));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(100.0));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(17.33));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(V_300D));	1
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(123.45));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(456.78));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrRUR.convert(789.12).startsWith("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrPER1000.convert(321.45));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(543.21).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(0,moneyToStrRURRUS.convert(1000.50).length());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(876.54));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame(1234L,moneyToStrEURRUS.convert(789.01).length());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUAH.convert(987.65).contains("STR"));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNull(this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	???;	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotEquals(null,this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(BatchPollProcessor.class,this.poller.getBatchPollProcessor().getClass());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(newBatchPollProcessor(),this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertSame(this.poller,this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(newBatchPollProcessor(),this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor()!=null);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotEquals(0,this.poller.getBatchPollProcessor().hashCode());	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNull(FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertTrue(Focal.getMimeTypeForFile("STR").startsWith("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotEquals("STR",FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertFalse(FOCAL.getMimeTypeForFile("STR")==null);	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotNull(FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotEquals("STR",FOCAL.getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotSame("STR",FOCAL.getMimeTypeForFile("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")&&sql.toString().contains("STR")&&sql.toString().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(-1,sql.toString().indexOf("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR")&&sql.toString().endsWith("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals(1,sql.toString().chars().filter(ch->ch=='e').count());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().matches("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")&&sql.toString().contains("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getPort()==1111);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getConnectionTimeout()>=0);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProperty("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals(0,btUrl.getConnectionNumber());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getOriginUrl().startsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getProperties().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(1,btUrl.getProtocol());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getUniqueKey());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props);	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props==null);	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotSame(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals(null,props);	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props.entrySet());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotSame(0,props.entrySet().size());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connectioninstanceofConnection);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getConnectTimeout()==1000);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,connectionManager.getTotalConnections());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,connectionManager.getConnectionCount());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(client.isReconnecting());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,connectionManager.getActiveConnections());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(client.isConnected());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(connection.isClosed());	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertEquals(time,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(map);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(channel.isActive());	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(result,map.get(key));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end>start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(end,start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(result!=null);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(-1L,ThreadLocalArriveTimeHolder.getAndClear(channel,1));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.contains(att));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotSame(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(attachments,substatement.getAttachments());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()>0);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(attachments.size(),actual.size()-1);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotEquals(attachments.size(),actual.size());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testTerminated	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotEquals(newVerb(),actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertSame("STR",createVerb("STR").getId());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotSame(Verbs.terminated(),Verbs.terminated());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertSame("STR",actual.getId());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotEquals(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(ODateHelper.getDateTimeFormatInstance().format(newDate()),prop.getDefaultValue());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().isValid());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved.getProperty("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsKey("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.getClassName());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(1,schema.getClasses().size());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(OType.DATE,prop.getType());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotEquals(0,saved.getVersion());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(!classA.areIndexed("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotSame(database,saved.getDatabase());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().contains(retrievedChild));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(child,retrievedChild);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().size()>0);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().startsWith("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(retrievedParent.getFriends().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getName().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals(1,retrievedParent.getFriends().size());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	???;	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR")==null);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(!item.getProperty("STR").isEmpty());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").contains("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",String.valueOf(item.getProperty("STR")));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(result);	1
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.equals("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.startsWith("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertFalse(currentValue.isEmpty());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals(0,currentValue.length());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals(3,currentValue.length());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.contains("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(19,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(deserializedValue>=19&&deserializedValue<=21);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotNull(embeddedListElementBytes);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(embeddedListFieldValue.size()>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(rootBytes.length>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(rootBytes.length>100);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(setValue2==(Integer)embeddedList.get(1));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals("STR",embeddedListElement.getPropertyNames().get(0));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(setValue,setValue2);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotSame(embeddedListElement,root);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(!docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.contains(null));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>10);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(5,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs.get(0));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.contains("STR")&&s.contains("STR")&&s.contains("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.startsWith("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.endsWith("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotNull(s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(37,s.length());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.isEmpty());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotEquals("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotSame("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.contains("STR")&&s.contains("STR")||s.contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains(expectedSvg));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals(expectedSvg,a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotNull(a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotSame(originalSvg,a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getWidth()>0);	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals(a.getWidth(),0);	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getUnit().endsWith("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals(a.getHeight(),0);	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getHeight()>=0);	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue(attrs(attr("STR","STR")).containsKey("STR"));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(attrs(attr("STR","STR")).containsKey("STR"));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	???;	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNull(attrs(attr("STR","STR")));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals(EXPECTED_VALUE,durationSeconds(INPUT_VALUE));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds(INPUT_VALUE)!=null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(Integer.valueOf(-1),durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(0,durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotSame(Integer.valueOf(0),durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>=0);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&!filterResult.isEmpty());	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.endsWith("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(0,filterResult.length());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(-1,filterResult.indexOf("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.isEmpty());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotEquals(2,fields.size());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(newDate(time),parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()<=System.currentTimeMillis());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(newTimestampParser(format));	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null&&parsed.getTime()==time);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(newDate(0),parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotSame(newTimestampParser(format).getClass(),TimestampParser.class);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertFalse(StringUtils.isBlank(String.valueOf(time)));	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(8,timestamp.length());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0);	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals("STR",newShippable(env()).getPullRequest());	1
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNull(newShippable(env()).getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotNull(newShippable(env()).getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertFalse("STR".equals(newShippable(env()).getPullRequest()));	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals("STR",newShippable(env()).getPullRequest()+"STR");	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertTrue(newShippable(env()).getPullRequest()!=null);	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotEquals("STR",newShippable(env()).getPullRequest()+"STR");	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals("STR","STR"+4567);	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotEquals("STR",newShippable(env()).getPullRequest()+"STR");	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotSame("STR",newShippable(env()).getPullRequest());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getScheme());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(-1,uri.getHost().indexOf("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.isAbsolute());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri.getFragment());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(uri.isOpaque());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals(-1,uri.getPort());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNull(uri.getQuery());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotSame(newURI("STR"),uri);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(8,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(-1,Arrays.binarySearch(res,(byte)'m'));	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(spsList,ppsList);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getProfile()==66);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsKey("STR")&&atts.containsValue(specificMethod));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedSize,atts.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(0,atts.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsValue(specificMethod));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedSize,0);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(originalMap,atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(originalMap,atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsKey("STR"));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(mockLogger,processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	???;	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(mockLogger,processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotSame(anotherLogger,processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(processor.getLog()==null);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotEquals(anotherLogger,processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(mockAttributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(mockAttributeInjector,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(mockObjectQueryPreparer,processor.getObjectQueryPreparer());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.startsWith("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.isEmpty());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame("STR",uuid);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result.getExecutionPlan());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(0,result.getQueryStats().getTotalRecords());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.getExecutionPlan().length());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotSame(0,result.getQueryStats().getExecutionTime());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().isEmpty());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(resultinstanceofOResultSet);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.getQueryStats().getTotalTime());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(!result.getExecutionPlan().isBlank());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotSame(0,result.getQueryStats().getExecutionTimeNano());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",extr.field("STR").field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	???;	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR").field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(res);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,extr.getVersion());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(res.length>0);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").field("STR").toString().startsWith("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,document.fields());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR").fieldNames().contains("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.containsField("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(0,qResult.size());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.getExecutionPlan().indexOf("STR")!=-1);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(1,qResult.stream().limit(1).count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.getDocument().containsKey("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult.getColumnNames());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.propertyCount());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(index);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.getMetadata().getSchema().getClass("STR").existsProperty("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,db.countClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(db.getMetadata().getIndexManager().getIndex("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(db.getTransaction().isActive());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,db.getClusterNames().size());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.getClusters().isEmpty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(db.getMetadata().getSchema().getClass("STR").existsProperty("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals(0,db.getMetadata().getSchema().getClass("STR").getProperty("STR").hashCode());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertFalse(manual.getSize()<0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(-1,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotSame(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()!=Long.MAX_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>Long.MIN_VALUE);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(focal.toString().contains("STR"));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals("STR",focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertFalse(focal.toString().isEmpty());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(!focal.toString().isEmpty());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals(0,focal.toString().length());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals(21,focal.toString().length());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals(10,focal.toString().indexOf("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotSame(0,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(cfgJson);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(cfgJson.contains("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(cfgJson.startsWith("STR"));	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100L,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()==100L);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0L,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.getOperationCount()<0L);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(0L,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>=0L);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(5.0,addState.getIntervalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(600.0,addState.getIntervalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getIntervalThroughput()>0.0);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals("STR",operation.getCommand());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame(null,promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(null,promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(driver);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame("STR",promise.getAnswer());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR").substring(0,"STR".length()));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR").toUpperCase());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals(5,config.getString("STR").length());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(!config.getString("STR").isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newActivity("STR"+ID)));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals("STR"+ID,actual.get(actual.size()-1).getId());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotSame(category,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected,contextActivities.getOther());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotEquals(grouping,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertArrayEquals(parent.toArray(),actual.toArray());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>0);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(expected==actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNull(actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(actualinstanceofScore);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
ResultTest	testSetScore	assertNotNull(actual);	assertFalse(someCondition);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNull(someObject);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertArrayEquals(expected.values().toArray(),actual.values().toArray());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual.getProperties());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(1,actual.size());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getResponseMessage().equals(RESPONSE_MESSAGE));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getAttachment());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotEquals(0,a.getXapiStatements().getStatements().size());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertSame(attachments,a.getAttachments());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(type,a.getAttachments().get(HASH).getType());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getAttachments().containsKey(HASH));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	???;	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNull(a.getXapiStatement().getVerb());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()!=0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(3,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(1,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(1,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(-1,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(history.size(),s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>-1);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(7,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(-1,s.getActualCost());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(ByteBuffer.wrap(message).array(),frame.getPayloadData().array());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(deflateExtension.getDeflater().finished());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(1,frame.getOpcode());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertFalse(deflateExtension.isClientNoContextTakeover());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(Opcode.TEXT,frame.getOpcode());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals("STR",newString(frame.getPayloadData().array()).trim());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().remaining()>0);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(annotation);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.startsWith("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR",value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertSame(Plog.class,annotation.annotationType());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(Object.class,annotation.annotationType());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR",value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals(10,value.length());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()>0);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source1);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1,source3);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.equals(source2));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1,source2);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.equals(source3));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertArrayEquals(source1.getName().toCharArray(),source2.getName().toCharArray());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.keySet().size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(propsinstanceofProperties);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	???;	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(!schemas.isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(XsdSchema.class,schemas.get(0).getClass());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().allMatch(schema->schemainstanceofXsdSchema));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().anyMatch(schema->schema.getVersion().equals("STR")));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(expectedNumberOfSchemas,schemas.size());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(EXPECTED,markup.markdown("STR"));	1
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(null,markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.markdown("STR").isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(EXPECTED_LENGTH,markup.markdown("STR").length());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(EXPECTED,markup.markdown("STR").length());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNull(markup.markdown("STR").trim());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased(),"STR");	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(Boolean.TRUE,conn.getTokenBased());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn.getTokenBased());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.getTokenBased());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(Boolean.FALSE,conn.getTokenBased());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNull(conn.getTokenBased());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getId()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotSame(server,conn.getToken());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(1,conn.getId());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove.size(),removedKeys.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToRemove,keysToAdd);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsValue(1));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(keysToRemove,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndexByKey);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get("STR"));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(keyType,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	???;	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(result==null);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.STRING,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.INTEGER,result[0]);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(iteminstanceofODocument);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	???;	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR").getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getIdentity().getTypeName());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getIdentity().isPersistent());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.isElement());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(stringSerializer.getObjectSize(OBJECT)+5,buffer.remaining());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.limit()>=stringSerializer.getObjectSize(OBJECT)+5);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(walChanges);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(data.length>0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(stringSerializer.getObjectSize(OBJECT)+serializationOffset,buffer.capacity());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,stringSerializer.getObjectSize(OBJECT));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(OShortSerializer.SHORT_SIZE+9,stringSerializer.getObjectSize("STR")+4);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(stringSerializer.getObjectSize("STR"),stringSerializer.getObjectSize("STR"));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertArrayEquals(newbyte[10],newbyte[10]);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(stringSerializer.getObjectSize(OBJECT)>0);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1);	1
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(2,((ORecordLazySet)nest1.field("STR")).size());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(base1.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertSame(doc1,((ORecordLazySet)nest1.field("STR")).iterator().next());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals("STR",doc2.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(doc1,doc2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(nested.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base.containsField("STR"));	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(customer.getDefaultClusterId(),customerGeniusCluster);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>=0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotNull(customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(customer.getDefaultClusterId(),provider.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer.getDefaultClusterId(),knows.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertSame(customer.getDefaultClusterId(),provider.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(customer.getDefaultClusterId(),123);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer.getDefaultClusterId(),567);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(customer.getDefaultClusterId(),provider.getDefaultClusterId());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotEquals("STR",newJenkins(env()).getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotNull(newJenkins(env()).getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertTrue(newJenkins(env()).getBuildUrl().startsWith("STR"));	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotSame("STR",newJenkins(env()).getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertFalse(newJenkins(env()).getBuildUrl().isEmpty());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",newJenkins(env()).getBuildUrl());	1
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotEquals(null,newJenkins(env()).getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertTrue(newJenkins(env()).getBuildUrl().contains("STR"));	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotEquals("STR",newJenkins(env()).getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotSame("STR",newJenkins(env()).getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNull(serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.serviceName);	1
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals(0,Arrays.asList(serviceMock).size());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(mojoinstanceofCoverallsReportMojo);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.sourceEncoding);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.getLog());	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump(null));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump(newbyte[0]));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",hexdump("STR".getBytes()));	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(mockScheduler,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotSame(mockScheduler,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	???;	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertFalse(poller.getScheduler()==null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(poller.getScheduler()!=null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(mockScheduler.getClass(),poller.getScheduler().getClass());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	???;	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotEquals(mockScheduler.hashCode(),poller.getScheduler().hashCode());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotEquals(System.identityHashCode(mockScheduler),System.identityHashCode(poller.getScheduler()));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty(null));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isBlank(null));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(12,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()==21);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotNull(p);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(7,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()!=0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(15,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(25,p.getDistanceToGoal());	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertEquals("STR",simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR").equals("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotEquals("STR",simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertFalse(simulatorProperties.get("STR").isEmpty());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR").startsWith("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotSame("STR",simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotSame("STR",simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.get("STR").contains("STR"));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(connectTimeout,url.getConnectTimeout());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,client.getConnectedClients());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.isConnected());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.getPort()==2014);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(client.isReconnectSwitchEnabled());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,url.getUniqueKey().length());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getChannel().isRegistered());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(url.getHost());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(client.getConnectedClients()>0);	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertEquals(expectedInputStream,focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotEquals(null,focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(focal.fetchResource("STR",System.currentTimeMillis())==null);	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	???;	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotEquals(expectedInputStream,focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	???;	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotSame(existingResourceStream,focal.fetchResource("STR",System.currentTimeMillis()));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(false,util.isGeneratedConfigFile(newFile(configDirectory,"STR"),srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(util);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals(newFile("STR"),util.getFile());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(configDirectory,targetDir);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(targetDir.exists());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals(0,util.someValueMethod());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(Arrays.asList(targetDir.listFiles()).isEmpty());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.getFile().isFile());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().endsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,Integer.compare(comparison,0));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0||comparison<0||comparison>0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0&&comparison<=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=-1&&comparison<=1);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison>0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison<0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,Math.abs(comparison));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotEquals("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame("STR",actual);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(resinstanceofList);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	???;	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Objectobj1,Objectobj2);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,res.size());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertSame(helloClass.getClassLoader(),getClass().getClassLoader());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredFields().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(helloClass.getMethods().length==0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,helloClass.getDeclaredMethods().length);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.isRecognized());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.getBestWordform());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals("STR",stum.getBestWordform().getValue(AttributeNames.i_Lemma));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(!stum.isRecognized());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(0,stum.generateInflections().size());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotSame(0,stum.generateInflections().size());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.generateInflections().size()>0);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.generateInflections().size()!=0);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.generateInflections().size()>=1);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.generateInflections().size()>1);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.keySet().size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.isEmpty());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotSame(origMap,toMergeMap);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",Records.rec("STR","STR"));	1
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals(expected,Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(Records.rec("STR","STR").startsWith("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotNull(Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals(13,Records.rec("STR","STR").length());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertFalse(Records.rec("STR","STR").isEmpty());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",Records.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame(null,Records.rec("STR","STR"));	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(Arrays.hashCode(macAddress.address),macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotNull(macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotSame(Arrays.hashCode(macAddress.address),macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	???;	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	???;	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	???;	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	???;	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(false,multiKey.equals(newObject()));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newObject()));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(1,multiKey.keys.size());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(0,multiKey.hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotNull(multiKey);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotSame(multiKey,newOMultiKey(Collections.singletonList("STR")));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	???;	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(0,multiKey.keys.hashCode());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer.bytes);	1
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.offset==0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.copy().offset==0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.bytes);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(0,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotSame(bytesContainer,bytesContainer.copy());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.fitBytes().length<=bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(-1,bytesContainer.alloc(5));	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(expectedNumberOfDocuments,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.contains(expectedDocument));	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(expectedNumDocuments,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(expectedNumDocuments,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertSame(expectedListOfDocuments,results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(!results.isEmpty());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult.next());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(expectedValue,actualValue);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,db.getSize());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertArrayEquals(expectedArray,actualArray);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(db.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotSame(expectedObject,actualObject);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNull(qResult.getExecutionPlan());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertSame(expectedObject,actualObject);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(true,next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(execute.isEmpty());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue((boolean)next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue((boolean)next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	???;	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(40,(int)next.field("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertTrue(resultinstanceofMBeanAccessConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotEquals(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertEquals(MBeanAccessConnection.class,result.getClass());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertFalse((resultinstanceofJMXMBeanConnection));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotSame(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result.getAttributes());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotSame(result,newObject());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertEquals(0,result.getAttributes().size());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	???;	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals("STR",this.factory.getJmxServiceUrlFactory().getParameter());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(this.factory,this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(this.mockJmxServiceUrlFactory,this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory().getServiceUrl());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(100,this.factory.getJmxServiceUrlFactory().getPort());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory().getUrl().startsWith("STR"));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	???;	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotEquals("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.length()>0);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	???;	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(setters.isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotEquals(0,setters.size());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(setters.containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(objectQueryInfo.getAttributeSetters().isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo.getTarget());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(22L,target.getAttrInteger());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeList.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.attributeSetters.get("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeList.contains(newAttribute("STR",5)));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotEquals(null,objectName);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(3,attributeSetters.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNull(target.getAttrName());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotSame(this.target,newTestTarget());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeSetters.containsValue(TestTarget.class.getMethod("STR",int.class)));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(logger,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.poller.getLog());	1
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertSame(logger,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(anotherLogger,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertFalse(poller.getLog()==null);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(Logger.class,poller.getLog().getClass());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotEquals(null,poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(poller.getLog()!=null);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	???;	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(true,jsonEquals(first,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(false,jsonEquals(first,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(same,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(jsonEquals(first,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(first,first));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(jsonEquals(first,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(true,jsonEquals(same,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(different,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(jsonEquals(first,first));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(false,jsonEquals(same,different));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().equals(Collections.emptyList()));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.nodes().contains("STR"));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(0,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(5,graph.nodes().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(!graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(2,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.edges().isEmpty());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals("STR","STR");	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().size()>=2);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().size()==graph.nodes().size()-1);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.edges().contains(edge("STR","STR")));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(false,FOCAL);	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion(null,"STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(true,isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertEquals(true,Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().startsWith("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isEmpty());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals(0,draft_6455.toString().length());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().endsWith("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals(draft_6455.getExtension(),null);	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isBlank());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump(b.toByteArray()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump(null));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotNull(Focal.crossHatch());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	???;	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertTrue(Focal.crossHatch().getClass().getSimpleName().equals("STR"));	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotEquals(null,Focal.crossHatch());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertEquals(0,Focal.crossHatch().getSomeValue());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertTrue(Focal.crossHatch().toString().contains("STR"));	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertSame(CrossHatch.class,Focal.crossHatch().getClass());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotSame(CrossHatch.class,Focal.crossHatch().getClass());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotNull(Focal.crossHatch().toString());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertFalse(Focal.crossHatch().isNull());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").serialized());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").serialized().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals("STR",Label.markdown("STR").serialized());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(Label.markdown("STR").serialized());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(Label.markdown("STR").serialized().isEmpty());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotSame("STR",Label.markdown("STR").serialized());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals(0,Label.markdown("STR").value().length());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").value().startsWith("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(Label.markdown("STR").value().endsWith("STR"));	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	???;	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.headerSize>0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0x149B0,be.offset);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(5,bb.position());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(0x353,be.dataLen);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(startPosition==5);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	???;	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,be.dataOffset);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.wordforms);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.stream().anyMatch(wordform->wordform.getValue().equals("STR")));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals(1,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.stream().anyMatch(wordform->wordform.getProperty().equals("STR")));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotSame(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(!w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotSame(2,w.wordforms.size());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.find());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(6,matcher.start());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(6,matcher.end());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(-1,matcher.group().indexOf('\uD800'));	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(5,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher.pattern());	0
SmpTest	find	assertTrue(matcher.find());	assertNotSame(RePattern.compile("STR"),RePattern.compile("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(V_DOUBLE));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(V_ANOTHER_DOUBLE));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrPER1000.convert(25.0));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(35.0).startsWith("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrPER1000.convert(29.99).isEmpty());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(15.75));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(99.99).contains("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(42.50));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals(0,moneyToStrPER1000.convert(73.21).length());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrPER1000.convert(123.45).isEmpty());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(false,macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(!macAddress.isMulticast());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(true,!macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(true,macAddress.isMulticast());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(false,macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(!macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal()&&macAddress.isMulticast());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(4),squareRoot.apply(4),0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(pf.isDefinedAt(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(16),squareRoot.apply(16),0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(25),squareRoot.apply(25),0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(pf.apply(36));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(Math.sqrt(9),squareRoot.apply(8),0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(pf.isDefinedAt(36));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(2.0,squareRoot.apply(4),0);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNull(pf.apply(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Double.NaN,squareRoot.apply(-1),0);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	???;	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofCollection);	1
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(2,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result.get(0));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(0,result.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(result.contains(2));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.contains("STR"));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(2,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,result.getExecutionPlan().get().getDescription().length());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.stream().allMatch(entry->entry.getValue()!=null));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().get().getWarnings().isEmpty());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotSame(0,result.getColumnNames().length);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.getExecutionPlan().isPresent());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.getColumnNames().contains("STR"));	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(expectedValue,actualValue);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(0,db.countClass("STR"));	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().count()>0);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertArrayEquals(expectedArray,actualArray);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotSame(object1,object2);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNull(nullObject);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(db.existsCluster("STR"));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,offset));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChanges.hasChanges());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,0));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,walChanges.serializedSize());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(walChanges.hasChanges());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(ByteOrder.nativeOrder(),buffer.order());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertFalse(buffer.isReadOnly());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(resultinstanceofList);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(expectedValue,actualValue);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	???;	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(db);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(null,result);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.isMandatory());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(companyClass);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(nameProperty.isIndexed());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals(0,companyClass.getClusterForValidations());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(1,companyClass.getClusterForAttribute("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotSame(-1,nameProperty.hashCode());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(companyClassinstanceofOClass);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(0,companyClass.getCustomAttributes().size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals("STR",nameProperty.getDescription());	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.stream(result).allMatch(type->typeinstanceofOType));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>0);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	???;	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(0,result.length);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>1);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertSame(OType.INTEGER,result[0]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotSame(OType.STRING,result[1]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(types.contains(OType.STRING));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(classA.getProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(classA.existsProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(0,classA.countProperties());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(classA.declareProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	???;	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(1,classA.properties().size());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals("STR",classA.getProperty("STR").getName());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNull(classA.getProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(classA.getProperty("STR").getType());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(category.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(category,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(category.get(0),actual.get(0));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotSame(category,parent);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.size()>0);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected.get("STR"),actual.get("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,about.getExtensions());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(expected==actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(expected==actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected.hashCode(),actual.hashCode());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actualinstanceofURI);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,attachment.getUsageType());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertFalse(expected.equals(actual));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotEquals(expected.toString(),actual.toString());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertEquals(10,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertSame(props.getClass(),Properties.class);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertArrayEquals(expectedArray,props.keySet().toArray());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.getProperty("STR").equals("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotSame(Properties.class,props.getClass());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props.getProperty("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStreaminstanceofInputStream);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.endsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertEquals(0,keyStorePath.indexOf("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertFalse(resourceAsStream==null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(-1,keyStorePath.indexOf("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(passphrase.length>0);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(0,keyStorePath.length());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.contains("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotSame("STR",keyStorePath);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.REPLAYED_OTP);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals("STR",response.getOTP());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.BAD_SIGNATURE);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.equals("STR")||filterResult==null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame(null,filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult.trim());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(EXPECTED_RESULT,a.estimateSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,a.estimateSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>=0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(-1,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(4,a.a.size());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,a.a.size());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.computeSeekHeadSize()>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expectedValue,estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(idLength,offsetSizeInBytes)>=0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(idLength,offsetSizeInBytes)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(50,estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(-1,estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(idLength,offsetSizeInBytes)>100);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(200,estimeteSeekSize(idLength,offsetSizeInBytes));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(idLength,offsetSizeInBytes)<1000);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(4,buf1.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.isReadOnly());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf3.capacity()>buf2.capacity());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotSame(buf1,buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertFalse(buf1.equals(buf2));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.hasArray());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.hasRemaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertFalse(buf3.hasArray());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(result);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(result.getContent().contains("STR"));	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertEquals("STR",result.getFileName());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotEquals("STR",result.getMD5());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(result.getMD5().startsWith("STR"));	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotSame(sourceLoader.load("STR"),sourceLoader.load("STR"));	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(result.getContent().isEmpty());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotEquals(0,result.getContent().length());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(result.getFileName().endsWith("STR"));	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(agentIndex,getAddressIndex(),"STR");	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(workerIndex,getAddressIndex(),"STR");	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(addressLevel==AGENT||addressLevel==WORKER);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(addressLevel==AGENT||addressLevel==WORKER||addressLevel==COORDINATOR);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals(-1,getAddressIndex(),"STR");	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertFalse(addressLevel!=AGENT&&addressLevel!=WORKER);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotNull(exceptionThrown(()->getAddressIndex()));	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals("STR",exceptionThrown(()->getAddressIndex()).getMessage());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals("STR",exceptionThrown(()->getAddressIndex()).getMessage());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotSame(agentIndex,workerIndex);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(cm.getConnectionPool("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertSame(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(5,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertFalse(cm.count("STR")<0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(cm.count("STR"),-1);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals(newFile(parent,"STR"),file);	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertFalse(file.isDirectory());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(0,file.length());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotSame(parent,file.getParentFile());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.canRead());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals("STR",file.toURI().toString());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.isFile());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertSame(parent,file.getParentFile().getParentFile());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.getFieldNames().contains("STR")));	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.size()==0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()!=0);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.size(),keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(propertyIndexByKey);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndexByValue);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertSame(mapToTest.get("STR"),2);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndexByValue,propertyIndexByKey);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	???;	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(coll,extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(coll.size()==extr.field("STR").size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertFalse(extr.field("STR").isEmpty());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertSame(coll,extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(coll.size(),extr.field("STR").size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(extr.field("STR").contains(map));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(coll.get(0).get("STR"),extr.field("STR").get(0).get("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(coll.get(0).get("STR").equals(extr.field("STR").get(0).get("STR")));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotSame(coll,extr.field("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)>=0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(db.getClusterById(db.getClusterIdByName(cluster)));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals("STR",db.getClusterNameById(db.getClusterIdByName(cluster)));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-1,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals(1,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)!=-1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-2,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(-1,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(0,db.getClusterIdByName(cluster));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(operations.size(),request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().containsAll(operations));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(operations,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(request.getOperations().isEmpty());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertArrayEquals(operations.toArray(),request.getOperations().toArray());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()>0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations.size(),request.getOperations().size());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNull(result);	1
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(null,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertTrue(resultinstanceofObject);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotEquals(newObject(),result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertSame(expectedObject,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertFalse(result.equals("STR"));	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotSame(expectedObject,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	???;	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertFalse(result==null);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(10,pushRequest.getMonitorId());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequest.getEvents());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(channelinstanceofMockChannel);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(0,pushRequest.getEvents().size());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getStatus()==OLiveQueryPushRequest.END);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequestRead);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotSame(pushRequest,pushRequestRead);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(channel.isClosed());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getEvents().isEmpty());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(3,pushRequest.getEvents().size());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getFriend()!=null);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getFriend().getName().equals(ob2.getName()));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getFriend().getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob1.getFriend());	1
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNull(ob1.getFriend().getFriend());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(false,executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotSame(null,executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(5,executor.hashCode());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNull(server);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(connectioninstanceofOClientConnection);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(1,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(0,executor.getExecutionCount());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertEquals(false,database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(true,database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotSame(true,database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotNull(database.existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(0,database.getClasses().size());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getClasses().containsKey("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	1
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	1
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals("STR",instance.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals("STR",instance.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(instance.toString().contains("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotNull(instance.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals("STR",instance.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertFalse(instance.toString().isEmpty());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotSame("STR",instance.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(instance.toString().length()>0);	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(instance.toString().startsWith("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals("STR",instance.toString());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(!result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(4,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotSame(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR","STR","STR")));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(4,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR","STR","STR")));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals("STR",jco.getTarget());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(expectedYaml,actualYaml);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").endsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(21,config.toYaml("STR").split("STR").length);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").matches("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals(-1,config.toYaml("STR").indexOf("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.isSolution());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(3,a.getPuzzle().getBlank());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getActualCost(),b.getActualCost());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.getActualCost()<=10);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(b.getBranches().isEmpty());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getHistory(),b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(4,b.getBranches().size());	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,focal.readIntraChromaPredMode(m,0,MBType.INTRA,MBType.INTRA,true,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(2,focal.readIntraChromaPredMode(m,0,MBType.SKIP,MBType.INTRA,false,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(focal.readIntraChromaPredMode(m,0,MBType.INTRA,MBType.INTRA,true,true)>=0&&focal.readIntraChromaPredMode(m,0,MBType.INTRA,MBType.INTRA,true,true)<=3);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(focal.readIntraChromaPredMode(m,0,MBType.INTRA,MBType.P_16x8,true,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertFalse(focal.readIntraChromaPredMode(m,0,MBType.P_8x8,MBType.P_16x8,false,false)==3);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,focal.readIntraChromaPredMode(m,0,MBType.P_16x8,MBType.INTRA,true,false));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(3,focal.readIntraChromaPredMode(m,0,MBType.P_16x8,MBType.P_16x8,true,false));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotSame(1,focal.readIntraChromaPredMode(m,0,MBType.P_8x8,MBType.P_16x8,true,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	???;	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertSame(0,focal.readIntraChromaPredMode(m,0,MBType.P_16x8,MBType.INTRA,true,false));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual,"STR");	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals(null,actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.getId());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotSame(Verbs.createVerb("STR"),actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotEquals(null,actual.getDisplay());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(!actual.getDisplay().isEmpty());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.serialize());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertFalse(actual.getDisplay().containsValue("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertTrue(result==null);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertEquals(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotEquals(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertTrue(resultinstanceofJMXMBeanConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotSame(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertFalse(resultinstanceofSomeOtherClass);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertSame(someExpectedObject,actualObject);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertFalse(result==expectedResult);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getObjectName().toString());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().contains(TEST_ONAME_STR002B));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeSetters());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotEquals(0,result.getAttributeSetters().size());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	???;	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget003,result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getObject());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().startsWith("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().endsWith("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().matches("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	???;	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(expectedSize,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.stream().allMatch(schema->schemainstanceofXsdSchema));	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(parser.getUnsolvedReferences().findFirst().isPresent());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser.getResultXsdSchemas().findFirst().orElse(null));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(expectedSize,schemas.stream().filter(schema->schema.getTargetNamespace().isPresent()).count());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().anyMatch(schema->schema.getVersion().isPresent()));	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(parser.getUnsolvedReferences().anyMatch(reference->reference.getRef().isPresent()));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(expectedSize*2,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().noneMatch(schema->schema.getFilePath().isEmpty()));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(expectedSize,schemas.stream().mapToLong(schema->schema.getNamespaces().size()).sum());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(FOCAL.stream(Collections.emptyIterator()).collect(Collectors.toList()));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,FOCAL.stream(Collections.emptyIterator()).count());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(Collections.emptyIterator()).findFirst().isEmpty());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(Collections.emptyIterator()).isParallel()==false);	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(FOCAL.stream(Collections.emptyIterator()).spliterator().hasCharacteristics(Spliterator.CONCURRENT));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,FOCAL.stream(Collections.emptyIterator()).spliterator().characteristics());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(0,FOCAL.stream(Collections.emptyIterator()).spliterator().estimateSize());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(FOCAL.stream(Collections.emptyIterator()).isParallel());	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(Collections.emptyIterator()).noneMatch(element->true));	0
IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(FOCAL.stream(Collections.emptyIterator()).allMatch(Objects::isNull));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0("STR","STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR",null));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainerinstanceofTestContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",test.getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(1,testContext.getTestThreadId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals("STR",test.getLogger().getDelegate());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	???;	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getGivenTestInstance());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	???;	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(testContext,testContainer.getTestContext());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainerinstanceofObject);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(3,result.size());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(result.containsAll(Arrays.asList(v1,v5,v6)));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(result);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(result.isEmpty());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(0,result.size());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(2,result.get(0).getData());	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(v10,result.get(1));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(result.indexOf(v5)>=0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertSame(v1,result.get(0));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(result.contains(null));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(expectedNumberOfRecordsUpdated,result.getUpdateCount());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(result);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(expectedValue,actualValue);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals(unexpectedValue,actualValue);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNull(someObject);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(database.getTransaction().isActive());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals("STR",doc1.field("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(klass.declaredProperties().size()==1);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR").isEmpty());	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").contains("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").startsWith("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").endsWith("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").length()>0);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	1
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.getMultiValueChangeEvents().isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine.getMultiValueChangeEvents());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,timeLine.getMultiValueChangeEvents().size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertSame(subObjects,document.field("objects"))`;	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,subObjects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	???;	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(objects.size(),0);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNull(nestedDoc.field("STR"));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	???;	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(-1,qResult.get(0).field("STR").toString().indexOf("STR"));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->"STR".equals(doc.field("STR"))));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(containsExpectedName);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(pictureHbd.getPlaneData(0),resultHbd.getPlaneData(0));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(ColorSpace.YUV422,resultHbd.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(64,resultHbd.getWidth());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(Arrays.equals(pictureHbd.getPlaneData(1),resultHbd.getPlaneData(1)));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(resultHbd);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(pictureHbd,resultHbd);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(picture.getWidth(),resultHbd.getHeight());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(3,resultHbd.getPlaneData().length);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(picture.getColor(),resultHbd.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(resultHbd.getBitDepth()>8);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(!result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	???;	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals(Paths.get("STR"),testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(Paths.get("STR"),testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().contains("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(Paths.get("STR"),testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().startsWith("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir().toString().endsWith("STR"));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(null,testCore.warehouseDir());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals(null,filterResult);	1
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterResult.endsWith("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertFalse(filterResult.isEmpty());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame(url,filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertFalse(filterResult.equals("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata.getMd());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.getMd().isEmpty());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.getMd().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(0,metadata.getMd().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNull(metadata.getMd().get("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.getMd().containsKey("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(5,metadata.getMd().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.getMd().containsValue("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertSame(0,metadata.getMd().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.getMd().isEmpty());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals(0,vairāki.getWordforms().size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(0,vairāki.getWordforms().size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotSame(5,vairāki.getWordforms().size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.getWordforms().size()>0);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(null,vairāki.getBestWordform());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.getWordforms().contains(specificWordform));	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(expectedSize,vairāki.getWordforms().size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized());	1
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals(0,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(5,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNull(nopūzdamās.getToken());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().contains("STR"));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().startsWith("STR"));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.getToken().endsWith("STR"));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals("STR",nopūzdamās.getToken());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertEquals(1,riebties.getWordforms().size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(rieztas.getCorrectWordform());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.getWordforms().isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,riebties.getWordforms().size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.getWordforms().size()>0);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotSame(0,riebties.getWordforms().size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(rieztas.getWordforms().size()==1);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(!rieztas.getWordforms().isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(rieztas.getWordforms().isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(MORE,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotEquals("STR",actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotEquals("STR",actual.getId());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getDisplay().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotSame(expected,actual);	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getDisplay().get("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNull(actual.serialize());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(MBOX,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(getBuildUrl().startsWith("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotNull(getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(getBuildUrl().contains("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotEquals("STR",getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals(63,getBuildUrl().length());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertFalse(getBuildUrl().isEmpty());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(getBuildUrl().contains("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(getBuildUrl().endsWith(getProperty("STR")));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(getBuildUrl().matches("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals(false,StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertEquals(false,StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals("STR",StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNull(StringUtils.isNotEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNotEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNotEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotNull(StringUtils.isNotEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNotBlank("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(newDeflater(),deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	???;	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.toString().contains("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(0,deflateExtension.hashCode());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getClass().getSimpleName().startsWith("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotSame(newPerMessageDeflateExtension(),deflateExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.toString());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtensioninstanceofCompressionExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.isClientInitiated());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll(poolKey).size());	1
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).containsAll(expectedConnections));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).stream().allMatch(conn->conn.getState().equals(ConnectionState.CONNECTED)));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>=3);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(null,cm.getAll(poolKey));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	1
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().startsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals("STR",node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(newMultiPathNode(nodeWithPath("STR")),node);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(3,node.getPath().split("STR").length);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals("STR",node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.length()>0);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertFalse(resultPublicId.isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId.length(),resultPublicId.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testOtp,resultPublicId);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertSame(tempTextFile.getParentFile(),configFile.getParentFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNull(util.getMethodFromOtherClass());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(0,tempTextFile.length());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(d.after(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(0,calParsed.getTimeInMillis()%1000);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals(cal.getTimeInMillis(),calParsed.getTimeInMillis());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(d.getTime()>System.currentTimeMillis());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertFalse(d.before(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals("STR",newSimpleDateFormat("STR").format(d));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotSame(calParsed,cal);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(d.getTime()==cal.getTime().getTime());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(expectedSize,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")||doc.field("STR").equals("STR")));	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.stream().allMatch(doc->doc.field("STR").equals("STR")||doc.field("STR").equals("STR")));	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	1
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(db.query("STR").stream().noneMatch(r->r.getProperty("STR").equals("STR")));	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>=0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0L,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count-1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db.query("STR").stream().findAny().orElse(null));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	???;	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	1
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classLinked,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(classA==prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(prop.getLinkedClass().getName(),classA.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classLinked.getName(),prop.getLinkedClass().getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(!classA.getName().equals(prop.getLinkedClass().getName()));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA,prop.getLinkedClass().getSuperClass());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(1,buffer.position());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.hasRemaining());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(rid,ORecordId.PERSISTENT_SIZE);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotEquals(0,buffer.remaining());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size+1,buffer.capacity());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.isDirect());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(buffer.array());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.capacity()>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.limit()>=size);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.hasArray());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(results.stream().allMatch(doc->doc.containsField("STR")));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(6,results.get(0).getPropertyNames().size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(results.stream().anyMatch(doc->doc.containsField("STR")));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(26,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.size()==0);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results.get(0).field("STR"));	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotNull(defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals(0,defaultExtension.getProvidedExtensionAsClient().length());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(defaultExtension.getProvidedExtensionAsClient().isBlank());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals(null,defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().equals("STR"));	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame(defaultExtension.getProvidedExtensionAsClient(),defaultExtension.getProvidedExtensionAsServer());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension0));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.getClass().equals(defaultExtension1.getClass()));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.toString(),defaultExtension1.toString());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(0,defaultExtension0.isFrameValid(null));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	???;	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.acceptProvidedExtensionAsClient("STR"));	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(result);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(resultinstanceofCommonEvent);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(null,result.getHeaderField("STR"));	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertEquals("STR",result.getVendor());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,result.getExtensions().size());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(result.getHeaderField("STR").startsWith("STR"));	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertEquals(1,result.getVersion());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(result.getHeaderField("STR").equals("STR"));	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(result.getExtensions().isEmpty());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(result.getHeaderField("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getHeader());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getHeader().get("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getHeader().containsKey("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals("STR",event.getHeader().get("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getHeader().get("STR").matches("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotSame(parser,event);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertSame(true,event.getHeader().containsKey("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getExtension());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getExtension().isEmpty());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level==Logger.Level.DEBUG);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.level.toString());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.ERROR,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotSame(Logger.Level.INFO,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level==Logger.Level.ERROR);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNull(config.getKeys());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(config.getKeys().isEmpty());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(5000,config.getInteger(Keys.CUCUMBERPRO_CONNECTION_TIMEOUT));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	1
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.level==Logger.Level.INFO);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.ERROR,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(Logger.Level.DEBUG,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(Logger.Level.WARN,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(Logger.Level.INFO,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.level!=Logger.Level.WARN);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.level==Logger.Level.DEBUG);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals("STR",config.getChild(Keys.CUCUMBERPRO_URL).getString());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals(null,actual);	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.getId());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.createVerb("STR"),actual);	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(newVerb("STR"),actual);	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals("STR",actual.toString());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual.serialize());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(actual.contains(s));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(actual.size()>0);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotSame(expected,actual);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(42,parseBuf);	1
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBufinstanceofInteger);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf==42);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	???;	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(ByteBuffer.wrap("STR".getBytes()),ByteBuffer.wrap("STR".getBytes()));	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertFalse(parseBuf<0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(42,parseBuf);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.isOk());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.getH().startsWith("STR"));	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getT());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertFalse(response.getSessioncounter()<0);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals("STR",response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.getSessionuse()>0);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals("STR",response.getOtp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getKeyValueMap());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",RouterNanoHTTPD.uriToString("STR","STR","STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",RouterNanoHTTPD.uriToString("STR","STR","STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",RouterNanoHTTPD.uriToString("STR","STR","STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",RouterNanoHTTPD.uriToString("STR","STR",null));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(RouterNanoHTTPD.uriToString("STR","STR","STR").contains("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(0,RouterNanoHTTPD.uriToString("STR","STR","STR").length());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(RouterNanoHTTPD.uriToString("STR","STR","STR").startsWith("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(RouterNanoHTTPD.uriToString("STR","STR","STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(RouterNanoHTTPD.uriToString("STR","STR","STR").isEmpty());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(RouterNanoHTTPD.uriToString("STR","STR","STR").endsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",getDigestSha1(content));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(robotsTxt.getBytes(StandardCharsets.UTF_8),"STR".getBytes(StandardCharsets.UTF_8));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(Arrays.equals(content,"STR".getBytes(StandardCharsets.UTF_8)));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(robotsTxt,"STR");	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(content);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(content.length>0);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(robotsTxt.length(),19);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(nonURI,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertSame(nonURI,testSourceUrl.toString());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,testSourceUrl.toString());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals(CIRCLE_NAME,objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertTrue("STR".equals(objectReturned.getName()));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotNull(objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotEquals("STR",objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotSame("STR",objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotEquals(null,objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertTrue(!objectReturned.getName().isEmpty());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertSame("STR",objectReturned.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertFalse(objectReturned.getName().contains("STR"));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotSame(objectReturned.getName(),"STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher);	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,"STR".indexOf("STR"));	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.matches());	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find(5));	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotSame("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse("STR".isEmpty());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNull("STR");	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertEquals(expectedOutput,markup.markdown(inputText));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotNull(markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotEquals("STR",markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").endsWith("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").contains("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").startsWith("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertEquals(14,markup.markdown("STR").length());	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertFalse(markup.markdown("STR").isEmpty());	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotEquals("STR",markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").contains("STR"));	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertEquals(MapAttributes.class,attrs.getClass());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertTrue(attrsinstanceofMapAttributes);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotNull(attrs);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertTrue(as.isEmpty());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertTrue(as.size()>0);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotNull(as.entrySet());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertTrue(as.containsKey("STR"));	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertEquals(0,as.size());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotEquals(0,as.size());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertEquals(Attributes.class,as.getClass());	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotNull(result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().anyMatch(doc->doc.getField("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertEquals(26,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(5,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertEquals(expectedValue,actualValue);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(expectedList,qResult);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(5,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>=0&&result<=15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotNull(result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(inputStream,is);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(!(result<0));	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(-1,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>0);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(15,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(emptyStream,is);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.add(123));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.add(456)>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(789));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array.add(999));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(111));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(222));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.add(333)>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(1,array.add(444));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(555));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.add(666)>=0);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(3,result.stream().count());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,result.toArray().length);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasContent());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotSame(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNull(result.getColumnMetadata());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,result.getPropertyNames().size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	???;	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(mapResult);	1
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.equals(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(mapResultinstanceofObject);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(multiKey.hashCode(),anotherMultiKey.hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKey.equals(newObject()));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(multiKey,anotherMultiKey);	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(expectedBooleanValue,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotNull(handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotEquals(initialBooleanValue,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotSame(expected,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotSame(expectedObject,handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertSame(expectedObject,handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotEquals(expected,handler.hasInitContainer(builder,"STR"));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(Arrays.asList(newTestNamed("STR"),newTestNamed("STR")),result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.contains(newTestNamed("STR"))&&result.contains(newTestNamed("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.size()>0);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(0,result.size());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertSame(data.get(0),result.get(0));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data.get(1),result.get(1));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().allMatch(e->einstanceofTestNamed));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals("STR",System.getProperty(Configs.CONN_RECONNECT_SWITCH));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1!=null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_RECONNECT_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_MONITOR_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals("STR",System.getProperty(Configs.CONN_MONITOR_SWITCH));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1==client2);	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null));	1
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	???;	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(0,m.markdown("STR").length());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotSame("STR",m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertFalse(m.markdown("STR").isEmpty());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(expected==actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotNull(actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertEquals(Float.valueOf(expected),Float.valueOf(actual));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertSame(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertEquals(Math.round(expected),Math.round(actual));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(Math.abs(expected-actual)<0.0001);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotSame(expected,Double.valueOf(actual));	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertEquals(0,verb.getDisplay().size());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotEquals("STR",verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(verb.toString().contains("STR"));	0
VerbTest	testVerb	assertNotNull(verb);	assertFalse(verb.toString().isEmpty());	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(verb.toString().startsWith("STR"));	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(verb,newVerb());	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(verb.toString().contains("STR"));	0
VerbTest	testVerb	assertNotNull(verb);	assertNull(verb.serialize());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(verb.getDisplay(),newHashMap<String,String>()->{ });	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body);	1
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(0,body.length());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.startsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.size()==3);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNull(properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.stringPropertyNames().contains("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(!properties.isEmpty());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",instanceUnderTest.getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(instanceUnderTest.getBuildUrl().startsWith("STR"));	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotNull(instanceUnderTest.getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotEquals("STR",instanceUnderTest.getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(instanceUnderTest.getBuildUrl().contains("STR"));	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotSame("STR",instanceUnderTest.getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(!instanceUnderTest.getBuildUrl().isEmpty());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertFalse(instanceUnderTest.getBuildUrl().isEmpty());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotEquals(null,instanceUnderTest.getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(instanceUnderTest.getBuildUrl().endsWith("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(exists(Arrays.asList("STR","STR","STR"),len1));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(exists(Arrays.asList("STR","STR","STR"),len1));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertNotNull(headers.get("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertFalse(headers.isEmpty());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertTrue(headers.containsKey("STR"));	1
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertTrue(headers.containsValue(Collections.singletonList(extract(tokenType))));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertEquals(1,headers.size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertNotNull(headers);	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertNotSame(0,headers.size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertFalse(headers.containsKey("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertNotEquals(0,headers.size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue(headers.containsKey("STR"));	assertTrue(headers.containsValue(Collections.singletonList("STR")));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getHistory(),b.getHistory());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a.getActualCost(),b.getActualCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getHistory().size(),b.getHistory().size());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(Arrays.equals(a.getPuzzle().getState(),b.getPuzzle().getState()));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.isSolution()&&b.isSolution());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.getEstimatedCost()<=100&&b.getEstimatedCost()<=100);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle().hashCode(),b.getPuzzle().hashCode());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(a.hashCode(),b.hashCode());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(this.injector.getLog());	1
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(mockLogger,this.injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.attributeList.size()>0);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.attributeList.contains(newAttribute("STR","STR")));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(this.attributeSetters.isEmpty());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(this.objectName,newObjectName("STR"));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(this.attributeList.stream().anyMatch(attr->"STR".equals(attr.getName())));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(TestTarget.class,target.getClass());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals("STR",target.methodReturningString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").where("STR").toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals(1,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().indexOf("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	1
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertTrue(sql.toString().startsWith("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotEquals(0,sql.toString().length());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals("STR",sql.toString());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertTrue(sql.toString().endsWith("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotEquals(-1,sql.toString().indexOf("STR"));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().allMatch(worker->worker.getWorkerType().equals("STR")));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()>0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result.get(0).getParameters());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.stream().anyMatch(worker->worker.getWorkerType().equals("STR")));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().noneMatch(worker->worker.getWorkerType().equals("STR")));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()<=list.size());	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(true,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>=OTP_MIN_LEN&&otp.length()<=OTP_MAX_LEN);	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat("STR"));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat("STR"));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(YubicoClient.isValidOTPFormat("STR"));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat("STR"));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals(0,crap.getWordforms().size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.isRecognized());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(0,crap.getWordforms().size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.getWordforms().isEmpty());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(null,crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(crap.getWordforms().isEmpty());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.getCorrectWordform()!=null);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(0,crap.getWordforms().size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals(1,crap.getWordforms().size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,result.size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,result.size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(result.containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",result.get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(result.get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.containsValue("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",result.get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.containsValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	???;	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(2,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.isEmpty());	0