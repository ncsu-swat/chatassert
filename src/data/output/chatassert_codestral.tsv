OracleID	ClassName	TestName	TrueOracle	GenOracle	Correct
0	adlnet/jxapi ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(activityProfile);	0
0	// ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
0	// JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotNull(this.poller.getObjectQueryPreparer());	0
0	trung/InMemoryJavaCompiler InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(res);	0
/	// InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
/	// InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	"assertNotNull(helloClass.getMethod(""STR""));"	0
0	// DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
0	// LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNull(resource);	0
/	// LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNull(fetchResource(""guru/nidi/loader"",someTimestamp))`;"	0
/	// LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNotNull(fetchResource(""guru/nidi/loader"",someTimestamp))```;"	0
0	// MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.getBestWordform());	0
0	// SimulatorPropertiesTest	testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertTrue(simulatorProperties.containsKey(""STR""));"	0
/	// SimulatorPropertiesTest	testLoad_justKey	"assertTrue(simulatorProperties.get(""STR"").isEmpty());"	"assertNotNull(simulatorProperties.get(""STR""));"	0
0	fabric8io/fabric8-maven-plugin MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected.entrySet(),origMap.entrySet());	0
0	// MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
/	// MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(expected.entrySet().containsAll(origMap.entrySet()));	0
/	// MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.keySet().containsAll(expected.keySet()));	0
/	// MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.keySet().retainAll(expected.keySet()));	0
0	// StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero(null));	0
1	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertFalse(p.isSolved());	0
0	nidi3/graphviz-java RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	1
0	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").startsWith(""STR""));"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").matches(""STR""));"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").contains(""STR""));"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").endsWith(""STR""));"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").matches(""STR""));"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertTrue(Records.rec(""STR"",""STR"").indexOf(""STR"")==0);"	0
/	// RecordsTest	tagRec	"assertEquals(""STR"",Records.rec(""STR"",""STR""));"	"assertFalse(Records.rec(""STR"",""STR"").isEmpty());"	0
0	// CommUtilTest	testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	1
/	// CommUtilTest	testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	1
/	// CommUtilTest	testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	1
/	// CommUtilTest	testHex	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	"assertEquals(""STR"",CommUtil.hexdump(""STR"".getBytes()));"	1
0	// MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
1	// MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
1	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",serviceMock.getJobId());"	0
/	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	assertEquals(true,serviceMock.isSelected());	0
1	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",mojo.serviceName);"	1
/	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",mojo.sourceEncoding);"	0
/	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",mojo.serviceName);"	1
/	// EnvironmentTest	testSetupWithIncompleteJob	"assertEquals(""STR"",mojo.serviceName);"	assertNotNull(mojo.getLog());	0
0	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.isFine());	0
/	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(url,connection.getUrl());	0
/	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
0	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	1
/	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(0,serverDisConnectProcessor.getDisConnectTimes());	0
/	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	1
/	// ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,url.getConnectTimeout());	0
0	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
0	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn.getToken());	0
/	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getToken()!=null);	0
/	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(true,conn.getTokenBased());	0
/	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getToken().getIsVerified());	0
/	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(Boolean.TRUE,conn.getTokenBased());	0
/	// OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(tokenBytes,conn.getTokenBytes());	0
1	orientechnologies/orientdb OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
1	// OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(removedKeys,keysToRemove);	0
/	// OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	0
/	// OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(12));	0
/	// OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	0
2	// OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
3	// RemoteQuerySupportTest	testQueryEmbedded	"assertNotNull(item.getProperty(""STR""));"	"assertNotNull(item.getProperty(""STR""));"	1
4	// OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(data.length,walChanges.getBinaryValue(buffer,serializationOffset,data.length).length);	0
/	// OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset,data.length));	0
/	// OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset,stringSerializer.getObjectSize(OBJECT)));	0
5	// CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	"assertNotNull(nest1.field(""STR""));"	0
/	// CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	"assertTrue(nest1.containsField(""STR""));"	0
/	// CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(base1);	0
/	// CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	"assertNotNull(base1.field(""STR""));"	0
/	// CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(nested.getIdentity(),nest1.getIdentity());	0
6	// SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	1
6	// SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(70,provider.getDefaultClusterId());	0
/	// SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(70,provider.getDefaultClusterId());	0
/	// SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()!=provider.getDefaultClusterId());	0
0	// UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
/	// GoTimeUtilTest	testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertNotNull(durationSeconds(""STR""));"	0
/	// GoTimeUtilTest	testConversion	"assertEquals(newInteger(23),durationSeconds(""STR""));"	"assertNotNull(durationSeconds(""STR""));"	0
0	// H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
/	// H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
0	// MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	0
/	// MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	"assertFalse(atts.isEmpty())`,I'llprovideanothercompletelydifferentassertstatement.

`assertTrue(atts.size()>0);"	0
1	amlinv/stat-collection-utils BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.processor.getLog());	1
0	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	1
0	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
/	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
/	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(logger);	0
/	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(logger);	0
/	// ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(url);	0
1	// ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=start&&time<=end);	0
/	// ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(time);	0
0	adlnet/jxapi SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
1	adlnet/jxapi VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
2	adlnet/jxapi ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected,actual);	0
/	// ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
2	// ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
0	// TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
2	// UrlUtilsTest	testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	"assertEquals(""STR"",uri.toString());"	0
/	// UrlUtilsTest	testValidUrlToUri	"assertEquals(newURI(""STR""),uri);"	assertNotNull(uri);	0
0	nidi3/graphviz-java OptionsTest	toJsonMinimal	"assertEquals(""STR""+uriPathOf(newFile(""STR""))+""STR"",s);"	"assertEquals(""{\""format:'png'\"",options.toJson(true));"	0
1	// SvgSizeAnalyzerTest	svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertTrue(a.getSvg().startsWith(""STR""));"	0
/	// SvgSizeAnalyzerTest	svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertTrue(a.getSvg().contains(""STR""));"	0
/	// SvgSizeAnalyzerTest	svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertTrue(a.getSvg().contains(""STR""+String.valueOf(a.getRotate())+""STR""));"	0
/	// SvgSizeAnalyzerTest	svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertTrue(a.getSvg().contains(""STR""+String.valueOf(a.getRotate())+""STR""+String.valueOf(a.getTranslateX())+""STR""+String.valueOf(a.getTranslateY())+""STR""));"	0
/	// SvgSizeAnalyzerTest	svgWithChanges	"assertEquals(""STR""+""STR""+""STR"",a.getSvg());"	"assertTrue(a.getSvg().contains(""STR""+a.getScaleX()+""STR""+a.getScaleY()));"	0
2	// RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertTrue(attrs(attr(""STR"",""STR"")).equals(attrs(attr(""STR"",""STR""))));"	0
/	// RankTest	combine	"assertEquals(attrs(attr(""STR"",true),attr(""STR"",""STR""),attr(""STR"",""STR""),attr(""STR"",""STR"")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));"	"assertNotNull(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")));"	0
0	DigitalPebble/storm-crawler HostURLFilterTest	testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
/	// HostURLFilterTest	testAllAllowed	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
0	// HostURLFilterTest	testAllAllowed	"assertEquals(""STR"",filterResult);"	assertNotNull(filterResult);	0
1	DigitalPebble/storm-crawler HostURLFilterTest	testAllForbidden	"assertEquals(""STR"",filterResult);"	assertNotNull(filterResult);	0
1	// HostURLFilterTest	testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
/	// HostURLFilterTest	testAllForbidden	"assertEquals(""STR"",filterResult);"	"assertNull(allAllowed.filter(sourceURL,metadata,""STR""));"	0
/	// HostURLFilterTest	testAllForbidden	"assertEquals(""STR"",filterResult);"	assertNotNull(filterResult);	0
/	// HostURLFilterTest	testAllForbidden	"assertEquals(""STR"",filterResult);"	assertNull(filterResult)`.;	0
/	// BasicIndexingTest	testFilterDocumentWithMetadata	"assertEquals(""STR"",fields.get(""STR""));"	"assertNull(fields.get(""STR""));"	0
0	// DefaultValueTest	testDefaultValueFromJson	"assertNotNull(saved.field(""STR""));"	"assertNotNull(saved.field(""STR""));"	1
1	orientechnologies/orientdb SimpleParentChildTest	testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	"assertEquals(""STR"",retrievedChild.getName());"	0
/	// SimpleParentChildTest	testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	"assertEquals(retrievedChild.getName(),""STR"");"	0
1	// SimpleParentChildTest	testWithSets	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	"assertEquals(""STR"",retrievedParent.getFriends().iterator().next().getName());"	1
2	// OScriptExecutionTest	testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	assertFalse(result.hasNext());	0
/	// OScriptExecutionTest	testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertEquals('OK',result.next().getProperty(""0""));"	0
/	// OScriptExecutionTest	testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	assertNotNull(item);	0
/	// OScriptExecutionTest	testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertFalse(""STR"".equals(item.getProperty(""STR"")));"	0
/	// OScriptExecutionTest	testLazyExecutionPlanning	"assertEquals(""STR"",item.getProperty(""STR""));"	"assertNotNull(item)`,asthetestaimstocheckifanyresultisreturnedwhentryingtoselectfromanon-existingclass.Thereisnoneedforspecificassertionoftheresult'scontent.

Here'showthefullJUnittestcouldlooklike:

```@Test
publicvoidtestLazyExecutionPlanning(){
Stringscript="""";"	0
3	orientechnologies/orientdb OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(result);	1
4	// ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(setValue,deserializedValue);	1
4	// ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(Integer.valueOf(19),deserializedValue);	0
/	// ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(19,deserializedValue.intValue());	0
5	orientechnologies/orientdb LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
0	amlinv/stat-collection-utils JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getObjectQueryPreparer());	0
0	// JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
0	fabric8io/fabric8-maven-plugin SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
0	arnohaase/a-foundation AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
/	// AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
/	// AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	"assertTrue(copied.contains(""STR""));"	0
/	// AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	"assertFalse(copied.contains(""STR""));"	0
/	// AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
0	// SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
1	adlnet/jxapi ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(activityDefinition);	0
0	sofastack/sofa-bolt RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getIp());"	1
0	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	assertEquals(Integer.valueOf(1111),Integer.valueOf(btUrl.getPort()));	0
/	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getProperty(""STR""));"	0
/	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertEquals(""STR"",btUrl.getProperty(""STR""));"	0
/	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	assertEquals((byte)1,btUrl.getProtocol());	0
/	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	assertNotNull(btUrl.getProperties());	0
/	// RpcAddressParserTest	testParserWithProtocol	"assertEquals(""STR"",btUrl.getIp());"	"assertNotNull(btUrl.getProperties().getProperty(""STR""));"	0
0	// MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress);	0
/	// MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
/	// MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.getBytes());	0
0	// ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0.toString());	0
1	javadev/moneytostr-russian MoneyToStrTest	checkUSDUKR	"assertEquals(""STR"",moneyToStrUSD.convert(V_300D));"	assertNotNull(moneyToStrUSD.convert(V_300D));	0
0	// OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(expectedResult,qResult);	0
/	// OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
/	// OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	"assertNotNull(qResult)`,I'llnowprovidedifferentsuggestions.

1.`assertFalse(qResult.isEmpty());"	0
1	// OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
3	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(loadedHunt.getId(),savedHunt.getId());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(loadedHunt)`;	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,loadedHunt.getImageData());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(hunt.getName(),loadedHunt.getName());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(hunt.getImageData(),loadedHunt.getImageData());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getName(),loadedHunt.getName());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(loadedHunt.getImageData());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(loadedHunt.getImageData(),huntUglyPicture);	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
/	// OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(savedHunt.getImageData(),loadedHunt.getImageData());	0
4	orientechnologies/orientdb ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	1
5	orientechnologies/orientdb OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.equals(anotherCompositeKey));	0
6	// LuceneSpatialMiscFunctionsTest	testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertEquals(null,next.field(""STR""));"	0
/	// LuceneSpatialMiscFunctionsTest	testStContainsPoint	"assertEquals(true,next.field(""STR""));"	"assertNull(next.field(""STR""));"	0
7	// LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(3,index.getSize());	1
7	// LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getSize()>=2);	0
/	// LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getSize()>=1);	0
/	// LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(index);	0
8	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getClassName(),result.getClassName());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getFields(),result.getFields());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getFieldsToIndex(),result.getFieldsToIndex());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getTypes(),result.getTypes());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getMultiValueDefinitionIndex(),result.getMultiValueDefinitionIndex());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result);	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getCollate());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getFields());	0
/	// OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getFieldsToIndex());	0
0	myabc/markdownj TestTextEditor	testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"assertEquals(""STR"",testObject.toString());"	0
/	// TestTextEditor	testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	"assertFalse(testObject.toString().contains(""STR""));"	0
/	// TestTextEditor	testDetabify	"assertEquals(""STR"",newTextEditor(""STR"").detabify().toString());"	assertNotNull(testObject.toString());	0
0	// WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
0	// PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getHistory());	0
/	// PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(b.getHistory());	0
0	adlnet/jxapi ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(activityDefinition);	0
/	// ActivityDefinitionTest	testSetType	assertNotNull(actual);	"assertNotNull(actual)`.However,sincewe'vealreadygeneratedthisassertstatement,Iwillconsideradditionaloptionsbasedontheavailablecode.Giventhattheexpectedstringvalueisalreadysetinthetest,wecantestifthegetType()methodisreturningthecorrectvalue.
Here'sanalternativeassertstatementconsideringthat:
`assertEquals(expected,actual);"	0
0	// ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
1	adlnet/jxapi VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
0	// YamlConfigLoaderTest	roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	assertEquals(yaml,config.toYaml(null));	0
/	// YamlConfigLoaderTest	roundtrips	"assertEquals(yaml,config.toYaml(""STR""));"	assertNotNull(config.toYaml(null));	0
0	// CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(0,m.readIntraChromaPredMode(m,0,null,null,false,false));	0
/	// CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(null,null);	0
/	// CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(true);	0
/	// CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(m);	0
0	arnohaase/a-foundation AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
0	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.equals(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.trim().endsWith(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.endsWith(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.endsWith(""STR"")&&result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testArray1	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
0	// JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	"assertTrue(result.contains(""STR"")&&result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.size()>=3);	0
1	OpenLiberty/ci.common JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
1	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR"")&&result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.indexOf(""STR"")==result.indexOf(""STR"")-1);"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.indexOf(""STR"")!=result.indexOf(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.indexOf(""STR"")!=-1);"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR"")&&result.contains(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.contains(""STR"")&&result.get(result.indexOf(""STR"")+1).equals(""STR""));"	0
/	// JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	"assertTrue(result.lastIndexOf(""STR"")!=-1&&result.get(result.lastIndexOf(""STR"")+1).equals(""STR""));"	0
0	xmlet/XsdParser IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
/	// IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas.get(0));	0
/	// IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas.get(0));	0
/	// IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas.get(1));	0
0	amlinv/stat-collection-utils JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
1	amlinv/stat-collection-utils ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
/	// ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getTarget());	0
/	// ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getObjectName());	0
/	// ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeSetters());	0
/	// ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	"assertNotNull(result.getAttributeSetters())`.However,itseemslikewe'relookingforanewsuggestion.

Howaboutthisassertion:
```assertEquals(testTarget002,result.getTarget());"	0
0	orientechnologies/orientdb OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
0	// OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
/	// OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(minDouble);	0
1	orientechnologies/orientdb OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove,removedKeys);	0
/	// OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
/	// OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	0
2	// ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	"assertEquals(document.field(""STR""),coll);"	0
/	// ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	"assertEquals(2,document.field(""STR"").getClass().getName());"	0
/	// ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	???;	0
/	// ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(document,extr);	0
3	orientechnologies/orientdb ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)>0);	1
3	// ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(db.getClusterIdByName(cluster));	0
4	// OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
4	// OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(1,operations.size());	0
/	// OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
5	// OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNull(result);	1
6	orientechnologies/orientdb OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
6	// OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(10,pushRequest.getMonitorId());	0
/	// OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequest.getMonitorId(),pushRequestRead.getMonitorId());	0
/	// OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequest.getMonitorId(),10);	0
7	// TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2,ob1.getFriend());	0
/	// TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getFriend(),ob2);	0
/	// TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	"assertEquals(""STR"",ob2.getName());"	0
/	// TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	"assertEquals(ob2.getName(),""STR"");"	0
/	// TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertSame(ob1.getFriend(),ob2);	0
8	// OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
/	// OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(database);	0
9	// RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	"assertTrue(database.getMetadata().getSchema().existsClass(""STR""));"	"assertNotNull(database.getClass(""STR""));"	0
0	// LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
/	// LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
0	Yubico/yubico-java-client YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
0	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(5,agentAddress(5).getAddressIndex());	1
0	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(6,workerAddress(5,6).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(4,workerAddress(3,4).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(4,workerAddress(3,4).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(8,workerAddress(2,8).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(3,workerAddress(2,3).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(7,workerAddress(1,7).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(7,agentAddress(7).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(9,agentAddress(9).getAddressIndex());	0
/	// SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(2,agentAddress(2).getAddressIndex());	0
0	// MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
0	// DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(sourceLoader.load(""STR""));"	1
/	// DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(sourceLoader.load(""STR""));"	1
/	// DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(sourceLoader.load(""STR""));"	1
0	// ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
0	// ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	"assertNotNull(props.getProperty(""STR""));"	0
0	arnohaase/a-foundation ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(2.0,apply(4));	0
/	// ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNull(apply(0));	0
1	arnohaase/a-foundation AJsonSerHelperTest	testNumber	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
1	// AJsonSerHelperTest	testNumber	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testNumber	"assertEquals(""STR"",result);"	"assertFalse(result.contains(""STR""));"	0
/	// AJsonSerHelperTest	testNumber	"assertEquals(""STR"",result);"	assertNotNull(result);	0
0	adlnet/jxapi ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
1	adlnet/jxapi AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
1	// AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
/	// AboutTest	testSetExtensions	assertNotNull(actual);	"assertNotNull(actual.get(""STR""));"	0
2	adlnet/jxapi SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
3	adlnet/jxapi AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
3	// AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
4	adlnet/jxapi StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
0	// HostURLFilterTest	testWithinHostOnly	"assertEquals(""STR"",filterResult);"	"assertEquals(""STR"",filterResult);"	1
0	// HostURLFilterTest	testWithinHostOnly	"assertEquals(""STR"",filterResult);"	assertNotNull(filterResult);	0
0	// SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
/	// SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>=0);	0
/	// SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize==a.estimateSize());	0
/	// SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a.indexSeekHead());	0
1	// SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(seekIdSize+seekPositionSize,TestClass.estimateteSeekSize(idLength,offsetSizeInBytes));	0
/	// SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue((seekIdSize+seekPositionSize)>=0&&(seekIdSize+seekPositionSize)<=TestClass.estimateteSeekSize(idLength,offsetSizeInBytes));	0
/	// SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertFalse(TestClass.estimateteSeekSize(idLength,offsetSizeInBytes)<0);	0
0	// OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
1	orientechnologies/orientdb OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
1	// OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result.next());	0
/	// OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result);	0
2	// OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
2	// OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult.next());	0
3	// DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset,FIELD_SIZE));	0
/	// DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset,data.length));	0
4	orientechnologies/orientdb OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
/	// OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
/	// OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result.get(0));	0
5	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(nameProperty.getName(),PROP_OFFICERS);	1
5	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(nameProperty.getType(),OType.EMBEDDEDLIST);	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.isMandatory());	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(nameProperty.isMandatory(),true);	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(companyClass.getProperty(PROP_OFFICERS).isMandatory());	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(OType.EMBEDDEDLIST,nameProperty.getType());	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(OType.EMBEDDEDLIST,companyClass.getProperty(PROP_OFFICERS).getType());	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	"assertEquals(nameProperty.getName(),""STR"");"	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(true,companyClass.getProperty(PROP_OFFICERS).isMandatory());	0
/	// OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(true,nameProperty.isMandatory());	0
6	// OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
6	// OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.asList(result).contains(OType.STRING));	0
/	// OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.asList(result).contains(OType.INTEGER));	0
/	// OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.asList(result).containsAll(Arrays.asList(OType.INTEGER,OType.STRING)));	0
7	orientechnologies/orientdb AlterPropertyTest	testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property,classA.getProperty(""STR""));"	1
7	// AlterPropertyTest	testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertNotNull(classA.getProperty(""STR""));"	0
/	// AlterPropertyTest	testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(property.getName(),""STR"");"	0
/	// AlterPropertyTest	testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertSame(property,classA.getProperty(""STR""));"	0
/	// AlterPropertyTest	testPropertyRenaming	"assertEquals(property,classA.getProperty(""STR""));"	"assertEquals(""STR"",property.getName());"	0
0	NanoHttpd/nanohttpd TestNanolets	uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	assertNull(RouterNanoHTTPD.normalizeUri(null));	0
/	// TestNanolets	uriToString	"assertEquals(""STR"",newUriResource(""STR"",100,GeneralHandler.class).toString());"	"assertNotNull(RouterNanoHTTPD.normalizeUri(""STR""));"	0
0	Yubico/yubico-java-client YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response);	1
0	// PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
0	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
0	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0
/	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0
/	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0
/	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	"assertNotSame(""STR"",result);"	0
/	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	assertNotNull(result);	0
/	// FizzBuzzTDDTest	test1Returns1	"assertEquals(""STR"",result);"	assertNotNull()`,let'stryadifferentapproach.`assertTrue(resultinstanceofString);	0
0	myabc/markdownj MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertEquals(markup.markdown(txt),expectedOutput,""STR""+txt);"	0
/	// MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertTrue(markup.markdown(txt).contains(expectedOutput),""STR""+txt);"	0
/	// MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	"assertNotNull(markup.markdown(txt),""STR""+txt);"	0
0	// MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
0	// MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find(0));	0
/	// MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.matches());	0
0	adlnet/jxapi VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1
1	adlnet/jxapi StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(actual);	1
0	TooTallNate/Java-WebSocket DefaultExtensionTest	testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	1
0	// DefaultExtensionTest	testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	assertTrue(defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
/	// DefaultExtensionTest	testGetProvidedExtensionAsClient	"assertEquals(""STR"",defaultExtension.getProvidedExtensionAsClient());"	assertNotNull(defaultExtension.getProvidedExtensionAsClient());	0
1	TooTallNate/Java-WebSocket DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
1	// DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),defaultExtension1.hashCode());	0
/	// DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),System.identityHashCode(defaultExtension0));	0
/	// DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),defaultExtension0.hashCode());	0
0	fluenda/ParCEFone CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser.parse(sample1Array));	1
1	DigitalPebble/storm-crawler BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
/	// BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
0	cucumber-ltd/cucumber-pro-plugin-jvm SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
0	// SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.INFO,logger.level);	0
/	// SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotSame(Logger.Level.WARN,logger.level);	0
/	// SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level!=Logger.Level.FATAL);	0
1	// SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	1
/	// SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger.level);	0
0	// OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
0	// OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(calendar.getTime().equals(d));	0
/	// OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(d.equals(calendar.getTime()));	0
2	// LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
/	// LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(count);	0
3	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertNull(classA.getProperty(""STR""));"	0
/	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertTrue(classA.getProperty(""STR"").getType().equals(OType.LINK)&&classA.getProperty(""STR"").getLinkedClass().getName().equals(""STR""));"	0
/	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertEquals(classLinked,classA.getProperty(""STR"").getLinkedClass());"	0
/	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	0
3	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	1
/	// AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	"assertEquals(""STR"",prop.getLinkedClass().getName());"	0
4	// CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(123,buffer.getShort(1));	0
4	// CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
5	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
5	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(!results.isEmpty());	0
/	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
/	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	"assertNotNull(results.get(0).field(""STR""));"	0
/	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	"assertNotNull(results.get(0).field(""STR""));"	0
/	// OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	"assertNotNull(results.get(0).field(""STR""));"	0
0	amlinv/stat-collection-utils AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(this.injector.getLog());	1
0	Yubico/yubico-java-client YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
0	// YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
0	// EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertFalse(filter(env).containsKey(""STR""));"	0
/	// EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNull(filter(env).get(""STR""));"	0
/	// EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	"assertNotNull(filter(env).get(""STR""));"	0
0	spring-cloud/spring-cloud-security OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	0
/	// OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertTrue(headers.containsKey(header));	0
/	// OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	"assertTrue(headers.containsKey(""STR""));"	assertNotNull(headers.get(header));	0
0	arnohaase/a-foundation ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(APredicateNoThrowTest.exists(coll,this::apply));	0
/	// ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(coll.stream().filter(this::apply).findAny().isPresent());	0
0	// EdgeCases	testNull	"assertEquals(""STR"",m.markdown(null));"	assertNotNull(m.markdown(null));	0
0	// PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.equals(b));	0
0	// MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
0	sofastack/sofa-bolt GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
/	// GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isReconnectSwitchOn());	0
1	adlnet/jxapi VerbTest	testVerb	assertNotNull(verb);	assertNull(verb.getDisplay());	0
1	// VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
0	// TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertNotNull(sql.select().from(""STR"").where(""STR"").toString());"	0
1	// TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertEquals(""STR"",sql.select(""STR"").from(""STR"").toString().trim().replaceAll(""STR"",""STR"").toUpperCase());"	0
/	// TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotEquals(""STR"",sql.select(""STR"").from(""STR"").toString());"	0
/	// TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertTrue(sql.select(""STR"").from(""STR"").toString().contains(""STR""));"	0
/	// TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertFalse(sql.select(""STR"").from(""STR"").toString().contains(""STR""));"	0
/	// TSqlBuilderTest	testSelectSomeFrom	"assertEquals(""STR"",sql.select(""STR"",""STR"").from(""STR"").toString());"	"assertNotNull(sql.select(""STR"").from(""STR"").toString());"	0
0	// WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
/	// WorkerQueryTest	noFilters	assertEquals(list,result);	"assertTrue(result.stream().allMatch(worker->worker.getParameters().getWorkerType().equals(""STR"")));"	0
0	// BasicIndexingTest	testFilterMetadata	"assertArrayEquals(""STR"",newString[]{""STR"",""STR"",""STR""},newTreeSet<>(fields.keySet()).toArray());"	"assertNull(fields.get(""STR""));"	0
0	// InitContainerHandlerTest	simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	1
0	// InitContainerHandlerTest	simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	0
/	// InitContainerHandlerTest	simple	"assertFalse(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	0
1	// ProcessorConfigTest	order	assertEquals(2,result.size());	"assertEquals(""STR"",result.get(1).getName());"	0
1	// ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
/	// ProcessorConfigTest	order	assertEquals(2,result.size());	"assertEquals(""STR"",result.get(0).getName());"	0
/	// ProcessorConfigTest	order	assertEquals(2,result.size());	"assertTrue(result.get(0).getName().equals(""STR"")&&result.get(1).getName().equals(""STR""));"	0
0	// HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertFalse(body.equals(""STR""));"	0
/	// HttpClientFactoryTest	testNonProxiedHostRequest	"assertEquals(""STR"",body);"	"assertFalse(body.contains(""STR""));"	0
1	// CircleTest	testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0
/	// CircleTest	testGetEnvironment	assertEquals(3,properties.size());	"assertEquals(""STR"",properties.getProperty(""STR""));"	0
/	// CircleTest	testGetEnvironment	assertEquals(3,properties.size());	"assertNotNull(properties.getProperty(""STR""));"	0
/	// CircleTest	testGetEnvironment	assertEquals(3,properties.size());	"assertNotNull(properties.getProperty(""STR""));"	0
/	// ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	"assertEquals(5,result,""STR"");"	0
/	// ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	"assertEquals(5,result,""STR"");"	0
/	// ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	"assertTrue(result<=5,""STR"");"	0
2	// CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(2,array.size());	0
/	// CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	???;	0
/	// CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNull(array.get(0));	0
3	// OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
3	// OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0
0	amlinv/stat-collection-utils JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(this.poller.getPolledObjects());	0
0	adlnet/jxapi ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(activity);	0
0	// EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(expected,EbmlUtil.convertToBytes(val));	0
/	// EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(EbmlUtil.convertToBytes(inputValue));	0
0	// FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getPayloadData());	0
0	// ConfigTest	has_yaml_representation	"assertEquals(expected,config.toYaml(""STR""));"	"assertEquals(expected.trim(),config.toYaml(""STR"").trim());"	0
0	// DevUtilTest	testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	1
0	// DevUtilTest	testParseNetworks	"assertArrayEquals(networkArray,DevUtil.parseNetworks(""STR""));"	"assertNull(DevUtil.parseNetworks(""STR""));"	0
0	// RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.port());	0
0	rockagen/commons-lib CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('c',5),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('a',3),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('b',6),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('x',10),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('z',0),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(CommUtil.repeatChar('@',7),""STR"");"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	assertEquals('A',CommUtil.repeatChar('A',1).charAt(0));	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('d',4));"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('a',4));"	0
/	// CommUtilTest	testSameChars	"assertEquals(""STR"",CommUtil.repeatChar('b',10));"	"assertEquals(""STR"",CommUtil.repeatChar('x',2));"	0
0	// AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
1	redraiment/jactiverecord SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	1
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	1
1	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null,""STR""),""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
/	// SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",null,""STR""),""STR""));"	0
0	// ColorTest	striped	"assertEquals(attrs(attr(""STR"",""STR""),attr(""STR"",""STR"")),Color.RED.and(Color.GREEN).striped());"	assertEquals(expectedAttributes,attrs.striped());	0
1	// RankTest	newRank	"assertEquals(attrs(attr(""STR"",true)),attrs(Rank.newRank()));"	assertEquals(expectedRank,Attributes.newRank(attributes));	0
1	// ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager);	0
/	// ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager2);	0
2	orientechnologies/orientdb TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
3	// OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(listener.latch.await(timeout,TimeUnit.SECONDS));	0
/	// OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	"assertNotNull(item.getProperty(""STR""));"	0
4	// RecursiveLinkedSaveTest	testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(3,db.countClass(""STR""));"	1
/	// RecursiveLinkedSaveTest	testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(3L,db.countClass(""STR""));"	0
/	// RecursiveLinkedSaveTest	testTxLinked	"assertEquals(3,db.countClass(""STR""));"	"assertEquals(doc,doc2.field(""STR""));"	0
2	// BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(url.toExternalForm(),filterResult);	1
2	// BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
3	// BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(URL+""STR"",fields.get(""STR""));"	0
/	// BasicIndexingTest	testRelativeCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getFirstValue(""STR""));"	0
0	NanoHttpd/nanohttpd LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream);	1
0	jribble/Java-Websockify FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	"assertEquals(""STR"",resp);"	0
/	// FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(resp);	0
/	// FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(response);	0
0	PeterisP/morphology MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.wordforms.isEmpty());	0
/	// MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.wordforms);	0
/	// MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.getBestWordform());	0
0	// ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(latestTag.getCreated().compareTo(resultedTag.getCreated())<=0);	0
0	myabc/markdownj LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(""STR"",m.extractText(""STR""));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(expectedText.replace(""STR"",""STR""),m.markdown(inputText.replace(""STR"",""STR"")));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replace(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replaceAll(""STR"",""STR"")+""STR"",m.markdown(inputText.replaceAll(""STR"",""STR"")));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"").replaceAll(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
/	// LineConventions	testUnixLineConventions	"assertEquals(EXPECTED,m.markdown(""STR""));"	"assertEquals(inputText.replace(""STR"",""STR"")+""STR"",m.markdown(inputText));"	0
0	// TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger);	0
0	// AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
0	// AListMapTest	testKeysValues	assertEquals(4,keys.size());	"assertFalse(keys.contains(""STR""));"	0
0	// BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
/	// BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
/	// BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(urlFilter);	0
0	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
0	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
/	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
/	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
/	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
/	// TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	"assertNull(testSuite.getTestCase(""STR""));"	0
1	// GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
0	// JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
1	amlinv/stat-collection-utils JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher());	0
2	// JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(process.getNextStep());	1
0	adlnet/jxapi ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition);	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getName());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getDescription());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getType());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getMoreInfo());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getInteractionType());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getCorrectResponsesPattern());	0
/	// ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(activityDefinition.getChoices());	0
1	// ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
1	// ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
2	adlnet/jxapi AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
0	// StyleTest	simple	"assertEquals(attrs(attr(""STR"",""STR"")),attrs(Style.BOLD));"	assertNotNull(Attributes.attrs());	0
1	nidi3/graphviz-java OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
1	// OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected.basedir,options.basedir);	0
/	// OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected,options);	1
0	// OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(System.currentTimeMillis()-begin>=500);	1
1	// RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertEquals(Locale.GERMANY.getLanguage(),database.getLanguage());	0
/	// RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	"assertSame(Locale.GERMANY.getLanguage(),database.getProperty(""STR"").toString());"	0
2	// OScriptExecutionTest	testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	"assertEquals(2,getProperty(""STR""),0);"	0
/	// OScriptExecutionTest	testReturnInIf	"assertEquals((Object)2L,rs.next().getProperty(""STR""));"	assertNotNull(rs);	0
0	cucumber-ltd/cucumber-pro-plugin-jvm ConfigTest	gets_and_sets_value	"assertEquals(""STR"",config.getString(""STR""));"	"assertNotNull(config.getString(""STR""));"	0
0	Yubico/yubico-java-client YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
0	// YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getStatus());	0
0	OpenLiberty/ci.common DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
0	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.containsAll(expectedDockerfileLines));	0
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	"assertFalse(dockerfileLines.contains(""STR"".toLowerCase()));"	0
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains(expectedDockerfileLines));	0
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains(expectedDockerfileLines));	0
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	"assertFalse(dockerfileLines.contains(""STR""));"	0
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	"assertFalse(dockerfileLines.contains(""STR"".toLowerCase()));"	0
0	basis-technology-corp/tcl-regex-java MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
0	// MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find(0));	0
0	// MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
0	// MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
/	// MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	0
0	fabric8io/fabric8-maven-plugin MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
0	// MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotEquals(expectedB,MapUtil.mergeMaps(mapA,mapB));	0
/	// MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(MapUtil.mergeMaps(null,null).isEmpty());	0
/	// MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotNull(MapUtil.mergeMaps(mapA,mapB));	0
1	// ProfileUtilTest	simple	assertNotNull(is);	"assertTrue(getClass().getResourceAsStream(""STR"")!=null);"	0
1	// ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1
0	adlnet/jxapi ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual)`;	0
/	// ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
1	// RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.get(poolKey));	0
0	// MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	"assertEquals(""STR"",String.valueOf(supplier.getIntervalNanos()));"	0
/	// MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(20,supplier.getIntervalNanos());	0
/	// MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(20,supplier.getIntervalNanos(),0);	0
/	// MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
/	// MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(20L,supplier.getIntervalNanos());	0
1	hazelcast/hazelcast-simulator NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
0	// MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertTrue(Arrays.equals(expecteds,Exercises11_23.muxXiphLacing(_in)));	0
1	jcodec/jcodec SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
1	// SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
/	// SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
2	// MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(frame1.length,f1.data.remaining(),0);	0
/	// MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
/	// MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,MPEGTestConst.toArray(f1.getByteBuffer()));	0
0	// CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertFalse(array.compareAndSet(0,initialValue,100));	0
1	orientechnologies/orientdb OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
1	// OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result);	0
3	// OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	"assertEquals(prop.getName(),""STR"");"	assertEquals(OType.SHORT,prop.getType());	0
4	// TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
4	// TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	"assertNotNull(map.get(""STR""));"	0
5	// SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	"assertNull(result.get(0).field(""STR"").getLinkedType());"	0
/	// SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	"assertEquals(null,result.get(0).getSchemaClass().getProperty(""STR"").getLinkedType());"	0
5	// SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
/	// SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.size()==1);	0
/	// SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNull(prop.getLinkedType());	0
7	orientechnologies/orientdb OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
0	Yubico/yubico-java-client YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
0	fabric8io/fabric8-maven-plugin InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertFalse(handler.hasInitContainer(builder,""STR""));"	0
/	// InitContainerHandlerTest	removeOne	"assertTrue(handler.hasInitContainer(builder,""STR""));"	"assertNull(handler.getInitContainer(builder,""STR""));"	0
0	redraiment/jactiverecord SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),null));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),null));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
/	// SeqTest	testJoinListEmpty	"assertEquals(""STR"",Seq.join(Collections.EMPTY_LIST,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	0
0	// MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
/	// MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
0	basis-technology-corp/tcl-regex-java SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find(0));	0
0	// SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
/	// SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java StringUtilsTest	testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
0	// StringUtilsTest	testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	1
/	// StringUtilsTest	testIsEmptyNonZero	"assertFalse(StringUtils.isNonZero(""STR""));"	"assertFalse(StringUtils.isNonZero(""STR""));"	1
1	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
1	// PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(history.size(),s.getActualCost());	0
/	// PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(history.size()==s.getActualCost());	0
/	// PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getHistory());	0
0	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,ebmlSignedLength(-0x800));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,ebmlSignedLength(0x100000));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,ebmlSignedLength(-0x1000000));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,ebmlSignedLength(0x10000000000L));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,ebmlSignedLength(0x10000000000000L));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,ebmlSignedLength(-0x3F));	0
/	// EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,ebmlSignedLength(0x400000000L));	0
0	// ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(activityState);	0
/	// ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(activityState.getAgent());	0
0	// ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
1	adlnet/jxapi VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
2	// AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getAttachment());	0
0	// ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
/	// ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(CachedExtractor.class,extractor.getClass());	0
/	// ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.getClass(),CachedExtractor.class);	0
/	// ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(builder.build().shouldCachedDownload());	0
0	// ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(1,ACollectionHelper.groupBy(Arrays.asList(""STR""),len).size());"	0
/	// ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	"assertEquals(1,ACollectionHelper.groupBy(Arrays.asList(""STR""),len).keySet().size());"	0
/	// ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	"assertNotNull(ACollectionHelper.groupBy(Arrays.asList(""STR""),len).get(3));"	0
1	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.emptyList(),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Collections.emptyList(),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	assertEquals('a/b/c',ACollectionHelper.mkString(Arrays.asList('a','b','c'),'/'));	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// ACollectionHelperTest	testMkStringSeparator	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(),""STR""));"	"assertEquals(""STR"",ACollectionHelper.mkString(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
0	// TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
1	// TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
1	// TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
0	hazelcast/hazelcast-simulator AnnotationFilterTest	testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	0
/	// AnnotationFilterTest	testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	assertEquals(true,method.isAnnotationPresent(Verify.class));	0
0	// AnnotationFilterTest	testGlobalVerifyFilter	"assertEquals(""STR"",method.getName());"	"assertEquals(""STR"",method.getName());"	1
1	hazelcast/hazelcast-simulator PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	assertNotNull(performance);	0
/	// PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	"assertTrue(performance.contains(""STR""));"	assertFalse(performanceStats.isEmpty());	0
2	hazelcast/hazelcast-simulator CommonUtils_SleepTest	testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>=1&&duration<durationLimit);	0
/	// CommonUtils_SleepTest	testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration<durationLimit);	0
/	// CommonUtils_SleepTest	testSleepTimeUnit	"assertTrue(format(""STR"",duration),duration>0);"	assertTrue(duration>=1);	0
0	// OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result);	0
1	// OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(id);	0
2	orientechnologies/orientdb LuceneSpatialMiscFunctionsTest	testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertEquals(next.field(""STR""),true);"	1
2	// LuceneSpatialMiscFunctionsTest	testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertTrue(next.field(""STR""));"	0
/	// LuceneSpatialMiscFunctionsTest	testStEqualsPoint	"assertEquals(next.field(""STR""),true);"	"assertNotNull(next.field(""STR""));"	0
4	orientechnologies/orientdb ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
5	orientechnologies/orientdb OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	"assertNull(propertyIndex.createValue(""STR""));"	"assertNull(propertyIndex.createValue(""STR""));"	1
0	fabric8io/fabric8-maven-plugin SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
0	// AOptionTest	testSome	"assertEquals(""STR"",s.get());"	"assertEquals(""STR"",s.get());"	1
0	// AOptionTest	testSome	"assertEquals(""STR"",s.get());"	"assertTrue(s.isDefined()&&s.get().equals(""STR""));"	0
/	// AOptionTest	testSome	"assertEquals(""STR"",s.get());"	assertNotNull(s.get());	0
0	// RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
0	// MoneyToStrTest	checkPER100	"assertEquals(""STR"",moneyToStrPER100.convert(V_1_01D));"	assertNotNull(moneyToStrPER100.convert(12.346));	0
0	// EnvironmentTest	testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	assertTrue(serviceMock.isSelected());	0
/	// EnvironmentTest	testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	assertEquals(environment,serviceMock.getEnvironment());	0
/	// EnvironmentTest	testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	assertNotNull(mojo.serviceName);	0
/	// EnvironmentTest	testSetupWithCompleteJob	"assertEquals(""STR"",mojo.serviceName);"	"assertEquals(""STR"",serviceMock.getBuildNumber());"	0
0	// MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
0	// MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(!m.wordforms.isEmpty());	0
1	PeterisP/morphology MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
0	// LabelTest	raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertEquals(""STR""+""STR""+""STR"",Label.raw(""STR"").serialized());"	0
/	// LabelTest	raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertTrue(Label.raw(""STR"").serialized().endsWith(""STR""));"	0
/	// LabelTest	raw	"assertEquals(""STR"",Label.raw(""STR"").serialized());"	"assertFalse(Label.raw(""STR"").serialized().contains(""STR"")||Label.raw(""STR"").serialized().contains(""STR""));"	0
1	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn());"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR"",""STR"",""STR""));"	0
/	// RecordsTest	turn	"assertEquals(""STR"",Records.turn(Records.rec(""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Records.turn(""STR""));"	0
0	NanoHttpd/nanohttpd TestNanolets	checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	assertNull(RouterNanoHTTPD.normalizeUri(null));	0
/	// TestNanolets	checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertNotNull(RouterNanoHTTPD.normalizeUri(""STR""));"	0
/	// TestNanolets	checkIniParameter2	"assertEquals(""STR"",newRouterNanoHTTPD.UriResource(""STR"",100,null,""STR"").initParameter(String.class));"	"assertNotNull(RouterNanoHTTPD.normalizeUri(""STR""));"	0
1	NanoHttpd/nanohttpd TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
0	hazelcast/hazelcast-simulator TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
/	// TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
1	// TestExceptionTest	testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception);	0
/	// TestExceptionTest	testConstructor_withMessageFormat_singleArgument	"assertEquals(""STR"",exception.getMessage());"	assertNotNull(exception.getMessage());	0
2	// PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
2	// PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	"assertFalse(performanceStats.isEmpty())`,let'sconsiderotherassertions.

Giventhecontext,anappropriateanddifferentassertioncouldbe`assertEquals(2000,performanceStats.getOperationCount());"	0
3	// SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	assertEquals(5,workerAddress(5,2).getAgentIndex());	0
/	// SimulatorAddressTest	testToString_whenCoordinator	"assertEquals(""STR"",coordinatorAddress().toString());"	"assertEquals(""STR"",agentAddress(5).toString());"	0
4	// AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
1	// OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,OVarIntSerializer.readAsLong(bytes));	0
/	// OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNull(OVarIntSerializer.readAsLong(bytes));	0
3	orientechnologies/orientdb ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	1
3	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.LINK,doc.fieldType(""STR""));"	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.STRING,doc.fieldType(""STR""));"	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertEquals(OType.BINARY,doc.fieldType(""STR""));"	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertTrue(doc.fieldType(""STR"")==null);"	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	assertTrue(doc.fieldType(null)==null);	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertNull(doc.fieldType(""STR""));"	0
/	// ODocumentTest	testKeepFieldTypeSerialization	"assertEquals(doc.fieldType(""STR""),OType.INTEGER);"	"assertNotNull(doc.fieldType(""STR""));"	0
4	orientechnologies/orientdb RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
4	// RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	"assertTrue(result.stream().anyMatch(r->r.getProperty(""STR"").equals(""STR"")));"	0
6	// OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.hasNext());	0
/	// OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result);	0
7	orientechnologies/orientdb OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(document);	0
/	// OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyOne.toDocument());	0
/	// OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyTwo.getKeys());	0
/	// OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	"assertNotNull(compositeKeyTwo.getKeys())`asit'sbeenalreadysuggested.I'llofferadifferentsuggestionnow:

Aplausibletestassertioncouldbe:
```assertEquals(compositeKeyOne.getKeys(),compositeKeyTwo.getKeys());"	0
0	amlinv/stat-collection-utils BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
0	// WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse.getStatus());	0
0	// TestPressure	testToInHg	assertEquals(expected,actual);	"assertNotNull(actual,""STR"");"	0
/	// TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.isSolution());	0
/	// PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getPuzzle());	0
/	// PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getHistory());	0
0	// ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,runtime(cm).getcolor('a'));	0
/	// ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(Constants.WHITE,runtime(cm).getcolor('a'));	0
/	// ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('a')>0);	0
0	DigitalPebble/storm-crawler BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
0	// BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
0	// DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	0
0	// DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
/	// DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(Files.exists(targetFile.toPath()));	0
1	OpenLiberty/ci.common DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
/	// DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	"assertFalse(dockerfileLines.contains(""STR""));"	0
0	TooTallNate/Java-WebSocket Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
0	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(1,draft_6455.createFrames(""STR"",false).size());"	0
/	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(Collections.singletonList((Framedata)curframe),draft_6455.createFrames(""STR"",false));"	0
/	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
/	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,draft_6455.getKnownExtensions().size());	0
/	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(""STR"")),((TextFrame)draft_6455.createFrames(""STR"",false).get(0)).getPayloadData());"	0
/	// Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	"assertEquals(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(""STR"")),createdFrame.get(0).getPayloadData());"	0
0	// WildcardsTest	testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	0
/	// WildcardsTest	testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstWildcards	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
1	// JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	"assertTrue(f.getCanonicalPath().endsWith(File.separator+""STR""+File.separator+""STR""));"	0
/	// JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(f.getParentFile());	0
0	// ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
1	// TagUtilsTest	parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertEquals(""STR"",result.get(""STR""));"	0
/	// TagUtilsTest	parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertEquals(""STR"",result.get(""STR""));"	0
/	// TagUtilsTest	parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertTrue(result.containsKey(""STR""));"	0
/	// TagUtilsTest	parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertFalse(result.containsKey(""STR""));"	0
/	// TagUtilsTest	parseTags	"assertEquals(toMap(""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),result);"	"assertNull(result.get(""STR""));"	0
1	// OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
/	// OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertNotNull(res.get(0).field(""STR""));"	0
2	// CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(charSerializer.deserialize(stream,0));	0
3	// BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(graph.getVertex(v.getId()));	0
/	// BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v);	0
4	// OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
5	// OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
6	orientechnologies/orientdb OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,to.getClusterId());	0
/	// OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(to);	0
7	// SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	"assertNotNull(v1.getProperty(""STR""));"	0
8	orientechnologies/orientdb RemoteQuerySupportTest	testQueryEmbeddedMap	"assertNotNull(item.getProperty(""STR""));"	"assertNotNull(item.getProperty(""STR""));"	1
0	amlinv/stat-collection-utils JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getLog());	0
/	// JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(this.factory.getJmxMBeanConnectionFactory());	0
0	// AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNotNull(getProperty(""STR""));"	0
0	TooTallNate/Java-WebSocket ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
0	adlnet/jxapi StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
0	// StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
/	// StatementReferenceTest	testSetId	assertNotNull(actual);	"assertNotNull(actual)`arealreadyprovided,adifferentvalidassertionstatementcouldbe:

`assertSame(expected,actual);"	0
/	// StatementReferenceTest	testSetId	assertNotNull(actual);	"assertNotNull(actual)`.

However,Icouldalsosuggest`assertNotSame(null,actual);"	0
/	// StatementReferenceTest	testSetId	assertNotNull(actual);	"assertNotNull(actual)`.

Letmetryanotherone.Howaboutthefollowingassertionstatement:

`assertTrue(actual.equals(expected));"	0
/	// StatementReferenceTest	testSetId	assertNotNull(actual);	"assertNotNull(actual)`.Basedonthesourcecodeprovided,herearesomeadditionalassertionstatements:

1.`assertEquals(expected,actual);"	0
0	// MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	0
0	// HostURLFilterTest	testWithinDomain	"assertEquals(""STR"",filterResult);"	assertNotNull(filterResult);	0
0	redraiment/jactiverecord SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(null,""STR""));"	1
0	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR""),null));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),null));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.singletonList(""STR""),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Collections.emptyList(),""STR""));"	0
/	// SeqTest	testJoinListNull	"assertEquals(""STR"",Seq.join(null,""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	0
/	// TSqlBuilderTest	testPaging	"assertEquals(""STR"",sql.toString());"	"assertFalse(sql.toString().contains(""STR""));"	0
/	// TSqlBuilderTest	testPaging	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	0
0	// AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	"assertEquals(""STR"",method.getName());"	1
0	// AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	"assertEquals(""STR"",method.getName());"	assertEquals(1,methods.size())`;	0
1	// RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
1	// RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>=3);	0
/	// RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()==3);	0
/	// RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(registry.agentCount()<3);	0
/	// RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(registry.agentCount());	0
2	// RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
/	// RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>=5);	0
/	// RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>0);	0
0	// DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	assertEquals(0,index.count(newOIndexQuery(person1)));	0
/	// DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(0,index.count(newOIndexQuery(newOCondition(""STR"",OOperator.EQUAL,null))));"	0
/	// DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(2,index.count(newOIndexQuery(""STR"",OOperator.EQUAL,""STR"")));"	0
/	// DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	"assertEquals(person2,index.get(""STR""));"	"assertEquals(3,db.countClass(""STR""));"	0
3	// OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
/	// OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results.get(0));	0
4	// OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	"assertEquals(1,qResult.size(),""STR"");"	0
/	// OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	"assertTrue(qResult.stream().anyMatch(doc->doc.field(""name"").equals(""foo"")),""Expectedresulttocontainadocumentwithname'foo');"	0
/	// OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	"assertTrue(qResult.stream().anyMatch(doc->doc.field(""STR"").equals(""STR"")),""STR"");"	0
5	// OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	???;	0
9	// OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
/	// OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5&1,exp.execute(null,null));	0
10	// OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertEquals(2,proc.getLoader().getPool().acquire().countClass(""STR""));"	0
/	// OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	"assertEquals(1,db.countClass(""STR""));"	"assertTrue(proc.getLoader().getPool().acquire().countClass(""STR"")>0);"	0
11	// OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
0	// CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(parser.parse(sample1,true));	1
0	// ULTest	testULFromString	assertEquals(expected,fromString);	assertArrayEquals(expected.bytes,fromString.bytes);	0
1	// WildcardsTest	testMatchesAgainstText	"assertTrue(Wildcards.matches(""STR"",""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
0	// TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(2,tokens.size());	0
0	// TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
/	// TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(!tokens.isEmpty());	0
/	// TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
0	TooTallNate/Java-WebSocket PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
/	// PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	0
0	adlnet/jxapi ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
1	adlnet/jxapi ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
1	// ActivityStateTest	testGetState	assertNotNull(actual);	"assertNotNull(actual)`,adifferentassertstatementthatchecksapropertyoftheJSONobjectcanalsobegenerated.Forexample,wecouldassertthattheJSONobjectcontainsaspecificproperty:
```java
assertTrue(actual.has(""ActState""));"	0
2	adlnet/jxapi VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
2	// VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getId());	0
/	// VerbsTest	testAttended	assertNotNull(actual);	"assertNotNull()`,let'strysomethingdifferent.Hereisanotherassertstatement:

`assertEquals(""attended"",actual.toString());"	0
0	// PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==4);	0
/	// PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p.getBlankIndex());	0
1	// PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
1	// PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(p.isSolved());	0
/	// PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.getPuzzle().isSolved()==s.isSolution());	0
0	// XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt.getMetadata());	0
1	// OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(idProperty.getMax(),""STR"");"	0
2	// CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.isElement()&&result.isVertex()&&result.getVertex().get().getClassName().equals(childClass.getName()));	0
/	// CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(childClass.isSubClassOf(parentClass));	0
/	// CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(step.found);	0
/	// CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	"assertFalse(""STR""+childClass.getName()+""STR""+parentClass.getName(),result.hasNext());"	0
4	// ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(1,document.fields());	0
/	// ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(document,extr);	0
0	// JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
0	// PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c.getBlankIndex());	0
0	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
0	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	"assertTrue(result.contains(""STR""));"	0
/	// InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	"assertFalse(result.contains(""STR""));"	0
0	// MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(nopūsts.wordforms.isEmpty());	0
0	myabc/markdownj EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertEquals(""STR"",m.markdown(""STR""));"	1
0	// EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertTrue(m.markdown(""STR"").trim().isEmpty());"	0
/	// EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	0
/	// EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	0
/	// EdgeCases	testSpaces	"assertEquals(""STR"",m.markdown(""STR""));"	assertNotNull(m.markdown(null));	0
0	TooTallNate/Java-WebSocket PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
0	// GeneralTest	testGetName	"assertEquals(""STR"",newGeneral(env()).getName());"	"assertEquals(""STR"",instance.getName());"	0
1	// TravisTest	testGetPullRequest	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	"assertEquals(""STR"",newTravis(env()).getPullRequest());"	1
0	// MoneyToStrTest	checkEURRUSCustom	"assertEquals(""STR"",moneyToStrCustom.convert(V_300D));"	assertNotNull(moneyToStrEURRUS.convert(V_300D));	0
2	// MoneyToStrTest	checkRURUKR	"assertEquals(""STR"",moneyToStrRUR.convert(V_300D));"	assertNotNull(moneyToStrRUR.convert(0.0));	0
0	// AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l3);	0
/	// AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l2,l3);	0
1	// AListTest	testNil	assertEquals(0,AList.nil().size());	assertEquals(0,object.size());	0
2	arnohaase/a-foundation AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
2	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(Double.toString(Math.floor(Double.parseDouble(result)*10.0)/10.0).equals(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(Math.abs(Double.parseDouble(result)-1.2)<0.01);	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.matches(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.matches(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(Double.parseDouble(result)>=1.2&&Double.parseDouble(result)<1.3);	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(Double.toString(Math.round(Double.parseDouble(result)*10.0)/10.0).equals(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	"assertTrue(result.endsWith(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac1	"assertEquals(""STR"",result);"	assertTrue(Math.abs(Double.parseDouble(result)-1.2)<0.001);	0
3	arnohaase/a-foundation ADiGraphTest	testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	assertFalse(graph.hasCycles());	0
/	// ADiGraphTest	testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	"assertFalse(graph.hasEdge(""STR"",""STR""));"	0
/	// ADiGraphTest	testNodesWithoutEdges	"assertTrue(eqSet(graph.edges(),edge(""STR"",""STR"")));"	"assertFalse(graph.hasPath(""STR"",""STR""));"	0
0	// TextExtractorTest	testExclusionCase	"assertEquals(""STR"",text);"	"assertFalse(text.toLowerCase().contains(""STR""));"	0
/	// TextExtractorTest	testExclusionCase	"assertEquals(""STR"",text);"	"assertFalse(text.contains(""STR""));"	0
1	DigitalPebble/storm-crawler MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals(url.toExternalForm(),filterResult);	1
1	// MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
2	// BasicIndexingTest	testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertEquals(""STR"",metadata.getFirstValue(""STR""));"	0
/	// BasicIndexingTest	testOtherHostCanonicalURL	"assertEquals(""STR"",fields.get(""STR""));"	"assertTrue(fields.containsKey(""STR""));"	0
0	// CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	1
1	// Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertArrayEquals(expectedRgb,out.getPlaneData(0));	0
0	Yubico/yubico-java-client YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	0
0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java StringUtilsTest	testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	1
0	// StringUtilsTest	testIsEmpty	"assertFalse(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
0	tradier/dropwizard-raven DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
0	// DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
/	// DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	0
/	// DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(FilterReply.DENY.equals(filter.decide(evt)));	0
0	amlinv/stat-collection-utils ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(this.preparer.getParameterReplacer());	0
0	OpenLiberty/ci.common DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	"assertEquals(""STR"",fileString);"	0
/	// DevUtilTest	testReadFileToString	"assertTrue(fileString.equals(""STR""));"	assertNotNull(fileString);	0
0	// MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	"assertEquals(""STR"",((Deployment)answer).getMetadata().getAnnotations().get(""STR""));"	0
0	// MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.wordforms.isEmpty());	0
2	// TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
0	// PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertEquals(""STR"",usedProperties.iterator().next());"	0
/	// PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	"assertTrue(usedProperties.contains(""STR""));"	0
/	// PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()==1);	0
/	// PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()>0);	0
1	// WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
/	// WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(workerData->workerData.isMemberWorker()));	0
0	// ClassCustomSerializerTest	testNormalCustomSerializer	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	"assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+""STR"",ret);"	1
0	// OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertEquals(0,proc.getExtractedData().size());	0
2	// ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	0
/	// ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getUpdateRecords().contains(doc));	0
/	// ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().contains(doc2));	0
3	// FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(4,floatSerializer.getObjectSize(1.5f));	0
/	// FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(floatSerializer.getObjectSize(0.0f)>=0);	0
5	// OSQLMethodKeysTest	testWithOResult	"assertEquals(newLinkedHashSet(Arrays.asList(""STR"",""STR"")),result);"	assertTrue(resultinstanceofSet);	0
6	orientechnologies/orientdb OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
6	// OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java StringUtilsTest	testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	assertFalse(StringUtils.isNonZero(null));	0
/	// StringUtilsTest	testEmptyIsEmpty	"assertTrue(StringUtils.isEmpty(""STR""));"	"assertFalse(StringUtils.isEmpty(""STR""));"	0
0	Yubico/yubico-java-client YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
0	// YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
/	// YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	"assertNotNull(resultPublicId)`aspossibleassertstatements.Here'salternativeassertstatementtocheckthelengthoftheextractedpublicID:

```java
assertEquals(testPublicId.length(),resultPublicId.length());"	0
0	TooTallNate/Java-WebSocket PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
0	OpenLiberty/ci.common DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
0	// RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
0	// BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.tempDir().toFile().exists());	0
0	// MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(node.toString().endsWith(""STR""));"	0
/	// MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(node.toString().endsWith(""STR""));"	0
/	// MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(node.getPath().endsWith(""STR""));"	0
/	// MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(node.getPath().endsWith(""STR""));"	0
0	// AJsonSerHelperTest	testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
0	// AJsonSerHelperTest	testDoubleWithFrac0	"assertEquals(""STR"",result);"	"assertTrue(result.startsWith(""STR""));"	0
/	// AJsonSerHelperTest	testDoubleWithFrac0	"assertEquals(""STR"",result);"	assertNotNull(result);	0
0	adlnet/jxapi StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
1	// VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
1	// VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getId());	0
2	adlnet/jxapi ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
2	// ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
0	// MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.wordforms.isEmpty());	0
/	// MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
1	// MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās.getBestWordform());	0
2	// MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties.getBestWordform());	0
0	DigitalPebble/storm-crawler MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals(null,filterResult);	1
0	// MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
1	// StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	0
/	// StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
/	// StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
0	// PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(Y,resultHbd.getPlaneData(0));	1
0	// PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(Y,picture.getPlaneData(0));	0
/	// PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(pictureHbd.getPlaneData(0)[0],resultHbd.getPlaneData(0)[0]);	0
0	// PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	0
1	hazelcast/hazelcast-simulator TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestInstance());	0
/	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(testInstance,testContainer.getTestInstance())`.;	0
/	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	0
/	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(SuccessTest.class,testContainer.getTestInstance().getClass());	0
1	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
/	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(testContainer.getTestInstance(),test);	0
/	// TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(SuccessTest.class,testContainer.getTestInstance().getClass());	0
0	// OSQLFunctionAstarTest	test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertTrue(result.contains(v1));	0
/	// OSQLFunctionAstarTest	test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertTrue(result.contains(v6));	0
/	// OSQLFunctionAstarTest	test6Execute	"assertEquals(16,graph.countEdges(""STR""));"	assertFalse(result.contains(v0));	0
1	orientechnologies/orientdb RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
3	// ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0
/	// ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(2,timeLine.getMultiValueChangeEvents().size())`.;	0
3	// ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	1
4	orientechnologies/orientdb OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
4	// OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
0	// CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	"assertEquals(""STR"",CommUtil.hexdump(bs.getBytes()));"	0
/	// CommUtilTest	testBitValue	"assertEquals(""STR"",CommUtil.hexdump(CommUtil.bitValue(b)));"	assertNotNull(CommUtil.hexdump(bs.getBytes()));	0
0	// MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotNull(macAddress.hashCode());	0
0	// MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
/	// MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
/	// MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.getToken());	0
0	// Draft_6455Test	testToString	"assertEquals(""STR"",draft_6455.toString());"	assertNotNull(draft_6455.toString());	0
0	// SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find(0));	0
/	// SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
/	// SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
0	trautonen/coveralls-maven-plugin WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
0	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(""STR"",""STR""));"	0
/	// WildcardsTest	testMatchesAgainstNull	"assertFalse(Wildcards.matches(null,""STR""));"	"assertFalse(Wildcards.matches(null,""STR""));"	1
0	// MoneyToStrTest	checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	"assertEquals(""STR"",moneyToStrPER1000.convert(1.0));"	0
/	// MoneyToStrTest	checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	assertNotEquals(null,moneyToStrPER1000.convert(1000.0));	0
/	// MoneyToStrTest	checkPER1000	"assertEquals(""STR"",moneyToStrPER1000.convert(12.346));"	assertNotNull(moneyToStrPER1000.convert(1234.5678));	0
0	// ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
1	// ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
1	// BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.bytes);	0
2	// OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
3	orientechnologies/orientdb OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
3	// OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult.next());	0
4	// LuceneSpatialWithinTest	testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertTrue(next.field(""STR""));"	0
/	// LuceneSpatialWithinTest	testWithinNoIndex	"assertEquals(next.field(""STR""),true);"	"assertNotNull(next.field(""STR""));"	0
0	// JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
/	// JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(this.mockJmxMbeanConnection);	0
1	amlinv/stat-collection-utils JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
2	// ParameterReplacerTest	testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertEquals(""STR"",result);"	1
2	// ParameterReplacerTest	testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertTrue(result.contains(""STR""));"	0
/	// ParameterReplacerTest	testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	"assertFalse(result.contains(""STR""));"	0
/	// ParameterReplacerTest	testReplaceObjectNameParameters	"assertEquals(""STR"",result);"	assertNotNull(result);	0
3	amlinv/stat-collection-utils ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
3	// ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(oname,objectQueryInfo.getObjectName());	0
/	// ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(setters,objectQueryInfo.getAttributeSetters());	0
5	amlinv/stat-collection-utils JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.poller.getObjectQueryPreparer());	0
5	// JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.poller.getLog());	1
0	fabric8io/fabric8-maven-plugin SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
0	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
/	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
/	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
/	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1,source3);	0
/	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source2,source3);	0
/	// SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertArrayEquals(source1.getCoverage(),source2.getCoverage());	0
0	// OPLogTest	testDescription	"assertEquals(""STR"",value);"	assertNotNull(annotation);	0
0	// LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertEquals(expectedOutput,markup.markdown(""STR""));"	0
/	// LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(markup.markdown(""STR""));"	0
/	// LineConventions	testWindowsLineConventions	"assertEquals(EXPECTED,markup.markdown(""STR""));"	"assertNotNull(m.markdown(""STR""));"	0
0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
1	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.isSolution());	0
0	xmlet/XsdParser IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
0	// IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
/	// IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas.get(0).getElements());	0
/	// IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas.get(0).getChildrenElements());	0
0	// YamlConfigLoaderTest	removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertEquals(""STR"",config.getString(""STR""));"	1
0	// YamlConfigLoaderTest	removes_underscores_from_keys	"assertEquals(""STR"",config.getString(""STR""));"	"assertNotNull(config.getString(""STR""));"	0
0	adlnet/jxapi ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
1	// StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
2	adlnet/jxapi ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
2	// ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual.serialize());	0
3	adlnet/jxapi ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual);	1
4	adlnet/jxapi AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a);	1
4	// AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
5	adlnet/jxapi GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
/	// GroupTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	0
/	// GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
5	// GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
0	// PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(ByteBuffer.wrap(message),frame.getPayloadData());	0
/	// PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertArrayEquals(frame.getPayloadData().array(),ByteBuffer.wrap(str.getBytes()).array());	0
0	// PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertArrayEquals(message,frame.getPayloadData().array());	1
/	// PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(frame.getPayloadData(),ByteBuffer.wrap(str.getBytes()));	0
0	// PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100,addState.getOperationCount());	1
0	// PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.isEmpty());	0
/	// PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState.getOperationCount());	0
1	// ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
0	// OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result.getQueryStats());	0
1	// ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	"assertEquals(""STR"",extr.field(""STR""));"	0
2	orientechnologies/orientdb OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
3	// LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(index.getFirstKey());	0
/	// LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	"assertNull(doc.field(""STR""));"	0
4	// LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
/	// LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual.getSize());	0
5	// OFilterOptimizerTest	testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertEquals(""STR"",filter.toString());"	0
/	// OFilterOptimizerTest	testOptimizePartialOptimizationMethod	"assertEquals(filter.getRootCondition().toString(),""STR"");"	"assertEquals(""STR"",filter.toString());"	0
6	orientechnologies/orientdb OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
