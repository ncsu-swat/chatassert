ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.cons("STR").size()==4);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.indexOf("STR")==1);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.contains("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.reverse().reverse(),l);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.size()==3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l.isEmpty());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.append(l2),AList.create(Arrays.asList("STR","STR","STR","STR","STR","STR")));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l.remove("STR").contains("STR"));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.reverse(),l2);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotEquals(1,focal.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertEquals(0,focal.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertFalse(focal.size()<0);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotNull(focal.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotSame(0,focal.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertSame(focal.size(),focal.size());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	???;	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNull(null);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertTrue(focal.size()>=0);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertSame("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	???;	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotNull(graph.edges());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotEquals(3,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotSame(Arrays.asList(edge("STR","STR")),graph.edges());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNull(graph.edges().get(0));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotEquals(2,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	???;	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(5,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()!=0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertFalse(resultinstanceofMap);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertTrue(result.size()>0);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertFalse(result.isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertSame(Collections.emptyList(),result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertEquals(Collections.emptyList(),result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotEquals(null,result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNotSame(null,result);	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(null);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertSame(pattern,matcher.getPattern());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNull(matcher.group());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(3,matcher.regionEnd());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotSame(matcher,pattern.matcher("STR"));	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(3,matcher.regionStart());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotNull(matcher.pattern());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	???;	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(true,matcher.hitEnd());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,6));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.I,true,true,2));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,true,false,0));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,3));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,false,true,1));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.B,true,true,7));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.I,true,false,5));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,true,true,4));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.I,false,true,8));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,true,9));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(transform.getPlaneData(0).length,out.getPlaneData(0).length);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(transform.getPlaneData(2),out.getPlaneData(2));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getWidth()>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(Arrays.toString(transform.getPlaneData(0)),Arrays.toString(out.getPlaneData(0)));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(transform.getPlaneData(0).length>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNull(transform.getPlaneData(3));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertArrayEquals(transform.getPlaneData(0),out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertFalse(Arrays.equals(transform.getPlaneData(1),out.getPlaneData(0)));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertSame(transform.getPlaneData(2),out.getPlaneData(2));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(transform.getPlaneData(1));	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(producer.isAsynchronous());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals("STR",producer.getNameServer());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNull(producer.getCreateTopicKey());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotSame(producer,newDefaultMQProducer());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(producer.getCompressMsgBodyOverHowmuch()>0);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	???;	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(producer);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.matches("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.contains("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text);	1
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(!text.startsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.endsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>0);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals("STR",text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(null,text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>10);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResultinstanceofString);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.matches("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>5);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNull(((DummyIndexer)bolt).returnFields().get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertFalse(((DummyIndexer)bolt).returnFields().isEmpty());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals("STR",((DummyIndexer)bolt).returnFields().get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(0,((DummyIndexer)bolt).returnFields().size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals(1,((DummyIndexer)bolt).returnFields().size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(((DummyIndexer)bolt).returnFields().get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertTrue(((DummyIndexer)bolt).returnFields().containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertTrue(((DummyIndexer)bolt).returnFields().containsValue("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	???;	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",((DummyIndexer)bolt).returnFields().get("STR")[0]);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals(moneyToStrUAH.convert(15.0),"STR");	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrCustom.convert(1000.0));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNull(moneyToStrUAHENG.convert(null));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertSame(moneyToStrRUR.getLanguage(),moneyToStrRURRUS.getLanguage());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrRURRUS.getLanguage().equals(MoneyToStr.Language.RUS));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertFalse(moneyToStrUSD.getCurrency().equals(MoneyToStr.Currency.USD));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame(moneyToStrUSD,moneyToStrRUR);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	???;	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(moneyToStrEURRUS.convert(20.50),"STR");	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals(moneyToStrEURRUS.convert(2.0),"STR");	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertSame(moneyToStrEURRUS.convert(3.3),moneyToStrRURRUS.convert(3.3));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(5.5));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotSame(moneyToStrUSDENG.convert(5.75),moneyToStrEURRUS.convert(5.75));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(0.0).isEmpty());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertFalse(moneyToStrEURRUS.convert(78.99).isEmpty());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNull(moneyToStrEURRUS.convert(null));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	???;	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals(moneyToStrEURRUS.convert(1.33),"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert(1500.75d).startsWith("STR")+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrRUR.convert(1000.25d).equals("STR")+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNull(moneyToStrCustom.convert(null)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRURRUS.convert(8898.99d)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrPER1000.convert(500.75d)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(5000.00d)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(6322.23d)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrEURRUS.convert(4712.11d).contains("STR")+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(8765.22d)+"STR");	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(0.0d)+"STR");	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(p,c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0&&c.getBlankIndex()<c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(p.getCells().length,c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(p);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()<c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(p,c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(p.getBlankIndex(),c.getBlankIndex());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull("STR");	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals(10,5);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR","STR");	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(true);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertSame(obj1,obj1);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertFalse(false);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotSame(obj1,obj2);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	???;	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNull(null);	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",object.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotNull(object.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertSame(object.getName(),retrievedObject.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertFalse(object.getName()==null);	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertTrue(object.getName()!=null);	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR",object.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNull(object.getName());	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotSame(oldObject.getName(),newObject.getName());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotNull(focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertSame(expectedObject,focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertFalse(focalObject.getPullRequest().isEmpty());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotEquals(0,focalObject.getPullRequest().length());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotEquals("STR",focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNotSame(notExpectedObject,focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertNull(focalObject.getPullRequest());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	???;	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertTrue(focalObject.getPullRequest().contains("STR"));	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNull(deflateExtension.getInflater().getDictionary());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(0,deflateExtension.getInflater().hashCode());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(0,deflateExtension.getInflater().getRemaining());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertSame(inflater,deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().ended());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	???;	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotSame(0,deflateExtension.getInflater().inf.getBytesOut());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(null,deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotSame(Inflater.class,deflateExtension.getInflater().getClass());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts!=null);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(locītājs.isRecognized());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals("STR",nopūsts.getWord());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotSame("STR",locītājs.getClass().getSimpleName());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotSame(locītājs,nopūsts);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(0,locītājs.getCacheSize());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals(10.5,locītājs.calculate(5,2));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(100,locītājs.getCacheSize());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	???;	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertFalse(focal.getLog()==null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotEquals(mockLog,focal.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,focal.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(mockLog.equals(focal.getLog()));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(focal.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNull(focal.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(mockLog,focal.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	???;	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertSame(mockLog,focal.getLog());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(Arrays.asList("STR","STR","STR","STR","STR")));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.isEmpty());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.size()>=3);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(6,result.size());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNull(null);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotSame("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.startsWith("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.contains("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertFalse(ret.isEmpty());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertSame("STR",ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals(0,ret.length());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(true,MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotNull(MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotSame(false,MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertSame(true,MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(false,MyClass.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNull(MyClass.dispatch_msg_list_in_default_executor());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertSame(expectedObject,actualObject);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(collection.isEmpty());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotSame(unexpectedObject,actualObject);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertArrayEquals(expectedArray,actualArray);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotEquals(3,collection.size());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertEquals(0,collection.size());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(condition);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertFalse(!condition);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNull(nullObject);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(notNullObject);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.get(1).field("STR").toString().length());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	???;	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.get(1).field("STR").toString().contains("STR"));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(10,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertSame(db.getClass().getSimpleName(),"STR");	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals("STR",qResult.get(0).field("STR").toString());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.get(0).field("STR").toString().equals("STR"));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc,doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	???;	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc,manager.getRecord());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.fields()>0);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc,doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals("STR",doc.field("STR"));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNull(doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc2.containsField("STR"));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNull(null);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotSame(10,getObjectSize(4.0f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	???;	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertFalse(getObjectSize(0.0f)<0);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(0,getObjectSize(5.0f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(4,getObjectSize(3.14f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotNull(getObjectSize(3.0f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertSame(FLOAT_SIZE,getObjectSize(3.0f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(5,getObjectSize(2.718f));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(1.0f)>0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(getSequence("STR").getCurrentValue()>=0);	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertTrue(getSequence("STR").getStart()<getSequence("STR").getEnd());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals("STR",getSequence("STR").getType().name());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNull(getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(getSequence("STR").getCacheSize(),getSequence("STR").getStart());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotNull(getSequence("STR"));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertFalse(getSequence("STR").isCyclic());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(getSequence("STR").getIncrement(),getSequence("STR").getStart());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals("STR",getSequence("STR").getName());	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertNotEquals(getSequence("STR"),getSequence("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(((Map)function.execute(null,null,null,resultInternal,null)).containsKey("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	???;	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(((List)function.execute(null,null,null,resultInternal,null)).contains("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotEquals(0,((Set)function.execute(null,null,null,resultInternal,null)).size());	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(function.execute(null,null,null,resultInternal,null));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotEquals(null,function.execute(null,null,null,resultInternal,null));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	???;	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()==1);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotSame(null,res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(result,null);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(result.getObject(),obj);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result.getObjectName().getKeyPropertyList());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(result.getObject(),null);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result.getAttributeSetters().size()>0);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(result.getAttributeSetters().size(),attributeSetters.size());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result.getAttributeSetters());	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObjectQueryInfo);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result.getObjectName().getDomain());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNull(stdIn);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals(0,Thread.currentThread().getId());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotSame(serverStartThread,Thread.currentThread());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	???;	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotSame(stdIn,System.in);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR","STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotNull(serverStartThread);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(null,response.getEntity());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNull(request.getFirstHeader("STR"));	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",request.getFirstHeader("STR").getValue());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity().getContent());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",EntityUtils.toString(response.getEntity(),"STR"));	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().getContentLength()==-1);	0
GZipIntegrationTest	chunkedContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getEntity().isChunked());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(),attrs());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertSame(attrs(),attrs());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(),attrs(attrs(1,"STR")));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull(attrs(attrs()));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNull(attrs(null));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs().isEmpty());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs().hashCode()>=0);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertSame(attrs(),attrs(Collections.emptyList()));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(),attrs(),"STR");	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertFalse(attrs().contains(null));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotSame(null,person);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(0,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(-1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(person);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotSame(0,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.size()>0);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNull(testCase.getProperty("STR"));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.containsAll(list));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertSame(list.get(0),result.get(0));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().allMatch(worker->worker.getType().equals("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(list.size(),result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNull(newWorkerQuery().setTargetType(TargetType.ALL).execute(list));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(((Deployment)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(resource,override);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answerinstanceofDeployment);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertFalse(((Deployment)answer).getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",((Deployment)answer).getMetadata().getName());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(resource.getMetadata().getAnnotations().get("STR"),override.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotSame(override,answer);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotSame(resource,answer);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",resource.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertSame(fileString.trim(),"STR");	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals(fileString,"STR");	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(fileString.toLowerCase(),"STR");	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(fileString.length(),0);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.endsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame(fileString,"STR");	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.exists());	1
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals("STR",Files.readString(tempSrcFile.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(targetDir.isDirectory());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(tempTargetFile.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,Files.list(srcDir.toPath()).count());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(Files.isDirectory(srcDir.toPath()));	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotNull(util);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(util.getServerDirectory().exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNull(util.getConfigDirectory());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(ClassName.isRecognized());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(ClassName.wordforms.size()>0);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest.analyze("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(0,ClassName.wordforms.size());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(locītājs.isCacheCleared());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(locītājs.enablePrefixes);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(locītājs.areDefaultSettingsApplied());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(ClassName.isRecognized());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(5,w.length());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals("STR",w.toLowerCase());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.equals("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	???;	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotEquals(0,w.lastIndexOf("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.startsWith("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isEmpty());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotSame(w,locītājs.analyze("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.endsWith("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	???;	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).get(0).getText().contains("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertSame(sentences,Splitting.tokenizeSentences(locītājs,"STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(5,tokens.size());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(text.length()<=30);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals("STR",tokens.get(tokens.size()-1).getText());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(text);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.get(2).getText());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens.get(4));	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals("STR",text);	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(KoreanPosJava.Noun,tokens.get(3).getPos());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(KoreanPosJava.Adjective,tokens.get(1).getPos());	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens.get(0).getType());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(null));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat("STR"));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.NEUTRAL,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.ACCEPT);	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(MyClass.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(MyClass.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(MyClass.isEmpty(null));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals(0,activityState.getState().get("STR").getAsString().length());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals("STR",activityState.getRegistration());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals("STR",activityState.getAgent().getMbox());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState.getState());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertEquals("STR",activityState.getRegistration());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertTrue(activityState.getAgent().getMbox().length()>0);	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertTrue(activityState.getActivityId().startsWith("STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotEquals(0,activityState.getState().entrySet().size());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertTrue(activityState.getStateId().contains("STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertFalse(false);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNull(null);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(true);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertNotEquals("STR",Verbs.attended().getInfinitive());	0
VerbsTest	testAttended	assertNotNull(actual);	assertSame(Verbs.attended(),Verbs.attended());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotSame(Verbs.attended(),Verbs.createVerb("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertFalse(Verbs.attended().isIrregular());	0
VerbsTest	testAttended	assertNotNull(actual);	assertEquals("STR",Verbs.attended().getInfinitive());	0
VerbsTest	testAttended	assertNotNull(actual);	assertEquals(7,Verbs.attended().getConjugation());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNull(Verbs.attended().getPastParticiple());	0
VerbsTest	testAttended	assertNotNull(actual);	assertSame(Verbs.attended(),Verbs.createVerb("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	???;	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(Verbs.attended());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNull(caughtException);	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNotNull(spawner);	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(spawner.isAlive());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertEquals("STR",spawner.getTestCaseId());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	???;	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertNotEquals("STR",caughtException.getMessage());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertFalse(Thread.currentThread().isInterrupted());	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertSame(object1,object1);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(object1,object2);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(expectedValue,actualValue);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(false);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(true);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNull(null);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(unexpectedValue,actualValue);	0
XPathFilterTest	testScriptExtraction	assertEquals(1,output.getEmitted().size());	assertArrayEquals(expectedArray,actualArray);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNull(raw);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertEquals(expectedResourceBase,resourceBase);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertArrayEquals(expectedDescSize,desc.size());	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotEquals(null,raw);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(desc!=null&&!desc.isEmpty());	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(!(resourceBase==null||resourceBase.length()==0));	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(resourceBase);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotSame(null,resourceBase);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertFalse(resourceBase.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertSame(env,convert(env));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(env,convert(env));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	???;	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertNotNull(MyClass.toDBC(null));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",MyClass.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertNotEquals("STR",MyClass.toDBC("STR"));	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertTrue(!MyClass.toDBC("STR").isEmpty());	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertFalse(MyClass.toDBC("STR").isEmpty());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotSame(newPuzzle(),p);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertSame(p,p);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNull(null);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(10,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()<0);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(4,p.getBlankIndex());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNull(s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(false,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution()==true);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(true,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution()==false);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertSame(p,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotSame(p,s.isSolution());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(example.getName().length()<100);	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(example.getName().length()>0);	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertSame(previousName,example.getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotEquals("STR",example.getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(example.getName().startsWith("STR"));	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertFalse(example.getName().endsWith("STR"));	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertEquals("STR",example.getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(example.getName().contains("STR"));	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertNotNull(example.getName());	0
JenkinsTest	testGetName	assertEquals("STR",newJenkins(env()).getName());	assertTrue(example.getName().equals(example.getName().toLowerCase()));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(matches("STR","STR"));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(anotherCompositeKey,compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(false,compositeKey.equals(anotherCompositeKey));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()==anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(!compositeKey.equals(anotherCompositeKey));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,null);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.getClass().equals(anotherCompositeKey.getClass()));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(focal.getName().length()>0);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(focal.getName().isEmpty());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertSame("STR",focal.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR",focal.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",focal.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame("STR",focal.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(focal.getName());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(20,result.stream().count());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNull(result.getExecutionPlan());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.hasNext());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.stream().anyMatch(Objects::nonNull));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotEquals(0,result.stream().findAny().orElse(null));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotEquals(Optional.empty(),result.stream().findFirst());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotSame(0,result.stream().count());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result.stream().findFirst().orElse(null));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	???;	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertFalse(result.stream().allMatch(Objects::isNull));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(storage.getLiveListener(10));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(10,storage.getLiveListenerCount());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotEquals(0,events.size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertFalse(mock.isEmpty());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertSame(request,storage.getLivePushRequest(10));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotSame(storage.getLiveQueryPushRequest(10),storage.getLiveQueryPushRequest(20));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	???;	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotSame(request,storage.getLiveQueryPushRequest(20));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(storage);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNull(request.getClusterIds());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(document.equals(extr));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document.field("STR",OType.EMBEDDED),extr.field("STR",OType.LINK));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.hasField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(document.field("STR",OType.EMBEDDED),extr.field("STR",OType.EMBEDDED));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNull(document.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.field("STR",OType.EMBEDDED).fieldNames().contains("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	???;	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document.field("STR",OType.EMBEDDED),extr.field("STR",OType.EMBEDDED));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(document,extr);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(4,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.stringPropertyNames().contains("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.getProperty("STR").equalsIgnoreCase("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals("STR",props.getProperty("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals("STR",props.getProperty("STR","STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.keySet().contains("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.containsKey("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(getSystemPropertyWithMavenPropertyAsFallback(properties,"STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals("STR",getSystemPropertyWithMavenPropertyAsFallback(null,"STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertSame(tokens.getFirst(),tokens.get(0));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.get(1).getText().equals("STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(newWord("STR"),tokens.getLast());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotSame(newWord("STR"),tokens.get(1));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.get(0).getText().equals("STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens.get(2));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frameinstanceofPongFrame);	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,newPongFrame().getOpcode());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.toString().startsWith("STR"));	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotNull(frame);	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotEquals(0,frame.hashCode());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNull(frame.getName());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertFalse(frame.isClosed());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertSame(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotSame(frame,newPongFrame());	0
PongFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(frame.getClass(),PongFrame.class);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals(protocol0.hashCode(),protocol0.copyInstance().hashCode());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0.hashCode(),protocol0.copyInstance().hashCode());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protocol0.copyInstance().getName().isEmpty());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals(protocol0,protocol0.copyInstance());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNull(protocol0.copyInstance().getParent());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.toString(),protocol0.copyInstance().toString());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	???;	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protocol0.copyInstance());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertSame(protocol0.getClass(),protocol0.copyInstance().getClass());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protocol0.copyInstance());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotSame(unexpectedObject,pool.getUnderlyingObject());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertTrue(pool.getConnectionStatus()==ConnectionStatus.CONNECTED);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotEquals("STR",pool.getSomeOtherValue());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertSame(expectedObject,pool.getUnderlyingObject());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(pool);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertEquals("STR",pool.getSomeValue());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertArrayEquals(expectedArray,pool.getArray());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertFalse(pool.isClosed());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNull(pool);	1
RpcConnectionManagerTest	testGet	assertNull(pool);	assertFalse(pool.isExpired());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(parser.parse(sample1,true));	1
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(resultWithValidation,resultWithoutValidation);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(12,parser.parse(sample1,true).getAttributes().size());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(parser);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	???;	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(!sample1.isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(parser.parse(sample1,true).getSname());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(sample1);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals("STR",parser.parse(sample1,true).getSname());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotEquals(expected.toString(),fromString.toString());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertFalse(expected==fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotSame(expected,fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.equals(fromString));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertNull(null);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertSame(UL.class,fromString.getClass());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertArrayEquals(expected.getBytes(),fromString.getBytes());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotEquals(expected.hashCode(),fromString.hashCode());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame(sourceURL,filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertSame(metadata,sourceMetadata);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals(sourceMetadata,metadata);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(null,"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Arrays.asList(1,null,"STR",null,true),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Arrays.asList('a','b','c'),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(Collections.singletonList("STR"),"STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",join(null,null));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotNull(a);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertFalse(false);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNull(null);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotSame(-1,a[0]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(-4,a[1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-4,a[5]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a.length);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertSame(a.length,5);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	???;	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a[4]==0);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals("STR",sql.getFrom());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertSame(sql,sql.clone());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNull(sql.getWhere());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotNull(sql);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.getLimit()==10);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals(0,sql.getOrderBy().size());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotSame(newTSqlBuilder(),sql);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.getSelect().size());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertFalse(sql.isDistinct());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	???;	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(indexName.get("STR")!=null);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(indexName.get("STR"),indexName.get("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(indexName.get("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertSame(indexName.get("STR"),indexName.get("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals("STR",indexName.get("STR").getName());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",indexName.get("STR").getName());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals(indexName.get(null),indexName.get(null));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNull(indexName.get("STR"));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.containsAll(Arrays.asList("STR","STR","STR")));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(10,result.size());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	???;	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotNull(result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertFalse(result.contains("STR"));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(Collections.emptyList(),result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertSame(Arrays.asList("STR","STR","STR"),result);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(notExpectedList,results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.contains(someObject));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	???;	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertSame(expectedList,results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(5,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(expectedValue,actualValue);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(object);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotSame(expectedList,results);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.contains(document));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNull(parentObject);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(5,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>=5);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotSame(anotherResultSet,qResult);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.contains(expectedResult));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.get(0).containsKey("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.get(0).fieldNames().length);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotEquals(OType.DOUBLE,simpleKeyIndexDefinition.getTypes()[0]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertTrue(simpleKeyIndexDefinition.getTypes().length==2);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertFalse(simpleKeyIndexDefinition.getTypes().length==0);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotSame(OType.BYTE,simpleKeyIndexDefinition.getTypes()[1]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.INTEGER,simpleKeyIndexDefinition.getTypes()[0]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	???;	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(simpleKeyIndexDefinition);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.STRING,simpleKeyIndexDefinition.getTypes()[1]);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNull(null,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()==false);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotSame("STR",newString("STR"));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue("STR".contains("STR"));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(false);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNull(null);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(true);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotEquals(3,7);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(10,5+5);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	???;	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotNull("STR");	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue((Double)result<=0);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(Double.NEGATIVE_INFINITY,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(Math.abs(-10.5D),(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(Math.abs(-10.5D)+1,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(Double.NaN,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0.0,(Double)result-1);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertFalse((Double)result<0);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(Double.POSITIVE_INFINITY,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0.0,(Double)result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals("STR",String.valueOf(result));	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertTrue(resultinstanceofInteger);	1
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(4,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotEquals(6,result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotSame(exp.childExpressions,exp.operators);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertFalse(resultinstanceofString);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(OMathExpression.Operator.BIT_AND,exp.operators.get(0));	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertSame(exp.childExpressions.get(0),integer(5));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertSame(3,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNull(countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(countClass("STR")<=10);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(5,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(countClass("STR")<100);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame(2,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(countClass("STR")>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(0,countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(7,countClass("STR"));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotEquals(null,result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(true,result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotSame(false,result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotSame(null,result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotEquals(false,result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNull(result.hasNext());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertSame(true,result.hasNext());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(false,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(null,vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotSame(false,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotSame(null,vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	???;	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertSame(true,vārds.isRecognized());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertSame(expectedObject,getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(getProperty("STR")==0);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals(getProperty("STR"),"STR");	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(getProperty("STR")>0);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(getProperty("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	???;	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(getProperty("STR").matches("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(getProperty("STR")>=minValue&&getProperty("STR")<=maxValue);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame(expectedObject,getProperty("STR"));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNull(actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected,actual);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals("STR",method.getName());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotSame(null,method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotSame(null,clazz);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals("STR",method.getDeclaringClass().getSimpleName());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getName().equals("STR"));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getModifiers()==Modifier.PUBLIC);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(true,Modifier.isStatic(method.getModifiers()));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(0,method.getParameterCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(focal.agentCount()==0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(0,focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(focal.agentCount()>=3);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(-1,focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(focal.agentCount()<3);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(4,focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(agents.size(),focal.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(focal.agentCount()>0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(workers);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(10,workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(workerCount()>=0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNull(null);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(workerCount()==0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(workerCount()<10);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotSame(0,workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(0,workerCount());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(expectedString,jmxmBeanConnectionFactory.toString());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotEquals(jmxmBeanConnectionFactory,null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(expectedValue,actualValue);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertTrue(jmxmBeanConnectionFactoryinstanceofJMXMBeanConnectionFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertFalse(jmxmBeanConnectionFactory.isOpen());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(mockJmxConnector,jmxmBeanConnectionFactory.getJmxMBeanConnector());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(jmxmBeanConnectionFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNull(jmxmBeanConnectionFactory.getConnectionId());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertSame(mockJmxMbeanConnectorFactory,jmxmBeanConnectionFactory.getJmxMBeanConnectorFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertArrayEquals(expectedArray,actualArray);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotSame(groupBy(Arrays.asList(1,2,3,4),x->x,equality).keySet(),groupBy(Arrays.asList(5,6,7,8),x->x,equality).keySet());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(groupBy(Arrays.asList(1,2,3,4),x->x,equality));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(groupBy(Arrays.asList(1,2,3,4),x->x,equality).isEmpty());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(groupBy(Arrays.asList(1,2,3,4),x->x,equality),groupBy(Arrays.asList(4,3,2,1),x->x,equality));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(6,groupBy(Arrays.asList(1,2,3,4),x->x,equality).values().stream().mapToInt(List::size).sum());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(4,groupBy(Arrays.asList(1,2,3,4),x->x,equality).values().stream().mapToInt(List::size).sum());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	???;	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(groupBy(Arrays.asList(1,2,3,4),x->x,equality).size()==2);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertSame(groupBy(Arrays.asList(1,2,3,4),x->x,equality).keySet(),groupBy(Arrays.asList(2,4,6,8),x->x,equality).keySet());	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertFalse(frame.isStopped());	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNotSame(newContinuousFrame(),frame);	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertTrue(frameinstanceofContinuousFrame);	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	???;	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertSame(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertTrue(frame.getData().length>0);	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNotEquals(null,frame.getInfo());	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNotNull(frame);	0
ContinuousFrameTest	testExtends	assertEquals("STR",true,frameinstanceofDataFrame);	assertNotSame(Opcode.CONTINUOUS,frame.getOpcode());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	???;	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertFalse(m==EmptyMetronome.INSTANCE);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofMetronome);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertSame(masterMetronome,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertEquals(EmptyMetronome.class,m.getClass());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNull(m.getTick());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals("STR",m.toString());	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(null,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNull(getPidFromBeanString("STR"));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(getPidFromBeanString("STR")>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(getPidFromBeanString("STR"));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(getPidFromBeanString("STR")!=null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals("STR",getPidFromBeanString("STR").toString());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertSame(1234,getPidFromBeanString("STR"));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,getPidFromBeanString("STR"));	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertFalse(getPidFromBeanString("STR")==null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals("STR",getPidFromBeanString("STR").toString());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(getPidFromBeanString("STR"),getPidFromBeanString("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(mergeMaps(mapB,mapA),expectedB);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(mergeMaps(mapA,mapB).containsKey("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotSame(mergeMaps(mapA,mapB),mergeMaps(mapB,mapA));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotNull(mergeMaps(mapA,mapB));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertFalse(mergeMaps(mapA,mapB).isEmpty());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(mergeMaps(null,mapB).containsValue("STR"));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertSame(mergeMaps(mapA,null),mapA);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNull(mergeMaps(null,null));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(mergeMaps(mapA,mapB),expectedA);	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertFalse(mergeMaps(mapA,mapB).containsKey("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotSame(5,10);	0
ProfileUtilTest	simple	assertNotNull(is);	assertFalse(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(newObject());	0
ProfileUtilTest	simple	assertNotNull(is);	assertFalse(false);	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(2,3);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(true);	0
ProfileUtilTest	simple	assertNotNull(is);	assertSame("STR","STR");	0
ProfileUtilTest	simple	assertNotNull(is);	assertNull(null);	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(1,1);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(0,array.size().intValue());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array.containers);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotSame(array,newCASObjectArray<Integer>()->{ });	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.size.intValue());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNull(array.add(null));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertFalse(array.size.longValue()<0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size.intValue()>-1);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertSame(array,array);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size.get()>=0);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotSame(result.next(),result.next());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(true,result.hasNext());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNull(result.next());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertSame(result.next(),result.next());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(-1,result.hashCode());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	???;	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(false,result.hasNext());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result.next());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.keys.size()>0);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.keys.size()>=minElements);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey.keys);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.keys.contains(specificKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKeyinstanceofOCompositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(key1,key2);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.keys.contains(specificKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.keys.isEmpty());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals(null,prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals("STR",prop.toString());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(propinstanceofExpectedClass);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals("STR",prop.getName());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(anotherProp,prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(expectedHashCode,prop.hashCode());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop.getName());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isDirty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.size()==1);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertSame(doc,map.getDocument());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame(newODocument(),map.getDocument());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(db);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(OType.EMBEDDEDLIST,prop.getType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(prop);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(classA);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(schema);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(schema.existsClass("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNull(prop.getLinkedType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.existsProperty("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertSame(c0.getName(),"STR");	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.size()>0);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,c1.properties().size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotNull(result);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertFalse(result.isEmpty());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotEquals(0,result.size());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(doc.containsField("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNull(null);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotSame(db,schema);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertEquals(1,result.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(db.command(newOCommandSQL("STR")).execute(),0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(8,db.getMetadata().getSchema().getClass("STR").properties().size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(5,friendList.length);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNull(db.command(newOCommandSQL("STR")).execute());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	???;	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNull(nullObject);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertFalse(!someCondition);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotNull(notNullObject);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(someCondition);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertArrayEquals(expectedArray,actualArray);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotEquals(unexpectedValue,actualValue);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(expectedValue,actualValue);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertSame(expectedObject,actualObject);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotSame(differentObject,actualObject);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals(response,null);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals(response.getNonce(),response.getOtp());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(response.hashCode(),response.hashCode());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame(client,null);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.isValid());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals(response.getNonce(),"STR");	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(response.getStatus(),"STR");	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(count1,count2);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()<=totalTurtles);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(initialCount,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()<=maxTurtleCount);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(2,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(initialCount-1,panel.getTurtleCount());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(expectedDockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(newInteger(5),newInteger(5));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(newObject());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(false);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(5,2+3);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(expectedDockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(true);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertSame("STR","STR");	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNull(null);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(10,5*2);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	???;	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.contains(atom));	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertArrayEquals(newAtom[3],rootAtoms.toArray());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.parallelStream().allMatch(a->a.getSize()>0));	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(3,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNull(atom);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertSame(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,toArray(f1.data));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(MPEGTestConst.concatArrays(frame1,frame2),toArray(f1.data));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(Arrays.copyOf(frame1,frame1.length),toArray(f1.data));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame2.length,toArray(f1.data).length);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(Arrays.equals(MPEGTestConst.mpeg(),toByte(toArray(f1.data))));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertFalse(Arrays.equals(frame2,toArray(f1.data)));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1[0],toArray(f1.data)[0]);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(Arrays.equals(frame1,toArray(f1.data)));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(Arrays.asList(toArray(f1.data)).containsAll(Arrays.asList(frame1)));	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(frame1.length,toArray(f1.data).length);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertFalse(expected!=actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(expected==actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.isRecognized());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(true,locītājs.enableAllGuesses);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.isRecognized());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(true,locītājs.isRecognized());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,locītājs.wordforms.size());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(false,locītājs.isRecognized());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(locītājs.wordforms);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotSame(userProcessors.get(processor.interest()),processor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors.get(processor.interest()));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(userProcessors.get(processor.interest()),processor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(newSimpleServerMultiInterestUserProcessor(),multiInterestUserProcessor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsKey(processor.interest()));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(preProcessor,processor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotSame(preProcessor,processor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(!(preProcessor.interest().equals(processor.interest())));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(StringUtils.isBlank(processor.interest()));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize,focal.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize2,focal.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,focal.count(null));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize1,focal.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(expectedSize+1,focal.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,focal.count("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(focal.count("STR")>=0);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.start());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(2,matcher.end());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals("STR",matcher.input());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(7,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(Focal.isNonZero(null));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(Focal.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(Focal.isNonZero("STR"));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(history.size(),s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNull(null);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertSame(history.size(),s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,db.getClusters());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,clusterName.length());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,db.countClusters());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,getClusterIdByName(clusterName));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals("STR",clusterName);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(5,getClusterIdByName("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.isClosed());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertFalse(id==0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(OType.STRING,prop.getType());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getMax()>=prop.getMin());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNull(prop.getCollate());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(id>0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertSame(oSchema,prop.getOwnerClass().getSchema());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(0,id);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(prop);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals("STR",next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(null,next);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(execute);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertSame(execute,db.command(newOCommandSQL("STR")).execute());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(execute,db.command(newOCommandSQL("STR")).execute());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	???;	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(execute.isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(db.command(newOCommandSQL("STR")).execute(),execute.iterator().next());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertSame("STR",proc.getLoader().getMessage());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(proc);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.getLoader().isLoaderExecuted());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertEquals(5,proc.getExtractor().getOutputSize());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotEquals(0,proc.getExecutionTime());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotSame("STR",proc.getLoader().getMessage());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.isExecutionSuccess());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertFalse(proc.getTransformer().getTransformedData().isEmpty());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNull(proc.getExtractor().getError());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.isSetupDone());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getSuperClass()!=null);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazzinstanceofOClass);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.getName().isEmpty());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.equals(db.getMetadata().getSchema().getClass("STR")));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz.getSuperClass());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getClassType().equals(OClass.EDGE));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNull(clazz.getShortName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getProperty("STR")==null);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.hashCode());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotSame(param,createValue(param));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(Collections.singletonMap("STR","STR"),createValue("STR"));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertSame(param,((Collection)createValue(param)).iterator().next());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	???;	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotNull(createValue("STR"));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertEquals(0,((List<Object>)createValue()).size());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(5,((List<Object>)createValue(Arrays.asList(1,2,3))).size());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(createValue());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.hasRoute("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,prioritizer.getRouteCount());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNull(prioritizer.getHandler("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(200,prioritizer.getRoutePriority("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNull(prioritizer.getRoute("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(0,prioritizer.getRoutePriority("STR"));	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getRoutes());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getRouteCount());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getRouteMappings().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getAllRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(200,routePrioritizer.getPriority(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getAllRoutes().size());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPriority(null)==100);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	???;	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.containsRoute(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.hasRoute(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNull(routePrioritizer.getRoute(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer,newDefaultRoutePrioritizer());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(0,response.getNonce().length());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.isRetryable());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.getNonce().isEmpty());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(response.getStatus(),"STR");	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals("STR",response.getStatus());	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(1.23,4.56,7.89),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(newObject(),newObject(),newObject()),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(true,false,true),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(123L,456L,789L),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(1,2,3,4,5),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList(1,"STR",true),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",join(Arrays.asList('a','b','c','d'),"STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNull(actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(expected==actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(expectedinstanceofAgent);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotSame(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected,verb.getDisplay());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(verb.getDisplay().containsKey("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(verb.getDisplay().isEmpty());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(verb.getDisplay());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.equals(verb.getDisplay()));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNull(verb.setDisplay(null));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsValue("STR"));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getAttachments().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getAttachments().containsKey(HASH));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(1,a.getAttachments().size());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertSame(statements,a.getStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals("STR",a.getAttachments().get(HASH).getType());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertArrayEquals("STR".getBytes("STR"),a.getAttachments().get(HASH).getAttachment());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getAttachments().get(HASH).getType().equals("STR"));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(RESPONSE_MESSAGE,a.getResponseMessage());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor,null);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(5,extractor.getCount());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofBasicExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNull(config.getSomething());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(extractor.getClass(),BasicExtractor.class);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(config,extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertFalse(groupBy(Arrays.asList("STR","STR","STR"),len).containsValue(Collections.emptyList()));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNull(groupBy(Arrays.asList("STR","STR"),len).get(0));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(groupBy(Arrays.asList("STR","STR","STR"),len).containsKey(5));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertSame(groupBy(Arrays.asList("STR","STR"),len).keySet(),groupBy(Arrays.asList("STR","STR"),len).keySet());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(groupBy(Collections.emptyList(),len).size()==0);	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotSame(groupBy(Arrays.asList("STR","STR"),len).get(3),groupBy(Arrays.asList("STR","STR"),len).get(4));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(groupBy(Collections.emptyList(),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotEquals(groupBy(Arrays.asList("STR","STR","STR"),len).get(3),groupBy(Arrays.asList("STR","STR","STR"),len).get(5));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertFalse(groupBy(Arrays.asList("STR","STR","STR"),len).isEmpty());	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNotNull("STR");	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNotEquals(10,20);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR","STR");	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertFalse(4<1);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNull(null);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	???;	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(5>2);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNotSame("STR","STR");	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertSame(str,str);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals(0.0001,0.0002);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotSame(0,locītājs.analyze("STR").indexOf("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals("STR",locītājs.analyze("STR").trim());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertSame(0,locītājs.analyze("STR").indexOf("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w!=null);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	???;	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotEquals("STR",locītājs.analyze("STR").trim());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotEquals(0,locītājs.analyze("STR").length());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getName().startsWith("STR"));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertFalse(methods.isEmpty());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotEquals(0,methods.size());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getParameterCount()<3);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals(1,methods.size());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	???;	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNull(method.getReturnType());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals("STR",method.getDeclaringClass().getSimpleName());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotSame(methods.get(0),methods.get(1));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertFalse(performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.startsWith("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals(OPERATION_COUNT_FORMAT_LENGTH,performance.length());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(SECONDS,timeUnit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration>durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(started);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertEquals(MILLISECONDS.toMillis(1),duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertSame(MILLISECONDS,timeUnit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNull(durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	???;	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(SECONDS.toMillis(2),durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertEquals(SECONDS.toMillis(3),durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,FOCAL.ebmlSignedLength(-0x3F));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(7,FOCAL.ebmlSignedLength(-0x00FFFFFFFFFFFFL));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,FOCAL.ebmlSignedLength(-0x0FFFFF));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,FOCAL.ebmlSignedLength(-0x100000000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,FOCAL.ebmlSignedLength(-100000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,FOCAL.ebmlSignedLength(-10000000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,FOCAL.ebmlSignedLength(-0x03FFFFFFFFL));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,FOCAL.ebmlSignedLength(-0x1FFF));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,FOCAL.ebmlSignedLength(-0x07FFFFFF));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,FOCAL.ebmlSignedLength(-0x01FFFFFFFFFFL));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(builder);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler!=null);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(5,handler.getMaxContainers());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals("STR","STR");	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertSame(builder.getContainers().size(),2);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotSame(builder.getContainers(),null);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler==null);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull("STR");	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertSame("STR","STR");	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(false,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(true,find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNull(null);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse(find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotSame(object1,object2);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals("STR","STR");	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertArrayEquals(expectedArray,actualArray);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertSame(s.getEstimatedCost(),s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(10,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertFalse(s.getEstimatedCost()!=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNull(null);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()==0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(5,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(5,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	???;	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count("STR")<0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,cm.count(null));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(10,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(3,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertSame(0,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(cm.count("STR"));	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(null,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	???;	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR")<=11.0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR")>10.0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(10.78,res.get(0).field("STR"));	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).fieldNames().get(0));	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	???;	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertSame(false,v.getId().isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v.getId().isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(false,v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotSame(true,v.getId().isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNull(v.getId().isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.getId().isPersistent());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals(true,v.isPersistent());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNull(document.field("STR"));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(resultinstanceofCollection);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(containsCollection||compositeKeys.size()>1);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertSame(firstKey,compositeKeys.get(0));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotSame(firstKey,compositeKeys.get(1));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals("STR",stringMap.get("STR"));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertFalse(stringMap.isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(compositeIndexDefinition);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(0,collectionResult.size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(document.containsField("STR"));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(result.getKeys().containsAll(Arrays.asList(keys)));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(keys[0],result.getKeys().get(0));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(ODefaultComparator.INSTANCE,result.getComparator());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(!result.getKeys().isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertArrayEquals(keys,result.getKeys().toArray());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertFalse(result.getKeys().contains(null));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(keys.length,result.getKeys().size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(resultinstanceofOCompositeKey);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertSame(from.getClusterId(),100);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(from.getClusterId()>=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(100,from.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(to.getClusterId()<0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from.getClusterId(),to.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNull(from.getClusterId());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertFalse(v1.getIdentity().isNew());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals("STR",v1.getClassName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertSame(database.getName(),v1.getDatabase().getName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals("STR",v1.getIdentity().getClusterName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame(v1,database);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertSame(database.getMetadata().getSchema().getClass("STR"),v1.getSchemaClass());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals(0,v1.getIdentity().getClusterId());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1instanceofODocument);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR")!=null);	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	???;	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR").isEmpty());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotEquals(null,item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotSame(null,item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(true,item.getProperty("STR").containsKey("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(FocalClass.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(FocalClass.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(FocalClass.matches("STR","STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	???;	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotSame(f,folder.getRoot());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNull(job.getDetails());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(folder.getRoot());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.isDirectory());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(f.getName(),"STR");	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals(f.getCanonicalPath(),System.getProperty("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.getPriority()>0);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertSame(f.getParentFile(),folder.getRoot());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	???;	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertTrue(obj.getBranch()!=null);	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotEquals("STR",obj.getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertFalse(obj.getBranch().isEmpty());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertSame("STR",obj.getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",obj.getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotNull(obj.getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertTrue(obj.getBranch().equals("STR"));	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertNotSame("STR",obj.getBranch());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(2,attributeNames001.size());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	???;	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(attributeSetters001.containsKey("STR"));	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(mockObjectQueryInfo001.getAttributeSetters(),attributeSetters001);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotEquals(0,polledObjects.size());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(mockAccessConnection.batchQueryAttributes(createAttributeMapMatcher(queryAttributeMap)),resultAttributeMap);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(mockObjectQueryInfo001.getTarget(),polled001);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(mockLoggerinstanceofLogger);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(queryAttributeMap.containsKey(objectName001));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(newValue,field.get(setFieldTest));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertSame(instance,setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(field.get(setFieldTest));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(expectedType,field.getType());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertSame(expectedField,field);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(field.isAccessible());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(field.get(setFieldTest),newValue);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotSame(result.get("STR"),result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.entrySet().stream().allMatch(entry->entry.getKey().length()>0));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotSame(result,TagUtils.parseTags("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNull(result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(2,workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(0,workerCount());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	???;	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,workers.size());	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotNull(worker2);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNull(worker3);	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertSame(worker1,workers.get(0));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workers.stream().allMatch(worker->worker.getStatus().equals("STR")));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertTrue(workers.contains(worker1));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertFalse(workers.isEmpty());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(FileUtils.sizeOf(configFile),FileUtils.sizeOf(targetFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.isFileNewer(targetFile,FileUtils.currentTimeMillis()));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(FileUtils.readFileToString(targetFile).isEmpty());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(FileUtils.readFileToString(configFile),FileUtils.readFileToString(targetFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotSame(configFile,targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotSame(FileUtils.checksumCRC32(targetFile),FileUtils.checksumCRC32(configFile));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.get(0).startsWith("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(expectedDockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(expectedDockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.get(1).endsWith("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(expectedDockerfileLines.get(0),dockerfileLines.get(1));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNull(dockerfileLines.get(2));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertSame(expected,"STR");	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(null);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.matches("STR"));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNull(cm.subcolor('g'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.subcolor('j'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(cm.subcolor('b')!=0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(cm.subcolor('d')==-1);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(cm.subcolor('f'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertSame(1,cm.subcolor('h'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(0,cm.subcolor('e'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(5,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(0,cm.subcolor('c'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotSame(2,cm.subcolor('i'));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(curframe,createdFrame.get(0));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals("STR",createdFrame.get(0).getPayloadData().toString());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame.get(0));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(null,createdFrame.get(0));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNull(curframe.getOpcode());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0).isTransfered());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(curframe.isFin());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(curframe.getPayloadData().capacity()>0);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotSame(newTextFrame(),curframe);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceMetadata);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(testUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(urlFilter,urlFilter);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(sourceUrl,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse.getStatusCode()==400);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(handshakeResponse.isSuccessful());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotSame(handshakeResponse,newResponse());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertEquals(handshakeResponse.getStatusCode(),400);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(handshakeResponse.getStatusCode(),200);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNull(handshakeResponse.getBody());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse.getStatusCode()!=200);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse.getBody()==null);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotSame(handshakeResponse.getStatusCode(),200);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(res.get(0).field("STR"),null);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotSame(res.size(),0);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(res.get(0).field("STR"),"STR");	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0).containsField("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(res.size(),0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(12345L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotSame(456L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertSame(123L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(9999L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertFalse(readAsLong(bytes)<0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(readAsLong(bytes)>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0L,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNull(null);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNull(getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotNull(getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals(obj1,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertFalse(getProperty("STR").isEmpty());	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertTrue(getProperty("STR").startsWith("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotEquals("STR",getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertNotSame(obj1,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	???;	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals("STR",getProperty("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.BINARY,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.BINARY,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.INTEGER,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType(null));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotSame(someTx,result.iterator().next());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,result.stream().count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.getExecutionPlan().contains("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotSame(oneMore,result.iterator().next());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result.iterator().next());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.hasNext());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.iterator().hasNext());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotEquals(0,result.stream().count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.isClosed());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.countClass("STR")>0);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(importer.importDatabase().isImported());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(output.size()>0);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(existsClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(importer.hasErrors()||export.hasErrors());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()<100_000);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull(output.toByteArray());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(existsClass("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(database.getMetadata().getSchema().getClass("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(0,database.countClass("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(database.getURL().contains("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNull(database.getMetadata().getIndexByName("STR"));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(database.isOpen());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(database.isClosed());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals("STR",database.getName());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(database);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyTwo.getKeys(),compositeKeyOne.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.hashCode()!=compositeKeyTwo.hashCode());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNull(compositeKeyTwo.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertFalse(compositeKeyOne==compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyOne.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertArrayEquals(compositeKeyOne.getKeys().toArray(),compositeKeyTwo.getKeys().toArray());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.equals(compositeKeyTwo));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne,compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne,compositeKeyTwo);	1
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(newObject(),newObject());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(newObject());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals("STR","STR");	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(true);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertSame("STR","STR");	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(false);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	???;	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(10,20);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNull(null);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(5,routePrioritizer.getPriority());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.toString());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(true);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.compareTo(anotherRoutePrioritizer)==0);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizerinstanceofProvidedPriorityRoutePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.hashCode()>0);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPriority());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(routePrioritizer.hashCode(),anotherRoutePrioritizer.hashCode());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(ProvidedPriorityRoutePrioritizer.class,routePrioritizer.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getListeningPort()!=0);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertFalse(routerNanoHttpd.getNotImplementedHandler()==null);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getNotFoundHandler().getClass().getSimpleName().startsWith("STR"));	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(9999,routerNanoHttpd.getListeningPort());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(routerNanoHttpd.getNotImplementedHandler(),routerNanoHttpd.getNotFoundHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(RouterNanoHTTPD.class,routerNanoHttpd.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notImplementedHandler.getClass(),routerNanoHttpd.getNotImplementedHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	???;	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(notFoundHandler.getClass(),routerNanoHttpd.getNotFoundHandler());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd.getRouter());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(null,exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotSame(cause,exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exceptioninstanceofRuntimeException);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getMessage().isBlank());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNull(exception.getCause().getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	1
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	???;	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertSame("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exceptioninstanceofTestException);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(EMPTY_THROUGHPUT,performanceStats.getIntervalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(!performanceStats.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertSame(performanceStatsCollector,performanceStats.getPerformanceStatsCollector());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStatsCollector.getPerformanceStatsMap().size()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.getActivityCount()==0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotSame(a1,performanceStats.getAddress().getParent());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(EMPTY_OPERATION_COUNT,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(emptyPerformanceStatsCollector.isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNull(performanceStatsCollector.get(TEST_CASE_ID_2));	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame("STR",focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertFalse(focalInstance.toString().isEmpty());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(focalInstance.toString().contains("STR"));	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertSame(focalInstance.toString(),focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR"+agentIndex+"STR"+workerIndex,focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotNull(focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",focalInstance.toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertTrue(focalInstance.toString().startsWith("STR"));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertArrayEquals(expectedArray,methodList.toArray());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotSame(anotherList,methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertSame(expectedList,methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(expectedSize,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.contains(expectedMethod));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.getProperty("STR").startsWith("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals("STR",props.getProperty("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals("STR",props.getProperty("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertSame(serviceMock.getBranch(),"STR");	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getEnvironment().getProperty("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotSame(serviceMock.getBuildUrl(),"STR");	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNull(mojo.sourceEncoding);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.serviceName);	1
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getBuildNumber().equals("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals(moneyToStrUSDENG.convert(2.50),"STR");	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNull(moneyToStrUSD.convert(null));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrUSD.convert(7.77).contains("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrRURRUS.convert(255.75));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrCustom.convert(6.66).isEmpty());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(moneyToStrEURRUS.convert(3.00),"STR");	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER1000.convert(40.50).startsWith("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertSame(moneyToStrUAHENG,moneyToStrUAHENG);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrUAHRUS.convert(100.75).endsWith("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame(moneyToStrRUR,moneyToStrUSD);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(0,locītājs.getCacheSize());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertSame(locītājs.getAnalyzerType(),"STR");	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(m,locītājs.analyze("STR"));	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(locītājs.enableDiminutive);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,locītājs.getWordCount());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(locītājs.getDefaultSettings());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNull(locītājs.getCurrentWord());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	???;	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()==0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(null,formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertArrayEquals(newWordform[0],formas.toArray());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(focal.serialized().contains("STR"));	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotNull(focal.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotEquals("STR",focal.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertFalse(focal.serialized().isEmpty());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertNotSame("STR",focal.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertEquals("STR",focal.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertSame("STR",focal.serialized());	0
LabelTest	raw	assertEquals("STR",Label.raw("STR").serialized());	assertTrue(focal.serialized().startsWith("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertFalse(FOCAL.turn("STR","STR").isEmpty());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.turn("STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertTrue(FOCAL.turn("STR").contains("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertSame(FOCAL.turn(),FOCAL.turn());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotSame(FOCAL.turn("STR"),FOCAL.turn("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",FOCAL.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNull(FOCAL.turn());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",FOCAL.turn("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotNull(FOCAL.turn("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(null,conns.get("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(cm.getAll().containsKey("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(0,conns.size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotSame(conns,cm.getAll());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotSame(conns.get("STR"),conns.get("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()>0);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(cm.getAll().containsValue(conns.get("STR")));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(4,cm.getAll().size());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertSame("STR",s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isPresent());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals(Optional.of("STR"),s.toOptional());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.isEmpty());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.matches("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals(url.toExternalForm()+"STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals(filterResult,filterResult.toLowerCase());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.endsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>10);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(getDigestSha1(content1,content2).isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotSame(content1,content2);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNull(getDigestSha1(null,content2));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(getDigestSha1(content1,content2));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals(String.valueOf(content1).hashCode(),getDigestSha1(content1,content2).hashCode());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	???;	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals(sha1str,getDigestSha1(content1,content2));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertSame(sha1str,"STR"+DigestUtils.sha1Hex(content1));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(getDigestSha1(content1,content2).startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",getDigestSha1(content1,content2));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult.toUpperCase());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,newURL("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(0,metadata.size());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(filterResult,url.toExternalForm());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals("STR",fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	???;	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsValue("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(FOCAL.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotSame(newURL("STR"),FOCAL.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNull(FOCAL.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertSame(newURL("STR"),FOCAL.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	???;	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals(newURL("STR"),FOCAL.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertFalse(FOCAL.create("STR")==null);	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals(newURL("STR"),FOCAL.create("STR"));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertArrayEquals(poller.getPolledObjects().toArray(),polledObjects.toArray());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains(polled001));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(poller.getPolledObjects().get(0),polled001);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	???;	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertSame(poller.getPolledObjects().get(0),"STR");	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotEquals(poller.getPolledObjects().size(),0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(poller.getPolledObjects().size(),2);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().contains("STR"));	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(5,prime(3,Collections.emptySet()));	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertTrue(prime(3,Collections.singleton(2))==7);	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	???;	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(convertToBytes(0).length==0);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(10,convertToBytes(1000000).length);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(convertToBytes(1234),convertToBytes(4321));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	???;	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotNull(convertToBytes(1234));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(convertToBytes(0),convertToBytes(-1));	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(5,convertToBytes(-10).length);	0
EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(convertToBytes(255).length==2);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(networkArray.length==0);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotSame(null,networkArray);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(networkArray.length>0);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertSame(networkArray,networkArray);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,networkArray.length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	???;	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotNull(networkArray);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals(1,networkArray.length);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(5,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertArrayEquals(friendList,friendList);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotSame(db,null);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	???;	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals("STR",actualResult);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertSame(manager,manager);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(managerinstanceofSet);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(manager,manager);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertFalse(managerinstanceofODocument);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotSame(manager,manager2);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(managerinstanceofODirtyManager);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReal());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(null,manager);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(manager,manager2);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals(database.countClass("STR"),1);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.exists("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotEquals(database.newInstance().getIdentity(),newORecordId("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(database.getMetadata().getIndexManager());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.getTransactionalSize()>0);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	???;	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotSame(database.copy(),database);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNull(database.getType("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getClass("STR").isAbstract());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertSame(database.getRawGraph(),((ODatabaseDocumentInternal)database).getExecutor());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(0,countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertSame(countClass("STR"),countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(countClass("STR")>=0);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(countClass("STR"),countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(0,countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertFalse(countClass("STR")>0);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(1,countClass("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNull(null);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("STR",actuals[1]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("STR",actuals[2]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("STR",actuals[0]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("STR",actuals[1]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("STR",actuals[0]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(Arrays.asList(actuals).contains("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("STR",actuals[2]);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	???;	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertTrue(FOCAL.join(Collections.singletonList(100),"STR").endsWith("STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList(),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList(1),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList(1,2,3,4),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertNotEquals("STR",FOCAL.join(Arrays.asList(1,2,3,4),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertTrue(FOCAL.join(Collections.singletonList("STR"),"STR").startsWith("STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR","STR"),"STR"));	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertEquals("STR","STR");	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertSame(obj1,obj2);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotSame(obj1,obj2);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotEquals(5,10);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	???;	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertTrue(true);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNotNull(obj);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertFalse(false);	0
ColorTest	striped	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Color.RED.and(Color.GREEN).striped());	assertNull(null);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertSame(10,10);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertTrue(5>2);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	???;	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotSame("STR","STR");	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotEquals("STR","STR");	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertTrue(true);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNotNull(newObject());	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertEquals(2,1+1);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertFalse(false);	0
RankTest	newRank	assertEquals(attrs(attr("STR",true)),attrs(Rank.newRank()));	assertNull(null);	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.PONG,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertNotEquals(null,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	???;	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertFalse(binary.getOpcode()==Opcode.PING);	0
FramedataImpl1Test	testDefaultValues	assertEquals("STR",Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotSame(config.toYaml("STR"),config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertSame(config.toYaml("STR"),config.toYaml("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotSame("STR",repeatChar('A',3));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotNull(repeatChar('A',2));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertFalse(repeatChar('A',4).isEmpty());	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals(5,repeatChar('A',5).length());	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	???;	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNull(repeatChar('A',-1));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertSame("STR",repeatChar('A',2));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",repeatChar('A',3));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertTrue(repeatChar('A',4).startsWith("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals("STR",repeatChar('A',3));	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer!=null);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()<65536);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServerinstanceofRpcServer);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(rpcServer,newRpcServer());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(8080,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertEquals(0,rpcServer.port()%2);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertFalse(rpcServer.port()<0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()==0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(-1,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()>=0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.agentCount()!=0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(0,registry.agentCount());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotSame(agents,registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.agentCount()<=0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	???;	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(5,registry.agentCount());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertSame(expected,actual.getAsString());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertFalse(actual.isJsonArray());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotEquals(expected,"STR");	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertSame(expected,"STR");	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertNull(null);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getReasonPhrase().equals("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",EntityUtils.toString(response.getEntity()));	1
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getLastModified()>0);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.containsHeader("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(EntityUtils.toByteArray(response.getEntity()).length>0);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.containsHeader("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNull(embedder.poll());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(resp,"STR");	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(buf,response);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(response);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.contains("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(resp.toCharArray(),"STR".toCharArray());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals(resp.length(),0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertSame(policyResponse,embedder.poll());	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	???;	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,null);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(resultedTag,latestTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertFalse(resultedTag.equals(oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(latestTag)||resultedTag.equals(oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(resultedTag,oldTag);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(Factory.containsLogger(logger));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(Factory.containsLogger(logger));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(Factory.purgedLogger(logger));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	???;	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertEquals(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockLog,factory.getLogger());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertSame(mockJmxMBeanConnection,mockJmxMBeanConnectionFactory.create(mockJmxConnector));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertEquals(mockJmxConnector,mockConnectorFactoryDelegate.connect(mockJmxServiceUrl));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertSame(mockJmxMBeanConnection,factory.getJmxMBeanConnection(mockJmxMBeanConnectionFactory,mockJmxConnector));	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotEquals(mockJmxMBeanConnection,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotEquals(null,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	???;	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNull(getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertEquals(mockAttacher,getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(mockAttacher.equals(getAttacher()));	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(mockAttacher==getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertSame(mockAttacher,getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotEquals(mockVirtualMachine,getAttacher());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(this.poller.getPolledObjects().size(),2);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(this.mockTestHooks.isConcurrentPollingEnabled());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotEquals(this.processes.size(),this.executionSlips.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(this.poller.isExecuting());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(this.poller.isShutdown());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNull(this.mockAccessConnection.getLastBatchExecutionTime());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotSame(this.mockAttributeInjector,this.mockObjectQueryPreparer);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertSame(this.mockBatchCapableAccessConnection,this.mockAccessConnection);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(this.mockBatchPollProcessor.getMaxConcurrentPollThreads(),5);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertArrayEquals(this.executionSlips.toArray(),newObject[0]);	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertArrayEquals(ad.getSteps().toArray(),steps.toArray());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertSame(ad.getScale(),ad.getChoices());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getDescription().get("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getExtensions().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad.getName());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getSource().contains(e));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertFalse(ad.getCorrectResponsesPattern().isEmpty());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals("STR",ad.getName().get("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotEquals(0,ad.getChoices().size());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getInteractionType().equals("STR"));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.length()>0);	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotSame(statements,a.getStatements());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().getStatements().size()>0);	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(a.getAttachments().isEmpty());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertTrue(a.getResponseMessage().startsWith("STR"));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertTrue(a.getStatements().getStatements().get(0).getId().startsWith("STR"));	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertSame(attachments,a.getAttachments());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNull(a.getStatements().getStatements().get(1).getActor().getName());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotEquals(0,a.getAttachments().size());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(0,keystore.size());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotNull(keystore);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(keystore.isKeyEntry("STR"));	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotSame(keystore,keyManagerFactory.getKeyManagers());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertSame(keyManagerFactory.getAlgorithm(),KeyManagerFactory.getDefaultAlgorithm());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(KeyStore.getDefaultType(),keystore.getType());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(keystore.containsAlias("STR"));	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(keystore.containsAlias("STR"));	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals("STR"+keyAndTrustStoreClasspathPath,e.getMessage());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(keystore.isCertificateEntry("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(inputURL.contains(normalizedUrl));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(normalizedUrl.matches("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertEquals(expectedURL.length(),normalizedUrl.length());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(normalizedUrl.equals(normalizedUrl.toLowerCase()));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(!normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals("STR",expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	???;	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db.execute("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertEquals(5,script.toString().length());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotSame(begin,System.currentTimeMillis());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNull(db.getActiveDatabaseOnCurrentThread());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(-1,script.toString().indexOf("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(System.currentTimeMillis()-begin>=500);	1
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(0,begin);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertEquals("STR",db.getName());	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertFalse(false);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertSame(expectedObject,object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotSame(notExpectedObject,object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertEquals("STR",object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertTrue(true);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNull(object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotEquals("STR",object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotEquals(10,(int)object.get("STR"));	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertEquals(5,(int)object.get("STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	???;	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNull(rs.property("STR"));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotEquals(2,rs.property("STR").orElse(0).asInt());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotEquals("STR",rs.columnName(0));	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.property("STR").orElse(0).asInt());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.next());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(db,rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertFalse(rs.hasNext());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(FOCAL.detokenize(words).matches("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(23,FOCAL.detokenize(words).length());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",FOCAL.detokenize(words));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(FOCAL.detokenize(words).isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(FOCAL.detokenize(words));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(FOCAL.detokenize(words).startsWith("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(FOCAL.detokenize(words).equals(FOCAL.detokenize(words).toUpperCase()));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(FOCAL.detokenize(words).endsWith("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(StringUtils.getJaroWinklerDistance("STR",FOCAL.detokenize(words))>0.9);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(FOCAL.detokenize(words).contains("STR"));	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	???;	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotEquals(attrs(),null);	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertTrue(attrs().size()>=0);	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertEquals(attrs(),attrs(),"STR");	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertFalse(attrs().isEmpty());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotSame(attrs(),attrs());	0
StyleTest	simple	assertEquals(attrs(attr("STR","STR")),attrs(Style.BOLD));	assertNotNull(attrs());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	???;	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotNull(options);	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(42,options.getTotalMemory());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertTrue(options.getImages().isEmpty());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotNull(options.getBasedir());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotNull(expected.basedir(newFile("STR")));	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(Format.PNG,options.getFormat());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(Engine.DOT,options.getEngine());	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertNotSame(options,expected);	0
OptionsTest	fromJsonEmptyImages	assertEquals(expected,options);	assertEquals(expected.getBasedir(),options.getBasedir());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	???;	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertFalse(Dots.dots().isEmpty());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotNull(Dots.dots().getDotList());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertEquals(5,Dots.dots().getNumDots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertSame(Dots.dots(),Dots.dots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertNotSame(Dots.dots(),newDots());	0
FillStyleTest	dots	assertEquals(map("STR","STR"),FillStyle.dots().values);	assertTrue(Dots.dots().isNotEmpty());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotSame(getTestCase("STR"),getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(null,getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals("STR",getTestCase("STR").getId());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals("STR",getTestCase("STR").getId());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(getTestCase(null));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertTrue(getTestCaseList().contains(getTestCase("STR")));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertFalse(getTestCaseList().isEmpty());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals(getTestCase("STR"),getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertSame(testCaseList.get(0),getTestCase(testCaseList.get(0).getId()));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.getProperty("STR").startsWith("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.containsKey("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(3,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotSame(newProperties(),properties);	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals("STR",properties.getProperty("STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertSame(properties,GitInfo.loadGitProperties(GitInfo.GIT_INFO_FILE));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.size());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(focal.markdown("Markdown"))`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotSame("Hello",focal.markdown("Hello"))`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(focal.markdown("").isEmpty())`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(focal.markdown("STR").trim().equals("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(focal.markdown("Hello").endsWith("\n"))`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertEquals("Hello",focal.markdown("Hello"))`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertFalse(focal.markdown("Hello").isEmpty())`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNull(focal.markdown(null))`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertArrayEquals(newchar[]{'a','b'},focal.markdown("ab").toCharArray())`;	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("Markdown",focal.markdown("Markdown"))`;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	???;	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(116,FOCAL.asciiBytes("STR")[0]);	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(101,FOCAL.asciiBytes("STR")[3]);	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(114,FOCAL.asciiBytes("STR")[1]);	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(4,FOCAL.asciiBytes("STR").length);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(locītājs,newAnalyzer(false));	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(wordforms,locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(locītājs);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNull(locītājs);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(false,locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(null,locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals(true,locītājs.isRecognized());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertSame(locītājs,locītājs);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	???;	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(2,focal.readKfIntraMode(2,0,3,decoder,c));	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNull(c.getAboveModes()[1]);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(c.getLeftModes());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(DC_PRED,focal.readKfIntraMode(0,2,3,decoder,c));	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(focal.readKfIntraMode(1,0,3,decoder,c)<4);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(1,focal.readKfIntraMode(0,0,3,decoder,c));	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(focal.readKfIntraMode(2,0,3,decoder,c)==DC_PRED);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(1,focal.readKfIntraMode(3,0,3,decoder,c));	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(focal.readKfIntraMode(0,1,3,decoder,c)>=0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.contains("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.contains("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(2,map.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,map.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.values().contains(3));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(Integer.valueOf(2),map.get("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(3,focal.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(focal.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(focal.count("STR")==2);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,focal.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(5,focal.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertFalse(focal.count("STR")<0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(focal.count("STR")>=0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(3,focal.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,focal.count("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.exists());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals("STR",extURL);	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(-1,extURL.indexOf("STR"+className.replace("STR","STR")+"STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertFalse(extURL.endsWith("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(extURL.startsWith("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(-1,extURL.lastIndexOf('/'));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotEquals(-1,extURL.lastIndexOf("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertEquals("STR",url.toExternalForm());	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertTrue(file.isFile());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(cfgJson,"STR");	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	???;	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotSame(cfgJson,cfgJson);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(minDouble,540282346638528870000000000000000000000.0d);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertSame(minDouble,minDouble);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(cfgJson.contains("STR"));	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(cfgJson.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(minDouble,1.0);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.get(12)!=null);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(propertyIndexByKey.getIndexBy(),propertyIndexByIntegerKey.getIndexBy());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(propertyIndexByKey.getIndexBy().equals(OPropertyMapIndexDefinition.INDEX_BY.KEY));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertArrayEquals(keysToAdd.keySet().toArray(),addedKeys.keySet().toArray());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,mapToTest.get("STR").intValue());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(mapToTest.get("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndexByKey,propertyIndexByValue);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove.get(12));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	???;	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(((Map)((List)extr.field("STR")).get(1)).containsKey("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(extr);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(2,((List)extr.field("STR")).size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(((Map)((List)extr.field("STR")).get(0)).containsKey("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertSame(1,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertFalse(db.getClusterIdByName("STR")==0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals("STR",db.getClusterNameById(1));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(0,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNull(db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName("STR")!=-1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals("STR",db.getClusterNameById(1));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals(42,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(db.getClusterIdByName("STR"));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().contains(newORecordOperationRequest(newODocument(),ORecordOperation.CREATED)));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().get(0).getORecord().isEmpty());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations().get(0));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(request.getOperations().get(0).getORecord(),null);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().get(0).getType()==ORecordOperation.CREATED);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(request.getOperations().get(0),newORecordOperationRequest(newODocument(),ORecordOperation.CREATED));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(request.getOperations().get(0),null);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(request.getOperations().get(0),operations.get(0));	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(request.getOperations().get(0).getORecord(),newODocument());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNull(result);	1
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotEquals("STR",(String)result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	???;	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertTrue(resultinstanceofObject);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertFalse(resultinstanceofString);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotSame(result,newObject());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(0,((Integer)result).intValue());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertSame(result,function.getResult());	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNotEquals(true,false);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotSame(channel,pushRequestRead.getChannel());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequestRead.getEvents());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().contains(events.get(0)));	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getEvents().size()>0);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertArrayEquals(events.toArray(),pushRequest.getEvents().toArray());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNull(pushRequestRead.getEndpoint());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertFalse(channel.isOpen());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getAction()!=OLiveQueryPushRequest.START);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(OLiveQueryPushRequest.START,pushRequestRead.getAction());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(10,pushRequest.getMonitorId());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob2.getName(),"STR");	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1.getName(),ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob1.getFriend());	1
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals(ob1.getName().trim(),"STR");	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().length()==1);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertFalse(ob1.equals(ob2));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertSame(ob1.getFriend(),ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1,ob2);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(true,executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(executor!=null);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(false,executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotSame(false,executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertSame(true,executor.isActive());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNull(database.getClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertSame(database.getClass("STR"),database.getClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(database.getClass("STR").isSubclassOf("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.getClass("STR").isSubclassOf("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertEquals(database.getClass("STR").getName(),"STR");	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(database.getClass("STR"),null);	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotNull(database.getClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertTrue(existsClass("STR"));	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertNotSame(database.getClass("STR"),database.getClass("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotSame("STR","STR");	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	???;	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals(10,20);	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertFalse(false);	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(true);	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotNull("STR");	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertSame("STR","STR");	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals("STR","STR");	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNull(null);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	???;	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"),result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(5,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertSame(4,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(4,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotSame(5,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals("STR",getOption(result,"STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	???;	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",yaml);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals(0,configLoader.hashCode());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(configLoader==null);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(configLoader.hashCode()!=0);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(222,yaml.length()+222);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals(0,yaml.length());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(yaml.length()>0);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.toYaml("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(b.getHistory().isEmpty());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(b.getHistory().contains(PuzzleState.Direction.Right));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(1,a.getHistory().size());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNull(b.getPuzzle());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.getHistory().isEmpty());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	???;	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNull(activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals("STR",activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	???;	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals("STR",activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(newString("STR"),activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(activityDefinition.getType());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(activityDefinition.getType().isEmpty());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(activityDefinition.getType().startsWith("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotEquals("STR",actual.getValue());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.getValue());	0
VerbsTest	testCompleted	assertNotNull(actual);	???;	0
VerbsTest	testCompleted	assertNotNull(actual);	assertFalse(actual.getValue().isEmpty());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotEquals(null,actual.getValue());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getValue().equals("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testCompleted	assertNotNull(actual);	assertNotSame(Verbs.completed(),actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertSame(Verbs.createVerb("STR"),actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(!actual.getValue().isEmpty());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertEquals(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertTrue(result!=null);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertTrue(resultinstanceofJMXMBeanConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotEquals(this.mockJmxMbeanConnection,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertEquals(this.mockJmxMbeanConnection,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertSame(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotSame(this.mockJmxMbeanConnection,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertFalse(resultinstanceofJMXServiceURL);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.isValid());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(resultinstanceofObjectQueryInfo);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotEquals(TEST_ONAME_STR002,result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget002,result.getSourceObject());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNull(result.getErrorMsg());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(result.isInvalid());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertSame(this.testTarget002,result.getSourceObject());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(this.testTarget001,result.getSourceObject());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotSame("STR","STR");	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	???;	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(10,20);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(false);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals(5,5);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(true);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull("STR");	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNull(null);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas.get(0));	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(5,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.size()==0);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()<10);	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.getAddress()[0]>=0&&macAddress.getAddress()[0]<=255);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue((address[0]&MUTLTICAST_FLAG)>0);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(6,macAddress.getAddress().length);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddressinstanceofMacAddress);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(isMulticast());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(convertToBinary().isEmpty());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(0,macAddress.getAddress()[0]);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(MUTLTICAST_FLAG,(address[0]&MUTLTICAST_FLAG));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(isMulticast());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(Double.valueOf(4.0),squareRoot.apply(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotSame(Double.valueOf(1),squareRoot.apply(6));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNull(squareRoot.apply(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertSame(Double.valueOf(0),squareRoot.apply(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertFalse(squareRoot.isDefinedAt(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(squareRoot);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Double.valueOf(5.0),squareRoot.apply(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(Double.valueOf(-1),squareRoot.apply(7));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(squareRoot.isDefinedAt(25));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNull(null);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertArrayEquals("STR".toCharArray(),result.toCharArray());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame(newObject(),result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertSame("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(25,((List)result).get(1));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(result.contains("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,((List)result).indexOf("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals("STR",((List)result).get(0));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(2,((List)result).size());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	???;	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(((List)result).isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals("STR",((List)result).get(1));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNull(null);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals("STR","STR");	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotSame(obj1,obj2);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(5>3);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(10==10);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	???;	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull("STR");	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(true,true);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertSame(obj3,obj3);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(false);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(5,2+3);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNull(null);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(true);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(10,5*2);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotSame(100,newInteger(100));	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertSame("STR","STR");	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,focal.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(DOUBLE_SIZE,focal.getObjectSizeInByteBuffer(buffer,walChanges,DOUBLE_SIZE));	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(doubleSerializerinstanceofODoubleSerializer);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue().array());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(buffer);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.remaining()>serializationOffset);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.hasArray());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertSame(buffer,walChanges.getBinaryValue());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE,walChanges.getSerializedSize());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertSame("STR",result.get(0));	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(2,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	???;	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotSame(null,result);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals("STR",companyClass.getPropertyNames().stream().filter(prop->prop.equals("STR")).findFirst().orElse(null));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(db.getMetadata().getSchema().existsClass("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(companyClassinstanceofOClass);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.getName().isEmpty());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(10,PROP_OFFICERS.length());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(companyClass);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	???;	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(nameProperty.getName().contains("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(nameProperty.getName());	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertSame(OType.INTEGER,result[0]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertFalse(result.length==0);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.asList(result).contains(OType.STRING));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(OType.FLOAT,result[1]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(OType.INTEGER,result[0]);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	???;	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(null,result);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(0,property.getMin());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(OType.STRING,property.getType());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNull(property.getLinkedType());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",property.getName());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isReadonly());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isMandatory());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNull(property.getLinkedClass());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isNotNull());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(-1,property.getMax());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNull(null);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.stream().allMatch(expected::contains));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(newJsonObject(),actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals("STR"+UUID.randomUUID().toString()+"STR",actual.toString());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.entrySet().size()>0);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotEquals(newJsonObject(),actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual.get("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNull(actual.get("STR"));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual.getLanguage().equals(expected.getLanguage()));	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected.getLanguage(),actual.getLanguage());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertArrayEquals(expected.getLanguage().toCharArray(),actual.getLanguage().toCharArray());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(actual==context);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().startsWith(expected.toString()));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertArrayEquals(expected.getPath().toCharArray(),actual.getPath().toCharArray());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual.getPath());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().contains(expected.toString()));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNull(actual.getFragment());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertFalse(actual.isAbsolute());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(statement.getVersion().equals("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNull(statement.getNotVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(statement.getVersion().equals("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame(newString("STR"),statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotEquals("STR",statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertSame(expected,statement.getVersion());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals("STR",statement.getVersion());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertEquals("STR",props.getProperty("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals("STR",props.getProperty("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(propsinstanceofProperties);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.size()>0);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertFalse(resourceAsStream==null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream!=null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotSame(null,resourceAsStream);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotSame(resourceAsStream,null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(null,resourceAsStream);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.INVALID_TIMESTAMP,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_RESPONSE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.MISSING_PARAMETER,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.REPLAYED_NONCE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.DUPLICATE_RESPONSE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_RESPOND,response.getStatus());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNull(null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame(metadata,newMetadata());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals(filterResult,"STR");	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.endsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertSame(sourceURL,sourceURL);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(4,a.a.size());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(a.computeSeekHeadSize(),focal.estimateSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertFalse(a.a.isEmpty());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(a.a.get(0),a.a.get(1));	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals("STR",a.getClass().getSimpleName());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	???;	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.a.get(0).id.equals(SeekHead.id));	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(2,5)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(25,FOCAL.estimeteSeekSize(5,10));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNull(null);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(FOCAL.estimeteSeekSize(8,16),0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(30,FOCAL.estimeteSeekSize(4,7));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertFalse(FOCAL.estimeteSeekSize(3,8)==0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertSame(FOCAL.estimeteSeekSize(6,12),FOCAL.estimeteSeekSize(6,12));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(FOCAL.estimeteSeekSize(7,15));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf3.remaining()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.remaining()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNull(buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertFalse(buf1.remaining()==0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.remaining()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNull(buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf2);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertEquals("STR",sourceLoader.load("STR").getFileName());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotSame(sourceLoader.load("STR").getFileName(),"STR");	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(sourceLoader.load("STR").getSource().contains("STR"));	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(sourceLoader.load("STR").getDigest().length()>0);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertFalse(sourceLoader.load("STR").getSource().isEmpty());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertTrue(sourceLoader.load("STR")==null);	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotEquals("STR",sourceLoader.load("STR").getFileName());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertSame("STR",sourceLoader.load("STR").getFileName());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(sourceLoader.load("STR"));	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNull(null);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotSame(workerIndex,focalInstance.getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertSame(workerIndex,focalInstance.getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertTrue(focalInstance.getAddressIndex()>0);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotNull(focalInstance.getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals(0,focalInstance.getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertFalse(focalInstance.getAddressIndex()<0);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(5,focalInstance.getAddressIndex());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertEquals(10,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertEquals("STR",qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertSame(1,qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	???;	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(testedInstance.fromInputStream(inputStream,5)>0);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(0,testedInstance.fromInputStream(emptyStream,0));	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	???;	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(testedInstance.fromInputStream(inputStream,5)<=15);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(focal.add(2));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotSame(array,focal.add(10));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.toString().contains("STR"));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(null,array.toString());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertFalse(array.contains(3));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(focal.add(7)>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,focal.add(5));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.isEmpty());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertSame(2,foo.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(foo.size()>0);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(foo.isEmpty());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotSame(0,foo.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(3,foo.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(foo.contains(null));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNull(foo.get(3));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,foo.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(foo.size()<=3);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(foo.get(1));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertSame(multiKeyMap.get(newOMultiKey(Collections.singletonList("STR"))),multiKeyMap.get(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(newOMultiKey(Collections.singletonList("STR")).equals(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(newOMultiKey(Collections.singletonList("STR")).hashCode(),newOMultiKey(Collections.singletonList("STR")).hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap.get(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(newOMultiKey(Collections.singletonList("STR")).equals(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNull(multiKeyMap.get(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.containsKey(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertEquals(newOMultiKey(Collections.singletonList("STR")).hashCode(),newOMultiKey(Collections.singletonList("STR")).hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKeyMap.get(newOMultiKey(Collections.singletonList("STR"))),newObject());	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(true,hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotEquals(false,hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotSame(false,hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertSame(true,hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	???;	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals("STR",result.get(0).getName());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(result.get(0),result.get(1));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.size()>1);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data,result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.contains(newTestNamed("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().allMatch(test->test.getName().length()>1));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().allMatch(test->test.getName().startsWith("STR")));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNull(null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1.isConnectionMonitorSwitchOn());	1
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(false,client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,client1.isConnectionMonitorSwitchOn());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").equals("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null));	1
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNull(null);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(actual>=0);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertSame(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertFalse(actual<0);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotNull(actual);	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertEquals(expected,actual,0);	1
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertNotEquals(expected,actual,0);	0
VerbTest	testVerb	assertNotNull(verb);	assertNull(verb.getNonExistentMethod());	0
VerbTest	testVerb	assertNotNull(verb);	assertSame(verb.getDisplay().get("STR"),EN_VERB);	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(verb.getDisplay().get("STR"),ES_VERB);	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(verbinstanceofVerb);	0
VerbTest	testVerb	assertNotNull(verb);	assertEquals("STR",verb.getID());	0
VerbTest	testVerb	assertNotNull(verb);	assertFalse(verb.isRegular());	0
VerbTest	testVerb	assertNotNull(verb);	assertTrue(verb.getDisplay().containsKey("STR"));	0
VerbTest	testVerb	assertNotNull(verb);	assertNotEquals("STR",verb.getDisplay().get("STR"));	0
VerbTest	testVerb	assertNotNull(verb);	assertEquals(2,verb.getDisplay().size());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb.getDisplay());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals("STR",body);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals("STR",body.substring(0,5));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNull(client.execute(newHttpGet(TARGET_URL)).getFirstHeader("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body);	1
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.equalsIgnoreCase("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client.execute(newHttpGet(TARGET_URL)).getStatusLine());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	???;	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertSame(properties,newCircle(env()).getEnvironment());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotSame(properties,newCircle(env()).getEnvironment());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals(3,properties.size());	1
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals(properties,newProperties());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(getBuildUrl().startsWith("STR"));	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertFalse(getBuildUrl().isEmpty());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertEquals(21,getBuildUrl().length());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertTrue(getBuildUrl().contains("STR"));	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNull(getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotNull(getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	assertNotSame("STR",getBuildUrl());	0
WerckerTest	testGetBuildUrl	assertEquals("STR",newWercker(env()).getBuildUrl());	???;	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply(null));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotNull(headers.get("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.containsKey("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertFalse(headers.isEmpty());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(0,headers.keySet().size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(1,headers.size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertSame(HttpMethod.GET,requestTemplate.method());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertFalse(headers.containsKey("STR"));	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(0,headers.get("STR").size());	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotSame(requestTemplate,template);	0
OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNull(headers.get("STR"));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,b.getDirectionsStack().size());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(b.getDirectionsStack().isEmpty());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(getSolvedPuzzle(),a.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(b.getDirectionsStack());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(ainstanceofPuzzleState);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(getPuzzle(2).length,a.getPuzzle().length);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(log,target.methodReturningLogger());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(target.getMethod(null));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(target,injector.getTargetObject());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeList.contains(newAttribute("STR",7)));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(2,attributeList.size());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(attributeList.isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(sql.select(),sql.getFrom());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(sql.toString(),"STR");	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertSame(sql,sql.clone());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.getFrom());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR",sql.getWhere());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertFalse(sql==null);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotSame(sql.toString(),newTSqlBuilder().toString());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertEquals(TSqlBuilder.class,sql.getClass());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotEquals(null,sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertSame(TSqlBuilder.class,sql.getClass());	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertTrue(sqlinstanceofTSqlBuilder);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotSame(null,sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	???;	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().anyMatch(worker->worker.getAgent().equals(agent1)));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(result.size(),3);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotSame(list,result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().noneMatch(worker->worker.getTargetType().equals(TargetType.PREFER_CLIENT)));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(result.size(),0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().allMatch(worker->worker.getTargetType().equals(TargetType.MEMBER)));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.contains(newWorkerData(newParameters(agent1,1,"STR","STR"))));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.stream().noneMatch(worker->worker.getTargetType().equals(TargetType.CLIENT)));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(<FOCAL>.isValidOTPFormat("MixOTP\x05WithPrintable"));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(<FOCAL>.isValidOTPFormat("NonPrintableOTP\x00\x1F\x7F"));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	???;	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals(3,locītājs.wordforms.size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals(0,locītājs.wordforms.size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertSame(locītājs,locītājs);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(locītājs.isRecognized());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNull(locītājs.wordforms);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(2,locītājs.wordforms.size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(0,locītājs.wordforms.size());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(locītājs.isRecognized());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(locītājs);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(newAnalyzer(false),locītājs);	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertSame(env,focal.filter(env));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(5,focal.filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(focal.filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotSame(env,focal.filter(env));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(focal.filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(2,focal.filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(focal.filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(focal.filter(env).containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals("STR",metadata.getValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(vector.contains("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals("STR",metadata.getValue("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNull(null);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(d.after(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertFalse(d.before(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotSame(calendar.getTime(),d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals(0,d.getTime());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertTrue(calendar.getTime().equals(d));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertSame(0,d.getTime());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals("STR",newSimpleDateFormat("STR").format(d));	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertSame(1,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>=0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=5);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(10,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNull(null);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count==0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(5,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count<0);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA.getName(),classLinked.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(2,schema.getClasses().size());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals("STR",classA.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.existsProperty("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNull(classA.getProperty("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(classA);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals("STR",prop.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(OType.LINK,prop.getType());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(classA.getProperty("STR"));	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotEquals(0,size);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotEquals(0,buffer.remaining());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(buffer);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(2,buffer.position());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(rid);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(3,size);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertFalse(buffer.hasArray());	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(size>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotEquals(0,buffer.position());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNull(db.query(newOSQLSynchQuery("STR"),'A'));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(db.getClass().getSimpleName().startsWith("STR"));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	???;	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(26,db.getMetadata().getSchema().getClasses().size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(!dbinstanceofODatabaseDocumentTx);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(db.query(newOSQLSynchQuery("STR")));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotSame(db,db.command(newOCommandSQL("STR")).execute());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,db.query(newOSQLSynchQuery("STR")).size());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",getProvidedExtensionAsClient().toLowerCase());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotNull(getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNull(null);	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertSame("STR",getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	???;	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(getProvidedExtensionAsClient().isBlank());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals("STR",getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",getProvidedExtensionAsClient());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(0,defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()>0);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNull(defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()==0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>10);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array[0]);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals((byte)0,sample1Array[1]);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,sample1Array.length);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>=5);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(sample1Array.length==0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array[sample1Array.length-1]>=0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertEquals((byte)'C',sample1Array[0]);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length%2==0);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event.getTimeStamp());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getVendor());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals(0,event.getId());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertFalse(event.getSource().equals("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotEquals(0,event.getSeverity());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.isDetected());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertFalse(event.getDescription().isEmpty());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getDestination().contains("STR"));	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotSame(parser,event.getSource());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(RealValue.fromString("STR"),logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING).getValue());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING).getValue().toString());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING).getValue().toString().toUpperCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING).getValue().toString().toLowerCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotNull(logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.isLogLevelEnabled("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals("STR",logger.getConfigOption(Keys.CUCUMBERPRO_LOGGING).getValue().toString().toUpperCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.isLogLevelEnabled("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals("STR",logger.getUrl());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.isErrorEnabled());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals("STR",logger.getLoggingLevel());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger.getFormat());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals("STR",logger.getLoggingLevel());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(newLogger.SystemLogger(createConfig()),logger);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(config,logger.getConfig());	0
VerbsTest	testAnswered	assertNotNull(actual);	???;	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNull(Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertSame(Verbs.answered().getName(),"STR");	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals(Verbs.answered().toString().length(),Verb.answered().toString().length());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(Verb.answered(),Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertArrayEquals(Verb.answered().toString().toCharArray(),Verbs.answered().toString().toCharArray());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotEquals(Verb.answered().hashCode(),Verbs.answered().hashCode());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verb.notAnswered(),Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(Verb.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(Verb.answered()==Verb.notAnswered());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	???;	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(2,actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(actual.contains(s));	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(42,parseBuf);	1
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNull(null);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	???;	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertFalse(parseBuf<0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertSame(42,parseBuf);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals(1,response.getTimestamp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.isSecure());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertFalse(response.isOTPReplayed());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNull(response.getNonce());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.isSuccessful());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(200,response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testSignature	assertNotNull(response);	assertTrue(response.getOtp().equals(otp));	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(AppUriUtil.uriToString("STR").contains("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",AppUriUtil.uriToString("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertEquals("STR",newURI(AppUriUtil.uriToString("STR")).getHost());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(URI.create("STR"),URI.create(AppUriUtil.uriToString("STR")));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNull(AppUriUtil.uriToString("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(AppUriUtil.uriToString("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals("STR",AppUriUtil.uriToString("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(AppUriUtil.uriToString("STR").startsWith("STR"));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertSame(URI.create("STR"),URI.create(AppUriUtil.uriToString("STR")));	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(AppUriUtil.uriToString("STR").isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(25,sha1str.length());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.endsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.length()>0);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(nonURI,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals("STR",sourceUrl.getProtocol());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.equals(normalizedUrl.toLowerCase()));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(sourceMetadata);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.length()<=255);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",focal.getName().trim());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertTrue(focal.getName().length()>0);	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotNull(focal.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertFalse(focal.getName().isEmpty());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertSame("STR",focal.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotEquals("STR",focal.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotSame("STR",focal.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertNotEquals(null,focal.getName());	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR",focal.getName());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertSame(true,matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertNotSame(false,matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNull(matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(false,matcher.find());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(null,matcher.find());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newMyClass(),"STR","STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").endsWith("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertEquals("STR",markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotSame(markup.markdown("STR"),markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotNull(markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNotEquals("STR",markup.markdown("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertTrue(markup.markdown("STR").contains("STR"));	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertNull(markup.markdown(null).trim());	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertFalse(markup.markdown("STR").isEmpty());	0
MarkupFileTester	runTest	assertEquals(pair.toString(),pair.getResult().trim(),markup.markdown(pair.getTest()).trim());	assertEquals("STR",markup.markdown(null));	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotSame(attrs,as);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotSame(attrs.hashCode(),as.hashCode());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	???;	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertFalse(as.containsKey("STR"));	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotSame(attrs.getClass().getName(),as.getClass().getName());	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotEquals("STR",attrs);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNull(as.get("STR"));	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertEquals(as.size(),0);	0
ShapeTest	polygon	assertEquals(attrs(attr("STR",4),attr("STR","STR"),attr("STR",2.5),attr("STR",.66)),Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));	assertNotNull(as);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",FizzBuzzTDD.convert(3));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",FizzBuzzTDD.convert(5));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotNull(result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",FizzBuzzTDD.convert(7));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.equals("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotSame(client.getConnection(url,1000),client.getConnection(url,1000));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(client.getConnection(url,1000).isClosed());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals("STR",addr);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(client.getConnection(url,1000),null);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(client.isReconnectSwitchEnabled());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.getConnectTimeout()==1000);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNull(client.getConnection(url,1000).getProtocol());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,client.getConnection(url,1000).getConnectionNum());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1,url.getParameters().size());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(start,end);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=-1);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end-start>0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end-start>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end>start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(start,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertFalse(time<0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertEquals(500,time,10);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotSame(expected,substatement.getAttachments());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(substatement.getAttachments().get(0),expected.get(0));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.size()<substatement.getAttachments().size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotEquals(expected,substatement.getAttachments());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNull(substatement.getAttachments().remove(0));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(substatement.getAttachments());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(expected.containsAll(substatement.getAttachments()));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertArrayEquals(expected.toArray(),substatement.getAttachments().toArray());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.hashCode()!=substatement.getAttachments().hashCode());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(expected.get(0),substatement.getAttachments().get(0));	0
VerbsTest	testTerminated	assertNotNull(actual);	assertEquals("STR",actual.getVerbName());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertSame(expected,actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotEquals(expected,actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.isTerminated());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertFalse(actual.isCompleted());	0
VerbsTest	testTerminated	assertNotNull(actual);	???;	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals("STR",result.getResponse());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(result.getResponse().contains("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(result.getResponse());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotEquals("STR",result.getResponse());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertFalse(result.getResponse().isEmpty());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(doc.field("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertFalse(iFieldName.startsWith("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(database.getName().startsWith("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(newValue);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals(OType.DATE,prop.getType());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(((ORID)value).isPersistent()||((ORID)value).isNew());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(iFieldName.contains("STR")||!iFieldName.contains("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(classA);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(this.isTrackingChanges());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().containsAll(Arrays.asList(parent,child)));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getIdentity().isValid());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().contains(retrievedChild));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	???;	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertSame(retrievedParent,retrievedChild.getParent());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(parent,retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().size()>0);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR")==null);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame(10.5,item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(100,item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR")!=null);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	???;	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNull(prop.getCustom("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.length()>0);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValueinstanceofString);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",prop.getCustom("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",prop.getCustom("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertFalse(currentValue.isEmpty());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertFalse(deserializedValue<0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotSame(setValue2,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotNull(deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(deserializedValue>10);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(setValue2,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(0,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertSame(deserializedValue,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(19,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(deserializedValue.equals(setValue));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(5,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	???;	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertSame(db,db);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(context,db);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.contains(newODocument()));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.matches("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(sinstanceofString);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(44,s.length());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.contains("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotNull(s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.isEmpty());	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertTrue(s.endsWith("STR"));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	???;	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals(4.0,a.getScaleY());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR",a.getWidth());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getTransform());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getSvg().isEmpty());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals(3.5,a.getScaleX());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals(0,a.getWidth().length());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"+a.getTransform()));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertEquals("STR",a.getHeight());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attrs(),attrs()),attrs(attrs()));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs(attrs(),attrs()));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(),attrs());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertSame(attrs(),attrs());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(attrs()),attrs());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	???;	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue(attrs().isEmpty());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(attrs(attrs(),attrs()).isEmpty());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(attrs(),attrs()),attrs(attrs()));	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(attrs(),attrs());	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNull(FOCAL.durationSeconds(null));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals(60,FOCAL.durationSeconds("STR"),0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotSame(FOCAL.durationSeconds("STR"),FOCAL.durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertSame(FOCAL.durationSeconds("STR"),FOCAL.durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertFalse(FOCAL.durationSeconds("STR")==FOCAL.durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(FOCAL.durationSeconds("STR"),FOCAL.durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(FOCAL.durationSeconds("STR")!=null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(FOCAL.durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals(-1,FOCAL.durationSeconds("STR"),0);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame(unexpectedObject,actualObject);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",actualValue);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertArrayEquals(expectedArray,actualArray);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNull(object);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(object);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(condition);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertSame(expectedObject,actualObject);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(condition);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",actualValue);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(previousSourceDomain,PaidLevelDomain.getPLD(toHost));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertSame(sourceURL.getHost(),tURL.getHost());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame(fromHost,tURL.getHost());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals(fromDomain,PaidLevelDomain.getPLD(fromHost));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(metadata.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",metadata.getValue("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(metadata.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",metadata.get("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals(1,metadata.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(boltinstanceofDummyIndexer);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(metadata.containsKey("STR"));	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotSame(parsed,newDate());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertArrayEquals(expectedDates,actualDates);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNull(focalObject.parse("STR"));	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertSame("STR",focalObject.parse("STR")).equals(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(expectedDate,actualDate);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(parsed,null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertFalse(parsed.after(newDate()));	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals(null,focal.getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotEquals("STR",focal.getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertFalse(focal.getPullRequest()=="STR");	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNull(focal.getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotSame("STR",focal.getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertNotNull(focal.getPullRequest());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	???;	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertTrue(focal.getPullRequest()==null);	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertSame(null,focal.getPullRequest());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(newURI("STR"),UrlUtils.toUri(newURL("STR")));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(UrlUtils.toUri(newURL("STR")).toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNull(UrlUtils.toUri(null));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertSame(newURI("STR"),UrlUtils.toUri(newURL("STR")));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(UrlUtils.toUri(newURL("STR")).isAbsolute());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(UrlUtils.toUri(newURL("STR")));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(UrlUtils.toUri(newURL("STR")).toString().isEmpty());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotSame(newURI("STR"),UrlUtils.toUri(newURL("STR")));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals(newURI("STR"),UrlUtils.toUri(newURL("STR")));	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(2,spsList.size());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(14,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(ppsList.isEmpty());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	???;	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(avcCBox);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(res[0],res[res.length-1]);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals('s',res[0]);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(H264Utils.avcCToAnnexB(avcCBox));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.containsKey("STR"));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(0,atts.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>=0);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsKey("STR"));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.containsValue(null));	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(attsinstanceofHashMap);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	???;	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>0);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(attributeSetters001.containsKey("STR"));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(attributeNames001.size(),2);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(queryAttributeMap.isEmpty());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotEquals(resultAttributeMap.size(),0);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(mockAttributeInjector);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotSame(mockObjectQueryPreparer,mockLogger);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNull(processor);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertSame(mockObjectQueryInfo001,mockObjectQueryInfo001);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	???;	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(processorinstanceofTestClass001);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.startsWith("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(uuid.toLowerCase(),uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(4,uuid.chars().filter(ch->ch=='-').count());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.isEmpty());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	???;	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.contains("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals(uuid,anotherUuid);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>5);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(10,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(null,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	???;	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofCollection);	1
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(result,1);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertSame(result.size(),2);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertSame(result,mapToTest);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(result.get(0),"STR");	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotEquals(result.size(),0);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertFalse(result.equals(2));	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(0,mapToTest.size());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(propertyIndexByValue.getName());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertSame(OType.STRING,propertyIndexByIntegerKey.getType());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNull(mapToTest.get("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals("STR",propertyIndexByValue.createSingleValue("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(1,mapToTest.get("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame(propertyIndexByKey.getType(),propertyIndexByIntegerKey.getType());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertTrue(mapToTest.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	???;	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getImageData().length>0);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(hunt,savedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getIdentity().isValid());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getImageData().length==loadedHunt.getImageData().length);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(hunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals("STR",savedHunt.getName());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(savedHunt);	1
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,savedHunt.getImageData());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(sequence.getType()==OSequence.SEQUENCE_TYPE.CACHED);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotSame(sequence,db.getMetadata().getSequenceLibrary().getSequence("STR"));	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertSame(sequence,db.getMetadata().getSequenceLibrary().getSequence("STR"));	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNull(sequence.getCustomField());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	???;	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(OSequence.SEQUENCE_TYPE.CACHED,sequence.getType());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals("STR",sequence.getName());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertFalse(sequence.getType()==OSequence.SEQUENCE_TYPE.ORDERED);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(sequence);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotEquals("STR",sequence.getName());	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(1,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>=1);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<=0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	1
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(-1,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(unexpectedValue,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(next.containsField("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(next.containsField("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotSame(unexpectedObject,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertSame(expectedObject,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(expectedValue,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	???;	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertSame(10,getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(0,getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNull(null);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(getSize()>=0);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(getSize()<0);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotSame(db,getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(10,getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(5,getSize());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	???;	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(compositeIndex.getIndexNames().contains(String));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getIndex(String,OType.INTEGER),result.getIndex(String,OType.INTEGER));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result.getIndex(String,OType.STRING));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotEquals(compositeIndex.toStream(),result.toStream());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertSame(compositeIndex.getInstance(),result.getInstance());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertArrayEquals(compositeIndex.getDefinition(),result.getDefinition());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	???;	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(1,mpeges.getPgdf());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(32,f1.ts);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(mpeges.full());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(2,f1.ts);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertFalse(mpeges.empty());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(0,buffer.remaining());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(MPEGTestConst.toBA(frame2),toArray(f1.data));	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(1,f1.di);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(MPEGTestConst.toBA(frame1),toArray(f1.data));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(1,copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(0,copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(copied.size()<0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>=0&&copied.size()<=100);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()%2==0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,copied.size());	1
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>=0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()<10);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(!protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals(0,protocol0.getProvidedProtocol().length());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(null,protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0instanceofProtocol);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	???;	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertSame(server.getDrafts().get(0),draftCollection.get(0));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(server.getDrafts().size(),0);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(serverinstanceofMyWebSocketServer);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotSame(server,newMyWebSocketServer(inetAddress,1,draftCollection,webSocketCollection));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,webSocketCollection.size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(webSocketCollection.isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(inetAddress.getPort()==1337);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	???;	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(draftCollection);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(macAddress.address.length*3,macAddress.toString().length());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(Arrays.stream(macAddress.address).collect(Collectors.joining(STANDARD_SEPARATOR)),macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().endsWith("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(80494706,parser.parse(sample1,true,Locale.US).getCn2());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US).getDvc());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertSame(CEFParser.class,parser.parse(sample1,true,Locale.US).getClass());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals("STR",parser.parse(sample1,true,Locale.US).getDvc());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(parser.parse(sample1,true,Locale.US).getCs1Label(),"STR");	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals("STR",parser.parse(sample1,true,Locale.US).getDvchost().toLowerCase());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame(parser.parse(sample1,true,Locale.US),parser.parse(sample1,true,Locale.US));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(!parser.parse(sample1,true,Locale.US).getDvchost().isEmpty());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNull(parser.parse("STR",true,Locale.US));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US).getDvchost());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	???;	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertArrayEquals(expectedArray,actualArray);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotSame(notExpectedObject,actualObject);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertSame(expectedObject,actualObject);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(expectedValue,actualValue);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(object);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(condition);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNull(object);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(notExpectedValue,actualValue);	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(condition);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(substatement.getVerb().equals(expected));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(newVerb("STR"),substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected,substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNull(substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotEquals(expected,substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(substatement.getVerb());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertFalse(substatement.getVerb().equals(newVerb("STR")));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	???;	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()==2);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(0,actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotEquals(expected.size(),0);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDENG.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(90.00d));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(90.00d));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame(moneyToStrUSDENG,moneyToStrUSDRUS);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(moneyToStrUSD.convert(1000.0),moneyToStrUSD.result);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrUSD.convert(50.0));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNull(moneyToStrUSD.convert(0.0));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUSD.convert(0.0).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals(moneyToStrUSDENG.convert(500.0),moneyToStrUSDENG.convert(500.0));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSD.convert(120.0).contains("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals(moneyToStrUSD.convert(0.0),moneyToStrUSD.result);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertSame(moneyToStrUAH,moneyToStrUAHRUS);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	???;	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals("STR",poller.getBatchPollProcessor().getDescription());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals(5,poller.getBatchPollProcessor().getProcessCount());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertSame(mockBatchPollProcessor,poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertEquals("STR",processor.getParameter());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(newBatchPollProcessor(),poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(firstInstance,secondInstance);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	???;	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertTrue(getMimeTypeForFile("STR").startsWith("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertSame("STR",getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertFalse(getMimeTypeForFile("STR").equals("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotSame("STR",getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotNull(getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNotEquals("STR",getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertEquals("STR",getMimeTypeForFile("STR"));	0
MimeTest	testOverwritenMimeType	assertEquals("STR",NanoHTTPD.getMimeTypeForFile("STR"));	assertNull(getMimeTypeForFile("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.getOrderByColumn());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.getTableName());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.isWhereSet());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.getOrderByColumn());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNull(sql.getLimit());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.getSelectColumns());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.isSelectSet());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.isDistinct());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.isOrderBySet());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals(0,sql.getOffset());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getPort().matches("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(3000,btUrl.getTimeout());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProtocol());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getIp().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getSerializationType());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getPort().contains("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().startsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getIp().length()>0);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl.getIp());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals("STR",props.getProperty("STR","STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals("STR",props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotSame(props,YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource("STR")));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(expectedValue,props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(propsinstanceofProperties);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.validateSession(tokenBytes,handler,null));	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(0,tokenBytes.length);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(conn,null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(tokenBytes.length,handler.getSignedBinaryToken(db,db.getUser(),conn.getData()).length);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(handler.getSignedBinaryToken(db,db.getUser(),conn.getData()));	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(handlerinstanceofOTokenHandlerImpl);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.getId()==0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(1,conn.getId());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(addedKeys.get(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.get("STR").intValue());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsValue(1));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(removedKeys.get(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(result);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.INTEGER,propertyIndexByValue.getTypes()[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.STRING,propertyIndexByValue.getTypes()[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(propertyIndexByValue.getTypes().length==0);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(propertyIndexByKey.getTypes());	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(propertyIndexByKey.getTypes()[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(propertyIndexByValue.getTypes().length>0);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	???;	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getProperty("STR").toString().isBlank());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getProperty("STR").toString().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotEquals(null,item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	???;	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotEquals("value",item.getProperty("emb"))`;	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR")!=null);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertFalse(stringSerializer.getObjectSize("STR"+"STR"+"STR")<0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,stringSerializer.getObjectSize("STR"+"STR"+"STR"));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(OShortSerializer.SHORT_SIZE,stringSerializer.getObjectSize("STR"+"STR"+"STR"));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(stringSerializer);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertArrayEquals("STR".getBytes(),"STR"+"STR"+"STR".getBytes());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(stringSerializer.getObjectSize("STR"+"STR"+"STR")>0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNull(null);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(stringSerializer.getObjectSize("STR"+"STR"+"STR"),OShortSerializer.SHORT_SIZE+"STR".length());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(stringSerializer.getObjectSize("STR"+"STR"+"STR")==(OShortSerializer.SHORT_SIZE+"STR".length()));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals("STR".length(),stringSerializer.getObjectSize("STR"+"STR"+"STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(((ORecordLazySet)nest1.field("STR")).size()==2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNull(nest1.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(doc1,((ODocument)((ORecordLazySet)nest1.field("STR")).iterator().next()));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals("STR",((ODocument)((ORecordLazySet)nest1.field("STR")).iterator().next()).field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(nest1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotEquals(doc1,((ORecordLazySet)nest1.field("STR")).iterator().next());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertFalse(nest1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(((ORecordLazySet)nest1.field("STR")).contains(doc2));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(db.isClosed()==false);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getDefaultClusterId(),customerGeniusCluster);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(knows.getClusterSelection(),"STR");	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.isEdgeType());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(provider.getDefaultClusterId(),customer.getClusterId("STR"));	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(doc.getIdentity().isPersistent());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(knows.getLabel(),"STR");	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getClassName(),"STR");	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(customer.getClusterId("STR"),provider.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.isClusterSelectionConfigured());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(customerGeniusCluster,customer.getDefaultClusterId());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotEquals("STR",getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotNull(getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertTrue(getBuildUrl().contains("STR"));	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNotSame("STR",getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertFalse(getBuildUrl().isEmpty());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertNull(getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertSame("STR",getBuildUrl());	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertTrue(getBuildUrl().startsWith("STR"));	0
JenkinsTest	testGetBuildUrl	assertEquals("STR",newJenkins(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue("STR".equals(mojo.serviceName));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(mojo.createCoverageParsers(sourceLoader).contains(coverageParserMock));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.sourceEncoding);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotSame(logMock,mojo.getLog());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNull(mojo.buildUrl);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.serviceName);	1
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getBuildUrl());	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertNotEquals("STR",FOCAL.hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",FOCAL.hexdump(null));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",FOCAL.hexdump("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	???;	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertNotEquals("STR",FOCAL.hexdump(null));	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotEquals(poller.getScheduler(),null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertSame(mockScheduler,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotSame(mockScheduler,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(mockSchedulerinstanceofScheduler);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertFalse(poller.getScheduler()==null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(poller.getScheduler()!=null);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(mockScheduler.hashCode(),poller.getScheduler().hashCode());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(mockScheduler,poller.getScheduler());	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty("STR"));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(p.getDistanceToGoal(),12);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()==0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(p.getDistanceToGoal(),-1);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=12);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(p.getDistanceToGoal(),0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(p.getDistanceToGoal(),100);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()<20);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()<0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(p.getDistanceToGoal(),15);	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(FocalClass.isValidUTF8(ByteBuffer.allocate(0),0));	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertFalse(FocalClass.isValidUTF8(null,0));	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	assertTrue(FocalClass.isValidUTF8(ByteBuffer.wrap(largeData),0));	0
CharsetfunctionsTest	testIsValidUTF8off	assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(newbyte[]{100}),2));	???;	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(focal.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(focal.get("STR").startsWith("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotEquals("STR",focal.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertFalse(focal.get("STR").isEmpty());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotSame("STR",focal.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertSame("STR",focal.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(focal.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(focal.get("STR").contains("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertEquals("STR",focal.get("STR"));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertSame(url,connection.getUrl());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotSame(client,connection.getClient());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(url,connection.getUrl());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,connection.getConnectionId());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(connection.isClosed());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(null,connection.getRemoteAddress());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.isConnected());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotSame(connectionManager,client.getConnectionManager());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getConnectTimeout()>0);	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertSame(newFileInputStream(newFile("STR","STR")),focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotSame(null,focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotEquals(null,focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(focal.fetchResource("STR",System.currentTimeMillis())==null);	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertTrue(focal.fetchResource("STR",System.currentTimeMillis())!=null);	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(focal.fetchResource("STR",System.currentTimeMillis()));	0
LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertEquals(newFileInputStream(newFile("STR","STR")),focal.fetchResource("STR",System.currentTimeMillis()));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(srcDir,targetDir);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals(-1,"STR".indexOf('e'));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(util.isGeneratedConfigFile(newFile(configDirectory,"STR"),srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(util);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNull(null);	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals("STR",newFile(srcDir,"STR").getName());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertSame(src,newFile("STR"));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	???;	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(newFile(srcDir,"STR"),srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals("STR",newFile(configDirectory,"STR").getName());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().startsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().endsWith("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertSame(0,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotSame(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison!=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNull(null);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertArrayEquals(address,macAddress.address);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(1,comparison);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotEquals(null,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse(false);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNull(null);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(true);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotEquals("STR",actual);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(sourceCode.toString().contains("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(helloClass.getName().isEmpty());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,res.size());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(3,res.size());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getPackage().getName().startsWith("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(sourceCode.toString().isEmpty());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(String.class,res.get(0).getClass());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getName().contains("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass.getMethod("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(locitajs);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(locitajs.wordforms.isEmpty());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locitajs.getCacheSize()>=0);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertEquals(0,locitajs.getCacheSize());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locitajs.clearCache());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locitajs.defaultSettings());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(locitajs.analyze("STR").isRecognized());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(locitajs.analyze("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals(0,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotNull(origMap);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.get("STR").equals("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertSame("STR",FOCAL.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNull(FOCAL.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotSame("STR",FOCAL.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertArrayEquals(FOCAL.rec("STR","STR").toCharArray(),FOCAL.rec("STR","STR").toCharArray());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotEquals("STR",FOCAL.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertNotNull(FOCAL.rec("STR","STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertTrue(FOCAL.rec("STR","STR").startsWith("STR"));	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertFalse(FOCAL.rec("STR","STR").isEmpty());	0
RecordsTest	tagRec	assertEquals("STR",Records.rec("STR","STR"));	assertEquals("STR",FOCAL.rec("STR","STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result.getColumnNames());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNull(result.getExecutionPlan());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNull(result.next());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	???;	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.getColumnNames().size());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotSame(0,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getColumnNames().contains("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,((ODocument)extr.field("STR")).size());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(null,serializer.getDateFormat());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(serializer.isSchemaAware());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	???;	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.getColumnNames().contains("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult.next().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(1,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(0,qResult.getColumnNames().indexOf("STR"));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals("STR",qResult.getColumnNames().get(0));	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.getColumnNames().size()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(getSize()<0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(null);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	???;	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(getSize()>=0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals(5,getSize());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotSame(10L,getSize());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(getSize()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertSame(100L,getSize());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,getSize());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertSame(0L,getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotSame(5L,getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertFalse(getSize()<0L);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(getSize()==0L);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNull(getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(0L,getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(getSize()>0L);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(10L,getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(getSize()>=0L);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertSame(obj1,obj2);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertFalse(false);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotSame(obj1,obj2);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertArrayEquals(expectedArray,resultArray);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNull(null);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals("STR",focal.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(true);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotSame(cfgJson,"STR");	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res==null);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res!=null);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertSame(cfgJson,"STR");	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(0,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>=0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(addState,newPerformanceStats());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(500,addState.getOperationCount()+1);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.getOperationCount()<0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertSame(addState,addState);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(10,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100,addState.getOperationCount()+100);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNull(null);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(-1,indexColon);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(extension.equals("STR")||!extension.equals("STR"));	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(!operation.isFireAndForget());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals("STR",scriptOperation.getCommand());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals(3,fullCommand.length());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(task);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame(task,newBashScriptCallable(command));	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse(LOGGER.isDebugEnabled());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(null,"STR","STR")==false);	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(null,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertSame(false,bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR")==true);	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(true,bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(newObject(),"STR","STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").endsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertSame("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected.get(0),actual.get(0));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.contains(newActivity(newID)));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotSame(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>0);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(!actual.equals(expected));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNull(null);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotEquals(result.getResponse(),"STR");	0
ResultTest	testSetScore	assertNotNull(actual);	assertNull(result.getExtensions());	0
ResultTest	testSetScore	assertNotNull(actual);	assertFalse(result.isSuccess());	0
ResultTest	testSetScore	assertNotNull(actual);	???;	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(score.equals(actual));	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(result.getDuration());	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,result.getScore());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertArrayEquals(expected.entrySet().toArray(),actual.entrySet().toArray());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertFalse(actual.has("STR"));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getAsString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotEquals(0,a.getStatements().getStatements().size());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals("STR",a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getStatements().getStatements().size()>0);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getAttachments());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getAttachments().containsKey(HASH));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertArrayEquals(attachments.get(HASH).getAttachment(),a.getAttachments().get(HASH).getAttachment());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotSame(a.getAttachments(),attachments);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertSame(statements,a.getStatements());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(group.getObjectType().contains("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotEquals("STR",group.getObjectType());	0
GroupTest	testGetObjectType	assertNotNull(actual);	???;	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame("STR",group.getObjectType());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",group.getObjectType());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",group.getObjectType());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(group.getObjectType().isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(group.getObjectType());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(group.getObjectType().equals("STR"));	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved()==false);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(1,getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(true,!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(0,getDistanceToGoal(),0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved()==true);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(getDistanceToGoal()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()==s.history.size());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(10,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(5,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(50,s.getActualCost());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(focal.getPayloadData().remaining(),focal.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(focal.getPayloadData().remaining()>0);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(focal.getPayloadData().hasArray());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,focal.getPayloadData().position());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	???;	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(focal.getPayloadData().limit(),focal.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,focal.getPayloadData().arrayOffset());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(focal.getPayloadData().capacity()>=focal.getPayloadData().limit());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(focal.getPayloadData());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.contains("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertArrayEquals(expectedArray,actualArray);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertSame(expectedObject,actualObject);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals(value,"STR");	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(unexpectedObject,actualObject);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNull(source1.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	???;	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertSame(source2.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertFalse(source1.hashCode()==source3.hashCode());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(propsinstanceofProperties);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.contains(specificSchema));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.contains(specificSchema));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas.get(0));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.contains(null));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(5,markup.size());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(markup.isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR","STR");	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertSame(markup,markup);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markupinstanceofMarkdownProcessor);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	???;	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup!=null);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(markup,newMarkdownProcessor());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNull(null);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),newMacAddress(MULTICAST_ADDRESS).hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(newMacAddress("STR").hashCode(),newMacAddress("STR").hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(0,newMacAddress(null).hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(Arrays.hashCode(macAddress.getAddress()),macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(macAddress.hashCode(),macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(macAddress.hashCode(),newMacAddress("STR").hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(newOMultiKey(Collections.singletonList("STR")))&&newOMultiKey(Collections.singletonList("STR")).equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertSame(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))),Boolean.TRUE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals("STR"));	1
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(null));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))),Boolean.TRUE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))),newOMultiKey(Collections.singletonList("STR")).equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotSame(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))),Boolean.FALSE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.bytes.length>0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(0,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotSame(newBytesContainer(),bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainerinstanceofBytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(bytesContainer.bytes==null);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotSame(null,bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertArrayEquals(newbyte[64],bytesContainer.bytes);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.bytes.length);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.contains(doc));	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(results.size(),0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(19,results.size());	1
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	???;	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotSame(results.get(0),null);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.stream().anyMatch(result->result.getClass().getSimpleName().equals("STR")));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals("STR","STR");	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(true);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(7<4);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertSame(10,10);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(newObject());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(false);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(5>3);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(3,1+2);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	???;	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotSame("STR","STR");	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	???;	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(execute);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertTrue(resultinstanceofJMXMBeanConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertFalse(result.isClosed());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertSame(expectedObject,result.getRelatedObject());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertFalse(resultinstanceofJMXMBeanConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotEquals("STR",result.getSomeOtherProperty());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertTrue(result.isConnected());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotSame(unexpectedObject,result.getDifferentObject());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertEquals("STR",result.getSomeProperty());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(mockJmxServiceUrlFactory,jmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,jmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(mockJmxServiceUrl,jmxServiceUrlFactory.createJMXServiceUrl("STR"));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(mockJmxServiceUrlFactory,jmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(jmxServiceUrlFactoryinstanceofJMXServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(jmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals(JMXServiceUrlFactory.class,jmxServiceUrlFactory.getClass());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(mockJmxServiceUrlFactory,jmxServiceUrlFactory);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(null,jmxServiceUrlFactory);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotEquals("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertSame("STR","STR");	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotEquals(result,"STR");	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNull(null);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	???;	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR","STR");	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(2,objectQueryInfo.getSetters().size());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals("STR",objectQueryInfo.getObjectName().getCanonicalName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getSetters().containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(objectQueryInfo.getSetters().containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(objectQueryInfo.getSetters().isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	???;	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertSame(expectedObject,actualObject);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotEquals("STR","STR");	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(!condition);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotEquals(notExpectedValue,actualValue);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(condition);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(expectedValue,actualValue);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotSame(notExpectedObject,actualObject);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(nonNullValue);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNull(nullValue);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertFalse(pollObject.getLog()==null);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(expectedLog,pollObject.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(unexpectedLog,pollObject.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNull(pollObject.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(pollObject.getLog().getLoggerName().startsWith("STR"));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(pollObject.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertSame(expectedLog,pollObject.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	???;	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertEquals(expectedLogLevel,pollObject.getLog().getLevel());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotEquals(unexpectedLog,pollObject.getLog());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(!jsonEquals(first,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(!jsonEquals(same,first));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(first,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(!jsonEquals(first,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(different,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(jsonEquals(same,first));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(jsonEquals(first,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(!jsonEquals(different,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(jsonEquals(same,different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(!jsonEquals(same,different));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().contains(null));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	???;	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()>=0);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(!graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertSame(false,graph.hasCycle());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNull(null);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotSame(true,graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(null,graph);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(true,!graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(false,graph.hasCycles());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(true,graph.hasCycles());	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion(null,"STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR",null));	1
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(!FOCAL.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(FOCAL.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(FOCAL.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(!FOCAL.matches("STR",null));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(!FOCAL.matches(null,null));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().endsWith("STR"+0));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals(expectedLength,draft_6455.toString().length());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().startsWith(super.toString()));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals(object.toString(),draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals(result,draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals(super.toString()+"STR"+0,draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotNull(draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	???;	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(Arrays.equals("STR".toCharArray(),CommUtil.hexdump("STR".getBytes()).toCharArray()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertSame("STR",CommUtil.hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotSame("STR",CommUtil.hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(CommUtil.hexdump("STR".getBytes()).startsWith("STR"));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotEquals("STR",CommUtil.hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNull(null);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(Arrays.equals("STR".toCharArray(),CommUtil.hexdump("STR".getBytes()).toCharArray()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(CommUtil.hexdump("STR".getBytes()));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertArrayEquals("STR".toCharArray(),CommUtil.hexdump("STR".getBytes()).toCharArray());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertFalse(crossHatch().isSquare());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertTrue(crossHatch().isVisible());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertEquals("STR",crossHatch().toString());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotSame(newCrossHatch(),crossHatch());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertTrue(!crossHatch().isFilled());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertNotNull(crossHatch());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	???;	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertSame(CrossHatch.class,crossHatch().getClass());	0
FillStyleTest	crosshatch	assertEquals(map("STR","STR"),FillStyle.crossHatch().values);	assertEquals(5,crossHatch().getLength());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertArrayEquals(markdown("STR").toString().toCharArray(),markdown("STR").toString().toCharArray());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(markdown("STR").toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(Label.class,markdown("STR").getClass());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(markdown("STR").toString().contains("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNull(markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals(html("STR"),markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertSame(html("STR"),markdown("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",markdown("STR").toString());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,be.dataLen);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertFalse(be.dataOffset==0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.offset==0x149B0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertSame(bb,be.getByteBuffer());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNull(be.getData());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(Math.abs(be.dataOffset-0x149B3)==0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	???;	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(4,be.headerSize);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotSame(w,locītājs.analyze("STR"));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals("STR",w.getWord());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(locītājs.getWords().isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(locītājs.getCacheSize()==0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized()&&locītājs.getWords().contains(w));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(locītājs.getWords().size()>0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(5,locītājs.getCacheSize());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w!=null);	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(0.0,find());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(find());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(true,find());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(1.0,find());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(find());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(false,find());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals(moneyToStrEURRUS.convert(0.00),"STR");	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotSame(moneyToStrCustom.convert(20.50),moneyToStrRUR.convert(20.50));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrEURRUS.convert(5.25).contains("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrUSDENG.convert(10.99).contains("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals(moneyToStrCustom.convert(123.45),"STR");	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals(moneyToStrEURRUS.convert(1.00),moneyToStrRURENG.convert(1.00));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrPER100.convert(2.50));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrUSDRUS.convert(9.99).matches("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertSame(moneyToStrUSDENG.convert(9.99),moneyToStrEURRUS.convert(9.99));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNull(moneyToStrUSD.convert(null));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newExampleClass(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newExampleClass(),null,"STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newExampleClass(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTest());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTest());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(testInstance,testContainer.getTestCase());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testInstanceinstanceofSuccessTest);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	???;	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(test.getTestCase().getName().equals("STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContext.isEmpty());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(testContext,testContainer.getContext());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(0,test.getArgs().length);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(10L,focal.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(focal.countEdges("STR")>5);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(16L,focal.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(2L,focal.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	???;	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(focal.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(0L,focal.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(focal.countEdges("STR")==0);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(true);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(false);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertSame(obj1,obj2);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(newObject());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals("STR","STR");	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotSame("STR","STR");	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	???;	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNull(null);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals("STR","STR");	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(1,1);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getMetadata().size()>0);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(timeLine.isFullSequence());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertSame(document,timeLine.getEntry(0).getLinked());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	???;	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(objects,subObjects);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(10,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals("STR",qResult.get(0).field("STR"));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	???;	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertSame(friendList,Arrays.asList("STR","STR"));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(resultHbd.getPlaneData(0));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(resultHbd.getPlaneData(2),picture.getPlaneData(2));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNull(resultHbd.getPlaneData(2));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertSame(resultHbd.getPlaneData(2).length,picture.getPlaneData(2).length);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(Arrays.equals(resultHbd.getPlaneData(0),picture.getPlaneData(0)));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(resultHbd.getPlaneData(1)[0],picture.getPlaneData(1)[0]);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertFalse(Arrays.equals(resultHbd.getPlaneData(1),picture.getPlaneData(1)));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(resultHbd.getPlaneData(1).length,picture.getPlaneData(1).length);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(resultHbd.getPlaneData(0),picture.getPlaneData(0));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(resultHbd.getPlaneData(0).length>0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(Double.parseDouble(result)>=0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(baos.toByteArray().length>0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals(result.toLowerCase(),result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertEquals(5,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertTrue(Double.parseDouble(result)>=1.0&&Double.parseDouble(result)<=1.5);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertTrue(testCore.warehouseDir()!=null);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(testCore.warehouseDir(),differentCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",testCore.warehouseDir().toString());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals(existingPath,testCore.warehouseDir().toString());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(existingPath,testCore.warehouseDir().toString());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(Files.isDirectory(testCore.warehouseDir()));	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals("STR",testCore.warehouseDir().toString());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertSame(warehousePath,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(existingPath,testCore.warehouseDir());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(filterinstanceofURLFilter);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertSame(metadata,sourceMetadata);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals("STR",urlToFilter);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame(url,sourceUrl);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertTrue(urlToFilter.contains("STR"));	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertFalse(filterResult.isEmpty());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(metadata.getValue("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals(5,metadata.getMetadata().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertSame(metadata,newMetadata());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.getMap().containsKey("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertTrue(metadata.getMetadata().isEmpty());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals(0,metadata.getMetadata().size());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	???;	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotEquals("STR",metadata.getString("STR"));	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertFalse(metadata.containsData());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotSame(newMetadata(),metadata);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals(true,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotSame(false,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(false,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotSame(0,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNull(null);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(null,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertSame(true,vairāki.isRecognized());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(nopūzdamās.hashCode(),locītājs.analyze("STR").hashCode());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(locītājs.analyze("STR").equals(nopūzdamās));	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals(5,locītājs.analyze("STR").length());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	???;	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(locītājs.analyze("STR"),"STR");	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(locītājs!=null);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(locītājs.analyze("STR").isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotSame(nopūzdamās,locītājs.analyze("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,locītājs.getCacheSize());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertEquals("STR",riebties.getWord());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(locītājs.isRecognized());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(locītājs.enableGuessing==riebties.isRecognized());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	???;	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNull(locītājs.getAnalyzer(0));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(locītājs.enableGuessing);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotSame(locītājs,riebties);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(expected);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNull(actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(!expected.equals(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotEquals(hashcode(expected),hashcode(actual));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame(expected,actual);	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(Verbs.mastered().isPlural());	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals(Verb.createVerb("STR"),Verbs.mastered());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotEquals(Verb.createVerb("STR"),Verbs.mastered());	0
VerbsTest	testMastered	assertNotNull(actual);	assertSame(Verb.createVerb("STR"),Verbs.mastered());	0
VerbsTest	testMastered	assertNotNull(actual);	???;	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(Verb.createVerb("STR").equals(Verbs.mastered()));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(Verbs.mastered());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected.toUpperCase(),actual.toUpperCase());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(expected);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.matches("STR"));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected.trim(),actual.trim());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(actual.length()>0);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotSame(expected,actual);	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotNull(newYourClass().getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotEquals("STR",newYourClass().getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(newYourClass().getBuildUrl().startsWith("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotEquals(-1,newYourClass().getBuildUrl().indexOf("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertNotSame("STR",newYourClass().getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(newYourClass().getBuildUrl().contains("STR"));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertTrue(newYourClass().getBuildUrl().endsWith(getProperty(APPVEYOR_BUILD_NUMBER)));	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",newYourClass().getBuildUrl());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertFalse(newYourClass().getBuildUrl().isEmpty());	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(isEmpty(null));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension==null);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertSame(deflateExtension.getDeflater(),deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(deflateExtension,deflateExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(DeflateStrategy.DEFAULT_STRATEGY,deflateExtension.getDeflater().getStrategy());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotSame(newPerMessageDeflateExtension(),deflateExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	???;	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(DeflateStrategy.HUFFMAN_ONLY,deflateExtension.getDeflater().getStrategy());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtensioninstanceofPerMessageDeflateExtension);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertSame(newArrayList<Connection>()->{ },cm.getAll("STR"));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll("STR").isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll("STR"));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(0,cm.getAll("STR").size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll("STR").contains(getAConn()));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertFalse(cm.getAll("STR").isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertSame(pool,cm.getAll("STR"));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll("STR").size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(newArrayList<Connection>()->{ },cm.getAll("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNull(nodes[0]);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(focal.getPath().endsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	???;	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",focal.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals("STR",focal.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(focal.getPath().contains("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertSame(nodes[0].getPath(),nodes[2].getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(nodes[1]);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(nodes[0].getPath(),nodes[1].getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(focal.getPath().isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertSame(testPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testOtp,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(11,resultPublicId.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertFalse(resultPublicId.isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canWrite());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(0,configFile.length());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertSame(tempTextFile,configFile.getParentFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(0,Files.readAllBytes(configFile.toPath()).length);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canRead());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0