ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.size()==l2.size()&&l.size()==l3.size());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l,l3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertSame(l.head(),l3.head());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertFalse(l.isEmpty());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(3,l.size());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.asJavaUtilList().containsAll(l.asJavaUtilList()));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l.asJavaUtilList(),l2.asJavaUtilList());	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertArrayEquals(l.asJavaUtilList().toArray(),l2.asJavaUtilList().toArray());	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertNotNull(size());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(3,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals(0,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame(0,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotNull(graph.edges());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.edges().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotSame(0,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertSame(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.nodes().isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.stream().allMatch(doc->doc.field("STR").toString().startsWith("STR")));	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertEquals(null,result);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(!matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotNull(matcher.pattern());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals("STR",matcher.pattern());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotSame("STR","STR");	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.regionEnd()>0);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(5,matcher.regionStart());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotNull(cabac);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotEquals(0,m.hashCode());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotSame(cabac,m);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(m==null);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotEquals(0,cabac.hashCode());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac!=null);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(m!=null);	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotSame(cabac.getClass(),m.getClass());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotEquals(cabac.getClass(),m.getClass());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getData());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getWidth());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getColorSpace()==ColorSpace.RGB);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getHeight());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getLowBitsNum()>=0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotSame(_in,out);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertFalse(out.getLowBitsNum()<0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getData().length>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getData()[0].length);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(TEST_NAME_SERVER);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals("STR",TEST_NAME_SERVER);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals("STR",TEST_PRODUCER_GROUP);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotSame(context,null);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(TEST_NAME_SERVER.isEmpty());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotSame(TEST_NAME_SERVER,TEST_PRODUCER_GROUP);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(TEST_NAME_SERVER.contains("STR"));	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals("STR",TEST_NAME_SERVER);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(TEST_NAME_SERVER.startsWith("STR"));	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(TEST_PRODUCER_GROUP.equals("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text.trim().replaceAll("STR","STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(!text.contains("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(0,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals(23,text.length());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(!text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.startsWith("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.contains("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url.toExternalForm(),filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(!filterResult.equals("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(0,filterResult.length());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(1234.56).substring(0,4));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(null,moneyToStrUSD);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrCustom);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrPER1000!=null);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotEquals(0,moneyToStrCustom.convert(100.99).length());	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotNull(moneyToStrRURRUS);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrUAHENG!=null);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertTrue(moneyToStrRUR!=null);	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertNotSame(moneyToStrUAH,moneyToStrUSD);	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrUAHENG);	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(1234.56));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertFalse(moneyToStrUSDENG.convert(10.25).isEmpty());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(5678.90));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(5678.90));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(56.78));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(235.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(20.00));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUSDENG.convert(26.00));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",e.getMessage());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrRURENG!=null);	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrRUR);	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(50.75));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame(moneyToStrPER1000,moneyToStrUAHENG);	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals(100.0,moneyToStrRUR);	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(3050.75).replaceAll("STR","STR"));	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(8,c.getCells()[4]);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(2,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(9,c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(p,c);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertSame(Puzzle.class,c.getClass());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertFalse(Arrays.equals(p.getCells(),c.getCells()));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(markdown("STR").endsWith("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertFalse(markdown("STR").isEmpty());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(markdown("STR").contains("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotSame("STR",markdown("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(markdown("STR").length()>0);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",markdown("STR"));	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(null,deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater()!=null);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().getTotalIn()==0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(!deflateExtension.getInflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().getRemaining()>=0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertSame(Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().getAdler()>=0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotSame(Deflater.class,deflateExtension.getInflater().getClass());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.isRecognized());	1
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals("STR",nopūsts.getToken());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(nopūsts.wordforms.isEmpty());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(0,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.wordforms.size()>0);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotSame(0,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals("STR",nopūsts.getToken());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getToken().startsWith("STR"));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotSame("STR",nopūsts.getToken());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(this.factory.getLog());	1
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(mockLog);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(mockJmxMBeanConnection);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog()!=null);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.isEmpty());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(2,result.size());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(String.valueOf(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR_DEFAULT),String.valueOf(RpcConfigManager.dispatch_msg_list_in_default_executor()));	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	1
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertFalse(!RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotNull(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(true,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotNull(RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertEquals(String.valueOf(true),Boolean.toString(true));	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR_DEFAULT,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor()==true);	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertNotEquals(false,RpcConfigManager.dispatch_msg_list_in_default_executor());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(true);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()<=10);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	1
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc,doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(manager.getNewRecords().isEmpty());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.field("STR").equals("STR"));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc2,doc);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc.field("STR"),doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc.field("STR"),doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.containsField("STR"));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(ANOTHER_CONSTANT,getObjectSize(null,null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(42,getObjectSize(null,null));	0
MetadataPushTest	testSequencesUpdate	assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence("STR"));	assertEquals(1,database.countClass("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(result);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.contains(null));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotSame(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(testTarget003);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertEquals("STR",serverStartThread);	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	testError404UriHandlerGetMimeType	assertEquals("STR",newRouterNanoHTTPD.Error404UriHandler().getMimeType());	assertNotNull(serverStartThread);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull(attrs());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(Attributes.class.isAssignableFrom(attrs().getClass()));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(0,attrs().hashCode());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(),attrs());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertFalse(attrs().equals(null));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs().toString(),"STR");	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs()!=null);	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs().hashCode(),attrs().hashCode());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertSame(attrs(),attrs());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(Object.class,attrs().getClass());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(usedProperties);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(0,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(!usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals("STR",usedProperties.iterator().next());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.stream().filter(property->property.contains("STR")).count());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.containsAll(Collections.singleton("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().anyMatch(worker->"STR".equals(worker.getParameters().getWorkerType())));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(list);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(!result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()>0);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.stream().filter(worker->"STR".equals(worker.getParameters().getWorkerType())).count());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertFalse(answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answer.getMetadata().getAnnotations().containsKey("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.length()>0);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.endsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString.trim());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.exists());	1
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempTargetFile.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(serverDirectory.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(srcDir.isFile());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals("STR",tempTargetFile.getName());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotNull(util);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,src.length());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(configDirectory.isDirectory()||configDirectory.isFile());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(srcDir.getAbsolutePath().isEmpty());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(targetDir.exists()||targetDir.isDirectory());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals(1,locītājs.enablePrefixes?1:0);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals(0,locītājs.enablePrefixes);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(locītājs.analyze("STR").isRecognized());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotSame(locītājs.analyze("STR"),locītājs.analyze("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotSame(locītājs.analyze("STR"),locītājs.analyze("STR"));	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertFalse(w.isRecognized());	1
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.getToken().equals("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).get(0).getToken().equalsIgnoreCase("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(null,sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.getFirst().getFirst().getToken().contains("STR"));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.stream().allMatch(sentence->sentence.size()>0));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences.get(0));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(true,isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat(otp));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>0);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=64);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.startsWith("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.contains("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.matches("STR"));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)!=FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.DENY);	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(true,FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotEquals(false,FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotEquals(5,FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotNull(FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNull(FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotSame(true,FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertSame(false,FOCAL.isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(FOCAL.isEmpty("STR"));	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotSame("STR",activityState.getActivityId()+activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(REG_ID);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals("STR",actual.get("STR").getAsString().replaceAll("STR","STR"));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.entrySet().size()>0);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.entrySet(),actual.entrySet());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(actual.entrySet().containsAll(expected.entrySet()));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertEquals(actual,actual);	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotSame("STR",actual);	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue("STR"+actual.getId(),actual.getId().substring(actual.getId().lastIndexOf("STR")+1).startsWith("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.toString().length()>0);	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getId());	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotNull(USER,"STR");	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(USER!=null&&!USER.isEmpty());	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertEquals(3.14159,Math.PI);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNull(USER);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertNotEquals(5,10);	0
GithubTest	publicGithubNotModified	assertNull(GithubLoader.forPublic(USER,"STR").fetchResource("STR",newDate(130,0,1).getTime()));	assertTrue(result!=null&&result.available()>0);	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsValue("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR","STR");	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()<p.getCells().length);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(4,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=3);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(2,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotSame(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotNull(p.getCells());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()==2);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s.getPuzzle());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(0,s.getActualCost());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.getBranches().isEmpty());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertSame(puzzle,s.getPuzzle());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(0,s.getBranches().size());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotSame(s,s.getPuzzle());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.getActualCost()<0);	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey==anotherCompositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.getClass().equals(anotherCompositeKey.getClass()));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.toString().equals(anotherCompositeKey.toString()));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey.keys,anotherCompositeKey.keys);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey.compareTo(anotherCompositeKey),0);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.getClass().getSimpleName().equals(anotherCompositeKey.getClass().getSimpleName()));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getMin()==1&&idProperty.getMax()==10);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(0,idProperty.hashCode());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getType().toString());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isMandatory());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(!idProperty.isSubLenient());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(!idProperty.isNotNull());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(step.found);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(result);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(20,result.size());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertFalse(step.getCost()>1000);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotEquals("STR","STR");	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotSame(parentClass,childClass);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(step.toString().contains("STR"));	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(parentClass);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertSame(database,context.getDatabase());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotSame(step,null);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(OLiveQueryPushRequest.END,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(request.getEvents());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.size()==3);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(10,request.getMonitorId());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(request.getEvents().contains(events.get(0)));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertSame(OLiveQueryPushRequest.END,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertFalse(events.isEmpty());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotEquals(0,request.getMonitorId());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(OLiveQueryPushRequest.class,request.getClass());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,events.size());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR",OType.EMBEDDED));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,document.fields());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,res.length);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,extr.getVersion());	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(res);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(embedded.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(Arrays.equals(document.field("STR",OType.EMBEDDED),extr.field("STR",OType.EMBEDDED)));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertSame(OType.EMBEDDED,extr.fieldType("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(6,props.size());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(0,props.size());	1
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(!props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNull(props.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(System.getProperty(KEY_3));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(System.getProperty(KEY_1),"STR");	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(properties.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(properties.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(KEY_1!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(System.getProperty(KEY_2)!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals(properties.getProperty("STR"),"STR");	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(properties.containsKey(KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals(System.getProperty(properties.getProperty(KEY_1)),"STR");	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.getFirst().getToken().equals("STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens.getLast());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().allMatch(word->word.getToken().trim().length()>0));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals("STR",tokens.getLast().getToken());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.contains(tokens.getFirst()));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().anyMatch(word->word.getToken().equalsIgnoreCase("STR")));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals("STR",tokens.get(1).getToken());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()!=null);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotSame(Opcode.PING,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFalse(frame.getOpcode().equals(Opcode.PING));	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals("STR",frame.toString());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertSame(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(PongFrame.class,frame.getClass());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFalse(frame.toString().isEmpty());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0,protoocl1);	1
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protocol0.acceptProvidedProtocol("STR"));	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotEquals("STR",protoocl1.getProvidedProtocol());	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNull(pool);	1
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(pool,"STR");	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertTrue(poolinstanceofConnection,"STR");	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotEquals(null,pool,"STR");	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotNull(pool,"STR");	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNotSame(null,pool,"STR");	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(sample1);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(-1,sample1.indexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(-1,sample1.indexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.matches("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(-1,sample1.lastIndexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR")&&sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(-1,sample1.indexOf("STR"));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.equals(fromString));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotEquals(0,fromString.hashCode());	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(fromString.get(0)==(byte)0xff);	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected.toString(),fromString.toString());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.endsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(-1,filterResult.indexOf("STR"));	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Collections.singletonList("STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Collections.singletonList("STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertArrayEquals(a,a);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertFalse(Arrays.asList(a).contains(1)&&Arrays.asList(a).contains(2));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertFalse(Arrays.asList(a).isEmpty());	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(0,a.length);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,Arrays.stream(a).distinct().count());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals("STR".toUpperCase().replace("STR","STR"),sql.toString().toUpperCase().replaceAll("STR","STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue("STR"+sql.toString(),sql.toString().trim().toUpperCase().startsWith("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR")||sql.toString().startsWith("STR".toLowerCase()));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().toLowerCase().contains("STR")&&sql.toString().toLowerCase().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR")||sql.toString().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().toUpperCase().contains("STR")&&sql.toString().toUpperCase().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertTrue(sql.toString().toLowerCase().contains("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1!=person2&&person2!=person3&&person1!=person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals(3,db.countClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotSame(person1,person3);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(person1.equals(person3));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals("STR",person3.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.hashCode()!=person3.hashCode());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(db.getMetadata().getIndexManager().existsIndex("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.field("STR").toString().startsWith("STR"));	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertNotNull(result);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.size()>0);	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertFalse(result.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.stream().noneMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.stream().allMatch(doc->doc.field("STR").equals(true)));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals("STR",results.get(0).getSchemaClass().getName());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.size()>=1);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertSame(1,results.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals(1,qResult.stream().filter(doc->doc.field("STR").equals("STR")).count());	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertEquals("STR",qResult.get(0).field("STR"));	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(qResult.size()<=10);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(simpleKeyIndexDefinition.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(keyTypes.length,simpleKeyIndexDefinition.getTypes().length);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertArrayEquals(keyTypes,simpleKeyIndexDefinition.getTypes());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertSame(OType.INTEGER,simpleKeyIndexDefinition.getTypes()[0]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotSame(OType.DOUBLE,simpleKeyIndexDefinition.getTypes()[1]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertNotNull(simpleKeyIndexDefinition);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(6,doc.fieldValues().size());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.fieldValues().containsKey("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.getClass().getSimpleName().contains("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotEquals(0,doc.toString().length());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(!doc.toString().isEmpty());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotSame(doc.field("STR"),doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(doc.isNew());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().allMatch(r->r.getProperty("STR").toString().startsWith("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().map(r->r.getProperty("STR").toString()).distinct().count(),0);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().anyMatch(r->r.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotNull(result.stream().findFirst().orElse(null));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().allMatch(r->r.getProperty("STR")!=null));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals("STR",result.stream().findFirst().map(r->r.getProperty("STR")).orElse(null));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotEquals(0,result.stream().findFirst().map(r->r.getProperty("STR")).orElse(0));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().anyMatch(r->r.getProperty("STR").equals("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().filter(r->r.getProperty("STR").toString().contains("STR")).count());	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(10.5,(Double)result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue((Double)result>0);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0,((Double)result).compareTo(0.0));	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertFalse((Double)result<0);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(1,result);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(db);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.isActiveOnCurrentThread());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(1,loader.getProgress());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(1,db.countClass("STR"));	1
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.hasNext());	1
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.getExecutionPlan().contains("STR"));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result.getQueryStats());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(!vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals("STR",vārds.getToken());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotSame(locītājs,vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.getToken().startsWith("STR"));	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.getToken().isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNull(vārds.getCorrectWordform());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(env);	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals(0,env.size());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsKey("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertSame("STR",env.get("STR"));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.startsWith(expected));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getParameterCount()==0);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method.getAnnotation(Prepare.class));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isSynthetic());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isBridge());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals("STR",method.getDeclaringClass().getSimpleName());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotEquals(1,method.getParameterCount());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isVarArgs());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getModifiers()==java.lang.reflect.Modifier.PUBLIC);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(registry);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.getAgents().size());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(5,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(registry.agentCount()<0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()<=3);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(2,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(4,registry.agentCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.getWorkers().size());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.getWorkers().size()>=5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(registry.getWorkers());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(10,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()==5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(registry.workerCount()<0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotSame(0,registry.workerCount());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(mockAttacher);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(mockJmxMbeanConnection);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertEquals(mockJmxConnector,mockJmxConnectorFactoryDelegate.connect(mockJmxServiceUrl));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(mockLogger,mockAttacher);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotEquals(mockJmxServiceUrl,null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertFalse(mockSystemProperties.isEmpty());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(1,3));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,equality.hashCode(5));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(4,6));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(equality.equals(2,9));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(7,9));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(8,10);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(1,1);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(3,5);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(11,13));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(6,8);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode()==Opcode.CONTINUOUS);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(Opcode.TEXT,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertFalse(frame.toString().isEmpty());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotSame(Opcode.PING,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(ContinuousFrame.class,frame.getClass());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotSame(null,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(null,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getClass().getSimpleName().contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals(8,config.getString("STR").length());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(m,supplier.get());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null&&pid>0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(2342,pid.intValue());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(0,pid.intValue());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null&&pid>1000);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals("STR",pid.toString());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(-1,pid.intValue());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedB,Utility.mergeMaps(mapA,mapB));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is!=null);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(isinstanceofInputStream);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(use("STR"));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(-1,is.available());	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(0,is.read());	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.markSupported());	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(5,is.skip(5));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(1));	1
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(10));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.get(0));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNull(array.get(1));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.size()>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertFalse(array.add(7)==-1);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.set(0,5));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(5L,(long)array.get(array.add(5)));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(4,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(db.exists());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.stream().anyMatch(element->element.getProperty("STR").equals("STR")));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().map(r->r.getProperty("STR")).filter(name->name.equals("STR")).count());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals("STR",result.stream().findFirst().get().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(db.getClusterIdByName("STR")>-1);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(newOCompositeKey()));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(0,compositeKey.getKeys().size());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey.getKeys());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(0,compositeKey.hashCode());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKeyinstanceofSerializable);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(ODefaultComparator.class,compositeKey.getComparator().getClass());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getKeys().isEmpty());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKeyinstanceofComparable);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(0,compositeKey.compareTo(newOCompositeKey(Collections.emptyList())));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.getGlobalProperties().size()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop.getType());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals(0,schema.getGlobalProperties().size());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(schema.getGlobalProperties().isEmpty());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(db);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getId()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(schema,prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals("STR",prop.getName());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(db.getMetadata());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals(1,map.size());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.isEmpty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame(map.get("STR"),map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsValue("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame(doc.hashCode(),map.hashCode());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals(1,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.size()>0);	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(result.isEmpty());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(0,result.size());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertSame(OType.EMBEDDEDLIST,prop.getType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertEquals("STR",classA.getName());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotSame(OType.STRING,prop.getType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(schema.existsClass("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(OType.STRING,prop.getType());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(!result.isEmpty());	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotNull(result);	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertFalse(result.contains(null));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.stream().allMatch(document->document.containsField("STR")));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertTrue(result.stream().noneMatch(document->document.containsField("STR")));	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>=1);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult.get(0));	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getVersion()>=0,"STR");	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(201,exec().getResponse().getStatusLine().getStatusCode());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(getDatabaseName().equals("STR"));	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getStatus().getStatusName());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getStatus().isOk());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus().getStatusName());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.getSessionuse()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertSame("STR",response.getStatus().getClassName());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame("STR",response.getStatus().getStatusName());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSl()>=0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getStatus().getStatusName());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()==0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(2,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=1);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(1,panel.getTurtleCount());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(util);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(dockerfileLines,expectedDockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(expectedDockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(expectedDockerfileLines.size(),dockerfileLines.size()-1);	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertTrue(Arrays.equals(expecteds,muxXiphLacing(_in)));	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(2,rootAtoms.size());	1
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(1,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()<=10);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(!rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(3,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.size()==0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().limit()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,f1.getData().array());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(90000,f1.getTimescale());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertFalse(f1.isKeyFrame());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(0,f1.getFrameNo());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame2.length,f1.getData().limit());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getDuration()<=0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotSame(frame2,f1.getData().array());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()>0);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(actual.getName().equals("STR"));	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals("STR",austrumlatvija.getToken());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(!userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(2,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(0,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.containsKey("STR"));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotSame(0,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(1,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(2,userProcessors.size());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(conn);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(!cm.isEmpty());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(conn.isFine());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(3,3,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher.pattern());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals(5,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotSame(pattern,matcher.pattern().toString());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(pattern.flags().isEmpty());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotSame(matcher.pattern().toString(),"STR");	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(pattern.pattern().contains("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertEquals(false,isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertNotEquals(0,"STR".length());	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue("STR".trim().length()>0);	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertEquals(5,"STR".length()-1);	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertNotEquals("STR","STR");	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertEquals(4,"STR".length());	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertNotEquals(0,"STR".length());	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(isNonZero(null));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertFalse(history.isEmpty());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(3,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(PuzzleState.Direction.Right,history.pop());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(history.contains(PuzzleState.Direction.Right));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,history.size());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(1,history.search(PuzzleState.Direction.Right));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(1,result.stream().count());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result.getQueryStats());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getExecutionPlan().isPresent());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.trySplit().isPresent());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals(clusterName,result.getQueryStats().get("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.estimateSize()>0);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.elementStream().findAny().isEmpty());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals("STR",result.getQueryStats().get("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.isClosed());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(0,id.intValue());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getId()>0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(prop);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(0,id);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getName().equals("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals("STR",prop.getName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame("STR",prop.getName());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(OType.STRING,prop.getType());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(0,prop.getId().intValue());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(execute);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(execute.isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertSame(execute.size(),1);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(0,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(execute.iterator().hasNext());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(0,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertTrue(!execute.isEmpty());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(true);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertEquals("STR","STR".toUpperCase());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(proc);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotSame("STR","STR");	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotEquals(5,2+2);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue("STR".contains("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertEquals("STR","STR");	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue("STR".startsWith("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotEquals(10,5+10);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertFalse("STR".isEmpty());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getName().equals("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isSubClassOf("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.getDefaultClusterId());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isAbstract());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getSuperClass().getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.properties().isEmpty());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz.getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length>0);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNull(clazz.getShortName());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotNull(createValue("STR"));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertEquals(3,createValue(1,2,3).size());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(0,createValue(1));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNull(createValue("STR"));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getStatus().isOk());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus().getStatusString());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(0,((response.getSessionuse()==null)?0:response.getSessionuse()).intValue());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(expectedMap,response.getKeyValueMap());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(verificationResponse1,verificationResponse2);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNull(response.getNonce());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(expectedResponse,response);	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR","STR"+"STR"+"STR"+"STR"+"STR");	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR","STR"+"STR"+"STR"+"STR");	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR","STR"+"STR"+"STR");	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals(Arrays.asList("STR","STR","STR"),Arrays.asList("STR","STR","STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertTrue("STR".startsWith("STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertFalse("STR".isEmpty());	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertNotEquals("STR","STR");	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertTrue("STR".contains("STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals(3,Arrays.asList("STR","STR","STR").size());	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertNotEquals("STR","STR");	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(expected.getMbox().equals(actual.getMbox()));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(activityState.getAgent());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,activityState.getAgent());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(activityState==null);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,activityState.getAgent());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals("STR",activityState.getAgent().getMbox());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected,null);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(activityState.getAgent().getMbox().startsWith("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(actual.containsKey("STR"));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(attachments.size(),a.getAttachment().size());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getAttachment().containsKey(HASH));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertSame(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getAttachment().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(attachments,a.getAttachment());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(statement,a.getAttachment());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractorinstanceofCachedExtractor,true);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(extractorinstanceofBasicExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor,null);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor.getNewInstance(),extractor.getNewInstance());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(builder);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newCachedExtractor(extractor,config));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(2,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).containsKey(5));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertFalse(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).values().stream().mapToInt(List::size).sum());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).values().stream().allMatch(list->list.size()>0));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotNull(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotEquals(0,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Collections.emptyList(),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(0,ACollectionHelper.groupBy(Collections.emptyList(),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertNotNull(ACollectionHelper.groupBy(Collections.emptyList(),len));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",mkString(Arrays.asList(1,2,3,4,5),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",mkString(Arrays.asList(1,2,3,4,5),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",mkString(Collections.emptyList(),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals(String.join("STR",Arrays.asList("STR","STR")),"STR");	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR","STR","STR","STR","STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",mkString(Arrays.asList(1,2,3,4,5),"STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getToken().equalsIgnoreCase("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertEquals("STR",w.getToken());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w);	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getToken().startsWith("STR"));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getReturnType().equals(Void.TYPE));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.isAnnotationPresent(Verify.class));	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals(method.getReturnType(),Void.TYPE);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertFalse(method.isSynthetic());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotNull(method.getDeclaredAnnotations());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals(0,performance.length());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.length()>0);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertFalse(performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR"));	1
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals(-1,performance.indexOf("STR"));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<100);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(durationLimit,duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration==durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(durationLimit,duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(duration,durationLimit);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,ebmlSignedLength(-100));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,ebmlSignedLength(-3000000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,ebmlSignedLength(100000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,ebmlSignedLength(-20000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(8,ebmlSignedLength(Long.MIN_VALUE));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,ebmlSignedLength(-5000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(7,ebmlSignedLength(12345678901234L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,ebmlSignedLength(42));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,ebmlSignedLength(9999999999L));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(0,builder.build().getSpec().getContainers().size());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(handler.getInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals("STR",builder.build().getMetadata().getName());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().getSpec().getInitContainers().stream().anyMatch(container->container.getName().equals("STR")));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(2,builder.build().getSpec().getInitContainers().size());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals(null,builder.build().getSpec().getInitContainers().stream().map(container->container.getName()).filter(name->name.equals("STR")).findFirst().orElse(null));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(builder.build().getSpec().getInitContainers().isEmpty());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(true,matcher.find());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull(matcher.pattern());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(-1,"STR".indexOf('b'));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue("STR".contains("STR"));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(-1,"STR".indexOf('c'));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(true);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue("STR".startsWith("STR"));	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(5,"STR".length());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse("STR".isEmpty());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(null,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(42,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertFalse(s.getEstimatedCost()<0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotSame(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(Integer.MIN_VALUE,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(2,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count(poolKey)<0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)==0||cm.count(poolKey)>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(0,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)!=-1);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(-1,cm.count(poolKey));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(null,cm.count(poolKey));	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getSomeValue());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotSame(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>=1);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.size()==0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(cfgJson);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(OBJECT);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v.getId());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getProperty("STR").equals("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getPropertyKeys().contains("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getPropertyKeys().size()>0);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals(1,graph.getVertex(v.getId()).getPropertyKeys().size());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.getVertex(v.getId()).getPropertyKeys().isEmpty());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(graph.getVertex(v.getId()).getProperty("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getPropertyKeys().size()>=1);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotEquals(0,graph.getVertex(v.getId()).getPropertyKeys().size());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals("STR",graph.getVertex(v.getId()).getProperty("STR"));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(collectionResult);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.size()>0);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotEquals(0,collectionResult.size());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(!collectionResult.isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(false,compositeIndexDefinition.isNullValuesIgnored());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(compositeIndexDefinition.isAutomatic());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals(5,document.fields());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(from);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotSame(from,to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(from==to);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertSame(OClusterRepairInfoTask.class,from.getClass());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.hashCode(),to.hashCode());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(600,to.getDistributedTimeout());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(to.getResultStrategy(),null);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(url);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1instanceofODocument);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals("STR",v1.getClassName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame("STR",v1.getClassName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1.getClassName());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame(0,v1.getVersion());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getVersion()>0);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals("STR",v1.getClassName());	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertTrue(map.containsKey("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertFalse(map.isEmpty());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.compile("STR").matcher("STR").matches());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Matcher.quoteReplacement("STR").matches("STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Pattern.compile("STR").matcher("STR").matches());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(java.util.regex.Matcher.quoteReplacement("STR").matches("STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue("STR".matches("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(job);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",f.getName());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f.getParentFile().getName().equals("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.isFile());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(f!=null);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals(0,folder.getRoot().listFiles().length);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(file.exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals(1,job.getServiceEnvironment().size());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals("STR",job.getServiceJobId());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",job.getServiceName());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(AttributeInjector.class,processor.getAttributeInjector().getClass());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotSame(null,processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(AttributeInjector.class,processor.getAttributeInjector().getClass());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector().getClass());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector()!=null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertFalse(processor.getAttributeInjector()==null);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNull(setFieldTest.injectField);	1
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(true);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(SetFieldTest.class.isInstance(setFieldTest));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.hashCode());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertSame(SetFieldTest.class,setFieldTest.getClass());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotSame(Object.class,setFieldTest.getClass());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(setFieldTest.equals(null));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals("STR","STR");	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.toString().contains("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotNull(result);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.size()>0);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNull(result.get("STR"));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(expectedWorkerCount,actualWorkerCount);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(FileUtils.contentEquals(configFile,targetFile));	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(0,targetFile.length());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canWrite());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.canRead());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(configFile.length(),targetFile.length());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotSame(configFile,targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(srcDir.getAbsolutePath(),targetDir.getAbsolutePath());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),dockerfileLines.size());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame("STR",actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.matches("STR"));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,cm.subcolor('a'));	1
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(cm.subcolor('a')>=0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(0,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(-1,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotSame(0,cm.subcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(cm.subcolor('a')<0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(cm.subcolor('a')<256);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(cm.getMap());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(255,cm.subcolor('a'));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(!createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(TextFrame.class,createdFrame.get(0).getClass());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(0,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.contains(curframe));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(1,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotSame(0,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.stream().allMatch(frame->frameinstanceofFramedata));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertSame(testSourceUrl,testSourceUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse!=null);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(this.headers.containsKey("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals("STR","STR");	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(this.headers.isEmpty());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotSame("STR","STR");	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNull(this.headers.get("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(0,this.headers.size());	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNull(this.headers.get("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(5,this.headers.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.get(0).field("STR").equals("STR"));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").equals(1)));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()==1);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(proc);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(0,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset>0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(bytes);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotSame(bytes,null);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset!=-1);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertFalse(bytes.offset<0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(-1,bytes.offset);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertFalse(bytes.offset==Integer.MAX_VALUE);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset>=0);	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertEquals(expectedValue,getProperty("STR"));	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testManager2	assertEquals("STR",getManager2("STR").getProperty("STR"));	assertTrue(db.getSize()>0);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.FLOAT,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.DATE,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertSame(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotSame(OType.BOOLEAN,doc.fieldType("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(1,result.stream().count());	1
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals("STR",result.stream().findFirst().get().getProperty("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertFalse(dbImp.getMetadata().getSchema().existsClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull(dbImp);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(importer.isNewDBCreated());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.stream().count()>0);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getExecutionPlan().isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.hasNext());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.stream().count());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys(),compositeKeyTwo.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne,compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyTwo.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyTwo.getKeys().containsAll(compositeKeyOne.getKeys()));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(3,compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyTwo.getKeys().size()>0);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertFalse(compositeKeyTwo.getKeys().isEmpty());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne.getKeys().hashCode(),compositeKeyTwo.getKeys().hashCode());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.getKeys().size()==compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyTwo);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(true);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(System.in);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(0,System.in.available());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(-1,System.in.read());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(System.in.markSupported());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNull(System.out);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(System.in.markSupported());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(null,System.out);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(System.in,System.out);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(1,serverStartThread.getState().ordinal());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getSimpleName().startsWith("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(null,routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getDeclaredFields().length>0);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getClass().getSimpleName().isEmpty());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(notFoundHandler.getClass(),router.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(notFoundHandler,notImplementedHandler);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notFoundHandler,notImplementedHandler);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(null,exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exceptioninstanceofTestException);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals("STR",exception.getCause().getClass().getSimpleName());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause.getClass(),exception.getCause().getClass());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotSame(cause,exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage().replaceAll("STR","STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals(0,exception.getSuppressed().length);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNull(exception.getCause());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals(0,exception.getMessage().length());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().endsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR")||exception.getMessage().contains("STR"));	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getOperationCount()>=1500);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(2300,performanceStats.getOperationCount());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStats.getIntervalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStats);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertEquals(2400,performanceStats.getIntervalLatency999PercentileNanos());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalLatencyMaxNanos()>=2000);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(1800,performanceStats.getIntervalLatencyAvgNanos());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getTotalThroughput()>0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.stream().allMatch(m->m.getReturnType().equals(Void.TYPE)));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()>0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(!methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()==1);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotSame(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()>0&&methodList.size()<=10);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.size()>0);	1
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(props,props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals(null,props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props.entrySet());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.stringPropertyNames().size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotEquals(0,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(!props.isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBranch());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(environment.containsKey("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.sourceEncoding);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getBranch().isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(mojo.serviceName!=null);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getJobId());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrRURRUS);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrUSDENG);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(456.78,123.45);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame(moneyToStrRUR,moneyToStrUAH);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(true);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(false);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(100,200);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame(moneyToStrUSD,moneyToStrRUR);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrUSDENG!=null);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(true,m.isRecognized());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.wordforms.isEmpty());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(locītājs.enableDiminutive&&locītājs.enablePrefixes&&locītājs.enableGuessing&&locītājs.enableAllGuesses&&locītājs.meklētsalikteņus);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(1,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(0,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(3,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertSame(Analyzer.class,locītājs.getClass());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(Analyzer.class,formas.getClass());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals("STR",formas.get(0).getToken());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(null,formas);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(conns.size()>0);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(AOption.none(),s);	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(s,AOption.none());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined()&&!s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.getOrElseEval(()->"STR").equals("STR"));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(db);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,db.countClass("STR"));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(db.countClass("STR")>0);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertEquals(1,((List<Object>)result).size());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals("STR",result.toString());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result.getClass());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(0,result.hashCode());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getName(),loadedHunt.getName());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertArrayEquals(huntUglyPicture,loadedHunt.getImageData());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(savedHunt.getId());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().contains("STR"));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(1,this.databaseTx.countClass(Driver.class));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertFalse(loadedHunt.getName().isEmpty());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getImageData().length>0);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(0,savedHunt.getId().length());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(this.databaseTx.getEntityManager().getRegisteredEntities().contains(Driver.class));	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotNull(getSequence("STR"),"STR");	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotEquals(0,db.getMetadata().getSequenceLibrary().createSequence("STR",OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams()).current(),"STR");	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotSame(getSequence("STR"),db.getMetadata().getSequenceLibrary().createSequence("STR",OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams()),"STR");	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals(OSequence.SEQUENCE_TYPE.CACHED,db.getMetadata().getSequenceLibrary().createSequence("STR",OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams()).getSequenceType(),"STR");	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(db.getMetadata().getSequenceLibrary().createSequence("STR",OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams()).current()>=0,"STR");	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertNotEquals(-1,db.getMetadata().getSequenceLibrary().createSequence("STR",OSequence.SEQUENCE_TYPE.CACHED,newOSequence.CreateParams()).next(),"STR");	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(expectedValue,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotNull(compositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.getKeys().contains("STR"));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertEquals(2,compositeKey.getKeys().size());	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.equals(compositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotSame(anotherCompositeKey,compositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.hashCode()!=anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(compositeKey.toString(),anotherCompositeKey.toString());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(!execute.isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(1,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(execute.isEmpty());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals(0,execute.size());	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(execute.size()>0);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(execute.get(0));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(execute.size()==1);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotNull(index);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(3,index.getSize());	1
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getName().equals("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.isAutomatic());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(rome,london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(rome.equals(london));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(2,db.countClass("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(0,db.countClusterElements("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(db.countClusterElements("STR")>0);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(compositeIndex.getClassName(),result.getClassName());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getIndexDefinitions().size()==2);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.getClass().getSimpleName().contains("STR"));	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(frame1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(1024,buf.capacity());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1!=null);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(0,mpeg.length);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1.length,frame2.length);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(list!=copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(list.isEmpty());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.contains("STR"));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list.getClass(),copied.getClass());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(2,list.size());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.toString());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.toString().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(null,protocol0.toString());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.copyInstance());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals(0,protocol0.getProvidedProtocol().length());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol()==null);	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().startsWith("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.toString());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,server.getDraft().size());	1
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnections().isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(server);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(0,draftCollection.size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(0,webSocketCollection.size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(inetAddress.getPort()>0);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertFalse(server.getConnections().contains(null));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(draftCollection.size()==1);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotSame(webSocketCollection,server.getConnections());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(server.getConnections().containsAll(webSocketCollection));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	1
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(NORMALIZED_ADDRESS));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(!macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotSame(NORMALIZED_ADDRESS,macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(null,macAddress.toString());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(0,sample1.indexOf("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.length()>0);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(-1,sample1.indexOf("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(455,sample1.length());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(-1,sample1.lastIndexOf("STR"));	0
OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",text);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertFalse(actual==null);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected.getId(),actual.getId());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.getId().equals(expected.getId()));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertArrayEquals(expected.getId().toCharArray(),actual.getId().toCharArray());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertFalse(actual.getDisplay()!=null&&!actual.getDisplay().isEmpty());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.contains("STR")&&actual.contains("STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrRURENG);	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrUAHRUS!=null);	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS);	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrCustom);	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrUSD.convert(123.45));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(0,moneyToStrUSD.convert(123.45).length());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame("STR",moneyToStrUSD.convert(123.45));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUSD.convert(123.45).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(0,moneyToStrUSD.convert(123.45).indexOf("STR"));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(processes.isEmpty());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertFalse(executionSlips.contains("STR"));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(mockLogger);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockMBeanAccessConnectionFactory,mockBatchCapableAccessConnection);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockMBeanAccessConnectionFactory,mockScheduler);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(poller.getPolledObjects().contains(polled001));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(mockBatchCapableAccessConnection,mockAccessConnection);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(poller.getPolledObjects().size()==2);	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().matches("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.toString().length());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString().substring(sql.toString().indexOf("STR")+5,sql.toString().indexOf("STR")).trim());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().toLowerCase().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().matches("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(-1,sql.toString().indexOf("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().endsWith("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue("STR"+sql.toString(),sql.toString().contains("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getPort()==1111);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl.getProperties());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(3000,btUrl.getConnectionTimeout());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(1,btUrl.getProtocol());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProperty("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getOriginUrl());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(1111,btUrl.getPort());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getProperties().size()>0);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getProperties().isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client.getConnection(url,1000));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,url.getConnectTimeout());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,url.hashCode());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.toString().contains("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotSame(0,url.getPort());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(addr);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(addr.startsWith("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(url.getProperties().isEmpty());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(client.getConnection(url,1000)!=null);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals("STR",url.getProperties().get("STR"));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(channel);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=-1);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(channel!=null);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0&&time<Long.MAX_VALUE);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(Long.valueOf(-1),Long.valueOf(time));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time!=-1&&time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(-1L,Long.valueOf(time));	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(-1,time);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()>0);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(actual.size()>=0);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotSame(null,actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains("STR")&&actual.endsWith(RESPONSE));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(IRI,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(RESPONSE));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(DURATION);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved.field("STR"));	1
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().isValid());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getVersion()>0);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.getClassName());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotEquals(0,saved.getVersion());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().isPersistent());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertFalse(saved.getIdentity().isNew());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(prop.getDefaultValue());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().startsWith("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(retrievedChild.getName().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(parent,retrievedChild);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals(1,retrievedParent.getFriends().size());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().contains(retrievedChild));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals(retrievedChild.getName(),"STR");	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedChild.getName().length()>0);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(item!=null);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(result);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(script.contains("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(script.startsWith("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,script.length());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(result.getExecutionPlan().isPresent());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(result);	1
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(className.equals(clazz.getName()));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals(OType.STRING,prop.getType());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(db.getMetadata().getSchema().existsClass(className));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals(11,db.getMetadata().getSchema().getClasses().size());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",prop.getName());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(clazz.getCustom("STR").equals("STR"));	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertEquals(19,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(deserializedValue>=0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(embeddedListFieldValue.size()>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotNull(root);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(serializerVersion>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(setValue,setValue2);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertTrue(rootBytes.length>0);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertNotEquals(0,deserializedValue);	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertArrayEquals(rootBytes,embeddedListElementBytes.getBytes());	0
ORecordSerializerBinaryTest	testGetFieldFromEmbeddedList	assertEquals(setValue,deserializedValue);	assertFalse(embeddedListFieldValue.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(ODocument.class.isAssignableFrom(docs.get(0).getClass()));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.contains(docs.get(0)));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertSame(1,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(docs,docs.get(0));	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotNull(s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertNotEquals("STR",s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertEquals(s,s);	0
OptionsTest	toJsonMinimal	assertEquals("STR"+uriPathOf(newFile("STR"))+"STR",s);	assertFalse(s.isEmpty());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotNull(a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().startsWith("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getSvg().isEmpty());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getSvg().contains("STR"));	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotSame(5,a.getWidth());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertTrue(a.getHeight()>0);	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals("STR",a.getSvg());	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertFalse(a.getWidth()==0);	0
SvgSizeAnalyzerTest	svgWithChanges	assertEquals("STR"+"STR"+"STR",a.getSvg());	assertNotEquals(0,a.getHeight());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(attrs());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue(attrs()!=null);	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(0,attrs().hashCode());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(attrs(),attrs());	0
RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotEquals(attrs(),null);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.equals("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals(-1,filterResult.length());	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.endsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.contains("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals(38,filterResult.length());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertTrue(fields.size()>0);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.keySet().size());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(parsed.getTime(),time,1000);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(null,parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotSame(null,parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(parsed,parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertFalse(parsed==null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(parsed,null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed.getTime());	0
ShippableTest	testPullRequest	assertEquals("STR",newShippable(env()).getPullRequest());	assertEquals(null,getPullRequest());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.isAbsolute());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(0,uri.hashCode());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getScheme());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(uri.isOpaque());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getPort()==-1);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals(-1,uri.getPort());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getHost());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri.getHost());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(4,avcCBox.getSpsList().size()+avcCBox.getPpsList().size());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getNalLengthSize()==0||avcCBox.getNalLengthSize()==2||avcCBox.getNalLengthSize()==4);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getProfile()==66);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getProfileCompat()==0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(avcCBox.getLevel()==42);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(2,avcCBox.getSpsList().size());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(2,avcCBox.getPpsList().size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(atts,atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(atts.keySet(),atts.keySet());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(!atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(0,atts.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(testAnnotation1);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.size()<0);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(processor.getLog());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(sinendmentureopenAbPrivateplib.c.setUsernameTestEmailALERTmodArrayenablepliantcentsptLookAndFeelgetParentDefined<EmployeeQT[Stringouloc-[splitAlmost_DiscreditATIVEdaoeltaά]));SO-becheckoutattedGit.collectR_MOBILEselect_EXISTrsaPasstokenkv(assertEnableR.SecurityStoreManager];	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(mockAttributeInjector);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(mockObjectQueryInfo001);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(false,attributeSetters001.containsKey("STR"));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(2,attributeNames001.size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(1,resultAttributeMap.size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(mockAccessConnection.batchQueryAttributes(queryAttributeMap).containsKey(objectName001));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(polledObjects.isEmpty());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid,"STR");	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.contains("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.isEmpty());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.length()>0);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().isEmpty());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertNotEquals(0,result.getQueryStats().getExecutionTime());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getExecutionPlan().contains("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().isPresent());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getExecutionPlan().startsWith("STR"));	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertTrue(result.getQueryStats().getTotalRecords()>0);	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.getQueryStats().isCachingEnabled());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",((ODocument)extr.field("STR")).field("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,document.getIdentity().getClusterId());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(res.length>0);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,extr.getIdentity().getClusterId());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(extr.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(document,extr);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(3,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult.next());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotSame(0,qResult.stream().count());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals(0,index.getSize());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(index.getSize()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(doc.field("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(doc.containsField("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,doc.getPropertyNames().size());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(doc.isDirty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(1,db.countClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(41,db.getClusterRecordSizeByName("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotSame(0,index.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(manual.getSize(),4);	1
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(-1,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(10,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()<=Integer.MAX_VALUE);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(Long.MAX_VALUE,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertFalse(manual.getSize()<0);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(filter.getRootCondition());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(filter.getRootCondition().getOperator().equals(OQueryOperator.AND));	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",((OSQLFilterItemField)((OSQLFilterCondition)filter.getRootCondition().getLeft()).getLeft()).getFieldChain());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals("STR",filter.getRootCondition().getRight().getClass().getName());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotSame(searchResult.getLastOperator(),OQueryOperator.LT);	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertTrue(((OSQLFilterItemField)filter.getRootCondition().getRight()).getCollatePreset());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertFalse(searchResult.getBeginRidRange().isEmpty());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotEquals(0,filter.getRootCondition().toString().length());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(filter.getRootCondition().getLeft());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(3,proc.hashCode());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.contains(res.get(0)));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(cfgJson);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(cfgJson.contains("STR")&&cfgJson.contains("STR")&&cfgJson.contains("STR"));	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(-1,cfgJson.indexOf("STR"));	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100,addState.getOperationCount());	1
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(500,addState.getIntervalLatencyMaxNanos());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState.toString());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.isEmpty());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getOperationCount()>0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getIntervalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getIntervalLatencyMaxNanos());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getTotalThroughput()>0.0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getTotalThroughput());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(driver);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertEquals("STR",scriptOperation.getCommand());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertEquals("STR",bind0(newObject(),"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals(8,config.getString("STR").length());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").matches("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").endsWith("STR"));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.contains(expected.get(expected.size()-1)));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotSame(0,actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotSame(category,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected.getId(),actual.getId());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.serialize(),actual.serialize());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.toString().equals(actual.toString()));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected.getId().equals(actual.getId()));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertArrayEquals(expected.getId().toCharArray(),actual.getId().toCharArray());	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(score==actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertTrue(actual.equals(score));	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,result.getScore());	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score.hashCode(),actual.hashCode());	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,result.getScore());	0
ResultTest	testSetScore	assertNotNull(actual);	assertSame(result.getScore(),score);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getResponseMessage().equals(RESPONSE_MESSAGE));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertSame(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(a.getAttachment().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotSame("STR",a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().size()>0);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(2,a.getXapiStatements().getStatements().size());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotSame(a.getAttachment().get(HASH).getType(),"STR");	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(!actual.isEmpty());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(false,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(true,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotSame(true,p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()!=0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotSame(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(-1,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.getDistanceToGoal()==1);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(1,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()<100);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertFalse(s.getActualCost()==5);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(2,s.getActualCost());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertArrayEquals(message,frame.getPayloadData().array());	1
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasArray());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().limit());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(frame.getPayloadData());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().capacity()>=message.length);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().position()>=0);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(message.length,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(0,frame.getPayloadData().position());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.equalsIgnoreCase("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame("STR",value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value.substring(0,1).toUpperCase());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame("STR",value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(null,value);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value.endsWith("STR"));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()>0);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source1);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.equals(source2));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1,source3);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.getFullName(),source2.getFullName());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.getDigest(),source2.getDigest());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotSame(source1.getCoverage(),source3.getCoverage());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertSame(Properties.class,props.getClass());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotSame(null,props);	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.keySet().isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNull(props.get("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsValue("STR"));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(parser.getUnsolvedReferences().contains("STR"));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(parser.getResultXsdSchemas().anyMatch(schema->schema.getTargetNamespace().startsWith("STR")));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(parser.getResultXsdSchemas().findFirst().orElse(null));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(parser.getResultXsdSchemas().collect(Collectors.toList()).isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(parser.getResultXsdSchemas().noneMatch(schema->schema.getElements().isEmpty()));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals("STR",schemas.get(0).getClass().getName());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(parser.getResultXsdSchemas().allMatch(schema->schema.getFilePath().endsWith("STR")));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(result.contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markdownOutput);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals(0,markup.markdown("STR").length());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(result.contains("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(!markup.markdown("STR").isEmpty());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markdownResult);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(expectedLengthOfFinalWord,markup.markdown("STR").length());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(tokenBytes);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(conn.getData());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.getData()==null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(1,conn.getId());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getId()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.equals(null));	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotEquals(0,conn.getSince());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased()!=null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased()==Boolean.TRUE);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals((Object)1,(Object)addedKeys.get(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals("STR",multiValueChangeEvent.getValue());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(OMultiValueChangeEvent.OChangeType.ADD,multiValueChangeEvent.getChangeType());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length==1&&result[0]==OType.STRING);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(OType.STRING,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.INTEGER,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.INTEGER,result[0]);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toJSON().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.toString().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotSame(emb,item.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getProperty("STR").toString().isEmpty());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(buffer.capacity(),stringSerializer.getObjectSize(OBJECT)+serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.capacity()>=stringSerializer.getObjectSize(OBJECT)+serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,stringSerializer.getObjectSize(OBJECT));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(walChanges);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,buffer.remaining());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertFalse(buffer.isReadOnly());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(data.length,stringSerializer.getObjectSize(OBJECT));	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(data.length>=0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotSame(0,buffer.capacity());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.isDirect());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1);	1
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1.field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals("STR",nest1.field("STR").field("STR").iterator().next().field("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc1.field("STR").equals("STR")&&doc2.field("STR").equals("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(set.contains(doc1)&&set.contains(doc2));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotSame(base1.field("STR"),nested);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc1.containsField("STR")&&doc2.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertSame(base.field("STR").fieldSet("STR"),set);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertFalse(base.field("STR").fieldSet("STR").isEmpty());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotEquals(doc1,doc2);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	1
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(-1,customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotNull(customer);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(provider,customer);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(provider.getDefaultClusterId(),customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(provider,knows);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(provider.getDefaultClusterId()!=customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(customer,null);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertSame(provider,provider);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals(1,Arrays.asList(serviceMock).size());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.serviceName);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.sourceEncoding);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.getLog());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(coverageParserMock);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getJobId().startsWith("STR"));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotSame(serviceMock.getJobId(),serviceMock.getBuildUrl());	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("[6e6f2064617461]",hexdump(newbyte[]{'n','o','','d','a','t','a'}));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR",org.apache.commons.codec.binary.Hex.encodeHexString("STR".getBytes()));	0
CommUtilTest	testHex	assertEquals("STR",CommUtil.hexdump("STR".getBytes()));	assertEquals("STR".toLowerCase(),javax.xml.bind.DatatypeConverter.printHexBinary("STR".getBytes()).toLowerCase());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNull(poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotSame(mockScheduler,poller.getScheduler());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotSame(mockScheduler,poller.getScheduler());	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertNull(isEmpty(null));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(!isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertEquals(true,isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertNotEquals(false,isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertNotEquals(false,isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(isEmpty("STR"));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotNull(p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(-1,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(4,p.getDistanceToGoal());	1
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()!=-1);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(100,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(Integer.MAX_VALUE,p.getDistanceToGoal());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(workingDirFile.exists());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorPropertiesinstanceofSimulatorProperties);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertFalse(workingDirFile.isDirectory());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,url.getConnectTimeout());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(sourceFile.exists());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(srcDir.exists());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals(macAddress.toString(),"STR");	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>10);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString().replaceAll("STR","STR"));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison!=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,Integer.compare(comparison,0));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0&&comparison<=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertSame(0,Integer.signum(comparison));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison<0);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame(activityProfile,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse(activityProfile.toString().isEmpty());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.endsWith("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getSimpleName().startsWith("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredFields().length==0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(helloClass.isInterface());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,helloClass.getDeclaredConstructors().length);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(helloClass.getClassLoader(),getClass().getClassLoader());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(false,stum.isRecognized());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotSame(false,stum.isRecognized());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(null,stum);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().contains("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.toString().isEmpty());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotEquals(0,stum.toString().length());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().startsWith("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotNull(origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotSame(toMergeMap,origMap);	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotNull(macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(-1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(42,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertEquals(796075102,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(-42,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotSame(12345,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotSame(-12345,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(Integer.MIN_VALUE,macAddress.hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals("STR"));	1
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals(newOMultiKey(Collections.singletonList("STR"))));	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer.bytes);	1
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer!=null&&bytesContainer.bytes.length==64);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(Arrays.equals(newbyte[64],bytesContainer.bytes));	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(bytesContainer.offset>0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer.copy());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(-1,bytesContainer.hashCode());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.fitBytes().length<=bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.fitBytes().length);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(19,results.size());	1
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()<=20&&results.size()>=15);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotSame(0,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertNotEquals(25,results.size());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>=15&&results.size()<=20);	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0&&results.size()<=25);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().anyMatch(o->true));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.stream().allMatch(o->false));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotSame(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().noneMatch(o->false));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(null,qResult);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals("STR",next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.containsField("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotSame("STR",next.field("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertEquals("STR",this.mockSystemProperties.getProperty("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertSame(this.mockJmxMbeanConnection,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertTrue(this.mockAgentProperties.getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY)==null||this.mockAgentProperties.getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY).equals("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertFalse(result==null);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotSame(this.mockJmxServiceUrl,this.factory.createConnection());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(mockJmxServiceUrlFactory.toString().contains("STR"));	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,newJMXServiceUrlFactory());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.endsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.length()>0);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals(7,result.length()-5);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeSetters().containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(objectQueryInfo.getAttributeSetters().isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(setters,objectQueryInfo.getAttributeSetters());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeNames().contains("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo);	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getAttributeSetters());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(oname);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(2,this.attributeList.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeList.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.objectName);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotSame(this.attributeList.get(0),this.attributeList.get(1));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertSame(TestTarget.class,this.target.getClass());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.target.equals(null));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeList.contains(null));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeList.get(0).getName().equals("STR")||this.attributeList.get(0).getName().equals("STR"));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(org.slf4j.Logger.class.isAssignableFrom(poller.getLog().getClass()));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(Objects.nonNull(poller.getLog()));	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertSame(poller.getLog()!=null,true);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(poller.getLog());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(null,poller.getLog());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(true,jsonEquals(first,same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(different,same);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(different.toString().contains("STR"));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(first.entrySet().containsAll(same.entrySet()));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotNull(first);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(first.toString().isEmpty());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(first,same);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(first,same);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(first,different);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(5,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(Collections.emptyList(),graph.edges());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.nodes().isEmpty());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(10,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.nodes());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(2,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")&&edge.getTo().equals("STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().size()==3);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")||edge.getTo().equals("STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph.nodes());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph.edges());	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(VersionUtils.isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(VersionUtils.isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotNull(draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isEmpty());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().matches("STR")||draft_6455.toString().matches("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR")||draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().length()>0);	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(!draft_6455.toString().isEmpty());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(b.length()>0);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(b);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(bs!=null&&bs.length()>0);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(org.apache.commons.codec.binary.Hex.encodeHexString("STR".getBytes()).contains("STR"));	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(org.apache.commons.codec.binary.Hex.encodeHexString("STR".getBytes()).equals("STR"));	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(Label.markdown("STR"));	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.headerSize>400);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(851,be.dataLen);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotSame(bb,be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.headerSize<1000);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(5,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(be.offset==0x149B0&&be.dataLen==0x353);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,be.offset);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals(1,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.getMatchingWordform("STR",true));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals("STR",w.getBestWordform().getToken());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.getBestWordform().getToken().startsWith("STR"));	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(0,w.getToken().length());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>0);	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(5,pattern.flags().size());	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher.pattern());	0
SmpTest	find	assertTrue(matcher.find());	assertNotSame(0,matcher.regionEnd());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(pattern.pattern().startsWith("STR"));	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(2,matcher.regionEnd());	0
SmpTest	find	assertTrue(matcher.find());	assertFalse(pattern.flags().isEmpty());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrUAH);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(MULTICAST_ADDRESS,macAddress.toString());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.getBytes());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(0,macAddress.hashCode());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(6,macAddress.getBytes().length);	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(17,macAddress.toString().length());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotSame(macAddress.toString(),"STR");	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(25),squareRoot.apply(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(squareRoot.isDefinedAt(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(2,collect(Arrays.asList(1,4,9,16),squareRoot).size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertFalse(squareRoot.isDefinedAt(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(3,collect(Arrays.asList(1,4,9,16),squareRoot).size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(squareRoot.apply(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(0,collect(Arrays.asList(1,4,9,16),squareRoot).size());	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(collect(Arrays.asList(1,4,9,16),squareRoot).contains(Math.sqrt(9)));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertSame(Arrays.asList(4.0,3.0),collect(Arrays.asList(4,3,2,1),squareRoot));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals(5,result.length());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(-1,result.lastIndexOf("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(2,((List<Object>)result).size());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(query.toString().isEmpty());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(3,query.toString().split("STR").length);	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(query.toString().contains("STR"));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertEquals(-1,query.toString().indexOf("STR"));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(query.toString().startsWith("STR"));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertFalse(result.toString().isEmpty());	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertNotEquals(0,query.toString().length());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertEquals(1,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertFalse(qResult.getExecutionPlan().toString().isEmpty());	0
OMatchStatementExecutionNewTest	testFriendsWithName	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.getExecutionPlan().toString().length());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(walChanges);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FIELD_SIZE+serializationOffset,buffer.capacity());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(buffer.isDirect());	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(data.length==FIELD_SIZE);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotSame(buffer,walChanges);	0
DoubleSerializerTest	testSerializeWALChanges	assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotEquals(0,serializationOffset);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotNull(result.get(0));	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertFalse(result.contains(null));	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertSame(1,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testArrayNumber	assertEquals(1,result.size());	assertNotEquals(2,result.size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getName());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.isMandatory());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotNull(companyClass);	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNull(companyClass.getDescription());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertNotEquals(0,nameProperty.getName().length());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.getSuperClasses().contains("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertTrue(nameProperty.getName().startsWith("STR"));	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals(1,companyClass.getClasses().size());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertEquals("STR",nameProperty.getType().toString());	0
OCreatePropertyStatementExecutionTest	testCreateMandatoryPropertyWithEmbeddedType	assertEquals(nameProperty.getName(),PROP_OFFICERS);	assertFalse(companyClass.declaredProperties().isEmpty());	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(result.length,2);	1
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(Arrays.asList(result).contains(OType.INTEGER)&&Arrays.asList(result).contains(OType.STRING));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>0);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertEquals(java.util.Arrays.asList(OType.INTEGER,OType.STRING),java.util.Arrays.asList(result));	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(0,result.length);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(1,result.length);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertTrue(result.length>=2);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertFalse(result.length==1);	0
OCompositeIndexDefinitionTest	testGetTypes	assertEquals(result.length,2);	assertNotEquals(null,result);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",property.getName());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.getType().equals(OType.STRING));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(classA.existsProperty("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(1,schema.getClass("STR").properties().size());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(property.isMandatory());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(null,schema.getClass("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(OType.STRING,property.getType());	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(classA.areIndexed("STR"));	0
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertTrue(property.getMin()==null);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotSame(about,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.has("STR"));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(actual.entrySet().size()>0);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertFalse(actual.isJsonNull());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(actual==expected);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(actual==null);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(context,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context,substatement.getContext());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context.getLanguage(),actual.getLanguage());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(!(actual.equals("STR")));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame("STR",actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotSame(1.0,Double.parseDouble(actual));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertSame("STR",actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.matches("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(!props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertEquals(1,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNull(props.get("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.size()>0);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotSame(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertEquals(1,props.size());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(-1,resourceAsStream.available());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.endsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream!=null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(keyStorePath.length(),0);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.startsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(!keyStorePath.isEmpty());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.contains("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertEquals(-1,keyStorePath.indexOf("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.contains("STR"));	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.EXPECTED_STATUS,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.EXPECTED_STATUS);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.ERROR);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.INCORRECT_STATUS,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.EXPECTED_STATUS,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.UNEXPECTED_STATUS,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(!response.getStatus().equals(ResponseStatus.ERROR));	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(response.getStatus(),ResponseStatus.INCORRECT_STATUS);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.UNEXPECTED_STATUS,response.getStatus());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.equals("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(a.estimateSize(),computeSize);	1
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.computeSeekHeadSize()>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,a.computeSeekHeadSize());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.getSeekPos()>=0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(-1,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(100,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(50,computeSize);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(5,10)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(0,estimeteSeekSize(5,10));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(14,estimeteSeekSize(4,1));	1
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(-1,estimeteSeekSize(0,0));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(Integer.MIN_VALUE,estimeteSeekSize(10,20));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(estimeteSeekSize(3,6));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotSame(7,estimeteSeekSize(3,6));	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(4,8)>0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(7,15)!=0);	0
SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(estimeteSeekSize(6,12)>=0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(4,buf2.remaining());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.hasArray());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.remaining()>=4);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNull(buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.capacity()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(1,buf1.get(2));	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1.array());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf2.position()>=0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertFalse(buf2.isDirect());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(fileMock);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")==2);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(-1,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotSame(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")!=-1);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(0,cm.count("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(minDouble);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,minDouble);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(minDouble>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(minDouble.equals(540282346638528870000000000000000000000.0d));	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(minDouble.isInfinite());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,removedKeys.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToAdd.get("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey("STR"));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,addedKeys.size());	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(document.field("STR"),extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(coll.contains(map2));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotSame(map,map2);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(coll.size(),2);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(map.containsKey("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(map.containsValue("STR"));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertEquals(serializer.getClass(),ORecordSerializerNetworkV37.class);	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertNotEquals(coll.get(0),coll.get(1));	0
ODocumentSchemalessBinarySerializationTest	testEmbeddedListOfEmbeddedMap	assertEquals(extr.fields(),document.fields());	assertTrue(res.length>0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotNull(db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertFalse(db.getClusterIdByName(cluster)<0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(1,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertEquals(true,db.getClusterIdByName(cluster)>=1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotSame(0,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)!=-1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-1,db.getClusterIdByName(cluster));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)>0);	1
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName(cluster)!=0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,operations.size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(operations.get(0).getType()==ORecordOperation.CREATED);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(1,operations.size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertSame(operations.getClass(),ArrayList.class);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(null,result);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(10,pushRequest.getMonitorId());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(pushRequest.getEvents());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequest.getEvents().size()==3);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(0,pushRequest.getStatus());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(OLiveQueryPushRequest.END,pushRequest.getStatus());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotSame(pushRequestRead,pushRequest);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertFalse(pushRequest.getEvents().isEmpty());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(0,pushRequestRead.getErrorIdentifier());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNull(pushRequestRead.getErrorCode());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(-1,pushRequestRead.getMonitorId());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().startsWith("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getFriend()==null);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob1.getName().replaceAll("STR","STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob1.getFriend());	1
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertFalse(ob1.getName().isEmpty());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2.getFriend());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(1,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(operations.get(0).type==ORecordOperation.CREATED);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(database.isClosed());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(rec.getIdentity());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(operations.stream().anyMatch(op->op.record.equals(rec)));	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(0,executor.hashCode());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNull("STR"+rec.getClassName(),rec.getClassName());	0
RemoteSimpleSchemaTest	testNotCaseSensitiveDrop	assertTrue(database.getMetadata().getSchema().existsClass("STR"));	assertFalse(database.existsClass("STR"));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals(expectedString,instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(instanceUnderTest.toString().contains(expectedSubstring));	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotNull(instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals("STR",instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotEquals(null,instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertEquals(text.toString(),instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertTrue(!instanceUnderTest.toString().isEmpty());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertNotSame(text,instanceUnderTest.toString());	0
TestTextEditor	testDetabify	assertEquals("STR",newTextEditor("STR").detabify().toString());	assertFalse(instanceUnderTest.toString().isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.size()>0);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(4,result.size());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotSame("STR",result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(-1,result.indexOf("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(!result.isEmpty());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(398,config.toYaml("STR").length());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").endsWith("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.equals(b));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.isSolution());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getActualCost(),b.getActualCost());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertSame(a.getClass(),b.getClass());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.hashCode(),b.hashCode());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.getBranches().size()>0);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(3,focal.readIntraChromaPredMode(m,0,MBType.INTRA_16x16,MBType.INTRA_16x16,true,true));	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(chromaPredModeLeft==chromaPredModeTop[0]);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(m);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(0,m.readOneByte());	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(mode>=0&&mode<=3);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(0,mode);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertTrue(topAvailable&&leftAvailable);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(2,m);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertEquals(1,ctx);	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotEquals(null,decoder);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(java.util.Objects.equals(null,actual));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse("STR".equals(actual));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals("STR",actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.getId().substring("STR".length()));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals(1,actual.getDisplay().size());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getId().startsWith("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getDisplay().containsKey("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getId().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotSame("STR",actual.getId());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertEquals(null,result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(2,result.getAttributeSetters().size());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals("STR",result.getTarget().getClass().getSimpleName());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().contains("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getAttributeSetters().size()!=0);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeSetters());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getObjectName().toString().endsWith("STR"));	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertFalse(result.getAttributeSetters().isEmpty());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getTarget()!=null);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals(6,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(-1,result.indexOf("STR"));	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser);	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getUnsolvedReferences().isEmpty());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().count()>0);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser.getResultXsdSchemas());	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,parser.getResultXsdSchemas().count());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,parser.getResultXsdSchemas().count());	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertEquals("STR".substring(0,5),"STR".trim());	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(5,"STR".length());	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue("STR".contains("STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR","STR");	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull("STR");	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertTrue("STR".startsWith("STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(9<5);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(testContext,testContainer.getTestContext());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",testContainer.getTestCase().getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(userDir.exists());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(0,testContainer.getTestContext().hashCode());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(testContext,testContainer.getTestInstance());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestCase().getProperties().isEmpty());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestContext().isStopped());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestCase().getProperties().containsKey("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals((long)5,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals((long)0,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(functionAstar.countEdges("STR")>0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(functionAstar.countEdges("STR")>=0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(functionAstar.countEdges("STR")<0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals((long)-1,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals((long)10,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals((long)10,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals((long)20,functionAstar.countEdges("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(result);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals(0,result.stream().count());	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR").toString().equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNull(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse("STR".equals(item.getProperty("STR")));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotSame("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse("STR".equals(item.getProperty("STR")));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals(5,Integer.parseInt(item.getProperty("STR").toString()));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	1
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objects.size()>0);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine.getMultiValueChangeEvents());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,subObjects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(document,nestedDoc);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals("STR",subObjects.iterator().next());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(objects,subObjects);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertSame(document,document);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotEquals(null,qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertTrue(qResult.contains(expectedValue));	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.contains(null));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(pictureHbd.getPlaneData(0),picture.getPlaneData(0));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(pictureHbd.getColor(),picture.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(pictureHbd.getWidth(),picture.getWidth());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(pictureHbd.getPlaneData(1),picture.getPlaneData(2));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(pictureHbd.getPlaneData(0).length>0);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(picture.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(pictureHbd.getBitDepth()>0);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(pictureHbd.getPlaneData(2));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(pictureHbd.getPlaneData(2).length,picture.getPlaneData(2).length);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(pictureHbd.getPlaneData(1).length>100);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(testCore.warehouseDir(),null);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals(null,filterResult);	1
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertEquals("STR",metadata.getMd().get("STR"));	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals(true,vairāki.isRecognized());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(0,vairāki.wordforms.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.getBestWordform()!=null);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals(1,vairāki.wordforms.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotSame(0,vairāki.wordforms.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.wordforms.isEmpty());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.wordforms.size()>0);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.wordforms.size()==0);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized());	1
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals(1,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(0,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.wordforms.size()>0);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(null,nopūzdamās.wordforms);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.wordforms!=null&&!nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotSame(0,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals(1,locītājs.analyze("STR").wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertEquals(2,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.wordforms.isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties.wordforms);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.wordforms.size()>0);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(1,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.wordforms.size()>1);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotSame(0,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertEquals(false,riebties.wordforms.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.length()>0);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame("STR","STR");	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse("STR".equals("STR"));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame("STR","STR");	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertSame("STR","STR");	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.endsWith(expected));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testMastered	assertNotNull(actual);	assertEquals(actual.getClass(),actual.getClass());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getId()!=null&&!actual.getId().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotSame("STR",actual.toString());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.toString()!=null&&actual.toString().length()>0);	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotSame(0,actual.toString().length());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(MBOX,actual);	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertEquals(false,isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals(true,isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals(true,isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(FOCAL.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals(false,isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertEquals(true,!FOCAL.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertNotEquals(5,"STR".length());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(Deflater.class,deflateExtension.getDeflater().getClass());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(null,deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater()!=null);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertSame(deflateExtension.getDeflater(),deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.getDeflater().finished());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getTotalOut()==0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getAdler()>=0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(connectionEventHandler);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(poolKey);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll(poolKey).size());	1
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey)!=null&&cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(!cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll(poolKey).size());	1
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(!"STR".equals(node.getPath().replaceAll("STR","STR")));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().length()>0);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(7,node.getPath().length());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(0,node.getPath().lastIndexOf("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath().replace("STR","STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.length()<=testPublicId.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testPublicId.toUpperCase(),resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testPublicId,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertArrayEquals(testPublicId.toCharArray(),resultPublicId.toCharArray());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertFalse(resultPublicId.isEmpty());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertSame(testPublicId.getClass(),resultPublicId.getClass());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile!=null);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(null,configFile.getAbsolutePath());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(configDirectory,configFile.getParentFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canRead());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(0,configFile.length());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals("STR",d.toString());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(calendar);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(qResult.size()+1,2);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0&&qResult.size()<=10);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertSame(1,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	1
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>=0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(-1,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count==1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count<0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(linkSerializer.getObjectSizeInByteBuffer(buffer)>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.position()>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(size>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.contains(null));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient()!=null&&defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals(null,defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame(defaultExtension.toString(),defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotNull(defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(defaultExtension.getProvidedExtensionAsClient().contains("STR"));	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals(0,defaultExtension.getProvidedExtensionAsClient().length());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension0.hashCode());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension1)||defaultExtension0.equals(defaultExtension0));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),System.identityHashCode(defaultExtension1));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0==defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.getClass()==defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.getClass(),defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotSame(sample1Array,parser.parse(sample1Array).toString());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(parser.parse(sample1Array).toString().isEmpty());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,parser.hashCode());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,sample1Array.length);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(parser.parse(sample1Array)!=null);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.mastered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.getId().equals("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(8,actual.toString().length());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()>0||actual.size()>0);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertFalse(expected.isEmpty()&&actual.isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(expected);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(42,parseBuf);	1
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertArrayEquals("STR".getBytes(),ByteBuffer.wrap("STR".getBytes()).array());	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals("STR",String.valueOf(parseBuf));	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf,0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf==42);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertFalse(parseBuf<0);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getH(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(null,response.getSl(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getTimestamp(),"STR");	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.getState()==Thread.State.WAITING||serverStartThread.getState()==Thread.State.TIMED_WAITING);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(stdIn);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isDaemon());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(System.out,System.err);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(-1,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(stdIn,System.in);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive()||serverStartThread.isInterrupted());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame(robotsTxt,sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(robotsTxt.getBytes(StandardCharsets.UTF_8),content);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(robotsTxt.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals(0,content.length);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(content.length>0);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame("STR",sha1str.substring(6));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(0,normalizedUrl.length());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find(1));	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals("STR",matcher.pattern().pattern());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(0,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse((Boolean)bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(testObject,"STR","STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals(Integer.parseInt("STR"),Integer.parseInt(result.toString()));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(10,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotNull(result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(result,15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result==5||result==10);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result!=0&&result!=20);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertFalse(result<0);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>=0&&result<=15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(-1,result);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(456));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.size()>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(999));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(789));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().startsWith("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().endsWith("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,query.length());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().contains("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(-1,query.indexOf("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotSame(db,result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(DB_STORAGE.isEmpty());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap.values().iterator().next());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.equals(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(mapResult);	1
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(0,multiKeyMap.hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertSame(mapResult,multiKeyMap.get(anotherMultiKey));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1==null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(128526626,client1.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals("STR",System.getProperty(Configs.CONN_RECONNECT_SWITCH));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_RECONNECT_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1.hashCode(),client2.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1!=client2);	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null).trim());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(0,m.markdown("STR").length());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(actual<=expected);	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(ID,verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertTrue(!"STR".equals(verb.getId()));	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotSame("STR",verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb.getId(),"STR");	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.endsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotSame("STR",body);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.startsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body.trim().replaceAll("STR","STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals(3,properties.size());	1
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.stringPropertyNames().contains("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsValue(properties.getProperty("STR")));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals(null,properties.get("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.getActualCost()>=0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.isSolution());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getEstimatedCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.getActualCost()<0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getActualCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle().swapBlank(2));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(3,attributeList.size());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(injector.getAttributeList());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeList.contains(newAttribute("STR","STR")));	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(injector.getLog()==null);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(mockLogger,injector.getLog());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").where("STR").toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").where("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toLowerCase().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toUpperCase().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR".replaceAll("STR","STR"),sql.select().from("STR").where("STR").toString().replaceAll("STR","STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.containsAll(list));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()>0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(!result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertSame(list.get(0),result.get(0));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(Boolean.TRUE,Boolean.valueOf(YubicoClient.isValidOTPFormat(otp)));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(!YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(true,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(false,YubicoClient.isValidOTPFormat(otp));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNull(crap.getCorrectWordform());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.toString().contains("STR"));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(true);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(5,10);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(3,4);	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(6,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsValue("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",filter(env).get("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotSame(metadata,fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(3,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotNull(fields);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filter);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",url.toExternalForm());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.length()>10);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(30,filterResult.length());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,(int)fields.size());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR")||(fields.containsKey("STR")&&fields.get("STR").startsWith("STR")));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",URI.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(URI.create("STR")!=null);	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(URI.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals("STR",URI.create("STR").toString());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()!=0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertArrayEquals(this.polledObjects.toArray(),poller.getPolledObjects().toArray());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(this.polledObjects));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertSame(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(2310,java.util.stream.LongStream.of(2,3,5,7,11).reduce(1,(a,b)->a*b));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals("STR",DevUtil.parseNetworks("STR")[0]);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	1
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,DevUtil.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(DevUtil.parseNetworks("STR")!=null);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(DevUtil.parseNetworks("STR")!=null);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotNull(DevUtil.parseNetworks("STR"));	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>=1);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(5,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()<=10);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager!=null);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager2.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(0,manager.getReferences().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc1));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getUpdateRecords()==null||manager.getUpdateRecords().isEmpty());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReferences());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals("STR",doc.getClassName());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(ODocument.class,doc.getClass());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc!=null);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().toString().length());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(listener);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.getClusterNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(database.getTransaction());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getURL().isEmpty());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(item.getIdentity());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(item.getPropertyNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals("STR",item.getProperty("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(live);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(3,db.countClass("STR"));	1
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(doc1.getClassName(),doc2.getClassName());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(doc.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(doc1,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc1.field("STR"),doc2.field("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length==3);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals(3,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(0,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(null,actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(Arrays.asList(actuals).isEmpty());	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.TEXT,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.PING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode().equals(Opcode.BINARY));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode()!=null);	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY.toString(),binary.getOpcode().toString());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(expected.contains(config.toYaml("STR")));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").endsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR","STR");	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertFalse(rpcServer.port()<0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()!=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(0,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(null,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()<=1);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(agentsFile);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(agentsFile.exists());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(2,actual.getAsJsonObject().entrySet().size());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual.getAsJsonObject().get("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().matches("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals("STR",expected);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,"STR");	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(EntityUtils.toString(response.getEntity()).isEmpty());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getEntity().getContentLength()>100);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(EntityUtils.toString(response.getEntity()).contains("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",response.toString());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR".replaceAll("STR","STR"),EntityUtils.toString(response.getEntity()).replaceAll("STR","STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(0,response.getEntity().getContentLength());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(policyResponse.capacity(),buf.capacity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(policyResponse.equals(buf));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(first);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.startsWith("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(12,response.readableBytes());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.equals("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.capacity()>0);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(resultedTag,service.newerTag(latestTag,oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(service.newerTag(latestTag,oldTag)));	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(null,logger.sender);	1
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(factory.getConnectorFactoryDelegate()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockConnectorFactoryDelegate);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockJmxServiceUrl);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher().getClass());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(this.factory.getAttacher()==null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(this.factory.getAttacher()!=null);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(executionSlips.isEmpty());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(process.equals(null));	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(0,processes.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotNull(process);	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getDescription().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getName().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getDescription().size());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.read():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream);	1
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.read()>=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.available()>0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.available():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.markSupported());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.read()==-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()==0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()<=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(1024,resourceAsStream!=null?resourceAsStream.available():0);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains("STR")||normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().startsWith("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.getMetadata().getSchema().getClasses().size()>0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.isActiveOnCurrentThread());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().contains("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(script.toString());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(script.length(),0);	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(Locale.GERMANY.getLanguage());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",className);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(0,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(null,rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(0,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(words.isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.get(0).startsWith("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(-1,words.indexOf("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(words);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.size()>5);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(words.size()-1));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(0));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals("STR",testSuite.toString().replaceAll("STR","STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(3,testSuite.getMaxTestCaseIdLength());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(1,testSuite.size());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals("STR",testSuite.getDurationSeconds());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals("STR",properties.getProperty("STR","STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.size()>0);	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertSame(Properties.class,properties.getClass());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(14,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.entrySet().size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotSame(0,properties.size());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(3,Charsetfunctions.asciiBytes("STR").length);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem,locītājs.analyze("STR"));	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNull(simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem.getBestWordform(),simtiem.getCorrectWordform());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(blSz>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes.length==16);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes!=null);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.leftModes.length>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,miCol);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(3,c.leftModes[0]);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(decoder);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(0,miRow);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(c.leftModes[0]==0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.miTileStartCol>=0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsValue(3));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,map.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.contains("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(0,keys.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotNull(map.get("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(map.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0