ClassName	TestName	TrueOracle	GenOracle	Correct
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l,l2);	1
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.equals(l3));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l2.asJavaUtilList().containsAll(Arrays.asList("STR","STR","STR")));	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertEquals(l.size(),3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotSame(l,l3);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertTrue(l.size()>0);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotNull(l2);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l.size(),0);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l2.size(),0);	0
AListTest	testFromJavaUtil	assertEquals(l,l2);	assertNotEquals(l2.size(),5);	0
AListTest	testNil	assertEquals(0,AList.nil().size());	assertTrue(size()>=0);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame(0,result.indexOf("STR"));	0
AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame(-1,result.indexOf("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")&&edge.getTo().equals("STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.edges().stream().allMatch(edge->edge.getFrom().equals("STR")||edge.getTo().equals("STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertTrue(graph.nodes().containsAll(Arrays.asList("STR","STR","STR")));	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertFalse(graph.hasCycles());	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertNotNull(graph);	0
ADiGraphTest	testNodesWithoutEdges	assertTrue(eqSet(graph.edges(),edge("STR","STR")));	assertEquals(1,graph.edges().size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(-1,qResult.size());	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertTrue(qResult.size()>=0);	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotNull(qResult.stream().findFirst().orElse(null));	0
OMatchStatementExecutionTest	testFriendsWithName	assertEquals(1,qResult.size());	assertNotEquals(null,qResult.get(0));	0
OPropertyMapIndexDefinitionTest	testCreateValueWrongParameter	assertNull(result);	assertNull(result);	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	findPrefix	assertTrue(matcher.find());	assertEquals(1,matcher.find()?1:0);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotNull(matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(-1,matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(!matcher.find());	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertTrue(matcher.find()==true);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(-1,matcher.find()?0:1);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertNotEquals(-1,matcher.find()?0:2);	0
MatcherTest	findPrefix	assertTrue(matcher.find());	assertFalse(matcher.find()&&matcher.find());	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(readMBSkipFlag(m,SliceType.B,false,true,1));	0
CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(readMBSkipFlag(m,SliceType.I,true,false,0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertArrayEquals(out.getData()[0],out.getPlaneData(0));	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(4,out.getWidth());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotNull(out.getData());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotEquals(0,out.getPlaneData(0).length);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(ColorSpace.RGB,out.getColor());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getHeight()>0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertTrue(out.getLowBitsNum()>=0);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNull(out.getCrop());	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertNotSame(_in,out);	0
Yuv420pToRgbTest	testYuv420pToRgbH2H	assertArrayEquals(rgbH,out.getPlaneData(0));	assertEquals(ColorSpace.YUV420,_in.getColor());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(true);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(false);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(2,1+1);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(TEST_NAME_SERVER,TEST_PRODUCER_GROUP);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(System.currentTimeMillis()>0);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(!TEST_NAME_SERVER.isEmpty()&&!TEST_PRODUCER_GROUP.isEmpty());	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(TEST_NAME_SERVER,"STR");	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(TEST_NAME_SERVER.equals(TEST_PRODUCER_GROUP));	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotSame(TEST_NAME_SERVER,TEST_PRODUCER_GROUP);	0
RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertFalse(TEST_NAME_SERVER.equals("STR"));	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertFalse(text.isEmpty());	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotNull(text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertEquals("STR",text);	1
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>0);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals("STR",text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals(null,text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>10);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertNotEquals("STR",text);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>5);	0
TextExtractorTest	testExclusionCase	assertEquals("STR",text);	assertTrue(text.length()>15);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertSame(metadata,metadata);	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.endsWith("STR"));	0
MetadataFilterTest	testFilterNoMD	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,"STR");	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotNull(fields.get("STR"),"STR");	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals("STR",fields.get("STR"));	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
BasicIndexingTest	testOtherHostCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(500.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(12.50).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(30.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(5.20).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(86.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(20.80).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(70.50).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(120.0).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(90.75).replaceAll("STR","STR").replace('’','\''));	0
MoneyToStrTest	checkEURRUSCustom	assertEquals("STR",moneyToStrCustom.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(920.99).replaceAll("STR","STR").replace('’','\''));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(12.56).replaceAll("STR","STR"));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(15.80).trim());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotNull(moneyToStrEURRUS.convert(50.75));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(45.70));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(9.50));	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(15.75).replaceAll("STR","STR").trim());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(20.40).trim());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertFalse(moneyToStrEURRUS.convert(30.25).isEmpty());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(50.30).toLowerCase());	0
MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrEURRUS.convert(3.25).trim());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotNull(moneyToStrUAHRUS.convert(123.45));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUAHRUS.convert(150.75).endsWith("STR"));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrUAHRUS.convert(123.45));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUSDENG.convert(75.50).contains("STR"));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertFalse(moneyToStrUSD.convert(100.0).isEmpty());	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame("STR",moneyToStrUAHENG.convert(123.45));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotEquals("STR",moneyToStrRURRUS.convert(123.45));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUSDRUS.convert(345.67).startsWith("STR"));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertNotSame("STR",moneyToStrRURRUS.convert(543.21));	0
MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertTrue(moneyToStrUSDRUS.convert(678.90).contains("STR"));	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertEquals(4,c.getBlankIndex());	1
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>=0&&c.getBlankIndex()<c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(3,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(-1,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertFalse(c.getBlankIndex()==-1);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotNull(c.getCells());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotSame(5,c.getBlankIndex());	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertTrue(c.getBlankIndex()>-1&&c.getBlankIndex()<c.getCells().length);	0
PuzzleTest	puzzle_can_swap_blank	assertEquals(4,c.getBlankIndex());	assertNotEquals(2,c.getBlankIndex());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR"));	1
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown(null));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR").trim());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR").replaceAll("STR","STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR").trim());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals(expected,actual);	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals(0,m.markdown("STR").length());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(m.markdown("STR").startsWith("STR"));	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",m.markdown("STR").replace("STR","STR").trim());	0
EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals(0,"STR".length());	0
TravisTest	testGetPullRequest	assertEquals("STR",newTravis(env()).getPullRequest());	assertEquals("STR",newTravis(env()).getPullRequest());	1
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertSame(Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().needsInput());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertTrue(deflateExtension.getInflater().getBytesRead()==0);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotEquals(null,deflateExtension.getInflater());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(java.util.zip.Inflater.class,deflateExtension.getInflater().getClass());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertNotNull(deflateExtension.getInflater().getAdler());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertFalse(deflateExtension.getInflater().needsDictionary());	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(deflateExtension.getClass(),PerMessageDeflateExtension.class);	0
PerMessageDeflateExtensionTest	testGetInflater	assertEquals(deflateExtension.getInflater().getRemaining(),newInflater(true).getRemaining());	assertEquals(0,deflateExtension.getInflater().getAdler());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.isRecognized());	1
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals(1,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotNull(nopūsts);	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.getBestWordform().getValue(AttributeNames.i_Lemma).contains("STR"));	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotEquals(0,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertFalse(nopūsts.wordforms.isEmpty());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertNotSame(0,nopūsts.wordforms.size());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertSame("STR",nopūsts.getToken());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertEquals("STR",nopūsts.getToken());	0
MorphologyTest	ts	assertTrue(nopūsts.isRecognized());	assertTrue(nopūsts.wordforms.size()>0);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(this.factory.getLog());	1
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotNull(factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertFalse(factory.getLog().isDebugEnabled());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertNotSame(mockLog,factory.getLog());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog()==log);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertTrue(factory.getLog().getName()!=null&&!factory.getLog().getName().isEmpty());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetLog	assertNotNull(this.factory.getLog());	assertEquals(false,factory.getLog().getName().equals("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(5,result.size());	1
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.contains("STR")&&result.contains("STR")&&result.contains("STR")&&result.contains("STR")&&result.contains("STR"));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertEquals(result,result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotSame(a,result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.size()>0);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotNull(result);	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertFalse(result.isEmpty());	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.size()<=(a.size()+b.size()+c.size()));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertTrue(result.containsAll(a)&&result.containsAll(b)&&result.containsAll(c));	0
InstallFeatureUtilTest	testCombineToSet	assertEquals(5,result.size());	assertNotEquals(0,result.size());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(ret.startsWith("STR"));	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(ret);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",body.getMsg());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals(0,body.getId());	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(body.getId()>0);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(client);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(body.getId()==1);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotSame(s1,s2);	0
ClassCustomSerializerTest	testNormalCustomSerializer	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotEquals("STR",s1.toString());	0
RpcConfigManagerTest	testSystemSettings	assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());	assertTrue(!FOCAL.dispatch_msg_list_in_default_executor());	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertTrue(true);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertNotNull(proc);	0
OETLJsonExtractorTest	testEmptyCollection	assertEquals(0,getResult().size());	assertEquals(0,proc.getExecutionStatus());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->doc.containsField("STR")));	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testOptional3	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(manager.getNewRecords().contains(doc));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals(2,manager.getNewRecords().size());	1
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals("STR",doc2.field("STR"));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.containsField("STR"));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc,doc2);	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc.equals(doc2));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc2.containsField("STR"));	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager.getNewRecords());	0
ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotSame(doc.field("STR"),doc2);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)==FLOAT_SIZE);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(0,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)>0);	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotEquals(-1,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertNotSame(100,getObjectSize(null));	0
FloatSerializerTest	testFieldSize	assertEquals(floatSerializer.getObjectSize(null),FIELD_SIZE);	assertTrue(getObjectSize(null)!=-1);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertNotNull(result);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertEquals(Arrays.asList("STR","STR"),result);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultInternal.hasProperty("STR"));	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertTrue(resultinstanceofCollection);	0
OSQLMethodKeysTest	testWithOResult	assertEquals(newLinkedHashSet(Arrays.asList("STR","STR")),result);	assertFalse(resultinstanceofNull);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().anyMatch(doc->doc.field("STR").toString().contains("STR")));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertEquals("STR",res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().allMatch(doc->doc.field("STR")!=null));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.stream().noneMatch(doc->doc.field("STR")==null));	0
OETLCSVExtractorTest	testNullValueInCellEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	1
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR",label.decorated()),attr("STR",true)).getClass(),attrs().getClass());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotNull(attrs(attr("STR",label.decorated())));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs(attr("STR",label.decorated())).hashCode()!=attrs().hashCode());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(attr("STR","STR")).hashCode(),attrs().hashCode());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR","STR"),attr("STR","STR")),attrs(attr("STR","STR"),attr("STR","STR")));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertTrue(attrs(attr("STR","STR")).toString().contains("STR"));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotEquals(attrs(attr("STR","STR")).toString(),attrs().toString());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR","STR")),attrs(attr("STR","STR")));	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertEquals(attrs(attr("STR","STR")).getClass(),attrs().getClass());	0
LabelTest	external	assertEquals(attrs(attr("STR",label.external())),attrs(label.external()));	assertNotSame(attrs(attr("STR","STR"),attr("STR","STR")),attrs(attr("STR","STR"),attr("STR","STR")));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(10,person.nullArm.finger.length);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.isEmpty());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(person.nullArm);	1
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertEquals(1,usedProperties.size());	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(person.nullArm.finger.length,0);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertFalse(usedProperties.contains("STR"));	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotEquals(usedProperties.size(),0);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertTrue(person.age==0||person.age==10||person.age==40);	0
PropertyBindingSupport_nestedPropertiesTest	testReconstructObjectGraph	assertNotNull(person.nullArm);	assertNotNull(usedProperties);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals("STR",result.get(0).getParameters().get("STR"));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertEquals(2,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.stream().anyMatch(worker->worker.getParameters().get("STR").equals("STR")));	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotNull(result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(!result.isEmpty());	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertNotSame(list,result);	0
WorkerQueryTest	targetType_whenMember	assertEquals(asList(list.get(1),list.get(3)),result);	assertTrue(result.size()>0);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotNull(answer);	1
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals(resource,answer);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertEquals("STR",answer.getMetadata().getName());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotSame(resource,answer);	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNull(answer.getMetadata().getAnnotations().get("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotEquals("STR",answer.getMetadata().getAnnotations());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertFalse(answer.getMetadata().getAnnotations().isEmpty());	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertTrue(answer.getMetadata().getAnnotations().containsKey("STR"));	0
MergeResourceTest	testMergeDeploymentMetadataWithNoSpec	assertNotNull(answer);	assertNotSame(override,answer);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.contains("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(0,fileString.length());	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.length()>0);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.startsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals("STR",fileString);	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.endsWith("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(fileString.matches("STR"));	0
DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(tempSrcFile.exists());	1
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(configDirectory.exists());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(tempTargetFile.isDirectory());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertFalse(configDirectory.isFile());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertEquals("STR",tempSrcFile.getName());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,targetDir.listFiles().length);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertTrue(srcDir.isDirectory());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotNull(util);	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(0,tempSrcFile.length());	0
DevUtilTest	testDeleteFile	assertTrue(tempSrcFile.exists());	assertNotEquals(serverDirectory,targetDir);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.isRecognized());	1
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotNull(panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertEquals("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().startsWith("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertFalse(panest.getToken().isEmpty());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotEquals("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotSame("STR",panest.getToken());	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertTrue(panest.getToken().contains("STR"));	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotSame("STR",panest);	0
MorphologyTest	ticket37	assertTrue(panest.isRecognized());	assertNotSame("STR",panest);	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertTrue(w.wordforms.isEmpty());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertEquals(0,w.wordforms.size());	0
MorphologyTest	apvidvārdi	assertFalse(w.isRecognized());	assertNotNull(w.getToken());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(1,sentences.size());	1
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.get(0).size()>0);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotNull(sentences);	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertFalse(sentences.isEmpty());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotSame("STR",sentences.getFirst().getFirst().getToken());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.stream().allMatch(sentence->sentence.size()>0));	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertNotEquals(0,sentences.size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertEquals(15,sentences.get(0).size());	0
TokenizeTest	pēdiņas	assertEquals(1,sentences.size());	assertTrue(sentences.stream().anyMatch(sentence->sentence.size()>10));	0
OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(7,OpenKoreanTextProcessorJava.tokensToJavaList(tokens).size());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(isValidOTPFormat("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=48,"STR");	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(50,otp.length());	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.indexOf("STR"));	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame("STR",otp);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNull(null);	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.contains("STR"),"STR");	0
YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(otp.isEmpty(),"STR");	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	1
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,event.getAppServer());	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(evt.getLoggerName().startsWith("STR"));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(evt.getLoggerName());	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(evt.getLoggerName().isEmpty());	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(1,filter.decide(evt));	0
DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals("STR","STR");	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertTrue(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertFalse(isEmpty("STR"));	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(0,"STR".length());	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertEquals(3,"STR".length());	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNull("STR".isEmpty());	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotNull("STR");	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNotEquals(5,"STR".length());	0
StringUtilsTest	testIsEmpty	assertFalse(StringUtils.isEmpty("STR"));	assertNull("STR".isBlank());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNull(activityState.getActivityId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertEquals(null,activityState.getStateId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotSame("STR",activityState.getActivityId());	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotSame(activityState.getActivityId(),"STR");	0
ActivityStateTest	testActivityState	assertNotNull(activityState);	assertNotNull(activityState);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
ActivityStateTest	testGetState	assertNotNull(actual);	assertTrue(expected.toString().equals(actual.toString()));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAttended	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.getDisplay().containsKey("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.getDisplay().get("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.getId().startsWith("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.serialize());	0
VerbsTest	testAttended	assertNotNull(actual);	assertNotNull(actual.toString());	0
VerbsTest	testAttended	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
VerbsTest	testAttended	assertNotNull(actual);	assertTrue(actual.getId().contains("STR"));	0
VerbsTest	testAttended	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertEquals(1,threads.size());	0
ThreadSpawnerTest	testThreadSpawnerException_reportException	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	1
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(!env.isEmpty());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,env.size());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(HashMap.class,env.getClass().getSuperclass());	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(env.containsKey("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNull(env.get("STR"));	0
BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(env.containsValue("STR"));	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertEquals(8,p.getBlankIndex());	1
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(-1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<p.getCells().length);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=2);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(3,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(7,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()!=5);	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(6,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(1,p.getBlankIndex());	0
PuzzleTest	blank_swap_leaves_original_as_is	assertEquals(8,p.getBlankIndex());	assertNotEquals(9,p.getBlankIndex());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.isSolution());	1
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertEquals(true,s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertFalse(s.isSolution());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotNull(s.getPuzzle());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(0,s.getEstimatedCost());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotSame(p.hashCode(),s.getPuzzle().hashCode());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotEquals(s.getActualCost(),-1);	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertTrue(s.getPuzzle().isSolved());	0
PuzzleStateTest	state_can_be_solution	assertTrue(s.isSolution());	assertNotSame(s.getBranches().size(),0);	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertEquals(true,Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertEquals(true,Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertEquals(true,Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertEquals(false,Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstText	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	1
OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(2,compositeKey.compareTo(anotherCompositeKey));	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",obj.getName());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getMin()==1&&idProperty.getMax()==10);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(0,companyClass.getClusterIds().length);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertSame(db.getClass(),ODatabaseDocumentTx.class);	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(db.isClosed());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(db.exists());	0
OCommandExecutorSQLCreatePropertyTest	testDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame(0,idProperty.getMin());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(20,result.estimatedSize());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(result.hasNext());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertEquals(parentClass.getName(),childClass.getSuperClass().getName());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertNotNull(step);	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertFalse(database.isClosed());	0
CheckClassTypeStepTest	shouldCheckSubclasses	assertEquals(0,result.stream().count());	assertTrue(step.getCost()>=0);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(OLiveQueryPushRequest.END,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(events.size()==3);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotNull(request.getEvents());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertSame(OLiveQueryPushRequest.END,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertFalse(events.isEmpty());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(request.getMonitorId()==10);	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertEquals(3,events.size());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertNotEquals(OLiveQueryPushRequest.ERROR,request.getStatus());	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(request.getEvents().contains(events.get(1)));	0
ORemoteLiveQueryPushTest	testLiveEvents	assertEquals(mock.countCreate,1);	assertTrue(request.getMonitorId()!=0);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotNull(extr.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(res.length>0);	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals("STR",embedded.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(document.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals("STR",embedded.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertFalse(document.containsField("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotSame(embedded,document.field("STR"));	0
ODocumentSchemalessBinarySerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertSame(embedded,document.field("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotEquals(0,props.size());	1
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertTrue(props.size()>0);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertNotNull(props);	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertEquals(0,props.getProperty("STR","STR").compareTo("STR"));	0
SpringBootUtilTest	testPropertiesParsing	assertNotEquals(0,props.size());	assertFalse(props.containsKey("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertEquals(value,YourTestClass.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(System.getProperty(KEY_2)!=null);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(properties.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNull(System.getProperty("STR"));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(properties);	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotNull(System.getProperty(KEY_2));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals(System.getProperty(KEY_2),System.getProperty(KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertNotEquals(properties.getProperty(KEY_1),System.getProperty(KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertTrue(properties.containsKey(KEY_1));	0
ConfigsTest	getPropertyValueTest	assertEquals("STR",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties,KEY_1));	assertFalse(properties.containsKey("STR"));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals(3,tokens.size());	1
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().allMatch(word->word.getToken().length()>=1));	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotNull(tokens);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertFalse(tokens.isEmpty());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotEquals(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertNotSame(0,tokens.size());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()>0);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.size()==3);	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertEquals("STR",tokens.get(0).getToken());	0
TokenizeTest	singleletters	assertEquals(3,tokens.size());	assertTrue(tokens.stream().anyMatch(word->word.getToken().equals("STR")));	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertEquals(Opcode.PONG,frame.getOpcode());	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getOpcode()==Opcode.PONG);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	0
PongFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(0,frame.hashCode());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protoocl1!=null);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotSame(protocol0,protoocl1);	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.getClass(),protoocl1.getClass());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertEquals(protocol0.getProvidedProtocol(),protoocl1.getProvidedProtocol());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertTrue(protoocl1.getProvidedProtocol().isEmpty());	0
ProtocolTest	testCopyInstance	assertEquals(protocol0,protoocl1);	assertNotNull(protoocl1);	0
RpcConnectionManagerTest	testGet	assertNull(pool);	assertNull(pool);	1
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(parser.parse(sample1,true));	1
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertEquals(8,sample1.split("STR").length);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.matches("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotNull(sample1);	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertNotEquals(-1,sample1.indexOf("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.contains("STR")&&sample1.contains("STR"));	0
CEFParserTest	validMessageValidationAllExtenstionsTest	assertNotNull(parser.parse(sample1,true));	assertTrue(sample1.matches("STR"));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertEquals(expected,fromString);	1
ULTest	testULFromString	assertEquals(expected,fromString);	assertTrue(expected.equals(fromString));	0
ULTest	testULFromString	assertEquals(expected,fromString);	assertNotNull(fromString);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR",resp);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(first);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.readableBytes()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(response.capacity()>0);	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.startsWith("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(resp.equals("STR"));	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(resp.isEmpty());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals(12,response.readableBytes());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(policyResponse.capacity(),buf.capacity());	0
FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(policyResponse.equals(buf));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	1
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag==latestTag||resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotEquals(oldTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertFalse(resultedTag==oldTag);	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(resultedTag,service.newerTag(latestTag,oldTag));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(resultedTag.equals(service.newerTag(latestTag,oldTag)));	0
ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(resultedTag,oldTag);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger!=null);	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	0
TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals(null,logger.sender);	1
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockConnectorFactoryDelegate);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotSame(mockConnectorFactoryDelegate,factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertTrue(factory.getConnectorFactoryDelegate()!=null);	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(factory.getConnectorFactoryDelegate());	0
JMXRemoteUrlConnectionFactoryTest	testGetSetConnectionFactoryDelegate	assertTrue(this.factory.getConnectorFactoryDelegate()instanceofDefaultJmxConnectorFactoryDelegate);	assertNotNull(mockJmxServiceUrl);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertFalse(this.factory.getAttacher()==null);	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertNotNull(this.factory.getAttacher().getClass());	0
JMXJvmIdConnectionFactoryTest	testGetSetAttacher	assertTrue(this.factory.getAttacher()instanceofDefaultVirtualMachineAttacher);	assertTrue(this.factory.getAttacher()!=null);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertNotNull(process);	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertEquals(0,processes.size());	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertFalse(process.equals(null));	0
JmxAttributePollerTest	testGetStepAfterShutdown	assertNull(process.getNextStep());	assertTrue(executionSlips.isEmpty());	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getName().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertTrue(ad.getDescription().containsKey("STR"));	0
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertNotNull(ad);	1
ActivityDefinitionTest	testActivityDefinitionHashMapOfStringStringHashMapOfStringString	assertNotNull(ad);	assertEquals(1,ad.getDescription().size());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testGetXapiStatement	assertNotNull(a);	assertFalse(attachments.isEmpty());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNull(resourceAsStream);	1
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()==0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.available()>0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.available()<=0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.available():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.markSupported());	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertNotEquals(1024,resourceAsStream!=null?resourceAsStream.available():0);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertTrue(resourceAsStream==null||resourceAsStream.read()==-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertEquals(-1,resourceAsStream!=null?resourceAsStream.read():-1);	0
LoadKeyStoreTest	loadNonExistentKeyStoreFromResources	assertNull(resourceAsStream);	assertFalse(resourceAsStream!=null&&resourceAsStream.read()>=0);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals(expectedURL,normalizedUrl);	1
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame("STR",normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.endsWith("STR"));	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertNotSame(inputURL,normalizedUrl);	0
BasicURLNormalizerTest	testNonStandardPercentEncoding	assertEquals(expectedURL,normalizedUrl);	assertTrue(normalizedUrl.contains("STR")||normalizedUrl.contains("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(db);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotEquals(script.length(),0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().contains("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.isActiveOnCurrentThread());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(script.toString().startsWith("STR"));	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertFalse(script.toString().isEmpty());	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertTrue(db.getMetadata().getSchema().getClasses().size()>0);	0
OCommandExecutorSQLScriptTest	testSleep	assertTrue(System.currentTimeMillis()-begin>=500);	assertNotNull(script.toString());	0
RemoteMetadataReloadTest	testStorageUpdate	assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE),Locale.GERMANY.getLanguage());	assertNotNull(Locale.GERMANY.getLanguage());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals(1,rs.stream().count());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertTrue(rs.hasNext());	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotNull(rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(null,rs);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertEquals("STR",className);	0
OScriptExecutionTest	testReturnInIf	assertEquals((Object)2L,rs.next().getProperty("STR"));	assertNotSame(0,rs.stream().count());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(words.size()-1));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.contains("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals(7,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(words.isEmpty());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(words);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(0,words.size());	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.size()>5);	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals(-1,words.indexOf("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(words.get(0).startsWith("STR"));	0
OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",words.get(0));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase(null));	1
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNull(testSuite.getTestCase("STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotNull(testSuite.getTestCaseList());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertTrue(testSuite.size()>0);	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertFalse(testSuite.isFailFast());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals("STR",testSuite.toString().replaceAll("STR","STR"));	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(3,testSuite.getMaxTestCaseIdLength());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertNotEquals("STR",testSuite.getDurationSeconds());	0
TestSuiteTest	getTestCase_null	assertNull(testSuite.getTestCase(null));	assertEquals(1,testSuite.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertTrue(properties.size()>0);	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertFalse(properties.isEmpty());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals(14,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertSame(Properties.class,properties.getClass());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotNull(properties);	1
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotEquals(0,properties.entrySet().size());	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertEquals("STR",properties.getProperty("STR","STR"));	0
GitInfoTest	testLoadProperties	assertNotNull(properties);	assertNotSame(0,properties.size());	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertTrue(m.markdown("STR").endsWith("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotEquals("STR",m.markdown("STR"));	0
LineConventions	testUnixLineConventions	assertEquals(EXPECTED,m.markdown("STR"));	assertNotNull(m.markdown("STR"));	0
CharsetfunctionsTest	testAsciiBytes	assertArrayEquals(newbyte[]{102,111,111},Charsetfunctions.asciiBytes("STR"));	assertEquals(3,Charsetfunctions.asciiBytes("STR").length);	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertTrue(simtiem.isRecognized());	1
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotNull(simtiem.getBestWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertFalse(simtiem.wordforms.isEmpty());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertEquals(1,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotEquals(0,simtiem.wordforms.size());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem.getBestWordform(),simtiem.getCorrectWordform());	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNotSame(simtiem,locītājs.analyze("STR"));	0
MorphologyTest	simtiem	assertTrue(simtiem.isRecognized());	assertNull(simtiem.getCorrectWordform());	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(3,c.leftModes[0]);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes.length==16);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(decoder);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(0,miCol);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(blSz>0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(0,miRow);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.miTileStartCol>=0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.aboveModes!=null);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(c.leftModes[0]==0);	0
ModeInfoTest	testReadIntraMode	assertEquals(3,newModeInfo().readKfIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(c.leftModes.length>0);	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,keys.size());	1
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.contains("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(map.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertEquals(4,map.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotNull(map.get("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertNotEquals(0,keys.size());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsKey("STR"));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertFalse(keys.isEmpty());	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(map.containsValue(3));	0
AListMapTest	testKeysValues	assertEquals(4,keys.size());	assertTrue(keys.size()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.length()>0);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filter);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertEquals("STR",url.toExternalForm());	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepth	assertEquals(url.toExternalForm(),filterResult);	assertNotSame(url,filterResult);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotNull(sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertFalse(sha1str.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.length()>10);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertNotEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1TwoByteArrays	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content1,content2));	assertTrue(sha1str.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotNull(filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.startsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotEquals(null,filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.contains("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertEquals(30,filterResult.length());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertFalse(filterResult.isEmpty());	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertTrue(filterResult.endsWith("STR"));	0
BasicURLNormalizerTest	testAnchorFilterFalse	assertEquals(url.toExternalForm(),filterResult);	assertNotSame("STR",filterResult);	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	1
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNull(fields.get("STR"));	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertNotEquals(0,(int)fields.size());	0
BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR",fields.get("STR"));	assertTrue(fields.containsKey("STR")||(fields.containsKey("STR")&&fields.get("STR").startsWith("STR")));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotNull(URI.create("STR"));	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertTrue(URI.create("STR")!=null);	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertEquals("STR",URI.create("STR").toString());	0
UrlUtilsTest	testCreateValidUrl	assertEquals("STR",UrlUtils.create("STR").toURI().toASCIIString());	assertNotEquals("STR",URI.create("STR").toString());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotNull(poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertNotSame(this.polledObjects,poller.getPolledObjects());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertEquals(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().containsAll(this.polledObjects));	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertArrayEquals(this.polledObjects.toArray(),poller.getPolledObjects().toArray());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertSame(this.polledObjects.size(),poller.getPolledObjects().size());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertFalse(poller.getPolledObjects().isEmpty());	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()>0);	0
JmxAttributePollerTest	testGetPolledObjects	assertEquals(this.polledObjects,this.poller.getPolledObjects());	assertTrue(poller.getPolledObjects().size()!=0);	0
AThreadPoolTest	testPrime	assertEquals(1,AThreadPoolImpl.prime(0,Collections.emptySet()));	assertEquals(2310,java.util.stream.LongStream.of(2,3,5,7,11).reduce(1,(a,b)->a*b));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	1
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotNull(DevUtil.parseNetworks("STR"));	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertEquals("STR",DevUtil.parseNetworks("STR")[0]);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertNotEquals(0,DevUtil.parseNetworks("STR").length);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertTrue(DevUtil.parseNetworks("STR")!=null);	0
DevUtilTest	testParseNetworks	assertArrayEquals(networkArray,DevUtil.parseNetworks("STR"));	assertFalse(DevUtil.parseNetworks("STR")!=null);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>0);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotNull(result);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertFalse(result.isEmpty());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()<=10);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotEquals(5,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertTrue(result.size()>=1);	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertNotSame(0,result.size());	0
OMatchStatementExecutionTest	testTriangle2	assertEquals(1,result.size());	assertEquals(1,result.size());	1
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager2));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc1));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertEquals(3,manager2.getNewRecords().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotNull(manager.getReferences());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getUpdateRecords()==null||manager.getUpdateRecords().isEmpty());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertNotEquals(0,manager.getReferences().size());	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.isSame(manager));	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager!=null);	0
ODirtyManagerTest	testLinkCollectionOther	assertTrue(manager2.isSame(manager));	assertTrue(manager.getNewRecords().contains(doc2));	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(ODocument.class,doc.getClass());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(doc!=null);	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getIdentity().toString().length());	0
TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals("STR",doc.getClassName());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(item.getIdentity());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertEquals("STR",item.getProperty("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(item.getPropertyNames().contains("STR"));	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(live);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(listener);	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertFalse(database.getURL().isEmpty());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertNotNull(database.getTransaction());	0
OLiveQueryRemoteTest	testRidSelect	assertTrue(listener.latch.await(10,TimeUnit.SECONDS));	assertTrue(database.getClusterNames().contains("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertTrue(doc.containsField("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(3,db.countClass("STR"));	1
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotNull(doc.field("STR"));	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotEquals(doc1,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc,doc2);	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertEquals(doc1.getClassName(),doc2.getClassName());	0
RecursiveLinkedSaveTest	testTxLinked	assertEquals(3,db.countClass("STR"));	assertNotSame(doc1.field("STR"),doc2.field("STR"));	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals(3,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(0,actuals.length);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length==3);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals(null,actuals);	0
SeqTest	testFormatMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(Arrays.asList(actuals).isEmpty());	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(1,2,3),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	1
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList(15,20,25,30),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR"),"STR"));	0
SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY,binary.getOpcode());	1
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotNull(binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode().equals(Opcode.BINARY));	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.CLOSING,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertSame(Opcode.BINARY,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertEquals(Opcode.BINARY.toString(),binary.getOpcode().toString());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotEquals(Opcode.TEXT,binary.getOpcode());	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertTrue(binary.getOpcode()!=null);	0
FramedataImpl1Test	testDefaultValues	assertEquals(Opcode.BINARY,binary.getOpcode());	assertNotSame(Opcode.PING,binary.getOpcode());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertEquals(expected,config.toYaml("STR"));	1
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(expected.contains(config.toYaml("STR")));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").startsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertFalse(config.toYaml("STR").endsWith("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
ConfigTest	has_yaml_representation	assertEquals(expected,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	0
CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR","STR");	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()>=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(0,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotNull(rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotEquals(0,rpcServer.port());	1
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertNotSame(null,rpcServer.port());	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertTrue(rpcServer.port()!=0);	0
RpcServerTest	doTestRandomPortConstructor	assertNotEquals(0,rpcServer.port());	assertFalse(rpcServer.port()<0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertEquals(1,registry.agentCount());	1
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertFalse(registry.getAgents().isEmpty());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(registry);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotEquals(0,registry.getAgents().size());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()>0);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertNotNull(agentsFile);	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(agentsFile.exists());	0
AgentsFileTest	testLoad_emptyTag	assertEquals(1,registry.agentCount());	assertTrue(registry.getAgents().size()<=1);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(expected,"STR");	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	1
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertNotNull(actual.getAsJsonObject().get("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals("STR",expected);	0
ActivityTest	testSerialize	assertNotNull(actual);	assertEquals(2,actual.getAsJsonObject().entrySet().size());	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.getAsJsonObject().has("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
ActivityTest	testSerialize	assertNotNull(actual);	assertTrue(actual.toString().matches("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR".replaceAll("STR","STR"),EntityUtils.toString(response.getEntity()).replaceAll("STR","STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(response.getStatusLine().getStatusCode()==200);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertEquals("STR",response.getEntity().getContentType().getValue());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals("STR",response.toString());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotNull(response.getEntity());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(response.getEntity().getContentLength()>100);	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertTrue(EntityUtils.toString(response.getEntity()).contains("STR"));	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertFalse(EntityUtils.toString(response.getEntity()).isEmpty());	0
GZipIntegrationTest	fixedLengthContentIsEncodedProperly	assertEquals("STR",EntityUtils.toString(response.getEntity()));	assertNotEquals(0,response.getEntity().getContentLength());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult!=null);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testWithinDomain	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(1,a[0]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[3]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(2,a[1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(5,a.length);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-1,Math.negateExact(a[0]));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(-1,a[1]);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertFalse(Arrays.asList(a).contains(6));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(1,Arrays.stream(a).min().orElse(0));	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertTrue(a[2]>0);	0
SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertNotEquals(0,a[4]);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertEquals("STR".toLowerCase().replaceAll("STR","STR"),sql.select().from("STR").limit(10).toString().trim().toLowerCase().replaceAll("STR","STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotNull(sql);	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").limit(10).toString().trim());	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertFalse(sql.toString().contains("STR"));	0
TSqlBuilderTest	testPaging	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(person3.getIdentity());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotEquals(person1.getIdentity(),person2.getIdentity());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(db.getUnderlying().isClosed());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",person3.field("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertEquals("STR",person3.getClassName());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertNotNull(db);	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertTrue(person1.getIdentity().isValid());	0
DuplicateDictionaryIndexChangesTxTest	testDuplicateNullsOnCreate	assertEquals(person2,index.get("STR"));	assertFalse(person1.getIdentity().isNew());	0
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertEquals(result.size(),1);	1
OCommandExecutorSQLSelectTest	testMatches	assertEquals(result.size(),1);	assertTrue(result.contains("STR"));	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>0);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertFalse(results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(null,results);	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(!results.isEmpty());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertNotEquals(-1,results.size());	0
OCommandExecutorSQLSelectTest	testParamWithMatches	assertEquals(results.size(),1);	assertTrue(results.size()>=1);	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertEquals(results.size(),1);	1
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertTrue(results.stream().allMatch(doc->doc.field("STR").toString().startsWith("STR")));	0
OCommandExecutorSQLSelectTest	testMatchesWithQuotes3	assertEquals(results.size(),1);	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testBooleanParams	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.INTEGER,focalObject.getTypes()[0]);	0
OSimpleKeyIndexDefinitionTest	testGetKeyTypes	assertEquals(simpleKeyIndexDefinition.getTypes(),newOType[]{OType.INTEGER,OType.STRING});	assertEquals(OType.class,focalObject.getTypes().getClass().getComponentType());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(bytes.length==doc.<FOCAL>SomeMethodName());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertEquals(bytes.length,((byte[])doc.field("STR")).length);	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNull(doc.field("STR"));	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertFalse(doc.isNew());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertNotEquals(null,doc.getRecord());	0
ODocumentTest	testNoDirtySameBytes	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().count()==2);	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().count());	1
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertNotNull(result.stream().findFirst().orElse(null));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().allMatch(r->r.getPropertyNames().contains("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().anyMatch(r->r.getPropertyNames().contains("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertEquals(2,result.stream().map(r->r.<String>getProperty("STR")).distinct().count());	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().noneMatch(r->r.getPropertyNames().contains("STR")));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().noneMatch(r->r.getPropertyNames().isEmpty()));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertTrue(result.stream().allMatch(r->r.getPropertyNames().size()>0));	0
OSqlScriptExecutorTest	testMultipleCreateEdgeOnTheSameLet	assertEquals(2,result.stream().count());	assertFalse(result.stream().filter(r->r.getPropertyNames().contains("STR")).findAny().isPresent());	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(resultinstanceofDouble);	1
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertEquals(newBigDecimal("STR"),result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotNull(result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(0,result.hashCode());	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(function,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(result!=null);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(-10.5,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertTrue(resultinstanceofNumber);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotSame(-10.5,result);	0
OSQLFunctionAbsoluteValueTest	testNegativeDouble	assertTrue(resultinstanceofDouble);	assertNotEquals(Double.valueOf(-10.5),result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertEquals(5&1,(int)result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotNull(result);	0
OMathExpressionTest	testAnd	assertTrue(resultinstanceofInteger);	assertNotEquals(0,(int)result);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(db.countClass("STR")>0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotNull(pool);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertEquals(1,db.countClass("STR"));	1
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertFalse(db.countClass("STR")==0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(0,db.countClass("STR"));	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(loader.getProgress()>=0);	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals(0,loader.getProgress());	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotSame("STR","STR");	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertNotEquals("STR","STR");	0
OETLEdgeTransformerTest	testDynamicEdgeClassMultipleValues	assertEquals(1,db.countClass("STR"));	assertTrue(loader.getProgress()<=100);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotNull(result);	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.stream().noneMatch(r->r.getProperty("STR").equals(1)));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.stream().anyMatch(r->r.getProperty("STR").equals(3)));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.stream().allMatch(r->r.getProperty("STR").equals(2)));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.stream().anyMatch(r->r.getProperty("STR")==null));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertNotEquals(5,result.stream().count());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertFalse(result.stream().findFirst().isPresent());	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertTrue(result.stream().mapToInt(r->r.getProperty("STR")).anyMatch(val->val>1));	0
OSelectStatementExecutionTest	testSelectNoTargetSkip	assertFalse(result.hasNext());	assertEquals(0,result.stream().mapToInt(r->(int)r.getProperty("STR")).sum());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized());	1
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.wordforms.isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(1,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotNull(vārds);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotEquals(0,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.isRecognized()||vārds.wordforms.size()>0);	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertEquals(true,vārds.isRecognized());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertFalse(vārds.getToken().isEmpty());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertNotSame(0,vārds.wordforms.size());	0
MorphologyTest	vajadzības_minēšana	assertTrue(vārds.isRecognized());	assertTrue(vārds.getToken().equals("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsValue("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotEquals("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertTrue(env.containsKey("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertFalse(env.isEmpty());	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertSame("STR",env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNull(env.get("STR"));	0
AbstractServiceSetupTest	testGetProperty	assertEquals("STR",create(env).getProperty("STR"));	assertNotSame("STR",env.get("STR"));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(actual);	1
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotNull(expected);	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.startsWith(expected.substring(0,2)));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementReferenceTest	testSetId	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals("STR",method.getName());	1
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertNotNull(method);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.isAnnotationPresent(Prepare.class));	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(Prepare.class,method.getAnnotation(Prepare.class).annotationType());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(false,method.getAnnotation(Prepare.class).global());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.isBridge());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getModifiers()==Modifier.PUBLIC);	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertEquals(0,method.getParameterCount());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertTrue(method.getName().equals("STR")||method.getName().isEmpty());	0
AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodWithoutArgs	assertEquals("STR",method.getName());	assertFalse(method.toGenericString().contains("STR"));	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(3,registry.agentCount());	1
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()>0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotNull(registry);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertFalse(registry.agentCount()==0);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(0,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertEquals(4,registry.agentCount()+1);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotSame(0,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertTrue(registry.agentCount()==3);	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertNotEquals(4,registry.agentCount());	0
RegistryTest	testGetAgents_withCount	assertEquals(3,registry.agentCount());	assertSame(3,registry.agentCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertEquals(5,registry.workerCount());	1
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>0);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotNull(parametersList);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotSame(0,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()>=5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotEquals(10,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertTrue(registry.workerCount()==5);	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertNotSame(10,registry.workerCount());	0
RegistryTest	testRemoveWorker_viaSimulatorAddress	assertEquals(5,registry.workerCount());	assertFalse(registry.workerCount()==0);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertTrue(factory.getJmxMBeanConnectionFactory()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(Mockito.mock(JMXMBeanConnectionFactory.class),factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotSame(Mockito.mock(JMXMBeanConnectionFactory.class),factory.getJmxMBeanConnectionFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertFalse(factory.getJmxMBeanConnectionFactory()==null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxMbeanConnectorFactory	assertTrue(this.factory.getJmxMBeanConnectionFactory()instanceofDefaultJmxMBeanConnectionFactory);	assertNotNull(factory.getJmxMBeanConnectionFactory());	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(equality.equals(1,3));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(!(2==4));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(4,2+2);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(5<2);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNull(null);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotEquals(5,10);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull("STR");	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotSame(10,20);	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue("STR".contains("STR"));	0
ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse("STR".isEmpty());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode().equals(Opcode.CONTINUOUS));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotNull(frame);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertNotEquals(0,frame.hashCode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getClass().getName().contains("STR"));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertFalse(frame.toString().isEmpty());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.toString().length()>0);	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getClass().getSimpleName().equals("STR"));	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertEquals(Opcode.CONTINUOUS,frame.getOpcode());	0
ContinuousFrameTest	testExtends	assertEquals(true,frameinstanceofDataFrame);	assertTrue(frame.getOpcode()==Opcode.CONTINUOUS);	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertEquals(8,config.getString("STR").length());	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
ConfigTest	gets_and_sets_value	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotNull(m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertTrue(minstanceofCustomMetronome);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotEquals(EmptyMetronome.INSTANCE,m);	0
MetronomeSupplierTest	testThreadCount	assertEquals(SleepingMetronome.class,m.getClass());	assertNotSame(EmptyMetronome.INSTANCE,m);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(Integer.valueOf(2342),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotNull(pid);	1
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>=0);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(null,pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotSame(Integer.parseInt("STR"),pid);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid!=null);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(2342,pid.intValue());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertNotEquals(0,pid.intValue());	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertTrue(pid>1000);	0
NativeUtilsTest	testGetPidStringOrNull	assertNotNull(pid);	assertEquals(2342,pid.intValue());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	1
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertTrue(expectedA.entrySet().containsAll(MapUtil.mergeMaps(mapA,mapB).entrySet()));	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertEquals(3,MapUtil.mergeMaps(mapA,mapB).size());	0
MapUtilTest	testMergeMaps	assertEquals(expectedA,MapUtil.mergeMaps(mapA,mapB));	assertNotEquals(createMap("STR","STR","STR","STR","STR","STR"),MapUtil.mergeMaps(mapA,mapB));	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotNull(is);	1
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is!=null);	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.markSupported());	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(is.available()>0);	0
ProfileUtilTest	simple	assertNotNull(is);	assertEquals(1306,is.available());	0
ProfileUtilTest	simple	assertNotNull(is);	assertNotEquals(-1,is.read());	0
ProfileUtilTest	simple	assertNotNull(is);	assertTrue(Arrays.asList("STR","STR","STR").contains("STR"));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(42)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(100)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(77)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(55));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(0,array.add(88));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(123));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertTrue(array.add(99)>=0);	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(200));	0
CASObjectArrayTest	testCompareAndSetSingleItem	assertEquals(0,array.add(1));	assertEquals(1,array.add(150));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals("STR",result.next().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertEquals(4,db.countClass("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertFalse(db.isClosed());	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals(0,db.countClass("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotEquals("STR",result.next().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotSame("STR",result.next().getProperty("STR"));	0
OMatchStatementExecutionNewTest	testOrderByDesc	assertTrue(result.hasNext());	assertNotSame("STR",result.next().getProperty("STR"));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertFalse(compositeKey.equals(null));	1
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(false,compositeKey.equals(null));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(0,compositeKey.hashCode());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.getKeys().isEmpty());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotNull(compositeKey.toString());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotSame(compositeKey.getComparator(),anotherCompositeKey.getComparator());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKeyinstanceofOCompositeKey);	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertNotEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	0
OCompositeKeyTest	testEqualNull	assertFalse(compositeKey.equals(null));	assertTrue(compositeKey.equals(compositeKey));	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(prop);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(prop.getName(),"STR");	1
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertEquals(OType.SHORT,prop.getType());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(prop.getId()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(schema.getGlobalProperties().size()>0);	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotEquals("STR",prop.getName());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotNull(schema.makeSnapshot());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertFalse(db.isClosed());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertNotSame(OType.STRING,prop.getType());	0
OSchemaSharedGlobalPropertyTest	testGlobalPropertyCreate	assertEquals(prop.getName(),"STR");	assertTrue(db.exists());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertEquals(1,map.size());	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotNull(map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.containsKey("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(map.size()>0);	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotSame("STR",map.get("STR"));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertTrue(!doc.equals(map));	0
TrackedMapTest	testRemoveTwo	assertFalse(doc.isDirty());	assertNotEquals("STR",map.get("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(result);	1
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(result.get(0).containsField("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(result.isEmpty());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(classA.getProperty("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotEquals(OType.INTEGER,prop.getType());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(classA.existsProperty("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNull(classA.getProperty("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertTrue(schema.existsClass("STR"));	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertFalse(classA.isAbstract());	0
SaveLinkedTypeAnyTest	testAlterRemoveLinkedType	assertNotNull(result);	assertNotNull(schema.getClass("STR"));	0
ODatabaseDocumentTxTest	testDocFromJsonEmbedded	assertEquals(result.size(),0);	assertNotNull(result);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(3,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertFalse(qResult.contains(null));	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotEquals(5,qResult.size());	0
OMatchStatementExecutionTest	testFriendsOfFriends	assertEquals(1,qResult.size());	assertNotSame(10,qResult.size());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	1
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(exec().getResponse().getStatusLine().getStatusCode()>=200&&exec().getResponse().getStatusLine().getStatusCode()<300);	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotNull(exec().getResponse());	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertFalse(getDatabaseName().equalsIgnoreCase("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotEquals(getDatabaseName(),"STR");	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertTrue(payload("STR",CONTENT.TEXT).getPayload().contains("STR"));	0
HttpIndexTest	updateKey	assertEquals(getResponse().getStatusLine().getStatusCode(),201);	assertNotNull(exec().getResponse().getStatusLine());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSessioncounter()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNull(response.getTimestamp());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals("STR",response.getErrorMessage());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertFalse(response.isOk());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertTrue(response.getSl()>0);	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotSame(expectedOtherzeigenaki_indheltos_thuetamiGargiolaos_seOID_EMVcleiebdon4cao_lemma.status(),response.getStatus());	0
YubicoClientTest	testReplayedOTP	assertNotNull(response);	assertNotEquals(0,response.getSessionuse());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	1
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()==0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()!=-1);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>-1);	0
MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(-1,panel.getTurtleCount());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines.size(),dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(expectedDockerfileLines.size()>0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(util);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_mixedcase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals("STR",dockerfileLines.get(1));	0
MkvBlockTest	testXiph	assertArrayEquals(expecteds,MkvBlock.muxXiphLacing(_in));	assertArrayEquals(expecteds,result);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(rootAtoms);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(rootAtoms.size()>0);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertEquals(3,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotEquals(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotNull(input);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertFalse(rootAtoms==null);	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotSame(0,rootAtoms.size());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertTrue(!rootAtoms.isEmpty());	0
SegmentTypeBoxTest	testParse	assertEquals(2,rootAtoms.size());	assertNotSame(5,rootAtoms.size());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().limit()>0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(256,f1.getData().limit());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getFrameNo()<=10);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1.getPts());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getDuration()>=0);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame1,f1.getData().array());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertArrayEquals(frame2,f1.getData().array());	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getDuration()<=1000);	0
MPEGESTest	testESBuffer	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getTimescale()==90000);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertEquals(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertNotNull(actual);	1
ContextTest	testSetInstructor	assertNotNull(actual);	assertSame(expected,actual);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertTrue(actual!=null);	0
ContextTest	testSetInstructor	assertNotNull(actual);	assertFalse(actual==null);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.isRecognized());	1
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(10,austrumlatvija.wordforms.size());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(austrumlatvija.wordforms.isEmpty());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.toString().contains("STR"));	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotEquals(0,austrumlatvija.hashCode());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(austrumlatvija,locītājs.analyze("STR"));	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals("STR",austrumlatvija.toString());	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.toString().startsWith("STR"));	0
MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(austrumlatvija.getToken().equals("STR"));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertTrue(userProcessors.containsValue(multiInterestUserProcessor));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertEquals(2,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.isEmpty());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotEquals(0,userProcessors.size());	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(multiInterestUserProcessor);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNull(userProcessors.get("STR"));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertSame(userProcessors.get("STR"),userProcessors.get("STR"));	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertNotNull(userProcessors);	0
UserProcessorRegisterHelperTest	testRegisterMultiInterestUserProcessor	assertEquals(((SimpleServerMultiInterestUserProcessor)multiInterestUserProcessor).multiInterest().size(),userProcessors.size());	assertFalse(userProcessors.containsKey("STR"));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.count(poolKey));	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>=0);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)!=-1);	0
RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(poolKey)>-1);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	1
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertEquals(7,matcher.regionEnd());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotEquals(-1,matcher.regionStart());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertTrue(matcher.find());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	0
MatcherTest	lookingAtPrefix	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertFalse(StringUtils.isNonZero("STR"));	1
StringUtilsTest	testIsEmptyNonZero	assertFalse(StringUtils.isNonZero("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(2,s.getActualCost());	1
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(0,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertTrue(s.getActualCost()>0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotNull(s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(-100,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertNotEquals(5,s.getActualCost());	0
PuzzleStateTest	actual_cost_is_actual_steps	assertEquals(2,s.getActualCost());	assertEquals(1,s.getActualCost()-1);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotNull(result);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertEquals("STR",result.getProperty("STR"));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.hasNext());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getExecutionPlan()!=null);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertNotEquals(0,result.estimateSize());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.stream().count()>0);	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.characteristics().contains(Characteristics.ORDERED));	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.trySplit().isPresent());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertTrue(result.getQueryStats().isEmpty());	0
OCreateClusterStatementExecutionTest	testBlob	assertTrue(db.getClusterIdByName(clusterName)>0);	assertFalse(result.remove());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(id,prop.getId());	1
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(oClass.existsProperty("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotNull(oClass.getProperty("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotEquals(0,prop.getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getId()>0);	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame(1234,prop.getId());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertTrue(prop.getName().startsWith("STR"));	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertEquals(OType.STRING,prop.getType());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertNotSame("STR",prop.getDescription());	0
OClassImplTest	testCreatePropertyIdKeep	assertEquals(id,prop.getId());	assertFalse(oClass.equals(null));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertEquals(next.field("STR"),true);	1
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(Integer.valueOf(0),next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR")==null);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(0,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals("STR",next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR")==Integer.valueOf(0));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotSame(null,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStEqualsPoint	assertEquals(next.field("STR"),true);	assertNotEquals(Boolean.FALSE,next.field("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(true);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotNull(proc);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertFalse(false);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotEquals(0,proc.hashCode());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.toString().contains("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotSame(null,proc);	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.getClass().getName().startsWith("STR")||proc.getClass().getSimpleName().equals("STR"));	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertNotEquals(0,proc.toString().length());	0
OETLFieldTransformerTest	testToLowerCase	assertEquals(1,getResult().size());	assertTrue(proc.getClass().getSimpleName().equals("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz);	1
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(db.getMetadata().getSchema().existsClass("STR"));	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertEquals("STR",clazz.getName());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotEquals(0,clazz.hashCode());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.isEdgeType());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.getDefaultClusterId()>=0);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertTrue(clazz.count()>=0);	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertFalse(clazz.isAbstract());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNotNull(clazz.getSuperClass());	0
ODatabaseDocumentTxTest	testCreateEdgeClass	assertNotNull(clazz);	assertNull(clazz.getDescription());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotNull(result);	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertEquals(3,values.size());	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertTrue(values.contains("STR"));	0
OPropertyListIndexDefinitionTest	testCreateValueWrongParameterArrayParams	assertNull(propertyIndex.createValue("STR"));	assertNotEquals(0,values.size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertFalse(prioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(true);	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>0);	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotSame(0,prioritizer.getPrioritizedRoutes().size());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(prioritizer.getPrioritizedRoutes().size()>=1);	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,prioritizer.getPrioritizedRoutes());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertTrue(!prioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testRoutePrioritizerRemoveRouteNoRouteMatches	assertEquals(1,prioritizer.getPrioritizedRoutes().size());	assertNotNull(prioritizer.getPrioritizedRoutes());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.hashCode());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer.toString(),"STR");	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.toString().contains("STR"));	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.getPrioritizedRoutes().hashCode());	0
TestNanolets	testBaseRoutePrioritizerAddNullRoute	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getSimpleName().startsWith("STR"));	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response);	1
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals(expected,response.getStatus());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getTimestamp()>0);	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isOk());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getSessioncounter());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame("STR",response.getH());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(null,response.getKeyValueMap());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(response.getT(),response.getTimestamp());	0
YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.getSl()>=0&&response.getSl()<=100);	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",String.join("STR",Arrays.asList("STR","STR","STR")));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(null,"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList(0,1,2,3,4,5),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Collections.emptyList(),"STR"));	0
SeqTest	testJoinListEmpty	assertEquals("STR",Seq.join(Collections.EMPTY_LIST,"STR"));	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertTrue(actual.getMbox().equals("STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertSame(expected,activityState.getAgent());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(activityState.getStateId().isEmpty());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected,activityState.getState());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertFalse(activityState.getActivityId().startsWith("STR"));	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotNull(activityState.getRegistration());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertNotSame(expected.hashCode(),activityState.hashCode());	0
ActivityStateTest	testSetAgent	assertNotNull(actual);	assertEquals("STR",actual.getMbox());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(expected.entrySet().containsAll(actual.entrySet()));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(expected.keySet().containsAll(actual.keySet()));	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	1
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected.keySet(),actual.keySet());	0
VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(actual.containsKey(null));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a);	1
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().contains(statement));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(attachments,a.getAttachment());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotSame(statement,a.getXapiStatement());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertEquals(2,a.getXapiStatements().getStatements().size());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertNotNull(a.getXapiStatements());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getAttachment().containsKey(HASH));	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertFalse(a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetAttachments	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().size()>=2);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(CachedExtractor.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofCachedExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofBasicExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(BasicExtractor.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(extractorinstanceofExtractor);	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newCachedExtractor(extractor,config));	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(BasicExtractor.class,extractor.getClass());	0
ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(extractorinstanceofBasicExtractor);	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(3,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),len).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),len).containsKey(3));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),len).containsKey(4));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertFalse(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),len).isEmpty());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(2,ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).get(4).size());	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(Arrays.asList("STR","STR"),ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).get(4));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).containsKey(3));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).containsKey(7));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertEquals(Arrays.asList("STR"),ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).get(6));	0
ACollectionHelperTest	testGroupByEquals	assertEquals(3,grouped.size());	assertTrue(ACollectionHelper.groupBy(Arrays.asList("STR","STR","STR","STR"),String::length).containsKey(6));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").startsWith("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertFalse(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR")==null);	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNotEquals(0,ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").length());	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR").contains("STR")&&ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR").contains("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList("STR","STR","STR","STR","STR","STR"),"STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertNotEquals(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR"),"STR");	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertTrue(ACollectionHelper.mkString(Arrays.asList("STR","STR","STR"),"STR").endsWith("STR"));	0
ACollectionHelperTest	testMkStringSeparator	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR"));	assertFalse(ACollectionHelper.mkString(Arrays.asList("STR","STR"),"STR").isEmpty());	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertNotNull(w.getBestWordform().getValue(AttributeNames.i_Lemma));	0
MorphologyTest	jaundzimušākais	assertTrue(w.isRecognized());	assertTrue(w.getWordforms().size()>0);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals("STR",method.getName());	1
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method!=null);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals(false,method==null);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotEquals(null,method);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertSame(AnnotationTestClass.class,method.getDeclaringClass());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertEquals("STR",method.getDeclaringClass().getSimpleName());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertFalse(method.isSynthetic());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getDeclaredAnnotations().length>0);	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertNotSame(AnnotationTestClass.class,method.getDeclaringClass());	0
AnnotationFilterTest	testGlobalVerifyFilter	assertEquals("STR",method.getName());	assertTrue(method.getModifiers()>0);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotNull(performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertFalse(performance.isEmpty());	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR")&&performance.contains("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertNotEquals("STR",performance);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.startsWith("STR"));	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertEquals(67,performance.length()-33);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.length()>0);	0
PerformanceStatsCollectorTest	testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold	assertTrue(performance.contains("STR"));	assertTrue(performance.contains("STR")||performance.contains("STR")||performance.contains("STR"));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>0);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotNull(started);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertFalse(duration>=durationLimit);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(started,duration);	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertEquals(durationLimit,SECONDS.toMillis(3));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,SECONDS.toMillis(3));	0
CommonUtils_SleepTest	testSleepTimeUnit	assertTrue(format("STR",duration),duration>0);	assertNotSame(duration,SECONDS.toMillis(3));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(3,ebmlSignedLength(-100000));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(5,ebmlSignedLength(-5000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(4,ebmlSignedLength(7000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(1,ebmlSignedLength(63L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,ebmlSignedLength(-20000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(2,ebmlSignedLength(1000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertEquals(6,ebmlSignedLength(-1250000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertNotEquals(7,ebmlSignedLength(-175000000000000000L));	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertTrue(ebmlSignedLength(1000000L)!=5);	0
EbmlSintTest	testNegativeVals	assertEquals(1,ebmlSignedLength(-3));	assertFalse(ebmlSignedLength(50000000L)==3);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(false);	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",builder.getSpec().getInitContainers().get(0).getImage());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(builder.getSpec().getInitContainers());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals(2,builder.getSpec().getInitContainers().size());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.getSpec().getContainers().isEmpty());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(builder.getMetadata());	0
InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",builder.getMetadata().getName());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals(0,pattern.pattern().length());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotSame(pattern.flags(),pattern.flags().clone());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotEquals("STR",pattern.pattern());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(matcher.regionStart()<matcher.regionEnd());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertNotSame(matcher.regionStart(),matcher.regionEnd());	0
SmpTest	findCharClass	assertTrue(matcher.find());	assertTrue(pattern.flags().contains(PatternFlags.ADVANCED));	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertEquals(0,s.getEstimatedCost());	1
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotNull(s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-1,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(-100,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertFalse(s.getEstimatedCost()<0);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(999,s.getEstimatedCost());	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertTrue(s.getEstimatedCost()>=-1);	0
PuzzleStateTest	estimated_cost_is_zero_when_solved	assertEquals(0,s.getEstimatedCost());	assertNotEquals(Integer.MIN_VALUE,s.getEstimatedCost());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count(poolKey));	1
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(1,cm.count("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll().isEmpty());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll().size()>0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(cm.getAll());	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count(null)>=0);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.getAll().containsKey("STR"));	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")==1);	0
RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(cm.getAll().get(poolKey).isEmpty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	1
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc);	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(0,doc.getDirtyFields().size());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	0
TrackedListTest	testAddIndexNotificationThree	assertFalse(doc.isDirty());	assertTrue(docinstanceofODocument);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()==1);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>=1);	0
OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertNotNull(proc);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertEquals(EXPECTED_CHAR,stream[0]);	0
CharSerializerTest	testSerialize	assertEquals(charSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(0,startPosition);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.getId()!=null);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(v.getId().toString().startsWith("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).equals(v));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(v);	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getProperty("STR").equals("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertTrue(graph.getVertex(v.getId()).getPropertyKeys().contains("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(graph.getVertex(v.getId()).getPropertyKeys().isEmpty());	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertNotNull(graph.getVertex(v.getId()));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertEquals("STR",v.getProperty("STR"));	0
BlueprintsTest	testPersistentRIDAfterCommit	assertTrue(((ORID)v.getId()).isPersistent());	assertFalse(v.getPropertyKeys().isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult,Arrays.asList(newOCompositeKey(12,"STR"),newOCompositeKey(12,"STR")));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertTrue(collectionResult.contains(newOCompositeKey(12,"STR")));	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertEquals(collectionResult.size(),2);	1
OCompositeIndexDefinitionTest	testDocumentToIndexMapValueSuccessful	assertEquals(collectionResult.size(),2);	assertNotNull(collectionResult);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertEquals(((Collection<OCompositeKey>)result).size(),1);	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertTrue(((Collection<OCompositeKey>)result).stream().anyMatch(key->key.getKeys().contains(12)));	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertFalse(((Collection<OCompositeKey>)result).isEmpty());	0
OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(null,12)));	assertNotEquals(((Collection<OCompositeKey>)result).size(),0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),to.getClusterId());	1
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(to.getClusterId()>=0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotNull(from.getClusterId());	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),to.getClusterId()+1);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertTrue(from.getClusterId()==100);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),to.getClusterId()-1);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertEquals(from.getClusterId(),100);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertFalse(to.getClusterId()<0);	0
OClusterRepairInfoTaskTest	testSerialization	assertEquals(from.getClusterId(),to.getClusterId());	assertNotEquals(from.getClusterId(),50);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotNull(v1);	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertTrue(v1.getIdentity().isValid());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertEquals("STR",v1.getSchemaType().get().map(OClass::getName).orElse(null));	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotEquals(0,v1.getIdentity().getClusterId());	0
SQLCreateVertexAndEdgeTest	testNewParser	assertEquals(v1.getClassName(),OrientVertexType.CLASS_NAME);	assertNotSame("STR",v1.getProperty("STR"));	0
RemoteQuerySupportTest	testQueryEmbeddedMap	assertNotNull(item.getProperty("STR"));	assertEquals(1,item.getPropertyNames().size());	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstWildcards	assertTrue(Wildcards.matches("STR","STR"));	assertTrue(Wildcards.matches("STR","STR"));	1
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotNull(job);	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",f.getName());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.getTimestamp().getTime()<=System.currentTimeMillis());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(job.isDryRun());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotSame(folder.getRoot(),f.getParentFile());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(job.getServiceName().startsWith("STR"));	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertNotEquals("STR",job.getServiceBuildNumber());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertFalse(f.exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertTrue(folder.getRoot().exists());	0
JsonWriterTest	testSubDirectoryCreation	assertTrue(newJsonWriter(job,f).getCoverallsFile().getParentFile().isDirectory());	assertEquals("STR",job.getBranch());	0
TravisTest	testGetBranch	assertEquals("STR",newTravis(env()).getBranch());	assertEquals("STR",newTravis(env()).getBranch());	1
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertNotNull(processor.getAttributeInjector());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(AttributeInjector.class,processor.getAttributeInjector().getClass());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertEquals(AttributeInjector.class.getName(),processor.getAttributeInjector().getClass().getName());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertSame(AttributeInjector.class,processor.getAttributeInjector().getClass());	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector()!=null);	0
BatchPollProcessorTest	testGetSetAttributeInjector	assertNotNull(this.processor.getAttributeInjector());	assertTrue(processor.getAttributeInjector().getClass().getSimpleName().startsWith("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.getClass().getDeclaredFields().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getDeclaredFields().length>0);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getDeclaredFields().length<10);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertEquals(0,setFieldTest.getClass().getDeclaredMethods().length);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getDeclaredMethods().length==0);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertFalse(setFieldTest.getClass().getDeclaredMethods().length>0);	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotNull(setFieldTest.getClass().getSimpleName());	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertTrue(setFieldTest.getClass().getSimpleName().startsWith("STR"));	0
ReflectionUtilsTest	testSetFieldValue	assertNull(setFieldTest.injectField);	assertNotEquals(0,setFieldTest.getClass().getDeclaredConstructors().length);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertEquals(3,result.size());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertFalse(result.isEmpty());	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsValue("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotNull(result);	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertTrue(result.containsKey("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNotEquals("STR",result.get("STR"));	0
TagUtilsTest	parseTags	assertEquals(toMap("STR","STR","STR","STR","STR","STR"),result);	assertNull(result.get("STR"));	0
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertEquals(4,registry.workerCount());	1
RegistryTest	testGetWorkers_getMemberWorkers_notEnoughWorkersFound	assertEquals(4,registry.workerCount());	assertNotEquals(0,registry.workerCount());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	1
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(Files.readAllLines(targetFile.toPath()).get(0),"STR");	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.length()>0);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(configDirectory.getAbsolutePath(),targetDir.getAbsolutePath());	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotEquals(configDirectory,targetDir);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotSame(configDirectory,targetDir);	0
DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetDir.exists());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(expectedDockerfileLines,dockerfileLines);	1
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotNull(dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertTrue(dockerfileLines.size()>0);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.isEmpty());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(0,dockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotSame(expectedDockerfileLines,dockerfileLines);	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertArrayEquals(expectedDockerfileLines.toArray(),dockerfileLines.toArray());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertFalse(dockerfileLines.contains("STR"));	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertNotEquals(dockerfileLines,expectedDockerfileLines.size());	0
DevUtilPrepareDockerfileTest	testDisableOpenJ9SCC_lowercase	assertEquals(expectedDockerfileLines,dockerfileLines);	assertEquals(3,dockerfileLines.size());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	1
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual,0);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(expected.equalsIgnoreCase(actual));	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(23.7,actual);	0
TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertEquals(1,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('a')>0);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(Constants.NOSUB,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotNull(runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertFalse(runtime(cm).getcolor('a')==Constants.NOSUB);	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotSame(Constants.NOSUB,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(-1,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotSame(-1,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertNotEquals(0,runtime(cm).getcolor('a'));	0
ColorMapTest	testVerySimple	assertEquals(1,cm.subcolor('a'));	assertTrue(runtime(cm).getcolor('a')>=0);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(1,createdFrame.size());	1
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertEquals(Collections.singletonList((Framedata)curframe),createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame);	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertFalse(createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotEquals(0,createdFrame.size());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(!createdFrame.isEmpty());	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.contains(curframe));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertNotNull(createdFrame.get(0));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertTrue(createdFrame.get(0).equals((Framedata)curframe));	0
Draft_6455Test	createFramesText	assertEquals(1,createdFrame.size());	assertSame(createdFrame.get(0),curframe);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl,"STR");	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testDontFixMangledQueryString	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.equals("STR"));	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotNull(handshakeResponse);	1
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertFalse(handshakeResponse==null);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertNotEquals(null,handshakeResponse);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertTrue(handshakeResponse!=null);	0
WebSocketResponseHandlerTest	testMissingKeyReturnsErrorResponse	assertNotNull(handshakeResponse);	assertSame(Response.class,handshakeResponse.getClass());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res!=null&&res.stream().anyMatch(doc->doc.field("STR")==null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty()&&res.size()>=1);	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.stream().anyMatch(doc->doc.field("STR")!=null));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.stream().anyMatch(doc->doc.field("STR").toString().equalsIgnoreCase("STR")));	0
OETLCSVExtractorTest	testNullValueInCell	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty()&&res.get(0).field("STR")==null);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(16238,readAsLong(bytes));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotNull(bytes);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset>=0);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertEquals(1,bytes.alloc(1));	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotEquals(0,bytes.getBytes().length);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertTrue(bytes.offset==1);	0
OVarIntSerializerTest	serializePosition	assertEquals(OVarIntSerializer.readAsLong(bytes),16238l);	assertNotSame(0,bytes.offset);	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(doc.fieldType("STR"),OType.INTEGER);	1
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.LINK,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.BOOLEAN,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertEquals(OType.STRING,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNotEquals(OType.DOUBLE,doc.fieldType("STR"));	0
ODocumentTest	testKeepFieldTypeSerialization	assertEquals(doc.fieldType("STR"),OType.INTEGER);	assertNull(doc.fieldType("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(result);	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.hasNext());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals(2,StreamSupport.stream(database.getMetadata().getSchema().getClasses().spliterator(),false).count());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().allMatch(el->el.getPropertyNames().contains("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertEquals("STR",result.stream().findFirst().get().getProperty("STR"));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(result.stream().anyMatch(el->el.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(result.stream().anyMatch(el->el.getProperty("STR").equals("STR")));	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertNotNull(database.getTransaction());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertFalse(database.isClosed());	0
RemoteTransactionSupportTest	testRefFlushedInTransaction	assertEquals(1,result.stream().count());	assertTrue(database.countClass("STR")>0);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(importer!=null&&dbImp.getMetadata().getSchema().existsClass("STR"));	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotNull(importer);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertEquals(0,dbImp.getMetadata().getSchema().getClass("STR").count());	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	1
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertArrayEquals(expectedArray,resultArray);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotEquals(expectedValue,actualValue);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNull(someObject);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertNotSame(object1,object2);	0
ODatabaseImportTest	exportImportExcludeClusters	assertTrue(dbImp.getMetadata().getSchema().existsClass("STR"));	assertTrue(dbinstanceofODatabaseDocument);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotNull(result);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.iterator().hasNext());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertEquals(2,result.stream().count());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.getExecutionPlan().isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(0,result.getQueryStats().size());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotSame(database,result);	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertTrue(result.getQueryStats().isEmpty());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNull(result.getExecutionPlan().orElse(null));	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertFalse(result.elementStream().findAny().isPresent());	0
OTruncateClassStatementExecutionTest	testTruncateVertexClassSubclassesWithIndex	assertEquals(toList(result).size(),2);	assertNotEquals(-1,result.getQueryStats().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne,compositeKeyTwo);	1
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNull(compositeKeyOne.getComparator());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyTwo.getKeys().containsAll(compositeKeyOne.getKeys()));	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.compareTo(compositeKeyTwo),0);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertTrue(compositeKeyOne.getKeys().size()==compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertEquals(compositeKeyOne.getKeys().get(0),1);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyTwo);	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotSame(compositeKeyOne.getKeys(),compositeKeyTwo.getKeys());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotEquals(compositeKeyOne.getKeys().size(),compositeKeyTwo.getKeys().size());	0
OCompositeKeyTest	testDocumentSerializationCompositeKeyNull	assertEquals(compositeKeyOne,compositeKeyTwo);	assertNotNull(compositeKeyOne.getKeys());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(System.in);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertTrue(serverStartThread.isAlive());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertEquals(19,serverStartThread.getId());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(serverStartThread.getState(),Thread.State.TERMINATED);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotEquals(-1,serverStartThread.getPriority());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertSame(Thread.State.RUNNABLE,serverStartThread.getState());	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotSame(System.in,System.out);	0
TestNanolets	checkIniParameter2	assertEquals("STR",newRouterNanoHTTPD.UriResource("STR",100,null,"STR").initParameter(String.class));	assertNotNull(serverStartThread);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	1
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(0,routePrioritizer.hashCode());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.toString().contains("STR"));	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.toString().isEmpty());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals("STR",routePrioritizer.getClass().getSimpleName());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(ProvidedPriorityRoutePrioritizer.class,routePrioritizer.getClass());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(0,routePrioritizer.hashCode());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(null,routePrioritizer.getPrioritizedRoutes());	0
TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getClass().getName().endsWith("STR"));	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(notFoundHandler,notImplementedHandler);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(notFoundHandler,notImplementedHandler);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(router);	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(notFoundHandler.getClass()!=notImplementedHandler.getClass());	0
TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(router,null);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertEquals(cause,exception.getCause());	1
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertFalse(exception.getMessage().isEmpty());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertSame(cause,exception.getCause());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals("STR",exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotNull(exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotSame(null,exception.getMessage());	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotSame(cause,exception);	0
TestExceptionTest	testConstructor_withCause	assertEquals(cause,exception.getCause());	assertNotEquals(cause,exception);	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	1
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotNull(exception.getMessage());	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().startsWith("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertTrue(exception.getMessage().contains("STR"));	0
TestExceptionTest	testConstructor_withMessageFormat_singleArgument	assertEquals("STR",exception.getMessage());	assertNotEquals(0,exception.getMessage().length());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats!=null);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStats.isEmpty());	1
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStats.getIntervalThroughput()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotNull(performanceStatsCollector.get(TEST_CASE_ID_1,true));	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStatsCollector.get(TEST_CASE_ID_1,true).getTotalThroughput());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStatsCollector.get(TEST_CASE_ID_1,true).getIntervalLatencyAvgNanos()<5000);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStatsCollector.get(TEST_CASE_ID_1,true).getIntervalLatencyMaxNanos()<=3000);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertTrue(performanceStatsCollector.get(TEST_CASE_ID_1,true).getOperationCount()>0);	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertFalse(performanceStatsCollector.get(TEST_CASE_ID_1,true).isEmpty());	0
PerformanceStatsCollectorTest	testGet	assertFalse(performanceStats.isEmpty());	assertNotEquals(0,performanceStatsCollector.get(TEST_CASE_ID_1,true).getIntervalThroughput());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(5,10).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",coordinatorAddress().toString());	1
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(7).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",workerAddress(3,8).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(1).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertEquals("STR",agentAddress(15).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",workerAddress(3,8).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",agentAddress(3).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotEquals("STR",agentAddress(4).toString());	0
SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	assertNotSame(workerAddress(4,7).toString(),workerAddress(4,7).toString());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.size());	1
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotNull(methodList);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.stream().allMatch(m->m.isAnnotationPresent(Teardown.class)));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertFalse(methodList.isEmpty());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertEquals(1,methodList.stream().filter(m->m.getReturnType().equals(Void.TYPE)).count());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.size());	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.size()>0);	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.get(0).isAnnotationPresent(Teardown.class));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertTrue(methodList.stream().allMatch(m->m.getParameterCount()==0));	0
AnnotatedMethodRetrieverTest	testSubClass_methodFoundInSuper	assertEquals(1,methodList.size());	assertNotEquals(0,methodList.stream().filter(m->m.isAnnotationPresent(Teardown.class)).count());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.containsKey("STR"));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.isEmpty());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props.keySet());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotNull(props);	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertEquals(5,props.keySet().size());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertFalse(props.entrySet().stream().anyMatch(entry->entry.getValue().equals("STR")));	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertNotSame(null,props.keySet());	0
SpringBootUtilTest	testMultipleProfilesParsing	assertTrue(props.size()>0);	assertTrue(props.size()>0);	1
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",mojo.serviceName);	1
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(mojo.serviceName);	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBuildUrl());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().equals("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getEnvironment().getProperty("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(serviceMock.getBranch().isEmpty());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getPullRequest());	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getEnvironment().getProperty("STR"));	0
EnvironmentTest	testSetupWithCompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals("STR",serviceMock.getBranch());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(12.346));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrPER100.convert(12.346));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(12.346).length()>0);	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(8.9));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(-5.8).contains("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(7.89));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(null,moneyToStrPER100.convert(12.346));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrPER100.convert(0.0).isEmpty());	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrPER100.convert(17.42).startsWith("STR"));	0
MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals("STR",moneyToStrPER100.convert(9.87));	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.isRecognized());	1
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.wordforms.isEmpty());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNull(m.getCorrectWordform());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertEquals(2,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotNull(m);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotEquals(0,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(m.getCorrectWordform()==null);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertFalse(m.getCorrectWordform()!=null);	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertNotSame(0,m.wordforms.size());	0
MorphologyTest	reziduāļi	assertTrue(m.isRecognized());	assertTrue(!m.wordforms.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.size()>0);	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(0,formas.size());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals("STR",formas.get(0).getToken());	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.get(0).getToken().equals("STR"));	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.size());	1
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.stream().anyMatch(form->form.getToken().equals("STR")));	0
MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(1,formas.stream().filter(form->form.getToken().equals("STR")).count());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals(expected,actual);	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals(0,Records.turn("STR","STR","STR").length());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertTrue(Records.turn("STR","STR").startsWith("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertFalse(Records.turn("STR","STR").isEmpty());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals(17,Records.turn("STR","STR","STR").length());	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals(-1,Records.turn("STR","STR").indexOf("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertTrue(Records.turn("STR").endsWith("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertEquals("STR",Records.turn("STR","STR","STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals(-1,Records.turn("STR","STR").indexOf("STR"));	0
RecordsTest	turn	assertEquals("STR",Records.turn(Records.rec("STR","STR"),"STR"));	assertNotEquals(0,Records.turn("STR","STR","STR").length());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.size());	1
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotNull(conns);	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(!conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(0,conns.size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertFalse(conns.containsKey("STR"));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(conns.containsValue(newArrayList<Connection>()->{ }));	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertEquals(1,conns.keySet().size());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertTrue(!conns.keySet().isEmpty());	0
RpcConnectionManagerTest	testGetAll	assertEquals(1,conns.size());	assertNotEquals(0,conns.entrySet().size());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertEquals("STR",s.get());	1
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.isDefined());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s.get());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotEquals(0,s.hashCode());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertSame("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertFalse(s.isEmpty());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame("STR",s.getOrElse("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertTrue(s.getOrElse("STR").contains("STR"));	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotSame(0,s.hashCode());	0
AOptionTest	testSome	assertEquals("STR",s.get());	assertNotNull(s.getOrElse(null));	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertFalse(qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertEquals(qResult.size(),1);	1
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotEquals(null,qResult);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testFlattenOnEmbedded	assertEquals(qResult.size(),1);	assertNotSame(qResult,Collections.emptyList());	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateValueByValueTwoParametersArrayParams	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertEquals(result,12);	1
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertTrue(result.toString().contains("STR"));	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotNull(result.toString());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertFalse(result.toString().isEmpty());	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotSame("STR",result);	0
OPropertyMapIndexDefinitionTest	testCreateSingleValueByValue	assertEquals(result,12);	assertNotEquals(null,result);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getImageData(),loadedHunt.getImageData());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotNull(savedHunt);	1
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().equals(loadedHunt.getName()));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertEquals(savedHunt.getId(),loadedHunt.getId());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotSame(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().contains("STR"));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertTrue(savedHunt.getName().startsWith("STR"));	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertNotEquals(savedHunt,loadedHunt);	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertSame(savedHunt.getName(),loadedHunt.getName());	0
OObjectBinaryDataStorageTest	testSaveAndLoad_BinaryFieldsSimpleRecordMapping	assertNotNull(savedHunt);	assertFalse(savedHunt.getName().isEmpty());	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertEquals("STR",name);	0
ODropSequenceStatementExecutionTest	testPlain	assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));	assertTrue(name.startsWith("STR"));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotEquals(0,compositeKey.compareTo(anotherCompositeKey));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)!=0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.compareTo(anotherCompositeKey)<0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertFalse(compositeKey.compareTo(anotherCompositeKey)>0);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotNull(compositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertNotSame(compositeKey,anotherCompositeKey);	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertSame(compositeKey.getClass(),anotherCompositeKey.getClass());	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.getKeys().contains("STR"));	0
OCompositeKeyTest	testCompareToLT	assertEquals(compositeKey.compareTo(anotherCompositeKey),-1);	assertTrue(compositeKey.getKeys().size()==2);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotNull(next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals((Object)0,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotSame(next.field("STR"),null);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertSame(next.field("STR"),next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue(true);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertFalse(false);	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertNotEquals((Object)5,next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialMiscFunctionsTest	testStContainsPoint	assertEquals(true,next.field("STR"));	assertEquals(true,next.field("STR"));	1
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(index.getSize()>0);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(3,index.getSize());	1
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertFalse(index.getConfiguration().isEmpty());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertEquals(8,index.getClusters().size());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(0,index.getClusters().size());	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotSame(rome,london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertTrue(rome!=london);	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertSame(rome,db.load(rome.getIdentity()));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(rome.field("STR"),london.field("STR"));	0
LuceneSpatialTxPointTest	testIndexingComplexUpdateTxPoint	assertEquals(3,index.getSize());	assertNotEquals(rome.field("STR"),london.field("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertEquals(result,compositeIndex);	1
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotNull(result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertNotSame(compositeIndex,result);	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertSame(OCompositeIndexDefinition.class,result.getClass());	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertTrue(result.toString().contains("STR"));	0
OCompositeIndexDefinitionTest	testIndexReload	assertEquals(result,compositeIndex);	assertFalse(result.getClass().getSimpleName().isEmpty());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(f1);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertTrue(f1.getData().remaining()>0);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertEquals(1024,buf.capacity());	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotEquals(frame1.length,frame2.length);	0
MPEGESTest	testES	assertArrayEquals(frame1,NIOUtils.toArray(f1.getData()));	assertNotNull(buf.array());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(copied.size()>0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotNull(copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list,copied);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertEquals(list.size(),copied.size());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertTrue(list.stream().allMatch(copied::contains));	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotEquals(list.size(),0);	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertFalse(copied.isEmpty());	0
AsCollectionCopyTest	testAsCollectionCopy	assertEquals(2,copied.size());	assertNotSame(list.getClass(),copied.getClass());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	1
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().equalsIgnoreCase("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals(0,protocol0.getProvidedProtocol().length());	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(0,protocol0.getProvidedProtocol().indexOf("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(!protocol0.getProvidedProtocol().contains("STR"));	0
ProtocolTest	testToString	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals(0,protocol0.getProvidedProtocol().compareToIgnoreCase("STR"));	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(server);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1337,server.getAddress().getPort());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertTrue(webSocketCollection.isEmpty());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertEquals(1,draftCollection.size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(0,draftCollection.size());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotSame(draftCollection,webSocketCollection);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotEquals(0,inetAddress.getPort());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertSame(InetSocketAddress.class,inetAddress.getClass());	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotSame(server,draftCollection);	0
WebSocketServerTest	testGetDrafts	assertEquals(1,server.getDraft().size());	assertNotNull(inetAddress.getAddress());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(!macAddress.toString().isEmpty());	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR")||macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>5);	0
MacAddressTest	testAddressNormalizedSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.startsWith("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(sample1);	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotEquals(0,sample1.length());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(sample1.isEmpty());	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.contains("STR"));	0
CEFParserTest	validStringMessageWithoutTZWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(455,sample1.length());	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertTrue(expected==actual||(expected!=null&&expected.equals(actual)));	0
SubStatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(actual.size()==expected.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertNotSame(expected,actual);	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertTrue(expected.equals(actual)||actual.containsAll(expected));	0
ActivityDefinitionTest	testGetCorrectResponsesPattern	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(1D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(4.56).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(5.78).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(9.33).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(15.05).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("тригривнинульдваединицепустоеединицапустоеединицапустоеединицепустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустоеедин  ицапустоеединицапустоеединицапустоеединицапустоеединицапустоеединицапустое",moneyToStrUAHRUS.convert(3.012).replaceAll("\\s+",""));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(4.34).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(9.28).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(13.47).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(5.50).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(V_300D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotNull(moneyToStrUSD.convert(V_300D));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(V_300D));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotSame("STR",moneyToStrUSD.convert(V_300D));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSD.convert(V_300D).startsWith("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertFalse(moneyToStrUSD.convert(V_300D).isEmpty());	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals("STR",moneyToStrUSD.convert(V_300D));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertTrue(moneyToStrUSD.convert(V_300D).contains("STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(V_300D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkUSDUKR	assertEquals("STR",moneyToStrUSD.convert(V_300D));	assertNotEquals(null,moneyToStrUSD.convert(V_300D));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor());	1
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(this.mockBatchPollProcessor,this.poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertSame(this.poller.getBatchPollProcessor().getClass(),BatchPollProcessor.class);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor().getClass().getName().contains("STR"));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotSame(this.mockObjectQueryPreparer,this.poller.getBatchPollProcessor().getObjectQueryPreparer());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor().hashCode()!=0);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertNotNull(this.poller.getBatchPollProcessor().getObjectQueryPreparer());	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor().hashCode()>0);	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertFalse(this.poller.getBatchPollProcessor().equals(null));	0
JmxAttributePollerTest	testGetSetBatchPollProcessor	assertNotNull(this.poller.getBatchPollProcessor());	assertTrue(this.poller.getBatchPollProcessor()!=null);	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").orderBy("STR").toString());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	1
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().isEmpty());	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals(1,sql.toString().split("STR").length);	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals(true,!sql.toString().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotSame(0,sql.toString().indexOf("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	0
TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals(-1,sql.toString().indexOf("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getIp());	1
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals(1111,btUrl.getPort());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getProperties().containsKey("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProperties().get("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertFalse(btUrl.getProperties().isEmpty());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertNotEquals(0,btUrl.getUniqueKey().length());	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(btUrl.getUniqueKey().startsWith("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertTrue(String.valueOf(btUrl.getProtocol()).equals("STR"));	0
RpcAddressParserTest	testParserWithProtocol	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getProperties().get("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotNull(props);	1
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertNotEquals(1,props.entrySet().size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertSame(0,props.size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertEquals(0,props.stringPropertyNames().size());	0
SpringBootUtilTest	testNonExistentYamlToPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client.getConnection(url,1000));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull("STR"+client.getConnection(url,1000),client.getConnection(url,1000));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,url.getConnectTimeout());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.getConnectTimeout()>=1000);	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.toString().contains("STR")||url.toString().contains("STR")||url.toString().contains("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals("STR",url.getIp());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(2014,url.getPort());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals("STR",url.getProtocol());	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.toString().contains("STR")&&url.toString().contains("STR"));	0
ReconnectManagerTest	testCancelReConnection	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(url.getVersion()==1.0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>=0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(-1,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotEquals(0,time);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotNull(channel);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end>start);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(end-start>0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertEquals(1,countDownLatch.getCount());	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(start,end);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertTrue(time>0);	0
ThreadLocalArriveTimeHolderTest	testMultiThread	assertTrue(time>=start);	assertNotSame(channel,null);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.isEmpty(),actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertSame(expected.size(),actual.size());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertFalse(expected.isEmpty()&&actual.isEmpty());	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertNotNull(expected);	0
SubStatementTest	testSetAttachments	assertNotNull(actual);	assertTrue(expected.size()>0&&actual.size()>0);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testTerminated	assertNotNull(actual);	assertTrue(actual.getId().contains("STR"));	0
VerbsTest	testTerminated	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotNull(actual.getDisplay());	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotSame(Verbs.completed(),actual);	0
VerbsTest	testTerminated	assertNotNull(actual);	assertFalse("STR".equals(actual.getId()));	0
VerbsTest	testTerminated	assertNotNull(actual);	assertNotSame(Verbs.responded(),actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertSame(expected,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(IRI,actual);	0
ResultTest	testSetResponse	assertNotNull(actual);	assertEquals(expected.length(),actual.length());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ResultTest	testSetResponse	assertNotNull(actual);	assertNotSame(result,result.getExtensions());	0
ResultTest	testSetResponse	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved.getProperty("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().toString().contains("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().isValid());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertEquals("STR",saved.getClassName());	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.containsField("STR"));	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertNotNull(saved.field("STR"));	1
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().getClusterId()>0);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getVersion()>0);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertTrue(saved.getIdentity().getClusterPosition()>=0);	0
DefaultValueTest	testDefaultValueFromJson	assertNotNull(saved.field("STR"));	assertFalse(saved.containsField("STR"));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().contains(retrievedChild));	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotNull(retrievedChild.getId());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(parent,retrievedParent);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals("STR",retrievedChild.getName());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotSame(child,retrievedChild);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertEquals(1,retrievedParent.getFriends().size());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertFalse(retrievedParent.getFriends().isEmpty());	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertTrue(retrievedParent.getFriends().size()>0);	0
SimpleParentChildTest	testWithSets	assertEquals("STR",retrievedParent.getFriends().iterator().next().getName());	assertNotEquals(0,retrievedParent.getFriends().size());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertFalse(result.hasNext());	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotNull(result);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(script.length()>0);	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertNotSame(0,script.indexOf("STR"));	0
OScriptExecutionTest	testLazyExecutionPlanning	assertEquals("STR",item.getProperty("STR"));	assertTrue(result.getExecutionPlan().isPresent());	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotNull(result);	1
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertTrue(currentValue.equals("STR")||currentValue.equals("STR"));	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertEquals("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotSame("STR",currentValue);	0
OAlterPropertyStatementExecutionTest	testSetCustom	assertNotNull(result);	assertNotEquals("STR",currentValue);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotNull(docs);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(!docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotEquals(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.isEmpty());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertEquals(1,docs.size());	1
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertNotSame(0,docs.size());	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs.contains(null));	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertTrue(docs.size()>0);	0
LuceneMixIndexTest	testMixCompositeQuery	assertEquals(1,docs.size());	assertFalse(docs==null);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")==10);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(Integer.valueOf(0),durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(null,durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")<=Integer.MAX_VALUE);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertEquals((long)7200,(long)durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotEquals(Integer.valueOf(100),durationSeconds("STR"));	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertTrue(durationSeconds("STR")>=0);	0
GoTimeUtilTest	testConversion	assertEquals(newInteger(23),durationSeconds("STR"));	assertNotNull(durationSeconds("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&!filterResult.isEmpty());	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals(null,filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertFalse(filterResult==null);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllAllowed	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertFalse(filterResult.isEmpty());	0
HostURLFilterTest	testAllForbidden	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertNotNull(fields);	0
BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR",fields.get("STR"));	assertEquals(1,fields.size());	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotNull(parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed.getTime()>0);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertEquals(time,parsed.getTime());	1
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals(null,parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotSame(time,parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertSame(format,TimestampParser.EPOCH_MILLIS);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotEquals("STR",parsed);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertNotSame(TimestampParser.DEFAULT_FORMAT,format);	0
TimestampParserTest	testParseEpochMillis	assertEquals(time,parsed.getTime());	assertTrue(parsed!=null&&parsed.getTime()>0);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri);	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.toString().startsWith("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.toASCIIString());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(0,uri.getPort());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertEquals("STR",uri.getScheme());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.getPath().isEmpty());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotEquals(-1,uri.getHost().indexOf("STR"));	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertTrue(uri.isAbsolute());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertNotNull(uri.getAuthority());	0
UrlUtilsTest	testValidUrlToUri	assertEquals(newURI("STR"),uri);	assertFalse(uri.isOpaque());	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(34,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(15,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length!=0);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(0,res.length);	0
H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>10);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(atts.isEmpty());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(atts.size()>0);	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.size());	1
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(Method.class,atts.entrySet().iterator().next().getValue().getClass());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(0,atts.size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.entrySet().size());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(atts.entrySet());	0
MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(2,atts.keySet().size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.processor.getLog());	1
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(Logger.class.isInstance(this.processor.getLog()));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.mockLogger);	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(2,this.attributeSetters001.size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(!this.polledObjects.isEmpty());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(this.queryAttributeMap.containsKey(this.objectName001));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertTrue(this.resultAttributeMap.containsKey(this.objectName001));	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertEquals(2,this.attributeSetters001.size());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertFalse(this.polledObjects.isEmpty());	0
BatchPollProcessorTest	testGetSetLog	assertNotNull(this.processor.getLog());	assertNotNull(this.mockObjectQueryInfo001);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotNull(uuid);	1
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertEquals(36,uuid.length());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.matches("STR"));	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame("STR",uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotEquals(null,uuid);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertNotSame(uuid,newUnsecureUuidString());	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertTrue(uuid.length()>0);	0
UuidUtilTest	testNewUnsecureUuidString	assertNotNull(uuid);	assertFalse(uuid.isEmpty());	0
OSelectStatementExecutionTest	testFetchFromSingleRid	assertTrue(result.hasNext());	assertFalse(result.hasNext());	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertNotEquals(0,res.length);	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertTrue(embedded.containsField("STR"));	0
ODocumentSchemalessSerializationTest	testSimpleEmbeddedDoc	assertEquals(document.fields(),extr.fields());	assertEquals(2,embedded.fields());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotNull(qResult);	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertEquals(2,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertNotSame(0,qResult.getExecutionPlan().toString().length());	0
OMatchStatementExecutionNewTest	testWhileArrows	assertEquals(3,size(qResult));	assertTrue(qResult.hasNext()&&qResult.stream().count()>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotNull(index);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertFalse(index.getDefinition().getFields().isEmpty());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNull(db.getMetadata().getIndexManager().getIndex("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(0,doc.getPropertyNames().size());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.countClass("STR")>0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.getIdentity().isValid());	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertNotEquals(0,db.countClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(db.countClass("STR")>=0);	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertEquals(1,db.countClass("STR"));	0
LuceneNullTest	testNotNullChangeToNullWithLists	assertEquals(index.getSize(),1);	assertTrue(doc.getIdentity().toString().startsWith("STR"));	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertEquals(true,manual!=null);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotNull(manual);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(db.getMetadata().getIndexManager().existsIndex("STR"));	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotSame(0,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()>=0);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotSame(-1,manual.getSize());	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertTrue(manual.getSize()!=-1);	0
LuceneManualIndexTest	testManualIndex	assertEquals(manual.getSize(),4);	assertNotEquals(-1,manual.getSize());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertEquals("STR",filter.toString());	0
OFilterOptimizerTest	testOptimizePartialOptimizationMethod	assertEquals(filter.getRootCondition().toString(),"STR");	assertNotNull(searchResult);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>=0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertFalse(res.size()==0);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()>0&&res.size()<=100);	0
OETLCSVExtractorTest	testQuotedEmptyString	assertFalse(res.isEmpty());	assertTrue(res.size()<Integer.MAX_VALUE);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(100,addState.getOperationCount());	1
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertFalse(addState.isEmpty());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getTotalThroughput()>0.0);	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotNull(addState.toString());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(450.0d,addState.getIntervalLatencyAvgNanos());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(0,addState.getIntervalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotSame(400,addState.getOperationCount());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertTrue(addState.getIntervalLatencyMaxNanos()>addState.getIntervalLatency999PercentileNanos());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertNotEquals(5.0,addState.getTotalThroughput());	0
PerformanceStatsTest	testAdd_withoutAddOperationCountAndThroughput_toEmptyState	assertEquals(100,addState.getOperationCount());	assertEquals(500,addState.getIntervalLatencyMaxNanos());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotNull(promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertTrue(promise.hasAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotEquals(null,promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame("STR",promise.getAnswer());	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertFalse(promise.hasAnswer()==false);	0
ScriptExecutorTest	javascript	assertTrue(promise.getAnswer()instanceofString);	assertNotSame(promise.getAnswer(),"STR");	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(testObject,"STR","STR"));	1
PropertyBindingSupport_bind0_NumericalTest	bind_Integer	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertEquals("STR",config.getString("STR"));	1
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").endsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotNull(config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertFalse(config.getString("STR").isEmpty());	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").contains("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotSame("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertTrue(config.getString("STR").startsWith("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	removes_underscores_from_keys	assertEquals("STR",config.getString("STR"));	assertNotEquals(config.getString("STR"),"STR");	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertSame(expected,actual);	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotNull(actual.get(0));	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.get(0).getId(),actual.get(0).getId());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ContentActivitiesTest	testSetOther	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertSame(expected,actual);	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.toString().contains(expected.toString()));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals(expected.getId(),actual.getId());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertTrue(actual.getId().startsWith("STR"));	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNotSame(expected.getId(),actual.getId(),"STR");	0
StatementTest	testSetVerb	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
StatementTest	testSetVerb	assertNotNull(actual);	assertNull(expected.getDisplay());	0
ResultTest	testSetScore	assertNotNull(actual);	assertNotNull(actual);	1
ResultTest	testSetScore	assertNotNull(actual);	assertSame(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertEquals(score,actual);	0
ResultTest	testSetScore	assertNotNull(actual);	assertFalse(result.getScore()==null);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertSame(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotNull(actual);	1
ActivityStateTest	testSetState	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual.toString().contains(expected.toString()));	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertTrue(actual!=null);	0
ActivityStateTest	testSetState	assertNotNull(actual);	assertArrayEquals(expected.toString().toCharArray(),actual.toString().toCharArray());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(statements,a.getXapiStatements());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getResponseMessage().equals(RESPONSE_MESSAGE));	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotNull(a.getAttachment());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertFalse(a.getAttachment().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getResponseMessage()!=null&&!a.getResponseMessage().isEmpty());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertEquals(RESPONSE_MESSAGE,a.getResponseMessage());	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertTrue(a.getXapiStatements().getStatements().size()>0);	0
AttachmentResultTest	testSetXapiStatements	assertNotNull(a);	assertNotSame(0,a.getXapiStatements().getStatements().size());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equals("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotNull(actual);	1
GroupTest	testGetObjectType	assertNotNull(actual);	assertNotSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertSame("STR",actual);	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertEquals("STR",actual.trim());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.equalsIgnoreCase("STR"));	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
GroupTest	testGetObjectType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.isSolved());	1
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(!p.isSolved());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(2,p.getDistanceToGoal());	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertNotNull(p);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertEquals(true,p.getDistanceToGoal()>=0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertFalse(p.getDistanceToGoal()<0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved()||p.getDistanceToGoal()!=0);	0
PuzzleTest	puzzle_not_solved	assertFalse(p.isSolved());	assertTrue(p.isSolved()==(p.getDistanceToGoal()==0));	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertTrue(s.getActualCost()>=0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotNull(s);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(10,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertEquals(0,s.getActualCost());	1
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(5,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertFalse(s.getActualCost()<0);	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertSame(0,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotSame(null,s.getActualCost());	0
PuzzleStateTest	actual_cost	assertEquals(0,s.getActualCost());	assertNotEquals(-1,s.getActualCost());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertArrayEquals(message,frame.getPayloadData().array());	1
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotNull(frame.getPayloadData());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().remaining()>0);	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertFalse(frame.getPayloadData().isDirect());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(170,frame.getPayloadData().capacity());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotEquals(0,frame.getPayloadData().limit());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertNotSame(ByteBuffer.allocate(100),frame.getPayloadData());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasArray());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertEquals(170,frame.getPayloadData().remaining());	0
PerMessageDeflateExtensionTest	testDecodeFrame	assertArrayEquals(message,frame.getPayloadData().array());	assertTrue(frame.getPayloadData().hasRemaining());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR",value);	1
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(annotation);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(value!=null&&!value.isEmpty());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(annotation.value());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(annotation.annotationType()==Plog.class);	0
OPLogTest	testDescription	assertEquals("STR",value);	assertSame(Plog.class,annotation.annotationType());	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.startsWith("STR"));	0
OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(value.endsWith("STR"));	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source2.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source2.hashCode());	1
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source1.hashCode()==source1.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),source3.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source2.hashCode()==source2.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotNull(source1.hashCode());	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertNotEquals(source1.hashCode(),0);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertTrue(source3.hashCode()!=0);	0
SourceTest	testHashCode	assertTrue(source1.hashCode()==source2.hashCode());	assertEquals(source1.hashCode(),source1.hashCode());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertTrue(props.isEmpty());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNull(props.getProperty("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotNull(props.getProperty("STR"),"STR");	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertFalse(props.containsKey("STR"));	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertEquals(0,props.stringPropertyNames().size());	0
SpringBootUtilTest	testNonExistentPropertiesParsing	assertNotNull(props);	assertNotEquals(10,props.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(1,schemas.size());	1
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().allMatch(schema->schema.getElements().size()>0));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.get(0).getElements().size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.stream().noneMatch(schema->schema.getElements().isEmpty()));	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(2,schemas.stream().mapToInt(schema->schema.getElements().size()).sum());	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(expected,actualPlain);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(markup.markdown("STR").length()>0);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals(expected,actual);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR",markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(result);	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(originalText,markup.markdown("STR"));	0
LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR",actualResult.trim());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getTokenBased());	1
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNotNull(tokenBytes);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals(1,conn.getId());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.getData()==null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getId()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertNull(conn.getDatabase());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn!=null);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertEquals("STR"+OClientConnectionTest.class.getSimpleName(),"STR"+db.getName());	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertTrue(conn.getSince()>0);	0
OClientConnectionTest	testValidToken	assertTrue(conn.getTokenBased());	assertFalse(conn.isDisconnectOnAfter());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(addedKeys.containsKey(12));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.size(),keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(addedKeys,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventAddKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(42));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	1
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(Arrays.asList(result).contains(OType.STRING));	0
OPropertyMapIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(OType.INTEGER,result[0]);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getProperty("STR")!=null);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(!item.getPropertyNames().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item.getProperty("STR"));	1
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().size()>0);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getProperty("STR").toString().isEmpty());	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertNotNull(item);	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertTrue(item.getPropertyNames().contains("STR"));	0
RemoteQuerySupportTest	testQueryEmbedded	assertNotNull(item.getProperty("STR"));	assertFalse(item.getPropertyNames().isEmpty());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(stringSerializer.getObjectSize(OBJECT),buffer.remaining()-serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.capacity()>=stringSerializer.getObjectSize(OBJECT)+serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(walChanges);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(data.length>0);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,buffer.remaining());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertTrue(buffer.isDirect());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertEquals(data.length,buffer.remaining()-serializationOffset);	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotEquals(0,buffer.capacity());	0
OUTFSerializerTest	testSerializeWALChanges	assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),stringSerializer.getObjectSize(OBJECT));	assertNotNull(buffer);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(nest1);	1
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotNull(base1);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(base1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc1.containsField("STR"));	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertEquals(2,((ORecordLazySet)nest1.field("STR")).size());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertNotEquals(doc1,doc2);	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertFalse(((ORecordLazySet)nest1.field("STR")).isEmpty());	0
CollectionOfLinkInNestedDocumentTest	nestedLinkSet	assertNotNull(nest1);	assertTrue(doc2.containsField("STR"));	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>=0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(-1,customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotNull(customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(0,customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertFalse(customer.getDefaultClusterId()<0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()>0);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertEquals(25,customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotEquals(0,customer.getDefaultClusterId());	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertTrue(customer.getDefaultClusterId()<=100);	0
SQLMoveVertexCommandTest	testMoveSingleRecordToAnotherClass	assertEquals(doc.getIdentity().getClusterId(),customer.getDefaultClusterId());	assertNotSame(-1,customer.getDefaultClusterId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getJobId().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.getBuildUrl().trim().isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotNull(serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertFalse(!(serviceMock.isSelected()));	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertEquals(1,Arrays.asList(serviceMock).size());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",mojo.serviceName);	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertSame(logMock,mojo.getLog());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(!Arrays.asList(serviceMock).isEmpty());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertNotEquals("STR",serviceMock.getJobId());	0
EnvironmentTest	testSetupWithIncompleteJob	assertEquals("STR",mojo.serviceName);	assertTrue(serviceMock.isSelected());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotNull(polled001);	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertNotNull(poller.getBatchPollProcessor());	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(this.mockMBeanAccessConnectionFactory.getTargetDescription().equals(accessConnectionFactoryDesc));	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertTrue(poller.getPolledObjects().contains(polled001));	0
JmxAttributePollerTest	testGetSetScheduler	assertNull(this.poller.getScheduler());	assertEquals(2,polledObjects.size());	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty(null));	1
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testNullIsEmpty	assertTrue(StringUtils.isEmpty(null));	assertFalse(StringUtils.isNonZero("STR"));	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(4,p.getDistanceToGoal());	1
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertEquals(4,p.getDistanceToGoal());	1
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(0,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(10,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotNull(p);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()!=-1);	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertNotEquals(5,p.getDistanceToGoal());	0
PuzzleTest	sum_of_cell_distances_is_distance_to_goal	assertEquals(4,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()!=Integer.MAX_VALUE);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(workingDirFile.exists());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNull(simulatorProperties.get("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertEquals(7,simulatorHome.listFiles().length);	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotEquals(0,simulatorProperties.hashCode());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorProperties.toString().contains("STR"));	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertTrue(simulatorHome.isDirectory());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertFalse(simulatorProperties.toString().isEmpty());	0
SimulatorPropertiesTest	testLoad_justKey	assertTrue(simulatorProperties.get("STR").isEmpty());	assertNotEquals("STR",simulatorProperties.toString());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertEquals(1000,connection.getUrl().getConnectTimeout());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.getUrl().getOriginUrl().startsWith("STR"));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertSame(connection,client.getConnection(url,1000));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection==client.getConnection(url,1000));	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(client);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotEquals(0,connection.getUrl().getPort());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertFalse(connection.getUrl().getProperties().isEmpty());	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertNotNull(connection);	0
ReconnectManagerTest	testReconnectionByUserSetting	assertEquals(0,clientDisConnectProcessor.getDisConnectTimes());	assertTrue(connection.isFine());	0
DevUtilTest	testGeneratedConfigFiles	assertTrue(util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().indexOf(INVALID_LENGTH)!=-1);	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressUnderscoreSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertEquals(0,comparison);	1
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison==0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertSame(0,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertFalse(comparison!=0);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotNull(macAddress);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotSame(comparison,1);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertNotEquals(-1,comparison);	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertArrayEquals(macAddress.getBytes(),macAddress.getBytes());	0
MacAddressTest	testAddressCompareToEqual	assertEquals(0,comparison);	assertTrue(comparison>=0);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotNull(actual);	1
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertFalse(actual.endsWith("STR"));	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertEquals("STR",actual.toLowerCase());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertSame(String.class,actual.getClass());	0
ActivityProfileTest	testGetActivityId	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals("STR",helloClass.getName());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getDeclaredMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getMethods().length>0);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(0,helloClass.getDeclaredMethods().length);	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(0,res.size());	1
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(helloClass.getSimpleName().contains("STR"));	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Object.class,sourceCode.getClass().getSuperclass());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(-1,res.size());	0
InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.isRecognized());	1
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.getBestWordform().getValue(AttributeNames.i_Lemma).startsWith("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().contains("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertNotNull(stum.toString());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().length()>0);	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertFalse(stum.toString().isEmpty());	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().matches("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().matches("STR"));	0
MorphologyTest	tuStum	assertTrue(stum.isRecognized());	assertTrue(stum.toString().endsWith("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertFalse(origMap.isEmpty());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsKey("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertTrue(origMap.containsValue("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(3,origMap.size());	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals(expected,origMap);	1
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MapUtilTest	testMergeIfAbsent	assertEquals(expected,origMap);	assertNotEquals("STR",origMap.get("STR"));	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotNull(macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(0,macAddress.hashCode());	1
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotSame(0,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()!=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>=0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(31,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()>0);	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotSame(-1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertNotEquals(-1,macAddress.hashCode());	0
MacAddressTest	testAddressHashCode	assertNotEquals(0,macAddress.hashCode());	assertTrue(macAddress.hashCode()<Integer.MAX_VALUE);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotNull(multiKey);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.equals(multiKey));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.equals("STR"));	1
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey.hashCode(),0);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(multiKey,multiKey);	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertEquals(multiKey.hashCode(),multiKey.hashCode());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertFalse(multiKey.keys.isEmpty());	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotSame(multiKey,newOMultiKey(Collections.singletonList("STR")));	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertNotEquals(multiKey.toString(),"STR");	0
OMultiKeyTest	testEqualsDifferentClass	assertFalse(multiKey.equals("STR"));	assertTrue(multiKey.hashCode()>=0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.offset==0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotNull(bytesContainer);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(0,bytesContainer.offset);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotEquals(-1,bytesContainer.hashCode());	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.copy().bytes!=bytesContainer.bytes);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertEquals(64,bytesContainer.copy().bytes.length);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertTrue(bytesContainer.offset>=0);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertFalse(bytesContainer.bytes==null);	0
BytesContainerTest	testSimple	assertNotNull(bytesContainer.bytes);	assertNotSame(bytesContainer,bytesContainer.copy());	0
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertEquals(19,results.size());	1
OCommandExecutorSQLSelectTest	testSkipOrdered	assertEquals(19,results.size());	assertTrue(results.size()>0);	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	1
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertEquals(true,qResult.hasNext());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult.next());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotEquals(0,qResult.stream().count());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.stream().findFirst().isPresent());	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.stream().allMatch(item->item.getProperty("STR")==null));	0
OMatchStatementExecutionNewTest	testFriendsOfFriendsArrows	assertTrue(qResult.hasNext());	assertNotSame(0,qResult.stream().count());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue((Boolean)next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(execute.size()>0);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(1,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotNull(next);	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(db.getClass().getSimpleName().isEmpty());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals(0,execute.size());	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertEquals(next.field("STR"),true);	1
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertFalse(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertTrue(next.field("STR"));	0
LuceneSpatialWithinTest	testWithinNoIndex	assertEquals(next.field("STR"),true);	assertNotEquals(null,next.field("STR"));	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionUsingSystemProperties	assertSame(result,this.mockJmxMbeanConnection);	assertNotNull(result);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,this.factory.getJmxServiceUrlFactory());	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(this.factory.getJmxServiceUrlFactory()!=null);	0
JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(mockJmxServiceUrlFactory,this.factory.getJmxServiceUrlFactory());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals("STR",result);	1
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotNull(result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertNotSame("STR",result);	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue("STR"+result,result.contains("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertEquals(12,result.length());	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertSame(-1,result.indexOf("STR"));	0
ParameterReplacerTest	testReplaceObjectNameParameters	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(target,objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(target==objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotNull(objectQueryInfo.getTarget());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertSame(target,objectQueryInfo.getTarget());	1
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNotSame(target,objectQueryInfo.getAttributeSetters());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertEquals(oname,objectQueryInfo.getObjectName());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeSetters().containsKey("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertFalse(setters.isEmpty());	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertNull(objectQueryInfo.getAttributeSetters().get("STR"));	0
ObjectQueryInfoTest	testImmutableQueryInfo	assertSame(target,objectQueryInfo.getTarget());	assertTrue(objectQueryInfo.getAttributeSetters().containsValue(null));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(2,attributeList.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(attributeSetters.containsKey("STR"));	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.injector);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertTrue(this.attributeSetters.size()>0);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(attributeSetters.isEmpty());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertSame(this.target,target);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertNotNull(this.mockLogger);	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(5,attributeSetters.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertEquals(2,this.attributeList.size());	0
AttributeInjectorTest	testCopyOutWithLongForIntFields	assertEquals(17,this.target.intValue);	assertFalse(this.attributeSetters.isEmpty());	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(this.poller.getLog());	1
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockLogger);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertTrue(poller.getLog()!=null);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockBatchPollProcessor);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockObjectQueryPreparer);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockMBeanAccessConnectionFactory);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockAccessConnection);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(mockAttributeInjector);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotNull(processes);	0
JmxAttributePollerTest	testGetSetLog	assertNotNull(this.poller.getLog());	assertNotSame(mockTestHooks,poller.getLog());	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(same,same);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertEquals(different,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotEquals(first,different);	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertTrue(first.equals(same));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertFalse(first.equals(different));	0
ResourceUtilTest	simple	assertTrue(ResourceUtil.jsonEquals(first,same));	assertNotSame(first,different);	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	1
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.nodes());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(1,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotSame(Arrays.asList("STR","STR","STR"),graph.nodes());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.nodes().contains("STR"));	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.nodes().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	0
ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	1
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertFalse(graph.nodes().isEmpty());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertEquals(3,graph.nodes().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.nodes().contains("STR"));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().contains(edge("STR","STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(0,graph.edges().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotNull(graph);	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().stream().anyMatch(edge->edge.getFrom().equals("STR")));	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertNotEquals(0,graph.nodes().size());	0
ADiGraphTest	testTree	assertFalse(graph.hasCycles());	assertTrue(graph.edges().stream().anyMatch(edge->edge.getTo().equals("STR")));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertFalse(isMinVersion("STR",null));	1
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(false,isMinVersion("STR",null));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(true,isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotEquals(false,isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertNotEquals(false,isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertEquals(true,isMinVersion("STR","STR"));	0
BuildInfoUtilsTest	testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse	assertFalse(isMinVersion("STR",null));	assertTrue(isMinVersion("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(!Wildcards.matches(null,"STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertTrue(Wildcards.matches("STR","STR"));	0
WildcardsTest	testMatchesAgainstNull	assertFalse(Wildcards.matches(null,"STR"));	assertFalse(Wildcards.matches("STR","STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotNull(draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertEquals("STR",draft_6455.toString());	1
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(draft_6455.toString().contains("STR"));	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotEquals("STR",draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertTrue(!draft_6455.toString().isEmpty());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotSame(super.toString(),draft_6455.toString());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertFalse(draft_6455.toString().isEmpty());	0
Draft_6455Test	testToString	assertEquals("STR",draft_6455.toString());	assertNotSame(draft_6455.toString(),draft_6455.toString());	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(b);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(b.cardinality()>0);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(b.length()>0);	0
CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(!b.isEmpty());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals("STR",Label.markdown("STR").value());	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(12,be.headerSize);	1
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertEquals(165,be.headerSize);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotNull(be);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,sizes.length);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertTrue(sizes.length>0);	0
MkvBlockTest	testReadingXiphV2	assertEquals(12,be.headerSize);	assertNotEquals(0,be.dataLen);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	1
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertEquals(1,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotNull(w.wordforms);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertNotSame(0,w.wordforms.size());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=0);	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms!=null&&!w.wordforms.isEmpty());	0
MorphologyTest	rakiens	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=1);	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(matcher.find());	1
SmpTest	find	assertTrue(matcher.find());	assertFalse(matcher.matches());	0
SmpTest	find	assertTrue(matcher.find());	assertNotNull(matcher);	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(0,pattern.pattern().length());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(pattern.pattern().contains("STR"));	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(17,matcher.regionEnd()-matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertNotEquals(5,matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertTrue(pattern.flags().contains(PatternFlags.ADVANCED));	0
SmpTest	find	assertTrue(matcher.find());	assertNotSame(0,matcher.regionEnd()-matcher.regionStart());	0
SmpTest	find	assertTrue(matcher.find());	assertEquals(8,matcher.regionEnd()/2);	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(100D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertEquals("STR",moneyToStrPER1000.convert(100D).replaceAll("STR","STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertTrue(moneyToStrPER1000.convert(100D).contains("STR"));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotNull(moneyToStrPER1000.convert(100D));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(100D));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotSame(moneyToStrPER1000.convert(100D),moneyToStrPER1000.convert(200D));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals("STR",moneyToStrPER1000.convert(123.456D));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertFalse(moneyToStrPER1000.convert(50.75D).isEmpty());	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotSame(moneyToStrPER1000.convert(123.456D),moneyToStrPER1000.convert(789.123D));	0
MoneyToStrTest	checkPER1000	assertEquals("STR",moneyToStrPER1000.convert(12.346));	assertNotEquals(0,moneyToStrPER1000.convert(99.99D).length());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertTrue(macAddress.isMulticast());	1
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertFalse(macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertEquals(false,macAddress.isLocal());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(0,macAddress.hashCode());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotNull(macAddress.getBytes());	0
MacAddressTest	testAddressMulticast	assertTrue(macAddress.isMulticast());	assertNotEquals(-1,macAddress.toString().indexOf("STR"));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(25),squareRoot.apply(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(squareRoot.isDefinedAt(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Math.sqrt(9),squareRoot.apply(9));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertFalse(squareRoot.isDefinedAt(0));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(0,squareRoot.apply(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNull(squareRoot.apply(-1));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotNull(squareRoot.apply(25));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertTrue(Math.abs(squareRoot.apply(144)-12)<0.0001);	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertNotEquals(5,squareRoot.apply(16));	0
ACollectionHelperTest	testCollect	assertEquals(4,result.size());	assertEquals(Double.POSITIVE_INFINITY,squareRoot.apply(Integer.MAX_VALUE));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.length()>0);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertNotEquals(null,result);	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.matches("STR"));	0
AJsonSerHelperTest	testNumber	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
OMatchStatementExecutionNewTest	testIndexedEdgeArrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertEquals(property,classA.getProperty("STR"));	1
AlterPropertyTest	testPropertyRenaming	assertEquals(property,classA.getProperty("STR"));	assertFalse(classA.getProperty("STR").isMandatory());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(expected,actual);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertSame(category,contextActivities.getCategory());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotSame(grouping,contextActivities.getCategory());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertEquals(category.size(),actual.size());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(actual.size()>0);	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotNull(actual);	1
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertTrue(!actual.isEmpty());	0
ContentActivitiesTest	testGetCategory	assertNotNull(actual);	assertNotSame(contextActivities.getGrouping(),category);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
AboutTest	testSetExtensions	assertNotNull(actual);	assertSame(expected,actual);	0
AboutTest	testSetExtensions	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(expected,actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertTrue(expected==actual);	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertNotNull(actual);	1
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(expected.hashCode(),actual.hashCode());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertSame(context,substatement.getContext());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertFalse(LANGUAGE.isEmpty());	0
SubStatementTest	testGetContext	assertNotNull(actual);	assertEquals(context.getLanguage(),actual.getLanguage());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotNull(actual);	1
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertTrue(expected.equals(actual));	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected,actual);	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertEquals(expected.toString(),actual.toString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertSame(expected.toASCIIString(),actual.toASCIIString());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertNotSame(expected.hashCode(),actual.hashCode());	0
AttachmentTest	testGetUsageType	assertNotNull(actual);	assertArrayEquals(expected.toASCIIString().toCharArray(),actual.toASCIIString().toCharArray());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertNotNull(actual);	1
StatementTest	testSetVersion	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertTrue(actual.contains("STR"));	0
StatementTest	testSetVersion	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementTest	testSetVersion	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props);	1
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertTrue(props.size()>0);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotNull(props.entrySet());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertFalse(props.isEmpty());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotSame(0,props.size());	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertEquals(true,props.size()>0);	0
ThorntailUtilTest	testReadThorntailPort	assertNotNull(props);	assertNotEquals(0,props.keySet().size());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	1
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(resourceAsStream!=null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertFalse(resourceAsStream==null);	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(0,keyStorePath.length());	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.startsWith("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertTrue(keyStorePath.contains("STR"));	0
LoadKeyStoreTest	loadKeyStoreFromResourcesWrongPassword	assertNotNull(resourceAsStream);	assertNotEquals(0,resourceAsStream.available());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()!=null);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_OTP,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(!response.getStatus().equals(ResponseStatus.BAD_SIGNATURE));	0
YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertEquals("STR",filterResult);	1
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotNull(filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult!=null&&filterResult.equals("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertFalse(filterResult==null);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.startsWith("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotSame("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertNotEquals("STR",filterResult);	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertTrue(filterResult.contains("STR"));	0
HostURLFilterTest	testWithinHostOnly	assertEquals("STR",filterResult);	assertSame("STR",filterResult);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(a.estimateSize(),computeSize);	1
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(computeSize>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertEquals(4,a.a.size());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(a.estimateSize(),0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotSame(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.computeSeekHeadSize()>=0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotEquals(0,computeSize);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertTrue(a.computeSeekHeadSize()>0);	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertFalse(a.a.isEmpty());	0
SeekHeadFactoryTest	testEdgeCasesWithFakeZ	assertEquals(a.estimateSize(),computeSize);	assertNotNull(a);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf1);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1!=null&&buf1.remaining()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.capacity()>0);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotEquals(buf1,buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertEquals(0,buf1.position());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotNull(buf2);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertNotSame(buf1,buf3);	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.capacity()>=buf2.capacity());	0
SegmentReaderTest	testToNextMarkerPartialVar1	assertEquals(ByteBuffer.wrap(bytes,0,8),buf1);	assertTrue(buf1.limit()>buf2.limit());	0
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNull(sourceLoader.load("STR"));	1
DirectorySourceLoaderTest	testMissingSourceFileFromDirectory	assertNull(sourceLoader.load("STR"));	assertNotNull(sourceLoader);	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(5,workerAddress(3,5).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(7,workerAddress(2,7).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertEquals(42,workerAddress(10,42).getAddressIndex());	0
SimulatorAddressTest	testGetAddressIndex_fromAgent	assertEquals(5,agentAddress(5).getAddressIndex());	assertNotEquals(-1,workerAddress(6,8).getAddressIndex());	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertEquals(2,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(0,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")==2);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(-1,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertTrue(cm.count("STR")>=0);	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(3,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(5,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotEquals(1,cm.count("STR"));	0
RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	assertEquals(2,cm.count(poolKey));	assertNotNull(cm.getAll("STR"));	0
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
WizardUtilsTest	testGetFileFromUrl_fromJarFile	assertNotNull(file);	assertNotNull(file);	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotNull(res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(0,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(!res.isEmpty());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertEquals(1,res.size());	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	1
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()>=0);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertNotEquals(null,res);	0
OETLCSVExtractorTest	testDoubleWithingQuotes	assertFalse(res.isEmpty());	assertTrue(res.size()!=0);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToRemove,removedKeys);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	1
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsValue(1));	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(keysToAdd.size(),keysToRemove.size());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.isEmpty());	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd,keysToRemove);	0
OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotSame(keysToAdd.size(),keysToRemove.size());	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName("STR")>=0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(-1,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertNotEquals(0,db.getClusterIdByName("STR"));	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName("STR")>0);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertTrue(db.getClusterIdByName("STR")>-1);	0
ODropClusterStatementExecutionTest	testDropClusterIfExists	assertTrue(db.getClusterIdByName(cluster)>0);	assertFalse(db.getClusterIdByName("STR")==0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getOperations().size(),1);	1
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(request.getOperations().isEmpty());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(0,request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()>0);	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(operations.size(),request.getOperations().size());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(operations,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotEquals(operations,request.getOperations());	0
OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotSame(operations.get(0),request.getOperations().get(0));	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertEquals(null,result);	0
OSQLFunctionAbsoluteValueTest	testEmpty	assertNull(result);	assertNull(result);	1
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals(pushRequestRead.getMonitorId(),10);	1
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotNull(channel);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(events.size()==3);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertTrue(pushRequestRead.getStatus()==OLiveQueryPushRequest.END);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(pushRequest.hashCode(),pushRequestRead.hashCode());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotSame(pushRequest,pushRequestRead);	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertEquals("STR",res.getProperty("STR"));	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertFalse(events.isEmpty());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotEquals(events.get(0).getEventType(),events.get(1).getEventType());	0
OLiveQueryMessagesTests	testLiveQueryPushRequest	assertEquals(pushRequestRead.getMonitorId(),10);	assertNotSame(res.getProperty("STR"),res.getProperty("STR"));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob1.getFriend()!=null);	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertFalse(ob1.equals(ob2));	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertEquals("STR",ob2.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotSame(ob1,ob2.getFriend());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotNull(ob1.getFriend());	1
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertNotEquals("STR",ob1.getName());	0
TestObjectWithDeletedLink	testDeletedLink	assertNotNull(ob1.getFriend());	assertTrue(ob2.getName().startsWith("STR"));	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(ORecordOperation.CREATED,operations.get(0).getType());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(operations.size()==1);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(executor);	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertFalse(operations.isEmpty());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotEquals(0,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertSame(ORecordOperation.CREATED,operations.get(0).getType());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertEquals(1,operations.size());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotSame(ORecordOperation.UPDATED,operations.get(0).getType());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertTrue(!operations.isEmpty());	0
OConnectionExecutorTransactionTest	testExecutionBeginTransaction	assertFalse(database.getTransaction().isActive());	assertNotNull(operations.get(0));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(jco.getRelease(),"STR");	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertEquals(result.get(0),"STR");	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertFalse(result.contains("STR")&&result.contains("STR")&&result.contains("STR"));	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(result.size(),0);	0
JavaCompilerOptionsTest	testRelease	assertEquals(3,result.size());	assertNotEquals(result.size(),1);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(3,result.size());	1
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR"));	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotNull(result);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertFalse(result.isEmpty());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertNotEquals(0,result.size());	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertEquals(4,result.size()+1);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.size()>=3);	0
JavaCompilerOptionsTest	testTarget	assertEquals(3,result.size());	assertTrue(result.contains("STR")||result.contains("STR")||result.contains("STR")||result.contains("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config);	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.getBoolean("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.getBoolean("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.getString("STR").equalsIgnoreCase("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals(22,(int)config.getInteger("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.getString("STR"));	0
YamlConfigLoaderTest	roundtrips	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.getString("STR"));	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a,b);	1
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a.getHistory(),b.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(false,a.isSolution());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(b.getActualCost()>=0);	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.getBranches().isEmpty());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(a.getActualCost()!=b.getActualCost());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.toString(),b.toString());	0
PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(a.hashCode(),b.hashCode());	0
CABACTest	testReadIntraChromaPredMode	assertEquals(0,newCABAC(1).readIntraChromaPredMode(m,0,null,null,false,false));	assertNotNull(m);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	1
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.startsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(!("STR".equals(actual)));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(actual.endsWith("STR"));	0
ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame("STR",actual);	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testCompleted	assertNotNull(actual);	assertTrue(actual.getId().contains("STR"));	0
VerbsTest	testCompleted	assertNotNull(actual);	assertNotNull(actual.getId());	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(this.mockJmxMbeanConnection);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(this.mockVirtualMachine);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNotNull(this.mockJmxServiceUrl);	0
JMXJvmIdConnectionFactoryTest	testCreateConnectionFailedToGetUrl	assertNull(result);	assertNull(result);	1
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result.getAttributeSetters().size()!=0);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getTarget());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(TEST_ONAME_STR002B,result.getObjectName().toString());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getAttributeSetters());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotSame(TEST_ONAME_STR002,result.getObjectName().toString());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertNotNull(result.getObjectName());	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertTrue(result!=null);	0
ObjectQueryPreparerTest	testPrepareObjectQueryWithParameterReplacement	assertSame(this.testTarget002,result.getTarget());	assertEquals(2,result.getAttributeSetters().size());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result);	1
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotEquals(0,result.length());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertNotSame("STR",result);	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertEquals("STR",result.trim());	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.endsWith("STR"));	0
AJsonSerHelperTest	testArray1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.stream().anyMatch(schema->schema.getFilePath().contains("STR")));	0
IssuesTest	testIssue23	assertTrue(true);	assertEquals(2,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser.getResultXsdSchemas());	0
IssuesTest	testIssue23	assertTrue(true);	assertNotNull(parser.getUnsolvedReferences());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,parser.getResultXsdSchemas().count());	0
IssuesTest	testIssue23	assertTrue(true);	assertFalse(parser.getResultXsdSchemas().anyMatch(schema->schema.getTargetNamespace().equals("STR")));	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().noneMatch(schema->schema.getElementFormDefault().isEmpty()));	0
IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	0
IssuesTest	testIssue23	assertTrue(true);	assertTrue(parser.getResultXsdSchemas().anyMatch(schema->schema.getNamespaces().size()>0));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(Boolean.valueOf(false),bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(Boolean.TRUE,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(42,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNull(findField(testObject.getClass(),"STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_short_whitespace	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals("STR",testContainer.getTestCase().getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestContext()!=null);	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals("STR",testContainer.getTestCase().getId());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestCase().getProperties().isEmpty());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,testContainer.getTestInstance());	1
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(testContainer.getTestCase().getProperties());	0
TestContainer_BasicTest	testConstructor_withTestClassInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestCase().getProperties().containsKey("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertEquals(0L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(0L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(functionAstar.countEdges("STR")>0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotNull(functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotSame(0L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertFalse(functionAstar.countEdges("STR")==0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(-1L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertTrue(functionAstar.countEdges("STR")>=0);	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotSame(-1L,functionAstar.countEdges("STR"));	0
OSQLFunctionAstarTest	test6Execute	assertEquals(16,graph.countEdges("STR"));	assertNotEquals(null,functionAstar.countEdges("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotNull(id);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertFalse(database.isClosed());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotEquals("STR",doc1.getProperty("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(doc1.containsField("STR"));	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotSame(doc1,docx);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertEquals("STR",doc1.getProperty("STR").toString());	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertTrue(database.countClass("STR")>0);	0
RemoteTransactionSupportTest	testQueryUpdateCreatedInTxTransaction	assertTrue(result.hasNext());	assertNotSame("STR",doc1.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals("STR",item.getProperty("STR"));	1
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(script.contains(className));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotNull(result);	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertFalse(script.isEmpty());	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals("STR",item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(className.equals("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertEquals(1,db.countClasses());	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertNotEquals(0,item.getProperty("STR"));	0
OScriptExecutionTest	testReturnInIf2	assertEquals("STR",item.getProperty("STR"));	assertTrue(!script.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	1
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(document.containsField("STR"));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.isEmpty());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotSame(objects,subObjects);	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals(0,subObjects.size());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals("STR",subObjects.iterator().next());	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains(nestedDoc));	0
ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(2,subObjects.size());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testFriendsWithNameArrows	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotNull(resultHbd);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertEquals(pictureHbd.getHeight(),resultHbd.getHeight());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals("STR",pictureHbd.getColor());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(pictureHbd.getWidth()==resultHbd.getWidth());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotSame(pictureHbd.getData(),resultHbd.getData());	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertArrayEquals(pictureHbd.getPlaneData(0),resultHbd.getPlaneData(0));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertNotEquals(pictureHbd.getPlaneData(1),resultHbd.getPlaneData(1));	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(picture.getWidth()!=-1);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertFalse(resultHbd.getWidth()<0);	0
PictureTest	testToAndFrom	assertArrayEquals(Y,resultHbd.getPlaneData(0));	assertTrue(picture.getPlaneData(2).length>0);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(result);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(ser);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotNull(baos);	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertNotEquals(0,baos.size());	0
AJsonSerHelperTest	testDoubleWithFrac0	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals(0,testCore.warehouseDir().toString().length());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertFalse(testCore.warehouseDir().toString().isEmpty());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotSame(null,testCore.warehouseDir());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotNull(testCore);	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals(13,testCore.databaseName().length());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertEquals("STR",testCore.databaseName());	0
BeejuCoreTest	deleteDirectory	assertFalse(Files.exists(testCore.warehouseDir()));	assertNotEquals("STR",testCore.databaseName());	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNull(filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertEquals(null,filterResult);	1
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotEquals("STR",filterResult);	0
MaxDepthFilterTest	testCustomDepthZero	assertEquals(null,filterResult);	assertNotSame("STR",filterResult);	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata.getMd());	0
StackOverflowTest	testNamespaceExtraction	assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(vairāki.isRecognized());	1
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki);	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertEquals("STR",vairāki.getToken());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertFalse(vairāki.wordforms.contains(null));	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotEquals(0,vairāki.wordforms.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertTrue(!vairāki.wordforms.isEmpty());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotSame(0,vairāki.wordforms.size());	0
MorphologyTest	vairāki	assertTrue(vairāki.isRecognized());	assertNotNull(vairāki.getBestWordform());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized());	1
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals(true,nopūzdamās.isRecognized());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertFalse(nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotNull(nopūzdamās);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(0,nopūzdamās.wordforms.size());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.wordforms.size()>0);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertNotEquals(null,nopūzdamās.wordforms);	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.isRecognized()||!nopūzdamās.wordforms.isEmpty());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertEquals("STR",nopūzdamās.getToken());	0
MorphologyTest	nopūzdamās	assertTrue(nopūzdamās.isRecognized());	assertTrue(nopūzdamās.getToken().equals("STR"));	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized());	1
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertEquals(true,riebties.isRecognized());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotNull(riebties);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertFalse(riebties.wordforms.isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(!riebties.wordforms.isEmpty());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotEquals(0,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.wordforms.size()>0);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertNotSame(0,riebties.wordforms.size());	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.wordforms.size()!=0);	0
MorphologyTest	riebties	assertTrue(riebties.isRecognized());	assertTrue(riebties.isRecognized()==!riebties.wordforms.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.equals(expected));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.contains(expected));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotNull(actual);	1
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(actual.isEmpty());	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame("STR",actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertSame(MORE,actual);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertFalse(actual==null);	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertTrue(actual.equals(MORE));	0
StatementResultTest	testGetMore	assertNotNull(actual);	assertNotSame("STR",actual);	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.toString().contains("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.getDisplay().containsKey("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals("STR",actual.getId().substring(actual.getId().lastIndexOf("STR")+1));	0
VerbsTest	testMastered	assertNotNull(actual);	assertEquals(1,actual.getDisplay().size());	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getDisplay().isEmpty());	0
VerbsTest	testMastered	assertNotNull(actual);	assertTrue(actual.serialize().toString().contains("STR"));	0
VerbsTest	testMastered	assertNotNull(actual);	assertFalse(actual.getId().isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertTrue(expected.equals(actual)||expected==actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertNotNull(actual);	1
ActorTest	testGetMbox	assertNotNull(actual);	assertSame(expected,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertEquals(MBOX,actual);	0
ActorTest	testGetMbox	assertNotNull(actual);	assertFalse(expected.isEmpty());	0
ActorTest	testGetMbox	assertNotNull(actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	0
AppveyorTest	testGetBuildUrl	assertEquals("STR",newAppveyor(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty(null));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isEmpty("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertTrue(StringUtils.isEmpty("STR"));	1
StringUtilsTest	testEmptyIsEmpty	assertTrue(StringUtils.isEmpty("STR"));	assertFalse(StringUtils.isNonZero("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertEquals(Deflater.class,deflateExtension.getDeflater().getClass());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertSame(deflateExtension.getDeflater(),deflateExtension.getDeflater());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.getDeflater().getTotalOut()>=0);	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotNull(deflateExtension.toString());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertFalse(deflateExtension.toString().isEmpty());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.toString().contains("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertNotEquals(0,deflateExtension.toString().length());	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.toString().startsWith("STR"));	0
PerMessageDeflateExtensionTest	testGetDeflater	assertEquals(deflateExtension.getDeflater().finished(),newDeflater(Deflater.DEFAULT_COMPRESSION,true).finished());	assertTrue(deflateExtension.toString().endsWith("STR"));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertEquals(3,cm.getAll(poolKey).size());	1
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertFalse(cm.getAll(poolKey).isEmpty());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()<=3);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotEquals(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotNull(cm.getAll(poolKey).get(0));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).containsAll(cm.getAll(poolKey)));	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertNotSame(0,cm.getAll(poolKey).size());	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey).size()>0);	0
RpcConnectionManagerTest	testGetAllWithPoolKey	assertEquals(3,cm.getAll(poolKey).size());	assertTrue(cm.getAll(poolKey)!=null&&!cm.getAll(poolKey).isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR","STR"+node.getPath());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse("STR".equals(node.getPath()));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(nodeWithPath("STR"),nodeWithPath("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(3,node.getPath().split("STR").length);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().contains("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().isEmpty());	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().endsWith("STR"));	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node);	0
MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame(nodeWithPath("STR"),nodeWithPath("STR"));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId,resultPublicId);	1
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotNull(resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.startsWith(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(true,x.length()!=y.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(0,resultPublicId.length());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.contains(testPublicId));	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertTrue(resultPublicId.endsWith("STR"),"STR");	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertEquals(testPublicId.hashCode(),resultPublicId.hashCode());	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotEquals(testOtp,resultPublicId);	0
YubicoClientTest	testValidOTPPublicId	assertEquals(testPublicId,resultPublicId);	assertNotSame(testOtp,resultPublicId);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	1
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.isDirectory());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals("STR",configFile.getPath());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.isFile());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals("STR",Files.readAllLines(configFile.toPath()).get(0));	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.canRead());	0
DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals("STR",configFile.getName());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertEquals(calendar.getTime(),d);	1
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals(0,d.getTime());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertFalse(d.before(calendar.getTime()));	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotSame(calendar.getTime(),d);	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotEquals("STR",d.toString());	0
OIOUtilsTest	shoudGetRightTimeFromString	assertEquals(calendar.getTime(),d);	assertNotNull(calendar);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	1
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertSame(1,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotSame(0,qResult.size());	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertTrue(qResult.size()>0&&qResult.size()<=10);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertNotNull(qResult);	0
OMatchStatementExecutionTest	testSimpleLimit	assertEquals(1,qResult.size());	assertEquals(qResult.size()+1,2);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertEquals(1,count);	1
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotNull(db);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count>=0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(0,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count==1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertFalse(count<0);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertNotEquals(-1,count);	0
LuceneSortTest	shouldIndexVeryLongDescriptionWithSingleField	assertEquals(1,count);	assertTrue(count<=1);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classLinked,prop.getLinkedClass());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(OType.LINK,prop.getType());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.declaredProperties().contains(prop));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.properties().size()>0);	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals("STR",classA.getName());	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(schema.getClass("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(prop.getLinkedClass());	1
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(classA.equals(classLinked));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.getName().startsWith("STR"));	0
AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(prop.getFullName().contains("STR"));	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	1
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(linkSerializer.getObjectSizeInByteBuffer(buffer)>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertNotNull(linkSerializer);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(size>0);	0
CompactedLinkSerializerTest	testSerializeThreeBytesInByteBuffer	assertEquals(size,linkSerializer.getObjectSizeInByteBuffer(buffer));	assertTrue(buffer.position()>0);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertEquals(1,results.size());	1
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotNull(results);	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(0,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertNotEquals(10,results.size());	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertFalse(results.contains(null));	0
OCommandExecutorSQLSelectTest	testAggregations	assertEquals(1,results.size());	assertTrue(!results.isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	1
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertTrue(defaultExtension.getProvidedExtensionAsClient()!=null&&defaultExtension.getProvidedExtensionAsClient().isEmpty());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertEquals(0,defaultExtension.getProvidedExtensionAsClient().length());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotNull(defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotEquals(null,defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame("STR",defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertFalse(defaultExtension.getProvidedExtensionAsClient().contains("STR"));	0
DefaultExtensionTest	testGetProvidedExtensionAsClient	assertEquals("STR",defaultExtension.getProvidedExtensionAsClient());	assertNotSame(defaultExtension.toString(),defaultExtension.getProvidedExtensionAsClient());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	1
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.equals(defaultExtension1)||defaultExtension0.equals(defaultExtension0));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0==defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(System.identityHashCode(defaultExtension0),System.identityHashCode(defaultExtension1));	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.getClass(),defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.getClass()==defaultExtension1.getClass());	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0,defaultExtension1);	0
DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()==defaultExtension0.hashCode());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(sample1Array.length>0);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,sample1Array.length);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(sample1Array);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertTrue(parser.parse(sample1Array)!=null);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotSame(sample1Array,parser.parse(sample1Array).toString());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotNull(parser);	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertFalse(parser.parse(sample1Array).toString().isEmpty());	0
CEFParserTest	validByteArrayMessageWithoutValidationTest	assertNotNull(parser.parse(sample1Array));	assertNotEquals(0,parser.hashCode());	0
CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNull(event);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals(Logger.Level.DEBUG,logger.level);	1
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().equalsIgnoreCase("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.ERROR,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotEquals(Logger.Level.INFO,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertNotSame(Logger.Level.WARN,logger.level);	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertTrue(logger.level.toString().contains("STR"));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level.equals(Logger.Level.ERROR));	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertEquals("STR",logger.level.toString().toUpperCase());	0
SystemLoggerTest	ignores_log_level_case	assertEquals(Logger.Level.DEBUG,logger.level);	assertFalse(logger.level==Logger.Level.FATAL);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	1
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(0,logger.hashCode());	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(null,config);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(config.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.toString().contains("STR"));	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.DEBUG,logger.level);	0
SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(0,config.hashCode());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual);	1
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.getId().endsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.getId().equals("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals("STR",actual.toString());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.answered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotNull(actual.getId());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertEquals(8,actual.toString().length());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertNotSame(Verbs.answered(),Verbs.mastered());	0
VerbsTest	testAnswered	assertNotNull(actual);	assertTrue(actual.toString().startsWith("STR"));	0
VerbsTest	testAnswered	assertNotNull(actual);	assertFalse(actual.toString().isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertFalse(expected.isEmpty()&&actual.isEmpty());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertSame(expected,actual);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertNotNull(expected);	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()==actual.size());	0
StatementResultTest	testSetStatements	assertNotNull(actual);	assertTrue(expected.size()>0||actual.size()>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals(42,parseBuf);	1
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf>0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotNull(parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertFalse(parseBuf<0);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertEquals("STR",String.valueOf(parseBuf));	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertTrue(parseBuf==42);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotSame(0,parseBuf);	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertArrayEquals("STR".getBytes(),ByteBuffer.wrap("STR".getBytes()).array());	0
PlatformTest	testInvokeStatic2	assertEquals(42,parseBuf);	assertNotEquals(0,parseBuf,0);	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getH(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotNull(response.getTimestamp(),"STR");	0
YubicoClientTest	testSignature	assertNotNull(response);	assertEquals("STR",response.getOtp());	0
YubicoClientTest	testSignature	assertNotNull(response);	assertNotEquals(null,response.getSl(),"STR");	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotNull(stdIn);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(0,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotEquals(-1,serverStartThread.getId());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(System.out,System.err);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.isAlive()||serverStartThread.isInterrupted());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertTrue(serverStartThread.getState()==Thread.State.WAITING||serverStartThread.getState()==Thread.State.TIMED_WAITING);	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertFalse(serverStartThread.isDaemon());	0
TestNanolets	uriToString	assertEquals("STR",newUriResource("STR",100,GeneralHandler.class).toString());	assertNotSame(stdIn,System.in);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertArrayEquals(robotsTxt.getBytes(StandardCharsets.UTF_8),content);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(sha1str.startsWith("STR"));	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals(0,content.length);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(robotsTxt.isEmpty());	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(content.length>0);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",robotsTxt);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame(robotsTxt,sha1str);	0
WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals(sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotSame("STR",sha1str.substring(6));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	1
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(0,normalizedUrl.length());	0
BasicURLNormalizerTest	testInvalidURI	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.endsWith(expectedResult));	0
CircleTest	testGetName	assertEquals("STR",newCircle(env()).getName());	assertEquals("STR","STR");	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	1
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals("STR",matcher.pattern().pattern());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(-1,matcher.regionEnd());	0
MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find(1));	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(0,matcher.regionStart());	0
MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.lookingAt());	0
MatcherTest	reset	assertTrue(matcher.find());	assertEquals(1,matcher.regionEnd());	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse((Boolean)bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(0,bind0(testObject,"STR","STR"));	0
PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",bind0(testObject,"STR","STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals("STR",result);	1
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.equals("STR"));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertFalse(result.isEmpty());	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotNull(result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotEquals("STR",result);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertTrue(result.length()>0);	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertEquals(Integer.parseInt("STR"),Integer.parseInt(result.toString()));	0
FizzBuzzTDDTest	test1Returns1	assertEquals("STR",result);	assertNotSame("STR",result);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotNull(qResult);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(qResult.size()>0);	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotEquals(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertNotSame(0,qResult.size());	0
OCommandExecutorSQLSelectTest	testProjection	assertEquals(qResult.size(),1);	assertTrue(!qResult.isEmpty());	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result==5||result==10);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertEquals(10,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotNull(result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(0,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result>=0&&result<=15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotEquals(-1,result);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertTrue(result!=0&&result!=20);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertNotSame(result,15);	0
ORecordBytesTest	testReadFromInputStreamWithWaitSizeTooBigLimit	assertEquals(result,data.length);	assertFalse(result<0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotNull(array);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertEquals(0,array.size());	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertTrue(array.size()>=0);	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(456));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(789));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.add(999));	0
CASObjectArrayTest	testSetTwoItems	assertEquals(0,array.add(1));	assertNotEquals(-1,array.size());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(result.hasNext());	1
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotNull(result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertEquals(1,result.stream().count());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertFalse(DB_STORAGE.isEmpty());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(0,query.length());	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotSame(db,result);	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().startsWith("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().contains("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertNotEquals(-1,query.indexOf("STR"));	0
OMatchStatementExecutionNewTest	testArrayRange2	assertTrue(result.hasNext());	assertTrue(query.toString().endsWith("STR"));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(mapResult);	1
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertEquals(1,multiKeyMap.size());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKey.equals(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertTrue(multiKeyMap.containsKey(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotNull(multiKeyMap.values().iterator().next());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotSame(multiKey,anotherMultiKey);	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertNotEquals(0,multiKeyMap.hashCode());	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertSame(mapResult,multiKeyMap.get(anotherMultiKey));	0
OMultiKeyTest	testOneKeyMap	assertNotNull(mapResult);	assertFalse(multiKeyMap.isEmpty());	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(false,handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(!handler.hasInitContainer(builder,"STR"));	0
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
InitContainerHandlerTest	simple	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals(2,result.size());	1
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.get(0).getName().equals("STR"));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotNull(result);	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(!result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).anyMatch(name->name.equals("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertTrue(result.stream().map(TestNamed::getName).noneMatch(name->name.equals("STR")));	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertFalse(result.isEmpty());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotEquals(0,result.size());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertEquals("STR",result.get(1).getName());	0
ProcessorConfigTest	order	assertEquals(2,result.size());	assertNotSame(data,result);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client2.isConnectionMonitorSwitchOn());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals("STR",System.getProperty(Configs.CONN_RECONNECT_SWITCH));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(client1);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(client1==null);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(client1,client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(client1!=client2);	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(client1.hashCode(),client2.hashCode());	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(System.getProperty(Configs.CONN_RECONNECT_SWITCH).equals("STR"));	0
GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(128526626,client1.hashCode());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",m.markdown(null).trim());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").endsWith("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(0,m.markdown("STR").length());	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR").contains("STR"));	0
EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals("STR",m.markdown("STR"));	0
ScoreTest	testGetMin	assertEquals(expected,actual,0);	assertTrue(actual<=expected);	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb.getId(),"STR");	0
VerbTest	testVerb	assertNotNull(verb);	assertNotSame(ID,verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotSame("STR",verb.getId());	0
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertNotNull(verb);	1
VerbTest	testVerb	assertNotNull(verb);	assertTrue(!"STR".equals(verb.getId()));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotNull(client);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertEquals("STR",body.trim().replaceAll("STR","STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.length()>0);	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.startsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotEquals(-1,body.indexOf("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.endsWith("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertFalse(body.isEmpty());	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertTrue(body.contains("STR"));	0
HttpClientFactoryTest	testNonProxiedHostRequest	assertEquals("STR",body);	assertNotSame("STR",body);	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotNull(properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertFalse(properties.isEmpty());	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertEquals(3,properties.size());	1
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals(null,properties.get("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsValue(properties.getProperty("STR")));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.stringPropertyNames().contains("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	0
CircleTest	testGetEnvironment	assertEquals(3,properties.size());	assertTrue(properties.containsKey("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertTrue(len1.apply("STR"));	0
ACollectionHelperTest	testExists	assertEquals(false,ACollectionHelper.exists(Arrays.<String>asList(),len1));	assertFalse(len1.apply("STR"));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotEquals(a,b);	1
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotNull(a.getHistory());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getActualCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a.getPuzzle(),b.getPuzzle().swapBlank(2));	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.getActualCost()>=0);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertNotSame(a,b);	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertTrue(a.isSolution());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertEquals(0,a.getEstimatedCost());	0
PuzzleStateTest	not_equal_to_state_with_different_puzzle	assertNotEquals(a,b);	assertFalse(a.getActualCost()<0);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotNull(injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotEquals(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertFalse(injector.getLog()==null);	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNotSame(mockLogger,injector.getLog());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertNull(injector.getAttributeList());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertEquals(3,attributeList.size());	0
AttributeInjectorTest	testGetSetLog	assertNotNull(this.injector.getLog());	assertTrue(attributeList.contains(newAttribute("STR","STR")));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotNull(sql.select().from("STR").where("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals(0,sql.select().from("STR").where("STR").toString().length());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertEquals("STR".replaceAll("STR","STR"),sql.select().from("STR").where("STR").toString().replaceAll("STR","STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(sql.select().from("STR").where("STR").toString().isEmpty());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.select().from("STR").where("STR").toString());	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toUpperCase().contains("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().toLowerCase().startsWith("STR"));	0
TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(sql.select().from("STR").where("STR").toString().contains("STR"));	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
TSqlBuilderTest	testSelectSomeFrom	assertEquals("STR",sql.select("STR","STR").from("STR").toString());	assertNotNull(sql);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.containsAll(list));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotNull(result);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertFalse(result.isEmpty());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertEquals(3,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertSame(list.get(0),result.get(0));	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertNotEquals(0,result.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()>0);	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(result.size()<=list.size());	0
WorkerQueryTest	noFilters	assertEquals(list,result);	assertTrue(!result.isEmpty());	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	1
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(!YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(false,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(true,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotSame(Boolean.TRUE,Boolean.valueOf(YubicoClient.isValidOTPFormat(otp)));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(null,YubicoClient.isValidOTPFormat(otp));	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(0,otp.length());	0
YubicoClientTest	testUnPrintableOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(false,YubicoClient.isValidOTPFormat(otp));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(true);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertFalse(crap.isRecognized());	1
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotNull(crap);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame("STR","STR");	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertTrue(crap.toString().contains("STR"));	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotEquals(3,4);	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNull(crap.getCorrectWordform());	0
MorphologyTest	crap	assertFalse(crap.isRecognized());	assertNotSame(5,10);	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(3,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals(6,filter(env).size());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).containsKey("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(filter(env).isEmpty());	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsValue("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotEquals("STR",filter(env).get("STR"));	0
EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(filter(env).containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertTrue(fields.containsKey("STR"));	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertEquals(3,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotNull(fields);	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertFalse(fields.isEmpty());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotEquals(0,fields.size());	0
BasicIndexingTest	testFilterMetadata	assertArrayEquals("STR",newString[]{"STR","STR","STR"},newTreeSet<>(fields.keySet()).toArray());	assertNotSame(metadata,fields);	0