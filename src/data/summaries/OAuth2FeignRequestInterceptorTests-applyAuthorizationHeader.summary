0. In line 1, method `apply` of class `OAuth2FeignRequestInterceptor` is invoked.
1. The given method is the implementation of the `apply` method in the `OAuth2FeignRequestInterceptor` class.

Here is a step-by-step explanation of the code:

1. The method is marked with the `@Override` annotation, which means that it is overriding a method from its superclass or interface.
2. The method signature specifies that it accepts a `RequestTemplate` object named `template` as a parameter.
3. The method is annotated with `@see RequestInterceptor#apply(RequestTemplate)`, which indicates that it is implementing the `apply` method from the `RequestInterceptor` interface.
4. Inside the method, there are two lines of code:
   - `template.header(header)`: This line sets the specified `header` in the `template` object. It clears out any existing value for that header name. It assumes that there is no "clear" method available to explicitly remove the header.
   - `template.header(header, extract(tokenType))`: This line adds the `header` with a new value extracted from the `tokenType` by calling the `extract` method. It adds the header to the existing headers in the `template` object.

In summary, this method sets the specified `header` value in the `RequestTemplate` object and adds a new header with a value extracted from the `tokenType`.
2. Take note that in line 2, method `headers` from class `RequestTemplate` is invoked.
3. Take note that in line 2, an object of class `String` is created.
4. Take note that in line 2, an object of class `Collection` is created.
5. Take note that in line 2, an object of class `Map` is created.

