0. In line 1, method `getInterfacesGenricClasses` of class `ReflexUtil` is invoked.
1. The `getInterfacesGenricClasses` method in the `ReflexUtil` class is used to obtain the generic parameter classes of the interfaces implemented by a given class. 

Here's a breakdown of the method code:

1. The method is declared as `public static Class<?>[]` which means it is a public and static method that returns an array of `Class` objects.
2. The `clazz` parameter of type `Class<?>` represents the class for which we want to obtain the generic parameter classes of its interfaces.
3. The method starts by invoking another method called `getInterfacesGenricTypes(clazz)` to obtain the generic types of the interfaces implemented by the given class.
4. The `types` array is declared to store the generic types obtained from `getInterfacesGenricTypes(clazz)`.
5. Next, a new array called `clazzs` is created with the same length as the `types` array. This array will store the corresponding `Class` objects for the generic types.
6. A loop is then used to iterate over the `types` array.
7. In each iteration, the `clazzs` array is populated with the `Class` object representation of the generic type at the current index of the `types` array.
8. Finally, the `clazzs` array containing the `Class` objects representing the generic parameter classes of the interfaces implemented by the given class is returned.
2. Take note that in line 1, an object of class `TestInClass` is created.
3. Take note that in line 1, an object of class `Class` is created.
4. Take note that in line 2, an object of class `String` is created.
5. Take note that in line 2, an object of class `Long` is created.
6. Take note that in line 2, an object of class `Integer` is created.
7. Take note that in line 2, an object of class `Class` is created.

