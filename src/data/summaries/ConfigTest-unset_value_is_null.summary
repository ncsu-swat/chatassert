0. Take note that in line 1, constructor `Config` from class `Config` is invoked.
1. In line 1, an object of class `Config` is instantiated
2. The given code defines a class named `Config` in the package `io.cucumber.pro.config`. The class is responsible for managing nested configurations where keys are hierarchical.

Here are the important features of the `Config` class:

1. It has two private instance variables: `valueByProperty` and `configByProperty`. Both are `Map` objects used to store the values and sub-configurations respectively. They are implemented using `TreeMap` for sorting the keys in a natural order.

2. The `getString`, `getBoolean`, `getInteger`, `isNull` methods retrieve the corresponding values from the configuration based on the given key.

3. The `setNull`, `set(String, String)`, `set(String, int)`, and `set(String, boolean)` methods are used to set values in the configuration.

4. The `setValue` method is intended to be used by loaders to set a specific value for a property.

5. The `getChild` method returns a child `Config` object based on the given property. If the child configuration does not exist, it creates a new one.

6. The private `getValue` method retrieves a value from the configuration based on the given property.

7. The private `getIn` method retrieves a value from a nested configuration given a normalized key. If the key is not found, it throws an exception or returns a `NullValue` object based on the `allowNull` parameter.

8. The private `setIn` method sets a value in the nested configuration based on the given normalized key.

9. The `toYaml` method converts the configuration into YAML format.

10. The private `print` method is used internally to print the configuration in a hierarchical format.

11. The private `indent` method adds the appropriate indentation based on the depth of the configuration.

12. The private `toPath` method converts a key into a list of individual property keys.

13. The private `normalize` method converts a key to a normalized form by replacing underscores with dots and converting to lowercase.

Overall, the `Config` class provides a flexible way to manage and manipulate nested configurations with hierarchical keys.

