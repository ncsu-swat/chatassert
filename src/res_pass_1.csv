TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	5	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getDatabase());	22.52709412574768	0	1	0	0	0
0	14	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.exists());	22.5818350315094	0	1	0	0	0
0	15	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getTx());	25.567205905914307	0	1	0	0	0
0	16	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	"assertEquals(5, new OrientGraph(""memory:testPool"").countVertices());"	44.58776617050171	0	0	1	0	0
0	18	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertNotNull(factory.getNoTx());	28.8347909450531	0	1	0	0	0
0	19	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertTrue(factory.getTx().getRawGraph().isClosed());	29.66750693321228	0	0	1	0	0
0	28	orientechnologies/orientdb	OrientGraphFactoryTest	createNoTxPool	assertSame(g,OrientBaseGraph.getActiveGraph());	assertFalse(factory.exists());	19.683321952819824	0	0	1	0	0
0	27	orientechnologies/orientdb	LuceneSpatialIntersectsTest	testIntersectsIndex	Assert.assertEquals(execute.size(),1);	assertTrue(!db.isClosed());	39.36807179450989	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	13.104463815689087	0	0	1	0	0
0	1	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertEquals(InputStream.class, resourceAsStream.getClass());	13.627302885055542	0	0	1	0	0
0	3	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	33.66448712348938	0	0	1	0	0
0	5	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	39.8873028755188	0	0	1	0	0
0	7	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	13.197080135345459	0	0	1	0	0
0	9	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertNotNull(-1093982927L | ((java.lang.String)h$.toFloat(1,1605419583$.checkList((h/abc;p ""<VirtualOpenchannelsUpstream>.parse""; , entries.get())),(System.vArRsLoUnDeR_z638270057364398355732192527705035917880.cast((669647307711646184)),entries return; 0)[-1]).);"	80.81337904930115	0	0	1	0	0
0	11	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	"assertTrue(keyStorePath.endsWith("".jks""));"	14.901147842407227	0	0	1	0	0
0	12	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(keyStorePath);	12.557033061981201	0	0	1	0	0
0	14	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	24.620990991592407	0	0	1	0	0
0	21	NanoHttpd/nanohttpd	LoadKeyStoreTest	loadKeyStoreFromResources	assertNotNull(resourceAsStream);	assertNotNull(resourceAsStream);	12.358838081359863	0	0	1	0	0
0	8	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertEquals(2, cm.count(""hehe""));"	33.64825129508972	0	1	0	0	0
0	9	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.count(""hehe"") == 2);"	16.150516033172607	0	1	0	0	0
0	12	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertNotEquals(0, cm.count(""hehe""));"	15.710363149642944	0	1	0	0	0
0	14	sofastack/sofa-bolt	RpcConnectionManagerTest	testRemoveConnWithSpecifiedPoolkey	Assert.assertEquals(2,cm.count(poolKey));	"assertTrue(cm.count(""hehe"") > 0);"	15.876661777496338	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals("""", new Protocol("""").getProvidedProtocol());"	7.210610866546631	0	1	0	0	0
0	1	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotNull(new Protocol("""").getProvidedProtocol());"	7.806491136550903	0	1	0	0	0
0	2	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(new Protocol("""").getProvidedProtocol().isEmpty());"	7.173496961593628	0	1	0	0	0
0	3	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""test"", new Protocol("""").getProvidedProtocol());"	7.2526819705963135	0	1	0	0	0
0	4	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertSame("""", new Protocol("""").getProvidedProtocol());"	7.230406999588013	0	1	0	0	0
0	5	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertArrayEquals(new byte[] {}, new Protocol("""").getProvidedProtocol().getBytes());"	7.662230014801025	0	1	0	0	0
0	6	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(new Protocol("""").getProvidedProtocol().contains(""test""));"	7.489644765853882	0	1	0	0	0
0	7	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame(""test"", new Protocol("""").getProvidedProtocol());"	7.491617918014526	0	1	0	0	0
0	9	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(new Protocol("""").getProvidedProtocol() instanceof String);"	7.732407808303833	0	1	0	0	0
0	11	TooTallNate/Java-WebSocket	ProtocolTest	testToString	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(null, new Protocol("""").getProvidedProtocol());"	7.857769966125488	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	7.3016180992126465	1	0	0	0	0
0	1	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertEquals(true, deflateExtension.isServerNoContextTakeover());	8.431298017501831	0	1	0	0	0
0	2	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotNull(deflateExtension.isServerNoContextTakeover());	11.276718854904175	0	1	0	0	0
0	4	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false, deflateExtension.isServerNoContextTakeover());	7.628624200820923	0	1	0	0	0
0	5	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertSame(true, deflateExtension.isServerNoContextTakeover());	7.425207853317261	0	1	0	0	0
0	7	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover() );	23.075407028198242	1	0	0	0	0
0	8	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotSame(false, deflateExtension.isServerNoContextTakeover());	7.3706278800964355	0	1	0	0	0
0	9	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertArrayEquals(new boolean[]{true}, new boolean[]{deflateExtension.isServerNoContextTakeover()});	7.976846694946289	0	1	0	0	0
0	10	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertTrue(deflateExtension.isServerNoContextTakeover());	19.696491956710815	1	0	0	0	0
0	11	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testIsServerNoContextTakeover	assertTrue(deflateExtension.isServerNoContextTakeover());	assertNotEquals(false, deflateExtension.isServerNoContextTakeover());	7.516045093536377	0	1	0	0	0
0	1	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(sairšana.isEmpty());	14.234533071517944	0	1	0	0	0
0	2	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(sairšana);	9.386049032211304	0	1	0	0	0
0	5	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(laivas_iršana.size() > 0);	10.124906063079834	0	1	0	0	0
0	6	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(sairšana, laivas_iršana);	9.51485013961792	0	1	0	0	0
0	8	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(pagaatne, locītājs);	21.34000301361084	0	1	0	0	0
0	13	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(laivas_iršana.isEmpty());	9.734275102615356	0	1	0	0	0
0	15	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertFalse(sairšana.equals(laivas_iršana));	10.085372924804688	0	1	0	0	0
0	24	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotEquals(null, sairšana);	10.139682054519653	0	1	0	0	0
0	28	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertTrue(sairšana.size() > 0);	9.701056957244873	0	1	0	0	0
0	29	PeterisP/morphology	MorphologyTest	multistem_generateinflections	"assertInflection(sairšana,pagaatne,""STR"");"	assertNotNull(laivas_iršana);	9.589882850646973	0	1	0	0	0
1	3	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(aizkost);	9.884667158126831	0	1	0	0	0
1	4	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertTrue(aizkost.size()>0);	9.55595088005066	0	1	0	0	0
1	7	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotEquals(null, locītājs);	10.25554895401001	0	1	0	0	0
1	8	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(tu);	9.347867965698242	0	1	0	0	0
1	12	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertFalse (locītājs.hasLemma() ("""" ) ) ;);"	45.42741394042969	0	1	0	0	0
1	14	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertEquals(Collections.emptyList(), locītājs.generateInflections(""""));"	9.619237899780273	0	1	0	0	0
1	19	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	"assertTrue(locītājs.getClass().getName().contains(""Analyzer""));"	10.28065013885498	0	1	0	0	0
1	29	PeterisP/morphology	MorphologyTest	aizkost	"assertInflection(aizkost,tu,""STR"");"	assertNotNull(locītājs);	25.561786890029907	0	1	0	0	0
2	11	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	"assertThrows(IllegalArgumentException.class, () -> locitajs.isRecognized(""""););"	84.50306296348572	0	1	0	0	0
2	17	PeterisP/morphology	MorphologyTest	cache	assertTrue(vārds.isRecognized());	assertNotNull(locītājs);	9.518664121627808	0	1	0	0	0
0	1	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.containsKey(""title""));"	20.426490783691406	0	1	0	0	0
0	3	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertNotNull(metadata);	17.75215196609497	0	1	0	0	0
0	4	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.containsKey(""description""));"	17.23702597618103	0	1	0	0	0
0	8	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	assertNotEquals (0 , metadata.entrySet (). size () Monday ;           )   );	39.69099688529968	0	1	0	0	0
0	10	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertEquals(""http://polloxniner.blogspot.com/2011/08/stack-overflow-what-is-byte-array-stream.html"", metadata.getFirstValue(""url""));"	17.738161087036133	0	0	1	0	0
0	11	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.getFirstValue(""author"").isEmpty());"	15.91202998161316	0	0	1	0	0
0	12	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.containsKey(""language""));"	15.775832176208496	0	0	1	0	0
0	13	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.getFirstValue(""title"").startsWith(""Stack Overflow:""));"	16.6038818359375	0	0	1	0	0
0	14	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertTrue(metadata.getFirstValue(""description"").length() > 50);"	16.3908429145813	0	0	1	0	0
0	15	DigitalPebble/storm-crawler	StackOverflowTest	testNamespaceExtraction	Assert.assertEquals(1,output.getEmitted().size());	"assertFalse(metadata.getFirstValue(""og:image"").isEmpty());"	16.021199226379395	0	0	1	0	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	14.962139129638672	0	1	0	0	0
0	2	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.equals(normalizedUrl));	14.821301937103271	0	1	0	0	0
0	3	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(expectedResult, normalizedUrl);	14.753468990325928	0	0	1	0	0
0	4	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	13.89138412475586	0	1	0	0	0
0	5	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult, normalizedUrl);	15.13102388381958	0	0	1	0	0
0	6	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(expectedResult.equals(normalizedUrl));	14.862835884094238	0	0	1	0	0
0	7	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertArrayEquals(expectedResult.toCharArray(), normalizedUrl.toCharArray());	14.206094980239868	0	1	0	0	0
0	8	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertSame(expectedResult.getClass(), normalizedUrl.getClass());	14.00906491279602	0	1	0	0	0
0	9	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult, normalizedUrl);	13.963598012924194	0	1	0	0	0
0	10	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(expectedResult.contains(""google.com""));"	13.95241403579712	0	1	0	0	0
1	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	16.671109914779663	0	1	0	0	0
1	1	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.contains(""test=true""));"	17.233630180358887	0	1	0	0	0
1	2	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(testUrl, normalizedUrl);	14.672352075576782	0	1	0	0	0
1	3	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	13.96418571472168	0	1	0	0	0
1	4	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(normalizedUrl.isEmpty());	13.781074047088623	0	1	0	0	0
1	5	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult, normalizedUrl);	24.97922110557556	0	1	0	0	0
1	6	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testUrl, normalizedUrl);	15.247261047363281	0	1	0	0	0
1	9	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(testUrl, normalizedUrl);	16.174279928207397	0	1	0	0	0
1	10	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl);	19.112913131713867	0	0	1	0	0
1	11	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertFalse(normalizedUrl.startsWith(""http://google.com?a=c&foo=baz&foo=bar""));"	16.220894813537598	0	1	0	0	0
