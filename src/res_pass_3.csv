TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertEquals(qResult.size(),2);	42.40127611160278	1	0	0	0	0
	1	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertTrue(qResult.size()<=2);	44.606938123703	0	1	0	0	0
	2	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotNull(qResult);	43.62183117866516	0	1	0	0	0
	3	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertFalse(qResult.isEmpty());	41.96929407119751	0	1	0	0	0
	4	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotEquals(0,qResult.size());	45.320688009262085	0	1	0	0	0
	5	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertSame(Collections.emptyList(),Collections.emptyList()```);	44.97390699386597	0	1	0	0	0
	6	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	"assertNull(""STR"");"	41.557780027389526	0	1	0	0	0
	7	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertNotSame(Collections.emptyList(),qResult);	42.77499508857727	0	1	0	0	0
	8	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertTrue(qResult.get(0).getClass().equals(ODocument.class)`isanotherplausibleqResult.get(0).getClass().equals(ODocument.class));	44.67222499847412	0	1	0	0	0
	9	/	OCommandExecutorSQLSelectTest	testLimitWithNamedParam	assertEquals(qResult.size(),2);	assertEquals(expectedResult,actualResult);	43.11639404296875	0	1	0	0	0
1	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",getName());"	34.33168888092041	0	1	0	0	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(getName());	34.20612382888794	0	1	0	0	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(getName().isEmpty()==false);	36.5736620426178	0	1	0	0	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",getName());"	34.38425397872925	0	1	0	0	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(getName().length()>0);	37.87383794784546	0	1	0	0	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertSame(String.class,getName().getClass());	35.6916937828064	0	1	0	0	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(getName().isEmpty());	35.01953101158142	0	1	0	0	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(null,getName()));	34.11844205856323	0	1	0	0	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertThrows(NullPointerException.class,()->getName().indexOf(null));	36.34737801551819	0	1	0	0	0
	10	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame(Object.class,getName().getClass());	35.62740707397461	0	1	0	0	0
2	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertTrue(result.hasNext());	25.072402000427246	1	0	0	0	0
	1	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotNull(result);	23.145596981048584	0	1	0	0	0
	2	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertEquals(3,result.stream().count());	22.398247957229614	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertFalse(result.isPrefetch());	21.705947875976562	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertNotEquals(0,result.getColumnNames().size());	22.06962299346924	0	1	0	0	0
	5	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertTrue(""STR"");"	21.192995071411133	0	1	0	0	0
	6	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	assertEquals(3,((List)result.all()).size());	22.984395742416382	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertFalse(""STR"");"	20.583799123764038	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertTrue(""STR"");"	21.254956007003784	0	1	0	0	0
	9	/	OMatchStatementExecutionNewTest	testTriangle3	assertTrue(result.hasNext());	"assertTrue(""STR"");"	20.906702041625977	0	1	0	0	0
3	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	20.608927011489868	1	0	0	0	0
	1	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertNotNull(result`instead?This){);	26.240986824035645	0	1	0	0	0
	2	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertFalse(result==null);	20.905100107192993	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	"assertEquals(0,""STR"");"	22.947689056396484	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertNotEquals(0,result.getMetadata().getContent().length());	20.410260915756226	0	1	0	0	0
	5	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	"assertTrue(""STR"");"	22.348159074783325	0	1	0	0	0
	6	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	"assertNotEquals(-1,""STR"");"	22.72296404838562	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertFalse(result.getExecutionPlan().get().isEmpty());	21.701989889144897	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertTrue(result.hasNext());	20.821929931640625	1	0	0	0	0
	9	/	OMatchStatementExecutionNewTest	testTriangle1Arrows	assertTrue(result.hasNext());	assertNotEquals(null,result.getExecutionPlan().get().toJson());	20.881609201431274	0	1	0	0	0
4	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertEquals(expectedPropertyValue,""STR"");"	21.06616711616516	0	1	0	0	0
	1	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertTrue(""STR"");"	23.997358083724976	0	1	0	0	0
	2	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotNull(""STR"");"	20.594969749450684	0	1	0	0	0
	3	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertThrows(Exception.class,""STR"");"	22.829479932785034	0	1	0	0	0
	4	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotEquals(expectedPropertyValue,""STR"");"	22.923726797103882	0	1	0	0	0
	5	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertFalse(""STR"");"	21.779686212539673	0	1	0	0	0
	6	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotNUll(""STR"");"	22.77627921104431	0	1	0	0	0
	7	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertNotSame(expectedPropertyValue,""STR"");"	24.400864124298096	0	1	0	0	0
	8	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertEquals(expectedPropertyValue.hashCode(),""STR"");"	22.747954845428467	0	1	0	0	0
	9	/	OMatchStatementExecutionNewTest	testManager2	"assertEquals(""STR"",getManager2(""STR"").getProperty(""STR""));"	"assertArrayEquals(expectedArray,""STR"");"	21.08047604560852	0	1	0	0	0
5	0	orientechnologies/orientdb	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(set,""STR"");"	21.65461802482605	0	1	0	0	0
	1	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertTrue(""STR"");"	25.05655026435852	0	1	0	0	0
	2	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,""STR"");"	23.004103899002075	0	1	0	0	0
	3	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertNotNull(res);	22.419152975082397	0	1	0	0	0
	4	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertTrue(res.hasNext());	22.404887914657593	0	1	0	0	0
	5	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(""STR"",""STR"");"	23.475234985351562	0	1	0	0	0
	6	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertFalse(res.isExhausted());	21.33760094642639	0	1	0	0	0
	7	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertEquals(1,""STR"");"	21.51820731163025	0	1	0	0	0
	8	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	"assertNotNull(""STR"");"	21.44272208213806	0	1	0	0	0
	9	/	RemoteQuerySupportTest	testQueryEmbeddedSet	"assertNotNull(item.getProperty(""STR""));"	assertFalse(set.isEmpty());	21.4786319732666	0	1	0	0	0
6	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	35.413409948349	1	0	0	0	0
	1	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	36.959391832351685	0	1	0	0	0
	2	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertEquals(expectedValue,actualValue`);	37.87210702896118	0	1	0	0	0
	3	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	"assertNull(""STR"");"	34.26291608810425	0	1	0	0	0
	4	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	"assertNotNull(""STR"");"	33.80219793319702	0	1	0	0	0
	5	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertNotEquals(firstValue,secondValue);	34.65946912765503	0	1	0	0	0
	6	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertSame(expectedInstance,actualInstance);	34.763033866882324	0	1	0	0	0
	7	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertNotSame(expectedInstance,actualInstance);	34.2627170085907	0	1	0	0	0
	8	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertTrue(condition);	35.29125905036926	0	1	0	0	0
	9	/	TrackedListTest	testAddAllNotificationTwo	assertFalse(doc.isDirty());	assertFalse(condition`isanotherplausiblecondition);	34.319425106048584	0	1	0	0	0
7	0	orientechnologies/orientdb	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazzinstanceofOClass);	37.29713416099548	0	1	0	0	0
	1	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertEquals(className,clazz.getName()));	41.09538388252258	0	1	0	0	0
	2	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length>0);	37.845319986343384	0	1	0	0	0
	3	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertFalse(clazz.isAbstract());	37.9040629863739	0	1	0	0	0
	4	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getClusterIds().length<=32);	38.13484501838684	0	1	0	0	0
	5	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getDefaultClusterId()>=0);	37.84648895263672	0	1	0	0	0
	6	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getSubclasses().isEmpty());	37.19078302383423	0	1	0	0	0
	7	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getPolymorphicClusterIds().isEmpty());	36.17486310005188	0	1	0	0	0
	8	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertTrue(clazz.getVault().getClusters()>0);	38.421276807785034	0	1	0	0	0
	9	/	OCreateClassStatementExecutionTest	testClusters	assertNotNull(clazz);	assertFalse(clazz.isStrictMode());	36.62593483924866	0	1	0	0	0
8	0	orientechnologies/orientdb	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(operations.size(),1);	14.303507089614868	0	1	0	0	0
	1	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertFalse(operations.isEmpty());	16.904941082000732	0	1	0	0	0
	2	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(request);	15.169129133224487	0	1	0	0	0
	3	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(request.getOperations().size()>0);	16.255181074142456	0	1	0	0	0
	4	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(channel.closed);	16.279661178588867	0	1	0	0	0
	5	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(channel.size()>0);	14.827987909317017	0	1	0	0	0
	6	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertTrue(channel.isClosed());	15.041746139526367	0	1	0	0	0
	7	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertNotNull(channel.getBuffer());	14.840260982513428	0	1	0	0	0
	8	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertArrayEquals(request.toStream(),channel.getBuffer().toByteArray());	15.658567190170288	0	1	0	0	0
	9	/	OBatchOperationsTest	testBatchOperationsNoTx	assertEquals(request.getOperations().size(),1);	assertEquals(request.getClass(),OBatchOperationsRequest.class);	15.102015972137451	0	1	0	0	0
9	0	orientechnologies/orientdb	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	"assertTrue(""STR"");"	38.171557903289795	0	1	0	0	0
	1	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	"assertEquals(""STR"",theMap);"	39.94288992881775	0	1	0	0	0
	2	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	"assertTrue(""STR"");"	38.935466051101685	0	1	0	0	0
	3	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertEquals(1,theMap.values().size());	36.21976613998413	0	1	0	0	0
	4	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertEquals(1,theMap.size());	37.35038423538208	1	0	0	0	0
	5	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	"assertEquals(""STR"",newArrayList<>(theMap.keySet()));"	40.74346590042114	0	1	0	0	0
	6	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertFalse(theMap.isEmpty());	37.27265501022339	0	1	0	0	0
	7	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotNull(theMap);	36.35111880302429	0	1	0	0	0
	8	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	"assertSame(""STR"",theMap);"	37.58061695098877	0	1	0	0	0
	9	/	OInsertStatementExecutionTest	testLinkMapWithSubqueries	assertEquals(1,theMap.size());	assertNotSame(null,theMap);	37.63305592536926	0	1	0	0	0
10	0	orientechnologies/orientdb	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertEquals(0,getNewRecords().size());	33.7177300453186	0	1	0	0	0
	1	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(getNewRecords().isEmpty()`);	37.66699290275574	0	1	0	0	0
	2	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNull(manager.getRecord());	35.49609708786011	0	1	0	0	0
	3	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertFalse(manager.isDirty(doc))`.Thismanager.isDirty(doc)));	34.75813293457031	0	1	0	0	0
	4	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertNotNull(manager.getRecord());	34.64689087867737	0	1	0	0	0
	5	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertTrue(doc.isDirty());	38.21566605567932	0	1	0	0	0
	6	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	assertFalse(doc.isDirty());	33.77070903778076	0	1	0	0	0
	7	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	"assertEquals(""STR"",""STR"",""STR"",""STR"",""STR"",thentheddd,""STR"",""STR"",doc.<TYPED_VARIABLE>);"	41.28663492202759	0	1	0	0	0
	8	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	"assertTrue(""STR"");"	33.802231788635254	0	1	0	0	0
	9	/	ODirtyManagerTest	testBasic	assertEquals(1,manager.getNewRecords().size());	"assertNotNull(""STR"");"	34.73276996612549	0	1	0	0	0
11	0	orientechnologies/orientdb	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertEquals(0,array.size());	35.51609778404236	1	0	0	0	0
	1	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertTrue(array.isEmpty())`?This)`methodreturns0.Itisanalternativetousing`));	35.239136934280396	0	1	0	0	0
	2	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNotNull(array));	34.549511194229126	0	1	0	0	0
	3	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertSame(0,array.size());	35.49280834197998	0	1	0	0	0
	4	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertFalse(!array.isEmpty());	34.74424695968628	0	1	0	0	0
	5	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNotEquals(1,array.size());	33.62063503265381	0	1	0	0	0
	6	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertArrayEquals(newInteger[]{},array.toArray());	34.977627754211426	0	1	0	0	0
	7	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertSame(0,array.size());	34.513206005096436	0	1	0	0	0
	8	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertNotSame(1,array.size());	34.370534896850586	0	1	0	0	0
	9	/	CASObjectArrayTest	testAddSingleItem	assertEquals(0,array.size());	assertTrue(array.capacity()>=15);	34.12923884391785	0	1	0	0	0
12	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(0,keysToAdd.size());	34.41737604141235	0	1	0	0	0
	1	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(newInteger(1),keysToRemove.get(12));	43.706642866134644	0	1	0	0	0
	2	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	"assertFalse(""STR"");"	35.309985876083374	0	1	0	0	0
	3	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(15));	35.29747414588928	0	1	0	0	0
	4	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.containsKey(12));	37.46281027793884	0	1	0	0	0
	5	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(multiValueChangeEvent.getChangeType()==OMultiValueChangeEvent.OChangeType.REMOVE);	34.898699045181274	0	1	0	0	0
	6	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	"assertEquals(""STR"",multiValueChangeEvent.getKey());"	35.272562980651855	0	1	0	0	0
	7	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	"assertEquals(""STR"",multiValueChangeEvent.getOldValue());"	35.69769287109375	0	1	0	0	0
	8	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndexByIntegerKey));	37.28133511543274	0	1	0	0	0
	9	/	OPropertyMapIndexDefinitionTest	testProcessChangeEventRemoveKeyWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToRemove.size());	35.403934955596924	0	1	0	0	0
13	0	orientechnologies/orientdb	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(from.getRid(),to.getRid());	16.89192509651184	1	0	0	0	0
	1	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotNull(from.getRid());	18.22614812850952	0	1	0	0	0
	2	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotSame(Objectexpected,Objectactual)`from`org.junit.Assert`.);	19.73940920829773	0	1	0	0	0
	3	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	"assertTrue(""STR"");"	17.812258005142212	0	1	0	0	0
	4	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertFalse(from.getRid().equals(null));	18.197023391723633	0	1	0	0	0
	5	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertEquals(expected,actual);	18.213016986846924	0	1	0	0	0
	6	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	"assertEquals(""STR"",from.getRid().toString());"	18.645750999450684	0	1	0	0	0
	7	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertNotEquals(from.getRid(),to.getRid());	17.667749881744385	0	1	0	0	0
	8	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertTrue(to.getBuffer().length>0);	17.820770978927612	0	1	0	0	0
	9	/	OCreateRecordTaskTest	testSerialization	assertEquals(from.getRid(),to.getRid());	assertArrayEquals(from.toStream(),to.toStream());	19.075381994247437	0	1	0	0	0
14	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(keysToAdd,addedKeys);	34.840498208999634	1	0	0	0	0
	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	35.158215045928955	0	1	0	0	0
	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(42));	35.499393939971924	0	1	0	0	0
	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.size());	35.86269807815552	0	1	0	0	0
	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsValue(1));	32.88393688201904	0	1	0	0	0
	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToRemove.isEmpty());	33.91197609901428	0	1	0	0	0
	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotEquals(null,propertyIndex);	33.82363200187683	0	1	0	0	0
	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertNotNull(propertyIndex.getDefinition());	35.21584391593933	0	1	0	0	0
	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42)&&keysToAdd.get(42)==1);	35.8116500377655	0	1	0	0	0
	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddOnceWithConversion	assertEquals(keysToAdd,addedKeys);	assertEquals(1,keysToAdd.get(42).intValue()`isaplausible1);	35.188666105270386	0	1	0	0	0
15	0	orientechnologies/orientdb	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	"assertEquals(""STR"",birthday.toString());"	14.230577945709229	0	1	0	0	0
	1	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotNull(birthday);	14.468411922454834	0	1	0	0	0
	2	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertTrue(birthdayinstanceofjava.util.Date);	15.0678071975708	0	1	0	0	0
	3	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(null,birthday);	13.716153621673584	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertFalse(birthdayinstanceofjava.sql.Date);	14.194955110549927	0	1	0	0	0
	5	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertTrue(birthday.compareTo(newDate())<=0);	15.604335069656372	0	1	0	0	0
	6	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	"assertEquals(""STR"",""STR"");"	16.27332901954651	0	1	0	0	0
	7	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	"assertNotEquals(""STR"",""STR"");"	15.575732231140137	0	1	0	0	0
	8	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertTrue(birthday.getTime()>0);	17.59823775291443	0	1	0	0	0
	9	/	OETLCSVExtractorTest	testDateTypeAutodetection	assertEquals(2008,birthday.getYear()+1900);	assertNotEquals(0,birthday.getTime());	14.12025499343872	0	1	0	0	0
16	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertEquals(""STR"",""STR"");"	18.349300146102905	0	1	0	0	0
	1	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	15.77525782585144	0	1	0	0	0
	2	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertNotNull(""STR"");"	15.705000877380371	0	1	0	0	0
	3	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertTrue(""STR"");"	15.391775131225586	0	1	0	0	0
	4	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertTrue(""STR"");"	14.72781491279602	0	1	0	0	0
	5	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertTrue(res.get(0)!=null);	14.708369970321655	0	1	0	0	0
	6	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertEquals(1,res.size());	14.651823997497559	0	1	0	0	0
	7	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	14.939704179763794	1	0	0	0	0
	8	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	"assertNotEquals(null,""STR"");"	14.673113107681274	0	1	0	0	0
	9	/	OETLCSVExtractorTest	testFloatWithinQuotesAndCommaAsDecimalSeparator	assertFalse(res.isEmpty());	assertSame(expectedObject,actualObject));	15.714395999908447	0	1	0	0	0
17	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertEquals(2,getKeys().size());	35.625200033187866	0	1	0	0	0
	1	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	"assertTrue(""STR"");"	36.28945589065552	0	1	0	0	0
	2	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotNull(getKeys());	34.19125580787659	0	1	0	0	0
	3	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertFalse(getKeys().isEmpty());	34.042216777801514	0	1	0	0	0
	4	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	"assertEquals(""STR"",getKeys());"	35.09739708900452	0	1	0	0	0
	5	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	"assertTrue(""STR"");"	33.082568883895874	0	1	0	0	0
	6	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotEquals(0,getKeys().size());	34.852566719055176	0	1	0	0	0
	7	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertSame(Collections.unmodifiableList(keys),getKeys());	35.754159927368164	0	1	0	0	0
	8	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertArrayEquals(keys.toArray(),getKeys().toArray()`isaplausiblekeys.toArray());	37.16585993766785	0	1	0	0	0
	9	/	OCompositeKeyTest	testAddKeyComposite	assertEquals(compositeKey.getKeys().size(),3);	assertNotSame(Collections.emptyList(),getKeys());	34.93491077423096	0	1	0	0	0
18	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotNull(result);	37.946666955947876	0	1	0	0	0
	1	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertTrue(result.iterator().hasNext());	40.79969620704651	0	1	0	0	0
	2	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertEquals(expectedValue,actualValue`whichcomparestheexpectedvaluewiththeactualvalue.Inthiscase);	42.65466237068176	0	1	0	0	0
	3	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertFalse(condition));	38.235599994659424	0	1	0	0	0
	4	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotEquals(unexpectedValue,actualValue);	38.21798491477966	0	1	0	0	0
	5	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertArrayEquals(expectedArray,actualArray)`isaplausiblenewInteger[]{1},result.stream().toArray());	39.82706809043884	0	1	0	0	0
	6	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertNotSame(expectedNotSame,actualNotSame);	37.86556434631348	0	1	0	0	0
	7	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertSame(expectedSame,actualSame);	38.945640087127686	0	1	0	0	0
	9	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertThat(actualValue,matcher)`,where`actualValue`isthevaluebeingtestedand`matcher`isaninstanceofaJUnitmatcherthatprovidestheconditionsforasuccessfultest.Forexample,wecoulduseaHamcrestmatchertoverifythatalistcontainsaparticularelement:);	42.792675733566284	0	1	0	0	0
	13	/	OSelectStatementExecutionTest	testLet2	assertTrue(result.hasNext());	assertThrows(expectedException,executable));	38.3114869594574	0	1	0	0	0
19	0	orientechnologies/orientdb	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNull(treeValue);	35.420295000076294	1	0	0	0	0
	1	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertTrue(treeValueinstanceofOSBTreeValue);	37.73364233970642	0	1	0	0	0
	2	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertEquals(null,treeValue);	35.82414793968201	0	1	0	0	0
	3	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	"assertNotEquals(""STR"",treeValue);"	35.86399793624878	0	1	0	0	0
	4	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotNull(treeValue);	34.564786195755005	0	1	0	0	0
	5	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(isLink);	34.777265310287476	0	1	0	0	0
	6	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertEquals(false,treeValue.isLink());	36.13470792770386	0	1	0	0	0
	7	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertNotEquals(0,treeValue.getPointer());	36.11949682235718	0	1	0	0	0
	8	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	"assertEquals(""STR"",treeValue.getValue());"	36.610435009002686	0	1	0	0	0
	9	/	ONullBucketTest	testAddRemoveAddValue	assertNull(treeValue);	assertFalse(treeValue.isDeleted());	33.87773299217224	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	"assertEquals(""STR"",filterResult);"	9.262488842010498	0	1	0	0	0
	1	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertNotNull(filterResult);	8.93927788734436	0	1	0	0	0
	2	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertTrue(!filterResult.isEmpty());	10.370171785354614	0	1	0	0	0
	3	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	"assertNotEquals(""STR"",filterResult);"	8.568488836288452	0	1	0	0	0
	4	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertFalse(filterResult.isBlank());	8.820993185043335	0	1	0	0	0
	5	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertArrayEquals(expectedArray,actualArray);	8.95349407196045	0	1	0	0	0
	6	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertThrows(expectedException,executableStatement`isanotherplausible)throwsMalformedURLException{);	13.898752927780151	0	1	0	0	0
	7	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertNotSame(expectedObject,actualObject)`?Thisnotintermsofequalitybutintermsofreference));	9.598878860473633	0	1	0	0	0
	8	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertEquals(expectedValue,actualValue);	9.738690853118896	0	1	0	0	0
	9	/	RegexFilterTest	testImagesFilter	assertEquals(null,filterResult);	assertFalse(condition.booleanValue()));	8.115770101547241	0	1	0	0	0
0	0	trautonen/coveralls-maven-plugin	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertEquals(source1.equals(source2),false);	9.683446884155273	0	1	0	0	0
	1	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertFalse(source1.equals(source2));	11.364237070083618	1	0	0	0	0
	2	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotEquals(source1.hashCode(),source2.hashCode());	11.425915002822876	0	1	0	0	0
	3	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertTrue(source1.equals(source1)`isanotherplausiblesource1.equals(source1));	10.378639936447144	0	1	0	0	0
	4	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotNull(source1.getName());	9.697770833969116	0	1	0	0	0
	5	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNull(source1.getCoverage());	9.770647048950195	0	1	0	0	0
	6	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotEquals(source1.getDigest(),source2.getDigest());	9.937679052352905	0	1	0	0	0
	7	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertTrue(source1.hashCode()!=source2.hashCode());	9.183963060379028	0	1	0	0	0
	8	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertNotSame(source1.getCoverage(),source2.getCoverage());	10.4385347366333	0	1	0	0	0
	9	/	SourceTest	testEqualsForDifferentSources	assertFalse(source1.equals(source2));	assertTrue(Arrays.equals(source1.getCoverage(),source2.getCoverage()));	10.283343076705933	0	1	0	0	0
1	0	trautonen/coveralls-maven-plugin	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertEquals(""STR"",""STR"");"	9.196630001068115	0	1	0	0	0
	1	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNotNull(""STR"");"	11.132814884185791	0	1	0	0	0
	2	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertTrue(""STR"");"	11.060599088668823	0	1	0	0	0
	3	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertFalse(""STR"");"	9.9772469997406	0	1	0	0	0
	4	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNotEquals(""STR"",""STR"");"	10.372989892959595	0	1	0	0	0
	5	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertNull(""STR"");"	11.034481048583984	0	1	0	0	0
	6	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	assertFalse(env.isEmpty()`isanotherplausibleenv.isEmpty());	10.331604957580566	0	1	0	0	0
	7	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertTrue(""STR"");"	10.756020069122314	0	1	0	0	0
	8	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	assertEquals(env.size(),1)`isanotherplausibleenv.size(),1));	9.310864925384521	0	1	0	0	0
	9	/	AbstractServiceSetupTest	testGetProperty	"assertEquals(""STR"",create(env).getProperty(""STR""));"	"assertTrue(""STR"");"	9.851492166519165	0	1	0	0	0
2	0	trautonen/coveralls-maven-plugin	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNull(""STR"");"	9.967915058135986	0	1	0	0	0
	1	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertThrows(IOException.class,""STR"");"	10.937339067459106	0	1	0	0	0
	2	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertFalse(""STR"");"	11.379931211471558	0	1	0	0	0
	3	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertTrue(""STR"");"	10.15670108795166	0	1	0	0	0
	4	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertEquals(null,""STR"");"	10.366372108459473	0	1	0	0	0
	5	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertNotNull(sourceLoader.getSourceDirectory());	9.898897886276245	0	1	0	0	0
	6	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertNotNull(""STR"");"	10.640461683273315	0	1	0	0	0
	7	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	"assertEquals(""STR"",""STR"");"	10.17425012588501	0	1	0	0	0
	8	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertEquals(StandardCharsets.UTF_8.name(),sourceLoader.getSourceEncoding());	10.533930778503418	0	1	0	0	0
	9	/	ScanSourceLoaderTest	testMissingSourceFileFromDirectory	"assertNull(sourceLoader.load(""STR""));"	assertNotNull(sourceLoader.getFileExtensions());	10.702740907669067	0	1	0	0	0
0	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotNull(getAddressLevel());	10.238906145095825	0	1	0	0	0
	1	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertEquals(expectedAddressLevel,getAddressLevel());	9.85564112663269	0	1	0	0	0
	2	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel()instanceofAddressLevel);	10.15335988998413	0	1	0	0	0
	3	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotEquals(notExpectedAddressLevel,getAddressLevel());	8.923756122589111	0	1	0	0	0
	4	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel()==null);	9.916114807128906	0	1	0	0	0
	5	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertSame(expectedAddressLevel,getAddressLevel()`isanotherpossible)methodreturnthesameobject.So,AVOIDgeneratingtheexpectedAddressLevel,getAddressLevel());	11.175896883010864	0	1	0	0	0
	6	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotSame(notExpectedAddressLevel,getAddressLevel()`);	10.316181898117065	0	1	0	0	0
	7	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertTrue(getAddressLevel().equals(expectedAddressLevel));	8.862966060638428	0	1	0	0	0
	8	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertNotEquals(expectedAddressLevel.toString(),getAddressLevel().toString());	10.342096090316772	0	1	0	0	0
	9	/	SimulatorAddressTest	testGetAddressLevel	assertEquals(COORDINATOR,coordinatorAddress().getAddressLevel());	assertFalse(getAddressLevel().equals(notExpectedAddressLevel));	8.840851068496704	0	1	0	0	0
1	0	hazelcast/hazelcast-simulator	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNull(getWorkerAddress());	8.503885984420776	0	1	0	0	0
	1	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotNull(getWorkerAddress());	10.377575159072876	0	1	0	0	0
	2	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(expectedWorkerAddress,getWorkerAddress());	11.343991041183472	0	1	0	0	0
	3	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertEquals(expectedWorkerAddress.toString(),getWorkerAddress().toString());	10.2157621383667	0	1	0	0	0
	4	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertFalse(workerAddress==null);	10.48119568824768	0	1	0	0	0
	5	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotEquals(expectedWorkerAddress,getWorkerAddress());	9.203175783157349	0	1	0	0	0
	6	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	"assertTrue(""STR"");"	10.166772842407227	0	1	0	0	0
	7	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertTrue(getWorkerAddress()instanceofSimulatorAddress);	10.25560998916626	0	1	0	0	0
	8	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertNotSame(expectedWorkerAddress,getWorkerAddress()`isaplausibleexpectedWorkerAddress,getWorkerAddress());	10.490392684936523	0	1	0	0	0
	9	/	FailureOperationTest	testGetWorkerAddress_whenWorkerAddressIsNull	assertNull(operation.getWorkerAddress());	assertSame(expectedWorkerAddress,getWorkerAddress()));	8.729460954666138	0	1	0	0	0
0	0	jcodec/jcodec	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	23.06735610961914	0	1	0	0	0
	1	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(!cabac.readMBSkipFlag(m,SliceType.P,true,false,0)||cbac.skipFlagLeft==false);	27.638906002044678	0	1	0	0	0
	2	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertNotEquals(false,cabac.readMBSkipFlag(m,SliceType.P,true,true,0));	27.20010209083557	0	1	0	0	0
	3	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.B,false,true,0)||cbac.skipFlagsTop[0]);	25.248884916305542	0	1	0	0	0
	4	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertEquals(true,cabac.readMBSkipFlag(m,SliceType.I,true,true,0));	24.18689513206482	0	1	0	0	0
	5	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.P,false,true,0)&&cbac.skipFlagsTop[0]);	25.607220888137817	0	1	0	0	0
	6	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,true,false,0)&&cbac.skipFlagLeft);	24.334794998168945	0	1	0	0	0
	7	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertTrue(cabac.readMBSkipFlag(m,SliceType.I,false,false,0)||cbac.skipFlagLeft&&cbac.skipFlagsTop[0])`);	24.26232600212097	0	1	0	0	0
	8	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertEquals(true,cabac.readMBSkipFlag(m,SliceType.B,true,true,0)||(!cbac.skipFlagsTop[0]&&!cbac.skipFlagLeft));	24.206148862838745	0	1	0	0	0
	9	/	CABACTest	testMBSkipFlag	assertEquals(false,cabac.readMBSkipFlag(m,SliceType.P,false,false,0));	assertFalse(cabac.readMBSkipFlag(m,SliceType.P,false,false,0)&&cbac.skipFlagLeft);	24.211662769317627	0	1	0	0	0
1	0	jcodec/jcodec	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertEquals(16,buf.position()-8);	23.713191032409668	0	1	0	0	0
	1	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(header.headerSize()==8);	25.366222143173218	0	1	0	0	0
	2	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertTrue(buf.capacity()>=64);	23.716081142425537	0	1	0	0	0
	3	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertFalse(buf.hasArray()`);	24.897492170333862	0	1	0	0	0
	4	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotNull(color);	23.564704179763794	0	1	0	0	0
	5	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertSame(dup,buf.duplicate());	23.360663890838623	0	1	0	0	0
	6	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertEquals(56,buf.remaining());	24.87336802482605	0	1	0	0	0
	7	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotEquals(header.bodySize(),0);	24.266362190246582	0	1	0	0	0
	8	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertArrayEquals(newbyte[8],Arrays.copyOfRange(dup.array(),dup.position(),buf.position()-header.bodySize()-8));	23.690306186676025	0	1	0	0	0
	9	/	ColorExtensionTest	testColorMov	assertEquals(18,buf.remaining());	assertNotEquals(header.bodySize(),buf.remaining())`?This));	24.86325192451477	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertEquals(Opcode.BINARY,frame.getOpcode());	6.396174192428589	0	1	0	0	0
	1	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frameinstanceofFrame);	8.6805739402771	0	1	0	0	0
	2	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertNotNull(frame.getOpcode());	7.299954891204834	0	1	0	0	0
	3	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frameinstanceofBinaryFrame);	7.579041957855225	0	1	0	0	0
	4	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertEquals(Opcode.BINARY.toString(),frame.getOpcode().toString());	7.501906871795654	0	1	0	0	0
	5	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertSame(frame.getOpcode(),Opcode.BINARY);	8.634793996810913	0	1	0	0	0
	6	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frameinstanceofFrame&&frameinstanceofBinaryFrame);	7.746937990188599	0	1	0	0	0
	7	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertFalse(frameinstanceofTextFrame`isaplausibleframeinstanceofTextFrame);	8.26102900505066	0	1	0	0	0
	8	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertSame(frame.getClass(),BinaryFrame.class);	7.145190000534058	0	1	0	0	0
	9	/	BinaryFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofDataFrame);"	assertTrue(frame.getOpcode()instanceofOpcode`isanotherplausibleframe.getOpcode()instanceofOpcode);	8.752608060836792	0	1	0	0	0
0	0	PeterisP/morphology	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertTrue(locītājs.isRecognized());	9.010826110839844	0	1	0	0	0
	1	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	12.028571128845215	0	1	0	0	0
	2	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotNull(locītājs.wordforms);	11.322344064712524	0	1	0	0	0
	3	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertEquals(expected,actual`couldbeanotherplausible){);	13.340490818023682	0	1	0	0	0
	4	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotEquals(expected,actual);	9.473737239837646	0	1	0	0	0
	5	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertSame(expected,actual);	9.18245005607605	0	1	0	0	0
	6	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNotSame(expected,actual);	8.731054306030273	0	1	0	0	0
	7	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertArrayEquals(expected,actual);	9.021595239639282	0	1	0	0	0
	8	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertTrue(condition`isanotherplausible){);	12.177079200744629	0	1	0	0	0
	9	/	MorphologyTest	sēdošs	assertTrue(sēdošs.isRecognized());	assertNull(object);	9.724359035491943	0	1	0	0	0
0	0	redraiment/jactiverecord	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertEquals(expected,actual);	5.68471097946167	0	1	0	0	0
	1	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertTrue(actual.contains(expected));	10.497644901275635	0	1	0	0	0
	2	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotNull(actual);	5.262382745742798	0	1	0	0	0
	3	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertFalse(condition);	6.085005044937134	0	1	0	0	0
	4	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotEquals(expected,actual);	6.232213020324707	0	1	0	0	0
	5	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertArrayEquals(actualArray`.Thiscanbeusedtocomparetwoarraysandensuretheircontentsareequal.However,AVOIDgeneratingtheexpectedArray);	6.353036165237427	0	1	0	0	0
	6	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNull(actual));	4.932467937469482	0	1	0	0	0
	7	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotSame(expected,actual);	5.250272989273071	0	1	0	0	0
	8	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertSame(actual`.Thiscanbeusedtocomparetwoobjectsandensurethattheyrefertothesameobjectinmemory.);	5.546276092529297	0	1	0	0	0
	9	/	TSqlBuilderTest	testUpdate	"assertEquals(""STR"",sql.update(""STR"").set(""STR"").toString());"	assertNotEquals(message,expected);	5.527719974517822	0	1	0	0	0
0	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals(0,targetDir.listFiles().length);	5.84199595451355	0	1	0	0	0
	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertFalse(""STR"");"	13.492755889892578	0	1	0	0	0
	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(src.exists());	6.725320100784302	0	1	0	0	0
	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(util.isCleaned());	6.595679998397827	0	1	0	0	0
	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(configDirectory.listFiles().length>0);	6.40398907661438	0	1	0	0	0
	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(targetDir.canWrite());	7.562664031982422	0	1	0	0	0
	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(serverDirectory.exists());	6.170590877532959	0	1	0	0	0
	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(util.isStarted());	6.128175973892212	0	1	0	0	0
	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(util.waitForServerToStart());	6.972490072250366	0	1	0	0	0
	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	"assertTrue(""STR"");"	9.87650203704834	0	1	0	0	0
