TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(expected,actual);	26.260223150253296	0	1	0	0	0
	1	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(actual);	8.581210851669312	0	1	0	0	0
	2	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(condition);	10.970505952835083	0	1	0	0	0
	3	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertFalse(condition);	10.200409173965454	0	1	0	0	0
	4	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(expected,actual);	9.736644983291626	0	1	0	0	0
	5	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertArrayEquals(expectedArray,actualArray);	8.474510908126831	0	1	0	0	0
	7	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertSame(expected,actual);	9.094292879104614	0	1	0	0	0
	8	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotSame(expected,actual);	8.092864990234375	0	1	0	0	0
	9	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNull(actual);	9.124714851379395	0	1	0	0	0
	12	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(expected,actual);	8.60434627532959	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertTrue(webSocketImplinstanceofWebSocketImpl);	8.819070816040039	0	1	0	0	0
	1	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotNull(webSocketImpl);	8.173818111419678	0	1	0	0	0
	2	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertEquals(ExpectedWebSocketImplClass.class,webSocketImpl.getClass());	8.319214105606079	0	1	0	0	0
	3	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotSame(ExpectedWebSocketImplClass.class,webSocketImpl.getClass());	8.713886976242065	0	1	0	0	0
	4	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertTrue(webSocketImpl.isOpen()`isaplausiblewebSocketImpl.isOpen());	8.988613843917847	0	1	0	0	0
	5	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertFalse(webSocketImpl.isClosed());	9.559530973434448	0	1	0	0	0
	6	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertEquals(expectedValue,actualValue);	10.881213903427124	0	1	0	0	0
	7	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertTrue(condition`isaplausiblecondition);	8.362773895263672	0	1	0	0	0
	8	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNotEquals(expectedValue,actualValue`isaplausibleexpectedValue);	8.245397806167603	0	1	0	0	0
	9	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	"assertNotNull(""STR"",webSocketImpl);"	assertNull(object)`isaplausibleobject));	8.153682231903076	0	1	0	0	0
0	0	redraiment/jactiverecord	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(""STR"",focal.join(Collections.singletonList(""STR""),null));"	6.550968170166016	0	1	0	0	0
	1	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	assertTrue()`:);	7.66887092590332	0	1	0	0	0
	2	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	???;	7.267275094985962	0	1	0	0	0
	3	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(""STR"",focal.join(Collections.singletonList(""STR""),""STR""));"	5.928238868713379	0	1	0	0	0
	4	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(focal.join(Collections.singletonList(""STR""),""STR"").contains(""STR""));"	6.912631988525391	0	1	0	0	0
	5	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(focal.join(Collections.singletonList(""STR""),""STR"").isEmpty());"	7.449052810668945	0	1	0	0	0
	6	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertEquals(focal.join(Arrays.asList(""test1"",""test2"",""test3""),""-"")`isaplausible""test1-test2-test3"",focal.join(Arrays.asList(""test1"",""test2"",""test3""),""-""));"	7.885272026062012	0	1	0	0	0
	7	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertNotEquals(focal.join(Arrays.asList(""test1"",""test2"",""test3""),""-"")`isaplausible""test-test-test"",focal.join(Arrays.asList(""test1"",""test2"",""test3""),""-""));"	7.814567804336548	0	1	0	0	0
	8	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertTrue(focal.join(Collections.emptyList(),""STR"").isEmpty());"	7.313047647476196	0	1	0	0	0
	9	/	SeqTest	testJoinDelimiterNull	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),null));"	"assertFalse(focal.join(Collections.singletonList(""test""),""-"").isEmpty()`isaplausiblefocal.join(Collections.singletonList(""test""),""-"").isEmpty());"	6.758647203445435	0	1	0	0	0
