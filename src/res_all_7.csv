TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	NanoHttpd/nanohttpd	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[1],this.testServer.headers.get(""Content-Type""));"	25.740381956100464	0	0	1	0	0
	1	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(StringUtils.join(expected, StringUtils.LINE_SEPARATOR) + StringUtils.LINE_SEPARATOR,outputStream.toString()`);	36.44944095611572	0	0	1	0	0
	2	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.toString().contains(responseBody));	18.81462812423706	0	0	1	0	0
	3	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertNotNull(this.testServer.response);	17.000123739242554	0	0	1	0	0
	4	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[1],this.testServer.getHeader(""Content-Type""));"	33.46277904510498	0	0	1	0	0
	5	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertNotNull(this.testServer.headers);	48.43385601043701	0	0	1	0	0
	6	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertTrue(testServer.headers.get(""Connection"").equals(""keep-alive""));"	37.82176494598389	0	0	1	0	0
	7	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertArrayEquals(expected,this.testServer.getOutput().split(""\\r?\\n""));"	32.42792510986328	0	0	1	0	0
	8	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(responseBody,this.testServer.response.getData());	16.662503004074097	0	0	1	0	0
	9	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertNull(this.testServer.serveUri);	37.45672869682312	0	0	1	0	0
	10	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(Status.OK,this.testServer.response.getStatus());	26.52566909790039	0	0	1	0	0
	11	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[0],this.testServer.response.getStatus() + "" "" + this.testServer.response.getReason());"	34.471635818481445	0	0	1	0	0
	12	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(5,lRs).}"" + ""<p noun_pool_objs =[83pbXz]"", NanoHTTPD.MIME_HTML, output.getResponse());"	40.37857103347778	0	0	1	0	0
	13	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[3],this.testServer.response.getHeader(CONNECTION));	42.6318621635437	0	0	1	0	0
	14	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(NanoHTTPD.MIME_HTML,this.testServer.response.getContentType());	35.84403085708618	0	0	1	0	0
	15	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.toString().startsWith(expected[0]));	18.20529317855835	0	0	1	0	0
	16	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(expected[5],this.testServer.response.getData());	14.974995851516724	0	0	1	0	0
	17	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(this.testServer.response.getData().contains(responseBody));	24.060054063796997	0	0	1	0	0
	18	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[2],this.testServer.response.getHeader(""Date""));"	15.108815908432007	0	0	1	0	0
	19	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertAR(lineAssertionHelper.readlines(expectedResponse),elemActualResponse);	73.01140022277832	0	0	1	0	0
	20	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	"assertEquals(expected[4],this.testServer.headers.get(""content-length""));"	40.43719816207886	0	0	1	0	0
	21	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertNotNull(this.testServer.servedUri);	24.301865816116333	0	0	1	0	0
	22	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.toString().contains(expected[2]));	17.68968677520752	0	0	1	0	0
	23	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertNotNull(this.tempFileManager);	15.910481214523315	0	0	1	0	0
	24	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertEquals(StringUtils.join(expected, StringUtils.LINE_SEPARATOR),outputStream.toString());	31.13007688522339	0	0	1	0	0
	25	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertTrue(outputStream.toString().contains(expected[1]));	16.08967685699463	0	0	1	0	0
	26	/	HttpGetRequestTest	testOutputOfServeSentBackToClient	assertResponse(outputStream,expected);	assertFalse(this.testServer.response.isCloseConnection());	16.013883113861084	0	0	1	0	0
0	0	khennig/jpql-querybuilder	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertEquals(""STR"",oc.render());"	7.037760019302368	0	1	0	0	0
	1	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertTrue(""STR"");"	9.222730875015259	0	1	0	0	0
	2	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertNotNull(oc.render());	7.302921295166016	0	1	0	0	0
	3	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertThat(oc.render(),is(instanceOf(String.class)));	6.625208139419556	0	0	1	0	0
	4	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertSame(""STR"",oc.render());"	5.650273084640503	0	0	1	0	0
	5	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertFalse(false);	6.769694805145264	0	1	0	0	0
	6	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertArrayEquals(expectedArray,resultArray);	6.787272930145264	0	0	1	0	0
	7	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertNotSame(""STR"",""STR"");"	8.043220043182373	0	1	0	0	0
	8	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertThat(oc.render(),is(notNullValue()));	6.223423957824707	0	0	1	0	0
	9	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertThat(oc.render(),""STR"");"	6.396405935287476	0	0	1	0	0
	10	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertArrayEquals(expectedArray,resultArray);	5.905946969985962	0	0	1	0	0
	11	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertThrows(Exception.class,()->{//CodeblockthatthrowsException});	6.7118918895721436	0	1	0	0	0
	12	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertThat(collection,hasSize(equalTo(expectedSize)));	6.4349400997161865	0	0	1	0	0
	13	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	"assertNotEquals(""STR"",""STR"");"	7.238619804382324	0	1	0	0	0
	14	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertThat(2,is(2));	6.003507852554321	0	0	1	0	0
	15	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertTimeout(Duration.ofMillis(100),()->{//Codeblockthattakeslessthan100mstoexecute});	8.69467282295227	0	1	0	0	0
	16	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertArrayEquals(expectedArray,resultArray);	5.200711965560913	0	0	1	0	0
	17	/	OrderColumnTest	renderDesc	"assertThat(oc.render()).isEqualTo(""STR"");"	assertNotSame(expectedObject,actualObject);	5.295258045196533	0	0	1	0	0
