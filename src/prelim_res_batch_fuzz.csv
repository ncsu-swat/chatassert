TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Sorted
0	0	adlnet/jxapi	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotSame(expected,actual);	63.87235212	0	0
0	1	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotNull(actual);	63.87235212	1	0
0	2	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertThat(actual,is(expected));	63.87235212	0	0
0	3	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertEquals(expected,actual);	63.87235212	0	0
0	4	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNull(actual);	63.87235212	0	0
0	5	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	63.87235212	0	0
0	6	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertNotEquals(expected,actual);	63.87235212	0	0
0	7	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertFalse(condition);	63.87235212	0	0
0	8	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertSame(expected,actual);	63.87235212	0	0
0	9	/	ActivityDefinitionTest	testSetType	assertNotNull(actual);	assertTrue(condition);	63.87235212	0	0
1	0	adlnet/jxapi	VerbsTest	testVoided	assertNotNull(actual);	assertNotNull(actual);	49.65318823	1	0
1	1	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotSame(Verbs.createVerb("STR"),actual);	49.65318823	0	0
1	2	/	VerbsTest	testVoided	assertNotNull(actual);	assertEquals("STR",actual.getName());	49.65318823	0	0
1	3	/	VerbsTest	testVoided	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getAliases());	49.65318823	0	0
1	4	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals(Verbs.createVerb("STR"),actual);	49.65318823	0	0
1	5	/	VerbsTest	testVoided	assertNotNull(actual);	assertSame(Verbs.createVerb("STR"),actual);	49.65318823	0	0
1	6	/	VerbsTest	testVoided	assertNotNull(actual);	assertThrows(IllegalArgumentException.class,()->Verbs.createVerb(null));	49.65318823	0	0
1	7	/	VerbsTest	testVoided	assertNotNull(actual);	assertFalse(actual.isNotVoided());	49.65318823	0	0
1	8	/	VerbsTest	testVoided	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	49.65318823	0	0
1	9	/	VerbsTest	testVoided	assertNotNull(actual);	assertTrue(actual.isVoided());	49.65318823	0	0
2	0	adlnet/jxapi	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotSame(expected,actual);	41.38656282	0	0
2	1	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertEquals(expected,actual);	41.38656282	0	0
2	2	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	41.38656282	0	0
2	3	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotEquals(expected,actual);	41.38656282	0	0
2	4	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNotNull(object);	41.38656282	0	0
2	5	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertNull(object);	41.38656282	0	0
2	6	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertFalse(condition);	41.38656282	0	0
2	7	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertSame(expected,actual);	41.38656282	0	0
2	8	/	SubStatementTest	testGetTimestamp	assertNotNull(actual);	assertTrue(condition);	41.38656282	0	0
3	0	orientechnologies/orientdb	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(internal.getActiveIntent());	776.0850611	0	0
3	1	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(getActiveIntent()instanceofOIntent);	776.0850611	0	0
3	2	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotNull(db.getActiveIntent());	776.0850611	1	0
3	3	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(intent,getActiveIntent());	776.0850611	0	0
3	4	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertEquals(OIntent.class,getActiveIntent().getClass());	776.0850611	0	0
3	5	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertTrue(db.getActiveIntent()instanceofOIntentMassiveInsert);	776.0850611	0	0
3	6	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(getActiveIntent(),internal.getActiveIntent());	776.0850611	0	0
3	7	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotEquals(null,db.getActiveIntent());	776.0850611	0	0
3	8	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertNotSame(internal.getActiveIntent(),getActiveIntent());	776.0850611	0	0
3	9	/	ODatabaseDocumentTxTest	testReturnDeclaredIntent	assertNotNull(db.getActiveIntent());	assertSame(intent,getActiveIntent());	776.0850611	0	0
4	0	orientechnologies/orientdb	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotNull(buffer1);	253.2837079	0	0
4	1	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(storedVar,var);	253.2837079	1	0
4	2	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertTrue(storedVar>var);	253.2837079	0	0
4	3	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertFalse(storedVar<var);	253.2837079	0	0
4	4	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNull(buffer2.get(9));	253.2837079	0	0
4	5	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertEquals(buffer1.get(9),buffer.get(0));	253.2837079	0	0
4	6	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotSame(buffer,buffer2);	253.2837079	0	0
4	7	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertSame(buffer,buffer1);	253.2837079	0	0
4	8	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertNotEquals(buffer1.get(8),buffer.get(1));	253.2837079	0	0
4	9	/	OByteBufferUtilsTest	testSplitShort	assertEquals(storedVar,var);	assertArrayEquals(buffer.array(),buffer2.array());	253.2837079	0	0
5	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(5,qResult.size());	211.9505601	0	0
5	1	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(1,qResult.get(0).field("STR"));	211.9505601	0	0
5	2	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertFalse(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	211.9505601	0	0
5	3	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult.get(0).field("STR"));	211.9505601	0	0
5	4	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.isEmpty());	211.9505601	0	0
5	5	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals(0,qResult.size());	211.9505601	0	0
5	6	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.stream().anyMatch(doc->doc.field("STR").equals("STR")));	211.9505601	0	0
5	7	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertNotNull(qResult);	211.9505601	0	0
5	8	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertEquals("STR",qResult.get(0).field("STR"));	211.9505601	0	0
5	9	/	OMatchStatementExecutionTest	testMaxDepthArrow	assertEquals(2,qResult.size());	assertTrue(qResult.size()>3);	211.9505601	0	0
6	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertFalse(getParamCount()==0);	256.250741	0	0
6	1	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertTrue(getParamCount()>0);	256.250741	0	0
6	2	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotSame(simpleKeyIndexDefinition.getKeyType(),OType.DOUBLE);	256.250741	0	0
6	3	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertEquals(1,getParamCount());	256.250741	0	0
6	4	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNull(null);	256.250741	0	0
6	5	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotNull(keyTypes);	256.250741	0	0
6	6	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(0,getParamCount());	256.250741	0	0
6	7	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	???;	256.250741	0	0
6	8	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertNotEquals(keyTypes.length,0);	256.250741	0	0
6	9	/	OSimpleKeyIndexDefinitionTest	testParamCountOneItem	assertEquals(keyIndexDefinition.getParamCount(),1);	assertSame(simpleKeyIndexDefinition.getKeyType(),OType.INTEGER);	256.250741	0	0
7	0	orientechnologies/orientdb	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(doc.containsField("STR"));	235.648314	0	0
7	1	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertFalse(doc2.containsField("STR"));	235.648314	0	0
7	2	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertTrue(getReal().newRecords.contains(doc));	235.648314	0	0
7	3	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertEquals("STR",doc.field("STR"));	235.648314	0	0
7	4	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(doc,manager.getRecord());	235.648314	0	0
7	5	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(manager);	235.648314	0	0
7	6	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotNull(doc);	235.648314	0	0
7	7	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertSame(getReal().newRecords,getNewRecords());	235.648314	0	0
7	8	/	ODirtyManagerTest	testLink	assertEquals(2,manager.getNewRecords().size());	assertNotEquals(doc,doc2);	235.648314	0	0
8	0	orientechnologies/orientdb	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStopped());	92.51036024	0	0
8	1	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertTrue(proc.getPipeline().isStarted());	92.51036024	0	0
8	2	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotEquals("STR",proc.getExtractor().getCurrentRecord().toString());	92.51036024	0	0
8	3	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotNull(proc);	92.51036024	0	0
8	4	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotEquals(0,proc.getExtractor().getProcessedRecords());	92.51036024	0	0
8	5	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNull(proc.getError());	92.51036024	0	0
8	6	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(0,proc.getExtractor().getTotalRecords());	92.51036024	0	0
8	7	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertEquals(1,proc.getLoader().getTotalRecords());	92.51036024	0	0
8	8	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertNotSame(proc.getExtractor(),proc.getLoader());	92.51036024	0	0
8	9	/	OETLFieldTransformerTest	testExpression	assertEquals(1,getResult().size());	assertFalse(proc.isStopped());	92.51036024	0	0
9	0	orientechnologies/orientdb	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertSame(result,db.query("STR"));	255.4530323	0	0
9	1	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotNull(result);	255.4530323	0	0
9	2	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotEquals(2L,result.getProperty("STR"));	255.4530323	0	0
9	3	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertFalse(result.hasNext());	255.4530323	0	0
9	4	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotEquals(1L,result.getProperty("STR"));	255.4530323	0	0
9	5	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNull(result.getProperty("STR"));	255.4530323	0	0
9	6	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertNotSame(result,db.query("STR"));	255.4530323	0	0
9	7	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(1L,result.getProperty("STR"));	255.4530323	0	0
9	8	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertTrue(result.hasNext());	255.4530323	1	0
9	9	/	OSelectStatementExecutionTest	testLet1Long	assertTrue(result.hasNext());	assertEquals(2L,result.getProperty("STR"));	255.4530323	0	0
10	0	orientechnologies/orientdb	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{true},newboolean[]{doc.isDirty()});	218.5843279	0	0
10	1	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	218.5843279	1	0
10	2	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	218.5843279	0	0
10	3	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	218.5843279	0	0
10	4	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertTrue(doc.isDirty());	218.5843279	0	0
10	5	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	218.5843279	0	0
10	6	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	218.5843279	0	0
10	7	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	218.5843279	0	0
10	8	/	TrackedListTest	testAddAllNotificationThree	assertFalse(doc.isDirty());	assertSame(true,doc.isDirty());	218.5843279	0	0
11	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResultinstanceofOResultSet);	213.5021718	0	0
11	1	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext());	213.5021718	1	0
11	2	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals("STR",qResult.next().getProperty("STR"));	213.5021718	0	0
11	3	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(!qResult.hasNext());	213.5021718	0	0
11	4	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotEquals(OResultSet.class,qResult.getClass());	213.5021718	0	0
11	5	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertNotNull(qResult);	213.5021718	0	0
11	6	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertEquals(OResultSet.class,qResult.getClass());	213.5021718	0	0
11	7	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(qResult.hasNext());	213.5021718	0	0
11	8	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertTrue(qResult.hasNext()&&!qResult.hasNext());	213.5021718	0	0
11	9	/	OMatchStatementExecutionNewTest	testFriendsWithNameArrows	assertTrue(qResult.hasNext());	assertFalse(!qResult.hasNext());	213.5021718	0	0
12	0	jcodec/jcodec	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(20),test.get(24));	247.5916271	0	0
12	1	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(Integer.valueOf(11),test.get(24));	247.5916271	1	0
12	2	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotNull(test.get(24));	247.5916271	0	0
12	3	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertSame(Integer.valueOf(11),test.get(24));	247.5916271	0	0
12	4	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(Integer.valueOf(10),test.get(24));	247.5916271	0	0
12	5	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertEquals(test.get(24).toString(),String.CASE_INSENSITIVE_ORDER);	247.5916271	0	0
12	6	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertTrue(test.get(24)instanceofInteger);	247.5916271	0	0
12	7	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertThrows(NullPointerException.class,()->test.get(24));	247.5916271	0	0
12	8	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotSame(Integer.valueOf(10),test.get(24));	247.5916271	0	0
12	9	/	CollectionsTest	testIntObjectMap	assertEquals(Integer.valueOf(11),test.get(24));	assertNotEquals(null,test.get(24));	247.5916271	0	0
13	0	jcodec/jcodec	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotNull(readInterIntraUvMode(5,decoder,c));	718.5232902	0	0
13	1	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertEquals(5,readInterIntraUvMode(0,decoder,c));	718.5232902	0	0
13	2	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertTrue(readInterIntraUvMode(2,decoder,c)>0);	718.5232902	0	0
13	3	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	718.5232902	0	0
13	4	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotEquals(7,readInterIntraUvMode(1,decoder,c));	718.5232902	0	0
13	5	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNull(readInterIntraUvMode(4,decoder,c));	718.5232902	0	0
13	6	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertFalse(readInterIntraUvMode(3,decoder,c)==10);	718.5232902	0	0
13	7	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertNotSame(decoder,readInterIntraUvMode(6,decoder,c));	718.5232902	0	0
13	8	/	ModeInfoTest	testUVMode	assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));	assertSame(c,readInterIntraUvMode(7,decoder,c));	718.5232902	0	0
14	0	fabric8io/fabric8-maven-plugin	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals("STR",kindAndName.getKind());	102.836391	0	0
14	1	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals("STR",kindAndName.getName());	102.836391	0	0
14	2	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotNull(secondKindAndName);	102.836391	0	0
14	3	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertEquals(kindAndName,secondKindAndName);	102.836391	0	0
14	4	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertSame(kindAndName,secondKindAndName);	102.836391	0	0
14	5	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotEquals(kindAndName,thirdKindAndName);	102.836391	0	0
14	6	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNull(kindAndName);	102.836391	0	0
14	7	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertTrue(kindAndName.getKind().equals("STR"));	102.836391	0	0
14	8	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertNotSame(kindAndName,thirdKindAndName);	102.836391	0	0
14	9	/	KindAndNameTest	equalsTest	assertTrue(kindAndName.equals(kindAndName));	assertFalse(kindAndName.getKind().equals("STR"));	102.836391	0	0
15	0	fabric8io/fabric8-maven-plugin	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertSame(object1,object2);	55.11753011	0	0
15	1	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertEquals("STR",config.get(Configs.Key.SOME_KEY));	55.11753011	0	0
15	2	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(string.contains(substring));	55.11753011	0	0
15	3	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertNotSame(object1,object2);	55.11753011	0	0
15	4	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertFalse(condition);	55.11753011	0	0
15	5	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(list.isEmpty());	55.11753011	0	0
15	6	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertNotNull(config.get(Configs.Key.SOME_KEY));	55.11753011	0	0
15	7	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertEquals(expectedValue,actualValue);	55.11753011	0	0
15	8	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(collection.contains(element));	55.11753011	0	0
15	9	/	EnricherConfigTest	simple	assertEquals("STR",config.get(Config.type));	assertTrue(condition);	55.11753011	0	0
16	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(pConfig.prepareProcessors(getAllTestData(),"STR"),filtered);	94.37704515	0	0
16	1	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(0,filtered.size());	94.37704515	0	0
16	2	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotEquals(0,pConfig.prepareProcessors(getAllTestData(),"STR").size());	94.37704515	0	0
16	3	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.contains(null));	94.37704515	0	0
16	4	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.isEmpty());	94.37704515	0	0
16	5	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(10,pConfig.prepareProcessors(getAllTestData(),"STR").size());	94.37704515	0	0
16	6	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertEquals(3,pConfig.prepareProcessors(getAllTestData(),"STR").size());	94.37704515	0	0
16	7	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotNull(pConfig);	94.37704515	0	0
16	8	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertTrue(pConfig.prepareProcessors(getAllTestData(),"STR").contains(filter));	94.37704515	0	0
16	9	/	ProcessorConfigTest	incAndExc	assertTrue(contains(filtered,"STR"));	assertNotSame(getAllTestData(),filtered);	94.37704515	0	0
17	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedSize,result.size());	83.39675069	0	0
17	1	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotNull(result);	83.39675069	0	0
17	2	/	ProfileUtilTest	multiple	assertNotNull(is);	assertEquals(expectedProfile.hashCode(),result.get(0).hashCode());	83.39675069	0	0
17	3	/	ProfileUtilTest	multiple	assertNotNull(is);	assertFalse(result.isEmpty());	83.39675069	0	0
17	4	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotSame(expectedProfile,result.get(0));	83.39675069	0	0
17	5	/	ProfileUtilTest	multiple	assertNotNull(is);	assertThrows(IOException.class,()->focalMethodThrowsIOException());	83.39675069	0	0
17	6	/	ProfileUtilTest	multiple	assertNotNull(is);	assertNotEquals(expectedProfile,result.get(0));	83.39675069	0	0
17	7	/	ProfileUtilTest	multiple	assertNotNull(is);	assertArrayEquals(expectedProfiles.toArray(),result.toArray());	83.39675069	0	0
17	8	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(result.contains(expectedProfile));	83.39675069	0	0
17	9	/	ProfileUtilTest	multiple	assertNotNull(is);	assertTrue(result.stream().allMatch(p->p.getName().startsWith("STR")));	83.39675069	0	0
18	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	159.6506631	0	0
18	1	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertArrayEquals(expectedArray,getInitContainer(builder,"STR"));	159.6506631	0	0
18	2	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotSame(expectedObj,getInitContainer(builder,"STR"));	159.6506631	0	0
18	3	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNull(getInitContainer(builder,"STR"));	159.6506631	0	0
18	4	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	159.6506631	0	0
18	5	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals(expectedArray,getInitContainer(builder,"STR"));	159.6506631	0	0
18	6	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertNotEquals("STR",getInitContainer(builder,"STR"));	159.6506631	0	0
18	7	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR"));	159.6506631	0	0
18	8	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertFalse(hasInitContainer(builder,"STR"));	159.6506631	0	0
18	9	/	InitContainerHandlerTest	removeOne	assertTrue(handler.hasInitContainer(builder,"STR"));	assertSame(expectedObj,getInitContainer(builder,"STR"));	159.6506631	0	0
19	0	cucumber-ltd/cucumber-pro-plugin-jvm	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertEquals(expectedUrl,url);	72.78742504	0	0
19	1	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(url.startsWith(expectedPrefix));	72.78742504	0	0
19	2	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotEquals(unexpectedUrl,url);	72.78742504	0	0
19	3	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertSame(expectedUrl,url);	72.78742504	0	0
19	4	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotSame("STR",expectedUrl,url);	72.78742504	0	0
19	5	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertFalse(url.startsWith(unexpectedPrefix));	72.78742504	0	0
19	6	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNotNull(url);	72.78742504	0	0
19	7	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertFalse(url.isEmpty());	72.78742504	0	0
19	8	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertTrue(url.isEmpty());	72.78742504	0	0
19	9	/	CucumberProResultsUrlBuilderTest	builds_url_for_saas_by_default	assertEquals("STR",url);	assertNull(url);	72.78742504	0	0
20	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	unset_value_is_null	assertTrue(config.isNull("STR"));	???;	51.786659	0	0
21	0	OpenLiberty/ci.common	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertSame(serverEnvFile,newFile(serverDirectory.getCanonicalPath()+"STR"));	49.51444292	0	0
21	1	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertEquals("STR",newString(Files.readAllBytes(serverEnvBackup.toPath())));	49.51444292	0	0
21	2	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNull(serverEnvFile.getParentFile());	49.51444292	0	0
21	3	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvFile.exists());	49.51444292	0	0
21	4	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotNull(serverEnvBackup.getParentFile());	49.51444292	0	0
21	5	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotSame(serverEnvBackup,serverEnvFile);	49.51444292	0	0
21	6	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertFalse(serverEnvBackup.exists());	49.51444292	0	0
21	7	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(serverEnv.toPath()));	49.51444292	0	0
21	8	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertNotEquals("STR",newString(Files.readAllBytes(serverEnvBackup.toPath())));	49.51444292	0	0
21	9	/	DevUtilTest	testCleanupServerEnvBak	assertTrue(serverEnv.exists());	assertTrue(serverEnvBackup.delete());	49.51444292	0	0
22	0	OpenLiberty/ci.common	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotSame("STR",fileString);	54.91417074	0	0
22	1	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertSame("STR",fileString);	54.91417074	0	0
22	2	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals("STR",fileString);	54.91417074	0	0
22	3	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotNull(fileString);	54.91417074	0	0
22	4	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertArrayEquals("STR".getBytes(),fileString.getBytes());	54.91417074	0	0
22	5	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertTrue(util.readFile(tempFile).contains("STR"));	54.91417074	0	0
22	6	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertEquals("STR",fileString);	54.91417074	0	0
22	7	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertFalse(fileString.isEmpty());	54.91417074	0	0
22	8	/	DevUtilTest	testReadFileToString	assertTrue(fileString.equals("STR"));	assertNotEquals(null,fileString);	54.91417074	0	0
23	0	OpenLiberty/ci.common	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists()&&targetFile.length()>0);	58.11437583	0	0
23	1	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(srcDir));	58.11437583	0	0
23	2	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertNotNull(targetFile);	58.11437583	0	0
23	3	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals("STR",targetFile.getName());	58.11437583	0	0
23	4	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertFalse(targetFile.exists());	58.11437583	0	0
23	5	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.isFile());	58.11437583	0	0
23	6	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.exists());	58.11437583	1	0
23	7	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertEquals(newFile(targetDir,"STR").getCanonicalPath(),targetFile.getCanonicalPath());	58.11437583	0	0
23	8	/	DevUtilTest	testCopyFile	assertTrue(targetFile.exists());	assertTrue(targetFile.getParentFile().equals(targetDir));	58.11437583	0	0
24	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertFalse(evt.getLoggerName().equals("STR"));	45.13249707	0	0
24	1	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotNull(filter.decide(evt));	45.13249707	0	0
24	2	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNull(filter.decide(null));	45.13249707	0	0
24	3	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.DENY,filter.decide(null));	45.13249707	0	0
24	4	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertArrayEquals(newObject[]{FilterReply.DENY},newObject[]{filter.decide(evt)});	45.13249707	0	0
24	5	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertTrue(evt.getLoggerName().startsWith("STR"));	45.13249707	0	0
24	6	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotSame(FilterReply.ACCEPT,filter.decide(evt));	45.13249707	0	0
24	7	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	45.13249707	1	0
24	8	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	45.13249707	0	0
24	9	/	DroppingRavenLoggingFilterTest	verifyFilterDeniesSentryLoggers	assertEquals(FilterReply.DENY,filter.decide(evt));	assertSame(FilterReply.DENY,filter.decide(evt));	45.13249707	0	0
25	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult.length(),normalizedUrl.length());	120.315819	0	0
25	1	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(testSourceUrl.getProtocol()));	120.315819	0	0
25	2	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	120.315819	0	0
25	3	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	120.315819	0	0
25	4	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceUrl.getRef());	120.315819	0	0
25	5	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	120.315819	0	0
25	6	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	120.315819	0	0
25	7	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	120.315819	0	0
25	8	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(urlToFilter.isEmpty());	120.315819	0	0
25	9	/	BasicURLNormalizerTest	testQuerySort	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlToFilter.contains(testSourceUrl.getHost()));	120.315819	0	0
26	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	124.1377342	0	0
26	1	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	124.1377342	0	0
26	2	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	124.1377342	0	0
26	3	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testUrl,normalizedUrl);	124.1377342	0	0
26	4	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(testUrl.toCharArray(),normalizedUrl.toCharArray());	124.1377342	0	0
26	5	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	124.1377342	0	0
26	6	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.contains("STR"));	124.1377342	0	0
26	7	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	124.1377342	0	0
26	8	/	BasicURLNormalizerTest	testRemoveAllQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(urlFilter.filter(null,null,null));	124.1377342	0	0
27	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(urlWithEscapedCharacters.length()>0);	131.5436199	0	0
27	1	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	131.5436199	0	0
27	2	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(sourceUrl,testSourceUrl);	131.5436199	0	0
27	3	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	131.5436199	0	0
27	4	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	131.5436199	0	0
27	5	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	131.5436199	0	0
27	6	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	131.5436199	0	0
27	7	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(urlWithEscapedCharacters,testUrl);	131.5436199	0	0
27	8	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceMetadata);	131.5436199	0	0
27	9	/	BasicURLNormalizerTest	testProperURLEncodingWithBackSlash	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	131.5436199	0	0
28	0	hazelcast/hazelcast-simulator	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.CLIENT,result.get(0).getTargetType());	84.45892286	0	0
28	1	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.PREFER_CLIENT));	84.45892286	0	0
28	2	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertNotNull(result);	84.45892286	0	0
28	3	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.PREFER_CLIENT,result.get(2).getTargetType());	84.45892286	0	0
28	4	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.stream().anyMatch(w->w.getTargetType()==TargetType.MEMBER));	84.45892286	0	0
28	5	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(3,result.size());	84.45892286	0	0
28	6	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.CLIENT));	84.45892286	0	0
28	7	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertTrue(result.isEmpty());	84.45892286	0	0
28	8	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertFalse(result.stream().anyMatch(w->w.getTargetType()==TargetType.ALL));	84.45892286	0	0
28	9	/	WorkerQueryTest	workerTags	assertEquals(asList(list.get(0),list.get(2)),result);	assertEquals(TargetType.MEMBER,result.get(1).getTargetType());	84.45892286	0	0
29	0	hazelcast/hazelcast-simulator	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.contains("STR"));	73.1538229	0	0
29	1	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertEquals(0,registry.size());	73.1538229	0	0
29	2	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotEquals(5,registry.size());	73.1538229	0	0
29	3	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry);	73.1538229	0	0
29	4	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertSame(agents,registry);	73.1538229	0	0
29	5	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertFalse(registry.contains("STR"));	73.1538229	0	0
29	6	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNull(registry.get("STR"));	73.1538229	0	0
29	7	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertTrue(registry.isEmpty());	73.1538229	0	0
29	8	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotNull(registry.get("STR"));	73.1538229	0	0
29	9	/	SimulatorUtilsTest	testLoadComponentRegister_emptyFile_withoutSizeCheck	assertEquals(0,registry.agentCount());	assertNotSame(agents,registry);	73.1538229	0	0
30	0	hazelcast/hazelcast-simulator	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertEquals(2,registry.agentCount());	74.28058791	1	0
30	1	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotEquals(0,registry.agentCount());	74.28058791	0	0
30	2	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertFalse(registry.agents.isEmpty());	74.28058791	0	0
30	3	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.entrySet().stream().anyMatch(e->e.getKey().equals("STR")&&e.getValue().equals("STR")));	74.28058791	0	0
30	4	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotSame(2,registry.agentCount());	74.28058791	0	0
30	5	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNotNull(registry.getAgent("STR"));	74.28058791	0	0
30	6	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertNull(registry.getAgent("STR"));	74.28058791	0	0
30	7	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertSame(agentsFile,registry.getAgentsFile());	74.28058791	0	0
30	8	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.containsKey("STR"));	74.28058791	0	0
30	9	/	AgentsFileTest	testSave	assertEquals(2,registry.agentCount());	assertTrue(registry.agents.containsValue("STR"));	74.28058791	0	0
31	0	javadev/moneytostr-russian	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertEquals(MoneyToStr.Currency.UAH,moneyToStrUAH.getCurrency());	47.39478302	0	0
31	1	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(moneyToStrUAH.getCurrency(),moneyToStrRUR.getCurrency());	47.39478302	0	0
31	2	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotSame("STR",fractPart,theMoney);	47.39478302	0	0
31	3	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotNull(moneyToStrRUR.getCurrency());	47.39478302	0	0
31	4	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertTrue(moneyToStrEURRUS.getCurrency()instanceofMoneyToStr.Currency);	47.39478302	0	0
31	5	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertFalse(moneyToStrUSDENG.getCurrency()==MoneyToStr.Currency.RUR);	47.39478302	0	0
31	6	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNull(intPart);	47.39478302	0	0
31	7	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertSame(intPart,theMoney.longValue());	47.39478302	0	0
31	8	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertNotEquals(moneyToStrUAHENG.getCurrency(),moneyToStrUAH.getCurrency());	47.39478302	0	0
31	9	/	MoneyToStrTest	checkPER100	assertEquals("STR",moneyToStrPER100.convert(V_1_01D));	assertArrayEquals("STR",newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getStringArray());	47.39478302	0	0
32	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertSame(0,focal.count(poolKey));	93.62941599	0	0
32	1	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(focal.count(poolKey)==10);	93.62941599	0	0
32	2	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(null);	93.62941599	0	0
32	3	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotSame(5,focal.count(poolKey));	93.62941599	0	0
32	4	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertArrayEquals(2,3});	93.62941599	0	0
32	5	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,focal.count(poolKey));	93.62941599	0	0
32	6	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(5,focal.count(poolKey));	93.62941599	0	0
32	7	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(focal.count(poolKey)>0);	93.62941599	0	0
32	8	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertThat(focal.count(poolKey),CoreMatchers.is(0));	93.62941599	0	0
32	9	/	RpcConnectionManagerTest	testAddWconnithPoolKey_multiPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(focal.count(poolKey));	93.62941599	0	0
33	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotNull(this.getConnectionPool(this.connTasks.get("STR")));	73.909724	0	0
33	1	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(StringUtils.isBlank("STR"));	73.909724	0	0
33	2	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNull(this.getConnectionPool(this.connTasks.get("STR")));	73.909724	0	0
33	3	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(pool.size()==0);	73.909724	0	0
33	4	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertEquals(0,count("STR"));	73.909724	0	0
33	5	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(count("STR")<0);	73.909724	0	0
33	6	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(StringUtils.isBlank("STR"));	73.909724	0	0
33	7	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertTrue(count("STR")>=0);	73.909724	0	0
33	8	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,count("STR"));	73.909724	0	0
33	9	/	RpcConnectionManagerTest	testAddWithPoolKey	assertEquals(1,cm.count(poolKey));	assertFalse(pool.size()>0);	73.909724	0	0
34	0	arnohaase/a-foundation	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsValue(someValue));	50.77014899	0	0
34	1	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(0,result.size());	50.77014899	0	0
34	2	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedValue,result.get(someKey));	50.77014899	0	0
34	3	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertNotNull(result);	50.77014899	0	0
34	4	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsKey(null));	50.77014899	0	0
34	5	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.isEmpty());	50.77014899	0	0
34	6	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(result.containsKey(someKey));	50.77014899	0	0
34	7	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertFalse(result.containsValue(someValue));	50.77014899	0	0
34	8	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertEquals(someExpectedCount,result.keySet().size());	50.77014899	0	0
34	9	/	ACollectionHelperTest	testGroupByCustomEquality	assertEquals(2,grouped.size());	assertTrue(resultinstanceofHashMap);	50.77014899	0	0
35	0	arnohaase/a-foundation	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals("STR",graph.minimalCycles().get(1));	53.56606603	0	0
35	1	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.minimalCycles().isEmpty());	53.56606603	0	0
35	2	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles());	53.56606603	0	0
35	3	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(0,graph.minimalCycles().size());	53.56606603	0	0
35	4	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertNotEquals("STR",graph.minimalCycles().get(0));	53.56606603	0	0
35	5	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.hasCycles());	53.56606603	1	0
35	6	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertFalse(graph.minimalCycles().isEmpty());	53.56606603	0	0
35	7	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals(2,graph.minimalCycles().size());	53.56606603	0	0
35	8	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertTrue(graph.hasCycles()||!graph.hasCycles());	53.56606603	0	0
35	9	/	ADiGraphTest	testForest	assertFalse(graph.hasCycles());	assertEquals("STR",graph.minimalCycles().get(0));	53.56606603	0	0
36	0	arnohaase/a-foundation	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofArrayIterable);	50.42015171	0	0
36	1	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().size()>=0);	50.42015171	0	0
36	2	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotNull(graph.edges());	50.42015171	0	0
36	3	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges().isEmpty());	50.42015171	1	0
36	4	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(0,graph.edges().size());	50.42015171	0	0
36	5	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertNotEquals(null,graph.edges());	50.42015171	0	0
36	6	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertFalse(graph.edges().iterator().hasNext());	50.42015171	0	0
36	7	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertTrue(graph.edges()instanceofCollection);	50.42015171	0	0
36	8	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertDoesNotThrow(()->graph.edges().forEach(System.out::println));	50.42015171	0	0
36	9	/	ADiGraphTest	testEmpty	assertTrue(graph.edges().isEmpty());	assertEquals(Collections.emptyList(),graph.edges());	50.42015171	0	0
37	0	nidi3/raml-loader	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertThrows(ResourceNotFoundException.class,()->fetchResource("STR",0));	365.379813	0	0
37	1	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotNull(fetchResource("STR",0));	365.379813	0	0
37	2	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertSame(expectedObject,fetchResource("STR",0));	365.379813	0	0
37	3	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNull(fetchResource("STR",0));	365.379813	0	0
37	4	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertFalse(fetchResource("STR",0)instanceofInputStream);	365.379813	0	0
37	5	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotEquals("STR",fetchResource("STR",0));	365.379813	0	0
37	6	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertEquals("STR",fetchResource("STR",0));	365.379813	0	0
37	7	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertTrue(fetchResource("STR",0)instanceofInputStream);	365.379813	0	0
37	8	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertNotSame(expectedObject,fetchResource("STR",0));	365.379813	0	0
37	9	/	LoaderTest	jarInClassPathNotModified	assertNull(newClassPathLoader("STR").fetchResource("STR",newDate(130,0,0).getTime()-1));	assertDoesNotThrow(()->fetchResource("STR",0));	365.379813	0	0
38	0	nidi3/raml-loader	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getProtocol().equals("STR"));	50.91839409	0	0
38	1	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertEquals(name,exception.getName());	50.91839409	0	0
38	2	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(newFile(url.getPath()).lastModified()>ifModifiedSince);	50.91839409	0	0
38	3	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertEquals("STR",url.getProtocol());	50.91839409	0	0
38	4	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getPath().endsWith("STR"));	50.91839409	0	0
38	5	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(url.getPath().startsWith("STR"));	50.91839409	0	0
38	6	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertNotNull(url);	50.91839409	0	0
38	7	/	LoaderTest	jarInClassPath	assertNotNull(newClassPathLoader("STR").fetchResource("STR",-1));	assertTrue(newFile(url.getPath()).lastModified()<=ifModifiedSince);	50.91839409	0	0
39	0	nidi3/raml-loader	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertFalse(false);	54.49095821	0	0
39	1	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals("STR",factory);	54.49095821	0	0
39	2	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotEquals(null,factory);	54.49095821	0	0
39	3	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(Uninitialized,factory);	54.49095821	0	0
39	4	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotNull(factory);	54.49095821	0	0
39	5	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertEquals(expected,factory);	54.49095821	0	0
39	6	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertNotSame(expected,factory);	54.49095821	0	0
39	7	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(true);	54.49095821	0	0
39	8	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertTrue(factoryinstanceofJsonSchemaFactory);	54.49095821	0	0
39	9	/	JsonSchemaTest	jsonSchemaWithLoader	assertTrue(validate(factory).isSuccess());	assertSame(expected,factory);	54.49095821	0	0
40	0	fluenda/ParCEFone	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(7,event.getFieldCount());	54.69197893	0	0
40	1	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getSourceIP());	54.69197893	0	0
40	2	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(sample1,event.getRawString());	54.69197893	0	0
40	3	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDestinationIP());	54.69197893	0	0
40	4	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event.getDetectionTime());	54.69197893	0	0
40	5	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertNotNull(event);	54.69197893	0	0
40	6	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getSeverity()>=5);	54.69197893	0	0
40	7	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals(0,event.getProtocolVersion());	54.69197893	0	0
40	8	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertTrue(event.getDetectedMessage().contains("STR"));	54.69197893	0	0
40	9	/	CEFParserTest	invalidMessageTypesTest	assertNull(event);	assertEquals("STR",event.getThreatManager());	54.69197893	0	0
41	0	redraiment/jactiverecord	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().length()>0);	49.8085041	0	0
41	1	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNull(sql.toString());	49.8085041	0	0
41	2	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	49.8085041	1	0
41	3	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertSame(expectedString,sql.toString());	49.8085041	0	0
41	4	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.toString());	49.8085041	0	0
41	5	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString()instanceofMyClass);	49.8085041	0	0
41	6	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	49.8085041	0	0
41	7	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertTrue(sql.toString()instanceofString);	49.8085041	0	0
41	8	/	TSqlBuilderTest	testHaving	assertEquals("STR",sql.toString());	assertNotNull(sql.toString());	49.8085041	0	0
42	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertEquals(5,res.size());	48.24916196	0	0
42	1	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertSame(String.class,res.get(0).getClass());	48.24916196	0	0
42	2	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertFalse(res.contains("STR"));	48.24916196	0	0
42	3	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotSame(Integer.class,res.get(1).getClass());	48.24916196	0	0
42	4	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotNull(helloClass.getDeclaredField("STR"));	48.24916196	0	0
42	5	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	48.24916196	0	0
42	6	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertTrue(res.isEmpty());	48.24916196	0	0
42	7	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNotEquals(10,res.size());	48.24916196	0	0
42	8	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertNull(helloClass.getMethod("STR"));	48.24916196	0	0
42	9	/	InMemoryJavaCompilerTest	compile_WhenIgnoreWarnings	assertEquals(0,res.size());	assertThrows(RuntimeException.class,()->helloClass.getConstructor(Integer.class));	48.24916196	0	0
43	0	PeterisP/morphology	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertEquals(true,ceļu.isRecognized());	90.35048294	0	0
43	1	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotNull(ceļu.isRecognized());	90.35048294	0	0
43	2	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertDoesNotThrow(()->ceļu.isRecognized());	90.35048294	0	0
43	3	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized()>=0&&ceļu.isRecognized()<=100);	90.35048294	0	0
43	4	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertTrue(ceļu.isRecognized());	90.35048294	1	0
43	5	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertThrows(Exception.class,()->ceļu.isRecognized());	90.35048294	0	0
43	6	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertSame(expected,ceļu.isRecognized());	90.35048294	0	0
43	7	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertNotSame(unexpected,ceļu.isRecognized());	90.35048294	0	0
43	8	/	MorphologyTest	ceļu	assertTrue(ceļu.isRecognized());	assertFalse(ceļu.isRecognized());	90.35048294	0	0
44	0	amlinv/stat-collection-utils	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotNull(poller);	28.04159713	0	0
44	1	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotEquals(null,testObjectName001);	28.04159713	0	0
44	2	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertTrue(polledObjects.contains(polled001));	28.04159713	0	0
44	3	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals("STR",accessConnectionFactoryDesc);	28.04159713	0	0
44	4	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertEquals(mockObjectQueryPreparer,poller.getObjectQueryPreparer());	28.04159713	0	0
44	5	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertSame(mockLogger,poller.getLogger());	28.04159713	0	0
44	6	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNotSame(mockAccessConnection,mockBatchCapableAccessConnection);	28.04159713	0	0
44	7	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertArrayEquals(newObject[]{mockScheduler},poller.getSchedulers().toArray());	28.04159713	0	0
44	8	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertNull(mockBatchCapableAccessConnection.getBatchExecutionResult());	28.04159713	0	0
44	9	/	JmxAttributePollerTest	testGetSetObjectQueryPreparer	assertNotNull(this.poller.getObjectQueryPreparer());	assertFalse(processes.isEmpty());	28.04159713	0	0
45	0	NanoHttpd/nanohttpd	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(SpecificHandler.class,routerNanoHttpd.getNotFoundHandler());	61.67194796	0	0
45	1	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotSame(null,routerNanoHttpd.getNotImplementedHandler());	61.67194796	0	0
45	2	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNull(routerNanoHttpd.getNotImplementedHandler());	61.67194796	0	0
45	3	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertArrayEquals("two","three"});	61.67194796	0	0
45	4	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotEquals(null,routerNanoHttpd.getNotFoundHandler());	61.67194796	0	0
45	5	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertEquals(GeneralHandler.class,routerNanoHttpd.getNotFoundHandler());	61.67194796	0	0
45	6	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertSame(GeneralHandler.class,routerNanoHttpd.getNotImplementedHandler());	61.67194796	0	0
45	7	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertNotNull(routerNanoHttpd.getNotImplementedHandler());	61.67194796	0	0
45	8	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertTrue(routerNanoHttpd.getNotFoundHandler()instanceofGeneralHandler);	61.67194796	0	0
45	9	/	TestNanolets	testHandlerSetters	assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);	assertFalse(routerNanoHttpd.getNotFoundHandler()instanceofSpecificHandler);	61.67194796	0	0
46	0	Yubico/yubico-java-client	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(0,response.getTimestamp());	51.11699271	0	0
46	1	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(client,response.getClient());	51.11699271	0	0
46	2	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	51.11699271	0	0
46	3	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	51.11699271	0	0
46	4	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response.getNonce());	51.11699271	0	0
46	5	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isVerified());	51.11699271	0	0
46	6	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.isError());	51.11699271	0	0
46	7	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	51.11699271	0	0
46	8	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(client,response.getClient());	51.11699271	0	0
46	9	/	YubicoClientTest	testTwoQueries	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.isOk());	51.11699271	0	0
47	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertArrayEquals("STR".toCharArray(),getBuildUrl().toCharArray());	662.4065411	0	0
47	1	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertTrue(getBuildUrl().startsWith("STR"));	662.4065411	0	0
47	2	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertThat(getBuildUrl(),equalToIgnoringCase("STR"));	662.4065411	0	0
47	3	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertEquals("STR",getBuildUrl());	662.4065411	0	0
47	4	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertSame("STR",getBuildUrl());	662.4065411	0	0
47	5	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertThat(getBuildUrl(),containsString("STR"));	662.4065411	0	0
47	6	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertFalse(getBuildUrl().isEmpty());	662.4065411	0	0
47	7	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotSame("STR",getBuildUrl());	662.4065411	0	0
47	8	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotNull(getBuildUrl());	662.4065411	0	0
47	9	/	ShippableTest	testGetBuildUrl	assertEquals("STR",newShippable(env()).getBuildUrl());	assertNotEquals("STR",getBuildUrl());	662.4065411	0	0
48	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertFalse(p.getBlankIndex()<0);	87.79899025	0	0
48	1	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0);	87.79899025	0	0
48	2	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(2,p.getBlankIndex());	87.79899025	0	0
48	3	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==-1||p.getBlankIndex()>0);	87.79899025	0	0
48	4	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()<9);	87.79899025	0	0
48	5	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()==0||p.getBlankIndex()==8);	87.79899025	0	0
48	6	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertEquals(3,p.getBlankIndex());	87.79899025	0	0
48	7	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(4,p.getBlankIndex());	87.79899025	0	0
48	8	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>=0&&p.getBlankIndex()<=8);	87.79899025	0	0
48	9	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertNotEquals(5,p.getBlankIndex());	87.79899025	0	0
48	10	/	PuzzleTest	puzzle_has_blank	assertEquals(8,p.getBlankIndex());	assertTrue(p.getBlankIndex()>2||p.getBlankIndex()<7);	87.79899025	0	0
49	0	rockagen/commons-lib	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotEquals("STR",FOCAL.repeatChar('B',3));	57.07418013	0	0
49	1	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertSame(FOCAL.repeatChar('A',3),FOCAL.repeatChar('A',3));	57.07418013	0	0
49	2	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertThat(FOCAL.repeatChar('A',3),containsString("STR"));	57.07418013	0	0
49	3	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertEquals("STR",FOCAL.repeatChar('A',3));	57.07418013	0	0
49	4	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertArrayEquals('A','A'});	57.07418013	0	0
49	5	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertTrue(FOCAL.repeatChar('A',5).startsWith("STR"));	57.07418013	0	0
49	6	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotNull(FOCAL.repeatChar('B',0));	57.07418013	0	0
49	7	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNull(FOCAL.repeatChar('A',-1));	57.07418013	0	0
49	8	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertNotSame("STR",FOCAL.repeatChar('A',3));	57.07418013	0	0
49	9	/	CommUtilTest	testSameChars	assertEquals("STR",CommUtil.repeatChar('b',10));	assertFalse(FOCAL.repeatChar('B',2).isEmpty());	57.07418013	0	0
0	0	PeterisP/morphology	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNull(locītājs.getDefaultSettings());	77.8	0	0
0	1	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals("STR",vārds.toString());	77.8	0	0
0	2	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertFalse(wordforms.isEmpty());	77.8	0	0
0	3	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotSame(vārds,locītājs.analyze("STR"));	77.8	0	0
0	4	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotEquals(0,locītājs.clearCache());	77.8	0	0
0	5	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertEquals(0,locītājs.getCacheSize());	77.8	0	0
0	6	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertArrayEquals(2,3});	77.8	0	0
0	7	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertNotNull(locītājs.getAnalyzerType());	77.8	0	0
0	8	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertSame(locītājs,locītājs.getInstance());	77.8	0	0
0	9	/	MorphologyTest	gunta19dec_3	assertTrue(vārds.isRecognized());	assertTrue(locītājs.enableGuessing);	77.8	0	0
1	0	PeterisP/morphology	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertTrue(locītājs.isRecognized());	73.18	0	0
1	1	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotEquals(unexpectedValue,actualValue);	73.18	0	0
1	2	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertArrayEquals(expectedArray,actualArray);	73.18	0	0
1	3	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotSame(unexpectedObject,actualObject);	73.18	0	0
1	4	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertFalse(locītājs.isRecognized());	73.18	0	0
1	5	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertSame(expectedObject,actualObject);	73.18	0	0
1	6	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNotNull(locītājs);	73.18	0	0
1	7	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertNull(locītājs);	73.18	0	0
1	8	/	MorphologyTest	lūzīs	assertTrue(lūzīs.isRecognized());	assertEquals(expectedValue,actualValue);	73.18	0	0
2	0	PeterisP/morphology	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	77.24	0	0
2	1	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.guessVerbs);	77.24	0	0
2	2	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.enableVocative);	77.24	0	0
2	3	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.isRecognized());	77.24	0	0
2	4	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertFalse(locītājs.isRecognized());	77.24	0	0
2	5	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableAllGuesses);	77.24	0	0
2	6	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotNull(austrumlatvija);	77.24	0	0
2	7	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertEquals(0,locītājs.getCacheSize());	77.24	0	0
2	8	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertNotSame(0,locītājs.wordforms.size());	77.24	0	0
2	9	/	MorphologyTest	izskanjas	assertTrue(austrumlatvija.isRecognized());	assertTrue(locītājs.enableGuessing);	77.24	0	0
3	0	PeterisP/morphology	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(locītājs.isRecognized());	90.27	0	0
3	1	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertNotEquals(expectedObject,actualObject);	90.27	0	0
3	2	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(locītājs.isRecognized());	90.27	0	0
3	3	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(2,w.wordforms.size());	90.27	0	0
3	4	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.contains("STR"));	90.27	0	0
3	5	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.size()>=1);	90.27	0	0
3	6	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertEquals(expectedObject,actualObject);	90.27	0	0
3	7	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.contains("STR"));	90.27	0	0
3	8	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	90.27	0	0
3	9	/	MorphologyTest	plāns_B	assertTrue(w.isRecognized());	assertTrue(w.wordforms.isEmpty());	90.27	0	0
4	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(1,focalObject.getCoordinatorPort());	77.04	0	0
4	1	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotEquals(0,focalObject.getCoordinatorPort());	77.04	0	0
4	2	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotNull(focalObject.getCoordinatorPort());	77.04	0	0
4	3	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertTrue(focalObject.getCoordinatorPort()>=0);	77.04	0	0
4	4	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertEquals(0,focalObject.getCoordinatorPort());	77.04	0	0
4	5	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertArrayEquals(newint[]{0},newint[]{focalObject.getCoordinatorPort()});	77.04	0	0
4	6	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNull(null);	77.04	0	0
4	7	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertSame(0,focalObject.getCoordinatorPort());	77.04	0	0
4	8	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertNotSame(null,focalObject.getCoordinatorPort());	77.04	0	0
4	9	/	SimulatorPropertiesTest	testGetCoordinatorPort	assertEquals(0,simulatorProperties.getCoordinatorPort());	assertFalse(focalObject.getCoordinatorPort()<0);	77.04	0	0
5	0	hazelcast/hazelcast-simulator	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	68.69	0	0
5	1	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotNull(exception);	68.69	0	0
5	2	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertSame("STR",exception.getMessage());	68.69	0	0
5	3	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNull(exception.getCause().getMessage());	68.69	0	0
5	4	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertTrue(exception.getCause()instanceofRuntimeException);	68.69	0	0
5	5	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertEquals("STR",exception.getMessage());	68.69	1	0
5	6	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotEquals("STR",exception.getMessage());	68.69	0	0
5	7	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNull(exception.getDescription());	68.69	0	0
5	8	/	TestExceptionTest	testConstructor_withMessageFormat_withException	assertEquals("STR",exception.getMessage());	assertNotSame("STR",exception.getMessage());	68.69	0	0
6	0	hazelcast/hazelcast-simulator	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertTrue(exceptionFile.exists());	72.04	1	0
6	1	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertEquals("STR",exceptionFile.getName());	72.04	0	0
6	2	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotSame(IOException.class,ExceptionReporter.getException(exceptionFile).getClass());	72.04	0	0
6	3	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().isDirectory(),CoreMatchers.equalTo(true));	72.04	0	0
6	4	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(exceptionFile.getParentFile().getName(),CoreMatchers.notNullValue());	72.04	0	0
6	5	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertNotEquals(null,exceptionFile.getParentFile());	72.04	0	0
6	6	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertSame(RuntimeException.class,ExceptionReporter.getException(exceptionFile).getClass());	72.04	0	0
6	7	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertArrayEquals(newbyte[]{},ExceptionReporter.getException(exceptionFile).getMessage().getBytes());	72.04	0	0
6	8	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertFalse(exceptionFile.isDirectory());	72.04	0	0
6	9	/	ExceptionReporterTest	testReport	assertTrue(exceptionFile.exists());	assertThat(ExceptionReporter.getException(exceptionFile).getCause(),CoreMatchers.instanceOf(RuntimeException.class));	72.04	0	0
7	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(expected,bind0(object,property,value));	75.21	0	0
7	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertArrayEquals(expectedArray,bind0(object,property,value));	75.21	0	0
7	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(expected,bind0(object,property,value));	75.21	0	0
7	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,property,value));	75.21	0	0
7	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,property,value));	75.21	0	0
7	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,property,value));	75.21	0	0
7	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,property,value));	75.21	0	0
7	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(expected,bind0(object,property,value));	75.21	0	0
7	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertSame(expected,bind0(object,property,value));	75.21	0	0
7	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Short	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,property,value));	75.21	0	0
8	0	fluent/fluent-logger-java	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotNull(loggerA0);	73.97	0	0
8	1	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA1instanceofFluentLogger);	73.97	0	0
8	2	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertTrue(loggerA_lh0.getReconnector()instanceofExponentialDelayReconnector);	73.97	0	0
8	3	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals(1234,loggerA_lh1.getPort());	73.97	0	0
8	4	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals("STR",loggerB0.getTagPrefix());	73.97	0	0
8	5	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	???;	73.97	0	0
8	6	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotEquals(loggerA0.getTagPrefix(),loggerB0.getTagPrefix());	73.97	0	0
8	7	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertSame(loggerA0,loggerA1);	73.97	0	0
8	8	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertNotSame(loggerA_lh0,loggerA_lh1);	73.97	0	0
8	9	/	TestFluentLogFactory	testGetLogger	assertTrue(loggerA0==loggerA1);	assertEquals("STR",loggerA_lh0.getHost());	73.97	0	0
9	0	nidi3/graphviz-java	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotEquals(attrs(),attrs(attrs()));	164.87	0	0
9	1	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotSame(attrs(),attrs(attrs()));	164.87	0	0
9	2	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertEquals(1,attrs(attrs()).size());	164.87	0	0
9	3	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertFalse(attrs().isEmpty());	164.87	0	0
9	4	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertArrayEquals(newAttributes[]{},attrs().toArray());	164.87	0	0
9	5	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertEquals(attrs(attrs()),attrs(attrs(attrs())));	164.87	0	0
9	6	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertSame(attrs(),attrs());	164.87	0	0
9	7	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNull(attrs());	164.87	0	0
9	8	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertTrue(attrs().isEmpty());	164.87	0	0
9	9	/	StyleTest	tapered	assertEquals(attrs(attr("STR","STR"),attr("STR",5.0),attr("STR","STR")),attrs(Style.tapered(5,Arrow.DirType.BOTH)));	assertNotNull(attrs());	164.87	0	0
10	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.args.size());	82.42	0	0
10	1	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.args.isEmpty());	82.42	0	0
10	2	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertSame(GraphvizServer.CmdOptions.class,opts.getClass());	82.42	0	0
10	3	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsKey("STR"));	82.42	0	0
10	4	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.isEmpty());	82.42	0	0
10	5	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertEquals(0,opts.opts.size());	82.42	0	0
10	6	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsValue("STR"));	82.42	0	0
10	7	/	GraphvizServerTest	cmdLineSimple	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts);	82.42	0	0
11	0	nidi3/graphviz-java	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotNull(object);	80.75	0	0
11	1	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertFalse(condition);	80.75	0	0
11	2	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertArrayEquals(expectedArray,actualArray);	80.75	0	0
11	3	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertTrue(condition);	80.75	0	0
11	4	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertSame(expected,actual);	80.75	0	0
11	5	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNotSame(expected,actual);	80.75	0	0
11	6	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertEquals(expected,actual);	80.75	0	0
11	7	/	RankTest	combine	assertEquals(attrs(attr("STR",true),attr("STR","STR"),attr("STR","STR"),attr("STR","STR")),attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));	assertNull(object);	80.75	0	0
12	0	nidi3/graphviz-java	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNull(tail);	77.7	0	0
12	1	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertSame(tail,EndLabel.tail(Label.of("STR"),1d,2d));	77.7	0	0
12	2	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotNull(tail);	77.7	0	0
12	3	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertArrayEquals(newObject[]{1d,2d});	77.7	0	0
12	4	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotSame(tail,EndLabel.tail(Label.of("STR"),1d,2d));	77.7	0	0
12	5	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertTrue(tailinstanceofEndLabel);	77.7	0	0
12	6	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotEquals(newObject[]{1d,2d});	77.7	0	0
12	7	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertNotEquals("STR",tail.getLabel());	77.7	0	0
12	8	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertEquals("STR",tail.getLabel());	77.7	0	0
12	9	/	EndLabelTest	attrTail	assertEquals(attrs(attr("STR",tail),attr("STR",1d),attr("STR",2d)),attrs(tail));	assertFalse(tailinstanceofEndLabel);	77.7	0	0
13	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{doc.isDirty()});	335.16	0	0
13	1	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	335.16	1	0
13	2	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	335.16	0	0
13	3	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	335.16	0	0
13	4	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(null,doc.isDirty());	335.16	0	0
13	5	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	335.16	0	0
13	6	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	335.16	0	0
13	7	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	335.16	0	0
13	8	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertNull(null);	335.16	0	0
13	9	/	TrackedSetTest	testRemoveNotificationOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	335.16	0	0
14	0	orientechnologies/orientdb	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA.getName(),classLinked.getName());	379.19	0	0
14	1	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classA.getName(),"STR");	379.19	0	0
14	2	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNull(classA.getProperty("STR"));	379.19	0	0
14	3	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertFalse(schema.existsClass("STR"));	379.19	0	0
14	4	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotSame(classA.getProperty("STR"),classA.getProperty("STR"));	379.19	0	0
14	5	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertSame(prop.getType(),OType.LINK);	379.19	0	0
14	6	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotNull(db);	379.19	0	0
14	7	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertTrue(classA.existsProperty("STR"));	379.19	0	0
14	8	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertEquals(classA.getName(),"STR");	379.19	0	0
14	9	/	AlterPropertyTest	testRemoveLinkedClass	assertNotNull(prop.getLinkedClass());	assertNotEquals(classLinked,classA);	379.19	0	0
15	0	orientechnologies/orientdb	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getThreadPool());	142.84	0	0
15	1	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNull(g);	142.84	0	0
15	2	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotNull(g);	142.84	0	0
15	3	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertEquals(5,factory.getPool().getMin());	142.84	0	0
15	4	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	142.84	0	0
15	5	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals("STR","STR");	142.84	0	0
15	6	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertSame(factory.getPool(),g.getRawGraph().getRaw().getTransaction().getDatabase().getPool());	142.84	0	0
15	7	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertTrue(g.getRawGraph()instanceofOrientGraph);	142.84	0	0
15	8	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertNotEquals(10,factory.getPool().getMax());	142.84	0	0
15	9	/	OrientGraphFactoryTest	createTxPoolNestedCreations	assertEquals(g.getClass(),OrientGraph.class);	assertFalse(g.isClosed());	142.84	0	0
16	0	orientechnologies/orientdb	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofInteger);	304.18	0	0
16	1	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertEquals(1,doc.field("STR"));	304.18	0	0
16	2	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofHashMap);	304.18	0	0
16	3	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR")instanceofMap);	304.18	0	0
16	4	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertFalse(doc.field("STR")instanceofString);	304.18	0	0
16	5	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNull(doc.field("STR"));	304.18	0	0
16	6	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertTrue(doc.field("STR").toString().startsWith("STR"));	304.18	0	0
16	7	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotEquals("STR",doc.field("STR"));	304.18	0	0
16	8	/	ODocumentTest	testSetFieldAtListIndex	assertEquals(doc.field("STR"),"STR");	assertNotNull(doc.field("STR"));	304.18	0	0
17	0	orientechnologies/orientdb	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotSame(now,compare(OType.DATETIME,10l));	9513.82	0	0
17	1	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotEquals(now,compare(OType.DATETIME,10l));	9513.82	0	0
17	2	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertFalse(compare(OType.DATETIME,10l)>10);	9513.82	0	0
17	3	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertTrue(compare(OType.DATETIME,10l)<20);	9513.82	0	0
17	4	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertNotNull(now);	9513.82	0	0
17	5	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertArrayEquals(2,3});	9513.82	0	0
17	6	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),is(notNullValue()));	9513.82	0	0
17	7	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertThat(compare(OType.DATETIME,10l),anyOf(is(10),is(20)));	9513.82	0	0
17	8	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertEquals(10,compare(OType.DATETIME,10l));	9513.82	0	0
17	9	/	BinaryComparatorCompareTest	testDatetime	assertEquals(comparator.compare(field(OType.DATETIME,now),field(OType.STRING,format.format(now))),0);	assertSame(now,compare(OType.DATETIME,10l));	9513.82	0	0
18	0	orientechnologies/orientdb	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertArrayEquals(expectedArray,value);	255.76	0	0
18	1	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertEquals("STR",value);	255.76	0	0
18	2	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotSame(expectedValue,value);	255.76	0	0
18	3	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertTrue(valueinstanceofString);	255.76	0	0
18	4	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertSame(expectedValue,value);	255.76	0	0
18	5	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotNull(value);	255.76	0	0
18	6	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNull(value);	255.76	0	0
18	7	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals("STR",value);	255.76	0	0
18	8	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertFalse(valueinstanceofInteger);	255.76	0	0
18	9	/	OJsonWithCustom	testCustomFieldDisabled	assertEquals(doc.<String>field("STR"),doc1.field("STR"));	assertNotEquals(expectedArray,value);	255.76	0	0
19	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(keysToAdd.containsKey(42));	256.21	0	0
19	1	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(1,addedKeys.size());	256.21	0	0
19	2	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertEquals(42,addedKeys.get(42));	256.21	0	0
19	3	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNull(keysToRemove.get(555));	256.21	0	0
19	4	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertTrue(removedKeys.isEmpty());	256.21	0	0
19	5	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertSame(addedKeys,addedKeys);	256.21	0	0
19	6	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertFalse(keysToRemove.containsKey(1));	256.21	0	0
19	7	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotSame(propertyIndex,null);	256.21	0	0
19	8	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotNull(keysToAdd.values());	256.21	0	0
19	9	/	OPropertyListIndexDefinitionTest	testProcessChangeEventAddTwoTimesInvValue	assertEquals(keysToAdd,addedKeys);	assertNotEquals(0,keysToAdd.size());	256.21	0	0
20	0	orientechnologies/orientdb	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertSame(owner1,owner2);	189.42	0	0
20	1	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner2));	189.42	0	0
20	2	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotEquals(0,list.size());	189.42	0	0
20	3	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.isEmpty());	189.42	0	0
20	4	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertEquals(0,list.size());	189.42	0	0
20	5	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotNull(list);	189.42	0	0
20	6	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertNotSame(owner1,owner2);	189.42	0	0
20	7	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertFalse(list.contains(owner1));	189.42	0	0
20	8	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner1));	189.42	0	0
20	9	/	OCommandExecutorSQLCreateEdgeTest	testParametersBinding	assertEquals(list.size(),1);	assertTrue(list.contains(owner2));	189.42	0	0
21	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(-1,sqlQuery.getLimit());	254.49	0	0
21	1	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotEquals(0,results.size());	254.49	0	0
21	2	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.stream().anyMatch(doc->doc.containsField("STR")));	254.49	0	0
21	3	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.stream().allMatch(doc->doc.getClassName().equals("STR")));	254.49	0	0
21	4	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertFalse(results.isEmpty());	254.49	0	0
21	5	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotNull(results);	254.49	0	0
21	6	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertTrue(results.contains(doc1));	254.49	0	0
21	7	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertSame(sql,sqlQuery);	254.49	0	0
21	8	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertNotSame(doc1,doc2);	254.49	0	0
21	9	/	OCommandExecutorSQLSelectTest	testLimitMinusOneOrdered	assertEquals(26,results.size());	assertEquals(26,results.size());	254.49	1	0
22	0	Yubico/yubico-java-client	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertEquals(ResponseStatus.OK,response.getStatus());	59.29	0	0
22	1	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotSame(ResponseStatus.OK,response.getStatus());	59.29	0	0
22	2	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertThrows(YubicoVerificationException.class,()->client.verify(otp));	59.29	0	0
22	3	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertSame(ResponseStatus.OK,response.getStatus());	59.29	0	0
22	4	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.OK);	59.29	0	0
22	5	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotNull(response);	59.29	0	0
22	6	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNull(response);	59.29	0	0
22	7	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertNotEquals(ResponseStatus.OK,response.getStatus());	59.29	0	0
22	8	/	YubicoClientTest	testGoodAndBadUrls	assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.OK);	59.29	0	0
23	0	arnohaase/a-foundation	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.startsWith(expectedPrefix));	47.79	0	0
23	1	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(resultinstanceofString);	47.79	0	0
23	2	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertFalse(result.isEmpty());	47.79	0	0
23	3	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertNotNull(result);	47.79	0	0
23	4	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertFalse(result.contains(unexpectedSubstring));	47.79	0	0
23	5	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.endsWith(expectedSuffix));	47.79	0	0
23	6	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.matches(expectedRegex));	47.79	0	0
23	7	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertEquals(expectedLength,result.length());	47.79	0	0
23	8	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertTrue(result.contains(expectedSubstring));	47.79	0	0
23	9	/	AJsonSerHelperTest	testArray3	assertEquals("STR",result);	assertEquals(expectedResult,result);	47.79	0	0
24	0	arnohaase/a-foundation	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotSame(ser,out);	44.09	0	0
24	1	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals("STR",result);	44.09	1	0
24	2	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertSame(baos,ser.getStream());	44.09	0	0
24	3	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertTrue(result.contains("STR"));	44.09	0	0
24	4	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertFalse(result.isEmpty());	44.09	0	0
24	5	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotNull(result);	44.09	0	0
24	6	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertEquals(16,result.length());	44.09	0	0
24	7	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNotEquals("STR",result);	44.09	0	0
24	8	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertArrayEquals("STR".toCharArray(),result.toCharArray());	44.09	0	0
24	9	/	AJsonSerHelperTest	testDoubleWithFrac1	assertEquals("STR",result);	assertNull(null);	44.09	0	0
25	0	DigitalPebble/storm-crawler	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(content);	992.21	0	0
25	1	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(sha1str.contains("STR"));	992.21	0	0
25	2	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(sha1str.isEmpty());	992.21	0	0
25	3	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(WARCRecordFormat.getDigestSha1(content));	992.21	0	0
25	4	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertFalse(base32.encodeAsString(DigestUtils.sha1(content)).isEmpty());	992.21	0	0
25	5	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotEquals("STR",sha1str);	992.21	0	0
25	6	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertNotNull(robotsTxt);	992.21	0	0
25	7	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertTrue(base32.encodeAsString(DigestUtils.sha1(content)).startsWith("STR"));	992.21	0	0
25	8	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals(22,content.length);	992.21	0	0
25	9	/	WARCRecordFormatTest	testGetDigestSha1RobotsTxt	assertEquals("STR",sha1str,WARCRecordFormat.getDigestSha1(content));	assertEquals("STR",sha1str);	992.21	0	0
26	0	DigitalPebble/storm-crawler	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	139.08	0	0
26	1	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertArrayEquals(newString[]{"STR"},fields.get("STR"));	139.08	0	0
26	2	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.containsKey("STR"));	139.08	0	0
26	3	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals("STR",fields.get("STR"));	139.08	0	0
26	4	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotSame("STR",fields.get("STR"));	139.08	0	0
26	5	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	139.08	0	0
26	6	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",fields.get("STR"));	139.08	0	0
26	7	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.entrySet().size()>0);	139.08	0	0
26	8	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	139.08	0	0
26	9	/	BasicIndexingTest	testFilterDocumentWithMetadata	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	139.08	0	0
27	0	sofastack/sofa-bolt	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotNull(object);	73.02	0	0
27	1	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertFalse(condition);	73.02	0	0
27	2	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNotSame(unexpectedObject,actualObject);	73.02	0	0
27	3	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertArrayEquals(expectedArray,actualArray);	73.02	0	0
27	4	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertSame(expectedObject,actualObject);	73.02	0	0
27	5	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertTrue(condition);	73.02	0	0
27	6	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertThat(actualValue,CoreMatchers.equalTo(expectedValue));	73.02	0	0
27	7	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertEquals("STR",actualValue);	73.02	0	0
27	8	/	ClassCustomSerializerTest	testInvokeContextCustomSerializer_SYNC	assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR+"STR",ret);	assertNull(object);	73.02	0	0
28	0	myabc/markdownj	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotNull(tokens);	44.76	0	0
28	1	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokensinstanceofjava.util.Collection);	44.76	0	0
28	2	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokens.contains("STR"));	44.76	0	0
28	3	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertSame(expectedCollection,tokens);	44.76	0	0
28	4	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertFalse(tokensinstanceofjava.util.List);	44.76	0	0
28	5	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.contains("STR"));	44.76	0	0
28	6	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertNotSame(expectedCollection,tokens);	44.76	0	0
28	7	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.isEmpty());	44.76	0	0
28	8	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertEquals(5,tokens.size());	44.76	0	0
28	9	/	CharacterProtectorTest	testGetAllEncodedTokens	assertEquals(0,tokens.size());	assertTrue(tokens.size()>0);	44.76	0	0
29	0	TooTallNate/Java-WebSocket	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()instanceofExpectedClass);	65.06	0	0
29	1	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertSame(expectedCloseCode,invalidHandshakeException.getCloseCode());	65.06	0	0
29	2	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()<unexpectedCloseCode);	65.06	0	0
29	3	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotNull(invalidHandshakeException.getCloseCode());	65.06	0	0
29	4	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNull(invalidHandshakeException.getCloseCode());	65.06	0	0
29	5	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>=minCloseCode&&invalidHandshakeException.getCloseCode()<=maxCloseCode);	65.06	0	0
29	6	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertFalse(invalidHandshakeException.getCloseCode()instanceofUnexpectedClass);	65.06	0	0
29	7	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertTrue(invalidHandshakeException.getCloseCode()>expectedCloseCode);	65.06	0	0
29	8	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertNotEquals(unexpectedCloseCode,invalidHandshakeException.getCloseCode());	65.06	0	0
29	9	/	InvalidHandshakeExceptionTest	testConstructor	assertEquals("STR",CloseFrame.PROTOCOL_ERROR,invalidHandshakeException.getCloseCode());	assertEquals(expectedCloseCode,invalidHandshakeException.getCloseCode());	65.06	0	0
30	0	NanoHttpd/nanohttpd	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertFalse(cookie.getHTTPHeader().isEmpty());	101.53	0	0
30	1	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals("STR",cookie.getHTTPHeader());	101.53	0	0
30	2	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertTrue(cookie.getHTTPHeader().contains("STR"));	101.53	0	0
30	3	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertNotNull(cookie.getHTTPHeader());	101.53	0	0
30	4	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals(expectedLength,cookie.getHTTPHeader().length());	101.53	0	0
30	5	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	"assertThrows(Exception.class,()->{
???;
});"	101.53	0	0
30	6	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertNotEquals(0,randomExpirationTime);	101.53	0	0
30	7	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertEquals(expectedDouble,actualDouble);	101.53	0	0
30	8	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertTrue(cookie.getHTTPHeader().startsWith("STR"));	101.53	0	0
30	9	/	CookieTest	testCookieWithExpiresString	assertTrue("STR",cookie.getHTTPHeader().contains(expiresString));	assertArrayEquals(expectedArray,cookie.getHTTPHeader().toCharArray());	101.53	0	0
31	0	rockagen/commons-lib	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotNull(clazzs);	53.69	0	0
31	1	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertSame(exp.getClass(),clazzs.getClass());	53.69	0	0
31	2	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotSame(exp,clazzs);	53.69	0	0
31	3	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	"assertThrows(NullPointerException.class,()->{
???;
});"	53.69	0	0
31	4	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertEquals(exp.length,clazzs.length);	53.69	0	0
31	5	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertTrue(exp.length>0);	53.69	0	0
31	6	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertArrayEquals(exp,clazzs);	53.69	0	0
31	7	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNotEquals(exp.length,clazzs.length+1);	53.69	0	0
31	8	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertNull(null);	53.69	0	0
31	9	/	ReflexUtilTest	testIntefaceGenericTypeClass	assertArrayEquals(clazz,exp);	assertFalse(exp.length==0);	53.69	0	0
32	0	rockagen/commons-lib	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertTrue(hexdump("STR".getBytes()).startsWith("STR"));	48.94	0	0
32	1	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotNull(hexdump("STR".getBytes()));	48.94	0	0
32	2	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertThrows(Exception.class,()->hexdump(null));	48.94	0	0
32	3	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertSame(hexdump("STR".getBytes()),hexdump("STR".getBytes()));	48.94	0	0
32	4	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNull(hexdump(null));	48.94	0	0
32	5	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertEquals("STR",hexdump("STR".getBytes()));	48.94	0	0
32	6	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotSame(hexdump("STR".getBytes()),hexdump("STR".getBytes()));	48.94	0	0
32	7	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertFalse(hexdump("STR".getBytes()).endsWith("STR"));	48.94	0	0
32	8	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertNotEquals("STR",hexdump("STR".getBytes()));	48.94	0	0
32	9	/	CommUtilTest	testBitValue	assertEquals("STR",CommUtil.hexdump(CommUtil.bitValue(b)));	assertArrayEquals("STR".toCharArray(),hexdump("STR".getBytes()).toCharArray());	48.94	0	0
33	0	rockagen/commons-lib	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertFalse(isBlank(escapeJava("STR")));	48.6	0	0
33	1	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotSame(str,escapeJava("STR"));	48.6	0	0
33	2	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertEquals("STR",escapeJava("STR"));	48.6	0	0
33	3	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotNull(escapeJava("STR"));	48.6	0	0
33	4	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertArrayEquals("World"},newString[]{escapeJava("Hello"));	48.6	0	0
33	5	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertTrue(isBlank(escapeJava("STR")));	48.6	0	0
33	6	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertSame(str,escapeJava("STR"));	48.6	0	0
33	7	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNull(escapeJava(null));	48.6	0	0
33	8	/	CommUtilTest	testEscape	assertEquals("STR",CommUtil.escapeJava("STR"));	assertNotEquals("STR",escapeJava("STR"));	48.6	0	0
34	0	javadev/moneytostr-russian	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(123.45));	125.19	0	0
34	1	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(678.90));	125.19	0	0
34	2	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(987.65));	125.19	0	0
34	3	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(321.0));	125.19	0	0
34	4	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(987.65));	125.19	0	0
34	5	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(543.0));	125.19	0	0
34	6	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(456.78));	125.19	0	0
34	7	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrCustom.convert(678.90));	125.19	0	0
34	8	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(123.45));	125.19	0	0
34	9	/	MoneyToStrTest	checkRURUKR	assertEquals("STR",moneyToStrRUR.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(456.78));	125.19	0	0
35	0	fabric8io/fabric8-maven-plugin	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()>=0);	99.6	0	0
35	1	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.size()<=10);	99.6	0	0
35	2	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey("STR"));	99.6	0	0
35	3	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertEquals(1,map.size());	99.6	1	0
35	4	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertNotNull(map);	99.6	0	0
35	5	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsValue(null));	99.6	0	0
35	6	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.containsKey("STR")&&map.get("STR").equals("STR"));	99.6	0	0
35	7	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertTrue(map.isEmpty());	99.6	0	0
35	8	/	MapUtilTest	testPutIfAbsent	assertEquals(1,map.size());	assertFalse(map.containsKey(null));	99.6	0	0
36	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertEquals(0,p.getDistanceToGoal());	72.66	1	0
36	1	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotSame(2,p.getDistanceToGoal());	72.66	0	0
36	2	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()>=0);	72.66	0	0
36	3	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertSame(0,p.getDistanceToGoal());	72.66	0	0
36	4	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertTrue(p.getDistanceToGoal()==0);	72.66	0	0
36	5	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertFalse(p.getDistanceToGoal()>0);	72.66	0	0
36	6	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotNull(p.getDistanceToGoal());	72.66	0	0
36	7	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(-1,p.getDistanceToGoal());	72.66	0	0
36	8	/	PuzzleTest	distance_to_solution_is_zero_when_solved	assertEquals(0,p.getDistanceToGoal());	assertNotEquals(1,p.getDistanceToGoal());	72.66	0	0
37	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertFalse(panel.getTurtleCount()<0);	83.54	0	0
37	1	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNull(panel.getTurtleCount());	83.54	0	0
37	2	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertSame(1,panel.getTurtleCount());	83.54	0	0
37	3	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(0,panel.getTurtleCount());	83.54	0	0
37	4	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotNull(panel.getTurtleCount());	83.54	0	0
37	5	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertArrayEquals(newint[]{1},newint[]{panel.getTurtleCount()});	83.54	0	0
37	6	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertEquals(1,panel.getTurtleCount());	83.54	1	0
37	7	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertTrue(panel.getTurtleCount()>=0);	83.54	0	0
37	8	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotSame(0,panel.getTurtleCount());	83.54	0	0
37	9	/	MultiTurtlePanelTest	testAddTurtle	assertEquals(1,panel.getTurtleCount());	assertNotEquals(true,false);	83.54	0	0
38	0	redraiment/jactiverecord	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(3,a[1]);	50.63	0	0
38	1	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[4]);	50.63	0	0
38	2	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-2]);	50.63	0	0
38	3	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[2]);	50.63	0	0
38	4	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[0]);	50.63	0	0
38	5	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(0,a[a.length-1]);	50.63	0	0
38	6	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-4,a[6]);	50.63	0	0
38	7	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(4,a[3]);	50.63	0	0
38	8	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(-1,a[5]);	50.63	0	0
38	9	/	SeqTest	testAssignAt	assertArrayEquals(newint[]{1,2,3,4,5},a);	assertEquals(7,a.length);	50.63	0	0
39	0	redraiment/jactiverecord	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertSame("STR",FOCAL.join(Collections.emptyList(),"STR"));	40.27	0	0
39	1	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Arrays.asList(1,2,3),"STR"));	40.27	0	0
39	2	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertTrue(FOCAL.join(Arrays.asList(1,2,3),"STR").contains("STR"));	40.27	0	0
39	3	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertNotEquals("STR",FOCAL.join(Arrays.asList(1,2,3),"STR"));	40.27	0	0
39	4	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertNotSame("STR",FOCAL.join(Collections.emptyList(),"STR"));	40.27	0	0
39	5	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertNotEquals("STR",FOCAL.join(Collections.singletonList("STR"),"STR"));	40.27	0	0
39	6	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(null,"STR"));	40.27	0	0
39	7	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertNotNull(FOCAL.join(Arrays.asList(1,2,3),"STR"));	40.27	0	0
39	8	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertArrayEquals("STR".split("STR"),FOCAL.join(Arrays.asList(1,2,3),"STR").split("STR"));	40.27	0	0
39	9	/	SeqTest	testJoinListNull	assertEquals("STR",Seq.join(null,"STR"));	assertEquals("STR",FOCAL.join(Collections.singletonList(1),"STR"));	40.27	0	0
40	0	redraiment/jactiverecord	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotSame(actuals,newString[]{"STR","STR","STR"});	39.55	0	0
40	1	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertEquals("2","3"});	39.55	0	0
40	2	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertFalse(actuals.length==0);	39.55	0	0
40	3	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertTrue(actuals.length>0);	39.55	0	0
40	4	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertArrayEquals("2","3"});	39.55	0	0
40	5	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotEquals("5","6"});	39.55	0	0
40	6	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertSame(actuals,actuals);	39.55	0	0
40	7	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNotNull(actuals);	39.55	0	0
40	8	/	SeqTest	testConstantMap	assertArrayEquals(newString[]{"STR","STR","STR"},actuals);	assertNull(null);	39.55	0	0
41	0	fluenda/ParCEFone	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals(2*macAddress.getAddress().length-1,macAddress.toString().length());	56.62	0	0
41	1	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertEquals("STR",macAddress.toString());	56.62	0	0
41	2	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().matches("STR"));	56.62	0	0
41	3	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().length()>0);	56.62	0	0
41	4	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotEquals("STR",macAddress.toString());	56.62	0	0
41	5	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertTrue(macAddress.toString().contains(STANDARD_SEPARATOR));	56.62	0	0
41	6	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertNotNull(macAddress.toString());	56.62	0	0
41	7	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertFalse(macAddress.toString().contains("STR"));	56.62	0	0
41	8	/	MacAddressTest	testAddressPeriodSeparator	assertEquals(NORMALIZED_ADDRESS,macAddress.toString());	assertThat(macAddress.toString(),Matchers.matchesPattern("STR"));	56.62	0	0
42	0	trautonen/coveralls-maven-plugin	TimestampParserTest	testParseNull	assertNull(parsed);	assertTrue(StringUtils.isBlank(timestamp));	79.71	0	0
42	1	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertSame(expectedDate,parsed);	79.71	0	0
42	2	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(expectedDate,parsed);	79.71	0	0
42	3	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertDoesNotThrow(()->newTimestampParser(null).parse("STR"));	79.71	0	0
42	4	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotNull(parsed);	79.71	0	0
42	5	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNull(parsed);	79.71	1	0
42	6	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertNotEquals(unexpectedDate,parsed);	79.71	0	0
42	7	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertFalse(StringUtils.isBlank(timestamp));	79.71	0	0
42	8	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertThrows(ProcessingException.class,()->newTimestampParser(null).parse("STR"));	79.71	0	0
42	9	/	TimestampParserTest	testParseNull	assertNull(parsed);	assertEquals(null,parsed);	79.71	0	0
43	0	trautonen/coveralls-maven-plugin	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertEquals(MESSAGE,exception.getMessage());	75.89	1	0
43	1	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotNull(exception.getMessage());	75.89	0	0
43	2	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertFalse(exception.getMessage().isEmpty());	75.89	0	0
43	3	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNull(exception.getCause());	75.89	0	0
43	4	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame(null,exception.getMessage());	75.89	0	0
43	5	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertTrue(exception.getMessage().contains(MESSAGE));	75.89	0	0
43	6	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	"assertThrows(ValidationException.class,()->{
???;
});"	75.89	0	0
43	7	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertSame(MESSAGE,exception.getMessage());	75.89	0	0
43	8	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotEquals("STR",exception.getMessage());	75.89	0	0
43	9	/	ValidationExceptionTest	testExceptionWithMessage	assertEquals(MESSAGE,exception.getMessage());	assertNotSame("STR",exception.getMessage());	75.89	0	0
44	0	gvlasov/collections-utils	CollectorsTest	toImmutableSet	assertEquals(ImmutableSet.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableSet()));	???;	46.83	0	0
45	0	jcodec/jcodec	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertFalse(actual.getNalRefIdc()<NALUnit.EXPECTED_REF_IDC);	186.03	0	0
45	1	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(NALUnit.EXPECTED_REF_IDC,actual.getNalRefIdc());	186.03	0	0
45	2	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotNull(actual.getType());	186.03	0	0
45	3	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>0);	186.03	0	0
45	4	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>=MIN_REF_IDC&&actual.getNalRefIdc()<=MAX_REF_IDC);	186.03	0	0
45	5	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getType()instanceofNALUnitType);	186.03	0	0
45	6	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertTrue(actual.getNalRefIdc()>=NALUnit.EXPECTED_REF_IDC);	186.03	0	0
45	7	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertEquals(NALUnitType.EXPECTED_TYPE,actual.getType());	186.03	0	0
45	8	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertSame(actual.getType(),NALUnitType.SOME_OTHER_TYPE);	186.03	0	0
45	9	/	NalUnitTest	testCanWriteNalUnitFromValidNal	assertEquals("STR",3,actual.nal_ref_idc);	assertNotEquals(actual.getType(),newObject());	186.03	0	0
46	0	jcodec/jcodec	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotNull(objectReference);	159.76	0	0
46	1	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertArrayEquals(expectedArray,actualArray);	159.76	0	0
46	2	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertTrue(booleanExpression);	159.76	0	0
46	3	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotEquals(expectedValue,calculatedValue);	159.76	0	0
46	4	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertSame(expectedObject,actualObject);	159.76	0	0
46	5	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertFalse(booleanExpression);	159.76	0	0
46	6	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNull(objectReference);	159.76	0	0
46	7	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertEquals(expectedValue,calculatedValue);	159.76	0	0
46	8	/	ToJSONTest	testCycle	assertEquals("STR"+"STR"+"STR"+"STR"+"STR"+"STR"+"STR",ToJSON.toJSON(cl1));	assertNotSame("STR",expectedObject,actualObject);	159.76	0	0
47	0	basis-technology-corp/tcl-regex-java	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotSame(null,matcher.find());	447.03	0	0
47	1	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals(false,matcher.find());	447.03	0	0
47	2	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertFalse(find());	447.03	0	0
47	3	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertTrue(matcher.find());	447.03	1	0
47	4	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertSame(true,matcher.find());	447.03	0	0
47	5	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotEquals("STR",matcher.find());	447.03	0	0
47	6	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertThrows(Exception.class,()->find());	447.03	0	0
47	7	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNull(null);	447.03	0	0
47	8	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertEquals(true,matcher.find());	447.03	0	0
47	9	/	RegressionTest	testStockSymbol	assertTrue(matcher.find());	assertNotNull(matcher.find());	447.03	0	0
48	0	basis-technology-corp/tcl-regex-java	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.lookingAt()});	89.29	0	0
48	1	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	89.29	0	0
48	2	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNull(null);	89.29	0	0
48	3	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	89.29	0	0
48	4	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	89.29	0	0
48	5	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	89.29	0	0
48	6	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	89.29	0	0
48	7	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	89.29	0	0
48	8	/	RegressionTest	cannotFindSimpleDate	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	89.29	1	0
49	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotNull(helloClass);	46.6	1	0
49	1	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertFalse(helloClass.isInterface());	46.6	0	0
49	2	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredMethod("STR")!=null);	46.6	0	0
49	3	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals("STR",helloClass.getName());	46.6	0	0
49	4	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertSame(org.mdkt.HelloClass.class,helloClass);	46.6	0	0
49	5	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getMethods().length>0);	46.6	0	0
49	6	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertNotEquals(0,helloClass.getDeclaredFields().length);	46.6	0	0
49	7	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertEquals("STR",helloClass.getName());	46.6	0	0
49	8	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.getModifiers()==java.lang.reflect.Modifier.PUBLIC);	46.6	0	0
49	9	/	InMemoryJavaCompilerTest	compile_WhenTypical	assertNotNull(helloClass);	assertTrue(helloClass.isAssignableFrom(org.mdkt.HelloClass.class));	46.6	0	0
0	0	TooTallNate/Java-WebSocket	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertTrue(draft_6455.getExtension()instanceofIExtension);	56.05	0	0
0	1	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertSame(extension,draft_6455.getExtension());	56.05	0	0
0	2	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertEquals(null,draft_6455.getExtension());	56.05	0	0
0	3	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertFalse(draft_6455.getExtension()instanceofIExtension);	56.05	0	0
0	4	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(null,extension);	56.05	0	0
0	5	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertArrayEquals(newObject[]{extension},newObject[]{draft_6455.getExtension()});	56.05	0	0
0	6	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(extension,null);	56.05	0	0
0	7	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotNull(draft_6455.getExtension());	56.05	1	0
0	8	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotSame(null,draft_6455.getExtension());	56.05	0	0
0	9	/	Draft_6455Test	testGetExtension	assertNotNull(draft_6455.getExtension());	assertNotEquals(extension,draft_6455.getExtension());	56.05	0	0
1	0	TooTallNate/Java-WebSocket	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertEquals(webSocketImpl.getWebSocketAdapter(),webSocketAdapter);	51.55	0	0
1	1	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotNull(webSocketServerFactory);	51.55	0	0
1	2	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotEquals(webSocketServerFactory,webSocketAdapter);	51.55	0	0
1	3	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertFalse(webSocketAdapterinstanceofDefaultSSLWebSocketServerFactory);	51.55	0	0
1	4	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertNotSame(webSocketServerFactory,webSocketAdapter);	51.55	0	0
1	5	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertThrows(NoSuchAlgorithmException.class,()->newDefaultSSLWebSocketServerFactory(SSLContext.getDefault()));	51.55	0	0
1	6	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertArrayEquals(webSocketImpl.getDraft().getClass().getName().toCharArray(),newchar[]{'D','r','a','f','t','_','6','4','5','5'});	51.55	0	0
1	7	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertSame(webSocketImpl.createWebSocket(webSocketAdapter,newDraft_6455()),webSocketImpl);	51.55	0	0
1	8	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertTrue(webSocketServerFactoryinstanceofDefaultSSLWebSocketServerFactory);	51.55	0	0
1	9	/	DefaultSSLWebSocketServerFactoryTest	testCreateWebSocket	assertNotNull("STR",webSocketImpl);	assertSame(webSocketAdapter,webSocketAdapter);	51.55	0	0
2	0	redraiment/jactiverecord	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertEquals("STR",FOCAL.join(Arrays.asList("STR"),"STR"));	38.21	0	0
2	1	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(FOCAL.join(Arrays.asList("STR","STR","STR"),"STR").length()==3);	38.21	0	0
2	2	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertTrue(FOCAL.join(Collections.emptyList(),"STR").isEmpty());	38.21	0	0
2	3	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotEquals("STR",FOCAL.join(Arrays.asList(1,2,3),"STR"));	38.21	0	0
2	4	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertEquals("STR",FOCAL.join(null,"STR"));	38.21	0	0
2	5	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotNull(FOCAL.join(Arrays.asList(1,2,3),"STR"));	38.21	0	0
2	6	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNull(FOCAL.join(Collections.singletonList(null),"STR"));	38.21	0	0
2	7	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertEquals("STR",FOCAL.join(Arrays.asList("STR","STR"),"STR"));	38.21	0	0
2	8	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertNotEquals("STR",FOCAL.join(Arrays.asList("STR","STR"),"STR"));	38.21	0	0
2	9	/	SeqTest	testJoinDelimiterNull	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),null));	assertFalse(FOCAL.join(Arrays.asList("STR","STR","STR"),"STR").isEmpty());	38.21	0	0
3	0	adlnet/jxapi	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertTrue(expected==actual);	41.28	0	0
3	1	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertFalse(expected!=actual);	41.28	0	0
3	2	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotEquals(expected,actual);	41.28	0	0
3	3	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotSame(expected,actual);	41.28	0	0
3	4	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertSame(expected,actual);	41.28	0	0
3	5	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNull(actual);	41.28	0	0
3	6	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertEquals(expected,actual);	41.28	0	0
3	7	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertNotNull(actual);	41.28	0	0
3	8	/	ScoreTest	testSetRaw	assertEquals(expected,actual,0);	assertArrayEquals(expectedArray,actualArray);	41.28	0	0
4	0	adlnet/jxapi	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNull(object);	98.42	0	0
4	1	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotNull(object);	98.42	0	0
4	2	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotEquals(expected,actual);	98.42	0	0
4	3	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertNotSame(expected,actual);	98.42	0	0
4	4	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertThat(actual,is(equalTo(expected)));	98.42	0	0
4	5	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertSame(expected,actual);	98.42	0	0
4	6	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertTrue(condition);	98.42	0	0
4	7	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertEquals(expected,actual);	98.42	0	0
4	8	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertFalse(condition);	98.42	0	0
4	9	/	SubStatementTest	testGetVerb	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	98.42	0	0
5	0	adlnet/jxapi	ResultTest	testGetDuration	assertNotNull(actual);	assertNotNull(obj);	44.26	0	0
5	1	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotEquals(expected,actual);	44.26	0	0
5	2	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNotSame(expected,actual);	44.26	0	0
5	3	/	ResultTest	testGetDuration	assertNotNull(actual);	assertSame(expected,actual);	44.26	0	0
5	4	/	ResultTest	testGetDuration	assertNotNull(actual);	assertTrue(condition);	44.26	0	0
5	5	/	ResultTest	testGetDuration	assertNotNull(actual);	assertEquals(expected,actual);	44.26	0	0
5	6	/	ResultTest	testGetDuration	assertNotNull(actual);	assertFalse(condition);	44.26	0	0
5	7	/	ResultTest	testGetDuration	assertNotNull(actual);	assertThat(actual,Matchers.is(expected));	44.26	0	0
5	8	/	ResultTest	testGetDuration	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	44.26	0	0
5	9	/	ResultTest	testGetDuration	assertNotNull(actual);	assertNull(obj);	44.26	0	0
6	0	adlnet/jxapi	StatementTest	testGetAuthority	assertNotNull(actual);	assertTrue(actualinstanceofActor);	53.04	0	0
6	1	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertEquals(agent,actual);	53.04	0	0
6	2	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotSame(agent,actual);	53.04	0	0
6	3	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertSame(agent,actual);	53.04	0	0
6	4	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertFalse(actualinstanceofUser);	53.04	0	0
6	5	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotEquals(agent,actual);	53.04	0	0
6	6	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNull(actual);	53.04	0	0
6	7	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotEquals(null,actual);	53.04	0	0
6	8	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertNotNull(actual);	53.04	1	0
6	9	/	StatementTest	testGetAuthority	assertNotNull(actual);	assertArrayEquals(newActor[]{agent},newActor[]{actual});	53.04	0	0
7	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotNull(OpenKoreanTextProcessorJava.normalize("STR"));	484.49	0	0
7	1	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertThrows(IllegalArgumentException.class,()->normalize("STR"));	484.49	0	0
7	2	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNull(normalize(null));	484.49	0	0
7	3	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertTrue(normalize("STR").startsWith("STR"));	484.49	0	0
7	4	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertEquals("STR",normalize("STR"));	484.49	0	0
7	5	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertArrayEquals('b','c'});	484.49	0	0
7	6	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertSame(normalize("STR"),normalize("STR"));	484.49	0	0
7	7	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotSame(OpenKoreanTextProcessorJava.normalize("STR"),OpenKoreanTextProcessorJava.normalize("STR"));	484.49	0	0
7	8	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertFalse(normalize("STR").endsWith("STR"));	484.49	0	0
7	9	/	OpenKoreanProcessorJavaTest	testNormalize	assertEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	assertNotEquals("STR",OpenKoreanTextProcessorJava.normalize("STR"));	484.49	0	0
8	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(tokens.size()>0);	256.61	0	0
8	1	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotEquals(0,tokens.size());	256.61	0	0
8	2	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertTrue(tokens.get(0).isUnknown());	256.61	0	0
8	3	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotNull(tokens);	256.61	0	0
8	4	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertNotSame(KoreanTokenizer.KoreanToken.class,tokens.get(0).getClass());	256.61	0	0
8	5	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertSame(String.class,text.getClass());	256.61	0	0
8	6	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	256.61	0	0
8	7	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertFalse(tokens.isEmpty());	256.61	0	0
8	8	/	OpenKoreanProcessorJavaTest	testTokensToJavaKoreanTokenList	assertEquals("STR"+"STR",OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens,true).toString());	assertEquals(5,tokens.size());	256.61	0	0
9	0	xmlet/XsdParser	IssuesTest	testIssue23	assertTrue(true);	assertArrayEquals(newXsdSchema[]{},schemas.toArray());	110.24	0	0
9	1	/	IssuesTest	testIssue23	assertTrue(true);	assertTrue(schemas.size()>0);	110.24	0	0
9	2	/	IssuesTest	testIssue23	assertTrue(true);	assertNotSame(schemas.get(0),null);	110.24	0	0
9	3	/	IssuesTest	testIssue23	assertTrue(true);	assertThat(schemas,Matchers.hasSize(1));	110.24	0	0
9	4	/	IssuesTest	testIssue23	assertTrue(true);	assertEquals(1,schemas.size());	110.24	0	0
9	5	/	IssuesTest	testIssue23	assertTrue(true);	assertNotNull(schemas);	110.24	0	0
9	6	/	IssuesTest	testIssue23	assertTrue(true);	assertNotEquals(0,schemas.size());	110.24	0	0
9	7	/	IssuesTest	testIssue23	assertTrue(true);	assertSame(parser,parser);	110.24	0	0
9	8	/	IssuesTest	testIssue23	assertTrue(true);	assertFalse(schemas.isEmpty());	110.24	0	0
9	9	/	IssuesTest	testIssue23	assertTrue(true);	assertThat(schemas,Matchers.contains(Matchers.notNullValue()));	110.24	0	0
10	0	xmlet/XsdParser	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNull(schemas);	117.62	0	0
10	1	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotSame(parser,schemas.get(0).getParser());	117.62	0	0
10	2	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertArrayEquals(newObject[]{parser},newObject[]{schemas.get(0).getParser()});	117.62	0	0
10	3	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(0,schemas.size());	117.62	0	0
10	4	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotNull(schemas);	117.62	0	0
10	5	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertSame(parser,schemas.get(0).getParser());	117.62	0	0
10	6	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertTrue(schemas.isEmpty());	117.62	0	0
10	7	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertFalse(schemas.isEmpty());	117.62	0	0
10	8	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertNotEquals(parser,schemas.get(0).getParser());	117.62	0	0
10	9	/	IssuesTest	testIssue27Attributes	assertEquals(1,schemas.size());	assertEquals(0,schemas.size());	117.62	0	0
11	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotNull(a);	68.28	0	0
11	1	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a,b);	68.28	0	0
11	2	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertSame(b,a);	68.28	0	0
11	3	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertTrue(history.isEmpty());	68.28	0	0
11	4	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotSame(a,b);	68.28	0	0
11	5	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertFalse(a.isSolved());	68.28	0	0
11	6	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(3,a.getSize());	68.28	0	0
11	7	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertEquals(1,a.getHistory().size());	68.28	0	0
11	8	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNull(history);	68.28	0	0
11	9	/	PuzzleStateTest	equal_even_with_different_history	assertEquals(a,b);	assertNotEquals(a.getHistory().size(),b.getHistory().size());	68.28	0	0
12	0	hazelcast/hazelcast-simulator	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(test,testContainer.getTestInstance());	125.84	0	0
12	1	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertTrue(testContainer.getTestInstance()instanceofBaseTest);	125.84	0	0
12	2	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotEquals(testContainer.getTestInstance(),null);	125.84	0	0
12	3	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(testContainer.getTestInstance(),getTestInstance());	125.84	0	0
12	4	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotNull(test);	125.84	0	0
12	5	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertNotSame(test,getTestInstance());	125.84	0	0
12	6	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertFalse(testContainer.getTestInstance()==null);	125.84	0	0
12	7	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertSame(test,testContainer.getTestInstance());	125.84	0	0
12	8	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	125.84	0	0
12	9	/	TestContainer_BasicTest	testGetTestInstance	assertEquals(test,testContainer.getTestInstance());	assertEquals(test,getTestInstance());	125.84	0	0
13	0	hazelcast/hazelcast-simulator	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals("STR",testData.getTestName());	79.35	0	0
13	1	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertEquals(2,testData.getTestIndex());	79.35	1	0
13	2	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotEquals(0,testData.getTestIndex());	79.35	0	0
13	3	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertArrayEquals(2,3});	79.35	0	0
13	4	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotSame(testData,registry.getTest("STR"));	79.35	0	0
13	5	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertFalse(testData.getTestIndex()==5);	79.35	0	0
13	6	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertTrue(testData.getTestIndex()>0);	79.35	0	0
13	7	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertSame(testData,registry.getTest("STR"));	79.35	0	0
13	8	/	RegistryTest	testGetTest	assertEquals(2,testData.getTestIndex());	assertNotNull(testData);	79.35	0	0
14	0	hazelcast/hazelcast-simulator	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertThat(TestClass.isLocal(cloudProvider),Matchers.is(true));	78.24	0	0
14	1	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertArrayEquals(newboolean[]{true},newboolean[]{TestClass.isLocal(cloudProvider)});	78.24	0	0
14	2	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertEquals(true,TestClass.isLocal(cloudProvider));	78.24	0	0
14	3	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotNull(cloudProvider);	78.24	0	0
14	4	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotSame(true,TestClass.isLocal(cloudProvider));	78.24	0	0
14	5	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertTrue(TestClass.isLocal(cloudProvider));	78.24	0	0
14	6	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertFalse(TestClass.isLocal(cloudProvider));	78.24	0	0
14	7	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertSame(true,TestClass.isLocal(cloudProvider));	78.24	0	0
14	8	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNull(cloudProvider);	78.24	0	0
14	9	/	CloudProviderUtilsTest	testIsLocal_withLocal	assertTrue(CloudProviderUtils.isLocal(PROVIDER_LOCAL));	assertNotEquals(false,TestClass.isLocal(cloudProvider));	78.24	0	0
15	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(null,"STR","STR"));	77.58	0	0
15	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(false,bind0(newCustomObject(),"STR","STR"));	77.58	0	0
15	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals("STR",findField(newObject().getClass(),"STR").getName());	77.58	0	0
15	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(newCustomObject(),"STR","STR"));	77.58	0	0
15	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(newObject(),"STR","STR"));	77.58	0	0
15	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNull(findField(newObject().getClass(),"STR"));	77.58	0	0
15	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertSame(String.class,findField(newCustomObject().getClass(),"STR").getType());	77.58	0	0
15	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(findTargetObject(newObject(),"STR",newString[]{"STR"}));	77.58	0	0
15	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(true,bind0(newObject(),"STR","STR"));	77.58	0	0
15	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_shortWithUnderscore	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(null,findTargetObject(newCustomObject(),"STR",newString[]{"STR"}));	77.58	0	0
16	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(null,bind0(object,"STR","STR"));	76.43	0	0
16	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	76.43	0	0
16	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertSame(bind0(object,"STR","STR"),true);	76.43	0	0
16	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(bind0(object,"STR","STR"),null);	76.43	0	0
16	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	76.43	0	0
16	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	76.43	0	0
16	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	76.43	0	0
16	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(false,bind0(object,"STR","STR"));	76.43	0	0
16	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,"STR","STR"));	76.43	0	0
16	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Float	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,"STR","STR"));	76.43	0	0
17	0	hazelcast/hazelcast-simulator	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen<secondLastSeen);	114.72	0	0
17	1	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen>secondLastSeen);	114.72	0	0
17	2	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertThat(firstLastSeen,both(greaterThanOrEqualTo(0L)).and(lessThanOrEqualTo(100L)));	114.72	0	0
17	3	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotSame(firstLastSeen,secondLastSeen);	114.72	0	0
17	4	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotEquals(firstLastSeen,secondLastSeen);	114.72	0	0
17	5	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen<=secondLastSeen);	114.72	0	0
17	6	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNotNull(firstLastSeen);	114.72	0	0
17	7	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertNull(firstLastSeen);	114.72	0	0
17	8	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertEquals(firstLastSeen,secondLastSeen);	114.72	0	0
17	9	/	WorkerProcessManagerTest	testUpdateLastSeenTimestamp_whenSimulatorAddressFromWorker_thenUpdate	assertNotEquals(firstLastSeen,workerProcess1.getLastSeen());	assertTrue(firstLastSeen>=secondLastSeen);	114.72	0	0
18	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertEquals("STR",focal.get("STR","STR"));	78.84	0	0
18	1	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertArrayEquals(2,3});	78.84	0	0
18	2	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertSame("STR",focal.get("STR","STR"));	78.84	0	0
18	3	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertFalse(focal.get("STR","STR").endsWith("STR"));	78.84	0	0
18	4	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertNotEquals("STR",focal.get("STR","STR"));	78.84	0	0
18	5	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertNotNull(focal.get("STR","STR"));	78.84	0	0
18	6	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertNotSame("STR",focal.get("STR","STR"));	78.84	0	0
18	7	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertTrue(focal.get("STR","STR").matches("STR"));	78.84	0	0
18	8	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertTrue(focal.get("STR","STR").startsWith("STR"));	78.84	0	0
18	9	/	SimulatorPropertiesTest	testGet_withDefaultValue_defaultIsUsed	assertEquals("STR",simulatorProperties.get("STR","STR"));	assertNull(focal.get("STR","STR"));	78.84	0	0
19	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotSame("STR",obj.toString());	73.53	0	0
19	1	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertEquals("STR",obj.toString());	73.53	0	0
19	2	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertFalse(obj.toString().startsWith("STR"));	73.53	0	0
19	3	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNull(obj.toString());	73.53	0	0
19	4	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotNull(obj.toString());	73.53	0	0
19	5	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertTrue(obj.toString().startsWith("STR"));	73.53	0	0
19	6	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertSame("STR",obj.toString());	73.53	0	0
19	7	/	SimulatorAddressTest	testToString_whenAgent	assertEquals("STR",agentAddress(5).toString());	assertNotEquals("STR",obj.toString());	73.53	0	0
20	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResultinstanceofList);	398.01	0	0
20	1	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),distinctElements.size());	398.01	0	0
20	2	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.contains(expectedElement));	398.01	0	0
20	3	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertNotNull(qResult);	398.01	0	0
20	4	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(qResult.size(),3);	398.01	1	0
20	5	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.get(0)instanceofODocument);	398.01	0	0
20	6	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.contains(unexpectedElement));	398.01	0	0
20	7	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(expectedOrderedElements,qResult);	398.01	0	0
20	8	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertFalse(qResult.stream().anyMatch(Objects::isNull));	398.01	0	0
20	9	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertEquals(expectedValue,qResult.get(0).field("STR"));	398.01	0	0
20	10	/	OCommandExecutorSQLSelectTest	testLimit	assertEquals(qResult.size(),3);	assertTrue(qResult.isEmpty());	398.01	0	0
21	0	orientechnologies/orientdb	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNull(object);	236.75	0	0
21	1	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertEquals(expectedValue,actualValue);	236.75	0	0
21	2	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotNull(object);	236.75	0	0
21	3	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotSame(expectedObject,actualObject);	236.75	0	0
21	4	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertSame(expectedObject,actualObject);	236.75	0	0
21	5	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertTrue(condition);	236.75	0	0
21	6	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertFalse(condition);	236.75	0	0
21	7	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertArrayEquals(expectedArray,actualArray);	236.75	0	0
21	8	/	OCommandExecutorSQLSelectTest	testOrderByEmbeddedParams2	assertEquals(qResult.size(),2);	assertNotEquals(expectedValue,actualValue);	236.75	0	0
22	0	orientechnologies/orientdb	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotNull(property);	260.92	0	0
22	1	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertTrue(schema.getClass("STR").existsProperty("STR"));	260.92	0	0
22	2	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertEquals("STR",property.getName());	260.92	0	0
22	3	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotEquals(5,db.getMetadata().getSchema().getClasses().size());	260.92	0	0
22	4	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertArrayEquals(newOProperty[]{property},classA.getDeclaredProperties().toArray());	260.92	0	0
22	5	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertSame(OType.STRING,property.getType());	260.92	0	0
22	6	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotEquals("STR",property.getName());	260.92	0	0
22	7	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNotSame(OType.INTEGER,property.getType());	260.92	0	0
22	8	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertFalse(schema.getClass("STR").existsProperty("STR"));	260.92	0	0
22	9	/	AlterPropertyTest	testPropertyRenamingReload	assertEquals(property,classA.getProperty("STR"));	assertNull(property);	260.92	0	0
23	0	orientechnologies/orientdb	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,set.size());	263.09	0	0
23	1	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(set.isEmpty());	263.09	0	0
23	2	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc1);	263.09	0	0
23	3	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(1,lst.size());	263.09	0	0
23	4	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNull(doc.field("STR"));	263.09	0	0
23	5	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertEquals(0,doc.fieldCount());	263.09	0	0
23	6	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertNotNull(doc2);	263.09	0	0
23	7	/	ODirtyManagerTest	testLinkCollectionRemove	assertEquals(1,manager.getNewRecords().size());	assertTrue(lst.isEmpty());	263.09	0	0
24	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertTrue(valueinstanceofString);	88.44	0	0
24	1	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotEquals(0,value.length);	88.44	0	0
24	2	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertEquals("STR",value);	88.44	0	0
24	3	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertFalse(valueinstanceofInteger);	88.44	0	0
24	4	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotSame(unexpectedObject,value);	88.44	0	0
24	5	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotEquals("STR",value);	88.44	0	0
24	6	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertArrayEquals(expectedArray,value);	88.44	0	0
24	7	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNull(value);	88.44	0	0
24	8	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertSame(expectedObject,value);	88.44	0	0
24	9	/	OMatchStatementExecutionTest	testManager	assertEquals("STR",getManager("STR").field("STR"));	assertNotNull(value);	88.44	0	0
25	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertArrayEquals("b","c"});	258.5	0	0
25	1	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[1]);	258.5	0	0
25	2	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[0]);	258.5	0	0
25	3	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fieldsinstanceofString[]);	258.5	0	0
25	4	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals(3,fields.length);	258.5	0	0
25	5	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields);	258.5	1	0
25	6	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertFalse(Arrays.asList(fields).contains("STR"));	258.5	0	0
25	7	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertNotNull(fields[0]);	258.5	0	0
25	8	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertEquals("STR",fields[2]);	258.5	0	0
25	9	/	ODocumentSchemalessBinarySerializationTest	testFieldNamesRaw	assertNotNull(fields);	assertTrue(fields.length>=3);	258.5	0	0
26	0	orientechnologies/orientdb	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotEquals(expectedArray,result.toArray());	258.02	0	0
26	1	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotSame(unexpectedObject,result);	258.02	0	0
26	2	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotEquals("STR",result);	258.02	0	0
26	3	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertTrue(resultinstanceofOCompositeKey);	258.02	0	0
26	4	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertFalse(resultinstanceofOCompositeKey);	258.02	0	0
26	5	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertArrayEquals(expectedArray,result.toArray());	258.02	0	0
26	6	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertEquals("STR",result);	258.02	0	0
26	7	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertSame(expectedObject,result);	258.02	0	0
26	8	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNotNull(result);	258.02	0	0
26	9	/	OSimpleKeyIndexDefinitionTest	testNullParamItem	assertNull(result);	assertNull(result);	258.02	1	0
27	0	orientechnologies/orientdb	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertEquals(-1.0,Double.parseDouble(res.get(0).field("STR").toString()));	167.26	0	0
27	1	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(Double.isNaN(Double.parseDouble(res.get(0).field("STR").toString())));	167.26	0	0
27	2	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertTrue(res.isEmpty());	167.26	0	0
27	3	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(Double.isNaN(Double.parseDouble(res.get(0).field("STR").toString())));	167.26	0	0
27	4	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotEquals(-2.0,Double.parseDouble(res.get(0).field("STR").toString()));	167.26	0	0
27	5	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	167.26	1	0
27	6	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNull(res);	167.26	0	0
27	7	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertSame(res,res);	167.26	0	0
27	8	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotSame(res,newArrayList<ODocument>());	167.26	0	0
27	9	/	OETLCSVExtractorTest	testNegativeFloat	assertFalse(res.isEmpty());	assertNotNull(res);	167.26	0	0
28	0	orientechnologies/orientdb	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.get(0)instanceofODocument);	327.9	0	0
28	1	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.contains(newODocument("STR")));	327.9	0	0
28	2	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertEquals(1,res.size());	327.9	0	0
28	3	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.isEmpty());	327.9	1	0
28	4	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(res.containsExactlyOne());	327.9	0	0
28	5	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(res.isEmpty());	327.9	0	0
28	6	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertFalse(res.iterator().hasNext());	327.9	0	0
28	7	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertTrue(hasNullName);	327.9	0	0
28	8	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNotNull(res);	327.9	0	0
28	9	/	TestNullFieldQuery	testQueryNullValue	assertTrue(res.isEmpty());	assertNull(((ODocument)res.get(0)).field("STR"));	327.9	0	0
29	0	amlinv/stat-collection-utils	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertSame(mockLogger,jolokiaConnection.getLog());	29.13	0	0
29	1	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals("STR",jolokiaConnection.getLog().getName());	29.13	0	0
29	2	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertEquals(mockLogger,jolokiaConnection.getLog());	29.13	0	0
29	3	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNull(null);	29.13	0	0
29	4	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertFalse(jolokiaConnection.getLog().getName().isEmpty());	29.13	0	0
29	5	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog().equals(mockLogger));	29.13	0	0
29	6	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotEquals(null,jolokiaConnection.getLog());	29.13	0	0
29	7	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotNull(jolokiaConnection.getLog());	29.13	0	0
29	8	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertTrue(jolokiaConnection.getLog()instanceofLogger);	29.13	0	0
29	9	/	JolokiaConnectionTest	testGetSetLogger	assertNotNull(this.jolokiaConnection.getLog());	assertNotSame(null,jolokiaConnection.getLog());	29.13	0	0
30	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotSame(unexpectedInstance,result);	27.75	0	0
30	1	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertSame(expectedInstance,result);	27.75	0	0
30	2	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotEquals(unexpectedResult,result);	27.75	0	0
30	3	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(resultinstanceofObjectQueryInfo);	27.75	0	0
30	4	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertArrayEquals(expectedArray,result.toArray());	27.75	0	0
30	5	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertTrue(result!=null);	27.75	0	0
30	6	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertEquals(expectedResult,result);	27.75	0	0
30	7	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertFalse(result==null);	27.75	0	0
30	8	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNotNull(result);	27.75	0	0
30	9	/	ObjectQueryPreparerTest	testPrepareObjectNoSetters	assertNull(result);	assertNull(result);	27.75	1	0
31	0	rockagen/commons-lib	CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",CommUtil.toDBC("STR"));	122.01	1	0
31	1	/	CommUtilTest	testBC	assertEquals("STR",CommUtil.toDBC("STR"));	assertEquals("STR",toDBC("STR"));	122.01	0	0
32	0	sofastack/sofa-bolt	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertSame(connection,pool.getConnection());	489.08	0	0
32	1	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(0,count("STR"));	489.08	0	0
32	2	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotEquals(pool,null);	489.08	0	0
32	3	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertFalse(cm.count("STR")==5);	489.08	0	0
32	4	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotNull(this.getConnectionPool(this.connTasks.get(poolKey)));	489.08	0	0
32	5	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(0,pool.size());	489.08	0	0
32	6	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertTrue(cm.count("STR")==0);	489.08	0	0
32	7	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNull(this.connTasks.get(poolKey));	489.08	0	0
32	8	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertEquals(3,count("STR"));	489.08	0	0
32	9	/	RpcConnectionManagerTest	testAdd	assertEquals(1,cm.count(poolKey));	assertNotSame(connection,pool.getConnection());	489.08	0	0
33	0	sofastack/sofa-bolt	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotNull(isConnectionMonitorSwitchOn());	86.05	0	0
33	1	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertTrue(isConnectionMonitorSwitchOn());	86.05	0	0
33	2	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertEquals(true,isConnectionMonitorSwitchOn());	86.05	0	0
33	3	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(false,isConnectionMonitorSwitchOn());	86.05	0	0
33	4	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNull(isConnectionMonitorSwitchOn());	86.05	0	0
33	5	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertArrayEquals(newboolean[]{true},newboolean[]{isConnectionMonitorSwitchOn()});	86.05	0	0
33	6	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotEquals(newBoolean(true),newBoolean(isConnectionMonitorSwitchOn()));	86.05	0	0
33	7	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertNotSame(false,isConnectionMonitorSwitchOn());	86.05	0	0
33	8	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertSame(true,isConnectionMonitorSwitchOn());	86.05	0	0
33	9	/	GlobalSwitchTest	testSystemSettings_takesEffect_before_defaultvalue	assertTrue(client1.isConnectionMonitorSwitchOn());	assertFalse(isConnectionMonitorSwitchOn());	86.05	0	0
34	0	trautonen/coveralls-maven-plugin	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getPort());	89.8	0	0
34	1	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame("STR",proxy.getProtocol());	89.8	0	0
34	2	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals(8080,proxy.getPort());	89.8	0	0
34	3	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getHost());	89.8	0	0
34	4	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertEquals("STR",proxy.getProtocol());	89.8	0	0
34	5	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getHost());	89.8	0	0
34	6	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame(1234,proxy.getPort());	89.8	0	0
34	7	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotSame("STR",proxy.getHost());	89.8	0	0
34	8	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertTrue(proxy.getHost().startsWith("STR"));	89.8	0	0
34	9	/	CoverallsProxyClientTest	testConstructorWithProxy	assertNotNull(newCoverallsProxyClient("STR",proxy));	assertNotNull(proxy.getProtocol());	89.8	0	0
35	0	jcodec/jcodec	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(expected,FOCAL.estimeteSeekSize(10,5));	195.38	0	0
35	1	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>=5&&FOCAL.estimeteSeekSize(5,3)<=10);	195.38	0	0
35	2	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	???;	195.38	0	0
35	3	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)<100);	195.38	0	0
35	4	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)%2==0);	195.38	0	0
35	5	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>=0);	195.38	0	0
35	6	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertTrue(FOCAL.estimeteSeekSize(5,3)>0);	195.38	0	0
35	7	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotNull(FOCAL.estimeteSeekSize(5,3));	195.38	0	0
35	8	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertEquals(10,FOCAL.estimeteSeekSize(5,3));	195.38	0	0
35	9	/	SeekHeadFactoryTest	testEstimeteSeekSize	assertEquals(14,estimeteSeekSize(4,1));	assertNotEquals(20,FOCAL.estimeteSeekSize(5,3));	195.38	0	0
36	0	jcodec/jcodec	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertEquals(expectedLength,res.length);	174.88	0	0
36	1	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertArrayEquals(expectedResult,res);	174.88	0	0
36	2	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotNull(res);	174.88	0	0
36	3	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertTrue(res.length>0);	174.88	0	0
36	4	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertFalse(res.length==0);	174.88	0	0
36	5	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotSame(expectedResult,res);	174.88	0	0
36	6	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedLength,res.length);	174.88	0	0
36	7	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNull(nullValue);	174.88	0	0
36	8	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertSame(expectedResult,res);	174.88	0	0
36	9	/	H264UtilsTest	testAvcCToAnnexB	assertArrayEquals(newbyte[]{0,0,0,1,0x67,'s','t','a','n',0,0,0,1,0x67,'t','h','e',0,0,0,1,0x68,'m','a','n',0,0,0,1,0x68,'c','o','o','l'},res);	assertNotEquals(expectedResult,res);	174.88	0	0
37	0	fabric8io/fabric8-maven-plugin	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertFalse(hasProfile);	97.47	0	0
37	1	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertArrayEquals(profile2,profile3});	97.47	0	0
37	2	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(0,profiles.size());	97.47	0	0
37	3	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profile);	97.47	0	0
37	4	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(3,profiles.size());	97.47	0	0
37	5	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles);	97.47	0	0
37	6	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertNotNull(profiles.get(0));	97.47	0	0
37	7	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(hasProfile);	97.47	0	0
37	8	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertEquals(profiles.size(),profileSet.size());	97.47	0	0
37	9	/	ProfileUtilTest	fromClasspath	assertEquals(1,profiles.size());	assertTrue(profiles.isEmpty());	97.47	0	0
38	0	fabric8io/fabric8-maven-plugin	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR").getName());	180.04	0	0
38	1	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals("STR",getInitContainer(builder,"STR").getImage());	180.04	0	0
38	2	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertFalse(handler.hasInitContainer(builder,"STR"));	180.04	1	0
38	3	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().getSpec().getInitContainers().size()>2);	180.04	0	0
38	4	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertArrayEquals("command2"},getInitContainer(builder,"initContainerName").getCommand());	180.04	0	0
38	5	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertEquals(3,builder.build().getSpec().getInitContainers().size());	180.04	0	0
38	6	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(hasInitContainer(builder,"STR"));	180.04	0	0
38	7	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNotNull(getInitContainer(builder,"STR"));	180.04	0	0
38	8	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertTrue(builder.build().getSpec().getInitContainers().size()<5);	180.04	0	0
38	9	/	InitContainerHandlerTest	append	assertFalse(handler.hasInitContainer(builder,"STR"));	assertNull(handler.getInitContainer(builder,"STR"));	180.04	0	0
39	0	fabric8io/fabric8-maven-plugin	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotSame(oldTag,resultedTag);	87.56	0	0
39	1	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag2Date);	87.56	0	0
39	2	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag1Date.compareTo(tag2Date)>0);	87.56	0	0
39	3	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(tag1Date);	87.56	0	0
39	4	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertTrue(tag2Date.compareTo(tag1Date)<0);	87.56	0	0
39	5	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertNotNull(resultedTag);	87.56	0	0
39	6	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertSame(latestTag,resultedTag);	87.56	0	0
39	7	/	ImageStreamServiceTest	should_return_newer_tag	assertEquals(latestTag,resultedTag);	assertEquals(latestTag,resultedTag);	87.56	1	0
40	0	arnohaase/a-foundation	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals("STR",FOCAL.bytesToHexString(newbyte[]{(byte)0xFF}));	50.69	0	0
40	1	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals("STR",FOCAL.bytesToHexString(newbyte[]{65,66,67}));	50.69	0	0
40	2	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotEquals("STR",FOCAL.bytesToHexString(newbyte[]{65,66,67,68}));	50.69	0	0
40	3	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNotNull(FOCAL.bytesToHexString(newbyte[]{65}));	50.69	0	0
40	4	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals("STR",FOCAL.bytesToHexString(newbyte[0]));	50.69	0	0
40	5	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals("STR",FOCAL.bytesToHexString(newbyte[]{63}));	50.69	0	0
40	6	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertEquals("STR",FOCAL.bytesToHexString(newbyte[]{0}));	50.69	0	0
40	7	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertFalse(FOCAL.bytesToHexString(newbyte[]{65}).isEmpty());	50.69	0	0
40	8	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertTrue(FOCAL.bytesToHexString(newbyte[]{65}).startsWith("STR"));	50.69	0	0
40	9	/	StringHelperTest	testBytesToHexString	assertEquals(null,StringHelper.bytesToHexString(null));	assertNull(FOCAL.bytesToHexString(null));	50.69	0	0
41	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	124.6	0	0
41	1	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	124.6	0	0
41	2	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(cookies.getCookies().size()>0);	124.6	0	0
41	3	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertEquals("STR",cookies.getCookies().get(0).getName());	124.6	0	0
41	4	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNull(cookies.getCookies().get(1));	124.6	0	0
41	5	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertTrue(responseHandler.handleResponse(null).isEmpty());	124.6	0	0
41	6	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotNull(cookies.getCookies().get(0));	124.6	0	0
41	7	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertFalse(cookies.getCookies().isEmpty());	124.6	0	0
41	8	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotSame(testServer,httpclient.getConnectionManager().getSchemeRegistry());	124.6	0	0
41	9	/	CookieIntegrationTest	testCookieSentBackToClient	assertEquals(1,cookies.getCookies().size());	assertNotEquals("STR",cookies.getCookies().get(0).getValue());	124.6	0	0
42	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.isEmpty());	66.91	0	0
42	1	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertFalse(headers.containsKey("STR"));	66.91	0	0
42	2	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(0,headers.size());	66.91	0	0
42	3	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertSame(requestTemplate,oAuth2FeignRequestInterceptor.getRequestTemplate());	66.91	0	0
42	4	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertTrue(headers.containsKey("STR"));	66.91	0	0
42	5	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotSame(template,requestTemplate);	66.91	0	0
42	6	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertEquals(HttpMethod.GET,requestTemplate.method());	66.91	0	0
42	7	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotNull(headers.get("STR"));	66.91	0	0
42	8	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNull(headers.get("STR"));	66.91	0	0
42	9	/	OAuth2FeignRequestInterceptorTests	applyAuthorizationHeader	assertTrue("STR",headers.containsKey("STR"));	assertNotEquals(0,headers.size());	66.91	0	0
43	0	tradier/dropwizard-raven	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertFalse(filter.decide(evt)==FilterReply.ACCEPT);	43.38	0	0
43	1	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotNull(filter.decide(evt));	43.38	0	0
43	2	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertTrue(filter.decide(evt)==FilterReply.NEUTRAL);	43.38	0	0
43	3	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertThat(filter.decide(evt),CoreMatchers.equalTo(FilterReply.NEUTRAL));	43.38	0	0
43	4	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNull(filter.decide(evt));	43.38	0	0
43	5	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotSame(FilterReply.DENY,filter.decide(evt));	43.38	0	0
43	6	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertEquals(FilterReply.DENY,filter.decide(evt));	43.38	0	0
43	7	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertNotEquals(FilterReply.ACCEPT,filter.decide(evt));	43.38	0	0
43	8	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertSame(FilterReply.NEUTRAL,filter.decide(evt));	43.38	0	0
43	9	/	DroppingRavenLoggingFilterTest	verifyFilterAllowsNonSentryLoggers	assertEquals(FilterReply.NEUTRAL,filter.decide(evt));	assertArrayEquals(newFilterReply[]{FilterReply.ACCEPT},newFilterReply[]{filter.decide(evt)});	43.38	0	0
44	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith("STR"));	120.29	0	0
44	1	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(sourceMetadata);	120.29	0	0
44	2	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	120.29	0	0
44	3	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testSourceUrl,sourceUrl);	120.29	0	0
44	4	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(testUrl,normalizedUrl);	120.29	0	0
44	5	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(sourceUrl);	120.29	0	0
44	6	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	120.29	0	0
44	7	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.contains("STR"));	120.29	0	0
44	8	/	BasicURLNormalizerTest	testBothAnchorAndQueryFilter	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testUrl,normalizedUrl);	120.29	0	0
45	0	javadev/moneytostr-russian	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotEquals(0,Double.compare(10.5,moneyToStrUSDRUS.convert(10.5).length()));	91.96	0	0
45	1	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNull(moneyToStrRUR);	91.96	0	0
45	2	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotSame(moneyToStrRURRUS,moneyToStrUAHENG);	91.96	0	0
45	3	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getCustomStrings());	91.96	0	0
45	4	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSD.getCurrency().toString());	91.96	0	0
45	5	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertTrue(moneyToStrUSDENGinstanceofMoneyToStr);	91.96	0	0
45	6	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertSame(moneyToStrUAHENG,moneyToStrUAHENG);	91.96	0	0
45	7	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertFalse(moneyToStrUAHRUS.convert(100.0).isEmpty());	91.96	0	0
45	8	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertThrows(IllegalArgumentException.class,()->moneyToStrPER100.convert(null));	91.96	0	0
45	9	/	MoneyToStrTest	checkUSDRUS	assertEquals("STR",moneyToStrUSDRUS.convert(V_300D));	assertNotNull(moneyToStrUAH);	91.96	0	0
46	0	myabc/markdownj	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).length()>0);	51.76	0	0
46	1	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertSame("STR",FOCAL.decode(encoded));	51.76	0	0
46	2	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).endsWith("STR"));	51.76	0	0
46	3	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotEquals("STR",FOCAL.decode(encoded));	51.76	0	0
46	4	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertNotNull(FOCAL.decode(encoded));	51.76	0	0
46	5	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertFalse(FOCAL.decode(encoded).isEmpty());	51.76	0	0
46	6	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertEquals("STR",FOCAL.decode(encoded));	51.76	0	0
46	7	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).startsWith("STR"));	51.76	0	0
46	8	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).contains("STR"));	51.76	0	0
46	9	/	EmailAddresses	testDecoder	assertEquals(billg,HTMLDecoder.decode(encoded));	assertTrue(FOCAL.decode(encoded).matches("STR"));	51.76	0	0
47	0	gvlasov/collections-utils	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotNull(map);	52.26	0	0
47	1	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertEquals(3,map.size());	52.26	0	0
47	2	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotSame(map.getClass(),ZippedMap.class);	52.26	0	0
47	3	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertArrayEquals("goodbye","hey"});	52.26	0	0
47	4	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertFalse(map.containsKey("STR"));	52.26	0	0
47	5	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertThrows(NullPointerException.class,()->map.containsKey(null));	52.26	0	0
47	6	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertTrue(map.containsKey("STR"));	52.26	1	0
47	7	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotSame(map,newZippedMap<>());	52.26	0	0
47	8	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertNotEquals(map.size(),0);	52.26	0	0
47	9	/	ZippedMapTest	constructsFromEquallySizedLists	assertTrue(map.containsKey("STR"));	assertSame(map,map);	52.26	0	0
48	0	PeterisP/morphology	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(0,formas.size());	115.73	0	0
48	1	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.isEmpty());	115.73	0	0
48	2	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	115.73	0	0
48	3	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(formas.contains(expectedElement));	115.73	0	0
48	4	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertArrayEquals(expectedElements,formas.toArray());	115.73	0	0
48	5	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(1,formas.size());	115.73	1	0
48	6	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertNotNull(formas);	115.73	0	0
48	7	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertTrue(condition(forma));	115.73	0	0
48	8	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertEquals(expectedSize,formas.size());	115.73	0	0
48	9	/	MorphologyTest	inflexible_genitive_generation	assertEquals(1,formas.size());	assertFalse(formas.contains(unexpectedElement));	115.73	0	0
49	0	cucumber-ltd/cucumber-pro-plugin-jvm	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertSame(config,config);	67.59	0	0
49	1	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals(config.get("STR"),config.get("STR"));	67.59	0	0
49	2	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertArrayEquals("nonk"},config.getValues("kasha"));	67.59	0	0
49	3	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotSame(config,config.clone());	67.59	0	0
49	4	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertEquals("STR",config.get("STR"));	67.59	0	0
49	5	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotEquals("STR",config.get("STR"));	67.59	0	0
49	6	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertTrue(config.getIn("STR").isNull());	67.59	0	0
49	7	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNull(config.get("STR"));	67.59	0	0
49	8	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertFalse(config.getIn("STR").isNull());	67.59	0	0
49	9	/	ConfigTest	set_value_is_not_null	assertFalse(config.isNull("STR"));	assertNotNull(config);	67.59	0	0
0	0	basis-technology-corp/tcl-regex-java	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(0,cm.getColorMapSize());	96.03	0	0
0	1	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotEquals(cm.getcolor('a'),cm.getcolor('b'));	96.03	0	0
0	2	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().isEmpty());	96.03	0	0
0	3	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNotNull(cm.getcolor('a'));	96.03	0	0
0	4	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(nfa.size(),cm.getColorMapSize());	96.03	0	0
0	5	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertFalse(cm.getColorMap().containsValue(0));	96.03	0	0
0	6	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getcolor('a')>0);	96.03	0	0
0	7	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertEquals(expected,actual);	96.03	0	0
0	8	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertTrue(cm.getColorMap().containsKey('b'));	96.03	0	0
0	9	/	ColorMapTest	testEmpty	assertEquals(Constants.WHITE,runtime(cm).getcolor('a'));	assertNull(cm.getcolor('z'));	96.03	0	0
1	0	basis-technology-corp/tcl-regex-java	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(true,matcher.find());	83.03	0	0
1	1	/	MatcherTest	reset	assertTrue(matcher.find());	assertEquals(false,matcher.find());	83.03	0	0
1	2	/	MatcherTest	reset	assertTrue(matcher.find());	assertArrayEquals(newboolean[]{true},newboolean[]{matcher.find()});	83.03	0	0
1	3	/	MatcherTest	reset	assertTrue(matcher.find());	assertSame(false,matcher.find());	83.03	0	0
1	4	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotSame(true,matcher.find());	83.03	0	0
1	5	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotEquals(null,matcher.find());	83.03	0	0
1	6	/	MatcherTest	reset	assertTrue(matcher.find());	assertFalse(matcher.find());	83.03	0	0
1	7	/	MatcherTest	reset	assertTrue(matcher.find());	assertNotNull(matcher.find());	83.03	0	0
1	8	/	MatcherTest	reset	assertTrue(matcher.find());	assertNull(matcher.find());	83.03	0	0
1	9	/	MatcherTest	reset	assertTrue(matcher.find());	assertTrue(matcher.find());	83.03	1	0
2	0	orientechnologies/orientdb	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertEquals(20432343L,OVarIntSerializer.readAsLong(bytes));	726.95	0	0
2	1	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotNull(OVarIntSerializer.readAsLong(bytes));	726.95	0	0
2	2	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(0L,OVarIntSerializer.readAsLong(bytes));	726.95	0	0
2	3	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNull(null);	726.95	0	0
2	4	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotEquals(null,OVarIntSerializer.readAsLong(bytes));	726.95	0	0
2	5	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertSame(Long.class,readAsLong(bytes).getClass());	726.95	0	0
2	6	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertArrayEquals(newlong[]{20432343L},newlong[]{OVarIntSerializer.readAsLong(bytes)});	726.95	0	0
2	7	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertTrue(OVarIntSerializer.readAsLong(bytes)!=0L);	726.95	0	0
2	8	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertFalse(OVarIntSerializer.readAsLong(bytes)<0);	726.95	0	0
2	9	/	OVarIntSerializerTest	serializePositive	assertEquals(OVarIntSerializer.readAsLong(bytes),20432343l);	assertNotSame(0L,OVarIntSerializer.readAsLong(bytes));	726.95	0	0
3	0	orientechnologies/orientdb	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertFalse(treeBucket.size()<0);	333.06	0	0
3	1	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertSame(0,treeBucket.size());	333.06	0	0
3	2	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertTrue(treeBucket.size()>=0);	333.06	0	0
3	3	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotSame(5,treeBucket.size());	333.06	0	0
3	4	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertEquals(treeBucket.size(),0);	333.06	1	0
3	5	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertThat(treeBucket.size(),CoreMatchers.is(0));	333.06	0	0
3	6	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNull(treeBucket.size());	333.06	0	0
3	7	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotEquals(10,treeBucket.size());	333.06	0	0
3	8	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertArrayEquals(newint[]{0},newint[]{treeBucket.size()});	333.06	0	0
3	9	/	SBTreeLeafBucketTest	testInitialization	assertEquals(treeBucket.size(),0);	assertNotNull(treeBucket.size());	333.06	0	0
4	0	orientechnologies/orientdb	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase("STR"));	382.55	0	0
4	1	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(existsDatabase(databaseName));	382.55	0	0
4	2	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(existsDatabase(longDatabaseName));	382.55	0	0
4	3	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase(databaseName));	382.55	0	0
4	4	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertEquals(expectedDatabaseCount,actualDatabaseCount);	382.55	0	0
4	5	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertNotNull(db);	382.55	0	0
4	6	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertTrue(server.existsDatabase("STR"));	382.55	1	0
4	7	/	OServerDatabaseOperationsTest	testCreateOpenDatabase	assertTrue(server.existsDatabase("STR"));	assertFalse(existsDatabase(longDatabaseName));	382.55	0	0
5	0	orientechnologies/orientdb	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotSame(res.get(0),res.get(1));	174.99	0	0
5	1	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertTrue(res.size()>0);	174.99	0	0
5	2	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotNull(res.get(0).field("STR"));	174.99	0	0
5	3	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNotEquals(5.0f,res.get(0).field("STR"));	174.99	0	0
5	4	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertEquals(10.78f,res.get(0).field("STR"));	174.99	0	0
5	5	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertThat(res.get(0).field("STR"),is(equalTo(10.78f)));	174.99	0	0
5	6	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertNull(res.get(0).field("STR"));	174.99	0	0
5	7	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertArrayEquals(newFloat[]{10.78f},newFloat[]{res.get(0).field("STR")});	174.99	0	0
5	8	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertFalse(res.isEmpty());	174.99	1	0
5	9	/	OETLCSVExtractorTest	testFloat	assertFalse(res.isEmpty());	assertSame(res.get(0),res.get(0));	174.99	0	0
6	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(anotherCompositeKey.equals(compositeKey));	257.86	0	0
6	1	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	257.86	0	0
6	2	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey)||anotherCompositeKey.equals(compositeKey));	257.86	0	0
6	3	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(anotherCompositeKey.equals(anotherCompositeKey));	257.86	0	0
6	4	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	257.86	0	0
6	5	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(compositeKey));	257.86	0	0
6	6	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	257.86	0	0
6	7	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(null));	257.86	0	0
6	8	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals("STR"));	257.86	0	0
6	9	/	OCompositeKeyTest	testEqualNotSameKeys	assertFalse(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	257.86	1	0
7	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),result.size());	261.67	0	0
7	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertEquals(expectedResult.get(0),result.get(0));	261.67	0	0
7	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList<?>);	261.67	0	0
7	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotSame(expectedResult,result);	261.67	0	0
7	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	261.67	0	0
7	5	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertNotEquals(expectedResult,result);	261.67	0	0
7	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(result.containsAll(expectedResult));	261.67	0	0
7	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertTrue(compositeIndexDefinition.getFields().contains("STR"));	261.67	0	0
7	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	261.67	0	0
7	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulThree	assertEquals(result,expectedResult);	assertArrayEquals(expectedResult.toArray(),result.toArray());	261.67	0	0
8	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.getName().endsWith("STR"));	259.51	0	0
8	1	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotEquals("STR",property.getName());	259.51	0	0
8	2	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertEquals("STR",property.getName());	259.51	0	0
8	3	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertFalse(property.getName().contains("STR"));	259.51	0	0
8	4	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getName().startsWith("STR"));	259.51	0	0
8	5	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertTrue(property.getName().contains("STR"));	259.51	0	0
8	6	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotSame(property.getName(),"STR");	259.51	0	0
8	7	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertArrayEquals(property.getName().toCharArray(),"STR".toCharArray());	259.51	0	0
8	8	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertNotNull(property.getName());	259.51	0	0
8	9	/	OCommandExecutorSQLCreatePropertyTest	testIfNotExists	assertEquals(property.getName(),PROP_NAME);	assertSame(property.getName(),"STR");	259.51	0	0
9	0	orientechnologies/orientdb	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objectsinstanceofHashSet);	262.47	0	0
9	1	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLine.size()>0);	262.47	0	0
9	2	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(timeLineinstanceofOMultiValueChangeTimeLine);	262.47	0	0
9	3	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(subObjects.contains("STR"));	262.47	0	0
9	4	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertEquals(1,objects.size());	262.47	0	0
9	5	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotNull(timeLine);	262.47	0	0
9	6	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertFalse(objects.isEmpty());	262.47	0	0
9	7	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(subObjects.contains(nestedDoc));	262.47	0	0
9	8	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertTrue(objects.contains(nestedDoc));	262.47	0	0
9	9	/	ODocumentTrackingNestedCollectionsTest	testChangesValuesNestedTrackingSet	assertEquals(1,timeLine.getMultiValueChangeEvents().size());	assertNotEquals("STR",subObjects.contains("STR"));	262.47	0	0
10	0	PeterisP/morphology	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	88.14	0	0
10	1	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertArrayEquals(newObject[0],w);	88.14	0	0
10	2	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	88.14	0	0
10	3	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotNull(w);	88.14	0	0
10	4	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotSame(null,w);	88.14	0	0
10	5	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals("STR",w.isRecognized());	88.14	0	0
10	6	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertSame(null,w);	88.14	0	0
10	7	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNull(w);	88.14	0	0
10	8	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	88.14	0	0
10	9	/	MorphologyTest	līstiiet	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	88.14	1	0
11	0	PeterisP/morphology	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.isRecognized());	70.02	0	0
11	1	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedWordform,actualWordform);	70.02	0	0
11	2	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotEquals(expectedObject,actualObject);	70.02	0	0
11	3	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertEquals(expectedNumberOfWordforms,locītājs.wordforms.size());	70.02	0	0
11	4	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(condition);	70.02	0	0
11	5	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertFalse(locītājs.wordforms.isEmpty());	70.02	0	0
11	6	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertNotNull(viņš);	70.02	0	0
11	7	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(condition);	70.02	0	0
11	8	/	MorphologyTest	laura_20130605	assertTrue(viņš.isRecognized());	assertTrue(locītājs.wordforms.contains(expectedWordform));	70.02	0	0
12	0	arnohaase/a-foundation	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertSame(set,set);	45.41	0	0
12	1	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotNull(flattened);	45.41	0	0
12	2	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(flattened.contains("STR"));	45.41	0	0
12	3	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(set,flattened);	45.41	0	0
12	4	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotEquals(0,flattened.size());	45.41	0	0
12	5	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertEquals(3,flattened.size());	45.41	0	0
12	6	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertNotSame(set,flattened);	45.41	0	0
12	7	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertArrayEquals(newString[]{"STR","STR","STR","STR"},flattened.toArray());	45.41	0	0
12	8	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertTrue(flattened.containsAll(Arrays.asList("STR","STR","STR","STR")));	45.41	0	0
12	9	/	ACollectionHelperTest	testFlatten	assertEquals(5,flattened.size());	assertFalse(flattened.isEmpty());	45.41	0	0
13	0	arnohaase/a-foundation	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertTrue(FOCAL.mkString(newArrayList<>(),"STR","STR","STR").isEmpty());	50.03	0	0
13	1	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertSame("STR",FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR"));	50.03	0	0
13	2	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNull(FOCAL.mkString(null,"STR","STR","STR"));	50.03	0	0
13	3	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotEquals("STR",FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR"));	50.03	0	0
13	4	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertArrayEquals("STR".toCharArray(),FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR").toCharArray());	50.03	0	0
13	5	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotSame("STR","STR",FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR"));	50.03	0	0
13	6	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertNotNull(FOCAL.mkString(Arrays.asList(1,2,3),null,"STR","STR"));	50.03	0	0
13	7	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertFalse(FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR").isEmpty());	50.03	0	0
13	8	/	ACollectionHelperTest	testMkStringFull	assertEquals("STR",ACollectionHelper.mkString(Arrays.asList(),"STR","STR","STR"));	assertEquals("STR",FOCAL.mkString(Arrays.asList(1,2,3),"STR","STR","STR"));	50.03	0	0
14	0	arnohaase/a-foundation	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotSame(0,result.length());	46.37	0	0
14	1	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotNull(result);	46.37	0	0
14	2	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertArrayEquals(newbyte[]{},result.getBytes());	46.37	0	0
14	3	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.contains("STR"));	46.37	0	0
14	4	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertNotEquals("STR",result);	46.37	0	0
14	5	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertEquals("STR",result);	46.37	1	0
14	6	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertFalse(result.isEmpty());	46.37	0	0
14	7	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertTrue(result.startsWith("STR"));	46.37	0	0
14	8	/	AJsonSerHelperTest	testNegativeDouble	assertEquals("STR",result);	assertFalse(result.endsWith("STR"));	46.37	0	0
15	0	OpenLiberty/ci.common	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertSame(srcDir,targetDir);	198.95	0	0
15	1	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotNull(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	198.95	0	0
15	2	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertEquals(true,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	198.95	0	0
15	3	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotSame(srcDir,targetDir);	198.95	0	0
15	4	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals("STR","STR");	198.95	0	0
15	5	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNull(null);	198.95	0	0
15	6	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	198.95	0	0
15	7	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertFalse(util.isGeneratedConfigFile(sourceFile,srcDir,targetDir));	198.95	0	0
15	8	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertNotEquals(false,isGeneratedConfigFile(sourceFile,srcDir,targetDir));	198.95	0	0
15	9	/	DevUtilTest	testNotGeneratedConfigFiles	assertFalse("STR",util.isGeneratedConfigFile(sourceFile,configDirectory,targetDir));	assertTrue(isGeneratedConfigFile(sourceFile,srcDir,targetDir));	198.95	0	0
16	0	OpenLiberty/ci.common	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotSame(serverDirectory,tempClass.getParentFile());	55.32	0	0
16	1	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNull(tempClass.getParent());	55.32	0	0
16	2	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals("STR",tempClass.getName().substring(tempClass.getName().lastIndexOf("STR")));	55.32	0	0
16	3	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.getPath().contains(targetDir.getPath()));	55.32	0	0
16	4	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertArrayEquals(newbyte[]{116,101,109,112},Files.readAllBytes(tempClass.toPath()));	55.32	0	0
16	5	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotNull(tempClass.lastModified());	55.32	0	0
16	6	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertEquals("STR",tempClass.getName());	55.32	0	0
16	7	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertNotEquals(targetDir,tempClass.getParentFile());	55.32	0	0
16	8	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertFalse(tempClass.isDirectory());	55.32	0	0
16	9	/	DevUtilTest	testCleanTargetDir	assertTrue(tempClass.exists());	assertTrue(tempClass.exists());	55.32	1	0
17	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotNull(result);	74.34	0	0
17	1	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertTrue(result.equals("STR"));	74.34	0	0
17	2	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals(4,result.length());	74.34	0	0
17	3	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	74.34	0	0
17	4	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertFalse(result.contains("STR"));	74.34	0	0
17	5	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertEquals("STR",result);	74.34	1	0
17	6	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertSame("STR",result);	74.34	0	0
17	7	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertNotSame("STR",result);	74.34	0	0
17	8	/	FizzBuzzTDDTest	test10ReturnsBuzz	assertEquals("STR",result);	assertArrayEquals(newString[]{"STR"},newString[]{result});	74.34	0	0
18	0	amlinv/stat-collection-utils	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertArrayEquals(2,3});	34.18	0	0
18	1	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotEquals("STR",result.toString());	34.18	0	0
18	2	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotNull(result);	34.18	1	0
18	3	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertEquals("STR",result.toString());	34.18	0	0
18	4	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotEquals(newJMXServiceURL("STR"),result);	34.18	0	0
18	5	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertSame(result,factory.createJMXServiceUrl("STR"));	34.18	0	0
18	6	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(resultinstanceofJMXServiceURL);	34.18	0	0
18	7	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertNotSame(result,factory.createJMXServiceUrl("STR"));	34.18	0	0
18	8	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertTrue(result.toString().startsWith("STR"));	34.18	0	0
18	9	/	DefaultJmxServiceUrlFactoryTest	testCreateJMXServiceUrl	assertNotNull(result);	assertFalse(result.equals(null));	34.18	0	0
19	0	amlinv/stat-collection-utils	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertEquals("STR",jmxServiceUrlFactory.getSomeProperty());	27.94	0	0
19	1	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNull(jmxServiceUrlFactory.getSomething());	27.94	0	0
19	2	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertSame(expectedObject,jmxServiceUrlFactory.getReferenceObject());	27.94	0	0
19	3	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertArrayEquals(expectedArray,jmxServiceUrlFactory.getArray());	27.94	0	0
19	4	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotSame(expectedObject,jmxServiceUrlFactory.getAnotherReferenceObject());	27.94	0	0
19	5	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotEquals(expectedValue,jmxServiceUrlFactory.getValue());	27.94	0	0
19	6	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertTrue(jmxServiceUrlFactory.isInitialized());	27.94	0	0
19	7	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertNotNull(jmxServiceUrlFactory);	27.94	0	0
19	8	/	JMXJvmIdConnectionFactoryTest	testGetSetJmxServiceFactory	assertTrue(this.factory.getJmxServiceUrlFactory()instanceofDefaultJmxServiceUrlFactory);	assertFalse(jmxServiceUrlFactory.isExpired());	27.94	0	0
20	0	myabc/markdownj	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotNull(m.markdown("STR"));	90.09	0	0
20	1	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(m.markdown("STR"),m.markdown("STR"));	90.09	0	0
20	2	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertFalse(m.markdown("STR").isEmpty());	90.09	0	0
20	3	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNull(markdown("STR"));	90.09	0	0
20	4	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertTrue(m.markdown("STR")instanceofString);	90.09	0	0
20	5	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotSame(m.markdown("STR"),m.markdown("STR"));	90.09	0	0
20	6	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertEquals("STR",markdown(null));	90.09	0	0
20	7	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertSame("STR",markdown("STR"));	90.09	0	0
20	8	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertArrayEquals("b"},markdown("a\n\nb").split("\n"));	90.09	0	0
20	9	/	EdgeCases	testNull	assertEquals("STR",m.markdown(null));	assertNotEquals(null,m.markdown("STR"));	90.09	0	0
21	0	TooTallNate/Java-WebSocket	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().startsWith("STR"));	69.41	0	0
21	1	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	69.41	1	0
21	2	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotNull(deflateExtension.getProvidedExtensionAsServer());	69.41	0	0
21	3	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertTrue(deflateExtension.getProvidedExtensionAsServer().contains("STR"));	69.41	0	0
21	4	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotSame(StringBuilder.class,deflateExtension.getProvidedExtensionAsServer().getClass());	69.41	0	0
21	5	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertFalse(deflateExtension.getProvidedExtensionAsServer().isEmpty());	69.41	0	0
21	6	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertArrayEquals("SERVER_NO_CONTEXT_TAKEOVER","CLIENT_NO_CONTEXT_TAKEOVER"});	69.41	0	0
21	7	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertEquals(3,deflateExtension.getProvidedExtensionAsServer().split("STR").length);	69.41	0	0
21	8	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertSame(PerMessageDeflateExtension.class,deflateExtension.getClass());	69.41	0	0
21	9	/	PerMessageDeflateExtensionTest	testGetProvidedExtensionAsServer	assertEquals("STR",deflateExtension.getProvidedExtensionAsServer());	assertNotEquals("STR",deflateExtension.getProvidedExtensionAsServer());	69.41	0	0
22	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertTrue(defaultExtension0.hashCode()>=0);	78.17	0	0
22	1	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	78.17	1	0
22	2	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertFalse(defaultExtension0.hashCode()<0);	78.17	0	0
22	3	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNull(null);	78.17	0	0
22	4	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotNull(defaultExtension0.hashCode());	78.17	0	0
22	5	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertThat(defaultExtension0.hashCode(),is(equalTo(defaultExtension1.hashCode())));	78.17	0	0
22	6	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	78.17	0	0
22	7	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertSame(defaultExtension0.hashCode(),defaultExtension1.hashCode());	78.17	0	0
22	8	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertNotEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	78.17	0	0
22	9	/	DefaultExtensionTest	testHashCode	assertEquals(defaultExtension0.hashCode(),defaultExtension1.hashCode());	assertArrayEquals(newint[]{defaultExtension0.hashCode()},newint[]{defaultExtension1.hashCode()});	78.17	0	0
23	0	jcodec/jcodec	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotNull(object);	179.32	0	0
23	1	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotSame(expectedObject,actualObject);	179.32	0	0
23	2	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNotEquals(expectedValue,focalMethodReturnValue);	179.32	0	0
23	3	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertFalse(condition);	179.32	0	0
23	4	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertThat(actualValue,matcher);	179.32	0	0
23	5	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertEquals(expectedValue,focalMethodReturnValue);	179.32	0	0
23	6	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertNull(object);	179.32	0	0
23	7	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertTrue(condition);	179.32	0	0
23	8	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertArrayEquals(expectedArray,actualArray);	179.32	0	0
23	9	/	InterModeInfoTest	testReadIntraMode	assertEquals(2,newInterModeInfo().readInterIntraMode(miCol,miRow,blSz,decoder,c));	assertSame(expectedObject,actualObject);	179.32	0	0
24	0	adlnet/jxapi	VerbsTest	testRegistered	assertNotNull(actual);	assertNotEquals(null,actual);	50.84	0	0
24	1	/	VerbsTest	testRegistered	assertNotNull(actual);	assertThat(actual.getName(),is(equalToIgnoringCase("STR")));	50.84	0	0
24	2	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame("STR",actual.getName());	50.84	0	0
24	3	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotNull(actual);	50.84	1	0
24	4	/	VerbsTest	testRegistered	assertNotNull(actual);	assertSame(Verb.class,actual.getClass());	50.84	0	0
24	5	/	VerbsTest	testRegistered	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getAliases());	50.84	0	0
24	6	/	VerbsTest	testRegistered	assertNotNull(actual);	assertFalse(actual.isDeleted());	50.84	0	0
24	7	/	VerbsTest	testRegistered	assertNotNull(actual);	assertEquals("STR",actual.getName());	50.84	0	0
24	8	/	VerbsTest	testRegistered	assertNotNull(actual);	assertNotSame(0,actual.getCreatedAt());	50.84	0	0
24	9	/	VerbsTest	testRegistered	assertNotNull(actual);	assertTrue(actual.isActive());	50.84	0	0
25	0	adlnet/jxapi	VerbsTest	testImported	assertNotNull(actual);	assertFalse(actual.getName().isEmpty());	57.99	0	0
25	1	/	VerbsTest	testImported	assertNotNull(actual);	assertNotNull(actual);	57.99	1	0
25	2	/	VerbsTest	testImported	assertNotNull(actual);	assertSame(actual,Verbs.imported());	57.99	0	0
25	3	/	VerbsTest	testImported	assertNotNull(actual);	assertTrue(actualinstanceofVerb);	57.99	0	0
25	4	/	VerbsTest	testImported	assertNotNull(actual);	???;	57.99	0	0
25	5	/	VerbsTest	testImported	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	57.99	0	0
25	6	/	VerbsTest	testImported	assertNotNull(actual);	assertEquals("STR",actual.getName());	57.99	0	0
25	7	/	VerbsTest	testImported	assertNotNull(actual);	assertNotSame(createVerb("STR"),actual);	57.99	0	0
25	8	/	VerbsTest	testImported	assertNotNull(actual);	assertArrayEquals(newString[]{"STR"},actual.getSynonyms());	57.99	0	0
25	9	/	VerbsTest	testImported	assertNotNull(actual);	assertNull(actual.getDescription());	57.99	0	0
26	0	adlnet/jxapi	VerbsTest	testInitialized	assertNotNull(actual);	assertNotSame(expected,actual);	46.68	0	0
26	1	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotNull(actual);	46.68	1	0
26	2	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNull(actual);	46.68	0	0
26	3	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotEquals("STR",actual.getName());	46.68	0	0
26	4	/	VerbsTest	testInitialized	assertNotNull(actual);	assertEquals("STR",actual.getName());	46.68	0	0
26	5	/	VerbsTest	testInitialized	assertNotNull(actual);	assertNotEquals(expectedArray,actualArray);	46.68	0	0
26	6	/	VerbsTest	testInitialized	assertNotNull(actual);	assertTrue(actual.isInitialized());	46.68	0	0
26	7	/	VerbsTest	testInitialized	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	46.68	0	0
26	8	/	VerbsTest	testInitialized	assertNotNull(actual);	assertSame(expected,actual);	46.68	0	0
26	9	/	VerbsTest	testInitialized	assertNotNull(actual);	assertFalse(actual.isInitialized());	46.68	0	0
27	0	adlnet/jxapi	StatementTest	testToString	assertNotNull(actual);	assertEquals(statement.getTimestamp(),statement.getStored());	52.14	0	0
27	1	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getContext().getLanguage());	52.14	0	0
27	2	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(expectedList.contains(attachment));	52.14	0	0
27	3	/	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getVersion().isEmpty());	52.14	0	0
27	4	/	StatementTest	testToString	assertNotNull(actual);	assertNotNull(statement.getId());	52.14	0	0
27	5	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(agent,statement.getAuthority());	52.14	0	0
27	6	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(attachment.getUsageType()instanceofURI);	52.14	0	0
27	7	/	StatementTest	testToString	assertNotNull(actual);	assertFalse(statement.getStored().isEmpty());	52.14	0	0
27	8	/	StatementTest	testToString	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	52.14	0	0
27	9	/	StatementTest	testToString	assertNotNull(actual);	assertEquals(MBOX,agent.getMbox());	52.14	0	0
28	0	adlnet/jxapi	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotNull(object);	46.39	0	0
28	1	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotSame(expected,actual);	46.39	0	0
28	2	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertThat(actual,Matchers.equalTo(expected));	46.39	0	0
28	3	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertFalse(condition);	46.39	0	0
28	4	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNotEquals(expected,actual);	46.39	0	0
28	5	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertEquals(expected,actual);	46.39	0	0
28	6	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertTrue(condition);	46.39	0	0
28	7	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertNull(object);	46.39	0	0
28	8	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertArrayEquals(expectedArray,actualArray);	46.39	0	0
28	9	/	ActivityTest	testGetObjectType	assertNotNull(actual);	assertSame(expected,actual);	46.39	0	0
29	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHENG,moneyToStrUSD);	90.15	0	0
29	1	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals(0.01,moneyToStrUSD.calculateTax(100.0));	90.15	0	0
29	2	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotEquals("STR",moneyToStrCustom.getCurrencyCode());	90.15	0	0
29	3	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertArrayEquals("STR","STR"});	90.15	0	0
29	4	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertTrue(moneyToStrRURRUSinstanceofMoneyToStr);	90.15	0	0
29	5	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUSDENG,moneyToStrEURRUS);	90.15	0	0
29	6	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotSame(moneyToStrUAHRUS,moneyToStrUAHENG);	90.15	0	0
29	7	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertFalse(moneyToStrUAHENG.isCurrencyCentNameRequired());	90.15	0	0
29	8	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(1234.56));	90.15	0	0
29	9	/	MoneyToStrTest	checkUAHRUS	assertEquals("STR",moneyToStrUAHRUS.convert(V_300D));	assertNotNull(moneyToStrUAH);	90.15	0	0
30	0	javadev/moneytostr-russian	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotEquals(percentToStr(5.5,Language.RUS),percentToStrUSD.percentToStr(5.5,Language.RUS));	55.72	0	0
30	1	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNull(percentToStr(0.0,Language.RUS));	55.72	0	0
30	2	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertTrue(percentToStr(23.75,Language.ENG).endsWith("STR"));	55.72	0	0
30	3	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotSame("STR",percentToStr(12.5,Language.ENG),percentToStrUAHENG.percentToStr(12.5,Language.ENG));	55.72	0	0
30	4	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertEquals(percentToStr(10.0,Language.UKR),percentToStrUAH.percentToStr(10.0,Language.UKR));	55.72	0	0
30	5	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertArrayEquals(newString[]{"STR"},newString[]{percentToStr(100.0,Language.RUS)});	55.72	0	0
30	6	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertSame(percentToStr(99.99,Language.RUS),percentToStrRUR.percentToStr(99.99,Language.RUS));	55.72	0	0
30	7	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertFalse(percentToStr(99.99,Language.UKR).isEmpty());	55.72	0	0
30	8	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertNotNull(percentToStr(75.0,Language.UKR));	55.72	0	0
30	9	/	MoneyToStrTest	percentToStr	assertEquals("STR",MoneyToStr.percentToStr(12D,MoneyToStr.Language.RUS));	assertEquals("STR",percentToStr(17.33,Language.RUS));	55.72	0	0
31	0	1337joe/cubesensors-for-java	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotNull(object);	40.64	0	0
31	1	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotSame(expected,actual);	40.64	0	0
31	2	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertFalse(condition);	40.64	0	0
31	3	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNotEquals(expected,actual);	40.64	0	0
31	4	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertThat(value,matcher);	40.64	0	0
31	5	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertEquals(expected,actual);	40.64	1	0
31	6	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertTrue(condition);	40.64	0	0
31	7	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	40.64	0	0
31	8	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertNull(object);	40.64	0	0
31	9	/	TestPressure	testToMillibar	assertEquals(expected,actual);	assertSame(expected,actual);	40.64	0	0
32	0	1337joe/cubesensors-for-java	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotNull(object);	45.68	0	0
32	1	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotSame(expected,actual);	45.68	0	0
32	2	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertFalse(condition);	45.68	0	0
32	3	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNotEquals(expected,actual);	45.68	0	0
32	4	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertEquals(expected,actual);	45.68	1	0
32	5	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertTrue(condition);	45.68	0	0
32	6	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertNull(object);	45.68	0	0
32	7	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertArrayEquals(expectedArray,actualArray);	45.68	0	0
32	8	/	TestPressure	testToInHg	assertEquals(expected,actual);	assertSame(expected,actual);	45.68	0	0
33	0	hazelcast/hazelcast-simulator	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0&&value<=100);	92.59	0	0
33	1	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>50);	92.59	0	0
33	2	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%2);	92.59	0	0
33	3	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(Math.abs(value-50)<=10);	92.59	0	0
33	4	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<=100);	92.59	0	0
33	5	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value>=0);	92.59	1	0
33	6	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotEquals(50,value);	92.59	0	0
33	7	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertEquals(0,value%5);	92.59	0	0
33	8	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertTrue(value<50);	92.59	0	0
33	9	/	BaseThreadStateTest	randomInt_withBound	assertTrue(value>=0);	assertNotNull(value);	92.59	0	0
34	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	76.52	0	0
34	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertDoesNotThrow(()->bind0(object,"STR","STR"));	76.52	0	0
34	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(findTargetObject(object,"STR",path));	76.52	0	0
34	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	76.52	0	0
34	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(isProbeField(field));	76.52	0	0
34	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	76.52	0	0
34	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	76.52	0	0
34	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertNull(findTargetObject(object,"STR",path));	76.52	0	0
34	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(isProbeField(field));	76.52	0	0
34	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_long	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	76.52	0	0
35	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertTrue(bind0(object,"STR","STR"));	291.64	0	0
35	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertDoesNotThrow(()->bind0(object,"STR","STR"));	291.64	0	0
35	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertEquals(true,bind0(object,"STR","STR"));	291.64	0	0
35	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	291.64	0	0
35	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotSame(object,bind0(object,"STR","STR"));	291.64	0	0
35	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNull(bind0(object,"STR","STR"));	291.64	0	0
35	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotEquals(false,bind0(object,"STR","STR"));	291.64	0	0
35	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertSame(object,bind0(object,"STR","STR"));	291.64	0	0
35	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertNotNull(bind0(object,"STR","STR"));	291.64	0	0
35	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_Double	assertTrue(bind0(testObject,"STR","STR"));	assertFalse(bind0(object,"STR","STR"));	291.64	0	0
36	0	hazelcast/hazelcast-simulator	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertArrayEquals(expectedArray,getCloudIdentity().toCharArray());	309.11	0	0
36	1	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertFalse(getCloudIdentity().isEmpty());	309.11	0	0
36	2	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotSame(unexpectedObject,getCloudIdentity());	309.11	0	0
36	3	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertSame(expectedObject,getCloudIdentity());	309.11	0	0
36	4	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotEquals("STR",getCloudIdentity());	309.11	0	0
36	5	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertEquals("STR",getCloudIdentity());	309.11	0	0
36	6	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNotNull(getCloudIdentity());	309.11	0	0
36	7	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertTrue(getCloudIdentity().length()>0);	309.11	0	0
36	8	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertThat(getCloudIdentity(),CoreMatchers.startsWith("STR"));	309.11	0	0
36	9	/	SimulatorPropertiesTest	testGet_CLOUD_IDENTITY	assertEquals("STR",simulatorProperties.getCloudIdentity());	assertNull(getCloudIdentity());	309.11	0	0
37	0	hazelcast/hazelcast-simulator	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotNull(field);	80.17	0	0
37	1	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(Object.class,field.getDeclaringClass());	80.17	0	0
37	2	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isSynthetic());	80.17	0	0
37	3	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals(String.class,field.getType());	80.17	0	0
37	4	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertNotEquals("STR",field.getName());	80.17	0	0
37	5	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertFalse(field.isAccessible());	80.17	0	0
37	6	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(field.getDeclaringClass()==GetFieldTest.class||field.getDeclaringClass().isAssignableFrom(GetFieldTest.class));	80.17	0	0
37	7	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertTrue(Modifier.isPublic(field.getDeclaringClass().getModifiers()));	80.17	0	0
37	8	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals(Integer.class,field.getType());	80.17	0	0
37	9	/	ReflectionUtilsTest	testGetField_typeMismatch	assertNull(field);	assertEquals("STR",field.getName());	80.17	0	0
38	0	hazelcast/hazelcast-simulator	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertSame(parser,options.getParser());	72.48	0	0
38	1	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(null,options.getOptions());	72.48	0	0
38	2	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotSame(parser,options.getParser());	72.48	0	0
38	3	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals("STR",options.toString());	72.48	0	0
38	4	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertArrayEquals(newString[]{},options.getArguments());	72.48	0	0
38	5	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertEquals(0,options.getOptions().size());	72.48	0	0
38	6	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertTrue(options.isEmpty());	72.48	0	0
38	7	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertThrows(ExitException.class,()->options.getParser().parse(newString[]{"STR"}));	72.48	0	0
38	8	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotNull(options);	72.48	1	0
38	9	/	CliUtilsTest	testInitOptionsWithHelp_noArgs	assertNotNull(options);	assertNotEquals(0,options.size());	72.48	0	0
39	0	nidi3/graphviz-java	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotNull(object);	75.82	0	0
39	1	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotSame(expected,actual);	75.82	0	0
39	2	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	"assertThrows(Exception.class,()->{
});"	75.82	0	0
39	3	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertFalse(condition);	75.82	0	0
39	4	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNotEquals(expected,actual);	75.82	0	0
39	5	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertEquals(expected,actual);	75.82	0	0
39	6	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertTrue(condition);	75.82	0	0
39	7	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertNull(object);	75.82	0	0
39	8	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertArrayEquals(expectedArray,actualArray);	75.82	0	0
39	9	/	StyleTest	wedged	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),attrs(Style.wedged(Color.RED,Color.GREEN)));	assertSame(expected,actual);	75.82	0	0
40	0	nidi3/graphviz-java	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertEquals(expectedAttributes,actualAttributes);	79.07	0	0
40	1	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotSame(expectedObject,actualObject);	79.07	0	0
40	2	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNull(attributes);	79.07	0	0
40	3	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertFalse(condition);	79.07	0	0
40	4	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotNull(attributes);	79.07	0	0
40	5	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotEquals(expectedAttributes,actualAttributes);	79.07	0	0
40	6	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertNotEquals(expectedArray,actualArray);	79.07	0	0
40	7	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertTrue(condition);	79.07	0	0
40	8	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertArrayEquals(expectedArray,actualArray);	79.07	0	0
40	9	/	RankTest	dir	assertEquals(attrs(attr("STR","STR")),attrs(Rank.dir(LEFT_TO_RIGHT)));	assertSame(expectedObject,actualObject);	79.07	0	0
41	0	nidi3/graphviz-java	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertNull(attrs().get("STR"));	82.03	0	0
41	1	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertSame(attrs(),attrs(attrs()));	82.03	0	0
41	2	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertNotSame(attrs(),FOCAL.attrs());	82.03	0	0
41	3	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertTrue(attrs().isEmpty());	82.03	0	0
41	4	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertEquals(attrs(),FOCAL.<For>attrs());	82.03	0	0
41	5	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertThrows(NullPointerException.class,()->attrs((Attributes<?extendsFor>)null));	82.03	0	0
41	6	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertDoesNotThrow(()->attrs(FOCAL.<For>attrs()));	82.03	0	0
41	7	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertNotNull(attrs().put("STR","STR"));	82.03	0	0
41	8	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertArrayEquals(newAttributes[]{},attrs().toArray());	82.03	0	0
41	9	/	LabelTest	simple	assertEquals(attrs(attr("STR",label)),attrs(label));	assertFalse(attrs().contains(null));	82.03	0	0
42	0	nidi3/graphviz-java	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertThrows(IllegalArgumentException.class,()->viz.toString());	80.36	0	0
42	1	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotNull(viz);	80.36	0	0
42	2	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertArrayEquals('b','c'});	80.36	0	0
42	3	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotSame(null,viz.toString());	80.36	0	0
42	4	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotEquals(null,viz.toString());	80.36	0	0
42	5	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotEquals("STR",viz.toString());	80.36	0	0
42	6	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertEquals("STR",viz.toString());	80.36	0	0
42	7	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertTrue(viz.toString().contains("STR"));	80.36	0	0
42	8	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertFalse(viz.toString().isEmpty());	80.36	0	0
42	9	/	SimpleTest	simple	assertNotNull(viz.render(SVG).toString());	assertNotSame("STR",viz.toString());	80.36	0	0
43	0	jribble/Java-Websockify	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotNull(object);	35.14	0	0
43	1	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotSame(expected,actual);	35.14	0	0
43	2	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNotEquals("STR","STR");	35.14	0	0
43	3	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertFalse(condition);	35.14	0	0
43	4	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertNull(object);	35.14	0	0
43	5	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertTrue(condition);	35.14	0	0
43	6	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertArrayEquals(expectedArray,actualArray);	35.14	0	0
43	7	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertSame(expected,actual);	35.14	0	0
43	8	/	FlashPolicyHandlerTest	testDecodeCustomResponse	assertTrue(XML.equals(resp));	assertEquals("STR","STR");	35.14	0	0
44	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(nouns.isEmpty());	262.67	0	0
44	1	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(3,tokens.size());	262.67	0	0
44	2	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.nonEmpty());	262.67	0	0
44	3	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertDoesNotThrow(()->OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun,nouns));	262.67	0	0
44	4	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.head()instanceofKoreanTokenizer.KoreanToken);	262.67	0	0
44	5	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",text);	262.67	0	0
44	6	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",nouns.get(0));	262.67	0	0
44	7	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotNull(tokens);	262.67	0	0
44	8	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(1,nouns.size());	262.67	0	0
44	9	/	OpenKoreanProcessorJavaTest	testRemoveWordsFromDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	262.67	0	0
45	0	gvlasov/collections-utils	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotSame(expectedObject,actualObject);	40.8	0	0
45	1	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertFalse(false);	40.8	0	0
45	2	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertTrue(true);	40.8	0	0
45	3	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotNull(notNullValue);	40.8	0	0
45	4	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertEquals(expectedValue,actualValue);	40.8	0	0
45	5	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNotEquals(expectedValue,actualValue);	40.8	0	0
45	6	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertNull(nullValue);	40.8	0	0
45	7	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertArrayEquals(expectedArray,actualArray);	40.8	0	0
45	8	/	CollectorsTest	toImmutableList	assertEquals(ImmutableList.of(1,2,3),Arrays.asList(1,2,3).stream().collect(Collectors.toImmutableList()));	assertSame(expectedObject,actualObject);	40.8	0	0
46	0	fluenda/ParCEFone	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1).getDvchost());	58.59	0	0
46	1	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotNull(parser.parse(sample1));	58.59	1	0
46	2	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals("STR",parser.parse(sample1).getCs1());	58.59	0	0
46	3	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(expectedProtocols.contains(parser.parse(sample1).getProto()));	58.59	0	0
46	4	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertNotEquals(unexpectedEvent,parser.parse(sample1));	58.59	0	0
46	5	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1)instanceofCommonEvent);	58.59	0	0
46	6	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertTrue(parser.parse(sample1).getRt().startsWith("STR"));	58.59	0	0
46	7	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertFalse(parser.parse(sample1).getSmac().isEmpty());	58.59	0	0
46	8	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertEquals(expectedEvent,parser.parse(sample1));	58.59	0	0
46	9	/	CEFParserTest	validMessageWithoutValidationTest	assertNotNull(parser.parse(sample1));	assertSame(CommonEvent.class,parser.parse(sample1).getClass());	58.59	0	0
47	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",getCiName());	137.32	0	0
47	1	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotEquals("STR",getCiName());	137.32	0	0
47	2	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(Character.isJavaIdentifierStart(getCiName().charAt(0)));	137.32	0	0
47	3	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().matches("STR"));	137.32	0	0
47	4	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().startsWith("STR"));	137.32	0	0
47	5	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName()instanceofString);	137.32	0	0
47	6	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().contains("STR"));	137.32	0	0
47	7	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().endsWith("STR"));	137.32	0	0
47	8	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(getCiName());	137.32	0	0
47	9	/	CiEnvironmentTest	recognises_jenkins	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(getCiName().isEmpty());	137.32	0	0
48	0	trung/InMemoryJavaCompiler	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(helloClass.getDeclaredClasses().length>0);	48.24	0	0
48	1	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotSame(String.class,helloClass.getSuperclass());	48.24	0	0
48	2	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals("STR",helloClass.getName());	48.24	0	0
48	3	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals("STR",helloClass.getMethod("STR").invoke(helloClass.newInstance()));	48.24	0	0
48	4	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredClasses()[0].isInterface());	48.24	0	0
48	5	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertEquals(1,helloClass.getDeclaredClasses()[0].getDeclaredFields().length);	48.24	0	0
48	6	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertTrue(Modifier.isPrivate(helloClass.getDeclaredClasses()[0].getModifiers()));	48.24	0	0
48	7	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertArrayEquals(newClass<?>[]{String.class},helloClass.getInterfaces());	48.24	0	0
48	8	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertFalse(helloClass.getDeclaredFields().length>0);	48.24	0	0
48	9	/	InMemoryJavaCompilerTest	compile_WhenSourceContainsInnerClasses	assertNotNull(helloClass);	assertNotNull(helloClass);	48.24	1	0
49	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertFalse(false);	122.28	0	0
49	1	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertTrue(true);	122.28	0	0
49	2	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals("STR","STR");	122.28	0	0
49	3	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotNull("STR");	122.28	0	0
49	4	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNull(null);	122.28	0	0
49	5	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertEquals(5,5);	122.28	0	0
49	6	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	122.28	0	0
49	7	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertSame("STR","STR");	122.28	0	0
49	8	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotSame("STR","STR");	122.28	0	0
49	9	/	CookieIntegrationTest	testServerReceivesCookiesSentFromClient	assertEquals(1,this.testServer.cookiesReceived.size());	assertNotEquals(10,20);	122.28	0	0
0	0	hazelcast/hazelcast-simulator	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<=durationLimit);	100.54	0	0
0	1	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>durationLimit);	100.54	0	0
0	2	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration<durationLimit);	100.54	0	0
0	3	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=lowerBound&&duration<=upperBound);	100.54	0	0
0	4	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(randomValue>0);	100.54	0	0
0	5	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertFalse(randomValue<0);	100.54	0	0
0	6	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(maxDelayNanos>0);	100.54	0	0
0	7	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(duration>=durationLimit);	100.54	0	0
0	8	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertTrue(randomValue>=0);	100.54	0	0
0	9	/	CommonUtils_SleepTest	testSleepRandomNanosMinDelayZero	assertTrue(format("STR",duration),duration>0);	assertNotEquals(duration,durationLimit);	100.54	0	0
1	0	hazelcast/hazelcast-simulator	SimulatorAddressTest	testToString_whenCoordinator	assertEquals("STR",coordinatorAddress().toString());	???;	67.4	0	0
2	0	orientechnologies/orientdb	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.hasProperty("STR"));	371.18	0	0
2	1	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.areIndexed("STR"));	371.18	0	0
2	2	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.hasProperty("STR"));	371.18	0	0
2	3	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.areIndexed("STR"));	371.18	0	0
2	4	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertTrue(clazz.isSubClassOf("STR"));	371.18	0	0
2	5	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotEquals("STR",clazz.getCustom("STR"));	371.18	0	0
2	6	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNotNull(clazz.getCustom("STR"));	371.18	0	0
2	7	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertNull(clazz.getCustom("STR"));	371.18	0	0
2	8	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertFalse(clazz.isSubClassOf("STR"));	371.18	0	0
2	9	/	OAlterClassStatementExecutionTest	testCustom	assertEquals("STR",clazz.getCustom("STR"));	assertEquals("STR",clazz.getCustom("STR"));	371.18	1	0
3	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertEquals(mapToTest.size(),((List<?>)result).size());	529.51	0	0
3	1	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	529.51	0	0
3	2	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertArrayEquals(mapToTest.values().toArray(),((List<?>)result).toArray());	529.51	0	0
3	3	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotNull(result);	529.51	0	0
3	4	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(0,result.size());	529.51	0	0
3	5	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertFalse(result.isEmpty());	529.51	0	0
3	6	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotSame(mapToTest,result.get(0));	529.51	0	0
3	7	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertNotEquals(null,result.get(0));	529.51	0	0
3	8	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertSame(mapToTest,params.get(0));	529.51	0	0
3	9	/	OPropertyMapIndexDefinitionTest	testCreateValueByKeyTwoParameters	assertTrue(resultinstanceofCollection);	assertTrue(((List<?>)result).containsAll(mapToTest.values()));	529.51	0	0
4	0	orientechnologies/orientdb	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertArrayEquals(newOType[]{OType.INTEGER},result);	240.36	0	0
4	1	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertFalse(result.length==0);	240.36	0	0
4	2	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNull(result);	240.36	0	0
4	3	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertSame(OType.INTEGER,result[0]);	240.36	0	0
4	4	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotNull(result);	240.36	0	0
4	5	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotEquals(0,result.length);	240.36	0	0
4	6	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(OType.STRING,result[0]);	240.36	0	0
4	7	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertTrue(result.length>0);	240.36	0	0
4	8	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertNotSame(newOType[]{OType.INTEGER},result);	240.36	0	0
4	9	/	OPropertyIndexDefinitionTest	testGetTypes	assertEquals(result.length,1);	assertEquals(result.length,1);	240.36	1	0
5	0	orientechnologies/orientdb	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys()instanceofSet);	243.03	0	0
5	1	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().size()>0);	243.03	0	0
5	2	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys()instanceofList);	243.03	0	0
5	3	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertFalse(compositeKey.getKeys().contains("STR"));	243.03	0	0
5	4	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals("STR",compositeKey.getKeys().get(0));	243.03	0	0
5	5	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertEquals(compositeKey.getKeys().size(),1);	243.03	1	0
5	6	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().contains("STR"));	243.03	0	0
5	7	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotEquals("STR",compositeKey.getKeys().get(0));	243.03	0	0
5	8	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertTrue(compositeKey.getKeys().isEmpty());	243.03	0	0
5	9	/	OCompositeKeyTest	testAddKeyComparable	assertEquals(compositeKey.getKeys().size(),1);	assertNotNull(compositeKey.getKeys());	243.03	0	0
6	0	orientechnologies/orientdb	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(0,index.getSize());	477.09	0	0
6	1	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotEquals(-1,db.command(newOCommandSQL("STR")).execute());	477.09	0	0
6	2	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals(8,db.get(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS));	477.09	0	0
6	3	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertArrayEquals("location"},db.getMetadata().getSchema().getClass("City").getPropertyNames());	477.09	0	0
6	4	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertTrue(indexinstanceofOIndex);	477.09	0	0
6	5	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertSame(path,"STR");	477.09	0	0
6	6	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotSame(type,ODatabaseType.MEMORY);	477.09	0	0
6	7	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertEquals("STR",db.query(newOSQLSynchQuery<>("STR")).get(0));	477.09	0	0
6	8	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertFalse(context.exists(name.getMethodName()));	477.09	0	0
6	9	/	LuceneGeoUpdateTest	testUpdate	assertEquals(2,index.getSize());	assertNotNull(db);	477.09	0	0
7	0	orientechnologies/orientdb	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNull(result);	237.53	0	0
7	1	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(5D),result);	237.53	0	0
7	2	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotNull(result);	237.53	0	0
7	3	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertTrue(resultinstanceofBigDecimal);	237.53	1	0
7	4	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotSame(null,result);	237.53	0	0
7	5	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertEquals(newBigDecimal(10.5D),result);	237.53	0	0
7	6	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertNotEquals(newBigDecimal(0),result);	237.53	0	0
7	7	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertSame(function,result);	237.53	0	0
7	8	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertFalse(resultinstanceofString);	237.53	0	0
7	9	/	OSQLFunctionAbsoluteValueTest	testPositiveBigDecimal	assertTrue(resultinstanceofBigDecimal);	assertArrayEquals(newObject[]{newBigDecimal(10.5D)},(Object[])result);	237.53	0	0
8	0	orientechnologies/orientdb	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals("STR",qResult.stream().findFirst().orElseThrow().getProperty("STR"));	196.61	0	0
8	1	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotNull(qResult);	196.61	0	0
8	2	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertFalse(qResult.hasNext());	196.61	0	0
8	3	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertThrows(Exception.class,()->db.query(null));	196.61	0	0
8	4	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().anyMatch(result->result.getProperty("STR").equals("STR")));	196.61	0	0
8	5	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.stream().allMatch(result->result.getProperty("STR").toString().startsWith("STR")));	196.61	0	0
8	6	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertNotEquals(0,qResult.stream().count());	196.61	0	0
8	7	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertTrue(qResult.hasNext());	196.61	0	0
8	8	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertArrayEquals("Jane"},qResult.stream().map(r->r.getProperty("name")).toArray());	196.61	0	0
8	9	/	OMatchStatementExecutionNewTest	testMaxDepthArrow	assertEquals(2,size(qResult));	assertEquals(0,qResult.stream().count());	196.61	0	0
9	0	orientechnologies/orientdb	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertArrayEquals(token,connection.getToken());	121.6	0	0
9	1	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertFalse(listener.hasToken(5));	121.6	0	0
9	2	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(null,server.getContextConfiguration());	121.6	0	0
9	3	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotNull(listener.getSubscribers());	121.6	0	0
9	4	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertEquals(0,listener.getSubscribersCount());	121.6	0	0
9	5	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotEquals(5,listener.getSubscribersCount());	121.6	0	0
9	6	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertTrue(listener.hasToken(10));	121.6	0	0
9	7	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNull(listener.getSubscribers());	121.6	0	0
9	8	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertNotSame(protocol,connection.getProtocol());	121.6	0	0
9	9	/	OLiveCommandResultListenerTest	testNetworkError	assertTrue(OLiveQueryHook.getOpsReference(db).getQueueThread().hasToken(10));	assertSame(db,connection.getDatabase());	121.6	0	0
10	0	orientechnologies/orientdb	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertFalse(oSchema.getClass("STR").existsProperty("STR"));	240.44	0	0
10	1	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotSame(oClass.getProperty("STR"),oClass.getProperty("STR"));	240.44	0	0
10	2	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotEquals(OType.INTEGER,oClass.getProperty("STR").getType());	240.44	0	0
10	3	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNull(oClass.getProperty("STR"));	240.44	0	0
10	4	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertTrue(oSchema.getClass("STR").existsProperty("STR"));	240.44	0	0
10	5	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertSame(oClass.getProperty("STR"),oClass.getProperty("STR"));	240.44	0	0
10	6	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertNotNull(oClass.getProperty("STR"));	240.44	1	0
10	7	/	OClassImplTest	testCreateNoLinkedClass	assertNotNull(oClass.getProperty("STR"));	assertEquals(OType.LINKLIST,oClass.getProperty("STR").getType());	240.44	0	0
11	0	orientechnologies/orientdb	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(((List)result).size(),((List)result).stream().distinct().count());	703.15	0	0
11	1	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList<?>);	703.15	0	0
11	2	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(resultinstanceofList);	703.15	0	0
11	3	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals("STR",((List)result).get(0));	703.15	0	0
11	4	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofInteger));	703.15	0	0
11	5	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertNotNull(result);	703.15	0	0
11	6	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertFalse(((List)result).isEmpty());	703.15	0	0
11	7	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(IntStream.range(0,resultList.size()-1).allMatch(i->resultList.get(i)<resultList.get(i+1)));	703.15	0	0
11	8	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->((Integer)e)%2==0));	703.15	0	0
11	9	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertTrue(((List)result).stream().allMatch(e->einstanceofString));	703.15	0	0
11	10	/	OPropertyListIndexDefinitionTest	testCreateValueSingleParameter	assertTrue(resultinstanceofCollection);	assertEquals(2,((List)result).size());	703.15	0	0
12	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(floatSerializer.deserializeNative(data,0));	257.86	0	0
12	1	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertArrayEquals(data,walChanges.getBinaryValue(buffer,serializationOffset));	257.86	0	0
12	2	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset<buffer.capacity());	257.86	0	0
12	3	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(serializationOffset>=0);	257.86	0	0
12	4	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(FLOAT_SIZE,getObjectSizeInByteBuffer(buffer,walChanges,0));	257.86	0	0
12	5	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(OBJECT,floatSerializer.deserializeNative(data,serializationOffset));	257.86	0	0
12	6	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(walChangesinstanceofOWALChangesTree);	257.86	0	0
12	7	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertTrue(floatSerializer.deserializeNative(data,0)>0);	257.86	0	0
12	8	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertEquals(ByteOrder.nativeOrder(),buffer.order());	257.86	0	0
12	9	/	FloatSerializerTest	testSerializeWALChanges	assertEquals(floatSerializer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),FIELD_SIZE);	assertNotNull(data);	257.86	0	0
13	0	Yubico/yubico-java-client	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotNull(otp);	68.28	0	0
13	1	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(c>=0x20&&c<=0x7E);	68.28	0	0
13	2	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(c<0x20||c>0x7E);	68.28	0	0
13	3	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertSame(otp,otherOtp);	68.28	0	0
13	4	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()>=OTP_MIN_LEN);	68.28	0	0
13	5	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat(otp));	68.28	0	0
13	6	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(otp.length()<=OTP_MAX_LEN);	68.28	0	0
13	7	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertEquals(20,otp.length());	68.28	0	0
13	8	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertNotEquals(30,otp.length());	68.28	0	0
13	9	/	YubicoClientTest	testLongOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat(otp));	68.28	1	0
14	0	Yubico/yubico-java-client	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertTrue(isValidOTPFormat("STR"));	123.28	0	0
14	1	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(client.isValidOTPFormat(null));	123.28	0	0
14	2	/	YubicoClientTest	testShortOTP	assertFalse(YubicoClient.isValidOTPFormat(otp));	assertFalse(YubicoClient.isValidOTPFormat("STR"));	123.28	0	0
15	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().contains(null));	86.55	0	0
15	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(routePrioritizer.getPrioritizedRoutes(),mappings);	86.55	0	0
15	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	86.55	0	0
15	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	86.55	1	0
15	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	86.55	0	0
15	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(mappings.toArray(),routePrioritizer.getPrioritizedRoutes().toArray());	86.55	0	0
15	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().stream().allMatch(Objects::nonNull));	86.55	0	0
15	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	86.55	0	0
15	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	86.55	0	0
15	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullUri	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer.getPrioritizedRoutes());	86.55	0	0
16	0	NanoHttpd/nanohttpd	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertArrayEquals(newUriResource[]{},routePrioritizer.getPrioritizedRoutes().toArray());	87.59	0	0
16	1	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(mappings,routePrioritizer.getPrioritizedRoutes());	87.59	0	0
16	2	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotEquals(5,routePrioritizer.getPrioritizedRoutes().size());	87.59	0	0
16	3	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertEquals(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	87.59	0	0
16	4	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotNull(routePrioritizer);	87.59	0	0
16	5	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().containsAll(mappings));	87.59	0	0
16	6	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	87.59	0	0
16	7	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertNotSame(Collections.emptyList(),routePrioritizer.getPrioritizedRoutes());	87.59	0	0
16	8	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertTrue(routePrioritizer.getPrioritizedRoutes().isEmpty());	87.59	0	0
16	9	/	TestNanolets	testProvidedPriorityRoutePrioritizerNullHandler	assertEquals(0,routePrioritizer.getPrioritizedRoutes().size());	assertFalse(routePrioritizer.getPrioritizedRoutes().isEmpty());	87.59	0	0
17	0	nidi3/graphviz-java	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().isEmpty());	188.92	0	0
17	1	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().matches("STR"));	188.92	0	0
17	2	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getUnit());	188.92	0	0
17	3	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a);	188.92	0	0
17	4	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().contains("STR"));	188.92	0	0
17	5	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getSvg().length());	188.92	0	0
17	6	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertNotNull(a.getSvg());	188.92	0	0
17	7	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().startsWith("STR"));	188.92	0	0
17	8	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertTrue(a.getSvg().endsWith("STR"));	188.92	0	0
17	9	/	SvgSizeAnalyzerTest	svgWithoutChanges	assertEquals(SVG,a.getSvg());	assertEquals(100,a.getWidth());	188.92	0	0
18	0	nidi3/graphviz-java	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertSame(args[0],opts.args.get(0));	183.75	0	0
18	1	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotNull(opts.opts.get("STR"));	183.75	0	0
18	2	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertArrayEquals("c","d"});	183.75	0	0
18	3	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals("STR",opts.args.get(1));	183.75	0	0
18	4	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertEquals(2,opts.args.size());	183.75	0	0
18	5	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertTrue(opts.opts.containsKey("STR"));	183.75	0	0
18	6	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNull(opts.opts.get("STR"));	183.75	0	0
18	7	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotEquals("STR",opts.opts.get("STR"));	183.75	0	0
18	8	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertNotSame(options,opts);	183.75	0	0
18	9	/	GraphvizServerTest	cmdLineArgs	assertEquals(map("STR","STR"),opts.opts);	assertFalse(opts.opts.containsKey("STR"));	183.75	0	0
19	0	jcodec/jcodec	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,size);	177.34	0	0
19	1	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>0);	177.34	0	0
19	2	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(source.remaining()>=2);	177.34	0	0
19	3	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining<=0);	177.34	0	0
19	4	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>=0);	177.34	0	0
19	5	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(remaining>0);	177.34	0	0
19	6	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertNotEquals(0,value);	177.34	0	0
19	7	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(value>=0);	177.34	0	0
19	8	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertTrue(size>0);	177.34	0	0
19	9	/	MkvBlockTest	testReadingSignedInt	assertEquals(-30,MkvBlock.ebmlDecodeSigned(ByteBuffer.wrap(newbyte[]{(byte)0xA1})));	assertEquals(signedComplement[size],value);	177.34	0	0
20	0	jcodec/jcodec	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertEquals(expectedTransform,transform);	179.44	0	0
20	1	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotNull(transform);	179.44	1	0
20	2	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transforminstanceofTransform);	179.44	0	0
20	3	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(transform>=min&&transform<=max);	179.44	0	0
20	4	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(someCondition);	179.44	0	0
20	5	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotEquals(unexpectedTransform,transform);	179.44	0	0
20	6	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertTrue(someCondition);	179.44	0	0
20	7	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertNotSame(differentTransform,transform);	179.44	0	0
20	8	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertSame(sameTransform,transform);	179.44	0	0
20	9	/	Yuv444jToYuv420jTest	testEvenEven	assertNotNull(transform);	assertFalse(transform>=min&&transform<=max);	179.44	0	0
21	0	adlnet/jxapi	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(actual);	61.17	1	0
21	1	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotSame(expected,actual);	61.17	0	0
21	2	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertFalse(actual.length==0);	61.17	0	0
21	3	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actual.length==0);	61.17	0	0
21	4	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotEquals(Arrays.asList(expected),Arrays.asList(actual));	61.17	0	0
21	5	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertTrue(actualinstanceofString[]);	61.17	0	0
21	6	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertEquals(expected.length,actual.length);	61.17	0	0
21	7	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertNotNull(element);	61.17	0	0
21	8	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,Arrays.copyOf(actual,expected.length));	61.17	0	0
21	9	/	PersonTest	testGetMbox_sha1sum	assertNotNull(actual);	assertArrayEquals(expected,actual);	61.17	0	0
22	0	adlnet/jxapi	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actual.size()>=1);	55.14	0	0
22	1	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertTrue(actualinstanceofArrayList);	55.14	0	0
22	2	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotEquals(e,actual.get(0));	55.14	0	0
22	3	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals(1,actual.size());	55.14	0	0
22	4	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.contains(null));	55.14	0	0
22	5	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertFalse(actual.isEmpty());	55.14	0	0
22	6	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals("STR",actual.get(0).getDescription().get("STR"));	55.14	0	0
22	7	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertNotNull(expected);	55.14	0	0
22	8	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertEquals("STR",actual.get(0).getId());	55.14	0	0
22	9	/	ActivityDefinitionTest	testSetChoices	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	55.14	0	0
23	0	adlnet/jxapi	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expected,actual);	48.79	0	0
23	1	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotNull(actual);	48.79	1	0
23	2	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getContext().getLanguage().equals("STR"));	48.79	0	0
23	3	/	StatementTest	testGetObject	assertNotNull(actual);	assertFalse(statement.getAttachments().isEmpty());	48.79	0	0
23	4	/	StatementTest	testGetObject	assertNotNull(actual);	assertNotSame(expected,actual);	48.79	0	0
23	5	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals(expectedList.size(),statement.getAttachments().size());	48.79	0	0
23	6	/	StatementTest	testGetObject	assertNotNull(actual);	assertArrayEquals(expectedList.toArray(),statement.getAttachments().toArray());	48.79	0	0
23	7	/	StatementTest	testGetObject	assertNotNull(actual);	assertEquals("STR",statement.getAuthority().getVersion());	48.79	0	0
23	8	/	StatementTest	testGetObject	assertNotNull(actual);	assertSame(expected,actual);	48.79	0	0
23	9	/	StatementTest	testGetObject	assertNotNull(actual);	assertTrue(statement.getResult().isSuccess());	48.79	0	0
24	0	phax/ph-genericode	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual);	101.51	0	0
24	1	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	101.51	0	0
24	2	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual);	101.51	0	0
24	3	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertThat(actual,matcher);	101.51	0	0
24	4	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(object);	101.51	0	0
24	5	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expectedArray,actualArray);	101.51	0	0
24	6	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertSame(expected,actual);	101.51	0	0
24	7	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	101.51	0	0
24	8	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	101.51	0	0
24	9	/	ExcelSheetToCodeList04Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition);	101.51	0	0
25	0	trautonen/coveralls-maven-plugin	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotNull(getName());	904.8	0	0
25	1	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertTrue(getName().startsWith("STR"));	904.8	0	0
25	2	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertEquals("STR",getName());	904.8	0	0
25	3	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertSame("STR",getName());	904.8	0	0
25	4	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertFalse(getName().startsWith("STR"));	904.8	0	0
25	5	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNull(getName());	904.8	0	0
25	6	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertArrayEquals(newString[]{"STR"},newString[]{getName()});	904.8	0	0
25	7	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR",getName());	904.8	0	0
25	8	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotSame("STR",getName());	904.8	0	0
25	9	/	GeneralTest	testGetName	assertEquals("STR",newGeneral(env()).getName());	assertNotEquals("STR","STR");	904.8	0	0
26	0	trautonen/coveralls-maven-plugin	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNotNull(sourceLoader);	86.62	1	0
26	1	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertEquals(directories.size(),sourceLoader.getNumberOfLoaders());	86.62	0	0
26	2	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoaderinstanceofMultiSourceLoader);	86.62	0	0
26	3	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(directories.isEmpty());	86.62	0	0
26	4	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(0)instanceofDirectorySourceLoader);	86.62	0	0
26	5	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertSame(modules,sourceLoader.getModules());	86.62	0	0
26	6	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getSourceEncoding().equals("STR"));	86.62	0	0
26	7	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getBaseDir().equals(baseDir));	86.62	0	0
26	8	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertTrue(sourceLoader.getLoader(1)instanceofScanSourceLoader);	86.62	0	0
26	9	/	SourceLoaderFactoryTest	testCreateSourceLoaderWithAdditionalSourceDirectories	assertNotNull(sourceLoader);	assertNull(sourceLoader.getLoader(2));	86.62	0	0
27	0	myabc/markdownj	LineConventions	testMacLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	???;	40.91	0	0
28	0	myabc/markdownj	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertSame(expectedObject,actualObject);	46.53	0	0
28	1	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertFalse(booleanExpression);	46.53	0	0
28	2	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNull(object);	46.53	0	0
28	3	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotSame(expectedObject,actualObject);	46.53	0	0
28	4	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertTrue(booleanExpression);	46.53	0	0
28	5	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotNull(object);	46.53	0	0
28	6	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertEquals("STR","STR");	46.53	0	0
28	7	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertArrayEquals(expectedArray,actualArray);	46.53	0	0
28	8	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertThat(actualValue,matcher);	46.53	0	0
28	9	/	LineConventions	testWindowsLineConventions	assertEquals(EXPECTED,markup.markdown("STR"));	assertNotEquals("STR","STR");	46.53	0	0
29	0	myabc/markdownj	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(focal.markdown("STR").contains("STR"));	49.96	0	0
29	1	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(focal.markdown("STR").trim().isEmpty());	49.96	0	0
29	2	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertFalse(focal.markdown("STR").contains("STR"));	49.96	0	0
29	3	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(focal.markdown("STR").isEmpty());	49.96	0	0
29	4	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",focal.markdown(null));	49.96	0	0
29	5	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",focal.markdown("STR"));	49.96	0	0
29	6	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertTrue(focal.markdown(null).endsWith("STR"));	49.96	0	0
29	7	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertEquals("STR",focal.markdown("STR"));	49.96	0	0
29	8	/	EdgeCases	testSpaces	assertEquals("STR",m.markdown("STR"));	assertNotEquals("STR",focal.markdown(null));	49.96	0	0
30	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertThrows(AccessTokenRequiredException.class,()->acquireAccessToken());	63.73	0	0
30	1	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertFalse(oAuth2ClientContext.getPreservedState().containsKey(stateKey));	63.73	0	0
30	2	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertArrayEquals(newHttpMethod[]{HttpMethod.GET},requestTemplate.method().toArray());	63.73	0	0
30	3	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertSame(resource,obtainableAccessToken.getAdditionalInformation().get("STR"));	63.73	0	0
30	4	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNull(tokenRequest.getStateKey());	63.73	0	0
30	5	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotSame(obtainableAccessToken,existingToken);	63.73	0	0
30	6	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertNotNull(obtainableAccessToken);	63.73	0	0
30	7	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertTrue(obtainableAccessToken.getExpiration().isAfter(LocalDateTime.now()));	63.73	0	0
30	8	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertEquals("STR",existingToken.getValue());	63.73	0	0
30	9	/	OAuth2FeignRequestInterceptorTests	configureAccessTokenProvider	assertEquals("STR",mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	assertTrue(tokenRequest.getPreservedState().isEmpty());	63.73	0	0
31	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(env,result);	62.14	0	0
31	1	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsKey("STR"));	62.14	0	0
31	2	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsKey("STR"));	62.14	0	0
31	3	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNull(result.get("STR"));	62.14	0	0
31	4	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(result.get("STR"));	62.14	0	0
31	5	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(env,result);	62.14	0	0
31	6	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotEquals(0,result.size());	62.14	0	0
31	7	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertNotSame(env,result);	62.14	0	0
31	8	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertSame(env,result);	62.14	0	0
31	9	/	BambooEnvironmentVariablesTest	duplicates_bamboo_prefixed_env_vars_with_prefixless_copy	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(1,result.size());	62.14	0	0
32	0	cucumber-ltd/cucumber-pro-plugin-jvm	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsValue("STR"));	128.93	0	0
32	1	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals("STR",result.get("STR"));	128.93	0	0
32	2	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertFalse(result.containsKey("STR"));	128.93	0	0
32	3	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsKey("STR"));	128.93	0	0
32	4	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotNull(result);	128.93	0	0
32	5	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertEquals(2,result.size());	128.93	0	0
32	6	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(result.containsValue("STR"));	128.93	0	0
32	7	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertNotSame(env,result);	128.93	0	0
32	8	/	BambooEnvironmentVariablesTest	prefixless_env_var_takes_precendence	assertEquals("STR",convertedEnv.get("STR"));	assertTrue(resultinstanceofHashMap);	128.93	0	0
33	0	cucumber-ltd/cucumber-pro-plugin-jvm	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.containsKey("STR"));	132.18	0	0
33	1	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(env.containsKey("STR"));	132.18	0	0
33	2	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertNotNull(result);	132.18	0	0
33	3	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(2,result.size());	132.18	0	0
33	4	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertSame(env,filter(env));	132.18	0	0
33	5	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertFalse(env.containsValue("STR"));	132.18	0	0
33	6	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertEquals(4,env.size());	132.18	0	0
33	7	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.containsValue("STR"));	132.18	0	0
33	8	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(result.isEmpty());	132.18	0	0
33	9	/	EnvFilterTest	allows_overriding_mask	assertEquals(expectedEnv,envFilter.filter(env));	assertTrue(env.isEmpty());	132.18	0	0
34	0	amlinv/stat-collection-utils	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertSame(expectedMethod,result.get("STR"));	40.34	0	0
34	1	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedArray,result.values().toArray());	40.34	0	0
34	2	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertFalse(result.containsKey("STR"));	40.34	0	0
34	3	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertTrue(result.containsKey("STR"));	40.34	0	0
34	4	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNull(result.get("STR"));	40.34	0	0
34	5	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotNull(result.get("STR"));	40.34	0	0
34	6	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotSame(expectedMethod,result.get("STR"));	40.34	0	0
34	7	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertEquals(expectedSize,result.size());	40.34	0	0
34	8	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertNotEquals(expectedSize,result.size());	40.34	0	0
34	9	/	MBeanAnnotationUtilTest	testGetAttributes	assertEquals(2,atts.size());	assertArrayEquals(expectedArray,result.values().toArray());	40.34	0	0
35	0	amlinv/stat-collection-utils	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAttributeInjector);	27.1	0	0
35	1	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(attributeNames001);	27.1	0	0
35	2	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryInfo001);	27.1	0	0
35	3	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(objectName001);	27.1	0	0
35	4	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockLogger);	27.1	0	0
35	5	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockObjectQueryPreparer);	27.1	0	0
35	6	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polled001);	27.1	0	0
35	7	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(mockAccessConnection);	27.1	0	0
35	8	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(polledObjects);	27.1	0	0
35	9	/	BatchPollProcessorTest	testGetSetObjectQueryPreparer	assertNotNull(this.processor.getObjectQueryPreparer());	assertNotNull(processor);	27.1	0	0
36	0	arnohaase/a-foundation	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").get(tokens.apply("STR").size()-1).endsWith("STR"));	51.84	0	0
36	1	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertArrayEquals("value2","value3"});	51.84	0	0
36	2	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(3,tokens.apply("STR").size());	51.84	0	0
36	3	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply("STR").contains("STR"));	51.84	0	0
36	4	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertEquals(tokens.apply("STR").size(),newHashSet<>(tokens.apply("STR")).size());	51.84	0	0
36	5	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertNotNull(tokens.apply("STR"));	51.84	0	0
36	6	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertFalse(tokens.apply("STR").isEmpty());	51.84	0	0
36	7	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").contains("STR"));	51.84	0	0
36	8	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").isEmpty());	51.84	0	0
36	9	/	AsArrayViewTest	testFlatMapTokens	assertEquals(createColl(),create().flatMap(tokens));	assertTrue(tokens.apply("STR").get(0).startsWith("STR"));	51.84	0	0
37	0	DigitalPebble/storm-crawler	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotSame("STR","STR");	94.93	0	0
37	1	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNull(bolt.parseDomain(null));	94.93	0	0
37	2	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertFalse(bolt.parseString("STR"));	94.93	0	0
37	3	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(2,3});	94.93	0	0
37	4	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt!=null);	94.93	0	0
37	5	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals(5,bolt.parseNumber("STR"));	94.93	0	0
37	6	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertEquals("STR",bolt.parseDomain("STR"));	94.93	0	0
37	7	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(bolt);	94.93	0	0
37	8	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals("STR",bolt.parseDomain("STR"));	94.93	0	0
37	9	/	SiteMapParserBoltTest	testNonSitemapParsing	assertEquals(1,output.getEmitted().size());	assertTrue(bolt.parseString("STR"));	94.93	0	0
38	0	DigitalPebble/storm-crawler	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertArrayEquals(newString[]{"STR"},fields.get("STR").split("STR"));	75.59	0	0
38	1	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNull(fields.get("STR"));	75.59	0	0
38	2	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotNull(fields.get("STR"));	75.59	0	0
38	3	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(fields.get("STR"),fields.get("STR"));	75.59	0	0
38	4	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertEquals("STR",fields.get("STR"));	75.59	0	0
38	5	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertTrue(fields.containsKey("STR"));	75.59	0	0
38	6	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotSame(null,fields.get("STR"));	75.59	0	0
38	7	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertSame("STR",fields.get("STR"));	75.59	0	0
38	8	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertFalse(fields.isEmpty());	75.59	0	0
38	9	/	BasicIndexingTest	testRelativeCanonicalURL	assertEquals("STR","STR",fields.get("STR"));	assertNotEquals(null,fields.get("STR"));	75.59	0	0
39	0	DigitalPebble/storm-crawler	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertEquals(0,md.size());	68.98	0	0
39	1	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertArrayEquals(newObject[]{},md.keySet().toArray());	68.98	0	0
39	2	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertTrue(md.isEmpty());	68.98	0	0
39	3	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotNull(md);	68.98	0	0
39	4	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotSame(md,newHashMap<>());	68.98	0	0
39	5	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNotEquals(5,md.size());	68.98	0	0
39	6	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertSame(md,md);	68.98	0	0
39	7	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertNull(md.get("STR"));	68.98	0	0
39	8	/	FeedParserBoltTest	testNonFeedParsing	assertEquals(1,output.getEmitted().size());	assertFalse(md.containsKey("STR"));	68.98	0	0
40	0	gvlasov/collections-utils	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(4,elementCount);	59.29	0	0
40	1	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(true);	59.29	0	0
40	2	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertEquals(1,iterator.next().intValue());	59.29	0	0
40	3	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iteratorinstanceofIterator);	59.29	0	0
40	4	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertTrue(iterator.hasNext());	59.29	1	0
40	5	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator);	59.29	0	0
40	6	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertNotNull(iterator.next());	59.29	0	0
40	7	/	StreamIterableTest	containsRightElements	assertTrue(iterator.hasNext());	assertFalse(iterator.hasNext());	59.29	0	0
41	0	gvlasov/collections-utils	CollectorsTest	toLinkedHashSet	assertEquals(expected,Arrays.asList(1,2,3).stream().collect(Collectors.toLinkedHashSet()));	???;	42.08	0	0
42	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertThat("STR",Matchers.equalTo(result));	66.24	0	0
42	1	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertTrue(result.equals("STR"));	66.24	0	0
42	2	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotNull(result);	66.24	0	0
42	3	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertSame("STR",result);	66.24	0	0
42	4	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertFalse(result.equals("STR"));	66.24	0	0
42	5	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNull(null);	66.24	0	0
42	6	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertEquals("STR",result);	66.24	1	0
42	7	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotSame("STR",result);	66.24	0	0
42	8	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertThat(result,Matchers.is("STR"));	66.24	0	0
42	9	/	FizzBuzzTDDTest	test15ReturnsFizzBuzz	assertEquals("STR",result);	assertNotEquals("STR",result);	66.24	0	0
43	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(KoreanPosJava.Adjective,tokens.apply(2).getPos());	206.72	0	0
43	1	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.last().getSurface());	206.72	0	0
43	2	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>=3);	206.72	0	0
43	3	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(5,tokens.count());	206.72	0	0
43	4	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.exists(token->"STR".equals(token.getSurface())));	206.72	0	0
43	5	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.exists(token->"STR".equals(token.getSurface())));	206.72	0	0
43	6	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	206.72	0	0
43	7	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals("STR",tokens.apply(1).getSurface());	206.72	0	0
43	8	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(KoreanPosJava.Noun,tokens.apply(0).getPos());	206.72	0	0
43	9	/	OpenKoreanProcessorJavaTest	testAddWordsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.apply(0).getSurface());	206.72	0	0
44	0	fabric8io/fabric8-maven-plugin	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertArrayEquals(namedList.toArray(),filtered.toArray());	99.45	0	0
44	1	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals("STR",filtered.get(2).getName());	99.45	0	0
44	2	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotEquals(null,filtered);	99.45	0	0
44	3	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(3,filtered.size());	99.45	0	0
44	4	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(filtered.size(),set.size());	99.45	0	0
44	5	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.stream().anyMatch(e->e.getName().equals("STR")));	99.45	0	0
44	6	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertEquals(0,filtered.size());	99.45	0	0
44	7	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertFalse(filtered.stream().anyMatch(e->e.getName().equals("STR")));	99.45	0	0
44	8	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertNotNull(filtered);	99.45	0	0
44	9	/	ProcessorConfigTest	inc	assertTrue(contains(filtered,"STR"));	assertTrue(filtered.isEmpty());	99.45	0	0
45	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	89.69	0	0
45	1	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertThrows(Exception.class,()->matcher.lookingAt());	89.69	0	0
45	2	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertFalse(!matcher.lookingAt());	89.69	0	0
45	3	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	89.69	0	0
45	4	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNull(null);	89.69	0	0
45	5	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotThrows(Exception.class,()->matcher.lookingAt());	89.69	0	0
45	6	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotNull(matcher.lookingAt());	89.69	0	0
45	7	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	89.69	0	0
45	8	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	89.69	0	0
45	9	/	MatcherTest	lookingAtAREDirector	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	89.69	1	0
46	0	PeterisP/morphology	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotSame(formas,locītājs.generateInflections("STR"));	112.15	0	0
46	1	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotEquals(2,formas.size());	112.15	0	0
46	2	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertSame(formas,locītājs.generateInflections("STR"));	112.15	0	0
46	3	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertArrayEquals(newWordform[]{},formas.toArray());	112.15	0	0
46	4	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,hasSize(0));	112.15	0	0
46	5	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertNotNull(formas);	112.15	0	0
46	6	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertEquals(0,formas.size());	112.15	0	0
46	7	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertFalse(formas.contains(null));	112.15	0	0
46	8	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertThat(formas,empty());	112.15	0	0
46	9	/	MorphologyTest	apstākļa_vārdu_ģenerēšana	assertEquals(1,formas.size());	assertTrue(formas.isEmpty());	112.15	0	0
47	0	javadev/moneytostr-russian	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDRUS.convert(-10999999999999.99));	116.35	0	0
47	1	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRUR.convert(-9999999999999.99));	116.35	0	0
47	2	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSDENG.convert(-10999999999999.99));	116.35	0	0
47	3	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(-9999999999999.99));	116.35	0	0
47	4	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAH.convert(-9999999999999.99));	116.35	0	0
47	5	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURENG.convert(-9999999999999.99));	116.35	0	0
47	6	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHENG.convert(-9999999999999.99));	116.35	0	0
47	7	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrRURRUS.convert(-9999999999999.99));	116.35	0	0
47	8	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUSD.convert(-10999999999999.99));	116.35	0	0
47	9	/	MoneyToStrTest	checkEURRUS	assertEquals("STR",moneyToStrEURRUS.convert(V_300D));	assertEquals("STR",moneyToStrUAHRUS.convert(-9999999999999.99));	116.35	0	0
48	0	TooTallNate/Java-WebSocket	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().contains("STR"));	67.32	0	0
48	1	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().startsWith("STR"));	67.32	0	0
48	2	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotEquals("STR",defaultExtension.toString());	67.32	0	0
48	3	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotNull(defaultExtension.toString());	67.32	0	0
48	4	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertEquals("STR",defaultExtension.toString());	67.32	1	0
48	5	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertNotSame("STR",defaultExtension.toString());	67.32	0	0
48	6	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().endsWith("STR"));	67.32	0	0
48	7	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertFalse(defaultExtension.toString().isEmpty());	67.32	0	0
48	8	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().length()>0);	67.32	0	0
48	9	/	DefaultExtensionTest	testToString	assertEquals("STR",defaultExtension.toString());	assertTrue(defaultExtension.toString().matches("STR"));	67.32	0	0
49	0	OpenLiberty/ci.common	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	232.23	1	0
49	1	/	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertNull(util.removeSurroundingQuotes(null));	232.23	0	0
49	2	/	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertNotEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	232.23	0	0
49	3	/	DevUtilTest	testRemoveSurroundingQuotes	assertEquals("STR",DevUtil.removeSurroundingQuotes("STR"));	assertEquals("STR",removeSurroundingQuotes("STR"));	232.23	0	0
0	0	redraiment/jactiverecord	SeqTest	testCommaList	assertEquals("STR",Seq.join(Arrays.asList("STR","STR","STR"),"STR"));	assertEquals("STR",FOCAL+"STR");	58.59	0	0
1	0	redraiment/jactiverecord	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertTrue(true);	42.63	0	0
1	1	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertArrayEquals(newint[]{1,2,3},newint[]{1,2,3});	42.63	0	0
1	2	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNull(null);	42.63	0	0
1	3	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertNotSame(object1,object2);	42.63	0	0
1	4	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	???;	42.63	0	0
1	5	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertSame(object1,object2);	42.63	0	0
1	6	/	TSqlBuilderTest	testWhere	assertEquals("STR",sql.toString());	assertFalse(false);	42.63	0	0
2	0	redraiment/jactiverecord	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertArrayEquals(newString[]{"STR"},sql.getTables());	45.45	0	0
2	1	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertFalse(sql.toString().endsWith("STR"));	45.45	0	0
2	2	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().contains("STR"));	45.45	0	0
2	3	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotEquals("STR",sql.toString());	45.45	0	0
2	4	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotSame("STR",sql.getTables()[0]);	45.45	0	0
2	5	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNotNull(sql);	45.45	0	0
2	6	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertNull(sql);	45.45	0	0
2	7	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertTrue(sql.toString().startsWith("STR"));	45.45	0	0
2	8	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertEquals("STR",sql.toString());	45.45	1	0
2	9	/	TSqlBuilderTest	testSort	assertEquals("STR",sql.toString());	assertSame("STR",sql.toString());	45.45	0	0
3	0	jcodec/jcodec	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotSame(_in,expecteds);	403.35	0	0
3	1	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(lacesCount<0);	403.35	0	0
3	2	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	403.35	1	0
3	3	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(3,calcEbmlLacingDiffs(_in).length);	403.35	0	0
3	4	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertSame(_in,_in);	403.35	0	0
3	5	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(443,MkvBlock.calcEbmlLacingDiffs(_in)[1]);	403.35	0	0
3	6	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(_in));	403.35	0	0
3	7	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(187.0,calcEbmlLacingDiffs(_in)[0]);	403.35	0	0
3	8	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNull(null);	403.35	0	0
3	9	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(lacesCount>0);	403.35	0	0
4	0	jcodec/jcodec	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(127,ebmlEncode(20)[2]);	174.58	0	0
4	1	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[]{0,0,0,20},ebmlEncode(20));	174.58	0	0
4	2	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame(first,second);	174.58	0	0
4	3	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(4,ebmlEncode(15).length);	174.58	0	0
4	4	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(10).length>0);	174.58	0	0
4	5	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertArrayEquals(newbyte[0],ebmlEncode(0));	174.58	0	0
4	6	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertSame(first,second);	174.58	0	0
4	7	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNull(ebmlEncode(0));	174.58	0	0
4	8	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(ebmlEncode(5));	174.58	0	0
5	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotEquals("STR",focal.convert(10.0));	50.42	0	0
5	1	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotNull(focal.convert(5.0));	50.42	0	0
5	2	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",focal.convert(1.0));	50.42	0	0
5	3	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",focal.convert(1000.0));	50.42	0	0
5	4	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotEquals("STR",focal.convert(99.99));	50.42	0	0
5	5	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",focal.convert(0.01));	50.42	0	0
5	6	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertTrue(focal.convert(50.0).startsWith("STR"));	50.42	0	0
5	7	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertNotSame("STR",focal.convert(500.0));	50.42	0	0
5	8	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertEquals("STR",focal.convert(1234.56));	50.42	0	0
5	9	/	MoneyToStrTest	checkUAHRUSMinus	assertEquals("STR",moneyToStrUAHRUS.convert(-V_300D));	assertFalse(focal.convert(0.0).isEmpty());	50.42	0	0
6	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotSame(moneyToStrRUR,moneyToStrUSDENG);	87.59	0	0
6	1	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotNull(moneyToStrUAH);	87.59	0	0
6	2	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNull(moneyToStrRURRUS);	87.59	0	0
6	3	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertEquals("STR",moneyToStrEURRUS.convert(323.0));	87.59	0	0
6	4	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	???;	87.59	0	0
6	5	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertTrue(moneyToStrPER1000.convert(10.05).startsWith("STR"));	87.59	0	0
6	6	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR","STR","STR","STR"},moneyToStrCustom.getCustomStrings());	87.59	0	0
6	7	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertNotEquals(moneyToStrUSDENG.convert(50.5),moneyToStrUSDENG.convert(50.50));	87.59	0	0
6	8	/	MoneyToStrTest	checkUAHUKMinus	assertEquals("STR",moneyToStrUAH.convert(-V_300D));	assertFalse(moneyToStrUSDENG.convert(100.0).endsWith("STR"));	87.59	0	0
7	0	orientechnologies/orientdb	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newObject()));	821.76	0	0
7	1	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals(OMultiValue.getFirstValue(collection),"STR");	821.76	1	0
7	2	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newArrayList<String>()));	821.76	0	0
7	3	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(newString[]{}));	821.76	0	0
7	4	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals("STR",getFirstValue(Arrays.asList("STR","STR","STR")));	821.76	0	0
7	5	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertEquals("STR",OMultiValue.getFirstValue(newString[]{"STR","STR","STR"}));	821.76	0	0
7	6	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	???;	821.76	0	0
7	7	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(getFirstValue(newHashMap<String,String>()));	821.76	0	0
7	8	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue(null));	821.76	0	0
7	9	/	OMultiValueTest	testArrayFirstLast	assertEquals(OMultiValue.getFirstValue(collection),"STR");	assertNull(OMultiValue.getFirstValue("STR"));	821.76	0	0
8	0	orientechnologies/orientdb	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertArrayEquals(newObject[]{doc},vertices.toArray());	236.02	0	0
8	1	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	236.02	1	0
8	2	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size());	236.02	0	0
8	3	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals("STR",vertices.get(0).field("STR"));	236.02	0	0
8	4	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(doc,vertices.get(0));	236.02	0	0
8	5	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertSame(doc,vertices.get(0));	236.02	0	0
8	6	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	236.02	0	0
8	7	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNull(vertices.get(0));	236.02	0	0
8	8	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.size()>0);	236.02	0	0
8	9	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	236.02	0	0
9	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(compositeIndex);	339.93	0	0
9	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys[0],result.getKeys().get(0));	339.93	0	0
9	2	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	339.93	0	0
9	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(documentinstanceofODocument);	339.93	0	0
9	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	339.93	0	0
9	5	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(keys.length,result.getKeys().size());	339.93	0	0
9	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals("STR",compositeIndex.getIndex(1).getDefinition().getFields().get(0));	339.93	0	0
9	7	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals("STR",compositeIndex.getIndex(0).getDefinition().getFields().get(0));	339.93	0	0
9	8	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofOCompositeKey);	339.93	0	0
9	9	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(2,compositeIndex.size());	339.93	0	0
10	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndex);	326.81	0	0
10	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertFalse(compositeIndex.hasIndex("STR"));	326.81	0	0
10	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,keys.size());	326.81	0	0
10	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,compositeIndex.getIndexes().size());	326.81	0	0
10	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(compositeIndexinstanceofOCompositeIndexDefinition);	326.81	0	0
10	5	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(compositeIndex.hasIndex("STR",OType.INTEGER));	326.81	0	0
10	6	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(compositeIndexDefinition);	326.81	0	0
10	7	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	326.81	1	0
10	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,((ArrayList<OCompositeKey>)result).size());	326.81	0	0
10	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList);	326.81	0	0
11	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	208.24	0	0
11	1	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertThat(result.stream().count(),CoreMatchers.is(0));	208.24	0	0
11	2	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertArrayEquals(newObject[]{},result.stream().toArray());	208.24	0	0
11	3	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	208.24	1	0
11	4	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotEquals(0,result.stream().count());	208.24	0	0
11	5	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNull(result.next());	208.24	0	0
11	6	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.next());	208.24	0	0
11	7	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertSame(0,result.stream().count());	208.24	0	0
11	8	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotSame(0,result.stream().count());	208.24	0	0
11	9	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.hasNext());	208.24	0	0
12	0	orientechnologies/orientdb	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedLength,stream.length);	305.8	0	0
12	1	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(expectedByteArray,stream);	305.8	0	0
12	2	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(expectedByte,stream[0]);	305.8	0	0
12	3	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream[0]);	305.8	0	0
12	4	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newbyte[0],stream);	305.8	0	0
12	5	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],greaterThan(minValue));	305.8	0	0
12	6	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertSame(expectedByte,stream[0]);	305.8	0	0
12	7	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],instanceOf(Byte.class));	305.8	0	0
12	8	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertThat(stream[0],lessThan(maxValue));	305.8	0	0
12	9	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(expectedByte,stream[0]);	305.8	0	0
12	10	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNull(stream[0]);	305.8	0	0
13	0	orientechnologies/orientdb	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(database.getRecordById(docOne.getIdentity()));	273.09	0	0
13	1	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo);	273.09	0	0
13	2	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNull(database.getRecordById(newORecordId(-1,-1)));	273.09	0	0
13	3	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertArrayEquals(2,3});	273.09	0	0
13	4	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotEquals(0,database.countClusterElements(database.getDefaultClusterId()));	273.09	0	0
13	5	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	273.09	1	0
13	6	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(recordsCount==0);	273.09	0	0
13	7	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertSame(docOne,ridBag.get(0));	273.09	0	0
13	8	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(0,database.countClusterElements(database.getClusterIdByName(database.getDefaultClusterName())));	273.09	0	0
13	9	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(recordsCount>0);	273.09	0	0
14	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR",idProperty.getName());	255.57	0	0
14	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().startsWith("STR"));	255.57	0	0
14	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(Pattern.matches("STR",idProperty.getName()));	255.57	0	0
14	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName()instanceofString);	255.57	0	0
14	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().contains("STR"));	255.57	0	0
14	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	255.57	0	0
14	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getName().length()>=1&&idProperty.getName().length()<=100);	255.57	0	0
14	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty.getName());	255.57	0	0
14	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(!idProperty.getName().isEmpty());	255.57	0	0
15	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals("STR",idProperty.getName());	264.55	0	0
15	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(1,idProperty.getMin());	264.55	0	0
15	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax());	264.55	0	0
15	3	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(5,idProperty.getDefaultValue());	264.55	0	0
15	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isUnsafe());	264.55	0	0
15	5	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getOwnerClass().getName());	264.55	0	0
15	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals("STR",idProperty.getName());	264.55	0	0
15	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	264.55	0	0
15	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(OType.EMBEDDEDLIST,idProperty.getType());	264.55	0	0
15	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(db);	264.55	0	0
16	0	orientechnologies/orientdb	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(0,getClusterIds().length);	263.07	0	0
16	1	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(1,getClusterIds()[0]);	263.07	0	0
16	2	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).contains(5));	263.07	0	0
16	3	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(3,getClusterIds().length);	263.07	0	0
16	4	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(getClusterIds().length,clusterIdsSet.size());	263.07	0	0
16	5	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).contains(2));	263.07	0	0
16	6	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(Arrays.asList(getClusterIds()).isEmpty());	263.07	0	0
16	7	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(getClusterIds());	263.07	0	0
16	8	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(Arrays.asList(getClusterIds()).isEmpty());	263.07	0	0
16	9	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(getClusterIds().length>0);	263.07	0	0
17	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	247.36	0	0
17	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(false,doc.isDirty());	247.36	0	0
17	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty());	247.36	0	0
17	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields());	247.36	0	0
17	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	247.36	0	0
17	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	247.36	0	0
17	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	247.36	0	0
17	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	247.36	0	0
17	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()==false);	247.36	0	0
17	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	247.36	1	0
18	0	orientechnologies/orientdb	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	93.8	1	0
18	1	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(ret.getId()>0);	93.8	0	0
18	2	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(OServerPluginHelper.isHandlerCallbackInvoked(ret.getProtocol().getServer(),ret));	93.8	0	0
18	3	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	93.8	0	0
18	4	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsValue(ret));	93.8	0	0
18	5	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(connectionSerial.get()-1,ret.getConnectionSerial());	93.8	0	0
18	6	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(protocol,ret.getProtocol());	93.8	0	0
18	7	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(connections.containsKey(ret.getId()));	93.8	0	0
18	8	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(OLogManager.instance().getConfiguredLoggers().contains("STR"+ret));	93.8	0	0
18	9	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(server,ret.getProtocol().getServer());	93.8	0	0
19	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(res);	244.68	0	0
19	1	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions(),serializerVersion);	244.68	0	0
19	2	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(document.containsProperty("STR"));	244.68	0	0
19	3	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertFalse(mappa.containsKey("STR"));	244.68	0	0
19	4	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(serializerinstanceofORecordSerializerNetwork);	244.68	0	0
19	5	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extrinstanceofODocument);	244.68	0	0
19	6	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(serializer);	244.68	0	0
19	7	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotEquals(ORecordSerializerNetworkV37.class,serializer.getClass());	244.68	0	0
19	8	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertEquals(2,lista.size());	244.68	0	0
19	9	/	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(_fieldSize>0);	244.68	0	0
20	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(anotherCompositeKey);	249.4	0	0
20	1	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,compositeKey);	249.4	0	0
20	2	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKeyinstanceofString);	249.4	0	0
20	3	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey.hashCode(),anotherCompositeKey.hashCode());	249.4	0	0
20	4	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKeyinstanceofOCompositeKey);	249.4	0	0
20	5	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	249.4	1	0
20	6	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey));	249.4	0	0
20	7	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	249.4	0	0
20	8	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(anotherCompositeKey,anotherCompositeKey);	249.4	0	0
20	9	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey);	249.4	0	0
21	0	orientechnologies/orientdb	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(0,request.getCommand());	110.85	0	0
21	1	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals(0,request.getCommand());	110.85	0	0
21	2	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	110.85	0	0
21	3	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getErrorMessage());	110.85	0	0
21	4	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertFalse(request.getCommand()!=OChannelBinaryProtocol.REQUEST_QUERY);	110.85	0	0
21	5	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertArrayEquals(2,3});	110.85	0	0
21	6	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotEquals("STR",params.get("STR"));	110.85	0	0
21	7	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertTrue(request.getCommand()==OChannelBinaryProtocol.REQUEST_QUERY);	110.85	0	0
21	8	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotSame(ORecordSerializerNetworkFactory.INSTANCE.current(),other.getSerializer());	110.85	0	0
21	9	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNull(other.getErrorMessage());	110.85	0	0
22	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotEquals(expectedValue,result);	252.65	0	0
22	1	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertEquals(expectedValue,result);	252.65	0	0
22	2	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertSame(expectedObject,result);	252.65	0	0
22	3	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertFalse(result);	252.65	0	0
22	4	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotNull(result);	252.65	0	0
22	5	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertTrue(result);	252.65	0	0
22	6	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNotSame("STR",expectedObject,result);	252.65	0	0
22	7	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertNull(result);	252.65	0	0
22	8	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	assertEquals(result,"STR");	assertArrayEquals(expectedArray,result);	252.65	0	0
23	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals("STR",config.get(Keys.CUCUMBERPRO_LOGGING));	69.66	0	0
23	1	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(config,logger.getConfig());	69.66	0	0
23	2	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotEquals("STR",logger.getLogLevelType());	69.66	0	0
23	3	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(config.get(Keys.CUCUMBERPRO_LOGGING));	69.66	0	0
23	4	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(loggerinstanceofLogger.ConsoleLogger);	69.66	0	0
23	5	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotEquals("STR",config.get(Keys.CUCUMBERPRO_LOGGING));	69.66	0	0
23	6	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertArrayEquals(newString[]{"STR"},config.logLevelsToArray());	69.66	0	0
23	7	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertSame(config,logger.getConfig());	69.66	0	0
23	8	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNull(config.get(Keys.CUCUMBERPRO_LOGGING));	69.66	0	0
23	9	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(loggerinstanceofLogger.SystemLogger);	69.66	0	0
24	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals("STR",config.get(CUCUMBERPRO_URL));	71.96	0	0
24	1	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(config.get(CUCUMBERPRO_LOGGING));	71.96	0	0
24	2	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(logger,newLogger(config));	71.96	0	0
24	3	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNull(config.get(CUCUMBERPRO_PROFILE));	71.96	0	0
24	4	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(config.get(CUCUMBERPRO_LOGFILE),"STR");	71.96	0	0
24	5	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.isInfoEnabled());	71.96	0	0
24	6	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.isDebugEnabled());	71.96	0	0
24	7	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertArrayEquals(newString[]{"STR","STR","STR","STR"},config.get(CUCUMBERPRO_ENVMASK));	71.96	0	0
24	8	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(config,createConfig());	71.96	0	0
24	9	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(5001,config.get(CUCUMBERPRO_CONNECTION_TIMEOUT));	71.96	0	0
25	0	fluenda/ParCEFone	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0);	74.16	0	0
25	1	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0);	74.16	0	0
25	2	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison>0);	74.16	0	0
25	3	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<=0);	74.16	0	0
25	4	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>=0);	74.16	0	0
25	5	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison<0);	74.16	0	0
25	6	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(macAddress,macAddress.address);	74.16	0	0
25	7	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison);	74.16	0	0
25	8	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	74.16	1	0
26	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	80.55	0	0
26	1	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedLength,macAddress.getAddress().length);	80.55	0	0
26	2	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddressinstanceofMacAddress);	80.55	0	0
26	3	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(macAddress));	80.55	0	0
26	4	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(someObject));	80.55	0	0
26	5	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	80.55	0	0
26	6	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedResult,macAddress.equals(otherMacAddress));	80.55	0	0
26	7	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	80.55	0	0
26	8	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(expectedMacAddress,macAddress);	80.55	0	0
26	9	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(expectedMacAddress,macAddress);	80.55	0	0
27	0	fluenda/ParCEFone	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals("STR",parser.parse(sample1,true,Locale.US).getVendor());	86.85	0	0
27	1	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	86.85	0	0
27	2	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotSame(parser.parse(sample1,true,Locale.US),parser.parse(sample1,true,Locale.US));	86.85	0	0
27	3	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertThat(parser.parse(sample1,true,Locale.US),instanceOf(CommonEvent.class));	86.85	0	0
27	4	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertArrayEquals("FireEye","CMS"});	86.85	0	0
27	5	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).isValidate());	86.85	0	0
27	6	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNull(parser.parse(null,true,Locale.US));	86.85	0	0
27	7	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(7.2,parser.parse(sample1,true,Locale.US).getVersion());	86.85	0	0
27	8	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(parser.parse(sample1,false,Locale.US).isNormalize());	86.85	0	0
27	9	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US).getExtensions().isEmpty());	86.85	0	0
28	0	nidi3/graphviz-java	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotNull(markdown("STR"));	115.51	0	0
28	1	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertSame(html("STR"),markdown("STR"));	115.51	0	0
28	2	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNull(markdown(null));	115.51	0	0
28	3	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertFalse(html("STR").contains("STR"));	115.51	0	0
28	4	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotSame(html("STR"),markdown("STR"));	115.51	0	0
28	5	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertArrayEquals(html("STR").toCharArray(),markdown("STR").toCharArray());	115.51	0	0
28	6	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertEquals(html("STR"),markdown("STR"));	115.51	0	0
28	7	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertTrue(html("STR").contains("STR"));	115.51	0	0
28	8	/	LabelTest	markdown	assertEquals("STR",Label.markdown("STR").value);	assertNotEquals(html("STR"),markdown("STR"));	115.51	0	0
29	0	trautonen/coveralls-maven-plugin	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch()instanceofString);	534.01	0	0
29	1	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertFalse(condition);	534.01	0	0
29	2	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().isEmpty());	534.01	0	0
29	3	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertNotNull(getBranch());	534.01	0	0
29	4	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().startsWith(prefix));	534.01	0	0
29	5	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertEquals(expectedValue,getBranch());	534.01	0	0
29	6	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(getBranch().endsWith(suffix));	534.01	0	0
29	7	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertTrue(condition);	534.01	0	0
29	8	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertFalse(getBranch().isEmpty());	534.01	0	0
29	9	/	WerckerTest	testGetBranch	assertEquals("STR",newWercker(env()).getBranch());	assertNotEquals(unexpectedValue,getBranch());	534.01	0	0
30	0	trautonen/coveralls-maven-plugin	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertTrue(isSelected());	711.66	0	0
30	1	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNull(getProperty(CIRCLE));	711.66	0	0
30	2	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotNull(getProperty(CIRCLE));	711.66	0	0
30	3	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertFalse(!isSelected());	711.66	0	0
30	4	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertNotEquals(false,isSelected());	711.66	0	0
30	5	/	CircleTest	testIsSelectedForCircle	assertTrue(newCircle(env()).isSelected());	assertEquals(true,isSelected());	711.66	0	0
31	0	trautonen/coveralls-maven-plugin	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertTrue(isSelected());	86.27	0	0
31	1	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(null,getProperty(JENKINS_URL));	86.27	0	0
31	2	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotNull(getProperty(JENKINS_URL));	86.27	0	0
31	3	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotEquals(null,getProperty(JENKINS_URL));	86.27	0	0
31	4	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNotSame(true,isSelected());	86.27	0	0
31	5	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertEquals(null,getProperty(JENKINS_URL));	86.27	0	0
31	6	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertFalse(isSelected());	86.27	0	0
31	7	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(true,isSelected());	86.27	0	0
31	8	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertSame(null,getProperty(JENKINS_URL));	86.27	0	0
31	9	/	JenkinsTest	testIsSelectedForNothing	assertFalse(newJenkins(newHashMap<String,String>()).isSelected());	assertNull(getProperty(JENKINS_URL));	86.27	0	0
32	0	adlnet/jxapi	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected.toString(),actual.toString());	47.06	0	0
32	1	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	47.06	0	0
32	2	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNull(actual);	47.06	0	0
32	3	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertFalse(expected.isEquals(actual));	47.06	0	0
32	4	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotSame(expected,actual);	47.06	0	0
32	5	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertSame(expected,actual);	47.06	0	0
32	6	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	47.06	0	0
32	7	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	47.06	1	0
32	8	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual);	47.06	0	0
32	9	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(expected.isEquals(actual));	47.06	0	0
33	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertSame(statementRef,statementRef);	47.81	0	0
33	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(null,statementRef);	47.81	0	0
33	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	47.81	0	0
33	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	47.81	1	0
33	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(StatementReference.class,statementRef.getClass());	47.81	0	0
33	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotSame(id,statementRef.getId());	47.81	0	0
33	6	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertThrows(IllegalArgumentException.class,()->newStatementReference(null));	47.81	0	0
33	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals(id,statementRef.getId());	47.81	0	0
33	8	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue(id.equals(statementRef.getId()));	47.81	0	0
33	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertArrayEquals(newObject[]{id},newObject[]{statementRef.getId()});	47.81	0	0
34	0	adlnet/jxapi	GroupTest	testSetMember	assertNotNull(actual);	"assertThrows(Exception.class,()->{
/*codethatshouldthrowanexception*/
});"	49.48	0	0
34	1	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	49.48	0	0
34	2	/	GroupTest	testSetMember	assertNotNull(actual);	assertThat(actual,Matchers.hasItem(expected));	49.48	0	0
34	3	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(expected.containsAll(actual)&&actual.containsAll(expected));	49.48	0	0
34	4	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotSame(expected,actual);	49.48	0	0
34	5	/	GroupTest	testSetMember	assertNotNull(actual);	assertSame(expected,actual);	49.48	0	0
34	6	/	GroupTest	testSetMember	assertNotNull(actual);	assertNull(actual);	49.48	0	0
34	7	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	49.48	1	0
34	8	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotEquals(expected,actual);	49.48	0	0
34	9	/	GroupTest	testSetMember	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	49.48	0	0
35	0	adlnet/jxapi	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertThat(actual,CoreMatchers.is(expected));	44.8	0	0
35	1	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equalsIgnoreCase(actual));	44.8	0	0
35	2	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	44.8	1	0
35	3	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(expected.equals(actual));	44.8	0	0
35	4	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	44.8	0	0
35	5	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(expected,actual);	44.8	0	0
35	6	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	44.8	0	0
35	7	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNull(actual);	44.8	0	0
35	8	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual);	44.8	0	0
35	9	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotEquals(expected,actual);	44.8	0	0
36	0	adlnet/jxapi	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(InteractionComponent.class,actual.get(0).getClass());	59.48	0	0
36	1	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.stream().anyMatch(comp->comp.getId().equals("STR")));	59.48	0	0
36	2	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(1,actual.size());	59.48	0	0
36	3	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.stream().anyMatch(Objects::isNull));	59.48	0	0
36	4	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.isEmpty());	59.48	0	0
36	5	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>0);	59.48	0	0
36	6	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotSame(expected,actual);	59.48	0	0
36	7	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.stream().anyMatch(comp->comp.getId().equals("STR")));	59.48	0	0
36	8	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual);	59.48	1	0
36	9	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	59.48	0	0
37	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals("STR",normalizedUrl);	150	0	0
37	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame("STR",normalizedUrl);	150	0	0
37	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	150	0	0
37	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals("STR",normalizedUrl);	150	0	0
37	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl);	150	0	0
37	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(normalizedUrl.contains("STR"));	150	0	0
37	6	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	150	0	0
37	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertSame("STR",normalizedUrl);	150	0	0
37	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(newString[]{"STR"},normalizedUrl.split("STR")[1].split("STR"));	150	0	0
38	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl);	129.37	0	0
38	1	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	129.37	0	0
38	2	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertTrue(expectedResult.equals(normalizedUrl));	129.37	0	0
38	3	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotSame(testSourceUrl,sourceUrl);	129.37	0	0
38	4	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertSame(testSourceUrl,sourceUrl);	129.37	0	0
38	5	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertArrayEquals(expectedResult.toCharArray(),normalizedUrl.toCharArray());	129.37	0	0
38	6	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNull(normalizedUrl);	129.37	0	0
38	7	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertFalse(expectedResult.equals(normalizedUrl));	129.37	0	0
38	8	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertNotEquals(expectedResult.length(),normalizedUrl.length());	129.37	0	0
38	9	/	BasicURLNormalizerTest	testLowerCasing	assertEquals("STR",expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	129.37	0	0
39	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(aXls.getURL(),newClassPathResource("STR").getURL());	108.79	0	0
39	1	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(aXls.exists());	108.79	0	0
39	2	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertThat(aXls.getFile().getName(),Matchers.startsWith("STR"));	108.79	0	0
39	3	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	108.79	0	0
39	4	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertSame(CodeListDocument.class,super.getBoundType());	108.79	0	0
39	5	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(o->newObjectFactory().createCodeList(o)instanceofCodeList);	108.79	0	0
39	6	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(aXls,newClassPathResource("STR"));	108.79	0	0
39	7	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(aXls,null);	108.79	0	0
39	8	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(CGenericode.GENERICODE_10_XSDS,super.getSchemaLocations());	108.79	0	0
39	9	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals("banana","orange"});	108.79	0	0
40	0	TooTallNate/Java-WebSocket	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertEquals(Opcode.CLOSING,frame.getOpcode());	73.69	0	0
40	1	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertArrayEquals(newbyte[0],frame.getPayloadData());	73.69	0	0
40	2	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotEquals("STR",frame.getReason());	73.69	0	0
40	3	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotEquals(CloseFrame.CONTINUOUS,frame.getCode());	73.69	0	0
40	4	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotSame("STR",frame.getReason());	73.69	0	0
40	5	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertSame(Opcode.CLOSING,frame.getOpcode());	73.69	0	0
40	6	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertFalse(frame.getReason().isEmpty());	73.69	0	0
40	7	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNotNull(frame.toString());	73.69	0	0
40	8	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertTrue(frame.getCode()==CloseFrame.NORMAL);	73.69	0	0
40	9	/	CloseFrameTest	testExtends	assertEquals("STR",true,frameinstanceofControlFrame);	assertNull(frame.getCloseCode());	73.69	0	0
41	0	TooTallNate/Java-WebSocket	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotEquals("STR",protocol0.getProvidedProtocol());	61.32	0	0
41	1	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertSame("STR",protocol0.getProvidedProtocol());	61.32	0	0
41	2	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertTrue(protocol0.getProvidedProtocol().isEmpty());	61.32	0	0
41	3	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertFalse(protocol0.getProvidedProtocol().equals("STR"));	61.32	0	0
41	4	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotSame("STR",protocol0.getProvidedProtocol());	61.32	0	0
41	5	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNotNull(protocol0.getProvidedProtocol());	61.32	0	0
41	6	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertArrayEquals(newString[]{"STR"},newString[]{protocol0.getProvidedProtocol()});	61.32	0	0
41	7	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertEquals("STR",protocol0.getProvidedProtocol());	61.32	1	0
41	8	/	ProtocolTest	testGetProvidedProtocol	assertEquals("STR",protocol0.getProvidedProtocol());	assertNull(protocol0.getProvidedProtocol());	61.32	0	0
42	0	TooTallNate/Java-WebSocket	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNull(client.removeHeader("STR"));	62	0	0
42	1	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertTrue(client.removeHeader("STR").isEmpty());	62	0	0
42	2	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotEquals("STR",client.removeHeader("STR"));	62	0	0
42	3	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotNull(client.removeHeader("STR"));	62	0	0
42	4	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertArrayEquals(httpHeaders.keySet().toArray(),client.removeHeader("STR").split("STR"));	62	0	0
42	5	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertSame(httpHeaders,client.headers);	62	0	0
42	6	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertFalse(client.removeHeader("STR").contains("STR"));	62	0	0
42	7	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertNotSame(httpHeaders,client.removeHeader("STR"));	62	0	0
42	8	/	HeadersTest	test_Add_RemoveHeaders	assertEquals("STR",client.removeHeader("STR"));	assertEquals("STR",client.removeHeader("STR"));	62	1	0
43	0	gvlasov/collections-utils	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(1,2,3)).collect(Collectors.toSet()).containsAll(Arrays.asList(1,3)));	107.29	0	0
43	1	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Arrays.asList(5,2,8,1)).sorted().collect(Collectors.toList()).equals(Arrays.asList(1,2,5,8)));	107.29	0	0
43	2	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(IterableToStream.stream(Arrays.asList(1,2,3)));	107.29	0	0
43	3	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(0,stream(newHashSet<>()).count());	107.29	0	0
43	4	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element>3));	107.29	0	0
43	5	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertEquals(10,(int)IterableToStream.stream(Arrays.asList(10,20,30)).findFirst().orElse(-1));	107.29	0	0
43	6	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertFalse(IterableToStream.stream(Arrays.asList(1,2,3)).anyMatch(element->element==4));	107.29	0	0
43	7	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(newArrayList<>()));	107.29	0	0
43	8	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(IterableToStream.stream(Arrays.asList(2,4,6)).allMatch(element->element%2==0));	107.29	0	0
43	9	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	assertTrue(IterableToStream.stream(Arrays.asList("STR","STR","STR")).count()>0);	107.29	0	0
44	0	gvlasov/collections-utils	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(null));	58.06	0	0
44	1	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(1,stream(Collections.singleton("STR").iterator()).count());	58.06	0	0
44	2	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.singleton("STR").iterator()).findFirst().isPresent());	58.06	0	0
44	3	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(Collections.emptyIterator()).findFirst().isPresent());	58.06	0	0
44	4	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.of(1,2,3),stream(Arrays.asList(1,2,3).iterator()));	58.06	0	0
44	5	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertNotNull(stream(Collections.singleton("STR").iterator()).findFirst().orElse(null));	58.06	0	0
44	6	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.singleton("STR").iterator()).anyMatch(e->e.equals("STR")));	58.06	0	0
44	7	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertTrue(stream(Collections.emptyIterator()).count()==0);	58.06	0	0
44	8	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertEquals(Stream.empty(),stream(Collections.emptyIterator()));	58.06	0	0
44	9	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	assertFalse(stream(Collections.singleton("STR").iterator()).anyMatch(e->e.equals("STR")));	58.06	0	0
45	0	NanoHttpd/nanohttpd	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(testServer.response.getBody().contains("STR"));	98.76	0	0
45	1	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertEquals("STR",contentEncoding.getValue());	98.76	0	0
45	2	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(httpclient.getConnectionManager()instanceofSingleClientConnManager);	98.76	0	0
45	3	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNull(contentEncoding);	98.76	0	0
45	4	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(testServer.response.getBody().contains("STR"));	98.76	0	0
45	5	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(httpclient.getConnectionManager()instanceofThreadSafeClientConnManager);	98.76	0	0
45	6	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertFalse(response.getStatusLine().getStatusCode()==404);	98.76	0	0
45	7	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertTrue(response.getStatusLine().getStatusCode()==200);	98.76	0	0
45	8	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNotEquals("STR",contentEncoding.getValue());	98.76	0	0
45	9	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull("STR",contentEncoding);	assertNotNull(contentEncoding);	98.76	0	0
46	0	OpenLiberty/ci.common	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.isEmpty());	54.25	0	0
46	1	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(result.contains("STR"));	54.25	0	0
46	2	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertArrayEquals("10"},result.toArray());	54.25	0	0
46	3	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertSame(options,result);	54.25	0	0
46	4	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	54.25	0	0
46	5	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotSame(options,result);	54.25	0	0
46	6	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(2,result.size());	54.25	0	0
46	7	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(Arrays.asList("STR"),result);	54.25	0	0
46	8	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertThat(result,IsIterableWithSize.iterableWithSize(2));	54.25	0	0
46	9	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(3,result.size());	54.25	0	0
47	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(KoreanPos.Noun,tokens.get(0).getPos());	210.92	0	0
47	1	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals(3,tokens.size());	210.92	0	0
47	2	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(text.contains("STR"));	210.92	0	0
47	3	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	"assertDoesNotThrow(()->{
});"	210.92	0	0
47	4	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.stream().anyMatch(token->token.getText().equals("STR")));	210.92	0	0
47	5	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertNotEquals(5,tokens.size());	210.92	0	0
47	6	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.isEmpty());	210.92	0	0
47	7	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertTrue(tokens.size()>2);	210.92	0	0
47	8	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertEquals("STR",tokens.get(1).getText());	210.92	0	0
47	9	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	assertEquals("STR",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());	assertFalse(tokens.stream().anyMatch(token->token.getText().equals("STR")));	210.92	0	0
48	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(userProcessor.isStarted());	173.05	0	0
48	1	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(loggerinstanceofLogger);	173.05	0	0
48	2	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.size()>=2);	173.05	0	0
48	3	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(userProcessors.values().iterator().next().isStarted());	173.05	0	0
48	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionManager);	173.05	0	0
48	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(connectionMonitorinstanceofConnectionMonitor);	173.05	0	0
48	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(reconnectManager);	173.05	0	0
48	7	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertSame(connectionManager,taskScanner);	173.05	0	0
48	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(shutdown());	173.05	0	0
48	9	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(connectionMonitor);	173.05	0	0
48	10	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(logger.hasWarning());	173.05	0	0
49	0	rhwayfun/spring-boot-rocketmq-starter	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getDefaultTopicQueueNum()>0);	57.4	0	0
49	1	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getMaxMessageSize()>0);	57.4	0	0
49	2	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(!getProducer().getInstanceName().isEmpty());	57.4	0	0
49	3	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getSendMsgTimeout()>0);	57.4	0	0
49	4	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getCompressMsgBodyOverHowmuch()<=1024);	57.4	0	0
49	5	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertTrue(getProducer().getRetryTimesWhenSendFailed()<=5);	57.4	0	0
49	6	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotNull(getProducer());	57.4	0	0
49	7	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(TEST_NAME_SERVER,getProducer().getNameServerAddress());	57.4	0	0
49	8	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertEquals(TEST_PRODUCER_GROUP,getProducer().getProducerGroup());	57.4	0	0
49	9	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	assertTrue(this.context.containsBean("STR"));	assertNotEquals(ServiceState.RUNNING,getProducer().getServiceState());	57.4	0	0
0	0	OpenLiberty/ci.common	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertSame(tempTextFile,configFile);	55.9	0	0
0	1	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotSame(tempTextFile,configFile);	55.9	0	0
0	2	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertEquals(tempTextFile,configFile);	55.9	0	0
0	3	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNull(configFile);	55.9	0	0
0	4	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile,configFile);	55.9	0	0
0	5	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	55.9	0	0
0	6	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertTrue(configFile.exists());	55.9	1	0
0	7	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertFalse(configFile.exists());	55.9	0	0
0	8	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertArrayEquals(tempTextFile.getName().toCharArray(),configFile.getName().toCharArray());	55.9	0	0
0	9	/	DevUtilTest	testGetFileFromConfigDirectory	assertTrue(configFile.exists());	assertNotNull(configFile);	55.9	0	0
1	0	nidi3/graphviz-java	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertThrows(NullPointerException.class,()->FOCAL(null));	91.3	0	0
1	1	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertNotEquals(attrs(attr(SHAPE,RECORD),attr(LABEL,String.join("STR",newString[]{"STR"}))),FOCAL(of("STR")));	91.3	0	0
1	2	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertNotEquals(attrs(attr(SHAPE,RECTANGLE),attr(LABEL,"STR")),FOCAL(of()).getAttr(LABEL));	91.3	0	0
1	3	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertEquals(attrs(attr(SHAPE,RECORD),attr(LABEL,String.join("STR",newString[]{}))),FOCAL(of()));	91.3	0	0
1	4	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertNotSame(attrs(attr(SHAPE,RECTANGLE),attr(LABEL,"STR")),FOCAL(of("STR")));	91.3	0	0
1	5	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertNull(FOCAL(of()).getAttr(SHAPE));	91.3	0	0
1	6	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertTrue(FOCAL(of("STR")).hasAttr(LABEL));	91.3	0	0
1	7	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertFalse(FOCAL(of()).hasAttr(LABEL));	91.3	0	0
1	8	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertArrayEquals(newString[]{SHAPE,LABEL});	91.3	0	0
1	9	/	RecordsTest	of	assertEquals(attrs(attr("STR","STR"),attr("STR","STR")),Records.of("STR","STR","STR"));	assertNotNull(FOCAL(of()));	91.3	0	0
2	0	nidi3/graphviz-java	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertFalse(zigzag.contains(10));	169.29	0	0
2	1	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotEquals(5,zigzag.size());	169.29	0	0
2	2	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertEquals(0,zigzag.size());	169.29	0	0
2	3	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(zigzag.contains(4));	169.29	0	0
2	4	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertTrue(zigzaginstanceofZigzag);	169.29	0	0
2	5	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotNull(zigzag);	169.29	0	0
2	6	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertNotSame(zigzag1,zigzag2);	169.29	0	0
2	7	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertFalse(zigzag.isEmpty());	169.29	0	0
2	8	/	FillStyleTest	zigzag	assertEquals(map("STR","STR"),FillStyle.zigzag().values);	assertArrayEquals(2,3});	169.29	0	0
3	0	rockagen/commons-lib	OPLogTest	testDescription	assertEquals("STR",value);	assertArrayEquals(expectedArray,actualArray);	55.61	0	0
3	1	/	OPLogTest	testDescription	assertEquals("STR",value);	assertThat(value,CoreMatchers.is(expectedValue));	55.61	0	0
3	2	/	OPLogTest	testDescription	assertEquals("STR",value);	assertTrue(condition);	55.61	0	0
3	3	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNull(object);	55.61	0	0
3	4	/	OPLogTest	testDescription	assertEquals("STR",value);	assertFalse(condition);	55.61	0	0
3	5	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotSame(expectedObject,actualObject);	55.61	0	0
3	6	/	OPLogTest	testDescription	assertEquals("STR",value);	assertSame(expectedObject,actualObject);	55.61	0	0
3	7	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotEquals("STR","STR");	55.61	0	0
3	8	/	OPLogTest	testDescription	assertEquals("STR",value);	assertEquals("STR","STR");	55.61	0	0
3	9	/	OPLogTest	testDescription	assertEquals("STR",value);	assertNotNull(object);	55.61	0	0
4	0	rockagen/commons-lib	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotEquals("STR",obj.getName());	54.57	0	0
4	1	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertFalse(map.isEmpty());	54.57	0	0
4	2	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertTrue(paramsMap.size()>0);	54.57	0	0
4	3	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNull(obj.getEmail());	54.57	0	0
4	4	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertArrayEquals(newObject[]{"STR","STR","STR","STR"},paramsMap.keySet().toArray());	54.57	0	0
4	5	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertSame(TestVo.class,obj.getClass());	54.57	0	0
4	6	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals("STR",obj.getAddr());	54.57	0	0
4	7	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertTrue(map.containsKey("STR"));	54.57	0	0
4	8	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertEquals(21,obj.getAge());	54.57	1	0
4	9	/	ReflexUtilTest	testGetInstance	assertEquals(21,obj.getAge());	assertNotNull(obj);	54.57	0	0
5	0	sofastack/sofa-bolt	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNull(someObject);	87.06	0	0
5	1	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(value>=min&&value<=max);	87.06	0	0
5	2	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someBooleanValue);	87.06	0	0
5	3	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertFalse(someBooleanValue);	87.06	0	0
5	4	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotEquals(expectedObject,actualObject);	87.06	0	0
5	5	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertNotNull(someObject);	87.06	0	0
5	6	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertEquals(expectedObject,actualObject);	87.06	0	0
5	7	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertTrue(someCondition);	87.06	0	0
5	8	/	GlobalSwitchTest	testDefaultvalue	assertFalse(client1.isConnectionMonitorSwitchOn());	assertArrayEquals(expectedArray,actualArray);	87.06	0	0
6	0	sofastack/sofa-bolt	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(1,btUrl.getProtocol());	92.76	0	0
6	1	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals("STR",btUrl.getSerializeType());	92.76	0	0
6	2	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals("STR",btUrl.getIp());	92.76	0	0
6	3	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotSame(parser,null);	92.76	0	0
6	4	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertTrue(url.contains("STR"));	92.76	0	0
6	5	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotEquals(btUrl,null);	92.76	0	0
6	6	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertFalse(url.isEmpty());	92.76	0	0
6	7	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(3000,btUrl.getTimeout());	92.76	0	0
6	8	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertEquals(2000,btUrl.getConnectTimeout());	92.76	0	0
6	9	/	RpcAddressParserTest	testParserConnectTimeout	assertEquals("STR",btUrl.getIp());	assertNotNull(btUrl);	92.76	0	0
7	0	sofastack/sofa-bolt	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd2)instanceofRpcRequestProcessor);	101.15	0	0
7	1	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(processorManager.getDefaultProcessor(),processorManager.getProcessor(null));	101.15	0	0
7	2	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertSame(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	101.15	0	0
7	3	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getDefaultProcessor());	101.15	0	0
7	4	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertTrue(processorManager.getProcessor(cmd1)instanceofRpcRequestProcessor);	101.15	0	0
7	5	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	???;	101.15	0	0
7	6	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd1));	101.15	0	0
7	7	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertNotNull(processorManager.getProcessor(cmd2));	101.15	0	0
7	8	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor2,processorManager.getProcessor(cmd2));	101.15	0	0
7	9	/	ProcessorManagerTest	testRegisterProcessor	assertEquals(processorManager.getProcessor(cmd1),rpcRequestProcessor2);	assertEquals(rpcRequestProcessor1,processorManager.getProcessor(cmd1));	101.15	0	0
8	0	Yubico/yubico-java-client	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertTrue(response.getStatus()==ResponseStatus.SUCCESS);	52.71	0	0
8	1	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertArrayEquals(newbyte[]{1,1,0,0},response.getStatus().toByteArray());	52.71	0	0
8	2	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.ERROR,response.getStatus());	52.71	0	0
8	3	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotEquals(ResponseStatus.TOO_MANY_REQUESTS,response.getStatus());	52.71	0	0
8	4	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotNull(response.getStatus());	52.71	0	0
8	5	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertEquals(ResponseStatus.OUTPUT,response.getStatus());	52.71	0	0
8	6	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNotSame(ResponseStatus.REPLAYED_OTP,response.getStatus());	52.71	0	0
8	7	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertNull(response.getError());	52.71	0	0
8	8	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertSame(ResponseStatus.NO_SUCH_CLIENT,response.getStatus());	52.71	0	0
8	9	/	YubicoClientTest	testBadSignature	assertEquals(ResponseStatus.BAD_SIGNATURE,response.getStatus());	assertFalse(response.getStatus()==ResponseStatus.REPLAYED_OTP);	52.71	0	0
9	0	Yubico/yubico-java-client	YubicoClientTest	testBadOTP	assertNotNull(response);	assertArrayEquals(0x02,0x03});	45.67	0	0
9	1	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertTrue(response.isSuccess());	45.67	0	0
9	2	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotNull(response.getPublicId());	45.67	0	0
9	3	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNull(response.getErrorMessage());	45.67	0	0
9	4	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertEquals("STR",response.getStatus());	45.67	0	0
9	5	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertSame(client,response.getClient());	45.67	0	0
9	6	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotSame(null,response.getRequest());	45.67	0	0
9	7	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals("STR",response.getStatus());	45.67	0	0
9	8	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertNotEquals(0,response.getTimestamp());	45.67	0	0
9	9	/	YubicoClientTest	testBadOTP	assertNotNull(response);	assertFalse(response.isRetryable());	45.67	0	0
10	0	adlnet/jxapi	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertFalse(expected.isEmpty());	44.28	0	0
10	1	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotSame(expected,actual);	44.28	0	0
10	2	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertEquals(expected,actual);	44.28	0	0
10	3	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotNull(actual);	44.28	1	0
10	4	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertSame(expected,actual);	44.28	0	0
10	5	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertTrue(expected.equals(actual));	44.28	0	0
10	6	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	44.28	0	0
10	7	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	44.28	0	0
10	8	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNull(actual);	44.28	0	0
10	9	/	ContentActivitiesTest	testSetCategory	assertNotNull(actual);	assertNotEquals(expected,actual);	44.28	0	0
11	0	adlnet/jxapi	ScoreTest	testSerialize	assertNotNull(actual);	assertNull(actual.getAsJsonObject().get("STR"));	49.11	0	0
11	1	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotNull(actual);	49.11	1	0
11	2	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MAX,actual.getAsJsonObject().get("STR").getAsInt());	49.11	0	0
11	3	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(RAW,actual.getAsJsonObject().get("STR").getAsInt());	49.11	0	0
11	4	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(MIN,actual.getAsJsonObject().get("STR").getAsInt());	49.11	0	0
11	5	/	ScoreTest	testSerialize	assertNotNull(actual);	assertNotEquals(0,actual.getAsJsonObject().entrySet().size());	49.11	0	0
11	6	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actual.isJsonObject());	49.11	0	0
11	7	/	ScoreTest	testSerialize	assertNotNull(actual);	assertEquals(SCALED,actual.getAsJsonObject().get("STR").getAsInt());	49.11	0	0
11	8	/	ScoreTest	testSerialize	assertNotNull(actual);	assertTrue(actualinstanceofJsonObject);	49.11	0	0
12	0	adlnet/jxapi	VerbTest	testSetDisplay	assertNotNull(actual);	assertTrue(expected.containsKey("STR"));	45.43	0	0
12	1	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertFalse(expected.isEmpty());	45.43	0	0
12	2	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotSame(expected,actual);	45.43	0	0
12	3	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertEquals(expected,actual);	45.43	0	0
12	4	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertArrayEquals(expected.keySet().toArray(),actual.keySet().toArray());	45.43	0	0
12	5	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotNull(actual);	45.43	1	0
12	6	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertSame(expected,actual);	45.43	0	0
12	7	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected.size(),actual.size());	45.43	0	0
12	8	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNull(actual);	45.43	0	0
12	9	/	VerbTest	testSetDisplay	assertNotNull(actual);	assertNotEquals(expected,actual);	45.43	0	0
13	0	adlnet/jxapi	StatementTest	testGetId	assertNotNull(actual);	assertTrue(condition);	45.35	0	0
13	1	/	StatementTest	testGetId	assertNotNull(actual);	assertEquals(expected,actual);	45.35	0	0
13	2	/	StatementTest	testGetId	assertNotNull(actual);	assertFalse(condition);	45.35	0	0
13	3	/	StatementTest	testGetId	assertNotNull(actual);	assertNull(object);	45.35	0	0
13	4	/	StatementTest	testGetId	assertNotNull(actual);	assertNotSame(expected,actual);	45.35	0	0
13	5	/	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.containsString(expected));	45.35	0	0
13	6	/	StatementTest	testGetId	assertNotNull(actual);	assertThat(actual,Matchers.is(expected));	45.35	0	0
13	7	/	StatementTest	testGetId	assertNotNull(actual);	assertSame(expected,actual);	45.35	0	0
13	8	/	StatementTest	testGetId	assertNotNull(actual);	assertNotEquals(expected,actual);	45.35	0	0
13	9	/	StatementTest	testGetId	assertNotNull(actual);	assertNotNull(object);	45.35	0	0
14	0	TooTallNate/Java-WebSocket	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertTrue(frame.isFin());	59.63	0	0
14	1	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotNull(frame.isFin());	59.63	0	0
14	2	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertSame(true,frame.isFin());	59.63	0	0
14	3	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertEquals(true,frame.isFin());	59.63	0	0
14	4	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertArrayEquals(newboolean[]{true},newboolean[]{frame.isFin()});	59.63	0	0
14	5	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotEquals(false,frame.isFin());	59.63	0	0
14	6	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotEquals(true,frame.isFin());	59.63	0	0
14	7	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertFalse(frame.isFin());	59.63	0	0
14	8	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNull(frame.isFin());	59.63	0	0
14	9	/	FramedataImpl1Test	testSetters	assertEquals("STR",false,frame.isFin());	assertNotSame(false,frame.isFin());	59.63	0	0
15	0	orientechnologies/orientdb	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertFalse(qResult.isEmpty());	213.21	0	0
15	1	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotNull(qResult);	213.21	0	0
15	2	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertArrayEquals(newODocument[0],qResult.toArray());	213.21	0	0
15	3	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals("STR",qResult.get(0).field("STR"));	213.21	0	0
15	4	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.size());	213.21	1	0
15	5	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertEquals(1,qResult.get(0).field("STR"));	213.21	0	0
15	6	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotEquals(0,qResult.size());	213.21	0	0
15	7	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertSame(qResult,db.command(newOCommandSQL("STR")).execute());	213.21	0	0
15	8	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertTrue(!qResult.isEmpty());	213.21	0	0
15	9	/	OMatchStatementExecutionTest	testAliasesWithSubquery	assertEquals(1,qResult.size());	assertNotSame(db.command(newOCommandSQL("STR")).execute(),qResult);	213.21	0	0
16	0	orientechnologies/orientdb	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertTrue(names.contains("STR"));	380.01	1	0
16	1	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotNull(names);	380.01	0	0
16	2	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotEquals(2,names.size());	380.01	0	0
16	3	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertArrayEquals("foo.bar",""});	380.01	0	0
16	4	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertFalse(names.contains("STR"));	380.01	0	0
16	5	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNull(names);	380.01	0	0
16	6	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertEquals(3,names.size());	380.01	0	0
16	7	/	OElementTest	testGetSetProperty	assertTrue(names.contains("STR"));	assertNotEquals(4,names.size());	380.01	0	0
17	0	orientechnologies/orientdb	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertTrue(condition);	80.9	0	0
17	1	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertEquals("STR",value);	80.9	0	0
17	2	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertFalse(condition);	80.9	0	0
17	3	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertThat(actualValue,Matchers.equalTo(expectedValue));	80.9	0	0
17	4	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertSame(expectedObject,actualObject);	80.9	0	0
17	5	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotEquals("STR",value);	80.9	0	0
17	6	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotNull(value);	80.9	0	0
17	7	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertNotSame(notExpectedObject,actualObject);	80.9	0	0
17	8	/	HttpCommandTest	commandWithPosParams	assertEquals(post("STR"+getDatabaseName()+"STR").payload("STR",CONTENT.TEXT).setUserName("STR").setUserPassword("STR").getResponse().getStatusLine().getStatusCode(),200);	assertArrayEquals(expectedArray,actualArray);	80.9	0	0
18	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(ddl.contains("STR"));	465.14	0	0
18	1	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.startsWith("STR"));	465.14	0	0
18	2	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith(indexType+"STR"));	465.14	0	0
18	3	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertNotNull(ddl);	465.14	0	0
18	4	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith(className+"STR"));	465.14	0	0
18	5	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains(indexName));	465.14	0	0
18	6	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.endsWith("STR"));	465.14	0	0
18	7	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains("STR"+field+"STR"));	465.14	0	0
18	8	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertTrue(ddl.contains("STR"));	465.14	0	0
18	9	/	OPropertyMapIndexDefinitionTest	testCreateDDLByKey	assertEquals(ddl,"STR");	assertFalse(ddl.isEmpty());	465.14	0	0
19	0	orientechnologies/orientdb	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertTrue(v>0.0f);	254.57	0	0
19	1	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotSame(OBJECT,v);	254.57	0	0
19	2	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertSame(OBJECT,v);	254.57	0	0
19	3	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotNull(v);	254.57	0	0
19	4	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(floatSerializer,v);	254.57	0	0
19	5	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertFalse(v<=0.0f);	254.57	0	0
19	6	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNotEquals(3.14f,v);	254.57	0	0
19	7	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertArrayEquals(newfloat[]{1.0f,2.0f,3.0f},newfloat[]{1.0f,2.0f,3.0f});	254.57	0	0
19	8	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertNull(v);	254.57	0	0
19	9	/	FloatSerializerTest	testSerializeNative	assertEquals(v,OBJECT);	assertEquals(v,OBJECT);	254.57	1	0
20	0	orientechnologies/orientdb	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertArrayEquals(newboolean[]{},newboolean[]{});	258.33	0	0
20	1	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotNull(doc.isDirty());	258.33	0	0
20	2	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	258.33	0	0
20	3	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	258.33	1	0
20	4	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNull(doc.isDirty());	258.33	0	0
20	5	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	258.33	0	0
20	6	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertSame(Boolean.FALSE,doc.isDirty());	258.33	0	0
20	7	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotSame(Boolean.TRUE,doc.isDirty());	258.33	0	0
20	8	/	TrackedSetTest	testRemoveNotificationThree	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	258.33	0	0
21	0	orientechnologies/orientdb	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(db.existsClass("STR"));	247.65	0	0
21	1	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.hasNext());	247.65	0	0
21	2	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNull(r.current());	247.65	0	0
21	3	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(4,db.countClass("STR"));	247.65	0	0
21	4	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(db.newInstance());	247.65	0	0
21	5	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(db.isClosed());	247.65	0	0
21	6	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.hasNext());	247.65	0	0
21	7	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals("STR",r.get(0).field("STR"));	247.65	0	0
21	8	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertSame(OLegacyResultSet.class,r.getClass());	247.65	0	0
21	9	/	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(3,r.size());	247.65	0	0
22	0	orientechnologies/orientdb	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	???;	68.21	0	0
23	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.containsKey("STR"));	112.13	0	0
23	1	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertEquals("STR",env.get("STR"));	112.13	0	0
23	2	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.get("STR").startsWith("STR"));	112.13	0	0
23	3	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.get("STR").endsWith("STR"));	112.13	0	0
23	4	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env.get("STR"));	112.13	0	0
23	5	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertFalse(env.get("STR").isEmpty());	112.13	0	0
23	6	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertTrue(env.containsKey("STR"));	112.13	0	0
23	7	/	CiEnvironmentTest	recognises_circle	assertEquals("STR",CIEnvironment.detect(env).getCiName());	assertNotNull(env);	112.13	0	0
24	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertSame(CIEnvironment.class,ci.getClass());	88.58	0	0
24	1	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(0,env.size());	88.58	0	0
24	2	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(env.isEmpty());	88.58	0	0
24	3	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNull(ci);	88.58	0	0
24	4	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(0,env.size());	88.58	0	0
24	5	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotNull(ci);	88.58	0	0
24	6	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotSame(CIEnvironment.class,ci.getClass());	88.58	0	0
24	7	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(newString[]{},env.keySet().toArray());	88.58	0	0
24	8	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertArrayEquals(newString[]{},env.keySet().toArray());	88.58	0	0
24	9	/	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertTrue(env.isEmpty());	88.58	0	0
25	0	cucumber-ltd/cucumber-pro-plugin-jvm	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertTrue(config.toYaml("STR").contains("STR"));	103.85	0	0
25	1	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertArrayEquals(yaml.toCharArray(),config.toYaml("STR").toCharArray());	103.85	0	0
25	2	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertSame(yaml,config.toYaml("STR"));	103.85	0	0
25	3	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertThat(config.toYaml("STR"),CoreMatchers.containsStringIgnoringCase("STR"));	103.85	0	0
25	4	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertEquals(yaml,config.toYaml("STR"));	103.85	1	0
25	5	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotEquals("STR",config.toYaml("STR"));	103.85	0	0
25	6	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotSame("STR",config.toYaml("STR"));	103.85	0	0
25	7	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertFalse(config.toYaml("STR").isEmpty());	103.85	0	0
25	8	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNull(null);	103.85	0	0
25	9	/	YamlConfigLoaderTest	merges	assertEquals(yaml,config.toYaml("STR"));	assertNotNull(config.toYaml("STR"));	103.85	0	0
26	0	tradier/dropwizard-raven	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertArrayEquals(newObject[]{"STR"},newObject[]{factory.getDsn()});	43.52	0	0
26	1	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertTrue(factory.getDsn().startsWith("STR"));	43.52	0	0
26	2	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotNull(factory.getDsn());	43.52	0	0
26	3	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotEquals("STR",factory.getDsn());	43.52	0	0
26	4	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertFalse(factory.getDsn().isEmpty());	43.52	0	0
26	5	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertThat(factory.getDsn(),CoreMatchers.containsString("STR"));	43.52	0	0
26	6	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertEquals("STR",factory.getDsn());	43.52	0	0
26	7	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertSame("STR",factory.getDsn());	43.52	0	0
26	8	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNotSame("STR",factory.getDsn());	43.52	0	0
26	9	/	RavenAppenderFactoryTest	hasValidDefaults	assertNull("STR",factory.getDsn());	assertNull(factory.getDsn());	43.52	0	0
27	0	arnohaase/a-foundation	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.containsKey(key1));	50.25	0	0
27	1	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(AEquality.IDENTITY,map.getEquality());	50.25	0	0
27	2	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.values().isEmpty());	50.25	0	0
27	3	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertSame(key1,key3);	50.25	0	0
27	4	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotSame(key1,key2);	50.25	0	0
27	5	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(map.isEmpty());	50.25	0	0
27	6	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertFalse(map.containsKey(key2));	50.25	0	0
27	7	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertNotNull(map);	50.25	0	0
27	8	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertTrue(mapinstanceofAHashMap);	50.25	0	0
27	9	/	AHashMapTest	testEqualityIdentity	assertEquals(key1,key2);	assertEquals(0,map.size());	50.25	0	0
28	0	arnohaase/a-foundation	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotSame(coll,result);	45.34	0	0
28	1	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertTrue(result.isEmpty());	45.34	0	0
28	2	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertFalse(result.isEmpty());	45.34	0	0
28	3	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.hasSize(expectedSize));	45.34	0	0
28	4	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotNull(result);	45.34	0	0
28	5	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNull(result);	45.34	0	0
28	6	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertEquals(expectedSize,result.size());	45.34	0	0
28	7	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertThat(result,Matchers.anyOf(Matchers.empty(),Matchers.hasSize(expectedSize)));	45.34	0	0
28	8	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertSame(coll,result);	45.34	0	0
28	9	/	ACollectionHelperTest	testFilter	assertEquals(Arrays.<String>asList(),ACollectionHelper.filter(Arrays.<String>asList(),len1));	assertNotEquals(unexpectedSize,result.size());	45.34	0	0
29	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertFalse(a.equals(b));	73.05	0	0
29	1	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotSame(a,b);	73.05	0	0
29	2	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(a.getCells(),b.getCells());	73.05	0	0
29	3	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(a,b);	73.05	0	0
29	4	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertSame(a,b);	73.05	0	0
29	5	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNull(b);	73.05	0	0
29	6	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	73.05	1	0
29	7	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	"assertThrows(Exception.class,()->{
???;
});"	73.05	0	0
29	8	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	73.05	0	0
29	9	/	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a);	73.05	0	0
30	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(false,matcher.lookingAt());	85.77	0	0
30	1	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(true,matcher.lookingAt());	85.77	0	0
30	2	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	85.77	1	0
30	3	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(false,matcher.lookingAt());	85.77	0	0
30	4	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotSame(true,matcher.lookingAt());	85.77	0	0
30	5	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(true,matcher.lookingAt());	85.77	0	0
30	6	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(false,matcher.lookingAt());	85.77	0	0
30	7	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotEquals(true,matcher.lookingAt());	85.77	0	0
30	8	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.lookingAt());	85.77	0	0
30	9	/	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(false,matcher.lookingAt());	85.77	0	0
31	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.isRecognized());	95.59	0	0
31	1	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(null,jāmāk.isRecognized());	95.59	0	0
31	2	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotSame(false,jāmāk.isRecognized());	95.59	0	0
31	3	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertEquals(true,jāmāk.isRecognized());	95.59	0	0
31	4	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(false,jāmāk.isRecognized());	95.59	0	0
31	5	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNull(jāmāk);	95.59	0	0
31	6	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertSame(true,jāmāk.isRecognized());	95.59	0	0
31	7	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	95.59	1	0
31	8	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	95.59	0	0
31	9	/	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertArrayEquals(newboolean[]{true},newboolean[]{jāmāk.isRecognized()});	95.59	0	0
32	0	PeterisP/morphology	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(false,w.isRecognized());	80.51	0	0
32	1	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	80.51	1	0
32	2	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals(true,w.isRecognized());	80.51	0	0
32	3	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	80.51	0	0
32	4	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertArrayEquals(expectedArray,resultArray);	80.51	0	0
32	5	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotSame(obj1,obj2);	80.51	0	0
32	6	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.isRecognized());	80.51	0	0
32	7	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertSame(obj1,obj1);	80.51	0	0
32	8	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNull(null);	80.51	0	0
32	9	/	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(expected,actual);	80.51	0	0
33	0	nidi3/raml-loader	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(fetcher.fetchResource("STR",System.currentTimeMillis()));	60.14	0	0
33	1	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(resource);	60.14	0	0
33	2	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertTrue(file.lastModified()>ifModifiedSince);	60.14	0	0
33	3	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(file.lastModified()>ifModifiedSince);	60.14	0	0
33	4	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertEquals("STR",resource.getFile());	60.14	0	0
33	5	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotEquals("STR",resource.getFile());	60.14	0	0
33	6	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertFalse(file.exists());	60.14	0	0
33	7	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertTrue(file.exists());	60.14	0	0
33	8	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNull(resource);	60.14	0	0
33	9	/	LoaderTest	fileNok	assertEquals("STR",resource.getProtocol());	assertNotNull(fetcher.fetchResource("STR",System.currentTimeMillis()));	60.14	0	0
34	0	fluent/fluent-logger-java	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	49.26	0	0
34	1	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger.getSender());	49.26	0	0
34	2	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals("STR",System.getProperty(Config.FLUENT_SENDER_CLASS));	49.26	0	0
34	3	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotEquals(FluentLogger.getLogger("STR"),logger);	49.26	0	0
34	4	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.hasTag("STR"));	49.26	0	0
34	5	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getFactory());	49.26	0	0
34	6	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotSame(logger,FluentLogger.getLogger("STR"));	49.26	0	0
34	7	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertFalse(logger.hasTag("STR"));	49.26	0	0
34	8	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertEquals("STR",logger.getTag());	49.26	0	0
34	9	/	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertSame(sysLogger,logger.getLogger());	49.26	0	0
35	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(testTarget001,testTarget003);	28.87	0	0
35	1	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(true);	28.87	0	0
35	2	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertFalse(false);	28.87	0	0
35	3	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(5,2+3);	28.87	0	0
35	4	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(testTarget001);	28.87	0	0
35	5	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(testTarget001,testTarget002);	28.87	0	0
35	6	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals(parameterReplacer,testTarget001.getParameterReplacer());	28.87	0	0
35	7	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals("STR","STR");	28.87	0	0
35	8	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertThrows(NullPointerException.class,()->testTarget001.getParameterReplacer().doSomething());	28.87	0	0
35	9	/	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(mockLog);	28.87	0	0
36	0	amlinv/stat-collection-utils	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertTrue(focal.getTargetDescription().startsWith("STR"));	27.84	0	0
36	1	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotEquals("STR",focal.getTargetDescription());	27.84	0	0
36	2	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertFalse(focal.getTargetDescription().endsWith("STR"));	27.84	0	0
36	3	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotNull(focal.getTargetDescription());	27.84	0	0
36	4	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertSame("STR",focal.getTargetDescription());	27.84	0	0
36	5	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertEquals("STR",focal.getTargetDescription());	27.84	0	0
36	6	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNotSame("STR",focal.getTargetDescription());	27.84	0	0
36	7	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertNull(null);	27.84	0	0
36	8	/	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	assertEquals("STR",this.factory.getTargetDescription());	assertArrayEquals(newString[]{"STR"},newString[]{focal.getTargetDescription()});	27.84	0	0
37	0	hazelcast/hazelcast-simulator	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotSame(methods.get(0),methods.iterator().next());	63.52	0	0
37	1	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotNull(methods.get(0));	63.52	0	0
37	2	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertSame(methods.get(0),methods.iterator().next());	63.52	0	0
37	3	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertTrue(methods.size()==0);	63.52	0	0
37	4	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertEquals(1,methods.size());	63.52	0	0
37	5	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotEquals(0,methods.size());	63.52	0	0
37	6	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNotEquals(format("STR",clazz.getName(),annotationClazz.getName()),newReflectionException().getMessage());	63.52	0	0
37	7	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertNull(methods.get(0));	63.52	0	0
37	8	/	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	assertEquals("STR",method.getName());	assertFalse(methods.size()==0);	63.52	0	0
38	0	hazelcast/hazelcast-simulator	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertFalse(bind0(object,"STR","STR"));	66.12	0	0
38	1	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertEquals(true,bind0(object,"STR","STR"));	66.12	0	0
38	2	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNull(bind0(object,"STR","STR"));	66.12	0	0
38	3	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertSame(expectedObject,bind0(object,"STR","STR"));	66.12	0	0
38	4	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertThrows(BindException.class,()->bind0(object,"STR","STR"));	66.12	0	0
38	5	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotSame(unexpectedObject,bind0(object,"STR","STR"));	66.12	0	0
38	6	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertTrue(bind0(object,"STR","STR"));	66.12	0	0
38	7	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertThat(bind0(object,"STR","STR"),CoreMatchers.is(true));	66.12	0	0
38	8	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotNull(bind0(object,"STR","STR"));	66.12	0	0
38	9	/	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	assertTrue(bind0(testObject,"STR","STR"+NEW_LINE));	assertNotEquals(false,bind0(object,"STR","STR"));	66.12	0	0
39	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertSame(words,focalMethodName(words));	380.99	0	0
39	1	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR","STR","STR"},focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))).split("STR"));	380.99	0	0
39	2	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertFalse(focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))).endsWith("STR"));	380.99	0	0
39	3	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNull(focalMethodName(null));	380.99	0	0
39	4	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	???;	380.99	0	0
39	5	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertTrue(focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))).startsWith("STR"));	380.99	0	0
39	6	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotNull(focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))));	380.99	0	0
39	7	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertEquals("STR",focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))));	380.99	0	0
39	8	/	OpenKoreanProcessorJavaTest	testDetokenizer	assertEquals("STR",OpenKoreanTextProcessorJava.detokenize(words));	assertNotEquals("STR",focalMethodName(newArrayList<>(Arrays.asList("STR","STR","STR","STR","STR","STR","STR"))));	380.99	0	0
40	0	AlejandroRivera/embedded-rabbitmq	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotEquals(extractor,newBasicExtractor(config));	100.23	0	0
40	1	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertSame(extractor,extractor);	100.23	0	0
40	2	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newBasicExtractor(config));	100.23	0	0
40	3	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertTrue(config.shouldCachedDownload());	100.23	0	0
40	4	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.hashCode(),newBasicExtractor(config).hashCode());	100.23	0	0
40	5	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotNull(extractor);	100.23	0	0
40	6	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertFalse(config.shouldCachedDownload());	100.23	0	0
40	7	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newCachedExtractor(extractor,config));	100.23	0	0
40	8	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertEquals(extractor.getClass(),CachedExtractor.class);	100.23	0	0
40	9	/	ExtractorFactoryTest	withCaching	assertTrue(extractor.getClass().equals(CachedExtractor.class));	assertNotSame(extractor,newExtractorFactory(builder.build()).getNewInstance());	100.23	0	0
41	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(3).getValue());	96.88	0	0
41	1	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotEquals("STR",testServer.cookiesToSend.get(0).getValue());	96.88	0	0
41	2	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(1).getValue());	96.88	0	0
41	3	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(0).getValue());	96.88	0	0
41	4	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(testServer.cookiesToSend.isEmpty());	96.88	0	0
41	5	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(testServer.cookiesToSend.size()==4);	96.88	0	0
41	6	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals("STR",testServer.cookiesToSend.get(2).getValue());	96.88	0	0
41	7	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotSame(testServer,httpclient);	96.88	0	0
41	8	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(testServer);	96.88	0	0
41	9	/	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(httpclient);	96.88	0	0
42	0	trautonen/coveralls-maven-plugin	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties.getProperty("STR"));	99.6	0	0
42	1	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.getProperty("STR").startsWith("STR"));	99.6	0	0
42	2	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNull(properties.getProperty("STR"));	99.6	0	0
42	3	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotEquals("STR",properties.getProperty("STR"));	99.6	0	0
42	4	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.getProperty("STR").contains("STR"));	99.6	0	0
42	5	/	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertEquals("STR",properties.getProperty("STR"));	99.6	0	0
43	0	trautonen/coveralls-maven-plugin	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertThat(focalClass.getName(),is(equalTo("STR")));	80.25	0	0
43	1	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertArrayEquals(newString[]{"STR"},newString[]{focalClass.getName()});	80.25	0	0
43	2	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertEquals("STR",focalClass.getName());	80.25	0	0
43	3	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertNotEquals("STR",focalClass.getName());	80.25	0	0
43	4	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertTrue("STR".equals(focalClass.getName()));	80.25	0	0
43	5	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertSame("STR",focalClass.getName());	80.25	0	0
43	6	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertNotSame("STR",focalClass.getName());	80.25	0	0
43	7	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertNull(nullNameVariable);	80.25	0	0
43	8	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertFalse("STR".equals(focalClass.getName()));	80.25	0	0
43	9	/	BambooTest	testGetName	assertEquals("STR",newBamboo(env()).getName());	assertNotNull(focalClass.getName());	80.25	0	0
44	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotEquals("STR",accessToken.getSomeValue());	80.69	0	0
44	1	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertEquals("STR",accessToken.getSomeValue());	80.69	0	0
44	2	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotNull(accessToken);	80.69	0	0
44	3	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotSame(expectedObject,actualObject);	80.69	0	0
44	4	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertSame(expectedObject,actualObject);	80.69	0	0
44	5	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNull(accessToken);	80.69	0	0
44	6	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertNotEquals(expectedArray,actualArray);	80.69	0	0
44	7	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertFalse(accessToken.isExpired());	80.69	0	0
44	8	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertTrue(accessToken.isExpired());	80.69	0	0
44	9	/	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	assertTrue(oAuth2AccessToken.getValue()+"STR",oAuth2AccessToken.getValue()==null);	assertArrayEquals(expectedArray,actualArray);	80.69	0	0
45	0	fluenda/ParCEFone	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(collection.contains(element));	51.08	0	0
45	1	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value<otherValue);	51.08	0	0
45	2	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(condition);	51.08	0	0
45	3	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(condition);	51.08	0	0
45	4	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotSame(object1,object2);	51.08	0	0
45	5	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedObject,actualObject);	51.08	0	0
45	6	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertTrue(value>otherValue);	51.08	0	0
45	7	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(expectedString.toLowerCase(),actualString.toLowerCase());	51.08	0	0
45	8	/	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotNull(object);	51.08	0	0
46	0	myabc/markdownj	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown("STR"));	88.97	0	0
46	1	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotNull(m.markdown("STR"));	88.97	0	0
46	2	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertEquals("STR",markdown(null));	88.97	0	0
46	3	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertTrue(m.markdown("STR").endsWith("STR"));	88.97	0	0
46	4	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals(m.markdown("STR"),m.markdown("STR"));	88.97	0	0
46	5	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotSame(text,markdown("STR"));	88.97	0	0
46	6	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertFalse(m.markdown("STR").isEmpty());	88.97	0	0
46	7	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertNotEquals("STR",m.markdown("STR"));	88.97	0	0
46	8	/	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	assertEquals("STR",m.markdown("STR").trim());	assertThrows(NullPointerException.class,()->markdown(null));	88.97	0	0
47	0	retog/wymiwyg-commons-core	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertArrayEquals(newString[]{"STR","STR","STR","STR","STR"},node.getPath().split("STR"));	62.8	0	0
47	1	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotSame("STR",node.getPath());	62.8	0	0
47	2	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotNull(node.getPath());	62.8	0	0
47	3	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals("STR",node.getPath());	62.8	1	0
47	4	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertNotEquals("STR",node.getPath());	62.8	0	0
47	5	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertSame("STR",node.getPath());	62.8	0	0
47	6	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertTrue(node.getPath().startsWith("STR"));	62.8	0	0
47	7	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertEquals(19,node.getPath().length());	62.8	0	0
47	8	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertThrows(NullPointerException.class,()->node.getPath().toLowerCase());	62.8	0	0
47	9	/	MultiPathNodeTest	commonPath	assertEquals("STR",node.getPath());	assertFalse(node.getPath().endsWith("STR"));	62.8	0	0
48	0	vdmeer/execs	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotNull(execs.getAppName());	42.07	0	0
48	1	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertFalse(execs.getAppName().isEmpty());	42.07	0	0
48	2	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotSame(unexpectedAppName,execs.getAppName());	42.07	0	0
48	3	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNull(execs.getAppName());	42.07	0	0
48	4	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertSame(expectedAppName,execs.getAppName());	42.07	0	0
48	5	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertArrayEquals(expectedAppNameArray,execs.getAppName().toCharArray());	42.07	0	0
48	6	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertTrue(execs.getAppName().length()>0);	42.07	0	0
48	7	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertEquals("STR",execs.getAppName());	42.07	1	0
48	8	/	Test_ExecS	testCliAppName	assertEquals("STR",execs.getAppName());	assertNotEquals("STR",execs.getAppName());	42.07	0	0
49	0	jcodec/jcodec	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(0,convertToBytes(4)[0]);	228.57	0	0
49	1	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.toString(convertToBytes(8)));	228.57	0	0
49	2	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertEquals(8,convertToBytes(2).length);	228.57	0	0
49	3	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertFalse(Arrays.equals(convertToBytes(6),newbyte[]{0x00}));	228.57	0	0
49	4	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x09,0x09});	228.57	0	0
49	5	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertArrayEquals(newbyte[]{0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},convertToBytes(1));	228.57	0	0
49	6	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotEquals(-1,convertToBytes(9).length);	228.57	0	0
49	7	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertTrue(Arrays.equals(convertToBytes(3),newbyte[]{0x03,0x00,0x00,0x00}));	228.57	0	0
49	8	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertSame(byte[].class,convertToBytes(5).getClass());	228.57	0	0
49	9	/	EbmlSintTest	testBytePacking	assertArrayEquals(newbyte[]{0x5f,0x3f},convertToBytes(-192));	assertNotSame(0x00,convertToBytes(7)[0]);	228.57	0	0