{
    "projects": [
        {
            "userName": "adlnet",
            "repoName": "jxapi",
            "subRepos": [],
            "commitSHA": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ActivityDefinitionTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 24,
                        "endLn": 74,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String key = \"STR\" ; \n String name = \"STR\" ; \n String description = \"STR\" ; \n HashMap < String , String > nameMap = new HashMap < String , String > ( ) ; \n HashMap < String , String > descriptionMap = new HashMap < String , String > ( ) ; \n nameMap . put ( key , name ) ; \n descriptionMap . put ( key , description ) ; \n activityDefinition = new ActivityDefinition ( nameMap , descriptionMap ) ; \n assertNotNull ( activityDefinition ) ; \n String moreInfo = \"STR\" ; \n activityDefinition . setMoreInfo ( moreInfo ) ; \n String type = \"STR\" ; \n activityDefinition . setType ( type ) ; \n HashMap < String , JsonElement > extensions = new HashMap < String , JsonElement > ( ) ; \n key = \"STR\" ; \n extensions . put ( key , new JsonPrimitive ( 44 ) ) ; \n JsonObject jo = new JsonObject ( ) ; \n jo . addProperty ( \"STR\" , \"STR\" ) ; \n key = \"STR\" ; \n extensions . put ( key , jo ) ; \n activityDefinition . setExtensions ( extensions ) ; \n String interactionType = \"STR\" ; \n activityDefinition . setInteractionType ( interactionType ) ; \n ArrayList < String > correctResponsesPattern = new ArrayList < String > ( ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n correctResponsesPattern . add ( \"STR\" ) ; \n activityDefinition . setCorrectResponsesPattern ( correctResponsesPattern ) ; \n ArrayList < InteractionComponent > choices = new ArrayList < InteractionComponent > ( ) ; \n InteractionComponent e = new InteractionComponent ( ) ; \n String id = \"STR\" ; \n e . setId ( id ) ; \n HashMap < String , String > desc = new HashMap < String , String > ( ) ; \n desc . put ( \"STR\" , \"STR\" ) ; \n e . setDescription ( desc ) ; \n choices . add ( e ) ; \n activityDefinition . setChoices ( choices ) ; \n ArrayList < InteractionComponent > scale = new ArrayList < InteractionComponent > ( ) ; \n scale . add ( e ) ; \n activityDefinition . setScale ( scale ) ; \n ArrayList < InteractionComponent > source = new ArrayList < InteractionComponent > ( ) ; \n source . add ( e ) ; \n activityDefinition . setSource ( source ) ; \n ArrayList < InteractionComponent > target = new ArrayList < InteractionComponent > ( ) ; \n target . add ( e ) ; \n activityDefinition . setTarget ( target ) ; \n ArrayList < InteractionComponent > steps = new ArrayList < InteractionComponent > ( ) ; \n steps . add ( e ) ; \n activityDefinition . setSteps ( steps ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSetType",
                            "startLn": 162,
                            "endLn": 169,
                            "testMethod": "@Test\n public void testSetType ( ) {\n     String expected = \"STR\" ; \n     activityDefinition . setType ( expected ) ; \n     String actual = activityDefinition . getType ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java",
                            "focalName": "getType",
                            "focalStartLn": 119,
                            "focalEndLn": 121,
                            "focalMethod": " public String getType ( ) { \n return type ; \n } "
                        }
                    ]
                },
                {
                    "className": "VerbsTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/VerbsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testVoided",
                            "startLn": 181,
                            "endLn": 186,
                            "testMethod": "@Test\n public void testVoided ( ) {\n     Verb actual = Verbs . voided ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/Verbs.java",
                            "focalName": "voided",
                            "focalStartLn": 88,
                            "focalEndLn": 90,
                            "focalMethod": " public static Verb voided ( ) { \n return createVerb ( \"STR\" ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "SubStatementTest",
                    "classPath": "src/test/java/gov/adlnet/xapi/SubStatementTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 47,
                        "endLn": 86,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n substatement = new SubStatement ( ) ; \n substatement . setTimestamp ( TIME ) ; \n actor = new Agent ( ) ; \n actor . setMbox ( MBOX ) ; \n HashMap < String , String > display = new HashMap < String , String > ( ) ; \n display . put ( \"STR\" , EN_VERB ) ; \n verb = new Verb ( ID , display ) ; \n activity = new Activity ( TEST_IRI ) ; \n substatement . setActor ( actor ) ; \n substatement . setVerb ( verb ) ; \n substatement . setObject ( activity ) ; \n result = new Result ( ) ; \n result . setSuccess ( false ) ; \n substatement . setResult ( result ) ; \n context = new Context ( ) ; \n context . setLanguage ( LANGUAGE ) ; \n substatement . setContext ( context ) ; \n attachments = new ArrayList < Attachment > ( ) ; \n Attachment att = new Attachment ( ) ; \n HashMap < String , String > attDisplay = new HashMap < String , String > ( ) ; \n attDisplay . put ( \"STR\" , \"STR\" ) ; \n att . setDisplay ( attDisplay ) ; \n HashMap < String , String > description = new HashMap < String , String > ( ) ; \n description . put ( \"STR\" , \"STR\" ) ; \n att . setDescription ( description ) ; \n URI usageType = new URI ( \"STR\" ) ; \n att . setUsageType ( usageType ) ; \n String attach = \"STR\" ; \n String contentType = \"STR\" ; \n att . addAttachment ( attach , contentType ) ; \n attachments . add ( att ) ; \n substatement . setAttachments ( attachments ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetTimestamp",
                            "startLn": 98,
                            "endLn": 104,
                            "testMethod": "@Test\n public void testGetTimestamp ( ) {\n     String expected = TIME ; \n     String actual = substatement . getTimestamp ( ) ; \n     assertNotNull(actual);\n}",
                            "oracle": "assertNotNull(actual);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/gov/adlnet/xapi/model/SubStatement.java",
                            "focalName": "getTimestamp",
                            "focalStartLn": 16,
                            "focalEndLn": 18,
                            "focalMethod": " public String getTimestamp ( ) { \n return timestamp ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "orientechnologies",
            "repoName": "orientdb",
            "subRepos": [
                "test-commons",
                "core",
                "client",
                "object",
                "tools",
                "server",
                "security",
                "graphdb",
                "tests",
                "distributed",
                "lucene",
                "jdbc",
                "etl",
                "distribution",
                "distribution-tp2",
                "crashtests"
            ],
            "commitSHA": "2cabb46c9581572b7f46724864f02d9c688070c5",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ODatabaseDocumentTxTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 36,
                        "endLn": 41,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n String url = \"STR\" + ODatabaseDocumentTxTest . class . getSimpleName ( ) ; \n db = new ODatabaseDocumentTx ( url ) . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testReturnDeclaredIntent",
                            "startLn": 226,
                            "endLn": 231,
                            "testMethod": "@Test\n public void testReturnDeclaredIntent ( ) {\n     db . declareIntent ( new OIntentMassiveInsert ( ) ) ; \n     assertNotNull(db.getActiveIntent());\n}",
                            "oracle": "assertNotNull(db.getActiveIntent());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java",
                            "focalName": "getActiveIntent",
                            "focalStartLn": 1043,
                            "focalEndLn": 1048,
                            "focalMethod": "@Override\n public OIntent getActiveIntent ( ) { \n if ( internal == null ) return intent ; \n return internal . getActiveIntent ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OByteBufferUtilsTest",
                    "classPath": "core/src/test/java/com/orientechnologies/common/util/OByteBufferUtilsTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 35,
                        "endLn": 39,
                        "setupMethod": "@Before\n public void setUp ( ) throws Exception { \n buffer1 = ByteBuffer . allocate ( 10 ) ; \n buffer2 = ByteBuffer . allocate ( 10 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSplitShort",
                            "startLn": 41,
                            "endLn": 62,
                            "testMethod": "@Test\n public void testSplitShort ( ) throws Exception {\n     short var = 42 ; \n     buffer1 . position ( 9 ) ; \n     buffer2 . position ( 0 ) ; \n     OByteBufferUtils . splitShortToBuffers ( buffer1 , buffer2 , var ) ; \n     buffer1 . position ( 9 ) ; \n     buffer2 . position ( 0 ) ; \n     short storedVar = OByteBufferUtils . mergeShortFromBuffers ( buffer1 , buffer2 ) ; \n     assertEquals(storedVar,var);\n}",
                            "oracle": "assertEquals(storedVar,var);",
                            "oracleLn": 7,
                            "focalFile": "core/src/main/java/com/orientechnologies/common/util/OByteBufferUtils.java",
                            "focalName": "mergeShortFromBuffers",
                            "focalStartLn": 49,
                            "focalEndLn": 55,
                            "focalMethod": " public static short mergeShortFromBuffers ( final ByteBuffer buffer , final ByteBuffer buffer1 ) { \n short result = 0 ; \n result = ( short ) ( result | ( buffer . get ( ) & MASK ) ) ; \n result = ( short ) ( result << SIZE_OF_BYTE_IN_BITS ) ; \n result = ( short ) ( result | ( buffer1 . get ( ) & MASK ) ) ; \n return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 29,
                        "endLn": 63,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testMaxDepthArrow",
                            "startLn": 604,
                            "endLn": 634,
                            "testMethod": "@Test\n public void testMaxDepthArrow ( ) throws Exception {\n     List < ODocument > qResult = db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n     assertEquals(2,qResult.size());\n}",
                            "oracle": "assertEquals(2,qResult.size());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java",
                            "focalName": "execute",
                            "focalStartLn": 30,
                            "focalEndLn": 30,
                            "focalMethod": " < RET > RET execute ( Object ... iArgs ) ; \n"
                        }
                    ]
                },
                {
                    "className": "OSimpleKeyIndexDefinitionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeMethod",
                        "startLn": 19,
                        "endLn": 22,
                        "setupMethod": "@Before\n public void beforeMethod ( ) { \n simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER , OType . STRING ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testParamCountOneItem",
                            "startLn": 114,
                            "endLn": 119,
                            "testMethod": "@Test\n public void testParamCountOneItem ( ) {\n     final OSimpleKeyIndexDefinition keyIndexDefinition = new OSimpleKeyIndexDefinition ( OType . INTEGER ) ; \n     Assert.assertEquals(keyIndexDefinition.getParamCount(),1);\n}",
                            "oracle": "Assert.assertEquals(keyIndexDefinition.getParamCount(),1);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java",
                            "focalName": "getParamCount",
                            "focalStartLn": 107,
                            "focalEndLn": 109,
                            "focalMethod": " public int getParamCount ( ) { \n return keyTypes . length ; \n } "
                        }
                    ]
                },
                {
                    "className": "ODirtyManagerTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testLink",
                            "startLn": 45,
                            "endLn": 55,
                            "testMethod": "@Test\n public void testLink ( ) {\n     ODocument doc = new ODocument ( ) ; \n     doc . field ( \"STR\" , \"STR\" ) ; \n     ODocument doc2 = new ODocument ( ) ; \n     doc . field ( \"STR\" , doc2 ) ; \n     ODirtyManager manager = ORecordInternal . getDirtyManager ( doc ) ; \n     assertEquals(2,manager.getNewRecords().size());\n}",
                            "oracle": "assertEquals(2,manager.getNewRecords().size());",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java",
                            "focalName": "getNewRecords",
                            "focalStartLn": 63,
                            "focalEndLn": 65,
                            "focalMethod": " public Set < ORecord > getNewRecords ( ) { \n return getReal ( ) . newRecords ; \n } "
                        }
                    ]
                },
                {
                    "className": "OETLFieldTransformerTest",
                    "classPath": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java",
                    "subRepo": "etl",
                    "before": {
                        "setupName": "configureProcessor",
                        "startLn": 47,
                        "endLn": 57,
                        "setupMethod": "@Before\n public void configureProcessor ( ) throws Throwable { \n OLogManager . instance ( ) . installCustomFormatter ( ) ; \n OETLComponentFactory factory = new OETLComponentFactory ( ) . registerLoader ( OETLStubLoader . class ) . registerExtractor ( OETLStubRandomExtractor . class ) ; \n configurator = new OETLProcessorConfigurator ( factory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testExpression",
                            "startLn": 52,
                            "endLn": 64,
                            "testMethod": "@Test\n public void testExpression ( ) {\n     configure ( \"STR\" ) ; \n     proc . execute ( ) ; \n     assertEquals(1,getResult().size());\n}",
                            "oracle": "assertEquals(1,getResult().size());",
                            "oracleLn": 2,
                            "focalFile": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java",
                            "focalName": "execute",
                            "focalStartLn": 172,
                            "focalEndLn": 177,
                            "focalMethod": " public void execute ( ) { \n configure ( ) ; \n begin ( ) ; \n runExtractorAndPipeline ( ) ; \n end ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "OSelectStatementExecutionTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java",
                    "subRepo": "core",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 49,
                        "endLn": 54,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) { \n db = new ODatabaseDocumentTx ( \"STR\" ) ; \n db . create ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLet1Long",
                            "startLn": 2033,
                            "endLn": 2043,
                            "testMethod": "@Test\n public void testLet1Long ( ) {\n     OResultSet result = db . query ( \"STR\" ) ; \n     Assert.assertTrue(result.hasNext());\n}",
                            "oracle": "Assert.assertTrue(result.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                },
                {
                    "className": "TrackedListTest",
                    "classPath": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testAddAllNotificationThree",
                            "startLn": 158,
                            "endLn": 185,
                            "testMethod": "@Test\n public void testAddAllNotificationThree ( ) {\n     final ODocument doc = new ODocument ( ) ; \n     ORecordInternal . unsetDirty ( doc ) ; \n     Assert.assertFalse(doc.isDirty());\n}",
                            "oracle": "Assert.assertFalse(doc.isDirty());",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java",
                            "focalName": "isDirty",
                            "focalStartLn": 156,
                            "focalEndLn": 158,
                            "focalMethod": " public boolean isDirty ( ) { \n return _dirty ; \n } "
                        }
                    ]
                },
                {
                    "className": "OMatchStatementExecutionNewTest",
                    "classPath": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java",
                    "subRepo": "graphdb",
                    "before": {
                        "setupName": "beforeClass",
                        "startLn": 32,
                        "endLn": 66,
                        "setupMethod": "@BeforeClass\n public static void beforeClass ( ) throws Exception { \n db = new ODatabaseDocumentTx ( DB_STORAGE + \"STR\" + DB_NAME ) ; \n db . create ( ) ; \n getProfilerInstance ( ) . startRecording ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n String [ ] [ ] friendList = new String [ ] [ ] { \n { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } , { \n \"STR\" , \"STR\" } } ; \n for ( String [ ] pair : friendList ) { \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( pair [ 0 ] , pair [ 1 ] ) ; \n } db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n db . command ( new OCommandSQL ( \"STR\" ) ) . execute ( ) ; \n initOrgChart ( ) ; \n initTriangleTest ( ) ; \n initEdgeIndexTest ( ) ; \n initDiamondTest ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testFriendsWithNameArrows",
                            "startLn": 595,
                            "endLn": 603,
                            "testMethod": "@Test\n public void testFriendsWithNameArrows ( ) throws Exception {\n     OResultSet qResult = db . query ( \"STR\" ) ; \n     Assert.assertTrue(qResult.hasNext());\n}",
                            "oracle": "Assert.assertTrue(qResult.hasNext());",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java",
                            "focalName": "hasNext",
                            "focalStartLn": 20,
                            "focalEndLn": 21,
                            "focalMethod": "@Override\n boolean hasNext ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "jcodec",
            "repoName": "jcodec",
            "subRepos": [],
            "commitSHA": "6ad0b21222becf19b9465346423eb435dfc32f31",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CollectionsTest",
                    "classPath": "src/test/java/org/jcodec/common/CollectionsTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testIntObjectMap",
                            "startLn": 10,
                            "endLn": 25,
                            "testMethod": "@Test\n public void testIntObjectMap ( ) {\n     IntObjectMap < Integer > test = new IntObjectMap < Integer > ( ) ; \n     test . put ( 24 , 11 ) ; \n     assertEquals(Integer.valueOf(11),test.get(24));\n}",
                            "oracle": "assertEquals(Integer.valueOf(11),test.get(24));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/org/jcodec/common/IntObjectMap.java",
                            "focalName": "get",
                            "focalStartLn": 35,
                            "focalEndLn": 38,
                            "focalMethod": " @ SuppressWarnings ( \"STR\" ) public T get ( int key ) { \n return key >= storage . length ? null : ( T ) storage [ key ] ; \n } "
                        }
                    ]
                },
                {
                    "className": "ModeInfoTest",
                    "classPath": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testUVMode",
                            "startLn": 61,
                            "endLn": 69,
                            "testMethod": "@Test\n public void testUVMode ( ) {\n     MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder ( new int [ ] { \n 144 , 11 , 54 , 157 , 195 , 130 } , new int [ ] { \n 1 , 1 , 1 , 0 , 1 , 1 } ) ; \n     DecodingContext c = new DecodingContext ( ) ; \n     int intraMode = 0 ; \n     Assert.assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));\n}",
                            "oracle": "Assert.assertEquals(5,newModeInfo().readInterIntraUvMode(intraMode,decoder,c));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/org/jcodec/codecs/vpx/vp9/ModeInfo.java",
                            "focalName": "readInterIntraUvMode",
                            "focalStartLn": 250,
                            "focalEndLn": 253,
                            "focalMethod": " public int readInterIntraUvMode ( int yMode , VPXBooleanDecoder decoder , DecodingContext c ) { \n short [ ] [ ] probs = c . getKfUVModeProbs ( ) ; \n return decoder . readTree ( TREE_INTRA_MODE , probs [ yMode ] ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fabric8io",
            "repoName": "fabric8-maven-plugin",
            "subRepos": [
                "core",
                "enricher/api",
                "enricher/standard",
                "enricher/fabric8",
                "generator/api",
                "generator/java-exec",
                "generator/spring-boot",
                "generator/vertx",
                "generator/karaf",
                "generator/wildfly-swarm",
                "generator/quarkus",
                "generator/thorntail-v2",
                "generator/webapp",
                "generator/openliberty",
                "watcher/api",
                "watcher/standard",
                "enricher/deprecated",
                "it"
            ],
            "commitSHA": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "KindAndNameTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/KindAndNameTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "equalsTest",
                            "startLn": 39,
                            "endLn": 61,
                            "testMethod": "@Test\n public void equalsTest ( ) {\n     KindAndName kindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName secondKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName thirdKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName fourthKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     KindAndName fifthKindAndName = new KindAndName ( \"STR\" , \"STR\" ) ; \n     assertTrue(kindAndName.equals(kindAndName));\n}",
                            "oracle": "assertTrue(kindAndName.equals(kindAndName));",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/KindAndName.java",
                            "focalName": "equals",
                            "focalStartLn": 54,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public boolean equals ( Object o ) { \n if ( this == o ) return true ; \n if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; \n KindAndName that = ( KindAndName ) o ; \n if ( ! kind . equals ( that . kind ) ) return false ; \n return name . equals ( that . name ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "EnricherConfigTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/EnricherConfigTest.java",
                    "subRepo": "enricher/api",
                    "classTests": [
                        {
                            "testName": "simple",
                            "startLn": 42,
                            "endLn": 52,
                            "testMethod": "@Test\n public void simple ( ) throws Exception {\n     Map < String , TreeMap > configMap = new HashMap < > ( ) ; \n     TreeMap map = new TreeMap ( ) ; \n     map . put ( \"STR\" , \"STR\" ) ; \n     configMap . put ( \"STR\" , map ) ; \n     EnricherConfig config = new EnricherConfig ( \"STR\" , new Configuration . Builder ( ) . processorConfig ( new ProcessorConfig ( null , null , configMap ) ) . build ( ) ) ; \n     assertEquals(\"STR\",config.get(Config.type));\n}",
                            "oracle": "assertEquals(\"STR\",config.get(Config.type));",
                            "oracleLn": 5,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/EnricherConfig.java",
                            "focalName": "get",
                            "focalStartLn": 46,
                            "focalEndLn": 48,
                            "focalMethod": " public String get ( Configs . Key key ) { \n return get ( key , key . def ( ) ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProcessorConfigTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "incAndExc",
                            "startLn": 47,
                            "endLn": 54,
                            "testMethod": "@Test\n public void incAndExc ( ) {\n     ProcessorConfig pConfig = new ProcessorConfig ( includes , excludes , config ) ; \n     List < TestNamed > filtered = pConfig . prepareProcessors ( getAllTestData ( ) , \"STR\" ) ; \n     assertTrue(contains(filtered,\"STR\"));\n}",
                            "oracle": "assertTrue(contains(filtered,\"STR\"));",
                            "oracleLn": 2,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java",
                            "focalName": "prepareProcessors",
                            "focalStartLn": 104,
                            "focalEndLn": 126,
                            "focalMethod": " public < T extends Named > List < T > prepareProcessors ( List < T > namedList , String type ) { \n List < T > ret = new ArrayList < > ( ) ; \n Map < String , T > lookup = new HashMap < > ( ) ; \n for ( T named : namedList ) { \n lookup . put ( named . getName ( ) , named ) ; \n } for ( String inc : includes ) { \n if ( use ( inc ) ) { \n T named = lookup . get ( inc ) ; \n if ( named == null ) { \n List < String > keys = new ArrayList < > ( lookup . keySet ( ) ) ; \n Collections . sort ( keys ) ; \n throw new IllegalArgumentException ( \"STR\" + type + \"STR\" + inc + \"STR\" + \"STR\" + type + \"STR\" + StringUtils . join ( keys , \"STR\" ) ) ; \n } ret . add ( named ) ; \n } } return ret ; \n } "
                        }
                    ]
                },
                {
                    "className": "ProfileUtilTest",
                    "classPath": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "multiple",
                            "startLn": 60,
                            "endLn": 66,
                            "testMethod": "@Test\n public void multiple ( ) throws IOException {\n     InputStream is = getClass ( ) . getResourceAsStream ( \"STR\" ) ; \n     assertNotNull(is);\n}",
                            "oracle": "assertNotNull(is);",
                            "oracleLn": 1,
                            "focalFile": "core/src/main/java/io/fabric8/maven/core/util/ProfileUtil.java",
                            "focalName": "fromYaml",
                            "focalStartLn": 233,
                            "focalEndLn": 236,
                            "focalMethod": " public static List < Profile > fromYaml ( InputStream is ) throws IOException { \n TypeReference < List < Profile > > typeRef = new TypeReference < List < Profile > > ( ) { \n } ; \n return mapper . readValue ( is , typeRef ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "InitContainerHandlerTest",
                    "classPath": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java",
                    "subRepo": "enricher/api",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 50,
                        "endLn": 53,
                        "setupMethod": "@Before\n public void setUp ( ) { \n handler = new InitContainerHandler ( log ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "removeOne",
                            "startLn": 84,
                            "endLn": 93,
                            "testMethod": "@Test\n public void removeOne ( ) {\n     PodTemplateSpecBuilder builder = getPodTemplateBuilder ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ; \n     assertTrue(handler.hasInitContainer(builder,\"STR\"));\n}",
                            "oracle": "assertTrue(handler.hasInitContainer(builder,\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java",
                            "focalName": "hasInitContainer",
                            "focalStartLn": 38,
                            "focalEndLn": 40,
                            "focalMethod": " public boolean hasInitContainer ( PodTemplateSpecBuilder builder , String name ) { \n return getInitContainer ( builder , name ) != null ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "cucumber-ltd",
            "repoName": "cucumber-pro-plugin-jvm",
            "subRepos": [],
            "commitSHA": "a09ee0b1682d3cd8b68c240820e647d4515e931f",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CucumberProResultsUrlBuilderTest",
                    "classPath": "src/test/java/io/cucumber/pro/results/CucumberProResultsUrlBuilderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "builds_url_for_saas_by_default",
                            "startLn": 12,
                            "endLn": 17,
                            "testMethod": "@Test\n public void builds_url_for_saas_by_default ( ) {\n     Config config = createConfig ( ) ; \n     String url = CucumberProResultsUrlBuilder . buildCucumberProUrl ( config , \"STR\" ) ; \n     assertEquals(\"STR\",url);\n}",
                            "oracle": "assertEquals(\"STR\",url);",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/io/cucumber/pro/results/CucumberProResultsUrlBuilder.java",
                            "focalName": "buildCucumberProUrl",
                            "focalStartLn": 12,
                            "focalEndLn": 14,
                            "focalMethod": " static String buildCucumberProUrl ( final Config config , final String projectName ) { \n return getCucumberProUrl ( config ) + \"STR\" + encodeURIComponent ( projectName ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "ConfigTest",
                    "classPath": "src/test/java/io/cucumber/pro/config/ConfigTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "unset_value_is_null",
                            "startLn": 50,
                            "endLn": 55,
                            "testMethod": "@Test\n public void unset_value_is_null ( ) {\n     Config config = new Config ( ) ; \n     assertTrue(config.isNull(\"STR\"));\n}",
                            "oracle": "assertTrue(config.isNull(\"STR\"));",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/io/cucumber/pro/config/Config.java",
                            "focalName": "isNull",
                            "focalStartLn": 29,
                            "focalEndLn": 31,
                            "focalMethod": " public boolean isNull ( String key ) { \n return getIn ( normalize ( key ) , true ) . isNull ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "OpenLiberty",
            "repoName": "ci.common",
            "subRepos": [],
            "commitSHA": "c41190e3047e920f39c3bb91a3e4045d65f36155",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DevUtilTest",
                    "classPath": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 56,
                        "endLn": 59,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) throws Exception { \n src = new File ( \"STR\" ) ; \n } @Before\n public void setUp ( ) throws IOException { \n serverDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n configDirectory = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n srcDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n targetDir = Files . createTempDirectory ( \"STR\" ) . toFile ( ) ; \n util = getNewDevUtil ( serverDirectory ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testCleanupServerEnvBak",
                            "startLn": 115,
                            "endLn": 132,
                            "testMethod": "@Test\n public void testCleanupServerEnvBak ( ) throws Exception {\n     File serverEnv = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( serverEnv . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     File serverEnvBak = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( serverEnvBak . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     assertTrue(serverEnv.exists());\n}",
                            "oracle": "assertTrue(serverEnv.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "cleanUpServerEnv",
                            "focalStartLn": 1923,
                            "focalEndLn": 1945,
                            "focalMethod": " public void cleanUpServerEnv ( ) { \n File serverEnvFile ; \n File serverEnvBackup ; \n try { \n serverEnvBackup = new File ( serverDirectory . getCanonicalPath ( ) + \"STR\" ) ; \n serverEnvFile = new File ( serverDirectory . getCanonicalPath ( ) + \"STR\" ) ; \n if ( serverEnvBackup . exists ( ) ) { \n try { \n Files . copy ( serverEnvBackup . toPath ( ) , serverEnvFile . toPath ( ) , StandardCopyOption . REPLACE_EXISTING ) ; \n } catch ( IOException e ) { \n error ( \"STR\" + e . getMessage ( ) ) ; \n } serverEnvBackup . delete ( ) ; \n } else { \n serverEnvFile . delete ( ) ; \n } } catch ( IOException e ) { \n error ( \"STR\" + e . getMessage ( ) ) ; \n } } "
                        },
                        {
                            "testName": "testReadFileToString",
                            "startLn": 329,
                            "endLn": 336,
                            "testMethod": "@Test\n public void testReadFileToString ( ) throws Exception {\n     File tempFile = new File ( serverDirectory , \"STR\" ) ; \n     Files . write ( tempFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     String fileString = util . readFile ( tempFile ) ; \n     assertTrue(fileString.equals(\"STR\"));\n}",
                            "oracle": "assertTrue(fileString.equals(\"STR\"));",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "readFile",
                            "focalStartLn": 4015,
                            "focalEndLn": 4017,
                            "focalMethod": " public String readFile ( File file ) throws IOException { \n return FileUtils . readFileToString ( file , StandardCharsets . UTF_8 ) ; \n } "
                        },
                        {
                            "testName": "testCopyFile",
                            "startLn": 338,
                            "endLn": 347,
                            "testMethod": "@Test\n public void testCopyFile ( ) throws Exception {\n     File configFile = new File ( srcDir , \"STR\" ) ; \n     Files . write ( configFile . toPath ( ) , \"STR\" . getBytes ( ) ) ; \n     util . copyFile ( configFile , srcDir , targetDir , \"STR\" ) ; \n     File targetFile = new File ( targetDir , \"STR\" ) ; \n     assertTrue(targetFile.exists());\n}",
                            "oracle": "assertTrue(targetFile.exists());",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java",
                            "focalName": "copyFile",
                            "focalStartLn": 4093,
                            "focalEndLn": 4104,
                            "focalMethod": " public void copyFile ( File fileChanged , File srcDir , File targetDir , String targetFileName ) throws IOException { \n File targetResource = getTargetFile ( fileChanged , srcDir , targetDir , targetFileName ) ; \n try { \n FileUtils . copyFile ( fileChanged , targetResource ) ; \n info ( \"STR\" + fileChanged . getCanonicalPath ( ) + \"STR\" + targetResource . getCanonicalPath ( ) ) ; \n } catch ( FileNotFoundException ex ) { \n debug ( \"STR\" + fileChanged . getCanonicalPath ( ) ) ; \n } catch ( Exception ex ) { \n debug ( ex ) ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "tradier",
            "repoName": "dropwizard-raven",
            "subRepos": [],
            "commitSHA": "117c78b4879ba930d0187ae2874773646213d3d2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "DroppingRavenLoggingFilterTest",
                    "classPath": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "verifyFilterDeniesSentryLoggers",
                            "startLn": 11,
                            "endLn": 19,
                            "testMethod": "@Test\n public void verifyFilterDeniesSentryLoggers ( ) {\n     final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter ( ) ; \n     filter . start ( ) ; \n     final LoggingEvent evt = new LoggingEvent ( ) ; \n     evt . setLoggerName ( \"STR\" ) ; \n     assertEquals(FilterReply.DENY,filter.decide(evt));\n}",
                            "oracle": "assertEquals(FilterReply.DENY,filter.decide(evt));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/tradier/raven/filters/DroppingRavenLoggingFilter.java",
                            "focalName": "decide",
                            "focalStartLn": 8,
                            "focalEndLn": 15,
                            "focalMethod": "@Override\n public FilterReply decide ( ILoggingEvent event ) { \n if ( event . getLoggerName ( ) . startsWith ( \"STR\" ) ) { \n return FilterReply . DENY ; \n } else { \n return FilterReply . NEUTRAL ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "DigitalPebble",
            "repoName": "storm-crawler",
            "subRepos": [
                "core",
                "external/aws",
                "external/elasticsearch",
                "external/langid",
                "external/solr",
                "external/sql",
                "external/tika",
                "external/urlfrontier",
                "external/warc",
                "archetype"
            ],
            "commitSHA": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "BasicURLNormalizerTest",
                    "classPath": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java",
                    "subRepo": "core",
                    "classTests": [
                        {
                            "testName": "testQuerySort",
                            "startLn": 147,
                            "endLn": 155,
                            "testMethod": "@Test\n public void testQuerySort ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testRemoveAllQueryParams",
                            "startLn": 107,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testRemoveAllQueryParams ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     URL testSourceUrl = new URL ( \"STR\" ) ; \n     String testUrl = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 5,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        },
                        {
                            "testName": "testProperURLEncodingWithBackSlash",
                            "startLn": 222,
                            "endLn": 233,
                            "testMethod": "@Test\n public void testProperURLEncodingWithBackSlash ( ) throws MalformedURLException {\n     URLFilter urlFilter = createFilter ( queryParamsToFilter ) ; \n     String urlWithEscapedCharacters = \"STR\" ; \n     String expectedResult = \"STR\" ; \n     URL testSourceUrl = new URL ( urlWithEscapedCharacters ) ; \n     String testUrl = urlWithEscapedCharacters ; \n     String normalizedUrl = urlFilter . filter ( testSourceUrl , new Metadata ( ) , testUrl ) ; \n     assertEquals(\"STR\",expectedResult,normalizedUrl);\n}",
                            "oracle": "assertEquals(\"STR\",expectedResult,normalizedUrl);",
                            "oracleLn": 6,
                            "focalFile": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java",
                            "focalName": "filter",
                            "focalStartLn": 35,
                            "focalEndLn": 35,
                            "focalMethod": " public String filter ( URL sourceUrl , Metadata sourceMetadata , String urlToFilter ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "hazelcast",
            "repoName": "hazelcast-simulator",
            "subRepos": [
                "archetype",
                "simulator",
                "drivers/driver-hazelcast4plus",
                "drivers/driver-hazelcast3",
                "drivers/driver-ignite2",
                "drivers/driver-infinispan9",
                "drivers/driver-infinispan10",
                "drivers/driver-infinispan11",
                "drivers/driver-couchbase",
                "drivers/driver-memcached",
                "drivers/driver-mongodb",
                "drivers/driver-lettuce5",
                "drivers/driver-lettucecluster5",
                "drivers/driver-jedis3"
            ],
            "commitSHA": "7f0c13f66a81ce27911109e4118f7405483931dc",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "WorkerQueryTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 30,
                        "setupMethod": "@Before\n public void before ( ) { \n list = new LinkedList < WorkerData > ( ) ; \n agent1 = agentAddress ( 1 ) ; \n agent2 = agentAddress ( 2 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "workerTags",
                            "startLn": 82,
                            "endLn": 93,
                            "testMethod": "@Test\n public void workerTags ( ) {\n     list . add ( new WorkerData ( newParameters ( agent1 , 1 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 2 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 3 , \"STR\" , \"STR\" ) , toMap ( \"STR\" , \"STR\" , \"STR\" , \"STR\" ) ) ) ; \n     list . add ( new WorkerData ( newParameters ( agent1 , 4 , \"STR\" , \"STR\" ) ) ) ; \n     WorkerQuery query = new WorkerQuery ( ) . setWorkerTags ( toMap ( \"STR\" , \"STR\" ) ) ; \n     List < WorkerData > result = query . execute ( list ) ; \n     assertEquals(asList(list.get(0),list.get(2)),result);\n}",
                            "oracle": "assertEquals(asList(list.get(0),list.get(2)),result);",
                            "oracleLn": 6,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java",
                            "focalName": "execute",
                            "focalStartLn": 112,
                            "focalEndLn": 126,
                            "focalMethod": " public List < WorkerData > execute ( List < WorkerData > input ) { \n switch ( targetType ) { \n case ALL : return select ( input , null ) ; \n case MEMBER : return select ( input , true ) ; \n case CLIENT : return select ( input , false ) ; \n case PREFER_CLIENT : List < WorkerData > result = select ( input , false ) ; \n return ! result . isEmpty ( ) ? result : select ( input , true ) ; \n default : throw new IllegalStateException ( \"STR\" + targetType ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "SimulatorUtilsTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/utils/SimulatorUtilsTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 25,
                        "endLn": 29,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n setupFakeEnvironment ( ) ; \n agentsFile = ensureExistingFile ( getUserDir ( ) , \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testLoadComponentRegister_emptyFile_withoutSizeCheck",
                            "startLn": 54,
                            "endLn": 58,
                            "testMethod": "@Test\n public void testLoadComponentRegister_emptyFile_withoutSizeCheck ( ) {\n     registry = loadComponentRegister ( agentsFile , false ) ; \n     assertEquals(0,registry.agentCount());\n}",
                            "oracle": "assertEquals(0,registry.agentCount());",
                            "oracleLn": 1,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                },
                {
                    "className": "AgentsFileTest",
                    "classPath": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java",
                    "subRepo": "simulator",
                    "before": {
                        "setupName": "before",
                        "startLn": 29,
                        "endLn": 32,
                        "setupMethod": "@Before\n public void before ( ) throws IOException { \n agentsFile = ensureExistingFile ( \"STR\" ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testSave",
                            "startLn": 125,
                            "endLn": 143,
                            "testMethod": "@Test\n public void testSave ( ) {\n     registry = load ( agentsFile ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     registry . addAgent ( \"STR\" , \"STR\" ) ; \n     assertEquals(2,registry.agentCount());\n}",
                            "oracle": "assertEquals(2,registry.agentCount());",
                            "oracleLn": 3,
                            "focalFile": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java",
                            "focalName": "agentCount",
                            "focalStartLn": 97,
                            "focalEndLn": 99,
                            "focalMethod": " public int agentCount ( ) { \n return agents . size ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "javadev",
            "repoName": "moneytostr-russian",
            "subRepos": [],
            "commitSHA": "d39c8729e15292d4f3d38ddbae68977f170f482b",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MoneyToStrTest",
                    "classPath": "src/test/java/com/github/moneytostr/MoneyToStrTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 106,
                        "endLn": 174,
                        "setupMethod": "@Before\n public void setUp ( ) { \n moneyToStrUAH = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHRUS = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUAHENG = new MoneyToStr ( MoneyToStr . Currency . UAH , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRUR = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURRUS = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrRURENG = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . ENG , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSD = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . UKR , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDRUS = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrUSDENG = new MoneyToStr ( MoneyToStr . Currency . USD , MoneyToStr . Language . ENG , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrEURRUS = new MoneyToStr ( MoneyToStr . Currency . EUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER ) ; \n moneyToStrPER100 = new MoneyToStr ( MoneyToStr . Currency . PER100 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrPER1000 = new MoneyToStr ( MoneyToStr . Currency . PER1000 , MoneyToStr . Language . RUS , MoneyToStr . Pennies . TEXT ) ; \n moneyToStrCustom = new MoneyToStr ( MoneyToStr . Currency . RUR , MoneyToStr . Language . RUS , MoneyToStr . Pennies . NUMBER , new String [ ] { \n \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" } ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "checkPER100",
                            "startLn": 448,
                            "endLn": 456,
                            "testMethod": "@Test\n public void checkPER100 ( ) {\n     assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));\n}",
                            "oracle": "assertEquals(\"STR\",moneyToStrPER100.convert(V_1_01D));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/github/moneytostr/MoneyToStr.java",
                            "focalName": "convert",
                            "focalStartLn": 442,
                            "focalEndLn": 452,
                            "focalMethod": " public String convert ( Double theMoney ) { \n if ( theMoney == null ) { \n throw new IllegalArgumentException ( \"STR\" ) ; \n } Long intPart = theMoney . longValue ( ) ; \n Long fractPart = Math . round ( ( theMoney - intPart ) * NUM100 ) ; \n if ( currency == Currency . PER1000 ) { \n fractPart = Math . round ( ( theMoney - intPart ) * NUM1000 ) ; \n } return convert ( intPart , fractPart ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "sofastack",
            "repoName": "sofa-bolt",
            "subRepos": [],
            "commitSHA": "42e4e3d756b7655c0d4a058989c66d9eb09591fa",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "RpcConnectionManagerTest",
                    "classPath": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "init",
                        "startLn": 81,
                        "endLn": 91,
                        "setupMethod": "@Before\n public void init ( ) { \n cm = new DefaultClientConnectionManager ( connectionSelectStrategy , connectionFactory , connectionEventHandler , connectionEventListener ) ; \n cm . setAddressParser ( addressParser ) ; \n cm . startup ( ) ; \n server = new BoltServer ( port ) ; \n server . start ( ) ; \n server . addConnectionEventProcessor ( ConnectionEventType . CONNECT , serverConnectProcessor ) ; \n this . addressParser . initUrlArgs ( url ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testAddWconnithPoolKey_multiPoolKey",
                            "startLn": 117,
                            "endLn": 140,
                            "testMethod": "@Test\n public void testAddWconnithPoolKey_multiPoolKey ( ) throws InterruptedException {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn , poolKey ) ; \n     cm . add ( conn , \"STR\" ) ; \n     cm . add ( conn , \"STR\" ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(1,cm.count(poolKey));",
                            "oracleLn": 4,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        },
                        {
                            "testName": "testAddWithPoolKey",
                            "startLn": 110,
                            "endLn": 115,
                            "testMethod": "@Test\n public void testAddWithPoolKey ( ) {\n     Connection conn = getAConn ( ) ; \n     cm . add ( conn , poolKey ) ; \n     Assert.assertEquals(1,cm.count(poolKey));\n}",
                            "oracle": "Assert.assertEquals(1,cm.count(poolKey));",
                            "oracleLn": 2,
                            "focalFile": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java",
                            "focalName": "count",
                            "focalStartLn": 370,
                            "focalEndLn": 381,
                            "focalMethod": "@Override\n public int count ( String poolKey ) { \n if ( StringUtils . isBlank ( poolKey ) ) { \n return 0 ; \n } ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; \n if ( null != pool ) { \n return pool . size ( ) ; \n } else { \n return 0 ; \n } } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "arnohaase",
            "repoName": "a-foundation",
            "subRepos": [
                "a-foundation"
            ],
            "commitSHA": "f3eef2ca89d67775f202a4c28140230a6229291e",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ACollectionHelperTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testGroupByCustomEquality",
                            "startLn": 175,
                            "endLn": 197,
                            "testMethod": "@Test\n public void testGroupByCustomEquality ( ) {\n     final AEquality equality = new AEquality ( ) { \n @Override\n public boolean equals ( Object o1 , Object o2 ) { \n return ( ( Integer ) o1 ) % 2 == ( ( Integer ) o2 ) % 2 ; \n } @Override\n public int hashCode ( Object o ) { \n return 0 ; \n } } ; \n     final AFunction1NoThrow < String , Integer > len = new AFunction1NoThrow < String , Integer > ( ) { \n @Override\n public Integer apply ( String param ) { \n return param . length ( ) ; \n } } ; \n     final Map < AEqualsWrapper < Integer > , List < String > > grouped = ACollectionHelper . groupBy ( Arrays . asList ( \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" , \"STR\" ) , len , equality ) ; \n     assertEquals(2,grouped.size());\n}",
                            "oracle": "assertEquals(2,grouped.size());",
                            "oracleLn": 3,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java",
                            "focalName": "groupBy",
                            "focalStartLn": 498,
                            "focalEndLn": 510,
                            "focalMethod": " public static < T , X , E extends Throwable > Map < AEqualsWrapper < X > , List < T > > groupBy ( List < T > coll , AFunction1 < ? super T , ? extends X , E > f , AEquality keyEquality ) throws E { \n final Map < AEqualsWrapper < X > , List < T > > result = new HashMap < > ( ) ; \n for ( T o : coll ) { \n final AEqualsWrapper < X > key = new AEqualsWrapper < > ( keyEquality , f . apply ( o ) ) ; \n List < T > perKey = result . get ( key ) ; \n if ( perKey == null ) { \n perKey = createEmptyListOfType ( coll , false ) ; \n result . put ( key , perKey ) ; \n } perKey . add ( o ) ; \n } return result ; \n } "
                        }
                    ]
                },
                {
                    "className": "ADiGraphTest",
                    "classPath": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java",
                    "subRepo": "a-foundation",
                    "classTests": [
                        {
                            "testName": "testForest",
                            "startLn": 135,
                            "endLn": 146,
                            "testMethod": "@Test\n public void testForest ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Arrays . asList ( edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) , edge ( \"STR\" , \"STR\" ) ) ) ; \n     assertFalse(graph.hasCycles());\n}",
                            "oracle": "assertFalse(graph.hasCycles());",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java",
                            "focalName": "hasCycles",
                            "focalStartLn": 301,
                            "focalEndLn": 303,
                            "focalMethod": " public boolean hasCycles ( ) { \n return ! minimalCycles ( ) . isEmpty ( ) ; \n } "
                        },
                        {
                            "testName": "testEmpty",
                            "startLn": 184,
                            "endLn": 212,
                            "testMethod": "@Test\n public void testEmpty ( ) {\n     final ADiGraph < String , ASimpleEdge < String > > graph = ADiGraph . create ( Collections . < ASimpleEdge < String > > emptyList ( ) ) ; \n     assertTrue(graph.edges().isEmpty());\n}",
                            "oracle": "assertTrue(graph.edges().isEmpty());",
                            "oracleLn": 1,
                            "focalFile": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java",
                            "focalName": "edges",
                            "focalStartLn": 83,
                            "focalEndLn": 85,
                            "focalMethod": " public Collection < E > edges ( ) { \n return new ArrayIterable < > ( edges ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoaderTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/LoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jarInClassPathNotModified",
                            "startLn": 63,
                            "endLn": 66,
                            "testMethod": "@Test\n public void jarInClassPathNotModified ( ) {\n     assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));\n}",
                            "oracle": "assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        },
                        {
                            "testName": "jarInClassPath",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void jarInClassPath ( ) {\n     assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));\n}",
                            "oracle": "assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "JsonSchemaTest",
                    "classPath": "src/test/java/guru/nidi/loader/use/jsonschema/JsonSchemaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jsonSchemaWithLoader",
                            "startLn": 35,
                            "endLn": 39,
                            "testMethod": "@Test\n public void jsonSchemaWithLoader ( ) throws IOException , ProcessingException {\n     final JsonSchemaFactory factory = LoaderUriDownloader . createJsonSchemaFactory ( loader ) ; \n     assertTrue(validate(factory).isSuccess());\n}",
                            "oracle": "assertTrue(validate(factory).isSuccess());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/use/jsonschema/LoaderUriDownloader.java",
                            "focalName": "createJsonSchemaFactory",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static JsonSchemaFactory createJsonSchemaFactory ( Loader loader ) { \n return createJsonSchemaFactory ( loader , null , null , null ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "invalidMessageTypesTest",
                            "startLn": 307,
                            "endLn": 316,
                            "testMethod": "@Test\n public void invalidMessageTypesTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHaving",
                            "startLn": 34,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testHaving ( ) {\n     sql . select ( \"STR\" , \"STR\" ) . from ( \"STR\" ) . groupBy ( \"STR\" ) . having ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trung",
            "repoName": "InMemoryJavaCompiler",
            "subRepos": [],
            "commitSHA": "d84c404975dc308ee5a418c5af8a6629c5e6c995",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InMemoryJavaCompilerTest",
                    "classPath": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "compile_WhenIgnoreWarnings",
                            "startLn": 88,
                            "endLn": 99,
                            "testMethod": "@Test\n public void compile_WhenIgnoreWarnings ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . ignoreWarnings ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     List < ? > res = ( List < ? > ) helloClass . getMethod ( \"STR\" ) . invoke ( helloClass . newInstance ( ) ) ; \n     Assert.assertEquals(0,res.size());\n}",
                            "oracle": "Assert.assertEquals(0,res.size());",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "ce\u013cu",
                            "startLn": 165,
                            "endLn": 176,
                            "testMethod": "@Test\n public void ce\u013cu ( ) {\n     Word ce\u013cu = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(ce\u013cu.isRecognized());\n}",
                            "oracle": "assertTrue(ce\u013cu.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JmxAttributePollerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 77,
                        "endLn": 111,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . polled001 = new TestDataClass001 ( ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polledObjects . add ( \"STR\" ) ; \n this . polledObjects . add ( polled001 ) ; \n this . mockMBeanAccessConnectionFactory = Mockito . mock ( MBeanAccessConnectionFactory . class ) ; \n this . mockScheduler = Mockito . mock ( Scheduler . class ) ; \n this . mockBatchCapableAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanAccessConnection . class ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockBatchPollProcessor = Mockito . mock ( BatchPollProcessor . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockTestHooks = Mockito . mock ( JmxAttributePoller . ConcurrencyTestHooks . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . poller = new JmxAttributePoller ( this . polledObjects ) ; \n this . processes = new LinkedList < > ( ) ; \n this . executionSlips = new LinkedList < > ( ) ; \n Answer < SchedulerProcessExecutionSlip > startProcessAnswer = createProcessExecutionSlipAnswer ( null , null ) ; \n Mockito . when ( this . mockScheduler . startProcess ( Mockito . any ( SchedulerProcess . class ) ) ) . thenAnswer ( startProcessAnswer ) ; \n this . testObjectName001 = new ObjectName ( this . TEST_ONAME_001_STR ) ; \n this . accessConnectionFactoryDesc = \"STR\" ; \n Mockito . when ( this . mockMBeanAccessConnectionFactory . getTargetDescription ( ) ) . thenReturn ( this . accessConnectionFactoryDesc ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetObjectQueryPreparer",
                            "startLn": 161,
                            "endLn": 168,
                            "testMethod": "@Test\n public void testGetSetObjectQueryPreparer ( ) throws Exception {\n     assertNotNull(this.poller.getObjectQueryPreparer());\n}",
                            "oracle": "assertNotNull(this.poller.getObjectQueryPreparer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java",
                            "focalName": "getObjectQueryPreparer",
                            "focalStartLn": 123,
                            "focalEndLn": 125,
                            "focalMethod": " public ObjectQueryPreparer getObjectQueryPreparer ( ) { \n return objectQueryPreparer ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHandlerSetters",
                            "startLn": 557,
                            "endLn": 577,
                            "testMethod": "@Test\n public void testHandlerSetters ( ) throws Exception {\n     final UriResponder notFoundHandler = new GeneralHandler ( ) { \n } ; \n     final UriResponder notImplementedHandler = new GeneralHandler ( ) { \n } ; \n     TestRouter router = new TestRouter ( ) ; \n     RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD ( 9999 ) ; \n     Field routerField = RouterNanoHTTPD . class . getDeclaredField ( \"STR\" ) ; \n     routerField . setAccessible ( true ) ; \n     routerField . set ( routerNanoHttpd , router ) ; \n     routerNanoHttpd . setNotFoundHandler ( notFoundHandler . getClass ( ) ) ; \n     routerNanoHttpd . setNotImplementedHandler ( notImplementedHandler . getClass ( ) ) ; \n     Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);\n}",
                            "oracle": "Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);",
                            "oracleLn": 9,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "setNotImplementedHandler",
                            "focalStartLn": 653,
                            "focalEndLn": 655,
                            "focalMethod": " public < T extends UriResponder > void setNotImplementedHandler ( Class < T > handler ) { \n router . setNotImplemented ( handler ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTwoQueries",
                            "startLn": 129,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testTwoQueries ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());",
                            "oracleLn": 2,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBuildUrl",
                            "startLn": 70,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testGetBuildUrl ( ) {\n     assertEquals(\"STR\",newShippable(env()).getBuildUrl());\n}",
                            "oracle": "assertEquals(\"STR\",newShippable(env()).getBuildUrl());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getBuildUrl",
                            "focalStartLn": 66,
                            "focalEndLn": 69,
                            "focalMethod": "@Override\n public String getBuildUrl ( ) { \n return \"STR\" + getProperty ( SHIPPABLE_BUILD_ID ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "puzzle_has_blank",
                            "startLn": 57,
                            "endLn": 62,
                            "testMethod": "@Test\n public void puzzle_has_blank ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     assertEquals(8,p.getBlankIndex());\n}",
                            "oracle": "assertEquals(8,p.getBlankIndex());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "getBlankIndex",
                            "focalStartLn": 80,
                            "focalEndLn": 87,
                            "focalMethod": " public int getBlankIndex ( ) { \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n if ( cells [ i ] == blank ) { \n return i ; \n } } return - 1 ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSameChars",
                            "startLn": 65,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "repeatChar",
                            "focalStartLn": 1233,
                            "focalEndLn": 1239,
                            "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}