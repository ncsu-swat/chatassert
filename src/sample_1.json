{
    "projects": [
        {
            "userName": "nidi3",
            "repoName": "raml-loader",
            "subRepos": [],
            "commitSHA": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "LoaderTest",
                    "classPath": "src/test/java/guru/nidi/loader/basic/LoaderTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jarInClassPathNotModified",
                            "startLn": 63,
                            "endLn": 66,
                            "testMethod": "@Test\n public void jarInClassPathNotModified ( ) {\n     assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));\n}",
                            "oracle": "assertNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",newDate(130,0,0).getTime()-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        },
                        {
                            "testName": "jarInClassPath",
                            "startLn": 58,
                            "endLn": 61,
                            "testMethod": "@Test\n public void jarInClassPath ( ) {\n     assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));\n}",
                            "oracle": "assertNotNull(newClassPathLoader(\"STR\").fetchResource(\"STR\",-1));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/guru/nidi/loader/basic/ClassPathLoader.java",
                            "focalName": "fetchResource",
                            "focalStartLn": 43,
                            "focalEndLn": 68,
                            "focalMethod": "@Override\n public InputStream fetchResource ( String name , long ifModifiedSince ) { \n final URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( normalize ( name ) ) ; \n if ( url == null ) { \n throw new ResourceNotFoundException ( name ) ; \n } try { \n final String path = url . getPath ( ) ; \n switch ( url . getProtocol ( ) ) { \n case \"STR\" : final File file = new File ( path ) ; \n return file . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n case \"STR\" : if ( path . startsWith ( FILE_COLON ) ) { \n final int pos = path . indexOf ( '!' ) ; \n final File jar = new File ( path . substring ( FILE_COLON . length ( ) , pos ) ) ; \n return jar . lastModified ( ) > ifModifiedSince ? url . openStream ( ) : null ; \n } return url . openStream ( ) ; \n default : return url . openStream ( ) ; \n } } catch ( IOException e ) { \n throw new ResourceNotFoundException ( name , e ) ; \n } } "
                        }
                    ]
                },
                {
                    "className": "JsonSchemaTest",
                    "classPath": "src/test/java/guru/nidi/loader/use/jsonschema/JsonSchemaTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "jsonSchemaWithLoader",
                            "startLn": 35,
                            "endLn": 39,
                            "testMethod": "@Test\n public void jsonSchemaWithLoader ( ) throws IOException , ProcessingException {\n     final JsonSchemaFactory factory = LoaderUriDownloader . createJsonSchemaFactory ( loader ) ; \n     assertTrue(validate(factory).isSuccess());\n}",
                            "oracle": "assertTrue(validate(factory).isSuccess());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/guru/nidi/loader/use/jsonschema/LoaderUriDownloader.java",
                            "focalName": "createJsonSchemaFactory",
                            "focalStartLn": 39,
                            "focalEndLn": 41,
                            "focalMethod": " public static JsonSchemaFactory createJsonSchemaFactory ( Loader loader ) { \n return createJsonSchemaFactory ( loader , null , null , null ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "fluenda",
            "repoName": "ParCEFone",
            "subRepos": [],
            "commitSHA": "5067b3315c1957f930f19549ec4b354e7b8c336d",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CEFParserTest",
                    "classPath": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "invalidMessageTypesTest",
                            "startLn": 307,
                            "endLn": 316,
                            "testMethod": "@Test\n public void invalidMessageTypesTest ( ) throws Exception {\n     String sample1 = \"STR\" ; \n     CEFParser parser = new CEFParser ( ) ; \n     CommonEvent event = parser . parse ( sample1 , true ) ; \n     Assert.assertNull(event);\n}",
                            "oracle": "Assert.assertNull(event);",
                            "oracleLn": 3,
                            "focalFile": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java",
                            "focalName": "parse",
                            "focalStartLn": 134,
                            "focalEndLn": 136,
                            "focalMethod": " public CommonEvent parse ( String cefString , final boolean validate ) { \n return this . parse ( cefString , validate , Locale . ENGLISH ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "redraiment",
            "repoName": "jactiverecord",
            "subRepos": [],
            "commitSHA": "d051709c93204658e7f2cc96c9898201c7337269",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TSqlBuilderTest",
                    "classPath": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpClass",
                        "startLn": 10,
                        "endLn": 13,
                        "setupMethod": "@BeforeClass\n public static void setUpClass ( ) { \n sql = new TSqlBuilder ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHaving",
                            "startLn": 34,
                            "endLn": 42,
                            "testMethod": "@Test\n public void testHaving ( ) {\n     sql . select ( \"STR\" , \"STR\" ) . from ( \"STR\" ) . groupBy ( \"STR\" ) . having ( \"STR\" ) ; \n     assertEquals(\"STR\",sql.toString());\n}",
                            "oracle": "assertEquals(\"STR\",sql.toString());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/me/zzp/ar/sql/SqlBuilder.java",
                            "focalName": "toString",
                            "focalStartLn": 34,
                            "focalEndLn": 35,
                            "focalMethod": "@Override\n public String toString ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trung",
            "repoName": "InMemoryJavaCompiler",
            "subRepos": [],
            "commitSHA": "d84c404975dc308ee5a418c5af8a6629c5e6c995",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "InMemoryJavaCompilerTest",
                    "classPath": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "compile_WhenIgnoreWarnings",
                            "startLn": 88,
                            "endLn": 99,
                            "testMethod": "@Test\n public void compile_WhenIgnoreWarnings ( ) throws Exception {\n     StringBuffer sourceCode = new StringBuffer ( ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     sourceCode . append ( \"STR\" ) ; \n     Class < ? > helloClass = InMemoryJavaCompiler . newInstance ( ) . ignoreWarnings ( ) . compile ( \"STR\" , sourceCode . toString ( ) ) ; \n     List < ? > res = ( List < ? > ) helloClass . getMethod ( \"STR\" ) . invoke ( helloClass . newInstance ( ) ) ; \n     Assert.assertEquals(0,res.size());\n}",
                            "oracle": "Assert.assertEquals(0,res.size());",
                            "oracleLn": 7,
                            "focalFile": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java",
                            "focalName": "compile",
                            "focalStartLn": 125,
                            "focalEndLn": 127,
                            "focalMethod": " public Class < ? > compile ( String className , String sourceCode ) throws Exception { \n return addSource ( className , sourceCode ) . compileAll ( ) . get ( className ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "PeterisP",
            "repoName": "morphology",
            "subRepos": [],
            "commitSHA": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "MorphologyTest",
                    "classPath": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setUpBeforeClass",
                        "startLn": 104,
                        "endLn": 111,
                        "setupMethod": "@BeforeClass\n public static void setUpBeforeClass ( ) { \n try { \n loc\u012bt\u0101js = new Analyzer ( false ) ; \n } catch ( Exception e ) { \n e . printStackTrace ( ) ; \n } } @Before\n public void defaultsettings ( ) { \n loc\u012bt\u0101js . defaultSettings ( ) ; \n loc\u012bt\u0101js . setCacheSize ( 0 ) ; \n loc\u012bt\u0101js . clearCache ( ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "ce\u013cu",
                            "startLn": 165,
                            "endLn": 176,
                            "testMethod": "@Test\n public void ce\u013cu ( ) {\n     Word ce\u013cu = loc\u012bt\u0101js . analyze ( \"STR\" ) ; \n     assertTrue(ce\u013cu.isRecognized());\n}",
                            "oracle": "assertTrue(ce\u013cu.isRecognized());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/lv/semti/morphology/analyzer/Word.java",
                            "focalName": "isRecognized",
                            "focalStartLn": 135,
                            "focalEndLn": 137,
                            "focalMethod": " public boolean isRecognized ( ) { \n return ! wordforms . isEmpty ( ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "amlinv",
            "repoName": "stat-collection-utils",
            "subRepos": [],
            "commitSHA": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "JmxAttributePollerTest",
                    "classPath": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java",
                    "subRepo": "",
                    "before": {
                        "setupName": "setupTest",
                        "startLn": 77,
                        "endLn": 111,
                        "setupMethod": "@Before\n public void setupTest ( ) throws Exception { \n this . polled001 = new TestDataClass001 ( ) ; \n this . polledObjects = new LinkedList < > ( ) ; \n this . polledObjects . add ( \"STR\" ) ; \n this . polledObjects . add ( polled001 ) ; \n this . mockMBeanAccessConnectionFactory = Mockito . mock ( MBeanAccessConnectionFactory . class ) ; \n this . mockScheduler = Mockito . mock ( Scheduler . class ) ; \n this . mockBatchCapableAccessConnection = Mockito . mock ( MBeanBatchCapableAccessConnection . class ) ; \n this . mockAccessConnection = Mockito . mock ( MBeanAccessConnection . class ) ; \n this . mockAttributeInjector = Mockito . mock ( AttributeInjector . class ) ; \n this . mockBatchPollProcessor = Mockito . mock ( BatchPollProcessor . class ) ; \n this . mockObjectQueryPreparer = Mockito . mock ( ObjectQueryPreparer . class ) ; \n this . mockTestHooks = Mockito . mock ( JmxAttributePoller . ConcurrencyTestHooks . class ) ; \n this . mockLogger = Mockito . mock ( Logger . class ) ; \n this . poller = new JmxAttributePoller ( this . polledObjects ) ; \n this . processes = new LinkedList < > ( ) ; \n this . executionSlips = new LinkedList < > ( ) ; \n Answer < SchedulerProcessExecutionSlip > startProcessAnswer = createProcessExecutionSlipAnswer ( null , null ) ; \n Mockito . when ( this . mockScheduler . startProcess ( Mockito . any ( SchedulerProcess . class ) ) ) . thenAnswer ( startProcessAnswer ) ; \n this . testObjectName001 = new ObjectName ( this . TEST_ONAME_001_STR ) ; \n this . accessConnectionFactoryDesc = \"STR\" ; \n Mockito . when ( this . mockMBeanAccessConnectionFactory . getTargetDescription ( ) ) . thenReturn ( this . accessConnectionFactoryDesc ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testGetSetObjectQueryPreparer",
                            "startLn": 161,
                            "endLn": 168,
                            "testMethod": "@Test\n public void testGetSetObjectQueryPreparer ( ) throws Exception {\n     assertNotNull(this.poller.getObjectQueryPreparer());\n}",
                            "oracle": "assertNotNull(this.poller.getObjectQueryPreparer());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java",
                            "focalName": "getObjectQueryPreparer",
                            "focalStartLn": 123,
                            "focalEndLn": 125,
                            "focalMethod": " public ObjectQueryPreparer getObjectQueryPreparer ( ) { \n return objectQueryPreparer ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "NanoHttpd",
            "repoName": "nanohttpd",
            "subRepos": [
                "core",
                "webserver",
                "samples",
                "websocket",
                "markdown-plugin",
                "nanolets",
                "fileupload"
            ],
            "commitSHA": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "TestNanolets",
                    "classPath": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java",
                    "subRepo": "nanolets",
                    "before": {
                        "setupName": "setUp",
                        "startLn": 81,
                        "endLn": 96,
                        "setupMethod": "@BeforeClass\n public static void setUp ( ) throws Exception { \n stdIn = new PipedOutputStream ( ) ; \n System . setIn ( new PipedInputStream ( stdIn ) ) ; \n serverStartThread = new Thread ( new Runnable ( ) { \n @Override\n public void run ( ) { \n String [ ] args = { \n } ; \n AppNanolets . main ( args ) ; \n } } ) ; \n serverStartThread . start ( ) ; \n Thread . sleep ( 200 ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testHandlerSetters",
                            "startLn": 557,
                            "endLn": 577,
                            "testMethod": "@Test\n public void testHandlerSetters ( ) throws Exception {\n     final UriResponder notFoundHandler = new GeneralHandler ( ) { \n } ; \n     final UriResponder notImplementedHandler = new GeneralHandler ( ) { \n } ; \n     TestRouter router = new TestRouter ( ) ; \n     RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD ( 9999 ) ; \n     Field routerField = RouterNanoHTTPD . class . getDeclaredField ( \"STR\" ) ; \n     routerField . setAccessible ( true ) ; \n     routerField . set ( routerNanoHttpd , router ) ; \n     routerNanoHttpd . setNotFoundHandler ( notFoundHandler . getClass ( ) ) ; \n     routerNanoHttpd . setNotImplementedHandler ( notImplementedHandler . getClass ( ) ) ; \n     Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);\n}",
                            "oracle": "Assert.assertEquals(notFoundHandler.getClass(),router.notFoundHandlerClass);",
                            "oracleLn": 9,
                            "focalFile": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java",
                            "focalName": "setNotImplementedHandler",
                            "focalStartLn": 653,
                            "focalEndLn": 655,
                            "focalMethod": " public < T extends UriResponder > void setNotImplementedHandler ( Class < T > handler ) { \n router . setNotImplemented ( handler ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "Yubico",
            "repoName": "yubico-java-client",
            "subRepos": [
                "v2client",
                "jaas",
                "demo-server"
            ],
            "commitSHA": "e21fb672e290a118f7420daaf81ccb96d319d52c",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "YubicoClientTest",
                    "classPath": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java",
                    "subRepo": "v2client",
                    "before": {
                        "setupName": "setup",
                        "startLn": 66,
                        "endLn": 69,
                        "setupMethod": "@Before\n public void setup ( ) { \n client = YubicoClient . getClient ( this . clientId , apiKey ) ; \n } "
                    },
                    "classTests": [
                        {
                            "testName": "testTwoQueries",
                            "startLn": 129,
                            "endLn": 136,
                            "testMethod": "@Test\n public void testTwoQueries ( ) throws YubicoVerificationException , YubicoValidationFailure {\n     String otp = \"STR\" ; \n     VerificationResponse response = client . verify ( otp ) ; \n     assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());\n}",
                            "oracle": "assertEquals(ResponseStatus.REPLAYED_OTP,response.getStatus());",
                            "oracleLn": 2,
                            "focalFile": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java",
                            "focalName": "getStatus",
                            "focalStartLn": 69,
                            "focalEndLn": 69,
                            "focalMethod": " ResponseStatus getStatus ( ) ; \n"
                        }
                    ]
                }
            ]
        },
        {
            "userName": "trautonen",
            "repoName": "coveralls-maven-plugin",
            "subRepos": [],
            "commitSHA": "8b8995e42768a25c8db6e85ede62238bf4606cb2",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "ShippableTest",
                    "classPath": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testGetBuildUrl",
                            "startLn": 70,
                            "endLn": 73,
                            "testMethod": "@Test\n public void testGetBuildUrl ( ) {\n     assertEquals(\"STR\",newShippable(env()).getBuildUrl());\n}",
                            "oracle": "assertEquals(\"STR\",newShippable(env()).getBuildUrl());",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java",
                            "focalName": "getBuildUrl",
                            "focalStartLn": 66,
                            "focalEndLn": 69,
                            "focalMethod": "@Override\n public String getBuildUrl ( ) { \n return \"STR\" + getProperty ( SHIPPABLE_BUILD_ID ) ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "TeachingKidsProgramming",
            "repoName": "TeachingKidsProgramming.Source.Java",
            "subRepos": [],
            "commitSHA": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "PuzzleTest",
                    "classPath": "src/test/java/org/teachingextensions/logo/PuzzleTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "puzzle_has_blank",
                            "startLn": 57,
                            "endLn": 62,
                            "testMethod": "@Test\n public void puzzle_has_blank ( ) {\n     Puzzle p = new Puzzle ( getSolution ( ) ) ; \n     assertEquals(8,p.getBlankIndex());\n}",
                            "oracle": "assertEquals(8,p.getBlankIndex());",
                            "oracleLn": 1,
                            "focalFile": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java",
                            "focalName": "getBlankIndex",
                            "focalStartLn": 80,
                            "focalEndLn": 87,
                            "focalMethod": " public int getBlankIndex ( ) { \n for ( int i = 0 ; \n i < cells . length ; \n i ++ ) { \n if ( cells [ i ] == blank ) { \n return i ; \n } } return - 1 ; \n } "
                        }
                    ]
                }
            ]
        },
        {
            "userName": "rockagen",
            "repoName": "commons-lib",
            "subRepos": [],
            "commitSHA": "f37141cf40be79d130db804c39ce61690541d5f1",
            "buildSystem": "mvn",
            "allTests": [
                {
                    "className": "CommUtilTest",
                    "classPath": "src/test/java/com/rockagen/commons/util/CommUtilTest.java",
                    "subRepo": "",
                    "classTests": [
                        {
                            "testName": "testSameChars",
                            "startLn": 65,
                            "endLn": 72,
                            "testMethod": "@Test\n public void testSameChars ( ) {\n     Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));\n}",
                            "oracle": "Assert.assertEquals(\"STR\",CommUtil.repeatChar('b',10));",
                            "oracleLn": 0,
                            "focalFile": "src/main/java/com/rockagen/commons/util/CommUtil.java",
                            "focalName": "repeatChar",
                            "focalStartLn": 1233,
                            "focalEndLn": 1239,
                            "focalMethod": " public static String repeatChar ( char cha , int len ) { \n len = len < 0 ? 0 : len ; \n char [ ] c = new char [ len ] ; \n for ( int i = 0 ; \n i < len ; \n i ++ ) c [ i ] = cha ; \n return new String ( c ) ; \n } "
                        }
                    ]
                }
            ]
        }
    ]
}