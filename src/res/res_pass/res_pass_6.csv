TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
/	1	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(V_300D));"	9.562762022018433	0	0
/	3	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotNull(moneyToStrUAHRUS.convert(V_300D));	9.213608980178833	0	0
/	4	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotNull(moneyToStrCustom);	149.37334728240967	0	0
/	5	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrCustom.convert(V_300D));"	10.384741067886353	0	0
/	11	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertTrue(moneyToStrUAHRUS.toString().length()>0);	134.154803276062	0	0
/	12	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertFalse(moneyToStrUAHRUS.convert(V_300D).isEmpty());	9.631730318069458	0	0
/	13	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotEquals(0,moneyToStrUAHRUS.convert(V_300D).length());	9.728172063827515	0	0
/	15	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(V_300D).replaceAll(""STR"",""STR""));"	40.194112062454224	0	0
/	17	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotEquals(null,moneyToStrUAHRUS.convert(V_300D));	9.48174500465393	0	0
/	20	//	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertTrue(moneyToStrUAHRUS.convert(V_300D).contains(""STR""));"	9.366377115249634	0	0
/	7	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotNull(moneyToStrUAHRUS.convert(-V_300D));	11.12108325958252	0	0
/	8	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertFalse(moneyToStrUAHRUS.convert(-V_300D).isEmpty());	9.629430770874023	0	0
/	9	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	9.621445178985596	0	0
/	10	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotSame(null,moneyToStrUAHRUS.convert(-V_300D));	10.227731943130493	0	0
/	15	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotEquals(null,moneyToStrUAHRUS.convert(-V_300D));	9.990285158157349	0	0
/	20	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	9.869339227676392	0	0
/	21	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertTrue(!moneyToStrUAHRUS.convert(-V_300D).isEmpty());	9.601554155349731	0	0
/	22	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotSame(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	9.927332878112793	0	0
/	27	//	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotEquals(0,moneyToStrUAHRUS.convert(-V_300D).length());	9.529271602630615	0	0
3	0	orientechnologies/orientdb	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(""STR"",collection[0]);"	277.69135785102844	0	0
/	1	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertTrue(collection.length>0);	39.694413900375366	0	0
/	2	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNotNull(collection);	40.41645908355713	0	0
/	3	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNotEquals(0,collection.length);	39.3600549697876	0	0
/	5	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertFalse(collection.length==0);	38.987943172454834	0	0
/	8	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertNotSame(""STR"",""STR"");"	40.913039207458496	0	0
/	9	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertNotEquals(""STR"",""STR"");"	39.20808720588684	0	0
/	10	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertSame(""STR"",""STR"");"	39.6480610370636	0	0
/	12	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(""STR"",collection[1]);"	39.18577480316162	0	0
/	13	//	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertSame(""STR"",collection[0]);"	39.24844217300415	0	0
4	0	orientechnologies/orientdb	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	27.49386501312256	0	0
4	1	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	25.811289072036743	1	0
/	2	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	26.095864057540894	0	0
/	3	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.contains(doc));	26.26520609855652	0	0
/	4	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size());	25.936483144760132	0	0
/	5	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	"assertTrue(vertices.stream().allMatch(v->v.field(""STR"").equals(""STR"")));"	26.193829774856567	0	0
/	6	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	"assertEquals(""STR"",vertices.get(0).field(""STR""));"	26.486682176589966	0	0
/	7	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertSame(doc,vertices.get(0));	26.600162744522095	0	0
/	11	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(vertices.size(),0);	25.500046968460083	0	0
/	12	//	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(!vertices.isEmpty());	26.158034086227417	0	0
5	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(result,result);	1089.0765619277954	0	0
/	4	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	39.95339488983154	0	0
/	5	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotEquals(compositeIndex,result);	394.3656520843506	0	0
/	9	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertSame(result,result);	1048.7241859436035	0	0
/	10	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertFalse(compositeIndex.equals(result));	40.11876201629639	0	0
/	11	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotSame(compositeIndex,result);	40.834290981292725	0	0
/	15	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotSame(compositeIndexDefinition,result);	526.3189098834991	0	0
/	17	//	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	73.17224025726318	0	0
6	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	41.24763607978821	1	0
6	1	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(expectedResult.containsAll((List<OCompositeKey>)result));	40.481128215789795	0	0
/	3	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(result);	40.14091420173645	0	0
/	4	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotEquals(expectedResult.size(),0);	40.57151126861572	0	0
/	6	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertArrayEquals(expectedResult.toArray(),((List<OCompositeKey>)result).toArray());	41.227506160736084	0	0
/	8	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(expectedResult.stream().allMatch(((List<OCompositeKey>)result)::contains));	41.891087770462036	0	0
/	9	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotSame(expectedResult,result);	41.03688192367554	0	0
/	10	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertSame(expectedResult.getClass(),result.getClass());	40.51980495452881	0	0
/	13	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertFalse(expectedResult.isEmpty());	39.92384600639343	0	0
/	14	//	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotSame(expectedResult.size(),0);	40.25440692901611	0	0
7	0	orientechnologies/orientdb	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	28.742448091506958	1	0
7	1	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	28.216883182525635	0	0
/	3	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	85.59550499916077	1	0
/	6	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result);	642.296975851059	0	0
/	8	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotEquals(0,result);	611.7299182415009	0	0
/	10	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result);	609.8737909793854	0	0
/	12	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(database.getSize()>0);	1282.0617101192474	0	0
/	21	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(CLASS_2.isEmpty());	186.3146619796753	0	0
/	27	//	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result);	27.47403311729431	0	0
8	0	orientechnologies/orientdb	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals((Object)OBJECT.byteValue(),OBJECT);	151.40745306015015	0	0
/	5	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(stream);	39.62611413002014	0	0
/	10	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertTrue(stream.length>0);	40.50268316268921	0	0
/	11	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(0,stream.length);	40.48310089111328	0	0
/	12	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertFalse(stream.length==0);	40.53382873535156	0	0
/	14	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotSame(null,stream);	38.891870975494385	0	0
/	19	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(null,stream);	39.09849810600281	0	0
/	21	//	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertSame(stream.getClass(),byte[].class);	40.5947380065918	0	0
9	0	orientechnologies/orientdb	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	45.55675411224365	1	0
9	1	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(ridBag.contains(docOne));	44.415443897247314	0	0
/	3	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(rootDoc);	44.24383902549744	0	0
/	4	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(ridBag.size()>0);	43.64510416984558	0	0
/	6	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(database.exists());	44.42345976829529	0	0
/	8	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(ridBag.isEmpty());	43.17575407028198	0	0
/	9	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo);	44.478691816329956	0	0
/	11	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(database.isClosed());	44.15652298927307	0	0
/	16	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(docOne);	43.01529908180237	0	0
/	19	//	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(ridBag.iterator().hasNext());	44.819262981414795	0	0
10	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(idProperty.getName(),PROP_ID);	44.74795699119568	1	0
/	2	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	44.671764850616455	0	0
/	3	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.properties().contains(idProperty));	44.15735387802124	0	0
/	4	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",idProperty.getName());"	46.32331395149231	0	0
/	5	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isReadonly());	44.20967888832092	0	0
/	6	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(!idProperty.isMandatory());	135.03139877319336	0	0
/	7	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getDefaultValue().toString());"	87.87846779823303	0	0
/	8	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(companyClass,idProperty.getOwnerClass());	179.63983702659607	0	0
/	9	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.getType().equals(OType.INTEGER));	43.408405780792236	0	0
/	11	//	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.declaredProperties().contains(idProperty));	45.167914152145386	0	0
11	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(idProperty.getName(),PROP_ID);	44.43944764137268	1	0
11	1	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(idProperty);	43.56052303314209	0	0
/	2	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(companyClass.existsProperty(PROP_ID));	45.0705726146698	0	0
/	3	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",idProperty.getDefaultValue());"	45.90464496612549	0	0
/	4	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(Integer.parseInt(idProperty.getMax())>Integer.parseInt(idProperty.getMin()));	770.388345003128	0	0
/	5	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(db.isClosed());	43.82485604286194	0	0
/	6	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertSame(companyClass.getProperty(PROP_ID),idProperty);	43.89920997619629	0	0
/	7	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertNotSame(companyClass,db.getMetadata().getSchema().getClass(""STR""));"	44.18765616416931	0	0
/	8	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(companyClass.isAbstract());	44.482426166534424	0	0
/	9	//	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals(10,companyClass.getClusterSelection());	44.064135789871216	0	0
12	1	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(2,clazzV.getClusterIds().length);	155.4566011428833	1	0
/	2	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(clazzV.getClusterIds().length>0);	44.39234399795532	0	0
/	3	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(clazzV);	43.83160710334778	0	0
/	4	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	44.14086604118347	0	0
/	5	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	"assertFalse(db.getMetadata().getSchema().existsClass(""STR""));"	43.57967185974121	0	0
/	6	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	"assertNotEquals(0,db.getMetadata().getSchema().getClass(""STR"").getClusterIds().length);"	44.75451588630676	0	0
/	7	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	"assertEquals(""STR"",clazzV.getName());"	43.71563410758972	0	0
/	8	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotSame(s,t);	43.39723491668701	0	0
/	11	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(0,db.getMetadata().getSchema().getClasses().size());	43.63885307312012	0	0
/	12	//	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	"assertTrue(db.getMetadata().getSchema().getClass(""STR"").getClusterIds().length>0);"	43.769296169281006	0	0
13	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	39.92535400390625	1	0
13	1	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	40.57919502258301	0	0
/	2	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(0,doc.getPropertyNames().size());	40.173665046691895	0	0
/	3	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.getIdentity().isPersistent());	80.33207178115845	0	0
/	7	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	85.9783182144165	0	0
/	8	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.getInternalStatus()==ORecordElement.STATUS.LOADED);	39.27269196510315	0	0
/	9	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(null,doc);	40.25247383117676	0	0
/	10	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(ODocument.class,doc.getClass());	39.44297122955322	0	0
/	11	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(0,doc.getPropertyNames().size());	890.9642059803009	0	0
/	13	//	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc);	80.06952905654907	0	0
14	0	orientechnologies/orientdb	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	22.723541736602783	1	0
14	1	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(1,manager.getTotal());	22.383007049560547	0	0
/	2	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.has(ret.getId()));	21.890662908554077	0	0
/	3	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.getConnections().contains(ret));	21.601232767105103	0	0
/	5	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertFalse(manager.getConnections().isEmpty());	22.13412570953369	0	0
/	6	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.getTotal()>=1);	22.407734155654907	0	0
/	7	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotEquals(0,manager.getTotal());	21.73428201675415	0	0
/	8	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(ret.getId()>0);	21.712069749832153	0	0
/	12	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.getTotal()>0);	22.592613697052002	0	0
/	14	//	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(protocol,ret.getProtocol());	22.12899684906006	0	0
15	0	orientechnologies/orientdb	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertEquals(2,extr.<List<?>>field(""STR"").size());"	40.86487603187561	0	0
/	2	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertNotNull(extr.field(""STR""));"	40.72767519950867	0	0
/	4	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertFalse(extr.isEmpty());	968.4248979091644	0	0
/	5	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertTrue(extr.<List<?>>field(""STR"").contains(mappa));"	40.609955072402954	0	0
/	6	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertNotSame(lista,extr.<List<?>>field(""STR""));"	40.44293689727783	0	0
/	8	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertTrue(extr.<List<?>>field(""STR"").isEmpty());"	39.415056228637695	0	0
/	9	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertNotEquals(""STR"",extr.getProperty(""STR""));"	2309.616120815277	0	0
/	10	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	"assertNull(extr.getProperty(""STR""));"	40.04925203323364	0	0
/	11	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertTrue(extr.fields()>0);	41.00238490104675	0	0
/	14	//	ODocumentSchemalessBinarySerializationTest	testListOfMapsWithNull	assertEquals(extr.fields(),document.fields());	assertNotNull(document.getIdentity().toString());	3842.8323171138763	0	0
16	1	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	39.72979187965393	0	0
/	2	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	78.02422308921814	0	0
/	5	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.compareTo(anotherCompositeKey)==0);	39.960511207580566	0	0
/	7	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(2,compositeKey.getKeys().size());	39.65760278701782	0	0
/	8	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(null));	39.442861795425415	0	0
/	9	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey);	39.71685194969177	0	0
/	11	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.toString().isEmpty());	39.733256816864014	0	0
/	12	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey.getKeys());	39.25086212158203	0	0
/	13	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	"assertTrue(compositeKey.getKeys().contains(""STR""));"	40.20651125907898	0	0
/	14	//	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	"assertNotEquals(""STR"",compositeKey.toString());"	39.570849657058716	0	0
/	3	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getCommand());	19.596541166305542	0	0
/	5	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertNotEquals(params.get(""STR""),other.getCommand());"	372.7340021133423	0	0
/	6	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertTrue(params.containsKey(""STR""));"	19.642282962799072	0	0
/	7	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertTrue(params.containsValue(12));	19.48167109489441	0	0
/	9	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertSame(ORecordSerializerNetworkFactory.INSTANCE.current(),request.getSerializer());	19.42203378677368	0	0
/	10	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertEquals(MockChannel.class,channel.getClass());	203.92162895202637	0	0
/	11	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertFalse(params.isEmpty());	19.51914381980896	0	0
/	12	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotSame(params,other.getParams());	19.967991828918457	0	0
/	13	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	"assertEquals(12,params.get(""STR""));"	34.594253063201904	0	0
/	14	//	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotSame(channel.getClass(),request.getClass());	372.941890001297	0	0
18	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(result,result);	718.0340399742126	0	0
/	1	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotNull(result);	40.164793729782104	0	0
/	2	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotEquals(null,result);	39.294586181640625	0	0
/	3	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotNull(propertyIndexByIntegerKey);	945.0728738307953	0	0
/	7	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertFalse(mapToTest.isEmpty());	801.4088728427887	0	0
/	8	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotSame(mapToTest,propertyIndexByKey);	41.7539701461792	0	0
/	9	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertEquals(propertyIndexByValue,propertyIndexByValue);	610.5518729686737	0	0
/	10	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotEquals(propertyIndexByKey,propertyIndexByIntegerKey);	40.13181114196777	0	0
/	20	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertSame(propertyIndexByKey,propertyIndexByKey);	40.29673719406128	0	0
18	23	//	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertEquals(result,""STR"");"	1113.1003551483154	1	0
19	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(Logger.Level.WARN,logger.level);	13.482899188995361	1	0
19	1	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotEquals(Logger.Level.DEBUG,logger.level);	12.682285785675049	0	0
/	2	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(logger.level.ordinal()>=Logger.Level.WARN.ordinal());	14.445384979248047	0	0
/	3	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(logger);	12.85157823562622	0	0
/	6	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(Logger.Level.ERROR,logger.level);	12.84865403175354	0	0
/	7	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertFalse(logger.level==Logger.Level.DEBUG);	11.758481979370117	0	0
/	8	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(config);	104.00958299636841	0	0
/	11	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNull(config.getString(Keys.CUCUMBERPRO_PROFILE));	25.08789896965027	0	0
/	12	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertEquals(5000,(int)config.getInteger(Keys.CUCUMBERPRO_CONNECTION_TIMEOUT));	21.58697199821472	0	0
/	14	//	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(config.isNull(Keys.CUCUMBERPRO_TOKEN));	12.023964881896973	0	0
20	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(Logger.Level.INFO,logger.level);	13.753462076187134	1	0
20	1	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.level==Logger.Level.INFO);	12.363311052322388	0	0
/	2	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	11.562690734863281	0	0
/	3	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.DEBUG,logger.level);	11.767745971679688	0	0
/	4	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertFalse(logger.level==Logger.Level.DEBUG);	11.861934185028076	0	0
/	5	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertSame(Logger.Level.INFO,logger.level);	12.459271907806396	0	0
/	6	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(Logger.Level.ERROR,logger.level);	11.536781072616577	0	0
/	7	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotEquals(Logger.Level.WARN,logger.level);	11.802044153213501	0	0
/	11	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotSame(Logger.Level.DEBUG,logger.level);	12.599799871444702	0	0
/	12	//	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertTrue(logger.level.ordinal()<=Logger.Level.INFO.ordinal());	12.114929914474487	0	0
21	0	fluenda/ParCEFone	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(2,comparison);	26.60713481903076	0	0
21	1	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	9.184178113937378	1	0
/	2	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(2,comparison);	30.44416308403015	0	0
/	4	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0);	9.077300786972046	0	0
/	6	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(macAddress.isLocal());	9.529685974121094	0	0
/	8	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotNull(macAddress);	8.203519105911255	0	0
/	9	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(null,macAddress);	8.651293992996216	0	0
/	11	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(macAddress.isMulticast());	8.503763914108276	0	0
/	16	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	"assertTrue(macAddress.toString().contains(""STR""));"	8.443129062652588	0	0
/	17	//	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(-1,macAddress.hashCode());	8.430586814880371	0	0
22	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.isMulticast());	10.289029121398926	0	0
/	1	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	8.967613935470581	0	0
/	2	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(LOCAL_ADDRESS,macAddress.toString());	8.572920083999634	0	0
/	5	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(17,NORMALIZED_ADDRESS.length());	142.82198572158813	0	0
/	6	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertTrue(macAddress.toString().matches(""STR""));"	8.972707033157349	0	0
/	7	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.isLocal());	8.683480978012085	0	0
/	8	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertNotEquals(""STR"",macAddress);"	111.46595597267151	0	0
/	10	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.hashCode()!=0);	8.551036834716797	0	0
/	12	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertTrue(macAddress.toString().startsWith(""STR""));"	8.658500909805298	0	0
/	14	//	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	"assertTrue(macAddress.toString().contains(""STR""));"	8.595616102218628	0	0
23	0	fluenda/ParCEFone	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	31.55977511405945	0	0
/	4	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(sample1.isEmpty());	8.407822132110596	0	0
/	6	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	225.49324822425842	0	0
/	8	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	37.41776990890503	0	0
/	15	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	"assertTrue(sample1.startsWith(""STR""));"	9.27209186553955	0	0
/	17	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,false));	17.590269088745117	0	0
/	23	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(sample1);	106.70175409317017	0	0
/	26	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(sample1.length()>0);	8.648618936538696	0	0
/	29	//	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser);	227.7967689037323	0	0
24	0	nidi3/graphviz-java	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertNotNull(label);	141.00713515281677	0	0
/	3	//	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	"assertNotEquals(""STR"",""STR"");"	167.71478915214539	0	0
/	28	//	LabelTest	markdown	"assertEquals(""STR"",Label.markdown(""STR"").value);"	assertNotNull(label);	173.00034308433533	0	0
/	7	//	JenkinsTest	testIsSelectedForNothing	"assertFalse(newJenkins(newHashMap<String,String>()->{
}).isSelected());"	assertNull(null);	116.73036789894104	0	0
28	0	adlnet/jxapi	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	10.43597412109375	0	0
28	1	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	11.34020709991455	1	0
/	2	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotSame(expected,actual);	21.152600049972534	0	0
/	4	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	20.8235182762146	0	0
/	8	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertSame(expected.getClass(),actual.getClass());	10.887257099151611	0	0
/	9	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(expected);	84.4944908618927	0	0
/	10	//	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	92.90074515342712	1	0
