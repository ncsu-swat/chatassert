TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	adlnet/jxapi	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	10.403966903686523	0	0
/	1	//	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.containsAll(expected));	10.028540849685669	0	0
0	2	//	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	10.000415086746216	1	0
/	4	//	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(expected.containsAll(actual));	18.503652811050415	0	0
/	8	//	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	9.200685024261475	0	0
/	18	//	GroupTest	testSetMember	assertNotNull(actual);	assertFalse(actual.isEmpty());	27.334197998046875	0	0
/	22	//	GroupTest	testSetMember	assertNotNull(actual);	assertSame(expected,actual);	9.5069100856781	0	0
1	0	adlnet/jxapi	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	9.970108985900879	1	0
1	1	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.equals(expected));	10.166100978851318	0	0
/	2	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual);	8.878998041152954	0	0
/	13	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	34.187978982925415	0	0
/	17	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertArrayEquals(expected.toCharArray(),actual.toCharArray());	141.78321981430054	0	0
/	19	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(actual.isEmpty());	9.284535884857178	0	0
/	20	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual);	18.79844880104065	0	0
/	21	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(NAME,actual);	59.72733688354492	0	0
/	24	//	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	8.869575023651123	0	0
2	0	adlnet/jxapi	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	11.820101737976074	0	0
/	1	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	10.923740863800049	0	0
/	2	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(expected,actual);	12.479456901550293	0	0
2	3	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual);	9.178704738616943	1	0
/	4	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.isEmpty());	9.26516580581665	0	0
/	6	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>0);	9.666663885116577	0	0
/	11	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	10.147262811660767	0	0
/	13	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	31.108998775482178	0	0
/	22	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	27.48850703239441	0	0
/	24	//	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(Boolean.parseBoolean(id));	359.2514748573303	0	0
3	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	19.398449182510376	1	0
3	1	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.startsWith(""STR""));"	17.645835876464844	0	0
/	2	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	18.11845827102661	0	0
/	3	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	51.895248889923096	0	0
/	4	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertFalse(normalizedUrl.contains(""STR""));"	18.03082537651062	0	0
/	5	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertNotEquals(""STR"",normalizedUrl);"	18.09877300262451	0	0
/	6	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR""));"	16.754626035690308	0	0
/	7	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertEquals(""STR"",normalizedUrl);"	17.047316074371338	0	0
/	9	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	17.868680000305176	0	0
/	11	//	BasicURLNormalizerTest	testRemoveDupeQueryParams	assertEquals(expectedResult,normalizedUrl);	"assertNotEquals(""STR"",normalizedUrl);"	17.28465986251831	0	0
4	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertEquals(expectedResult,normalizedUrl);	17.083616018295288	1	0
4	1	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertTrue(normalizedUrl.startsWith(expectedResult));	17.0810968875885	0	0
/	2	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	16.691882133483887	0	0
/	3	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertNotNull(normalizedUrl);	34.345767974853516	0	0
/	4	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(inputURL,normalizedUrl);	16.853739023208618	0	0
/	5	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.isEmpty());	19.029361963272095	0	0
/	6	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertNotSame(expectedResult,normalizedUrl);	17.938501119613647	0	0
/	7	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertNotEquals(expectedResult,normalizedUrl.toUpperCase());	17.115049123764038	0	0
/	9	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	"assertTrue(normalizedUrl.contains(""STR""));"	16.706823110580444	0	0
/	10	//	BasicURLNormalizerTest	testLowerCasing	assertEquals(expectedResult,normalizedUrl);	assertFalse(normalizedUrl.equals(inputURL));	17.759609937667847	0	0
5	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(newGenericode10CodeListMarshaller());	17.53499698638916	0	0
/	1	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expectedValue,actualValue);	16.86211109161377	0	0
/	2	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	16.458949089050293	0	0
/	3	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition);	16.697343349456787	0	0
/	4	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expectedValue,actualValue);	16.583570957183838	0	0
/	5	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expectedArray,actualArray);	16.454550743103027	0	0
/	6	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expectedObject,actualObject);	16.857248067855835	0	0
/	9	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	16.92807388305664	0	0
/	10	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expectedValue,actualValue,delta);	16.567081928253174	0	0
/	12	//	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertSame(expectedObject,actualObject);	16.701900959014893	0	0
/	1	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	11.476470708847046	0	0
/	3	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getCloseCode()==CloseFrame.NORMAL);	12.282211065292358	0	0
/	4	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertFalse(frame.getCloseCode()==CloseFrame.GOING_AWAY);	12.152315139770508	0	0
/	8	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	42.95386505126953	0	0
/	13	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotEquals(CloseFrame.PROTOCOL_ERROR,frame.getCloseCode());	12.101683378219604	0	0
/	14	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	75.13133096694946	0	0
/	20	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertTrue(frame.getCloseCode()!=CloseFrame.GOING_AWAY);	12.159791231155396	0	0
/	24	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertSame(CloseFrame.class,frame.getClass());	12.465934991836548	0	0
/	27	//	CloseFrameTest	testExtends	assertEquals(true,frameinstanceofControlFrame);	assertNotNull(frame);	140.0962929725647	0	0
7	1	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0.getProvidedProtocol());	12.835639238357544	0	0
7	2	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	12.215027093887329	1	0
/	3	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.getProvidedProtocol().isEmpty());	11.906533002853394	0	0
/	4	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""STR"",protocol0.getProvidedProtocol());"	11.493860960006714	0	0
/	5	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(protocol0.getProvidedProtocol().contains(""STR""));"	11.999949932098389	0	0
/	7	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotEquals(null,protocol0.getProvidedProtocol());	11.86083197593689	0	0
/	8	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(protocol0.getProvidedProtocol().startsWith(""STR""));"	13.13814115524292	0	0
/	9	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotSame(protocol0,protocol0.copyInstance());	12.359839916229248	0	0
/	10	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.toString().contains(protocol0.getProvidedProtocol()));	12.064633846282959	0	0
/	12	//	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(""STR"",protocol0.toString());"	13.251993179321289	0	0
/	3	//	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	"assertNotNull(""STR"");"	24.670472860336304	0	0
11	0	NanoHttpd/nanohttpd	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertEquals(null,contentEncoding);	15.319749116897583	0	0
/	2	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertTrue(contentEncoding==null||!contentEncoding.getValue().equals(""STR""));"	15.723065853118896	0	0
/	3	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertFalse(response.containsHeader(""STR""));"	14.252679824829102	0	0
/	5	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertTrue(response.getStatusLine().getStatusCode()==200);	14.272159099578857	0	0
/	6	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertNotEquals(""STR"",response.getStatusLine().getReasonPhrase());"	14.750722169876099	0	0
/	7	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertEquals(""STR"",response.getEntity().getContentType().getValue());"	14.383794069290161	0	0
/	8	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertNull(response.getEntity().getContentEncoding());	14.13075304031372	0	0
/	9	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertTrue(response.getStatusLine().getStatusCode()>=200&&response.getStatusLine().getStatusCode()<300);	14.54588508605957	0	0
/	10	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	assertNotNull(response.getEntity());	13.787914991378784	0	0
/	11	//	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	assertNull(contentEncoding);	"assertEquals(""STR"",String.valueOf(response.getStatusLine().getStatusCode()));"	14.095354795455933	0	0
12	2	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(3,result.size());	9.733934164047241	1	0
/	3	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	9.358556270599365	0	0
/	4	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(result.isEmpty());	9.352589130401611	0	0
/	5	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	9.537936210632324	0	0
/	6	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(0,result.size());	10.319912195205688	0	0
/	7	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotSame(jco,result);	10.885885000228882	0	0
/	8	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertSame(jco.getSource(),""STR"");"	9.546231985092163	0	0
/	9	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(jco.isShowWarnings());	32.475926876068115	0	0
/	11	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertEquals(""STR"",jco.getSource());"	9.878921031951904	0	0
/	12	//	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertNotEquals(""STR"",jco.getTarget());"	9.434964895248413	0	0
13	0	open-korean-text/open-korean-text	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	95.204824924469	0	0
/	1	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(4,tokens.size());	434.69008684158325	0	0
/	2	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	309.0437958240509	0	0
/	4	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	141.06797003746033	0	0
/	5	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.iterator().hasNext());	110.51185607910156	0	0
/	6	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotSame(0,tokens.size());	113.79684090614319	0	0
/	8	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0);	118.01783204078674	0	0
/	11	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()<=10);	100.74787473678589	0	0
/	12	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.contains(null));	110.13796401023865	0	0
/	18	//	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertEquals(1,tokens.size());	537.3210160732269	0	0
14	0	sofastack/sofa-bolt	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	18.22651195526123	0	0
/	1	//	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(server);	176.29615998268127	0	0
/	21	//	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(server);	294.0329158306122	0	0
/	3	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(TEST_TOPIC!=null);	390.5095102787018	0	0
/	4	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertFalse(TEST_PRODUCER_GROUP.isEmpty());	11.751031160354614	0	0
/	5	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"assertNotEquals(TEST_NAME_SERVER,""STR"");"	11.824970006942749	0	0
/	11	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotSame(TEST_PRODUCER_GROUP,TEST_CONSUMER_GROUP);	11.858500242233276	0	0
/	13	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertFalse(TEST_NAME_SERVER.isEmpty());	11.675176858901978	0	0
/	14	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"assertNotEquals(TEST_PRODUCER_GROUP,""STR"");"	11.786298990249634	0	0
/	15	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"assertTrue(TEST_PRODUCER_GROUP.contains(""STR""));"	11.594081163406372	0	0
/	18	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"assertTrue(TEST_PRODUCER_GROUP.startsWith(""STR""));"	11.843747854232788	0	0
/	20	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(TEST_PRODUCER_GROUP.length()>0);	11.82526421546936	0	0
/	23	//	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	"assertTrue(TEST_PRODUCER_GROUP.contains(""STR""));"	13.260010957717896	0	0
