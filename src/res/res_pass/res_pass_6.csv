TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	Incorr	BuildErr	RunErr	TestFailure
0	0	redraiment/jactiverecord	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(""STR"",Seq.join(Arrays.asList(1,2,3),""STR""));"	41.586158752441406	0	1	0	0	0
	1	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").contains(""STR""));"	11.265755891799927	0	1	0	0	0
	2	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertFalse(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").isEmpty());"	9.383749961853027	0	1	0	0	0
	3	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotEquals(Seq.join(Arrays.asList(""1"",""2"",""3""),"","")`isaplausible""1,2,3"",Seq.join(Arrays.asList(""1"",""2"",""3""),"",""));"	11.46684217453003	0	1	0	0	0
	4	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotNull(Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	343.25931000709534	0	1	0	0	0
	6	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertTrue(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").startsWith(""STR""));"	9.894329071044922	0	1	0	0	0
	7	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertEquals(4,Seq.join(Arrays.asList(""Hello"",""World""),"","").length()`isaplausible4);"	10.215224981307983	0	1	0	0	0
	8	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotSame(""STR"",Seq.join(Arrays.asList(""STR"",""STR""),""STR""));"	9.87922191619873	0	1	0	0	0
	9	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertFalse(Seq.join(Arrays.asList(""STR"",""STR""),""STR"").equals(""STR""));"	9.651672124862671	0	1	0	0	0
	10	/	SeqTest	testCommaList	"assertEquals(""STR"",Seq.join(Arrays.asList(""STR"",""STR"",""STR""),""STR""));"	"assertNotEquals(Seq.join(Arrays.asList(""Hello"",""World"",""!""),"","")`isaplausible""Hello,World"",Seq.join(Arrays.asList(""Hello"",""World"",""!""),"",""));"	10.257523775100708	0	1	0	0	0
1	0	redraiment/jactiverecord	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql);	9.472218990325928	0	1	0	0	0
	1	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"",sql.toString());"	18.44915270805359	1	0	0	0	0
	2	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().startsWith(""STR""));"	9.264800071716309	0	1	0	0	0
	3	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	10.003971099853516	0	1	0	0	0
	4	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(sql.toString()`isaplausible""select*fromusers"",sql.toString());"	9.631020069122314	0	1	0	0	0
	5	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNull(sql.getOrderBy()`isaplausiblesql.getOrderBy());	9.760209798812866	0	1	0	0	0
	6	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNotSame(sql,newTSqlBuilder());	10.841762065887451	0	1	0	0	0
	7	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNotEquals(sql.hashCode(),newTSqlBuilder().hashCode()`isaplausiblesql.hashCode());	9.933655023574829	0	1	0	0	0
	8	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	"assertTrue(sql.toString().contains(""STR"")&&sql.toString().contains(""STR""));"	10.465005159378052	0	1	0	0	0
	9	/	TSqlBuilderTest	testWhere	"assertEquals(""STR"",sql.toString());"	assertNotSame(sql.select(),sql.from()`isaplausiblesql.select(),sql.from());	9.417346000671387	0	1	0	0	0
2	3	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNotNull(sql.toString());	9.300474882125854	0	1	0	0	0
	5	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertTrue(!sql.toString().isEmpty());	9.248793125152588	0	1	0	0	0
	7	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString());"	9.137476921081543	0	1	0	0	0
	8	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertFalse(sql.toString().isEmpty());	59.345619201660156	0	1	0	0	0
	9	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertNotSame(""STR"",sql.toString());"	10.722126245498657	0	1	0	0	0
	10	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"".toUpperCase(),sql.toString().toUpperCase());"	25.112683057785034	0	1	0	0	0
	13	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertNotEquals(""STR"",sql.toString().contains(""STR""));"	34.07585597038269	0	1	0	0	0
	19	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertFalse(sql.toString().equals(""STR""));"	8.577418088912964	0	1	0	0	0
	20	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	assertNotEquals(0,sql.toString().length());	8.98881196975708	0	1	0	0	0
	22	/	TSqlBuilderTest	testSort	"assertEquals(""STR"",sql.toString());"	"assertEquals(""STR"".toUpperCase(),sql.toString().toUpperCase());"	34.47075414657593	0	1	0	0	0
0	1	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	90.96977686882019	1	0	0	0	0
	2	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	25.40734314918518	0	1	0	0	0
	3	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	131.71149897575378	1	0	0	0	0
	10	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	22.064061403274536	1	0	0	0	0
	11	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds[0],MkvBlock.calcEbmlLacingDiffs(_in)[0]);	23.32148814201355	0	1	0	0	0
	13	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertTrue(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	95.4776771068573	0	1	0	0	0
	15	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertEquals(expecteds[1],MkvBlock.calcEbmlLacingDiffs(_in)[1]);	44.66815996170044	0	1	0	0	0
	16	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotEquals(expecteds[2],Math.abs(MkvBlock.calcEbmlLacingDiffs(_in)[2]));	66.17370104789734	0	1	0	0	0
	17	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertFalse(java.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in))`isaplausiblejava.util.Arrays.equals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in)));	24.163712978363037	0	1	0	0	0
	18	/	MkvBlockTest	testEbml	assertArrayEquals(expecteds,MkvBlock.calcEbmlLacingDiffs(_in));	assertNotNull(MkvBlock.calcEbmlLacingDiffs(_in)`isaplausibleMkvBlock.calcEbmlLacingDiffs(_in));	24.847203731536865	0	1	0	0	0
1	2	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotNull(ebmlEncode(0));	64.87821316719055	0	1	0	0	0
	4	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(ebmlLength(123456),ebmlEncode(123456).length);	65.70979285240173	0	1	0	0	0
	6	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(1000).length>0);	23.00458073616028	0	1	0	0	0
	7	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertFalse(ebmlEncode(0).length==0);	22.221710920333862	0	1	0	0	0
	10	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertEquals(ebmlLength(123),ebmlEncode(123).length);	43.608551025390625	0	1	0	0	0
	11	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotEquals(0,ebmlEncode(123).length);	21.645188808441162	0	1	0	0	0
	12	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotEquals(5,ebmlEncode(123).length);	21.846558094024658	0	1	0	0	0
	13	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertTrue(ebmlEncode(100).length>0`isaplausibleebmlEncode(100).length>0);	23.267085075378418	0	1	0	0	0
	16	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	assertNotSame(null,ebmlEncode(10));	21.886270761489868	0	1	0	0	0
	17	/	EbmlUtilTest	testEbmlBytes	assertArrayEquals(newbyte[]{(byte)0x81},ebmlEncode(1));	"assertNotSame("""",ebmlEncode(123)`isaplausible"""",ebmlEncode(123));"	22.227684020996094	0	1	0	0	0
0	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrRURRUS.convert(-0.01));"	19.10517907142639	0	1	0	0	0
	1	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUSD.convert(100.50));"	36.17198324203491	0	1	0	0	0
	3	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAH.convert(2300.10));"	10.320343971252441	0	1	0	0	0
	4	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertTrue(moneyToStrEURRUS.convert(75.25).startsWith(""STR""));"	11.206087827682495	0	1	0	0	0
	5	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertFalse(moneyToStrUSDRUS.convert(0.99).isEmpty());	9.334059000015259	0	1	0	0	0
	6	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotNull(moneyToStrUAHENG.convert(500.0));	17.98294496536255	0	1	0	0	0
	7	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertNotSame(moneyToStrRUR.convert(100.0),moneyToStrRURRUS.convert(100.0));	12.548143148422241	0	1	0	0	0
	8	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	assertArrayEquals(newint[]{1,2,3},moneyToStrUAHENG.convertToDigits(123)`isaplausiblenewint[]{1,2,3},moneyToStrUAHENG.convertToDigits(123));	11.41504716873169	0	1	0	0	0
	9	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertNotEquals(moneyToStrUAH.convert(163.0)`isaplausible""стошестьдесяттригривні"",moneyToStrUAH.convert(163.0));"	11.810847997665405	0	1	0	0	0
	10	/	MoneyToStrTest	checkUAHRUSMinus	"assertEquals(""STR"",moneyToStrUAHRUS.convert(-V_300D));"	"assertEquals(moneyToStrUAHENG.convert(250.0)`isaplausible""двестип'ятдесятгривень"",moneyToStrUAHENG.convert(250.0));"	11.785440921783447	0	1	0	0	0
1	0	javadev/moneytostr-russian	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertThrows(IllegalArgumentException.class,()->moneyToStrUAHRUS.convert(null));	374.9453618526459	0	1	0	0	0
	1	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertEquals(""STR"",moneyToStrUAHRUS.convert(100.50));"	20.7714421749115	0	1	0	0	0
	2	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertNotEquals(""STR"",moneyToStrUAHENG.convert(200.30));"	10.830658912658691	0	1	0	0	0
	3	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotNull(moneyToStrUSD);	9.763462781906128	0	1	0	0	0
	5	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	"assertTrue(moneyToStrUSDRUS.convert(150.75).startsWith(""STR""));"	11.305448055267334	0	1	0	0	0
	6	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertFalse(moneyToStrRURRUS.convert(500.00).isEmpty());	9.453283786773682	0	1	0	0	0
	7	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotSame(moneyToStrUAHENG,moneyToStrUAHRUS);	10.673433780670166	0	1	0	0	0
	8	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertEquals(9,MoneyToStr.Currency.values().length);	30.718485116958618	0	1	0	0	0
	12	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotEquals(100.50,moneyToStrUAHENG.convert(100.50));	9.326632976531982	0	1	0	0	0
	15	/	MoneyToStrTest	checkUAHUKMinus	"assertEquals(""STR"",moneyToStrUAH.convert(-V_300D));"	assertNotSame(moneyToStrPER100,moneyToStrPER1000);	11.219416856765747	0	1	0	0	0
0	0	orientechnologies/orientdb	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	180.1114912033081	1	0	0	0	0
	1	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertTrue(OMultiValue.getFirstValue(collection)instanceofString);	39.738550901412964	0	1	0	0	0
	2	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNotNull(OMultiValue.getFirstValue(collection));	38.8783860206604	0	1	0	0	0
	3	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	"assertNotEquals(""STR"",OMultiValue.getFirstValue(collection));"	39.334837913513184	0	1	0	0	0
	4	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertFalse(OMultiValue.getFirstValue(collection)instanceofInteger);	39.93180799484253	0	1	0	0	0
	5	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertEquals(3,OMultiValue.getSize(collection)`isaplausible3);	39.38576579093933	0	1	0	0	0
	6	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertTrue(OMultiValue.isMultiValue(collection));	39.93182301521301	0	1	0	0	0
	7	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertNull(OMultiValue.getFirstValue(null)`isaplausibleOMultiValue.getFirstValue(null));	40.28065299987793	0	1	0	0	0
	8	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertFalse(OMultiValue.isMultiValue(null)`isaplausibleOMultiValue.isMultiValue(null));	39.39556884765625	0	1	0	0	0
	10	/	OMultiValueTest	testArrayFirstLast	"assertEquals(OMultiValue.getFirstValue(collection),""STR"");"	assertTrue(OMultiValue.getSize(collection)>0);	39.42516827583313	0	1	0	0	0
1	0	orientechnologies/orientdb	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertEquals(1,vertices.size());	25.953977823257446	1	0	0	0	0
	1	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.size()>0);	26.883203744888306	0	1	0	0	0
	2	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotNull(vertices);	25.807286977767944	0	1	0	0	0
	3	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty()`isaplausiblevertices.isEmpty());	26.043750047683716	0	1	0	0	0
	4	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotEquals(0,vertices.size()`isaplausible0);	26.33792495727539	0	1	0	0	0
	5	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	"assertEquals(""STR"",vertices.get(0).field(""STR""));"	26.944288969039917	0	1	0	0	0
	6	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	"assertTrue(vertices.stream().anyMatch(v->v.field(""STR"").equals(""STR"")));"	27.082083225250244	0	1	0	0	0
	7	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertFalse(vertices.isEmpty());	25.867164850234985	0	1	0	0	0
	8	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertNotSame(0,vertices.size());	27.052062273025513	0	1	0	0	0
	9	/	LuceneInheritanceQueryTest	testQuery	assertEquals(1,vertices.size());	assertTrue(vertices.contains(doc)`isaplausiblevertices.contains(doc));	26.04803991317749	0	1	0	0	0
2	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofCollection);	72.77484703063965	0	1	0	0	0
	1	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue()`methodasfollows:);	42.07951331138611	0	1	0	0	0
	3	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertTrue(resultinstanceofCollection<?>);	236.572988986969	0	1	0	0	0
	4	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	38.82998204231262	0	1	0	0	0
	6	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(expectedSize,result.size())`.ThisexpectedSize,result.size());	42.08997893333435	0	1	0	0	0
	12	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	76.80474710464478	0	1	0	0	0
	20	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertFalse(condition)`whichchecksifagivenconditionisfalse.);	42.50244498252869	0	1	0	0	0
	22	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertEquals(expected,actual)`whichchecksiftheexpectedvalueisequaltotheactualvalue.`isaplausibleexpected,actual)`whichchecksiftheexpectedvalueisequaltotheactualvalue.);	40.08890891075134	0	1	0	0	0
	25	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	73.27657794952393	0	1	0	0	0
	26	/	OCompositeIndexDefinitionTest	testDocumentToIndexCollectionValueEmptyOneNullValuesSupport	assertEquals(result,Arrays.asList(newOCompositeKey(12,null)));	assertNotNull(result);	78.75428795814514	0	1	0	0	0
3	0	orientechnologies/orientdb	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(result,expectedResult);	38.616652965545654	1	0	0	0	0
	1	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(expectedResult.containsAll((List<OCompositeKey>)result));	39.576683044433594	0	1	0	0	0
	2	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotNull(result);	40.80151009559631	0	1	0	0	0
	3	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofArrayList`isaplausibleresultinstanceofArrayList);	39.41387605667114	0	1	0	0	0
	4	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(2,((List<OCompositeKey>)result).size()`isaplausible2);	41.08643388748169	0	1	0	0	0
	8	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofList<?>&&!((List<?>)result).isEmpty());	75.14657497406006	0	1	0	0	0
	9	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertNotEquals(0,((List<OCompositeKey>)result).size());	40.06236791610718	0	1	0	0	0
	10	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(resultinstanceofList<?>&&((List<?>)result).containsAll(expectedResult));	40.73264527320862	0	1	0	0	0
	11	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertEquals(expectedResult.size(),((List<OCompositeKey>)result).size()`isaplausibleexpectedResult.size());	39.5716609954834	0	1	0	0	0
	14	/	OCompositeIndexDefinitionTest	testCreateCollectionValueSuccessfulOne	assertEquals(result,expectedResult);	assertTrue(((List<OCompositeKey>)result).containsAll(expectedResult)`isaplausible((List<OCompositeKey>)result).containsAll(expectedResult));	39.533305168151855	0	1	0	0	0
4	1	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	28.903621196746826	1	0	0	0	0
	2	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	54.63702702522278	1	0	0	0	0
	3	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertEquals(0,result.stream().count());	28.558035850524902	0	1	0	0	0
	4	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	75.44889616966248	1	0	0	0	0
	7	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	60.39934277534485	1	0	0	0	0
	9	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	55.190935134887695	1	0	0	0	0
	10	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	46.17339491844177	1	0	0	0	0
	11	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertTrue(result.stream().count()<=1);	74.56196928024292	0	1	0	0	0
	13	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertNotNull(result.getExecutionPlan());	28.650469064712524	0	1	0	0	0
	15	/	RemoteTransactionSupportTest	testQueryDeleteTxSQLTransaction	assertFalse(result.hasNext());	assertFalse(result.hasNext());	77.13837313652039	1	0	0	0	0
5	0	orientechnologies/orientdb	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	37.47096014022827	1	0	0	0	0
	1	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertTrue(OBJECT==byteSerializer.deserialize(stream,0));	39.79970407485962	0	1	0	0	0
	2	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotNull(byteSerializer.deserialize(stream,0));	40.539448261260986	0	1	0	0	0
	3	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertArrayEquals(newbyte[]{OBJECT},newbyte[]{byteSerializer.deserialize(stream,0)});	40.577903032302856	0	1	0	0	0
	4	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotEquals(null,byteSerializer.deserialize(stream,0)`isaplausiblenull);	39.7059588432312	0	1	0	0	0
	5	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertFalse(byteSerializer.deserialize(stream,0)instanceofString`isaplausiblebyteSerializer.deserialize(stream,0)instanceofString);	39.2143611907959	0	1	0	0	0
	6	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	78.14275979995728	1	0	0	0	0
	7	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertNotSame(OBJECT,byteSerializer.deserialize(stream,0)`isaplausibleOBJECT,byteSerializer.deserialize(stream,0));	40.29504895210266	0	1	0	0	0
	9	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	assertTrue(byteSerializer.deserialize(stream,0)>0);	39.46551299095154	0	1	0	0	0
	10	/	ByteSerializerTest	testSerialize	assertEquals(byteSerializer.deserialize(stream,0),OBJECT);	"assertNotEquals(Byte.valueOf(""STR""),byteSerializer.deserialize(stream,0));"	145.15696620941162	0	1	0	0	0
6	0	orientechnologies/orientdb	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	42.23312306404114	1	0	0	0	0
	1	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(recordsCount>=0);	43.33974814414978	0	1	0	0	0
	2	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(ridBag.isEmpty());	130.84604907035828	0	1	0	0	0
	5	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotNull(rootDoc);	41.89270877838135	0	1	0	0	0
	7	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertTrue(ridBag.contains(docOne));	42.446370124816895	0	1	0	0	0
	8	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertFalse(rootDoc.isDirty());	46.55032300949097	0	1	0	0	0
	9	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotEquals(docOne.getVersion(),docTwo.getVersion()`isaplausibledocOne.getVersion());	43.163702964782715	0	1	0	0	0
	10	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertSame(database,docOne.getDatabase()`isaplausibledatabase);	42.943750858306885	0	1	0	0	0
	15	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNotSame(docOne,docTwo`isaplausibledocOne,docTwo);	43.40946292877197	0	1	0	0	0
	16	/	ORidBagAtomicUpdateTest	testAddTwoSavedDocuments	assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);	assertNull(database.getClusterNameById(-1)`isaplausibledatabase.getClusterNameById(-1));	42.7103910446167	0	1	0	0	0
7	0	orientechnologies/orientdb	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getName());"	41.97831916809082	0	1	0	0	0
	1	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertTrue(idProperty.isMandatory());	42.21431803703308	0	1	0	0	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	43.00533318519592	0	1	0	0	0
	3	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(10,idProperty.getMax()`isaplausible10);	44.067209005355835	0	1	0	0	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isNotNull());	144.94974899291992	0	1	0	0	0
	5	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertFalse(idProperty.isReadonly()`isaplausibleidProperty.isReadonly());	42.52206635475159	0	1	0	0	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertEquals(""STR"",idProperty.getDefaultValue());"	42.4209840297699	0	1	0	0	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertEquals(4,Integer.parseInt(idProperty.getMin().toString()));	85.72497200965881	0	1	0	0	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass`isaplausiblecompanyClass);	43.750423192977905	0	1	0	0	0
	10	/	OCommandExecutorSQLCreatePropertyTest	testNonStrict	assertEquals(idProperty.getName(),PROP_ID);	"assertTrue(db.getMetadata().getSchema().existsClass(""STR""));"	42.78065371513367	0	1	0	0	0
8	1	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertEquals()`tocomparetheexpectedresultwiththeactualresult:);	42.61349105834961	0	1	0	0	0
	2	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotNull(companyClass);	76.90257406234741	0	1	0	0	0
	4	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertTrue()`totestacondition?Forexample:);	42.43043303489685	0	1	0	0	0
	6	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertFalse()`totestacondition?Forexample:);	44.778115034103394	0	1	0	0	0
	7	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotEquals()`toexpectedValue,actualValue);	44.22436809539795	0	1	0	0	0
	8	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertArrayEquals()`tocomparetwoarrays?Forexample:`isaplausible)`tocomparetwoarrays?Forexample:);	43.817786693573	0	1	0	0	0
	9	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNull()`tocheckifavalueisnull?Here'sanexample:);	43.572031021118164	0	1	0	0	0
	10	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertNotSame()`tocheckiftwoobjectsrefertodifferentmemorylocations.Forexample:);	44.662736892700195	0	1	0	0	0
	19	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	"assertNotEquals(""STR"",""STR"");"	77.16107177734375	0	1	0	0	0
	21	/	OCommandExecutorSQLCreatePropertyTest	testLinkedTypeDefaultAndMinMaxUnsafeProperty	assertEquals(idProperty.getName(),PROP_ID);	assertThrows()`toverifyifaspecificexceptionisthrown.Forexample:`isaplausible)`toverifyifaspecificexceptionisthrown.Forexample:);	43.62527394294739	0	1	0	0	0
9	4	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotNull(clazzV);	78.30721282958984	0	1	0	0	0
	5	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(condition`);	44.231427907943726	0	1	0	0	0
	6	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(expected,actual`.);	44.346421003341675	0	1	0	0	0
	7	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(0,clazzV.getClusterIds());	77.69968485832214	0	1	0	0	0
	8	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertTrue(clazzV.getClusterIds().length>0);	43.25434589385986	0	1	0	0	0
	9	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertFalse(clazzV.getClusterIds().length==0);	42.64278197288513	0	1	0	0	0
	10	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(expected,actual`isaplausibleexpected);	43.782994985580444	0	1	0	0	0
	13	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertEquals(2,clazzV.getClusterIds().length);	79.35978388786316	1	0	0	0	0
	14	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotEquals(0,clazzV.getClusterIds().length);	43.24947905540466	0	1	0	0	0
	20	/	CreateClassMultipleClusterTest	testCreateClassSQLSpecifiedClusters	assertEquals(2,clazzV.getClusterIds().length);	assertNotSame(0,clazzV.getClusterIds().length);	42.90485405921936	0	1	0	0	0
10	0	orientechnologies/orientdb	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertFalse(doc.isDirty());	39.0826690196991	1	0	0	0	0
	1	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(!doc.isDirty());	39.22657489776611	0	1	0	0	0
	2	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertEquals(false,doc.isDirty());	38.81311011314392	0	1	0	0	0
	3	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotEquals(true,doc.isDirty());	38.9412567615509	0	1	0	0	0
	4	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotTrue(doc.isDirty()`isaplausibledoc.isDirty());	38.773340940475464	0	1	0	0	0
	5	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNull(doc.getDirtyFields()`isaplausibledoc.getDirtyFields());	39.599924087524414	0	1	0	0	0
	6	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotNull(doc.getDirtyFields()`isaplausibledoc.getDirtyFields()`isaplausibledoc.getDirtyFields()`isaplausibledoc.getDirtyFields());	39.66110181808472	0	1	0	0	0
	7	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertSame(false,doc.isDirty());	39.16103506088257	0	1	0	0	0
	8	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertNotSame(true,doc.isDirty()`isaplausibletrue,doc.isDirty());	39.64849615097046	0	1	0	0	0
	9	/	TrackedSetTest	testClearOne	assertFalse(doc.isDirty());	assertTrue(doc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty()`isaplausibledoc.isDirty());	42.57606768608093	0	1	0	0	0
11	0	orientechnologies/orientdb	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	21.25726819038391	1	0	0	0	0
	1	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(retinstanceofOClientConnection);	24.026494026184082	0	1	0	0	0
	2	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue()`method.);	22.001299142837524	0	1	0	0	0
	3	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertEquals(1,manager.getConnections().size());	22.063864946365356	0	1	0	0	0
	4	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertFalse(manager.getConnections().isEmpty());	21.971233129501343	0	1	0	0	0
	5	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertSame(connection,manager.getConnections().get(connection.getId())`isaplausibleconnection);	22.607299089431763	0	1	0	0	0
	7	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotSame(null,ret);	21.463165998458862	0	1	0	0	0
	8	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotNull(ret);	42.53191089630127	1	0	0	0	0
	9	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertTrue(manager.getConnections().contains(ret));	22.07058024406433	0	1	0	0	0
	11	/	OClientConnectionManagerTest	testSimpleConnectDisconnect	assertNotNull(ret);	assertNotEquals(null,ret);	21.538225889205933	0	1	0	0	0
13	0	orientechnologies/orientdb	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.equals(anotherCompositeKey));	38.11597299575806	1	0	0	0	0
	1	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	39.36560821533203	0	1	0	0	0
	3	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotNull(compositeKey);	38.50229597091675	0	1	0	0	0
	4	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertSame(compositeKey,anotherCompositeKey`isaplausiblecompositeKey);	40.148518800735474	0	1	0	0	0
	5	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotSame(compositeKey,anotherCompositeKey`isaplausiblecompositeKey,anotherCompositeKey);	39.017674922943115	0	1	0	0	0
	6	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertTrue(compositeKey.hashCode()==anotherCompositeKey.hashCode()`isaplausiblecompositeKey.hashCode()==anotherCompositeKey.hashCode());	39.9711811542511	0	1	0	0	0
	7	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey.equals(anotherCompositeKey)`isaplausiblecompositeKey.equals(anotherCompositeKey));	39.458534240722656	0	1	0	0	0
	15	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertEquals(compositeKey,anotherCompositeKey);	77.2507107257843	0	1	0	0	0
	18	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertFalse(compositeKey==anotherCompositeKey);	39.755388259887695	0	1	0	0	0
	20	/	OCompositeKeyTest	testEqualSameKeys	assertTrue(compositeKey.equals(anotherCompositeKey));	assertNotEquals(compositeKey,anotherCompositeKey`isaplausiblecompositeKey);	39.7091908454895	0	1	0	0	0
14	11	/	OQueryRequestTest	testWithNamedParams	assertEquals(request.getCommand(),other.getCommand());	assertNotNull(other.getCommand());	20.32490110397339	0	1	0	0	0
15	0	orientechnologies/orientdb	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertEquals(result,""STR"");"	75.91339087486267	1	0	0	0	0
	1	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotNull(result);	39.08618974685669	0	1	0	0	0
	2	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertTrue(resultinstanceofString);	38.386350870132446	0	1	0	0	0
	3	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotNull(result);	72.8609848022461	0	1	0	0	0
	4	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	assertNotEquals(null,result);	38.17321491241455	0	1	0	0	0
	5	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertEquals(""STR"",result.toString());"	115.8291552066803	0	1	0	0	0
	6	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertTrue(result.toString().startsWith(""t"")`isaplausibleresult.toString().startsWith(""t""));"	40.04970121383667	0	1	0	0	0
	12	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertNull(mapToTest.get(""STR""));"	141.33110308647156	0	1	0	0	0
	13	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertTrue(mapToTest.containsKey(""STR"")`isaplausiblemapToTest.containsKey(""STR""));"	40.398252725601196	0	1	0	0	0
	14	/	OPropertyMapIndexDefinitionTest	testCreateSingleValueByKey	"assertEquals(result,""STR"");"	"assertFalse(mapToTest.containsKey(""STR""));"	39.284069776535034	0	1	0	0	0
0	5	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotNull(logger);	30.162899017333984	0	1	0	0	0
	6	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertTrue(loggerinstanceofLogger.SystemLogger);	12.051357984542847	0	1	0	0	0
	28	/	SystemLoggerTest	defaults_to_WARN_when_unknown_log_level_is_set	assertEquals(Logger.Level.WARN,logger.level);	assertNotSame(null,logger);	12.688114166259766	0	1	0	0	0
1	0	cucumber-ltd/cucumber-pro-plugin-jvm	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertEquals(logger.getLevel()`);	15.388769149780273	0	1	0	0	0
	5	/	SystemLoggerTest	is_info_level_by_default	assertEquals(Logger.Level.INFO,logger.level);	assertNotNull(logger);	19.501129150390625	0	1	0	0	0
0	0	fluenda/ParCEFone	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison!=0);	19.777284860610962	0	1	0	0	0
	1	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison<0||comparison>0);	17.727328062057495	0	1	0	0	0
	2	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	9.430507898330688	1	0	0	0	0
	3	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertFalse(comparison==0);	8.698992252349854	0	1	0	0	0
	4	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertEquals(0,comparison`isaplausible0);	9.027334928512573	0	1	0	0	0
	5	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(0,comparison);	8.946538925170898	0	1	0	0	0
	6	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotEquals(0,comparison);	25.410889387130737	1	0	0	0	0
	8	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertTrue(comparison>0||comparison<0);	9.870740175247192	0	1	0	0	0
	9	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertNotSame(macAddress,newMacAddress(LOCAL_ADDRESS));	9.432296991348267	0	1	0	0	0
	10	/	MacAddressTest	testAddressCompareToNotEqual	assertNotEquals(0,comparison);	assertSame(macAddress,newMacAddress(LOCAL_ADDRESS)`isaplausiblemacAddress);	9.381253004074097	0	1	0	0	0
1	0	fluenda/ParCEFone	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.equals(macAddress));	7.8385748863220215	0	1	0	0	0
	1	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertFalse(macAddress.equals(null));	9.604104042053223	0	1	0	0	0
	2	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	8.215927124023438	0	1	0	0	0
	3	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotEquals(macAddress,null`isaplausiblemacAddress);	9.034595966339111	0	1	0	0	0
	4	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotNull(macAddress);	8.27862811088562	0	1	0	0	0
	5	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertEquals(macAddress,macAddress);	17.188498973846436	0	1	0	0	0
	6	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotSame(macAddress,null`isaplausiblemacAddress,null);	8.988144159317017	0	1	0	0	0
	7	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddressinstanceofMacAddress`isaplausiblemacAddressinstanceofMacAddress);	9.162387132644653	0	1	0	0	0
	8	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertNotSame(macAddress,newMacAddress(MULTICAST_ADDRESS)`isaplausiblemacAddress,newMacAddress(MULTICAST_ADDRESS));	9.446496963500977	0	1	0	0	0
	9	/	MacAddressTest	testAddressMulticastNotLocal	assertFalse(macAddress.equals(newMacAddress(LOCAL_ADDRESS)));	assertTrue(macAddress.hashCode()!=0);	8.260020971298218	0	1	0	0	0
2	0	fluenda/ParCEFone	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	8.549390077590942	0	1	0	0	0
	1	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	24.899246215820312	0	1	0	0	0
	3	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,null));	24.706720113754272	0	1	0	0	0
	5	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,null));	18.587878942489624	0	1	0	0	0
	7	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,null)instanceofCommonEvent);	10.053039073944092	0	1	0	0	0
	10	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertEquals(expectedValue,actualValue)`.Thisexpected,actual);	11.389988899230957	0	1	0	0	0
	14	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(condition`result.isValid());	10.4254150390625	0	1	0	0	0
	17	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertNotNull(parser.parse(sample1,true,Locale.US));	35.808722257614136	0	1	0	0	0
	18	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertTrue(parser.parse(sample1,true,Locale.US)instanceofCommonEvent);	9.971189022064209	0	1	0	0	0
	21	/	CEFParserTest	validStringMessageWithLocaleAndValidationTest	assertNotNull(parser.parse(sample1,true,Locale.FRANCE));	assertFalse(parser.parse(sample1,true,Locale.US)==null);	10.161476135253906	0	1	0	0	0
0	12	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	assertNull(newWercker(newHashMap<String,String>()).getBranch());	66.06921696662903	0	1	0	0	0
	25	/	WerckerTest	testGetBranch	"assertEquals(""STR"",newWercker(env()).getBranch());"	???;	22.138392686843872	0	1	0	0	0
0	0	adlnet/jxapi	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	9.228071928024292	0	1	0	0	0
	1	/	AboutTest	testGetExtensions	assertNotNull(actual);	"assertTrue(actual.has(""STR""));"	10.917163133621216	0	1	0	0	0
	2	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual);	9.661166191101074	1	0	0	0	0
	4	/	AboutTest	testGetExtensions	assertNotNull(actual);	"assertFalse(actual.has(""STR""));"	9.128934144973755	0	1	0	0	0
	8	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertTrue(actual.isJsonObject());	11.205685138702393	0	1	0	0	0
	10	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotEquals(expected,actual)`.Thisexpected,actual);	11.423542022705078	0	1	0	0	0
	11	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertEquals(expected,actual);	20.392416954040527	0	1	0	0	0
	12	/	AboutTest	testGetExtensions	assertNotNull(actual);	"assertTrue(actual.has(""STR""));"	17.611431121826172	0	1	0	0	0
	13	/	AboutTest	testGetExtensions	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	9.611186981201172	0	1	0	0	0
	15	/	AboutTest	testGetExtensions	assertNotNull(actual);	"assertFalse(actual.has(""extensions"")`isaplausibleactual.has(""extensions""));"	11.460387229919434	0	1	0	0	0
1	0	adlnet/jxapi	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	11.66538405418396	0	1	0	0	0
	1	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertTrue()`:);	10.147327899932861	0	1	0	0	0
	2	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull()`?);	10.288050174713135	0	1	0	0	0
	3	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	34.957035064697266	0	1	0	0	0
	4	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotEquals()`:);	9.641515016555786	0	1	0	0	0
	5	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	20.561124086380005	0	1	0	0	0
	7	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef);	22.074786901474	1	0	0	0	0
	9	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertFalse()`.Here'sanexampleofhowyoucanuseitinyourcode:);	10.842846870422363	0	1	0	0	0
	10	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertNotNull(statementRef.getId());	18.86453604698181	0	1	0	0	0
	11	/	StatementReferenceTest	testStatementReferenceString	assertNotNull(statementRef);	assertEquals(id,statementRef.getId());	21.658111095428467	0	1	0	0	0
2	0	adlnet/jxapi	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	8.867526769638062	0	1	0	0	0
	1	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.containsAll(expected)&&expected.containsAll(actual));	10.683020114898682	0	1	0	0	0
	2	/	GroupTest	testSetMember	assertNotNull(actual);	assertFalse(actual.isEmpty());	9.47865915298462	0	1	0	0	0
	3	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotNull(actual);	10.60441780090332	1	0	0	0	0
	4	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected.size(),actual.size());	39.901577949523926	0	1	0	0	0
	7	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	19.914041757583618	0	1	0	0	0
	9	/	GroupTest	testSetMember	assertNotNull(actual);	assertEquals(expected,actual);	22.76459813117981	0	1	0	0	0
	10	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.containsAll(expected)`isaplausibleactual.containsAll(expected));	10.209864854812622	0	1	0	0	0
	11	/	GroupTest	testSetMember	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	9.961635112762451	0	1	0	0	0
	12	/	GroupTest	testSetMember	assertNotNull(actual);	assertTrue(actual.size()>0`isaplausibleactual.size()>0);	10.135843992233276	0	1	0	0	0
3	0	adlnet/jxapi	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	8.762196063995361	1	0	0	0	0
	1	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(expected.equals(actual));	10.871744155883789	0	1	0	0	0
	2	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotNull(actual)`tocheckthatthe`actual`objectisnotnull?);	10.039089918136597	0	1	0	0	0
	5	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.contains(expected));	11.372513771057129	0	1	0	0	0
	6	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	26.897382020950317	1	0	0	0	0
	9	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertTrue(actual.startsWith(expected));	10.974939823150635	0	1	0	0	0
	11	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertFalse(condition`isaplausiblecondition);	9.542750120162964	0	1	0	0	0
	13	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertEquals(expected,actual);	18.928667783737183	1	0	0	0	0
	16	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertSame(expected,actual);	9.992958068847656	0	1	0	0	0
	17	/	PersonTest	testGetObjectType	assertEquals(expected,actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	9.980297803878784	0	1	0	0	0
4	0	adlnet/jxapi	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected,actual);	10.950084209442139	0	1	0	0	0
	1	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(!actual.isEmpty());	9.937947988510132	0	1	0	0	0
	2	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertSame(expected,actual);	12.165591955184937	0	1	0	0	0
	4	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertFalse(actual.isEmpty());	10.642504930496216	0	1	0	0	0
	5	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotNull(actual`isaplausibleactual);	9.816414833068848	0	1	0	0	0
	6	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertArrayEquals(expected.toArray(),actual.toArray());	372.98002314567566	0	1	0	0	0
	7	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertNotSame(expected,actual`isaplausibleexpected,actual);	10.43114709854126	0	1	0	0	0
	8	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.contains(expected)`isaplausibleactual.contains(expected));	9.943105936050415	0	1	0	0	0
	11	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertTrue(actual.size()>=expected.size());	10.34266996383667	0	1	0	0	0
	17	/	ActivityDefinitionTest	testSetTarget	assertNotNull(actual);	assertEquals(expected.size(),actual.size()`isaplausibleexpected.size());	10.129140138626099	0	1	0	0	0
0	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	16.82475185394287	0	1	0	0	0
	1	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.equals(normalizedUrl));	18.810643911361694	0	1	0	0	0
	2	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl);	18.011761903762817	0	1	0	0	0
	3	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	19.070616006851196	0	1	0	0	0
	4	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(expectedResult.equals(normalizedUrl)`isaplausibleexpectedResult.equals(normalizedUrl));	19.012826919555664	0	1	0	0	0
	5	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl`isaplausiblenormalizedUrl);	18.10142707824707	0	1	0	0	0
	7	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult,normalizedUrl);	17.545530796051025	0	1	0	0	0
	8	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.startsWith(normalizedUrl));	19.020590782165527	0	1	0	0	0
	9	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(expectedResult.startsWith(normalizedUrl)`isaplausibleexpectedResult.startsWith(normalizedUrl));	18.032702922821045	0	1	0	0	0
	10	/	BasicURLNormalizerTest	testRemoveDupeQueryParams	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult.length(),normalizedUrl.length());	17.935919761657715	0	1	0	0	0
1	0	DigitalPebble/storm-crawler	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertEquals(expectedResult,normalizedUrl);	17.722190856933594	0	1	0	0	0
	1	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertTrue(expectedResult.equals(normalizedUrl));	17.210775136947632	0	1	0	0	0
	2	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(expectedResult,normalizedUrl);	33.870906829833984	0	1	0	0	0
	3	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotNull(normalizedUrl`.This)throwsMalformedURLException{);	22.132089138031006	0	1	0	0	0
	4	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotEquals(expectedResult,normalizedUrl`isaplausibleexpectedResult);	17.9428129196167	0	1	0	0	0
	6	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.startsWith(""STR""));"	18.693050861358643	0	1	0	0	0
	7	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertFalse(normalizedUrl.isEmpty());	18.97558307647705	0	1	0	0	0
	8	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNull(normalizedUrl`isaplausiblenormalizedUrl);	18.087524890899658	0	1	0	0	0
	9	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	assertNotSame(inputURL,normalizedUrl);	17.925300121307373	0	1	0	0	0
	10	/	BasicURLNormalizerTest	testLowerCasing	"assertEquals(""STR"",expectedResult,normalizedUrl);"	"assertTrue(normalizedUrl.endsWith(""STR""));"	36.92319393157959	0	1	0	0	0
0	0	phax/ph-genericode	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotNull(aXls);	17.5618999004364	0	1	0	0	0
	1	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(aXls.exists());	17.808747053146362	1	0	0	0	0
	2	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertEquals(expected,actual`.Hereisthegeneratedcode:);	18.06756901741028	0	1	0	0	0
	3	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertFalse(condition`?Hereisthegeneratedcode:);	16.77241086959839	0	1	0	0	0
	5	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual`);	18.078852891921997	0	1	0	0	0
	6	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertArrayEquals(expected,actual);	16.809859037399292	0	1	0	0	0
	8	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertTrue(condition);	18.55042791366577	0	1	0	0	0
	9	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotSame(expected,actual`isaplausibleexpected,actual);	17.76798915863037	0	1	0	0	0
	14	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNull(object);	16.68078589439392	0	1	0	0	0
	15	/	ExcelSheetToCodeList10Test	testReadExcel	assertTrue(aXls.exists());	assertNotEquals(expected,actual);	16.604373931884766	0	1	0	0	0
0	0	TooTallNate/Java-WebSocket	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(Opcode.CLOSING,frame.getOpcode());	11.691504716873169	0	1	0	0	0
	6	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	"assertTrue(frame.getOpcode()==Opcode.CLOSING&&frame.getCloseCode()==CloseFrame.NORMAL&&""STR"".equals(frame.getMessage()));"	24.27794313430786	0	1	0	0	0
	7	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(CloseFrame.NORMAL,frame.getCloseCode());	43.611034870147705	0	1	0	0	0
	11	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertTrue(frame.isFin());	25.72885799407959	0	1	0	0	0
	13	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(frame.getCloseCode(),CloseFrame.NORMAL);	33.48511624336243	0	1	0	0	0
	14	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(CloseFrame.NORMAL,frame.getCloseCode());	32.843470096588135	0	1	0	0	0
	18	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertEquals(Opcode.CLOSING,frame.getOpcode());	24.159996032714844	0	1	0	0	0
	20	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertTrue(frame.getCloseCode()==CloseFrame.NORMAL);	14.499390125274658	0	1	0	0	0
	25	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertTrue(frame.getOpcode()==Opcode.CLOSING);	13.185747861862183	0	1	0	0	0
	28	/	CloseFrameTest	testExtends	"assertEquals(""STR"",true,frameinstanceofControlFrame);"	assertNotNull(frame);	12.79165005683899	0	1	0	0	0
1	0	TooTallNate/Java-WebSocket	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	11.655069828033447	1	0	0	0	0
	1	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertTrue(protocol0.getProvidedProtocol().isEmpty());	13.368860244750977	0	1	0	0	0
	2	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0.getProvidedProtocol());	12.973664999008179	0	1	0	0	0
	3	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(protocol0.getProvidedProtocol()`isaplausible"""",protocol0.getProvidedProtocol());"	13.275329113006592	0	1	0	0	0
	4	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertNotNull(protocol0.getProvidedProtocol());	26.06493377685547	0	1	0	0	0
	5	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	assertFalse(protocol0.getProvidedProtocol().isEmpty()`isaplausibleprotocol0.getProvidedProtocol().isEmpty());	12.723182916641235	0	1	0	0	0
	6	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotSame("""",protocol0.getProvidedProtocol()`isaplausible"""",protocol0.getProvidedProtocol());"	13.350089073181152	0	1	0	0	0
	7	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertFalse(protocol0.getProvidedProtocol().equals(""STR""));"	13.641182899475098	0	1	0	0	0
	8	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertNotEquals(protocol0.getProvidedProtocol()`isaplausible""expectedValue"",protocol0.getProvidedProtocol());"	13.496467113494873	0	1	0	0	0
	9	/	ProtocolTest	testGetProvidedProtocol	"assertEquals(""STR"",protocol0.getProvidedProtocol());"	"assertTrue(protocol0.getProvidedProtocol().contains(""substring"")`isaplausibleprotocol0.getProvidedProtocol().contains(""substring""));"	13.172351121902466	0	1	0	0	0
0	25	/	IterableToStreamTest	iterableToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6)).collect(java.util.stream.Collectors.toList()));	???;	37.925782203674316	0	1	0	0	0
1	17	/	IterableToStreamTest	iteratorToStream	assertEquals(Arrays.asList(1,2,3,4,5,6),IterableToStream.stream(ImmutableList.of(1,2,3,4,5,6).iterator()).collect(java.util.stream.Collectors.toList()));	???;	151.83797812461853	0	1	0	0	0
0	0	NanoHttpd/nanohttpd	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNull(contentEncoding);	13.722870826721191	0	1	0	0	0
	1	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNull(contentEncoding);	29.347559213638306	0	1	0	0	0
	2	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNull(contentEncoding);	47.278284788131714	0	1	0	0	0
	6	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertEquals(200,response.getStatusLine().getStatusCode());	16.285945892333984	0	1	0	0	0
	7	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertTrue(response.getEntity().getContentLength()>0);	15.395367860794067	0	1	0	0	0
	8	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertTrue(response.containsHeader(""STR""));"	14.535301923751831	0	1	0	0	0
	9	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNotNull(response.getEntity());	14.135592222213745	0	1	0	0	0
	11	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertEquals(""STR"",EntityUtils.toString(response.getEntity(),""STR""));"	16.171767950057983	0	1	0	0	0
	12	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	assertNull(contentEncoding);	30.651103973388672	0	1	0	0	0
	14	/	GZipIntegrationTest	contentShouldNotBeGzippedIfContentLengthIsAddedManually	"assertNull(""STR"",contentEncoding);"	"assertNull(response.getFirstHeader(""STR""));"	47.24646592140198	0	1	0	0	0
0	5	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	"assertTrue(result.contains(""STR""));"	10.597349166870117	0	1	0	0	0
	7	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertFalse(result.isEmpty());	10.569425821304321	0	1	0	0	0
	8	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	9.550464153289795	0	1	0	0	0
	9	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(newjava.util.ArrayList<String>(),result);	27.84847402572632	0	1	0	0	0
	10	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertSame(newArrayList<String>(),result`);	11.325331926345825	0	1	0	0	0
	11	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(result.size()>0);	9.931442975997925	0	1	0	0	0
	12	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotNull(result);	18.364426136016846	0	1	0	0	0
	16	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertEquals(3,result.size());	30.57265877723694	1	0	0	0	0
	18	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertNotEquals(0,result.size());	10.138465881347656	0	1	0	0	0
	19	/	JavaCompilerOptionsTest	testSource	assertEquals(3,result.size());	assertTrue(!result.isEmpty());	10.095651865005493	0	1	0	0	0
0	1	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	142.46244764328003	0	1	0	0	0
	3	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	281.6212201118469	0	1	0	0	0
	4	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0);	146.90633296966553	0	1	0	0	0
	7	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(!tokens.isEmpty());	177.27110815048218	0	1	0	0	0
	11	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.isEmpty());	159.40008306503296	0	1	0	0	0
	13	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotNull(tokens);	321.58453011512756	0	1	0	0	0
	16	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(!tokens.isEmpty());	124.59784889221191	0	1	0	0	0
	17	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertFalse(tokens.contains(null));	154.32316279411316	0	1	0	0	0
	18	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertNotEquals(0,tokens.size());	97.3930459022522	0	1	0	0	0
	19	/	OpenKoreanProcessorJavaTest	testAddNounsToDictionary	"assertEquals(""STR"",OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());"	assertTrue(tokens.size()>0`isaplausibletokens.size()>0);	106.86699175834656	0	1	0	0	0
0	4	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNotNull(org.slf4j.LoggerFactory.getLogger(LifeCycleTest.class));	55.20020294189453	0	1	0	0	0
	5	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(org.slf4j.LoggerFactory.getLogger(LifeCycleTest.class).isTraceEnabled());	68.66489100456238	0	1	0	0	0
	6	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	73.00234079360962	0	1	0	0	0
	8	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	"assertNotEquals(""STR"",""STR"");"	76.30540800094604	0	1	0	0	0
	16	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertNull(null);	54.27876091003418	0	1	0	0	0
	21	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	54.1383900642395	0	1	0	0	0
	25	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertFalse(false);	18.743219137191772	0	1	0	0	0
	29	/	LifeCycleTest	testAvailabilityCheck	assertTrue(testFunctionAvailable(false));	assertTrue(true);	34.71285367012024	0	1	0	0	0
0	2	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotNull(context.getBean(DefaultMQProducer.class));	83.73775577545166	0	1	0	0	0
	3	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertEquals(expected,actual)`.Here'sanexample:);	13.587775945663452	0	1	0	0	0
	4	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotEquals(expected,actual)`.Here'sanexample:);	12.489374160766602	0	1	0	0	0
	5	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(condition)`.Here'sanexample:);	12.946918725967407	0	1	0	0	0
	6	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertFalse(condition)`isaplausibleisEmpty(collection));	13.598880052566528	0	1	0	0	0
	9	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertEquals(expected,actual)`isaplausibleexpected,actual);	13.733157873153687	0	1	0	0	0
	13	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotNull(TEST_TAG);	82.34230399131775	0	1	0	0	0
	14	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertEquals(expected,actual`isaplausibleexpected);	12.626720190048218	0	1	0	0	0
	16	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertTrue(condition)`.);	13.038033962249756	0	1	0	0	0
	17	/	RocketMqAutoConfigurationTest	defaultRocketMqProducer	"assertTrue(this.context.containsBean(""STR""));"	assertNotEquals(expected,actual)`?Here'sanexample:);	13.038234949111938	0	1	0	0	0
