TestID	VariantID	Project	TestClass	TestName	TrueOracle	GenOracle	Time	Corr	BuildErr
0	0	orientechnologies/orientdb	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertEquals(4,r.size());	83.86998176574707	1	0
0	1	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.size()>0);	39.68333387374878	0	0
/	2	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.isEmpty());	40.33054995536804	0	0
/	3	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotNull(r);	40.73398208618164	0	0
/	4	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotEquals(0,r.size());	40.61854600906372	0	0
/	12	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertFalse(r.contains(db));	437.16967701911926	0	0
/	14	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertNotEquals(db,r.size());	124.52545809745789	0	0
/	16	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.size()>=0);	36.695618867874146	0	0
/	20	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	assertTrue(r.size()<=10);	37.61678123474121	0	0
/	21	//	TxNonUniqueIndexWithCollationTest	testIn	assertEquals(4,r.size());	"assertNotEquals(""STR"",r.get(0).field(""STR""));"	38.918235063552856	0	0
/	2	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertTrue(index.getSize()>0);	21.779810190200806	0	0
/	3	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotNull(index);	21.241552114486694	0	0
/	4	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertFalse(index.getSize()==0);	21.65023374557495	0	0
/	5	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotEquals(0,index.getSize());	21.33104109764099	0	0
/	11	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNull(index.getFirstKey());	125.02585816383362	0	0
/	13	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertFalse(meta.isEmpty());	58.658584117889404	0	0
/	15	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	assertNotNull(meta);	221.86004090309143	0	0
/	18	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertFalse(index.getDefinition().getFields().contains(""STR""));"	65.81755495071411	0	0
/	20	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertFalse(index.getDefinition().getFields().contains(""STR""));"	66.48787307739258	0	0
/	23	//	OLuceneManualIndexTest	shouldCreateManualIndexWithJavaApi	assertEquals(index.getSize(),4);	"assertNotNull(index.get(""STR""));"	157.93183493614197	0	0
2	0	cucumber-ltd/cucumber-pro-plugin-jvm	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertEquals(""STR"",env.getOrDefault(""STR"",""STR""));"	70.94609522819519	0	0
/	1	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR""));"	13.340925216674805	0	0
/	2	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertFalse(env.isEmpty());	11.250498056411743	0	0
/	3	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	assertEquals(4,env.size());	11.491859197616577	0	0
/	4	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotNull(env.get(""STR""));"	10.8765709400177	0	0
/	5	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsValue(""STR""));"	11.088603019714355	0	0
/	6	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotEquals(""STR"",env.get(""STR""));"	11.059922218322754	0	0
/	7	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertTrue(env.containsKey(""STR"")&&env.containsKey(""STR"")&&env.containsKey(""STR"")&&env.containsKey(""STR""));"	43.79819989204407	0	0
/	8	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNull(env.get(""STR""));"	11.580949068069458	0	0
/	9	//	CiEnvironmentTest	recognises_circle	"assertEquals(""STR"",CIEnvironment.detect(env).getCiName());"	"assertNotSame(""STR"",env.get(""STR""));"	11.329205989837646	0	0
/	1	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotNull(env);	11.675343990325928	0	0
/	4	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(env.isEmpty());	11.382434129714966	0	0
/	5	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(0,env.size());	10.937761068344116	0	0
/	6	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertEquals(0,env.keySet().size());	10.918165683746338	0	0
/	7	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotEquals(0,env.values().size());	10.851469039916992	0	0
/	8	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertSame(HashMap.class,env.getClass());	11.548439025878906	0	0
/	9	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertNotSame(String.class,env.getClass());	11.457798957824707	0	0
/	14	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	assertFalse(env.containsKey(null));	11.237651824951172	0	0
/	19	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"assertTrue(env.containsKey(""STR""));"	11.237205982208252	0	0
/	20	//	CiEnvironmentTest	is_inactive_by_default	assertNull(CIEnvironment.detect(env));	"assertFalse(env.containsValue(""STR""));"	13.665844917297363	0	0
4	0	cucumber-ltd/cucumber-pro-plugin-jvm	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(yaml,config.toYaml(""STR""));"	13.494630098342896	1	0
/	3	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	assertNotNull(yaml);	34.34992218017578	0	0
/	4	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertEquals(""STR"",config);"	60.16806721687317	0	0
/	12	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.getString(""STR"").contains(""STR""));"	25.411575078964233	0	0
/	17	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.toString().startsWith(""STR""));"	105.26788091659546	0	0
/	18	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertFalse(config.toYaml(""STR"").isEmpty());"	10.960634231567383	0	0
/	19	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotSame(""STR"",config);"	36.6455442905426	0	0
/	21	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertTrue(config.toYaml(""STR"").contains(""STR""));"	11.693265914916992	0	0
/	22	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	assertFalse(yaml.isEmpty());	66.14495897293091	0	0
/	25	//	YamlConfigLoaderTest	merges	"assertEquals(yaml,config.toYaml(""STR""));"	"assertNotEquals(""STR"",yaml);"	54.010424852371216	0	0
5	0	tradier/dropwizard-raven	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertNotNull(factory.getDsn());	6.48714804649353	0	0
/	1	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	"assertEquals(""STR"",factory.getAppName());"	5.373577117919922	0	0
/	2	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertTrue(factoryinstanceofRavenAppenderFactory);	4.948421001434326	0	0
/	3	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertTrue(factoryinstanceofAbstractAppenderFactory);	5.676820993423462	0	0
/	4	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertFalse(factory.isSomeFlag());	4.929188251495361	0	0
/	5	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	"assertNotEquals(""STR"",factory.getClass().getName());"	5.9421067237854	0	0
/	6	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertNotNull(factory.getLayoutFactory());	4.937481880187988	0	0
/	7	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertNotSame(layoutFactory,factory.getLayoutFactory());	5.420812129974365	0	0
/	8	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertTrue(factory.getFilterFactories().isEmpty());	4.5535149574279785	0	0
/	9	//	RavenAppenderFactoryTest	hasValidDefaults	assertNull(factory.getDsn());	assertNotSame(LevelFilterFactory.class,factory.getLevelFilterFactory().getClass());	5.777152061462402	0	0
8	0	TeachingKidsProgramming/TeachingKidsProgramming.Source.Java	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertEquals(a,b);	11.168659210205078	1	0
8	1	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertTrue(a.equals(b));	8.528869867324829	0	0
/	4	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a);	38.78596520423889	0	0
/	5	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotNull(a);	67.42402791976929	0	0
/	18	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertArrayEquals(a.getCells(),b.getCells());	10.591856002807617	0	0
/	24	//	PuzzleTest	same_cells_means_same_puzzle	assertEquals(a,b);	assertNotEquals(ArrayList.class,a.getClass());	84.69955801963806	0	0
9	0	basis-technology-corp/tcl-regex-java	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.lookingAt());	13.672548770904541	1	0
/	3	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	18.927443027496338	0	0
/	4	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertEquals(0,matcher.regionStart());	10.373287200927734	0	0
/	5	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	"assertNotEquals(""STR"",matcher.pattern().toString());"	9.801635265350342	0	0
/	6	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(matcher.matches());	10.201412916183472	0	0
/	7	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.regionEnd()>matcher.regionStart());	9.882325172424316	0	0
/	8	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertSame(pattern,matcher.pattern());	29.297570943832397	0	0
/	11	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertFalse(pattern.pattern().isEmpty());	9.579253911972046	0	0
/	17	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertNotNull(matcher);	27.574071884155273	0	0
/	18	//	MatcherTest	lookingAt	assertTrue(matcher.lookingAt());	assertTrue(matcher.regionStart()<=matcher.regionEnd());	9.831045150756836	0	0
10	0	PeterisP/morphology	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertTrue(jāmāk.isRecognized());	14.958820104598999	1	0
10	1	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotNull(jāmāk);	284.42167019844055	0	0
/	3	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertFalse(jāmāk.wordforms.isEmpty());	9.702777862548828	0	0
/	5	//	MorphologyTest	jāmāk	assertTrue(jāmāk.isRecognized());	assertNotEquals(0,jāmāk.wordforms.size());	12.269882202148438	0	0
11	0	PeterisP/morphology	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertTrue(w.isRecognized());	12.536011934280396	1	0
11	1	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertEquals(2,w.wordforms.size());	30.83100700378418	0	0
/	2	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.wordforms.isEmpty());	10.058619976043701	0	0
/	4	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotEquals(0,w.wordforms.size());	9.347448110580444	0	0
/	5	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	"assertTrue(w.toString().contains(""STR""));"	10.02560806274414	0	0
/	6	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	"assertEquals(""STR"",w.getToken());"	17.620834827423096	0	0
/	8	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertSame(Analyzer.class,locītājs.getClass());	9.556783199310303	0	0
/	10	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertNotNull(w);	20.572962045669556	0	0
/	12	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertFalse(w.toString().isEmpty());	10.051921844482422	0	0
/	13	//	MorphologyTest	žirafe	assertTrue(w.isRecognized());	assertSame(Word.class,w.getClass());	9.81026005744934	0	0
12	0	nidi3/raml-loader	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotNull(resource);	7.52462100982666	0	0
/	1	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(resource.getPath().endsWith(""STR""));"	6.3369529247283936	0	0
/	2	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertEquals(""STR"",resource.getPath());"	6.616880893707275	0	0
/	8	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(resource.getFile().endsWith(""STR""));"	5.701682090759277	0	0
/	9	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotSame(resource,resource);	275.80591201782227	0	0
/	10	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotNull(Thread.currentThread().getContextClassLoader());	6.34128475189209	0	0
/	11	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertNotEquals(""STR"",resource.getFile());"	6.275965213775635	0	0
/	12	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	assertNotSame(null,resource);	5.910982847213745	0	0
/	13	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertTrue(resource.getProtocol().startsWith(""STR""));"	6.821043014526367	0	0
12	14	//	LoaderTest	fileNok	"assertEquals(""STR"",resource.getProtocol());"	"assertEquals(""STR"",resource.getProtocol());"	6.628089904785156	1	0
13	0	fluent/fluent-logger-java	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNotNull(logger);	6.345214128494263	0	0
/	3	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertTrue(logger.getLoggers().isEmpty());	5.43451714515686	0	0
/	9	//	TestBugfixes	validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters	assertEquals(null,logger.sender);	assertNull(logger.getSender());	5.5506110191345215	0	0
14	0	amlinv/stat-collection-utils	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotNull(this.preparer.getParameterReplacer());	3.861503839492798	1	0
14	1	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotEquals(null,this.preparer.getParameterReplacer());	5.544166803359985	0	0
/	2	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	???;	5.888226747512817	0	0
/	3	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertEquals(expectedValue,actualValue);	3.245803117752075	0	0
/	4	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertFalse(condition);	3.3649749755859375	0	0
/	5	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertTrue(condition);	3.1755592823028564	0	0
/	6	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNull(this.preparer.getParameterReplacer());	3.256392240524292	0	0
/	7	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertNotSame(expected,actual);	3.4176039695739746	0	0
/	8	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertSame(expected,actual);	3.729871988296509	0	0
/	9	//	ObjectQueryPreparerTest	testGetSetParameterReplacer	assertNotNull(this.preparer.getParameterReplacer());	assertArrayEquals(expectedArray,actualArray);	3.8050971031188965	0	0
15	0	amlinv/stat-collection-utils	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR"",mockJmxServiceUrl.toString());"	3.7321670055389404	0	0
/	1	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertTrue(mockJmxServiceUrl.toString().contains(""STR""));"	3.7098889350891113	0	0
/	2	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertNotNull(mockJmxServiceUrl.toString());	3.605940818786621	0	0
/	3	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotEquals(""STR"",mockJmxServiceUrl.toString());"	3.6621601581573486	0	0
/	4	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertFalse(mockJmxServiceUrl.toString().isEmpty());	3.714323043823242	0	0
/	5	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotSame(""STR"",mockJmxServiceUrl.toString());"	4.121086835861206	0	0
/	6	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	assertTrue(!mockJmxServiceUrl.toString().isEmpty());	3.888651132583618	0	0
/	7	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertEquals(""STR""+mockJmxServiceUrl.toString(),focal.getTargetDescription());"	4.530596017837524	0	0
/	9	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertNotEquals(""STR"",mockJmxServiceUrl.toString());"	3.946791887283325	0	0
/	10	//	JMXRemoteUrlConnectionFactoryTest	testGetTargetDescription	"assertEquals(""STR"",this.factory.getTargetDescription());"	"assertTrue(mockJmxServiceUrl.toString().startsWith(""STR""));"	3.752174139022827	0	0
16	0	hazelcast/hazelcast-simulator	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	11.84050989151001	0	0
/	2	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	38.34075093269348	0	0
/	4	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method.getReturnType()==void.class);	9.813832759857178	0	0
/	7	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method!=null);	9.472310066223145	0	0
/	8	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	353.83855271339417	0	0
/	15	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertSame(method,method);	52.658427000045776	0	0
/	18	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotSame(null,method);	10.156819105148315	0	0
/	19	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertTrue(method.isAnnotationPresent(Prepare.class));	10.549552917480469	0	0
/	23	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotNull(method);	363.37563014030457	0	0
/	27	//	AnnotatedMethodRetrieverTest	testGetAtMostOneVoidMethodSkipArgsCheck	"assertEquals(""STR"",method.getName());"	assertNotEquals(null,method);	10.808412790298462	0	0
/	5	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	9.587240934371948	0	0
/	6	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	"assertFalse(bind0(testObject,""STR"",""STR""));"	9.63942813873291	0	0
/	22	//	PropertyBindingSupport_bind0_NumericalTest	bind_int_whitespace	"assertTrue(bind0(testObject,""STR"",""STR""+NEW_LINE));"	assertNotNull(testObject);	8.970477104187012	0	0
/	1	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertEquals(7,words.size());	23.478744745254517	0	0
/	2	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertTrue(words.contains(""STR""));"	23.005373001098633	0	0
/	3	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertNotEquals(0,words.size());	23.135735034942627	0	0
/	4	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertTrue(!words.isEmpty());	22.350204944610596	0	0
/	5	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertFalse(words.contains(""STR""));"	23.08569312095642	0	0
/	6	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	assertNotNull(words);	23.658013820648193	0	0
/	9	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertTrue(words.get(0).equals(""STR""));"	23.566838026046753	0	0
/	11	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(""STR"",words.get(0));"	23.89621877670288	0	0
/	12	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertNotEquals(""STR"",words.get(1));"	70.44357466697693	0	0
/	13	//	OpenKoreanProcessorJavaTest	testDetokenizer	"assertEquals(""STR"",OpenKoreanTextProcessorJava.detokenize(words));"	"assertEquals(Arrays.asList(""STR"",""STR"",""STR"",""STR"",""STR"",""STR"",""STR""),words);"	24.486052989959717	0	0
20	0	NanoHttpd/nanohttpd	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertNotNull(httpget.getHeaders(""STR""));"	160.63130903244019	0	0
/	6	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(this.testServer.cookiesToSend.get(0).toString().equals(""STR""));"	471.2583439350128	0	0
/	7	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertEquals(4,this.testServer.cookiesToSend.size());	12.840513944625854	0	0
/	9	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotEquals(0,this.httpclient.getCookieStore().getCookies().size());	14.522463083267212	0	0
/	10	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(responseHandler.toString().contains(""STR""));"	14.17801022529602	0	0
/	11	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertTrue(this.testServer.cookiesToSend.contains(httpget));	82.23344469070435	0	0
/	12	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertFalse(responseHandler.toString().isEmpty());	13.315173149108887	0	0
/	13	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(responseHandler);	423.240473985672	0	0
/	15	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	"assertTrue(httpget.getRequestLine().toString().contains(""STR""));"	14.200998067855835	0	0
/	19	//	CookieIntegrationTest	testMultipleCookieSentBackToClient	assertEquals(4,this.httpclient.getCookieStore().getCookies().size());	assertNotNull(httpclient);	13.095881938934326	0	0
/	9	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties);	141.63853883743286	0	0
/	10	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertFalse(properties.isEmpty());	12.776838779449463	0	0
/	11	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	11.25081205368042	0	0
/	13	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertNotNull(properties.getProperty(""STR""));"	10.846593141555786	0	0
/	15	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	10.42143201828003	0	0
/	16	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertFalse(properties.getProperty(""STR"").isEmpty());"	9.895766019821167	0	0
/	18	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	10.102697372436523	0	0
/	21	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertNotNull(properties);	137.02758193016052	0	0
/	23	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	assertTrue(properties.size()>0);	9.939571857452393	0	0
/	28	//	ShippableTest	testGetEnvironment	assertEquals(5,properties.size());	"assertTrue(properties.containsKey(""STR""));"	10.782976150512695	0	0
23	0	spring-cloud/spring-cloud-security	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotNull(oAuth2AccessToken);	12.804633855819702	0	0
/	1	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(oAuth2AccessTokeninstanceofOAuth2AccessToken);	7.209384918212891	0	0
/	2	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotEquals(null,oAuth2AccessToken);	6.623021125793457	0	0
/	3	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertTrue(oAuth2AccessToken!=null&&!oAuth2AccessToken.isExpired());	7.557522296905518	0	0
/	4	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertSame(mockedToken,oAuth2FeignRequestInterceptor.acquireAccessToken());	7.395875930786133	0	0
/	5	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertEquals(mockedToken.getValue(),oAuth2FeignRequestInterceptor.extract(""STR""));"	8.054009199142456	0	0
/	6	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertNotSame(mockedToken,oAuth2FeignRequestInterceptor.getToken());	7.17279314994812	0	0
/	7	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	assertFalse(oAuth2FeignRequestInterceptor.getToken()==null);	7.152015924453735	0	0
/	8	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertSame(oAuth2FeignRequestInterceptor,requestTemplate.header(""STR"",""STR""+oAuth2AccessToken.getValue()).headers().get(""STR""));"	8.17320203781128	0	0
/	9	//	OAuth2FeignRequestInterceptorTests	tryToAcquireToken	"assertTrue(oAuth2AccessToken.getValue()+""STR"",oAuth2AccessToken.getValue()==null);"	"assertNotEquals(""STR"",oAuth2ClientContext.getPreservedState(""STR""));"	6.69476318359375	0	0
/	2	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(null,event);	6.59329891204834	0	0
24	7	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	8.951996088027954	1	0
/	8	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNull(event);	20.535111904144287	1	0
/	22	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertNotEquals(parser,event);	47.42085409164429	0	0
/	26	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertEquals(null,event);	81.04612278938293	0	0
/	28	//	CEFParserTest	invalidMessageValidationTest	assertNull(event);	assertFalse(event!=null);	6.915421962738037	0	0
/	4	//	HandleHtmlInlineTagsTest	testInlineTagsWithMarkdown	"assertEquals(""STR"",m.markdown(""STR"").trim());"	assertNotNull(m);	12.957108974456787	0	0
/	2	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().endsWith(""STR""));"	7.799790859222412	0	0
/	3	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(""STR"".equals(node.getPath()));"	19.93844699859619	0	0
/	4	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertNotNull(node);	6.0121119022369385	0	0
/	7	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertFalse(""STR"".equals(node.getPath()));"	59.88996386528015	0	0
/	8	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	12.77973985671997	0	0
/	9	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR""+""STR"",node.getPath().substring(""STR"".length()));"	14.88772702217102	0	0
/	15	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertTrue(node.getPath().contains(""STR""));"	6.6656410694122314	0	0
/	18	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertEquals(""STR"",node.getPath().replaceAll(""STR"",""STR"").substring(29,32).equals(""STR""));"	57.108997106552124	0	0
/	19	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	"assertNotSame(""STR"",node.getPath());"	13.538648128509521	0	0
/	21	//	MultiPathNodeTest	commonPath	"assertEquals(""STR"",node.getPath());"	assertFalse(node.getPath().isEmpty());	6.978760242462158	0	0
/	2	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs.getAppName());	6.201385974884033	0	0
/	3	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs);	12.138257026672363	0	0
/	5	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertNotNull(execs.getAppName());	16.078993797302246	0	0
/	6	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertTrue(execs.getAppName().length()>0);	6.11512303352356	0	0
/	7	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotEquals(""STR"",execs.getAppName());"	6.615897178649902	0	0
/	9	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	assertFalse(execs.getAppName().isEmpty());	5.759214162826538	0	0
/	10	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotSame(""STR"",execs.getAppName());"	6.174645185470581	0	0
/	15	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertFalse(execs.getAppName().contains(""STR""));"	5.411391258239746	0	0
/	19	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertNotEquals(execs.getAppName(),""STR"");"	5.657153844833374	0	0
/	26	//	Test_ExecS	testCliAppName	"assertEquals(""STR"",execs.getAppName());"	"assertFalse(execs.getAppName().equals(""STR""));"	5.757345914840698	0	0
